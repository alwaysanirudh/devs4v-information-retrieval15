#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH2.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH2::class$ = NULL;
          jmethodID *NormalizationH2::mids$ = NULL;
          bool NormalizationH2::live$ = false;

          jclass NormalizationH2::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH2");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getC_54c6a176] = env->getMethodID(cls, "getC", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH2::NormalizationH2() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationH2::NormalizationH2(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationH2::getC() const
          {
            return env->callFloatMethod(this$, mids$[mid_getC_54c6a176]);
          }

          jfloat NormalizationH2::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH2::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH2_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH2_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH2_init_(t_NormalizationH2 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH2_getC(t_NormalizationH2 *self);
          static PyObject *t_NormalizationH2_tfn(t_NormalizationH2 *self, PyObject *args);
          static PyObject *t_NormalizationH2_toString(t_NormalizationH2 *self, PyObject *args);
          static PyObject *t_NormalizationH2_get__c(t_NormalizationH2 *self, void *data);
          static PyGetSetDef t_NormalizationH2__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH2, c),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH2__methods_[] = {
            DECLARE_METHOD(t_NormalizationH2, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH2, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH2, getC, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH2, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH2, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationH2, t_NormalizationH2, ::org::apache::lucene::search::similarities::Normalization, NormalizationH2, t_NormalizationH2_init_, 0, 0, t_NormalizationH2__fields_, 0, 0);

          void t_NormalizationH2::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH2), module, "NormalizationH2", 0);
          }

          void t_NormalizationH2::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationH2).tp_dict, "class_", make_descriptor(NormalizationH2::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationH2).tp_dict, "wrapfn_", make_descriptor(t_NormalizationH2::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationH2).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH2_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH2::initializeClass, 1)))
              return NULL;
            return t_NormalizationH2::wrap_Object(NormalizationH2(((t_NormalizationH2 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH2_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH2::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH2_init_(t_NormalizationH2 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH2 object((jobject) NULL);

                INT_CALL(object = NormalizationH2());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationH2 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH2(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH2_getC(t_NormalizationH2 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getC());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH2_tfn(t_NormalizationH2 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationH2), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH2_toString(t_NormalizationH2 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationH2), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH2_get__c(t_NormalizationH2 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getC());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemFilterFactory::class$ = NULL;
          jmethodID *GreekStemFilterFactory::mids$ = NULL;
          bool GreekStemFilterFactory::live$ = false;

          jclass GreekStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemFilterFactory::GreekStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GreekStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemFilterFactory_init_(t_GreekStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemFilterFactory_create(t_GreekStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GreekStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GreekStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekStemFilterFactory, t_GreekStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GreekStemFilterFactory, t_GreekStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GreekStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemFilterFactory), module, "GreekStemFilterFactory", 0);
          }

          void t_GreekStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekStemFilterFactory).tp_dict, "class_", make_descriptor(GreekStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GreekStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GreekStemFilterFactory::wrap_Object(GreekStemFilterFactory(((t_GreekStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GreekStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemFilterFactory_init_(t_GreekStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GreekStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GreekStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekStemFilterFactory_create(t_GreekStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GreekStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene45/Lucene45Codec.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {

          ::java::lang::Class *Lucene45Codec::class$ = NULL;
          jmethodID *Lucene45Codec::mids$ = NULL;
          bool Lucene45Codec::live$ = false;

          jclass Lucene45Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene45/Lucene45Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene45Codec::Lucene45Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene45Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene45Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene45Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene45Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene45Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene45Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene45Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene45Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene45Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene45Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {
          static PyObject *t_Lucene45Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene45Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene45Codec_init_(t_Lucene45Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene45Codec_docValuesFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_fieldInfosFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_getDocValuesFormatForField(t_Lucene45Codec *self, PyObject *arg);
          static PyObject *t_Lucene45Codec_getPostingsFormatForField(t_Lucene45Codec *self, PyObject *arg);
          static PyObject *t_Lucene45Codec_liveDocsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_normsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_postingsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_segmentInfoFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_storedFieldsFormat(t_Lucene45Codec *self, PyObject *args);
          static PyObject *t_Lucene45Codec_termVectorsFormat(t_Lucene45Codec *self, PyObject *args);

          static PyMethodDef t_Lucene45Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene45Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene45Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene45Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene45Codec, t_Lucene45Codec, ::org::apache::lucene::codecs::Codec, Lucene45Codec, t_Lucene45Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene45Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene45Codec), module, "Lucene45Codec", 0);
          }

          void t_Lucene45Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene45Codec).tp_dict, "class_", make_descriptor(Lucene45Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene45Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene45Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene45Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene45Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene45Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene45Codec::wrap_Object(Lucene45Codec(((t_Lucene45Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene45Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene45Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene45Codec_init_(t_Lucene45Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene45Codec object((jobject) NULL);

            INT_CALL(object = Lucene45Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene45Codec_docValuesFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_fieldInfosFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_getDocValuesFormatForField(t_Lucene45Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene45Codec_getPostingsFormatForField(t_Lucene45Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene45Codec_liveDocsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_normsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_postingsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_segmentInfoFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_storedFieldsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene45Codec_termVectorsFormat(t_Lucene45Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinSortField.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinSortField::class$ = NULL;
          jmethodID *ToParentBlockJoinSortField::mids$ = NULL;
          bool ToParentBlockJoinSortField::live$ = false;

          jclass ToParentBlockJoinSortField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinSortField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_71ee501b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZLorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_init$_f8b18760] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZZLorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinSortField::ToParentBlockJoinSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, const ::org::apache::lucene::search::Filter & a3, const ::org::apache::lucene::search::Filter & a4) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_71ee501b, a0.this$, a1.this$, a2, a3.this$, a4.this$)) {}

          ToParentBlockJoinSortField::ToParentBlockJoinSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::search::Filter & a4, const ::org::apache::lucene::search::Filter & a5) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_f8b18760, a0.this$, a1.this$, a2, a3, a4.this$, a5.this$)) {}

          ::org::apache::lucene::search::FieldComparator ToParentBlockJoinSortField::getComparator(jint a0, jint a1) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinSortField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinSortField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToParentBlockJoinSortField_init_(t_ToParentBlockJoinSortField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinSortField_getComparator(t_ToParentBlockJoinSortField *self, PyObject *args);

          static PyMethodDef t_ToParentBlockJoinSortField__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinSortField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinSortField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinSortField, getComparator, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinSortField, t_ToParentBlockJoinSortField, ::org::apache::lucene::search::SortField, ToParentBlockJoinSortField, t_ToParentBlockJoinSortField_init_, 0, 0, 0, 0, 0);

          void t_ToParentBlockJoinSortField::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinSortField), module, "ToParentBlockJoinSortField", 0);
          }

          void t_ToParentBlockJoinSortField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinSortField).tp_dict, "class_", make_descriptor(ToParentBlockJoinSortField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinSortField).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinSortField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinSortField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinSortField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinSortField::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinSortField::wrap_Object(ToParentBlockJoinSortField(((t_ToParentBlockJoinSortField *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinSortField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinSortField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToParentBlockJoinSortField_init_(t_ToParentBlockJoinSortField *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                ::org::apache::lucene::search::Filter a3((jobject) NULL);
                ::org::apache::lucene::search::Filter a4((jobject) NULL);
                ToParentBlockJoinSortField object((jobject) NULL);

                if (!parseArgs(args, "sKZkk", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &a4))
                {
                  INT_CALL(object = ToParentBlockJoinSortField(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::search::Filter a4((jobject) NULL);
                ::org::apache::lucene::search::Filter a5((jobject) NULL);
                ToParentBlockJoinSortField object((jobject) NULL);

                if (!parseArgs(args, "sKZZkk", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = ToParentBlockJoinSortField(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinSortField_getComparator(t_ToParentBlockJoinSortField *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getComparator(a0, a1));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinSortField), (PyObject *) self, "getComparator", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValue::class$ = NULL;
          jmethodID *MutableValue::mids$ = NULL;
          jfieldID *MutableValue::fids$ = NULL;
          bool MutableValue::live$ = false;

          jclass MutableValue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_compareTo_d590ce63] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/mutable/MutableValue;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_exists_54c6a16a] = env->getMethodID(cls, "exists", "()Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_exists] = env->getFieldID(cls, "exists", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValue::MutableValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValue::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          jint MutableValue::compareTo(const MutableValue & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_d590ce63], a0.this$);
          }

          void MutableValue::copy(const MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          MutableValue MutableValue::duplicate() const
          {
            return MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValue::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jboolean MutableValue::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jboolean MutableValue::exists() const
          {
            return env->callBooleanMethod(this$, mids$[mid_exists_54c6a16a]);
          }

          jint MutableValue::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValue::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          ::java::lang::String MutableValue::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jboolean MutableValue::_get_exists() const
          {
            return env->getBooleanField(this$, fids$[fid_exists]);
          }

          void MutableValue::_set_exists(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_exists], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValue_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValue_init_(t_MutableValue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValue_compareSameType(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_compareTo(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_copy(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_duplicate(t_MutableValue *self);
          static PyObject *t_MutableValue_equals(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_equalsSameType(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_exists(t_MutableValue *self);
          static PyObject *t_MutableValue_hashCode(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_toObject(t_MutableValue *self);
          static PyObject *t_MutableValue_toString(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_get__exists(t_MutableValue *self, void *data);
          static int t_MutableValue_set__exists(t_MutableValue *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValue__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValue, exists),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValue__methods_[] = {
            DECLARE_METHOD(t_MutableValue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValue, compareSameType, METH_O),
            DECLARE_METHOD(t_MutableValue, compareTo, METH_O),
            DECLARE_METHOD(t_MutableValue, copy, METH_O),
            DECLARE_METHOD(t_MutableValue, duplicate, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, equals, METH_VARARGS),
            DECLARE_METHOD(t_MutableValue, equalsSameType, METH_O),
            DECLARE_METHOD(t_MutableValue, exists, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValue, toObject, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValue, t_MutableValue, ::java::lang::Object, MutableValue, t_MutableValue_init_, 0, 0, t_MutableValue__fields_, 0, 0);

          void t_MutableValue::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValue), module, "MutableValue", 0);
          }

          void t_MutableValue::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValue).tp_dict, "class_", make_descriptor(MutableValue::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValue).tp_dict, "wrapfn_", make_descriptor(t_MutableValue::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValue).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValue::initializeClass, 1)))
              return NULL;
            return t_MutableValue::wrap_Object(MutableValue(((t_MutableValue *) arg)->object.this$));
          }
          static PyObject *t_MutableValue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValue_init_(t_MutableValue *self, PyObject *args, PyObject *kwds)
          {
            MutableValue object((jobject) NULL);

            INT_CALL(object = MutableValue());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValue_compareSameType(t_MutableValue *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareSameType", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_compareTo(t_MutableValue *self, PyObject *arg)
          {
            MutableValue a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_copy(t_MutableValue *self, PyObject *arg)
          {
            MutableValue a0((jobject) NULL);

            if (!parseArg(arg, "k", MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copy", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_duplicate(t_MutableValue *self)
          {
            MutableValue result((jobject) NULL);
            OBJ_CALL(result = self->object.duplicate());
            return t_MutableValue::wrap_Object(result);
          }

          static PyObject *t_MutableValue_equals(t_MutableValue *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValue), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MutableValue_equalsSameType(t_MutableValue *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "equalsSameType", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_exists(t_MutableValue *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.exists());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_MutableValue_hashCode(t_MutableValue *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValue), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValue_toObject(t_MutableValue *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.toObject());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_MutableValue_toString(t_MutableValue *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(MutableValue), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_MutableValue_get__exists(t_MutableValue *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_exists());
            Py_RETURN_BOOL(value);
          }
          static int t_MutableValue_set__exists(t_MutableValue *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_exists(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "exists", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/FieldQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *FieldQueryNodeBuilder::class$ = NULL;
              jmethodID *FieldQueryNodeBuilder::mids$ = NULL;
              bool FieldQueryNodeBuilder::live$ = false;

              jclass FieldQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/FieldQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_0cc6eb13] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldQueryNodeBuilder::FieldQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::TermQuery FieldQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_build_0cc6eb13], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_FieldQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldQueryNodeBuilder_init_(t_FieldQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldQueryNodeBuilder_build(t_FieldQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_FieldQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_FieldQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldQueryNodeBuilder, t_FieldQueryNodeBuilder, ::java::lang::Object, FieldQueryNodeBuilder, t_FieldQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_FieldQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldQueryNodeBuilder), module, "FieldQueryNodeBuilder", 0);
              }

              void t_FieldQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldQueryNodeBuilder).tp_dict, "class_", make_descriptor(FieldQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_FieldQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_FieldQueryNodeBuilder::wrap_Object(FieldQueryNodeBuilder(((t_FieldQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_FieldQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldQueryNodeBuilder_init_(t_FieldQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                FieldQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = FieldQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_FieldQueryNodeBuilder_build(t_FieldQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/similarities/PythonDefaultSimilarity.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *PythonDefaultSimilarity::class$ = NULL;
          jmethodID *PythonDefaultSimilarity::mids$ = NULL;
          bool PythonDefaultSimilarity::live$ = false;

          jclass PythonDefaultSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/similarities/PythonDefaultSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_idf_a7e12cb4] = env->getMethodID(cls, "idf", "(JJ)F");
              mids$[mid_idfExplain_be4c9f2b] = env->getMethodID(cls, "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lengthNorm_6ff84e02] = env->getMethodID(cls, "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_sloppyFreq_39c7bd2c] = env->getMethodID(cls, "sloppyFreq", "(I)F");
              mids$[mid_tf_06298cbb] = env->getMethodID(cls, "tf", "(F)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonDefaultSimilarity::PythonDefaultSimilarity() : ::org::apache::lucene::search::similarities::DefaultSimilarity(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat PythonDefaultSimilarity::coord(jint a0, jint a1) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_coord_d8d154b6], a0, a1);
          }

          void PythonDefaultSimilarity::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jfloat PythonDefaultSimilarity::idf(jlong a0, jlong a1) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_idf_a7e12cb4], a0, a1);
          }

          ::org::apache::lucene::search::Explanation PythonDefaultSimilarity::idfExplain(const ::org::apache::lucene::search::CollectionStatistics & a0, const JArray< ::org::apache::lucene::search::TermStatistics > & a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callNonvirtualObjectMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::TFIDFSimilarity::mids$[::org::apache::lucene::search::similarities::TFIDFSimilarity::mid_idfExplain_be4c9f2b], a0.this$, a1.this$));
          }

          jfloat PythonDefaultSimilarity::lengthNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_lengthNorm_6ff84e02], a0.this$);
          }

          jlong PythonDefaultSimilarity::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonDefaultSimilarity::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }

          jfloat PythonDefaultSimilarity::queryNorm(jfloat a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_queryNorm_06298cbb], a0);
          }

          jfloat PythonDefaultSimilarity::sloppyFreq(jint a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_sloppyFreq_39c7bd2c], a0);
          }

          jfloat PythonDefaultSimilarity::tf(jfloat a0) const
          {
            return env->callNonvirtualFloatMethod(this$, (jclass) ::org::apache::lucene::search::similarities::DefaultSimilarity::class$->this$, ::org::apache::lucene::search::similarities::DefaultSimilarity::mids$[::org::apache::lucene::search::similarities::DefaultSimilarity::mid_tf_06298cbb], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace similarities {
          static PyObject *t_PythonDefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonDefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonDefaultSimilarity_init_(t_PythonDefaultSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonDefaultSimilarity_coord(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_finalize(t_PythonDefaultSimilarity *self);
          static PyObject *t_PythonDefaultSimilarity_idf(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_idfExplain(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_lengthNorm(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_pythonExtension(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_queryNorm(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_sloppyFreq(t_PythonDefaultSimilarity *self, PyObject *args);
          static PyObject *t_PythonDefaultSimilarity_tf(t_PythonDefaultSimilarity *self, PyObject *args);
          static jfloat JNICALL t_PythonDefaultSimilarity_coord0(JNIEnv *jenv, jobject jobj, jint a0, jint a1);
          static jfloat JNICALL t_PythonDefaultSimilarity_idf1(JNIEnv *jenv, jobject jobj, jlong a0, jlong a1);
          static jobject JNICALL t_PythonDefaultSimilarity_idfExplain2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static jfloat JNICALL t_PythonDefaultSimilarity_lengthNorm3(JNIEnv *jenv, jobject jobj, jobject a0);
          static void JNICALL t_PythonDefaultSimilarity_pythonDecRef4(JNIEnv *jenv, jobject jobj);
          static jfloat JNICALL t_PythonDefaultSimilarity_queryNorm5(JNIEnv *jenv, jobject jobj, jfloat a0);
          static jfloat JNICALL t_PythonDefaultSimilarity_sloppyFreq6(JNIEnv *jenv, jobject jobj, jint a0);
          static jfloat JNICALL t_PythonDefaultSimilarity_tf7(JNIEnv *jenv, jobject jobj, jfloat a0);
          static PyObject *t_PythonDefaultSimilarity_get__self(t_PythonDefaultSimilarity *self, void *data);
          static PyGetSetDef t_PythonDefaultSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_PythonDefaultSimilarity, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonDefaultSimilarity__methods_[] = {
            DECLARE_METHOD(t_PythonDefaultSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, idf, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, idfExplain, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, lengthNorm, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, pythonExtension, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, queryNorm, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, sloppyFreq, METH_VARARGS),
            DECLARE_METHOD(t_PythonDefaultSimilarity, tf, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonDefaultSimilarity, t_PythonDefaultSimilarity, ::org::apache::lucene::search::similarities::DefaultSimilarity, PythonDefaultSimilarity, t_PythonDefaultSimilarity_init_, 0, 0, t_PythonDefaultSimilarity__fields_, 0, 0);

          void t_PythonDefaultSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonDefaultSimilarity), module, "PythonDefaultSimilarity", 1);
          }

          void t_PythonDefaultSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonDefaultSimilarity).tp_dict, "class_", make_descriptor(PythonDefaultSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonDefaultSimilarity).tp_dict, "wrapfn_", make_descriptor(t_PythonDefaultSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonDefaultSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonDefaultSimilarity::initializeClass);
            JNINativeMethod methods[] = {
              { "coord", "(II)F", (void *) t_PythonDefaultSimilarity_coord0 },
              { "idf", "(JJ)F", (void *) t_PythonDefaultSimilarity_idf1 },
              { "idfExplain", "(Lorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/Explanation;", (void *) t_PythonDefaultSimilarity_idfExplain2 },
              { "lengthNorm", "(Lorg/apache/lucene/index/FieldInvertState;)F", (void *) t_PythonDefaultSimilarity_lengthNorm3 },
              { "pythonDecRef", "()V", (void *) t_PythonDefaultSimilarity_pythonDecRef4 },
              { "queryNorm", "(F)F", (void *) t_PythonDefaultSimilarity_queryNorm5 },
              { "sloppyFreq", "(I)F", (void *) t_PythonDefaultSimilarity_sloppyFreq6 },
              { "tf", "(F)F", (void *) t_PythonDefaultSimilarity_tf7 },
            };
            env->registerNatives(cls, methods, 8);
          }

          static PyObject *t_PythonDefaultSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonDefaultSimilarity::initializeClass, 1)))
              return NULL;
            return t_PythonDefaultSimilarity::wrap_Object(PythonDefaultSimilarity(((t_PythonDefaultSimilarity *) arg)->object.this$));
          }
          static PyObject *t_PythonDefaultSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonDefaultSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonDefaultSimilarity_init_(t_PythonDefaultSimilarity *self, PyObject *args, PyObject *kwds)
          {
            PythonDefaultSimilarity object((jobject) NULL);

            INT_CALL(object = PythonDefaultSimilarity());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonDefaultSimilarity_coord(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "coord", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_finalize(t_PythonDefaultSimilarity *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonDefaultSimilarity_idf(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jfloat result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.idf(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "idf", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_idfExplain(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::CollectionStatistics a0((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a1((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.idfExplain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "idfExplain", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_lengthNorm(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lengthNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "lengthNorm", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_pythonExtension(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static PyObject *t_PythonDefaultSimilarity_queryNorm(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "queryNorm", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_sloppyFreq(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jint a0;
            jfloat result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.sloppyFreq(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "sloppyFreq", args, 2);
          }

          static PyObject *t_PythonDefaultSimilarity_tf(t_PythonDefaultSimilarity *self, PyObject *args)
          {
            jfloat a0;
            jfloat result;

            if (!parseArgs(args, "F", &a0))
            {
              OBJ_CALL(result = self->object.tf(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(PythonDefaultSimilarity), (PyObject *) self, "tf", args, 2);
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_coord0(JNIEnv *jenv, jobject jobj, jint a0, jint a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "coord", "ii", (int) a0, (int) a1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("coord", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_idf1(JNIEnv *jenv, jobject jobj, jlong a0, jlong a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "idf", "LL", (long long) a0, (long long) a1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("idf", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jobject JNICALL t_PythonDefaultSimilarity_idfExplain2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::org::apache::lucene::search::Explanation value((jobject) NULL);
            PyObject *o0 = ::org::apache::lucene::search::t_CollectionStatistics::wrap_Object(::org::apache::lucene::search::CollectionStatistics(a0));
            PyObject *o1 = JArray<jobject>(a1).wrap(::org::apache::lucene::search::t_TermStatistics::wrap_jobject);
            PyObject *result = PyObject_CallMethod(obj, "idfExplain", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::org::apache::lucene::search::Explanation::initializeClass, &value))
            {
              throwTypeError("idfExplain", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_lengthNorm3(JNIEnv *jenv, jobject jobj, jobject a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *o0 = ::org::apache::lucene::index::t_FieldInvertState::wrap_Object(::org::apache::lucene::index::FieldInvertState(a0));
            PyObject *result = PyObject_CallMethod(obj, "lengthNorm", "O", o0);
            Py_DECREF(o0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("lengthNorm", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static void JNICALL t_PythonDefaultSimilarity_pythonDecRef4(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_queryNorm5(JNIEnv *jenv, jobject jobj, jfloat a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "queryNorm", "f", (float) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("queryNorm", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_sloppyFreq6(JNIEnv *jenv, jobject jobj, jint a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "sloppyFreq", "i", (int) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("sloppyFreq", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static jfloat JNICALL t_PythonDefaultSimilarity_tf7(JNIEnv *jenv, jobject jobj, jfloat a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonDefaultSimilarity::mids$[PythonDefaultSimilarity::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jfloat value;
            PyObject *result = PyObject_CallMethod(obj, "tf", "f", (float) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "F", &value))
            {
              throwTypeError("tf", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jfloat) 0;
          }

          static PyObject *t_PythonDefaultSimilarity_get__self(t_PythonDefaultSimilarity *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MergedIterator.h"
#include "java/lang/Comparable.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MergedIterator::class$ = NULL;
        jmethodID *MergedIterator::mids$ = NULL;
        bool MergedIterator::live$ = false;

        jclass MergedIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MergedIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_1b3aeeed] = env->getMethodID(cls, "<init>", "([Ljava/util/Iterator;)V");
            mids$[mid_init$_287ab92a] = env->getMethodID(cls, "<init>", "(Z[Ljava/util/Iterator;)V");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_c6fd33d8] = env->getMethodID(cls, "next", "()Ljava/lang/Comparable;");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergedIterator::MergedIterator(const JArray< ::java::util::Iterator > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1b3aeeed, a0.this$)) {}

        MergedIterator::MergedIterator(jboolean a0, const JArray< ::java::util::Iterator > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_287ab92a, a0, a1.this$)) {}

        jboolean MergedIterator::hasNext() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
        }

        ::java::lang::Comparable MergedIterator::next() const
        {
          return ::java::lang::Comparable(env->callObjectMethod(this$, mids$[mid_next_c6fd33d8]));
        }

        void MergedIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MergedIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergedIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergedIterator_of_(t_MergedIterator *self, PyObject *args);
        static int t_MergedIterator_init_(t_MergedIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergedIterator_hasNext(t_MergedIterator *self);
        static PyObject *t_MergedIterator_next(t_MergedIterator *self);
        static PyObject *t_MergedIterator_remove(t_MergedIterator *self);
        static PyObject *t_MergedIterator_get__parameters_(t_MergedIterator *self, void *data);
        static PyGetSetDef t_MergedIterator__fields_[] = {
          DECLARE_GET_FIELD(t_MergedIterator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergedIterator__methods_[] = {
          DECLARE_METHOD(t_MergedIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergedIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergedIterator, of_, METH_VARARGS),
          DECLARE_METHOD(t_MergedIterator, hasNext, METH_NOARGS),
          DECLARE_METHOD(t_MergedIterator, next, METH_NOARGS),
          DECLARE_METHOD(t_MergedIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergedIterator, t_MergedIterator, ::java::lang::Object, MergedIterator, t_MergedIterator_init_, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Comparable >), t_MergedIterator__fields_, 0, 0);
        PyObject *t_MergedIterator::wrap_Object(const MergedIterator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergedIterator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergedIterator *self = (t_MergedIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MergedIterator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MergedIterator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MergedIterator *self = (t_MergedIterator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MergedIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(MergedIterator), module, "MergedIterator", 0);
        }

        void t_MergedIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergedIterator).tp_dict, "class_", make_descriptor(MergedIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergedIterator).tp_dict, "wrapfn_", make_descriptor(t_MergedIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergedIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergedIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergedIterator::initializeClass, 1)))
            return NULL;
          return t_MergedIterator::wrap_Object(MergedIterator(((t_MergedIterator *) arg)->object.this$));
        }
        static PyObject *t_MergedIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergedIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergedIterator_of_(t_MergedIterator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MergedIterator_init_(t_MergedIterator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::util::Iterator > a0((jobject) NULL);
              PyTypeObject **p0;
              MergedIterator object((jobject) NULL);

              if (!parseArgs(args, "[K", ::java::util::Iterator::initializeClass, &a0, &p0, ::java::util::t_Iterator::parameters_))
              {
                INT_CALL(object = MergedIterator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jboolean a0;
              JArray< ::java::util::Iterator > a1((jobject) NULL);
              PyTypeObject **p1;
              MergedIterator object((jobject) NULL);

              if (!parseArgs(args, "Z[K", ::java::util::Iterator::initializeClass, &a0, &a1, &p1, ::java::util::t_Iterator::parameters_))
              {
                INT_CALL(object = MergedIterator(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergedIterator_hasNext(t_MergedIterator *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNext());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergedIterator_next(t_MergedIterator *self)
        {
          ::java::lang::Comparable result((jobject) NULL);
          OBJ_CALL(result = self->object.next());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Comparable::wrap_Object(result);
        }

        static PyObject *t_MergedIterator_remove(t_MergedIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }
        static PyObject *t_MergedIterator_get__parameters_(t_MergedIterator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/Hyphenation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *Hyphenation::class$ = NULL;
            jmethodID *Hyphenation::mids$ = NULL;
            bool Hyphenation::live$ = false;

            jclass Hyphenation::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/Hyphenation");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getHyphenationPoints_dab10e75] = env->getMethodID(cls, "getHyphenationPoints", "()[I");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JArray< jint > Hyphenation::getHyphenationPoints() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getHyphenationPoints_dab10e75]));
            }

            jint Hyphenation::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_Hyphenation_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphenation_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Hyphenation_getHyphenationPoints(t_Hyphenation *self);
            static PyObject *t_Hyphenation_length(t_Hyphenation *self);
            static PyObject *t_Hyphenation_get__hyphenationPoints(t_Hyphenation *self, void *data);
            static PyGetSetDef t_Hyphenation__fields_[] = {
              DECLARE_GET_FIELD(t_Hyphenation, hyphenationPoints),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Hyphenation__methods_[] = {
              DECLARE_METHOD(t_Hyphenation, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphenation, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Hyphenation, getHyphenationPoints, METH_NOARGS),
              DECLARE_METHOD(t_Hyphenation, length, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Hyphenation, t_Hyphenation, ::java::lang::Object, Hyphenation, abstract_init, 0, 0, t_Hyphenation__fields_, 0, 0);

            void t_Hyphenation::install(PyObject *module)
            {
              installType(&PY_TYPE(Hyphenation), module, "Hyphenation", 0);
            }

            void t_Hyphenation::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Hyphenation).tp_dict, "class_", make_descriptor(Hyphenation::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Hyphenation).tp_dict, "wrapfn_", make_descriptor(t_Hyphenation::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Hyphenation).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Hyphenation_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Hyphenation::initializeClass, 1)))
                return NULL;
              return t_Hyphenation::wrap_Object(Hyphenation(((t_Hyphenation *) arg)->object.this$));
            }
            static PyObject *t_Hyphenation_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Hyphenation::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Hyphenation_getHyphenationPoints(t_Hyphenation *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getHyphenationPoints());
              return result.wrap();
            }

            static PyObject *t_Hyphenation_length(t_Hyphenation *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_Hyphenation_get__hyphenationPoints(t_Hyphenation *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getHyphenationPoints());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenizer.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenizer::class$ = NULL;
        jmethodID *PythonTokenizer::mids$ = NULL;
        bool PythonTokenizer::live$ = false;

        jclass PythonTokenizer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenizer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenizer::PythonTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

        void PythonTokenizer::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonTokenizer::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonTokenizer::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenizer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenizer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenizer_init_(t_PythonTokenizer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenizer_finalize(t_PythonTokenizer *self);
        static PyObject *t_PythonTokenizer_pythonExtension(t_PythonTokenizer *self, PyObject *args);
        static jboolean JNICALL t_PythonTokenizer_incrementToken0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenizer_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenizer_get__self(t_PythonTokenizer *self, void *data);
        static PyGetSetDef t_PythonTokenizer__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenizer, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenizer__methods_[] = {
          DECLARE_METHOD(t_PythonTokenizer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenizer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenizer, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenizer, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonTokenizer, t_PythonTokenizer, ::org::apache::lucene::analysis::Tokenizer, PythonTokenizer, t_PythonTokenizer_init_, 0, 0, t_PythonTokenizer__fields_, 0, 0);

        void t_PythonTokenizer::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenizer), module, "PythonTokenizer", 1);
        }

        void t_PythonTokenizer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonTokenizer).tp_dict, "class_", make_descriptor(PythonTokenizer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PythonTokenizer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenizer::initializeClass);
          JNINativeMethod methods[] = {
            { "incrementToken", "()Z", (void *) t_PythonTokenizer_incrementToken0 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenizer_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonTokenizer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenizer::initializeClass, 1)))
            return NULL;
          return t_PythonTokenizer::wrap_Object(PythonTokenizer(((t_PythonTokenizer *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenizer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenizer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenizer_init_(t_PythonTokenizer *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::Reader a0((jobject) NULL);
          PythonTokenizer object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
          {
            INT_CALL(object = PythonTokenizer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenizer_finalize(t_PythonTokenizer *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenizer_pythonExtension(t_PythonTokenizer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonTokenizer_incrementToken0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenizer_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonTokenizer_get__self(t_PythonTokenizer *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *BytesRefFSTEnum::class$ = NULL;
          jmethodID *BytesRefFSTEnum::mids$ = NULL;
          bool BytesRefFSTEnum::live$ = false;

          jclass BytesRefFSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/BytesRefFSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d454d65c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
              mids$[mid_current_6016cb55] = env->getMethodID(cls, "current", "()Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_next_6016cb55] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekCeil_ec56792b] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekExact_ec56792b] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekFloor_ec56792b] = env->getMethodID(cls, "seekFloor", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_grow_54c6a166] = env->getMethodID(cls, "grow", "()V");
              mids$[mid_getTargetLabel_54c6a179] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_getCurrentLabel_54c6a179] = env->getMethodID(cls, "getCurrentLabel", "()I");
              mids$[mid_setCurrentLabel_39c7bd3c] = env->getMethodID(cls, "setCurrentLabel", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BytesRefFSTEnum::BytesRefFSTEnum(const ::org::apache::lucene::util::fst::FST & a0) : ::org::apache::lucene::util::fst::FSTEnum(env->newObject(initializeClass, &mids$, mid_init$_d454d65c, a0.this$)) {}

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::current() const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_current_6016cb55]));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::next() const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_next_6016cb55]));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekCeil_ec56792b], a0.this$));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekExact_ec56792b], a0.this$));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekFloor(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekFloor_ec56792b], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_BytesRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_of_(t_BytesRefFSTEnum *self, PyObject *args);
          static int t_BytesRefFSTEnum_init_(t_BytesRefFSTEnum *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BytesRefFSTEnum_current(t_BytesRefFSTEnum *self);
          static PyObject *t_BytesRefFSTEnum_next(t_BytesRefFSTEnum *self);
          static PyObject *t_BytesRefFSTEnum_seekCeil(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_seekExact(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_seekFloor(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_get__parameters_(t_BytesRefFSTEnum *self, void *data);
          static PyGetSetDef t_BytesRefFSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_BytesRefFSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BytesRefFSTEnum__methods_[] = {
            DECLARE_METHOD(t_BytesRefFSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum, of_, METH_VARARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, current, METH_NOARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, next, METH_NOARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekCeil, METH_O),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekExact, METH_O),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekFloor, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BytesRefFSTEnum, t_BytesRefFSTEnum, ::org::apache::lucene::util::fst::FSTEnum, BytesRefFSTEnum, t_BytesRefFSTEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_BytesRefFSTEnum *)) get_generic_next< t_BytesRefFSTEnum,::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput,::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput >), t_BytesRefFSTEnum__fields_, 0, 0);
          PyObject *t_BytesRefFSTEnum::wrap_Object(const BytesRefFSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum *self = (t_BytesRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_BytesRefFSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum *self = (t_BytesRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_BytesRefFSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(BytesRefFSTEnum), module, "BytesRefFSTEnum", 0);
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "InputOutput", make_descriptor(&PY_TYPE(BytesRefFSTEnum$InputOutput)));
          }

          void t_BytesRefFSTEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "class_", make_descriptor(BytesRefFSTEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "wrapfn_", make_descriptor(t_BytesRefFSTEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BytesRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BytesRefFSTEnum::initializeClass, 1)))
              return NULL;
            return t_BytesRefFSTEnum::wrap_Object(BytesRefFSTEnum(((t_BytesRefFSTEnum *) arg)->object.this$));
          }
          static PyObject *t_BytesRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BytesRefFSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BytesRefFSTEnum_of_(t_BytesRefFSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_BytesRefFSTEnum_init_(t_BytesRefFSTEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            BytesRefFSTEnum object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
            {
              INT_CALL(object = BytesRefFSTEnum(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BytesRefFSTEnum_current(t_BytesRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.current());
            return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_BytesRefFSTEnum_next(t_BytesRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_BytesRefFSTEnum_seekCeil(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
            return NULL;
          }

          static PyObject *t_BytesRefFSTEnum_seekExact(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekExact(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekExact", arg);
            return NULL;
          }

          static PyObject *t_BytesRefFSTEnum_seekFloor(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekFloor(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekFloor", arg);
            return NULL;
          }
          static PyObject *t_BytesRefFSTEnum_get__parameters_(t_BytesRefFSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40PostingsReader::class$ = NULL;
          jmethodID *Lucene40PostingsReader::mids$ = NULL;
          bool Lucene40PostingsReader::live$ = false;

          jclass Lucene40PostingsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40PostingsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b18a8355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decodeTerm_0d1f34e8] = env->getMethodID(cls, "decodeTerm", "([JLorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_docs_4cca8a9c] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
              mids$[mid_docsAndPositions_3ae1ca58] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_init_0441f0b2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;)V");
              mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40PostingsReader::Lucene40PostingsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::FieldInfos & a1, const ::org::apache::lucene::index::SegmentInfo & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4) : ::org::apache::lucene::codecs::PostingsReaderBase(env->newObject(initializeClass, &mids$, mid_init$_b18a8355, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          void Lucene40PostingsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          void Lucene40PostingsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene40PostingsReader::decodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decodeTerm_0d1f34e8], a0.this$, a1.this$, a2.this$, a3.this$, a4);
          }

          ::org::apache::lucene::index::DocsEnum Lucene40PostingsReader::docs(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_4cca8a9c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum Lucene40PostingsReader::docsAndPositions(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsAndPositionsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_3ae1ca58], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          void Lucene40PostingsReader::init(const ::org::apache::lucene::store::IndexInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_init_0441f0b2], a0.this$);
          }

          ::org::apache::lucene::codecs::BlockTermState Lucene40PostingsReader::newTermState() const
          {
            return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
          }

          jlong Lucene40PostingsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40PostingsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40PostingsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40PostingsReader_init_(t_Lucene40PostingsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40PostingsReader_checkIntegrity(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_close(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_decodeTerm(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_docs(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_docsAndPositions(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_init(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_newTermState(t_Lucene40PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene40PostingsReader_ramBytesUsed(t_Lucene40PostingsReader *self, PyObject *args);

          static PyMethodDef t_Lucene40PostingsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40PostingsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, decodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, docs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, docsAndPositions, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, newTermState, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40PostingsReader, t_Lucene40PostingsReader, ::org::apache::lucene::codecs::PostingsReaderBase, Lucene40PostingsReader, t_Lucene40PostingsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40PostingsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40PostingsReader), module, "Lucene40PostingsReader", 0);
          }

          void t_Lucene40PostingsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsReader).tp_dict, "class_", make_descriptor(Lucene40PostingsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40PostingsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40PostingsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40PostingsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40PostingsReader::wrap_Object(Lucene40PostingsReader(((t_Lucene40PostingsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40PostingsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40PostingsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40PostingsReader_init_(t_Lucene40PostingsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            Lucene40PostingsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkks", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = Lucene40PostingsReader(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40PostingsReader_checkIntegrity(t_Lucene40PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_close(t_Lucene40PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_decodeTerm(t_Lucene40PostingsReader *self, PyObject *args)
          {
            JArray< jlong > a0((jobject) NULL);
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
            jboolean a4;

            if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "decodeTerm", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_docs(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docs(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "docs", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_docsAndPositions(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsAndPositionsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "docsAndPositions", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_init(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.init(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_newTermState(t_Lucene40PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newTermState());
              return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "newTermState", args, 2);
          }

          static PyObject *t_Lucene40PostingsReader_ramBytesUsed(t_Lucene40PostingsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriterConfig$OpenMode::class$ = NULL;
        jmethodID *IndexWriterConfig$OpenMode::mids$ = NULL;
        bool IndexWriterConfig$OpenMode::live$ = false;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::APPEND = NULL;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::CREATE = NULL;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::CREATE_OR_APPEND = NULL;

        jclass IndexWriterConfig$OpenMode::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriterConfig$OpenMode");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_0b044982] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_values_923174e8] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            APPEND = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "APPEND", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            CREATE = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "CREATE", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            CREATE_OR_APPEND = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "CREATE_OR_APPEND", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriterConfig$OpenMode IndexWriterConfig$OpenMode::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IndexWriterConfig$OpenMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0b044982], a0.this$));
        }

        JArray< IndexWriterConfig$OpenMode > IndexWriterConfig$OpenMode::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< IndexWriterConfig$OpenMode >(env->callStaticObjectMethod(cls, mids$[mid_values_923174e8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriterConfig$OpenMode_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig$OpenMode_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig$OpenMode_of_(t_IndexWriterConfig$OpenMode *self, PyObject *args);
        static PyObject *t_IndexWriterConfig$OpenMode_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexWriterConfig$OpenMode_values(PyTypeObject *type);
        static PyObject *t_IndexWriterConfig$OpenMode_get__parameters_(t_IndexWriterConfig$OpenMode *self, void *data);
        static PyGetSetDef t_IndexWriterConfig$OpenMode__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriterConfig$OpenMode, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriterConfig$OpenMode__methods_[] = {
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, of_, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriterConfig$OpenMode, t_IndexWriterConfig$OpenMode, ::java::lang::Enum, IndexWriterConfig$OpenMode, abstract_init, 0, 0, t_IndexWriterConfig$OpenMode__fields_, 0, 0);
        PyObject *t_IndexWriterConfig$OpenMode::wrap_Object(const IndexWriterConfig$OpenMode& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IndexWriterConfig$OpenMode::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IndexWriterConfig$OpenMode *self = (t_IndexWriterConfig$OpenMode *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_IndexWriterConfig$OpenMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IndexWriterConfig$OpenMode::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IndexWriterConfig$OpenMode *self = (t_IndexWriterConfig$OpenMode *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_IndexWriterConfig$OpenMode::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriterConfig$OpenMode), module, "IndexWriterConfig$OpenMode", 0);
        }

        void t_IndexWriterConfig$OpenMode::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "class_", make_descriptor(IndexWriterConfig$OpenMode::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "wrapfn_", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriterConfig$OpenMode::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "APPEND", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::APPEND)));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "CREATE", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::CREATE)));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "CREATE_OR_APPEND", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::CREATE_OR_APPEND)));
        }

        static PyObject *t_IndexWriterConfig$OpenMode_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriterConfig$OpenMode::initializeClass, 1)))
            return NULL;
          return t_IndexWriterConfig$OpenMode::wrap_Object(IndexWriterConfig$OpenMode(((t_IndexWriterConfig$OpenMode *) arg)->object.this$));
        }
        static PyObject *t_IndexWriterConfig$OpenMode_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriterConfig$OpenMode::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexWriterConfig$OpenMode_of_(t_IndexWriterConfig$OpenMode *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_IndexWriterConfig$OpenMode_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          IndexWriterConfig$OpenMode result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexWriterConfig$OpenMode::valueOf(a0));
            return t_IndexWriterConfig$OpenMode::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_IndexWriterConfig$OpenMode_values(PyTypeObject *type)
        {
          JArray< IndexWriterConfig$OpenMode > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::IndexWriterConfig$OpenMode::values());
          return JArray<jobject>(result.this$).wrap(t_IndexWriterConfig$OpenMode::wrap_jobject);
        }
        static PyObject *t_IndexWriterConfig$OpenMode_get__parameters_(t_IndexWriterConfig$OpenMode *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/codecs/TermVectorsWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingTermVectorsFormat::class$ = NULL;
          jmethodID *CompressingTermVectorsFormat::mids$ = NULL;
          bool CompressingTermVectorsFormat::live$ = false;

          jclass CompressingTermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingTermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5a706bd2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_vectorsReader_9c23221f] = env->getMethodID(cls, "vectorsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_vectorsWriter_0c8458c9] = env->getMethodID(cls, "vectorsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/TermVectorsWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingTermVectorsFormat::CompressingTermVectorsFormat(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::codecs::compressing::CompressionMode & a2, jint a3) : ::org::apache::lucene::codecs::TermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_5a706bd2, a0.this$, a1.this$, a2.this$, a3)) {}

          ::java::lang::String CompressingTermVectorsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::org::apache::lucene::codecs::TermVectorsReader CompressingTermVectorsFormat::vectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_vectorsReader_9c23221f], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::TermVectorsWriter CompressingTermVectorsFormat::vectorsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::TermVectorsWriter(env->callObjectMethod(this$, mids$[mid_vectorsWriter_0c8458c9], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingTermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingTermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingTermVectorsFormat_init_(t_CompressingTermVectorsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingTermVectorsFormat_toString(t_CompressingTermVectorsFormat *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsFormat_vectorsReader(t_CompressingTermVectorsFormat *self, PyObject *args);
          static PyObject *t_CompressingTermVectorsFormat_vectorsWriter(t_CompressingTermVectorsFormat *self, PyObject *args);

          static PyMethodDef t_CompressingTermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_CompressingTermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, toString, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, vectorsReader, METH_VARARGS),
            DECLARE_METHOD(t_CompressingTermVectorsFormat, vectorsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingTermVectorsFormat, t_CompressingTermVectorsFormat, ::org::apache::lucene::codecs::TermVectorsFormat, CompressingTermVectorsFormat, t_CompressingTermVectorsFormat_init_, 0, 0, 0, 0, 0);

          void t_CompressingTermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingTermVectorsFormat), module, "CompressingTermVectorsFormat", 0);
          }

          void t_CompressingTermVectorsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsFormat).tp_dict, "class_", make_descriptor(CompressingTermVectorsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_CompressingTermVectorsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingTermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingTermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingTermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_CompressingTermVectorsFormat::wrap_Object(CompressingTermVectorsFormat(((t_CompressingTermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_CompressingTermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingTermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingTermVectorsFormat_init_(t_CompressingTermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a2((jobject) NULL);
            jint a3;
            CompressingTermVectorsFormat object((jobject) NULL);

            if (!parseArgs(args, "sskI", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = CompressingTermVectorsFormat(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingTermVectorsFormat_toString(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CompressingTermVectorsFormat_vectorsReader(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.vectorsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "vectorsReader", args, 2);
          }

          static PyObject *t_CompressingTermVectorsFormat_vectorsWriter(t_CompressingTermVectorsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::TermVectorsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.vectorsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_TermVectorsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingTermVectorsFormat), (PyObject *) self, "vectorsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NamedThreadFactory.h"
#include "java/lang/String.h"
#include "java/util/concurrent/ThreadFactory.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NamedThreadFactory::class$ = NULL;
        jmethodID *NamedThreadFactory::mids$ = NULL;
        bool NamedThreadFactory::live$ = false;

        jclass NamedThreadFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NamedThreadFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_newThread_9e58833c] = env->getMethodID(cls, "newThread", "(Ljava/lang/Runnable;)Ljava/lang/Thread;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NamedThreadFactory::NamedThreadFactory(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        ::java::lang::Thread NamedThreadFactory::newThread(const ::java::lang::Runnable & a0) const
        {
          return ::java::lang::Thread(env->callObjectMethod(this$, mids$[mid_newThread_9e58833c], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NamedThreadFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NamedThreadFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NamedThreadFactory_init_(t_NamedThreadFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NamedThreadFactory_newThread(t_NamedThreadFactory *self, PyObject *arg);

        static PyMethodDef t_NamedThreadFactory__methods_[] = {
          DECLARE_METHOD(t_NamedThreadFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedThreadFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NamedThreadFactory, newThread, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NamedThreadFactory, t_NamedThreadFactory, ::java::lang::Object, NamedThreadFactory, t_NamedThreadFactory_init_, 0, 0, 0, 0, 0);

        void t_NamedThreadFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NamedThreadFactory), module, "NamedThreadFactory", 0);
        }

        void t_NamedThreadFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NamedThreadFactory).tp_dict, "class_", make_descriptor(NamedThreadFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NamedThreadFactory).tp_dict, "wrapfn_", make_descriptor(t_NamedThreadFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NamedThreadFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NamedThreadFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NamedThreadFactory::initializeClass, 1)))
            return NULL;
          return t_NamedThreadFactory::wrap_Object(NamedThreadFactory(((t_NamedThreadFactory *) arg)->object.this$));
        }
        static PyObject *t_NamedThreadFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NamedThreadFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NamedThreadFactory_init_(t_NamedThreadFactory *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          NamedThreadFactory object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NamedThreadFactory(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NamedThreadFactory_newThread(t_NamedThreadFactory *self, PyObject *arg)
        {
          ::java::lang::Runnable a0((jobject) NULL);
          ::java::lang::Thread result((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::Runnable::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.newThread(a0));
            return ::java::lang::t_Thread::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "newThread", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermAllGroupsCollector.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermAllGroupsCollector::class$ = NULL;
            jmethodID *TermAllGroupsCollector::mids$ = NULL;
            bool TermAllGroupsCollector::live$ = false;

            jclass TermAllGroupsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermAllGroupsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_2d2d7de4] = env->getMethodID(cls, "getGroups", "()Ljava/util/Collection;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermAllGroupsCollector::TermAllGroupsCollector(const ::java::lang::String & a0) : ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            TermAllGroupsCollector::TermAllGroupsCollector(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

            void TermAllGroupsCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::Collection TermAllGroupsCollector::getGroups() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getGroups_2d2d7de4]));
            }

            void TermAllGroupsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupsCollector_of_(t_TermAllGroupsCollector *self, PyObject *args);
            static int t_TermAllGroupsCollector_init_(t_TermAllGroupsCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermAllGroupsCollector_collect(t_TermAllGroupsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupsCollector_getGroups(t_TermAllGroupsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupsCollector_setNextReader(t_TermAllGroupsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupsCollector_get__groups(t_TermAllGroupsCollector *self, void *data);
            static int t_TermAllGroupsCollector_set__nextReader(t_TermAllGroupsCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermAllGroupsCollector_get__parameters_(t_TermAllGroupsCollector *self, void *data);
            static PyGetSetDef t_TermAllGroupsCollector__fields_[] = {
              DECLARE_GET_FIELD(t_TermAllGroupsCollector, groups),
              DECLARE_SET_FIELD(t_TermAllGroupsCollector, nextReader),
              DECLARE_GET_FIELD(t_TermAllGroupsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermAllGroupsCollector__methods_[] = {
              DECLARE_METHOD(t_TermAllGroupsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupsCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupsCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupsCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermAllGroupsCollector, t_TermAllGroupsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector, TermAllGroupsCollector, t_TermAllGroupsCollector_init_, 0, 0, t_TermAllGroupsCollector__fields_, 0, 0);
            PyObject *t_TermAllGroupsCollector::wrap_Object(const TermAllGroupsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupsCollector *self = (t_TermAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermAllGroupsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupsCollector *self = (t_TermAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermAllGroupsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermAllGroupsCollector), module, "TermAllGroupsCollector", 0);
            }

            void t_TermAllGroupsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermAllGroupsCollector).tp_dict, "class_", make_descriptor(TermAllGroupsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermAllGroupsCollector).tp_dict, "wrapfn_", make_descriptor(t_TermAllGroupsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermAllGroupsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermAllGroupsCollector::initializeClass, 1)))
                return NULL;
              return t_TermAllGroupsCollector::wrap_Object(TermAllGroupsCollector(((t_TermAllGroupsCollector *) arg)->object.this$));
            }
            static PyObject *t_TermAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermAllGroupsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermAllGroupsCollector_of_(t_TermAllGroupsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermAllGroupsCollector_init_(t_TermAllGroupsCollector *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  TermAllGroupsCollector object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = TermAllGroupsCollector(a0));
                    self->object = object;
                    self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint a1;
                  TermAllGroupsCollector object((jobject) NULL);

                  if (!parseArgs(args, "sI", &a0, &a1))
                  {
                    INT_CALL(object = TermAllGroupsCollector(a0, a1));
                    self->object = object;
                    self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermAllGroupsCollector_collect(t_TermAllGroupsCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermAllGroupsCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_TermAllGroupsCollector_getGroups(t_TermAllGroupsCollector *self, PyObject *args)
            {
              ::java::util::Collection result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
              }

              return callSuper(&PY_TYPE(TermAllGroupsCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_TermAllGroupsCollector_setNextReader(t_TermAllGroupsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermAllGroupsCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermAllGroupsCollector_get__parameters_(t_TermAllGroupsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_TermAllGroupsCollector_get__groups(t_TermAllGroupsCollector *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_Collection::wrap_Object(value);
            }

            static int t_TermAllGroupsCollector_set__nextReader(t_TermAllGroupsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Diff.h"
#include "java/lang/String.h"
#include "java/lang/CharSequence.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Diff::class$ = NULL;
      jmethodID *Diff::mids$ = NULL;
      bool Diff::live$ = false;

      jclass Diff::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Diff");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_init$_ca5a6f66] = env->getMethodID(cls, "<init>", "(IIII)V");
          mids$[mid_apply_33cdba70] = env->getStaticMethodID(cls, "apply", "(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;)V");
          mids$[mid_exec_aacea7e9] = env->getMethodID(cls, "exec", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Diff::Diff() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      Diff::Diff(jint a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ca5a6f66, a0, a1, a2, a3)) {}

      void Diff::apply(const ::java::lang::StringBuilder & a0, const ::java::lang::CharSequence & a1)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_apply_33cdba70], a0.this$, a1.this$);
      }

      ::java::lang::String Diff::exec(const ::java::lang::String & a0, const ::java::lang::String & a1) const
      {
        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_exec_aacea7e9], a0.this$, a1.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Diff_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Diff_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Diff_init_(t_Diff *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Diff_apply(PyTypeObject *type, PyObject *args);
      static PyObject *t_Diff_exec(t_Diff *self, PyObject *args);

      static PyMethodDef t_Diff__methods_[] = {
        DECLARE_METHOD(t_Diff, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Diff, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Diff, apply, METH_VARARGS | METH_CLASS),
        DECLARE_METHOD(t_Diff, exec, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Diff, t_Diff, ::java::lang::Object, Diff, t_Diff_init_, 0, 0, 0, 0, 0);

      void t_Diff::install(PyObject *module)
      {
        installType(&PY_TYPE(Diff), module, "Diff", 0);
      }

      void t_Diff::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Diff).tp_dict, "class_", make_descriptor(Diff::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Diff).tp_dict, "wrapfn_", make_descriptor(t_Diff::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Diff).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Diff_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Diff::initializeClass, 1)))
          return NULL;
        return t_Diff::wrap_Object(Diff(((t_Diff *) arg)->object.this$));
      }
      static PyObject *t_Diff_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Diff::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Diff_init_(t_Diff *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 0:
          {
            Diff object((jobject) NULL);

            INT_CALL(object = Diff());
            self->object = object;
            break;
          }
          goto err;
         case 4:
          {
            jint a0;
            jint a1;
            jint a2;
            jint a3;
            Diff object((jobject) NULL);

            if (!parseArgs(args, "IIII", &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = Diff(a0, a1, a2, a3));
              self->object = object;
              break;
            }
          }
         default:
         err:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Diff_apply(PyTypeObject *type, PyObject *args)
      {
        ::java::lang::StringBuilder a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::lang::StringBuilder::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(::org::egothor::stemmer::Diff::apply(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "apply", args);
        return NULL;
      }

      static PyObject *t_Diff_exec(t_Diff *self, PyObject *args)
      {
        ::java::lang::String a0((jobject) NULL);
        ::java::lang::String a1((jobject) NULL);
        ::java::lang::String result((jobject) NULL);

        if (!parseArgs(args, "ss", &a0, &a1))
        {
          OBJ_CALL(result = self->object.exec(a0, a1));
          return j2p(result);
        }

        PyErr_SetArgsError((PyObject *) self, "exec", args);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SpanGradientFormatter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SpanGradientFormatter::class$ = NULL;
          jmethodID *SpanGradientFormatter::mids$ = NULL;
          bool SpanGradientFormatter::live$ = false;

          jclass SpanGradientFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SpanGradientFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ecfb0f33] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanGradientFormatter::SpanGradientFormatter(jfloat a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::org::apache::lucene::search::highlight::GradientFormatter(env->newObject(initializeClass, &mids$, mid_init$_ecfb0f33, a0, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::java::lang::String SpanGradientFormatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SpanGradientFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanGradientFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanGradientFormatter_init_(t_SpanGradientFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanGradientFormatter_highlightTerm(t_SpanGradientFormatter *self, PyObject *args);

          static PyMethodDef t_SpanGradientFormatter__methods_[] = {
            DECLARE_METHOD(t_SpanGradientFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanGradientFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanGradientFormatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanGradientFormatter, t_SpanGradientFormatter, ::org::apache::lucene::search::highlight::GradientFormatter, SpanGradientFormatter, t_SpanGradientFormatter_init_, 0, 0, 0, 0, 0);

          void t_SpanGradientFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanGradientFormatter), module, "SpanGradientFormatter", 0);
          }

          void t_SpanGradientFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanGradientFormatter).tp_dict, "class_", make_descriptor(SpanGradientFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanGradientFormatter).tp_dict, "wrapfn_", make_descriptor(t_SpanGradientFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanGradientFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanGradientFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanGradientFormatter::initializeClass, 1)))
              return NULL;
            return t_SpanGradientFormatter::wrap_Object(SpanGradientFormatter(((t_SpanGradientFormatter *) arg)->object.this$));
          }
          static PyObject *t_SpanGradientFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanGradientFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanGradientFormatter_init_(t_SpanGradientFormatter *self, PyObject *args, PyObject *kwds)
          {
            jfloat a0;
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            SpanGradientFormatter object((jobject) NULL);

            if (!parseArgs(args, "Fssss", &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = SpanGradientFormatter(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanGradientFormatter_highlightTerm(t_SpanGradientFormatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanGradientFormatter), (PyObject *) self, "highlightTerm", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedReader::class$ = NULL;
          jmethodID *BlockPackedReader::mids$ = NULL;
          bool BlockPackedReader::live$ = false;

          jclass BlockPackedReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f9e6aacc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;IIJZ)V");
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedReader::BlockPackedReader(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2, jlong a3, jboolean a4) : ::org::apache::lucene::util::LongValues(env->newObject(initializeClass, &mids$, mid_init$_f9e6aacc, a0.this$, a1, a2, a3, a4)) {}

          jlong BlockPackedReader::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          jlong BlockPackedReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedReader_init_(t_BlockPackedReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockPackedReader_get(t_BlockPackedReader *self, PyObject *args);
          static PyObject *t_BlockPackedReader_ramBytesUsed(t_BlockPackedReader *self);

          static PyMethodDef t_BlockPackedReader__methods_[] = {
            DECLARE_METHOD(t_BlockPackedReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReader, get, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockPackedReader, t_BlockPackedReader, ::org::apache::lucene::util::LongValues, BlockPackedReader, t_BlockPackedReader_init_, 0, 0, 0, 0, 0);

          void t_BlockPackedReader::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedReader), module, "BlockPackedReader", 0);
          }

          void t_BlockPackedReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockPackedReader).tp_dict, "class_", make_descriptor(BlockPackedReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockPackedReader).tp_dict, "wrapfn_", make_descriptor(t_BlockPackedReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockPackedReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedReader::initializeClass, 1)))
              return NULL;
            return t_BlockPackedReader::wrap_Object(BlockPackedReader(((t_BlockPackedReader *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedReader_init_(t_BlockPackedReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            jboolean a4;
            BlockPackedReader object((jobject) NULL);

            if (!parseArgs(args, "kIIJZ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = BlockPackedReader(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockPackedReader_get(t_BlockPackedReader *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(BlockPackedReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_BlockPackedReader_ramBytesUsed(t_BlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemFilter::class$ = NULL;
          jmethodID *FinnishLightStemFilter::mids$ = NULL;
          bool FinnishLightStemFilter::live$ = false;

          jclass FinnishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemFilter::FinnishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FinnishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemFilter_init_(t_FinnishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemFilter_incrementToken(t_FinnishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishLightStemFilter, t_FinnishLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, FinnishLightStemFilter, t_FinnishLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_FinnishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemFilter), module, "FinnishLightStemFilter", 0);
          }

          void t_FinnishLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilter).tp_dict, "class_", make_descriptor(FinnishLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FinnishLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FinnishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemFilter::wrap_Object(FinnishLightStemFilter(((t_FinnishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemFilter_init_(t_FinnishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FinnishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FinnishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishLightStemFilter_incrementToken(t_FinnishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FinnishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Similarity::class$ = NULL;
          jmethodID *Similarity::mids$ = NULL;
          bool Similarity::live$ = false;

          jclass Similarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Similarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Similarity::Similarity() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong Similarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight Similarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jfloat Similarity::coord(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_coord_d8d154b6], a0, a1);
          }

          jfloat Similarity::queryNorm(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_queryNorm_06298cbb], a0);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer Similarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Similarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Similarity_init_(t_Similarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Similarity_computeNorm(t_Similarity *self, PyObject *arg);
          static PyObject *t_Similarity_computeWeight(t_Similarity *self, PyObject *args);
          static PyObject *t_Similarity_coord(t_Similarity *self, PyObject *args);
          static PyObject *t_Similarity_queryNorm(t_Similarity *self, PyObject *arg);
          static PyObject *t_Similarity_simScorer(t_Similarity *self, PyObject *args);

          static PyMethodDef t_Similarity__methods_[] = {
            DECLARE_METHOD(t_Similarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity, computeNorm, METH_O),
            DECLARE_METHOD(t_Similarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_Similarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_Similarity, queryNorm, METH_O),
            DECLARE_METHOD(t_Similarity, simScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Similarity, t_Similarity, ::java::lang::Object, Similarity, t_Similarity_init_, 0, 0, 0, 0, 0);

          void t_Similarity::install(PyObject *module)
          {
            installType(&PY_TYPE(Similarity), module, "Similarity", 0);
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "SimWeight", make_descriptor(&PY_TYPE(Similarity$SimWeight)));
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "SimScorer", make_descriptor(&PY_TYPE(Similarity$SimScorer)));
          }

          void t_Similarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "class_", make_descriptor(Similarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "wrapfn_", make_descriptor(t_Similarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Similarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Similarity::initializeClass, 1)))
              return NULL;
            return t_Similarity::wrap_Object(Similarity(((t_Similarity *) arg)->object.this$));
          }
          static PyObject *t_Similarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Similarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Similarity_init_(t_Similarity *self, PyObject *args, PyObject *kwds)
          {
            Similarity object((jobject) NULL);

            INT_CALL(object = Similarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_Similarity_computeNorm(t_Similarity *self, PyObject *arg)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeNorm", arg);
            return NULL;
          }

          static PyObject *t_Similarity_computeWeight(t_Similarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeWeight", args);
            return NULL;
          }

          static PyObject *t_Similarity_coord(t_Similarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "coord", args);
            return NULL;
          }

          static PyObject *t_Similarity_queryNorm(t_Similarity *self, PyObject *arg)
          {
            jfloat a0;
            jfloat result;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "queryNorm", arg);
            return NULL;
          }

          static PyObject *t_Similarity_simScorer(t_Similarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "simScorer", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SimpleTerm$MatchingTermVisitor::class$ = NULL;
            jmethodID *SimpleTerm$MatchingTermVisitor::mids$ = NULL;
            bool SimpleTerm$MatchingTermVisitor::live$ = false;

            jclass SimpleTerm$MatchingTermVisitor::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor");

                mids$ = new jmethodID[max_mid];
                mids$[mid_visitMatchingTerm_7eca6a81] = env->getMethodID(cls, "visitMatchingTerm", "(Lorg/apache/lucene/index/Term;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void SimpleTerm$MatchingTermVisitor::visitMatchingTerm(const ::org::apache::lucene::index::Term & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerm_7eca6a81], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SimpleTerm$MatchingTermVisitor_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm$MatchingTermVisitor_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SimpleTerm$MatchingTermVisitor_visitMatchingTerm(t_SimpleTerm$MatchingTermVisitor *self, PyObject *arg);

            static PyMethodDef t_SimpleTerm$MatchingTermVisitor__methods_[] = {
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SimpleTerm$MatchingTermVisitor, visitMatchingTerm, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SimpleTerm$MatchingTermVisitor, t_SimpleTerm$MatchingTermVisitor, ::java::lang::Object, SimpleTerm$MatchingTermVisitor, abstract_init, 0, 0, 0, 0, 0);

            void t_SimpleTerm$MatchingTermVisitor::install(PyObject *module)
            {
              installType(&PY_TYPE(SimpleTerm$MatchingTermVisitor), module, "SimpleTerm$MatchingTermVisitor", 0);
            }

            void t_SimpleTerm$MatchingTermVisitor::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SimpleTerm$MatchingTermVisitor).tp_dict, "class_", make_descriptor(SimpleTerm$MatchingTermVisitor::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SimpleTerm$MatchingTermVisitor).tp_dict, "wrapfn_", make_descriptor(t_SimpleTerm$MatchingTermVisitor::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SimpleTerm$MatchingTermVisitor).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SimpleTerm$MatchingTermVisitor_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SimpleTerm$MatchingTermVisitor::initializeClass, 1)))
                return NULL;
              return t_SimpleTerm$MatchingTermVisitor::wrap_Object(SimpleTerm$MatchingTermVisitor(((t_SimpleTerm$MatchingTermVisitor *) arg)->object.this$));
            }
            static PyObject *t_SimpleTerm$MatchingTermVisitor_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SimpleTerm$MatchingTermVisitor::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_SimpleTerm$MatchingTermVisitor_visitMatchingTerm(t_SimpleTerm$MatchingTermVisitor *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.visitMatchingTerm(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "visitMatchingTerm", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *RegexCapabilities::class$ = NULL;
            jmethodID *RegexCapabilities::mids$ = NULL;
            bool RegexCapabilities::live$ = false;

            jclass RegexCapabilities::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/RegexCapabilities");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compile_3b00aa76] = env->getMethodID(cls, "compile", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher RegexCapabilities::compile(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher(env->callObjectMethod(this$, mids$[mid_compile_3b00aa76], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_RegexCapabilities_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RegexCapabilities_compile(t_RegexCapabilities *self, PyObject *arg);

            static PyMethodDef t_RegexCapabilities__methods_[] = {
              DECLARE_METHOD(t_RegexCapabilities, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RegexCapabilities, compile, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RegexCapabilities, t_RegexCapabilities, ::java::lang::Object, RegexCapabilities, abstract_init, 0, 0, 0, 0, 0);

            void t_RegexCapabilities::install(PyObject *module)
            {
              installType(&PY_TYPE(RegexCapabilities), module, "RegexCapabilities", 0);
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "RegexMatcher", make_descriptor(&PY_TYPE(RegexCapabilities$RegexMatcher)));
            }

            void t_RegexCapabilities::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "class_", make_descriptor(RegexCapabilities::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "wrapfn_", make_descriptor(t_RegexCapabilities::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RegexCapabilities).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RegexCapabilities_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RegexCapabilities::initializeClass, 1)))
                return NULL;
              return t_RegexCapabilities::wrap_Object(RegexCapabilities(((t_RegexCapabilities *) arg)->object.this$));
            }
            static PyObject *t_RegexCapabilities_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RegexCapabilities::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_RegexCapabilities_compile(t_RegexCapabilities *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.compile(a0));
                return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities$RegexMatcher::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "compile", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Filter::class$ = NULL;
        jmethodID *Filter::mids$ = NULL;
        bool Filter::live$ = false;

        jclass Filter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Filter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Filter::Filter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::DocIdSet Filter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Filter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Filter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Filter_init_(t_Filter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Filter_getDocIdSet(t_Filter *self, PyObject *args);

        static PyMethodDef t_Filter__methods_[] = {
          DECLARE_METHOD(t_Filter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Filter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Filter, getDocIdSet, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Filter, t_Filter, ::java::lang::Object, Filter, t_Filter_init_, 0, 0, 0, 0, 0);

        void t_Filter::install(PyObject *module)
        {
          installType(&PY_TYPE(Filter), module, "Filter", 0);
        }

        void t_Filter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Filter).tp_dict, "class_", make_descriptor(Filter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Filter).tp_dict, "wrapfn_", make_descriptor(t_Filter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Filter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Filter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Filter::initializeClass, 1)))
            return NULL;
          return t_Filter::wrap_Object(Filter(((t_Filter *) arg)->object.this$));
        }
        static PyObject *t_Filter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Filter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Filter_init_(t_Filter *self, PyObject *args, PyObject *kwds)
        {
          Filter object((jobject) NULL);

          INT_CALL(object = Filter());
          self->object = object;

          return 0;
        }

        static PyObject *t_Filter_getDocIdSet(t_Filter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocIdSet", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LevensteinDistance.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LevensteinDistance::class$ = NULL;
          jmethodID *LevensteinDistance::mids$ = NULL;
          bool LevensteinDistance::live$ = false;

          jclass LevensteinDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LevensteinDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LevensteinDistance::LevensteinDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean LevensteinDistance::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat LevensteinDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }

          jint LevensteinDistance::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String LevensteinDistance::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LevensteinDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LevensteinDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LevensteinDistance_init_(t_LevensteinDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LevensteinDistance_equals(t_LevensteinDistance *self, PyObject *args);
          static PyObject *t_LevensteinDistance_getDistance(t_LevensteinDistance *self, PyObject *args);
          static PyObject *t_LevensteinDistance_hashCode(t_LevensteinDistance *self, PyObject *args);
          static PyObject *t_LevensteinDistance_toString(t_LevensteinDistance *self, PyObject *args);

          static PyMethodDef t_LevensteinDistance__methods_[] = {
            DECLARE_METHOD(t_LevensteinDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevensteinDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LevensteinDistance, equals, METH_VARARGS),
            DECLARE_METHOD(t_LevensteinDistance, getDistance, METH_VARARGS),
            DECLARE_METHOD(t_LevensteinDistance, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_LevensteinDistance, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LevensteinDistance, t_LevensteinDistance, ::java::lang::Object, LevensteinDistance, t_LevensteinDistance_init_, 0, 0, 0, 0, 0);

          void t_LevensteinDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(LevensteinDistance), module, "LevensteinDistance", 0);
          }

          void t_LevensteinDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LevensteinDistance).tp_dict, "class_", make_descriptor(LevensteinDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LevensteinDistance).tp_dict, "wrapfn_", make_descriptor(t_LevensteinDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LevensteinDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LevensteinDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LevensteinDistance::initializeClass, 1)))
              return NULL;
            return t_LevensteinDistance::wrap_Object(LevensteinDistance(((t_LevensteinDistance *) arg)->object.this$));
          }
          static PyObject *t_LevensteinDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LevensteinDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LevensteinDistance_init_(t_LevensteinDistance *self, PyObject *args, PyObject *kwds)
          {
            LevensteinDistance object((jobject) NULL);

            INT_CALL(object = LevensteinDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_LevensteinDistance_equals(t_LevensteinDistance *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LevensteinDistance), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_LevensteinDistance_getDistance(t_LevensteinDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }

          static PyObject *t_LevensteinDistance_hashCode(t_LevensteinDistance *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(LevensteinDistance), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_LevensteinDistance_toString(t_LevensteinDistance *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LevensteinDistance), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonComparable.h"
#include "java/lang/Throwable.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonComparable::class$ = NULL;
        jmethodID *PythonComparable::mids$ = NULL;
        bool PythonComparable::live$ = false;

        jclass PythonComparable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonComparable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonComparable::PythonComparable() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonComparable::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonComparable::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonComparable::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonComparable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonComparable_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonComparable_init_(t_PythonComparable *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonComparable_finalize(t_PythonComparable *self);
        static PyObject *t_PythonComparable_pythonExtension(t_PythonComparable *self, PyObject *args);
        static jint JNICALL t_PythonComparable_compareTo0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonComparable_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonComparable_get__self(t_PythonComparable *self, void *data);
        static PyGetSetDef t_PythonComparable__fields_[] = {
          DECLARE_GET_FIELD(t_PythonComparable, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonComparable__methods_[] = {
          DECLARE_METHOD(t_PythonComparable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonComparable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonComparable, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonComparable, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonComparable, t_PythonComparable, ::java::lang::Object, PythonComparable, t_PythonComparable_init_, 0, 0, t_PythonComparable__fields_, 0, 0);

        void t_PythonComparable::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonComparable), module, "PythonComparable", 1);
        }

        void t_PythonComparable::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonComparable).tp_dict, "class_", make_descriptor(PythonComparable::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonComparable).tp_dict, "wrapfn_", make_descriptor(t_PythonComparable::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonComparable).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonComparable::initializeClass);
          JNINativeMethod methods[] = {
            { "compareTo", "(Ljava/lang/Object;)I", (void *) t_PythonComparable_compareTo0 },
            { "pythonDecRef", "()V", (void *) t_PythonComparable_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonComparable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonComparable::initializeClass, 1)))
            return NULL;
          return t_PythonComparable::wrap_Object(PythonComparable(((t_PythonComparable *) arg)->object.this$));
        }
        static PyObject *t_PythonComparable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonComparable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonComparable_init_(t_PythonComparable *self, PyObject *args, PyObject *kwds)
        {
          PythonComparable object((jobject) NULL);

          INT_CALL(object = PythonComparable());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonComparable_finalize(t_PythonComparable *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonComparable_pythonExtension(t_PythonComparable *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jint JNICALL t_PythonComparable_compareTo0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "compareTo", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareTo", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonComparable_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonComparable_get__self(t_PythonComparable *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$CreationPlaceholder.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$CreationPlaceholder::class$ = NULL;
        jmethodID *FieldCache$CreationPlaceholder::mids$ = NULL;
        bool FieldCache$CreationPlaceholder::live$ = false;

        jclass FieldCache$CreationPlaceholder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$CreationPlaceholder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$CreationPlaceholder::FieldCache$CreationPlaceholder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong FieldCache$CreationPlaceholder::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$CreationPlaceholder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$CreationPlaceholder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$CreationPlaceholder_init_(t_FieldCache$CreationPlaceholder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$CreationPlaceholder_ramBytesUsed(t_FieldCache$CreationPlaceholder *self);

        static PyMethodDef t_FieldCache$CreationPlaceholder__methods_[] = {
          DECLARE_METHOD(t_FieldCache$CreationPlaceholder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CreationPlaceholder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CreationPlaceholder, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$CreationPlaceholder, t_FieldCache$CreationPlaceholder, ::java::lang::Object, FieldCache$CreationPlaceholder, t_FieldCache$CreationPlaceholder_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$CreationPlaceholder::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$CreationPlaceholder), module, "FieldCache$CreationPlaceholder", 0);
        }

        void t_FieldCache$CreationPlaceholder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$CreationPlaceholder).tp_dict, "class_", make_descriptor(FieldCache$CreationPlaceholder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$CreationPlaceholder).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$CreationPlaceholder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$CreationPlaceholder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$CreationPlaceholder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$CreationPlaceholder::initializeClass, 1)))
            return NULL;
          return t_FieldCache$CreationPlaceholder::wrap_Object(FieldCache$CreationPlaceholder(((t_FieldCache$CreationPlaceholder *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$CreationPlaceholder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$CreationPlaceholder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$CreationPlaceholder_init_(t_FieldCache$CreationPlaceholder *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$CreationPlaceholder object((jobject) NULL);

          INT_CALL(object = FieldCache$CreationPlaceholder());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$CreationPlaceholder_ramBytesUsed(t_FieldCache$CreationPlaceholder *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$Insanity.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$InsanityType.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FieldCacheSanityChecker$Insanity::class$ = NULL;
        jmethodID *FieldCacheSanityChecker$Insanity::mids$ = NULL;
        bool FieldCacheSanityChecker$Insanity::live$ = false;

        jclass FieldCacheSanityChecker$Insanity::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FieldCacheSanityChecker$Insanity");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9b412c8f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;Ljava/lang/String;[Lorg/apache/lucene/search/FieldCache$CacheEntry;)V");
            mids$[mid_getCacheEntries_2bd7104e] = env->getMethodID(cls, "getCacheEntries", "()[Lorg/apache/lucene/search/FieldCache$CacheEntry;");
            mids$[mid_getMsg_14c7b5c5] = env->getMethodID(cls, "getMsg", "()Ljava/lang/String;");
            mids$[mid_getType_e7f4e575] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheSanityChecker$Insanity::FieldCacheSanityChecker$Insanity(const ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType & a0, const ::java::lang::String & a1, const JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9b412c8f, a0.this$, a1.this$, a2.this$)) {}

        JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > FieldCacheSanityChecker$Insanity::getCacheEntries() const
        {
          return JArray< ::org::apache::lucene::search::FieldCache$CacheEntry >(env->callObjectMethod(this$, mids$[mid_getCacheEntries_2bd7104e]));
        }

        ::java::lang::String FieldCacheSanityChecker$Insanity::getMsg() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMsg_14c7b5c5]));
        }

        ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType FieldCacheSanityChecker$Insanity::getType() const
        {
          return ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType(env->callObjectMethod(this$, mids$[mid_getType_e7f4e575]));
        }

        ::java::lang::String FieldCacheSanityChecker$Insanity::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FieldCacheSanityChecker$Insanity_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker$Insanity_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheSanityChecker$Insanity_init_(t_FieldCacheSanityChecker$Insanity *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheSanityChecker$Insanity_getCacheEntries(t_FieldCacheSanityChecker$Insanity *self);
        static PyObject *t_FieldCacheSanityChecker$Insanity_getMsg(t_FieldCacheSanityChecker$Insanity *self);
        static PyObject *t_FieldCacheSanityChecker$Insanity_getType(t_FieldCacheSanityChecker$Insanity *self);
        static PyObject *t_FieldCacheSanityChecker$Insanity_toString(t_FieldCacheSanityChecker$Insanity *self, PyObject *args);
        static PyObject *t_FieldCacheSanityChecker$Insanity_get__cacheEntries(t_FieldCacheSanityChecker$Insanity *self, void *data);
        static PyObject *t_FieldCacheSanityChecker$Insanity_get__msg(t_FieldCacheSanityChecker$Insanity *self, void *data);
        static PyObject *t_FieldCacheSanityChecker$Insanity_get__type(t_FieldCacheSanityChecker$Insanity *self, void *data);
        static PyGetSetDef t_FieldCacheSanityChecker$Insanity__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheSanityChecker$Insanity, cacheEntries),
          DECLARE_GET_FIELD(t_FieldCacheSanityChecker$Insanity, msg),
          DECLARE_GET_FIELD(t_FieldCacheSanityChecker$Insanity, type),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheSanityChecker$Insanity__methods_[] = {
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, getCacheEntries, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, getMsg, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, getType, METH_NOARGS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$Insanity, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheSanityChecker$Insanity, t_FieldCacheSanityChecker$Insanity, ::java::lang::Object, FieldCacheSanityChecker$Insanity, t_FieldCacheSanityChecker$Insanity_init_, 0, 0, t_FieldCacheSanityChecker$Insanity__fields_, 0, 0);

        void t_FieldCacheSanityChecker$Insanity::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheSanityChecker$Insanity), module, "FieldCacheSanityChecker$Insanity", 0);
        }

        void t_FieldCacheSanityChecker$Insanity::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$Insanity).tp_dict, "class_", make_descriptor(FieldCacheSanityChecker$Insanity::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$Insanity).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSanityChecker$Insanity::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$Insanity).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheSanityChecker$Insanity::initializeClass, 1)))
            return NULL;
          return t_FieldCacheSanityChecker$Insanity::wrap_Object(FieldCacheSanityChecker$Insanity(((t_FieldCacheSanityChecker$Insanity *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheSanityChecker$Insanity_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheSanityChecker$Insanity::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheSanityChecker$Insanity_init_(t_FieldCacheSanityChecker$Insanity *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > a2((jobject) NULL);
          FieldCacheSanityChecker$Insanity object((jobject) NULL);

          if (!parseArgs(args, "ks[k", ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType::initializeClass, ::org::apache::lucene::search::FieldCache$CacheEntry::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = FieldCacheSanityChecker$Insanity(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_getCacheEntries(t_FieldCacheSanityChecker$Insanity *self)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > result((jobject) NULL);
          OBJ_CALL(result = self->object.getCacheEntries());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_getMsg(t_FieldCacheSanityChecker$Insanity *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getMsg());
          return j2p(result);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_getType(t_FieldCacheSanityChecker$Insanity *self)
        {
          ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType result((jobject) NULL);
          OBJ_CALL(result = self->object.getType());
          return ::org::apache::lucene::util::t_FieldCacheSanityChecker$InsanityType::wrap_Object(result);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_toString(t_FieldCacheSanityChecker$Insanity *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCacheSanityChecker$Insanity), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_get__cacheEntries(t_FieldCacheSanityChecker$Insanity *self, void *data)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > value((jobject) NULL);
          OBJ_CALL(value = self->object.getCacheEntries());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_get__msg(t_FieldCacheSanityChecker$Insanity *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getMsg());
          return j2p(value);
        }

        static PyObject *t_FieldCacheSanityChecker$Insanity_get__type(t_FieldCacheSanityChecker$Insanity *self, void *data)
        {
          ::org::apache::lucene::util::FieldCacheSanityChecker$InsanityType value((jobject) NULL);
          OBJ_CALL(value = self->object.getType());
          return ::org::apache::lucene::util::t_FieldCacheSanityChecker$InsanityType::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Lift.h"
#include "org/egothor/stemmer/Trie.h"
#include "org/egothor/stemmer/Row.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Lift::class$ = NULL;
      jmethodID *Lift::mids$ = NULL;
      bool Lift::live$ = false;

      jclass Lift::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Lift");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_liftUp_1357655d] = env->getMethodID(cls, "liftUp", "(Lorg/egothor/stemmer/Row;Ljava/util/List;)V");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Lift::Lift(jboolean a0) : ::org::egothor::stemmer::Reduce(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      void Lift::liftUp(const ::org::egothor::stemmer::Row & a0, const ::java::util::List & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_liftUp_1357655d], a0.this$, a1.this$);
      }

      ::org::egothor::stemmer::Trie Lift::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Lift_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Lift_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Lift_init_(t_Lift *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Lift_liftUp(t_Lift *self, PyObject *args);
      static PyObject *t_Lift_optimize(t_Lift *self, PyObject *args);

      static PyMethodDef t_Lift__methods_[] = {
        DECLARE_METHOD(t_Lift, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Lift, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Lift, liftUp, METH_VARARGS),
        DECLARE_METHOD(t_Lift, optimize, METH_VARARGS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Lift, t_Lift, ::org::egothor::stemmer::Reduce, Lift, t_Lift_init_, 0, 0, 0, 0, 0);

      void t_Lift::install(PyObject *module)
      {
        installType(&PY_TYPE(Lift), module, "Lift", 0);
      }

      void t_Lift::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Lift).tp_dict, "class_", make_descriptor(Lift::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Lift).tp_dict, "wrapfn_", make_descriptor(t_Lift::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Lift).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Lift_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Lift::initializeClass, 1)))
          return NULL;
        return t_Lift::wrap_Object(Lift(((t_Lift *) arg)->object.this$));
      }
      static PyObject *t_Lift_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Lift::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Lift_init_(t_Lift *self, PyObject *args, PyObject *kwds)
      {
        jboolean a0;
        Lift object((jobject) NULL);

        if (!parseArgs(args, "Z", &a0))
        {
          INT_CALL(object = Lift(a0));
          self->object = object;
        }
        else
        {
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Lift_liftUp(t_Lift *self, PyObject *args)
      {
        ::org::egothor::stemmer::Row a0((jobject) NULL);
        ::java::util::List a1((jobject) NULL);
        PyTypeObject **p1;

        if (!parseArgs(args, "kK", ::org::egothor::stemmer::Row::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_))
        {
          OBJ_CALL(self->object.liftUp(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "liftUp", args);
        return NULL;
      }

      static PyObject *t_Lift_optimize(t_Lift *self, PyObject *args)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArgs(args, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        return callSuper(&PY_TYPE(Lift), (PyObject *) self, "optimize", args, 2);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParserBase$MethodRemovedUseAnother.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParserBase$MethodRemovedUseAnother::class$ = NULL;
          jmethodID *QueryParserBase$MethodRemovedUseAnother::mids$ = NULL;
          bool QueryParserBase$MethodRemovedUseAnother::live$ = false;

          jclass QueryParserBase$MethodRemovedUseAnother::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParserBase$MethodRemovedUseAnother");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParserBase$MethodRemovedUseAnother::QueryParserBase$MethodRemovedUseAnother() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryParserBase$MethodRemovedUseAnother_init_(t_QueryParserBase$MethodRemovedUseAnother *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_QueryParserBase$MethodRemovedUseAnother__methods_[] = {
            DECLARE_METHOD(t_QueryParserBase$MethodRemovedUseAnother, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParserBase$MethodRemovedUseAnother, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParserBase$MethodRemovedUseAnother, t_QueryParserBase$MethodRemovedUseAnother, ::java::lang::Throwable, QueryParserBase$MethodRemovedUseAnother, t_QueryParserBase$MethodRemovedUseAnother_init_, 0, 0, 0, 0, 0);

          void t_QueryParserBase$MethodRemovedUseAnother::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParserBase$MethodRemovedUseAnother), module, "QueryParserBase$MethodRemovedUseAnother", 0);
          }

          void t_QueryParserBase$MethodRemovedUseAnother::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParserBase$MethodRemovedUseAnother).tp_dict, "class_", make_descriptor(QueryParserBase$MethodRemovedUseAnother::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParserBase$MethodRemovedUseAnother).tp_dict, "wrapfn_", make_descriptor(t_QueryParserBase$MethodRemovedUseAnother::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParserBase$MethodRemovedUseAnother).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParserBase$MethodRemovedUseAnother::initializeClass, 1)))
              return NULL;
            return t_QueryParserBase$MethodRemovedUseAnother::wrap_Object(QueryParserBase$MethodRemovedUseAnother(((t_QueryParserBase$MethodRemovedUseAnother *) arg)->object.this$));
          }
          static PyObject *t_QueryParserBase$MethodRemovedUseAnother_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParserBase$MethodRemovedUseAnother::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryParserBase$MethodRemovedUseAnother_init_(t_QueryParserBase$MethodRemovedUseAnother *self, PyObject *args, PyObject *kwds)
          {
            QueryParserBase$MethodRemovedUseAnother object((jobject) NULL);

            INT_CALL(object = QueryParserBase$MethodRemovedUseAnother());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/OrQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/DistanceSubQuery.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *OrQuery::class$ = NULL;
            jmethodID *OrQuery::mids$ = NULL;
            bool OrQuery::live$ = false;

            jclass OrQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/OrQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4136185e] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_addSpanQueries_0564f431] = env->getMethodID(cls, "addSpanQueries", "(Lorg/apache/lucene/queryparser/surround/query/SpanNearClauseFactory;)V");
                mids$[mid_distanceSubQueryNotAllowed_14c7b5c5] = env->getMethodID(cls, "distanceSubQueryNotAllowed", "()Ljava/lang/String;");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            OrQuery::OrQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_4136185e, a0.this$, a1, a2.this$)) {}

            void OrQuery::addSpanQueries(const ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQueries_0564f431], a0.this$);
            }

            ::java::lang::String OrQuery::distanceSubQueryNotAllowed() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_distanceSubQueryNotAllowed_14c7b5c5]));
            }

            ::org::apache::lucene::search::Query OrQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_OrQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_OrQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_OrQuery_init_(t_OrQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_OrQuery_addSpanQueries(t_OrQuery *self, PyObject *arg);
            static PyObject *t_OrQuery_distanceSubQueryNotAllowed(t_OrQuery *self);
            static PyObject *t_OrQuery_makeLuceneQueryFieldNoBoost(t_OrQuery *self, PyObject *args);

            static PyMethodDef t_OrQuery__methods_[] = {
              DECLARE_METHOD(t_OrQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrQuery, addSpanQueries, METH_O),
              DECLARE_METHOD(t_OrQuery, distanceSubQueryNotAllowed, METH_NOARGS),
              DECLARE_METHOD(t_OrQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(OrQuery, t_OrQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, OrQuery, t_OrQuery_init_, 0, 0, 0, 0, 0);

            void t_OrQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(OrQuery), module, "OrQuery", 0);
            }

            void t_OrQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(OrQuery).tp_dict, "class_", make_descriptor(OrQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(OrQuery).tp_dict, "wrapfn_", make_descriptor(t_OrQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(OrQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_OrQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, OrQuery::initializeClass, 1)))
                return NULL;
              return t_OrQuery::wrap_Object(OrQuery(((t_OrQuery *) arg)->object.this$));
            }
            static PyObject *t_OrQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, OrQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_OrQuery_init_(t_OrQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              OrQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = OrQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_OrQuery_addSpanQueries(t_OrQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SpanNearClauseFactory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQueries(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQueries", arg);
              return NULL;
            }

            static PyObject *t_OrQuery_distanceSubQueryNotAllowed(t_OrQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.distanceSubQueryNotAllowed());
              return j2p(result);
            }

            static PyObject *t_OrQuery_makeLuceneQueryFieldNoBoost(t_OrQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(OrQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinFieldComparator::class$ = NULL;
          jmethodID *ToParentBlockJoinFieldComparator::mids$ = NULL;
          bool ToParentBlockJoinFieldComparator::live$ = false;

          jclass ToParentBlockJoinFieldComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinFieldComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
              mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
              mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
              mids$[mid_setTopValue_290588ee] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Object;)V");
              mids$[mid_value_29be6a55] = env->getMethodID(cls, "value", "(I)Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint ToParentBlockJoinFieldComparator::compare(jint a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
          }

          void ToParentBlockJoinFieldComparator::setBottom(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::FieldComparator ToParentBlockJoinFieldComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
          }

          void ToParentBlockJoinFieldComparator::setTopValue(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTopValue_290588ee], a0.this$);
          }

          ::java::lang::Object ToParentBlockJoinFieldComparator::value(jint a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_value_29be6a55], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Highest.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Lowest.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinFieldComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator_of_(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_compare(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_setBottom(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_setNextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_setTopValue(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator_value(t_ToParentBlockJoinFieldComparator *self, PyObject *args);
          static int t_ToParentBlockJoinFieldComparator_set__bottom(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data);
          static int t_ToParentBlockJoinFieldComparator_set__nextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data);
          static int t_ToParentBlockJoinFieldComparator_set__topValue(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data);
          static PyObject *t_ToParentBlockJoinFieldComparator_get__parameters_(t_ToParentBlockJoinFieldComparator *self, void *data);
          static PyGetSetDef t_ToParentBlockJoinFieldComparator__fields_[] = {
            DECLARE_SET_FIELD(t_ToParentBlockJoinFieldComparator, bottom),
            DECLARE_SET_FIELD(t_ToParentBlockJoinFieldComparator, nextReader),
            DECLARE_SET_FIELD(t_ToParentBlockJoinFieldComparator, topValue),
            DECLARE_GET_FIELD(t_ToParentBlockJoinFieldComparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinFieldComparator__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, compare, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, setBottom, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, setTopValue, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator, value, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinFieldComparator, t_ToParentBlockJoinFieldComparator, ::org::apache::lucene::search::FieldComparator, ToParentBlockJoinFieldComparator, abstract_init, 0, 0, t_ToParentBlockJoinFieldComparator__fields_, 0, 0);
          PyObject *t_ToParentBlockJoinFieldComparator::wrap_Object(const ToParentBlockJoinFieldComparator& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator *self = (t_ToParentBlockJoinFieldComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ToParentBlockJoinFieldComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator *self = (t_ToParentBlockJoinFieldComparator *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ToParentBlockJoinFieldComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinFieldComparator), module, "ToParentBlockJoinFieldComparator", 0);
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "Highest", make_descriptor(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest)));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "Lowest", make_descriptor(&PY_TYPE(ToParentBlockJoinFieldComparator$Lowest)));
          }

          void t_ToParentBlockJoinFieldComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "class_", make_descriptor(ToParentBlockJoinFieldComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinFieldComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinFieldComparator::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinFieldComparator::wrap_Object(ToParentBlockJoinFieldComparator(((t_ToParentBlockJoinFieldComparator *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinFieldComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinFieldComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_of_(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_compare(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "compare", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_setBottom(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.setBottom(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "setBottom", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_setNextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setNextReader(a0));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_setTopValue(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(self->object.setTopValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "setTopValue", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator_value(t_ToParentBlockJoinFieldComparator *self, PyObject *args)
          {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.value(a0));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator), (PyObject *) self, "value", args, 2);
          }
          static PyObject *t_ToParentBlockJoinFieldComparator_get__parameters_(t_ToParentBlockJoinFieldComparator *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static int t_ToParentBlockJoinFieldComparator_set__bottom(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setBottom(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "bottom", arg);
            return -1;
          }

          static int t_ToParentBlockJoinFieldComparator_set__nextReader(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_ToParentBlockJoinFieldComparator_set__topValue(t_ToParentBlockJoinFieldComparator *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setTopValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "topValue", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanNotBuilder.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanNotBuilder::class$ = NULL;
            jmethodID *SpanNotBuilder::mids$ = NULL;
            bool SpanNotBuilder::live$ = false;

            jclass SpanNotBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanNotBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanNotBuilder::SpanNotBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanNotBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanNotBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanNotBuilder_init_(t_SpanNotBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanNotBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanNotBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNotBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanNotBuilder, t_SpanNotBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanNotBuilder, t_SpanNotBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanNotBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanNotBuilder), module, "SpanNotBuilder", 0);
            }

            void t_SpanNotBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanNotBuilder).tp_dict, "class_", make_descriptor(SpanNotBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanNotBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanNotBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanNotBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanNotBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanNotBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanNotBuilder::wrap_Object(SpanNotBuilder(((t_SpanNotBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanNotBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanNotBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanNotBuilder_init_(t_SpanNotBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanNotBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanNotBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/RegExp.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Map.h"
#include "org/apache/lucene/util/automaton/AutomatonProvider.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *RegExp::class$ = NULL;
          jmethodID *RegExp::mids$ = NULL;
          bool RegExp::live$ = false;
          jint RegExp::ALL = (jint) 0;
          jint RegExp::ANYSTRING = (jint) 0;
          jint RegExp::AUTOMATON = (jint) 0;
          jint RegExp::COMPLEMENT = (jint) 0;
          jint RegExp::EMPTY = (jint) 0;
          jint RegExp::INTERSECTION = (jint) 0;
          jint RegExp::INTERVAL = (jint) 0;
          jint RegExp::NONE = (jint) 0;

          jclass RegExp::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/RegExp");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
              mids$[mid_getIdentifiers_03e99967] = env->getMethodID(cls, "getIdentifiers", "()Ljava/util/Set;");
              mids$[mid_setAllowMutate_bb0c7673] = env->getMethodID(cls, "setAllowMutate", "(Z)Z");
              mids$[mid_toAutomaton_9b0d5999] = env->getMethodID(cls, "toAutomaton", "()Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toAutomaton_ab3fd6f0] = env->getMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/util/automaton/AutomatonProvider;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toAutomaton_5130eb3f] = env->getMethodID(cls, "toAutomaton", "(Ljava/util/Map;)Lorg/apache/lucene/util/automaton/Automaton;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALL = env->getStaticIntField(cls, "ALL");
              ANYSTRING = env->getStaticIntField(cls, "ANYSTRING");
              AUTOMATON = env->getStaticIntField(cls, "AUTOMATON");
              COMPLEMENT = env->getStaticIntField(cls, "COMPLEMENT");
              EMPTY = env->getStaticIntField(cls, "EMPTY");
              INTERSECTION = env->getStaticIntField(cls, "INTERSECTION");
              INTERVAL = env->getStaticIntField(cls, "INTERVAL");
              NONE = env->getStaticIntField(cls, "NONE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RegExp::RegExp(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          RegExp::RegExp(const ::java::lang::String & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

          ::java::util::Set RegExp::getIdentifiers() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getIdentifiers_03e99967]));
          }

          jboolean RegExp::setAllowMutate(jboolean a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_setAllowMutate_bb0c7673], a0);
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton() const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_9b0d5999]));
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton(const ::org::apache::lucene::util::automaton::AutomatonProvider & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_ab3fd6f0], a0.this$));
          }

          ::org::apache::lucene::util::automaton::Automaton RegExp::toAutomaton(const ::java::util::Map & a0) const
          {
            return ::org::apache::lucene::util::automaton::Automaton(env->callObjectMethod(this$, mids$[mid_toAutomaton_5130eb3f], a0.this$));
          }

          ::java::lang::String RegExp::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_RegExp_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RegExp_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RegExp_init_(t_RegExp *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RegExp_getIdentifiers(t_RegExp *self);
          static PyObject *t_RegExp_setAllowMutate(t_RegExp *self, PyObject *arg);
          static PyObject *t_RegExp_toAutomaton(t_RegExp *self, PyObject *args);
          static PyObject *t_RegExp_toString(t_RegExp *self, PyObject *args);
          static int t_RegExp_set__allowMutate(t_RegExp *self, PyObject *arg, void *data);
          static PyObject *t_RegExp_get__identifiers(t_RegExp *self, void *data);
          static PyGetSetDef t_RegExp__fields_[] = {
            DECLARE_SET_FIELD(t_RegExp, allowMutate),
            DECLARE_GET_FIELD(t_RegExp, identifiers),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RegExp__methods_[] = {
            DECLARE_METHOD(t_RegExp, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RegExp, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RegExp, getIdentifiers, METH_NOARGS),
            DECLARE_METHOD(t_RegExp, setAllowMutate, METH_O),
            DECLARE_METHOD(t_RegExp, toAutomaton, METH_VARARGS),
            DECLARE_METHOD(t_RegExp, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RegExp, t_RegExp, ::java::lang::Object, RegExp, t_RegExp_init_, 0, 0, t_RegExp__fields_, 0, 0);

          void t_RegExp::install(PyObject *module)
          {
            installType(&PY_TYPE(RegExp), module, "RegExp", 0);
          }

          void t_RegExp::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "class_", make_descriptor(RegExp::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "wrapfn_", make_descriptor(t_RegExp::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(RegExp::initializeClass);
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "ALL", make_descriptor(RegExp::ALL));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "ANYSTRING", make_descriptor(RegExp::ANYSTRING));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "AUTOMATON", make_descriptor(RegExp::AUTOMATON));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "COMPLEMENT", make_descriptor(RegExp::COMPLEMENT));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "EMPTY", make_descriptor(RegExp::EMPTY));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "INTERSECTION", make_descriptor(RegExp::INTERSECTION));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "INTERVAL", make_descriptor(RegExp::INTERVAL));
            PyDict_SetItemString(PY_TYPE(RegExp).tp_dict, "NONE", make_descriptor(RegExp::NONE));
          }

          static PyObject *t_RegExp_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RegExp::initializeClass, 1)))
              return NULL;
            return t_RegExp::wrap_Object(RegExp(((t_RegExp *) arg)->object.this$));
          }
          static PyObject *t_RegExp_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RegExp::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RegExp_init_(t_RegExp *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                RegExp object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = RegExp(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                RegExp object((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  INT_CALL(object = RegExp(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RegExp_getIdentifiers(t_RegExp *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getIdentifiers());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_RegExp_setAllowMutate(t_RegExp *self, PyObject *arg)
          {
            jboolean a0;
            jboolean result;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setAllowMutate(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setAllowMutate", arg);
            return NULL;
          }

          static PyObject *t_RegExp_toAutomaton(t_RegExp *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);
                OBJ_CALL(result = self->object.toAutomaton());
                return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
              }
              break;
             case 1:
              {
                ::org::apache::lucene::util::automaton::AutomatonProvider a0((jobject) NULL);
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::AutomatonProvider::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
                {
                  OBJ_CALL(result = self->object.toAutomaton(a0));
                  return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "toAutomaton", args);
            return NULL;
          }

          static PyObject *t_RegExp_toString(t_RegExp *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(RegExp), (PyObject *) self, "toString", args, 2);
          }

          static int t_RegExp_set__allowMutate(t_RegExp *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllowMutate(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allowMutate", arg);
            return -1;
          }

          static PyObject *t_RegExp_get__identifiers(t_RegExp *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getIdentifiers());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/NearSpansOrdered.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *NearSpansOrdered::class$ = NULL;
          jmethodID *NearSpansOrdered::mids$ = NULL;
          bool NearSpansOrdered::live$ = false;

          jclass NearSpansOrdered::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/NearSpansOrdered");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a9b434a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)V");
              mids$[mid_init$_0f9019fb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanNearQuery;Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;Z)V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_getSubSpans_dd49b8eb] = env->getMethodID(cls, "getSubSpans", "()[Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NearSpansOrdered::NearSpansOrdered(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::org::apache::lucene::util::Bits & a2, const ::java::util::Map & a3) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_a9b434a2, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          NearSpansOrdered::NearSpansOrdered(const ::org::apache::lucene::search::spans::SpanNearQuery & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::org::apache::lucene::util::Bits & a2, const ::java::util::Map & a3, jboolean a4) : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_0f9019fb, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

          jlong NearSpansOrdered::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint NearSpansOrdered::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint NearSpansOrdered::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection NearSpansOrdered::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          JArray< ::org::apache::lucene::search::spans::Spans > NearSpansOrdered::getSubSpans() const
          {
            return JArray< ::org::apache::lucene::search::spans::Spans >(env->callObjectMethod(this$, mids$[mid_getSubSpans_dd49b8eb]));
          }

          jboolean NearSpansOrdered::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean NearSpansOrdered::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean NearSpansOrdered::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint NearSpansOrdered::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }

          ::java::lang::String NearSpansOrdered::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_NearSpansOrdered_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NearSpansOrdered_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NearSpansOrdered_init_(t_NearSpansOrdered *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NearSpansOrdered_cost(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_doc(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_end(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_getPayload(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_getSubSpans(t_NearSpansOrdered *self);
          static PyObject *t_NearSpansOrdered_isPayloadAvailable(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_next(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_skipTo(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_start(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_toString(t_NearSpansOrdered *self, PyObject *args);
          static PyObject *t_NearSpansOrdered_get__payload(t_NearSpansOrdered *self, void *data);
          static PyObject *t_NearSpansOrdered_get__payloadAvailable(t_NearSpansOrdered *self, void *data);
          static PyObject *t_NearSpansOrdered_get__subSpans(t_NearSpansOrdered *self, void *data);
          static PyGetSetDef t_NearSpansOrdered__fields_[] = {
            DECLARE_GET_FIELD(t_NearSpansOrdered, payload),
            DECLARE_GET_FIELD(t_NearSpansOrdered, payloadAvailable),
            DECLARE_GET_FIELD(t_NearSpansOrdered, subSpans),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NearSpansOrdered__methods_[] = {
            DECLARE_METHOD(t_NearSpansOrdered, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansOrdered, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NearSpansOrdered, cost, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, doc, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, end, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, getPayload, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, getSubSpans, METH_NOARGS),
            DECLARE_METHOD(t_NearSpansOrdered, isPayloadAvailable, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, next, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, skipTo, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, start, METH_VARARGS),
            DECLARE_METHOD(t_NearSpansOrdered, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NearSpansOrdered, t_NearSpansOrdered, ::org::apache::lucene::search::spans::Spans, NearSpansOrdered, t_NearSpansOrdered_init_, 0, 0, t_NearSpansOrdered__fields_, 0, 0);

          void t_NearSpansOrdered::install(PyObject *module)
          {
            installType(&PY_TYPE(NearSpansOrdered), module, "NearSpansOrdered", 0);
          }

          void t_NearSpansOrdered::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NearSpansOrdered).tp_dict, "class_", make_descriptor(NearSpansOrdered::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NearSpansOrdered).tp_dict, "wrapfn_", make_descriptor(t_NearSpansOrdered::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NearSpansOrdered).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NearSpansOrdered_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NearSpansOrdered::initializeClass, 1)))
              return NULL;
            return t_NearSpansOrdered::wrap_Object(NearSpansOrdered(((t_NearSpansOrdered *) arg)->object.this$));
          }
          static PyObject *t_NearSpansOrdered_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NearSpansOrdered::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NearSpansOrdered_init_(t_NearSpansOrdered *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
                ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
                ::org::apache::lucene::util::Bits a2((jobject) NULL);
                ::java::util::Map a3((jobject) NULL);
                PyTypeObject **p3;
                NearSpansOrdered object((jobject) NULL);

                if (!parseArgs(args, "kkkK", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = NearSpansOrdered(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::search::spans::SpanNearQuery a0((jobject) NULL);
                ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
                ::org::apache::lucene::util::Bits a2((jobject) NULL);
                ::java::util::Map a3((jobject) NULL);
                PyTypeObject **p3;
                jboolean a4;
                NearSpansOrdered object((jobject) NULL);

                if (!parseArgs(args, "kkkKZ", ::org::apache::lucene::search::spans::SpanNearQuery::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_, &a4))
                {
                  INT_CALL(object = NearSpansOrdered(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NearSpansOrdered_cost(t_NearSpansOrdered *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_NearSpansOrdered_doc(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.doc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "doc", args, 2);
          }

          static PyObject *t_NearSpansOrdered_end(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.end());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_NearSpansOrdered_getPayload(t_NearSpansOrdered *self, PyObject *args)
          {
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPayload());
              return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "getPayload", args, 2);
          }

          static PyObject *t_NearSpansOrdered_getSubSpans(t_NearSpansOrdered *self)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSubSpans());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }

          static PyObject *t_NearSpansOrdered_isPayloadAvailable(t_NearSpansOrdered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isPayloadAvailable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "isPayloadAvailable", args, 2);
          }

          static PyObject *t_NearSpansOrdered_next(t_NearSpansOrdered *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.next());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "next", args, 2);
          }

          static PyObject *t_NearSpansOrdered_skipTo(t_NearSpansOrdered *self, PyObject *args)
          {
            jint a0;
            jboolean result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "skipTo", args, 2);
          }

          static PyObject *t_NearSpansOrdered_start(t_NearSpansOrdered *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.start());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "start", args, 2);
          }

          static PyObject *t_NearSpansOrdered_toString(t_NearSpansOrdered *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NearSpansOrdered), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NearSpansOrdered_get__payload(t_NearSpansOrdered *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_NearSpansOrdered_get__payloadAvailable(t_NearSpansOrdered *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_NearSpansOrdered_get__subSpans(t_NearSpansOrdered *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::Spans > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSubSpans());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_Spans::wrap_jobject);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexableFieldType::class$ = NULL;
        jmethodID *IndexableFieldType::mids$ = NULL;
        bool IndexableFieldType::live$ = false;

        jclass IndexableFieldType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexableFieldType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docValueType_db3dc573] = env->getMethodID(cls, "docValueType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_indexOptions_e1b704de] = env->getMethodID(cls, "indexOptions", "()Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_indexed_54c6a16a] = env->getMethodID(cls, "indexed", "()Z");
            mids$[mid_omitNorms_54c6a16a] = env->getMethodID(cls, "omitNorms", "()Z");
            mids$[mid_storeTermVectorOffsets_54c6a16a] = env->getMethodID(cls, "storeTermVectorOffsets", "()Z");
            mids$[mid_storeTermVectorPayloads_54c6a16a] = env->getMethodID(cls, "storeTermVectorPayloads", "()Z");
            mids$[mid_storeTermVectorPositions_54c6a16a] = env->getMethodID(cls, "storeTermVectorPositions", "()Z");
            mids$[mid_storeTermVectors_54c6a16a] = env->getMethodID(cls, "storeTermVectors", "()Z");
            mids$[mid_stored_54c6a16a] = env->getMethodID(cls, "stored", "()Z");
            mids$[mid_tokenized_54c6a16a] = env->getMethodID(cls, "tokenized", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::FieldInfo$DocValuesType IndexableFieldType::docValueType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_docValueType_db3dc573]));
        }

        ::org::apache::lucene::index::FieldInfo$IndexOptions IndexableFieldType::indexOptions() const
        {
          return ::org::apache::lucene::index::FieldInfo$IndexOptions(env->callObjectMethod(this$, mids$[mid_indexOptions_e1b704de]));
        }

        jboolean IndexableFieldType::indexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_indexed_54c6a16a]);
        }

        jboolean IndexableFieldType::omitNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitNorms_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectorOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorOffsets_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectorPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPayloads_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectorPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPositions_54c6a16a]);
        }

        jboolean IndexableFieldType::storeTermVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectors_54c6a16a]);
        }

        jboolean IndexableFieldType::stored() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stored_54c6a16a]);
        }

        jboolean IndexableFieldType::tokenized() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tokenized_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexableFieldType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableFieldType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexableFieldType_docValueType(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_indexOptions(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_indexed(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_omitNorms(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorOffsets(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorPayloads(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectorPositions(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_storeTermVectors(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_stored(t_IndexableFieldType *self);
        static PyObject *t_IndexableFieldType_tokenized(t_IndexableFieldType *self);

        static PyMethodDef t_IndexableFieldType__methods_[] = {
          DECLARE_METHOD(t_IndexableFieldType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableFieldType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexableFieldType, docValueType, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, indexOptions, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, indexed, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, omitNorms, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorOffsets, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorPayloads, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectorPositions, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, storeTermVectors, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, stored, METH_NOARGS),
          DECLARE_METHOD(t_IndexableFieldType, tokenized, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexableFieldType, t_IndexableFieldType, ::java::lang::Object, IndexableFieldType, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexableFieldType::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexableFieldType), module, "IndexableFieldType", 0);
        }

        void t_IndexableFieldType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexableFieldType).tp_dict, "class_", make_descriptor(IndexableFieldType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexableFieldType).tp_dict, "wrapfn_", make_descriptor(t_IndexableFieldType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexableFieldType).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexableFieldType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexableFieldType::initializeClass, 1)))
            return NULL;
          return t_IndexableFieldType::wrap_Object(IndexableFieldType(((t_IndexableFieldType *) arg)->object.this$));
        }
        static PyObject *t_IndexableFieldType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexableFieldType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexableFieldType_docValueType(t_IndexableFieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.docValueType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_IndexableFieldType_indexOptions(t_IndexableFieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.indexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(result);
        }

        static PyObject *t_IndexableFieldType_indexed(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.indexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_omitNorms(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorOffsets(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorPayloads(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectorPositions(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_storeTermVectors(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_stored(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.stored());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexableFieldType_tokenized(t_IndexableFieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tokenized());
          Py_RETURN_BOOL(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonIndexOutput.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonIndexOutput::class$ = NULL;
        jmethodID *PythonIndexOutput::mids$ = NULL;
        bool PythonIndexOutput::live$ = false;

        jclass PythonIndexOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonIndexOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_49b4f12b] = env->getMethodID(cls, "writeBytes", "([B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIndexOutput::PythonIndexOutput() : ::org::apache::lucene::store::IndexOutput(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIndexOutput::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        void PythonIndexOutput::flush() const
        {
          env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        jlong PythonIndexOutput::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIndexOutput::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonIndexOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonIndexOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIndexOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIndexOutput_init_(t_PythonIndexOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIndexOutput_finalize(t_PythonIndexOutput *self);
        static PyObject *t_PythonIndexOutput_flush(t_PythonIndexOutput *self, PyObject *args);
        static PyObject *t_PythonIndexOutput_pythonExtension(t_PythonIndexOutput *self, PyObject *args);
        static PyObject *t_PythonIndexOutput_writeBytes(t_PythonIndexOutput *self, PyObject *args);
        static void JNICALL t_PythonIndexOutput_close0(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexOutput_getChecksum1(JNIEnv *jenv, jobject jobj);
        static jlong JNICALL t_PythonIndexOutput_getFilePointer2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexOutput_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIndexOutput_writeByte4(JNIEnv *jenv, jobject jobj, jbyte a0);
        static void JNICALL t_PythonIndexOutput_writeBytes5(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonIndexOutput_get__self(t_PythonIndexOutput *self, void *data);
        static PyGetSetDef t_PythonIndexOutput__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIndexOutput, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIndexOutput__methods_[] = {
          DECLARE_METHOD(t_PythonIndexOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIndexOutput, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIndexOutput, flush, METH_VARARGS),
          DECLARE_METHOD(t_PythonIndexOutput, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonIndexOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIndexOutput, t_PythonIndexOutput, ::org::apache::lucene::store::IndexOutput, PythonIndexOutput, t_PythonIndexOutput_init_, 0, 0, t_PythonIndexOutput__fields_, 0, 0);

        void t_PythonIndexOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIndexOutput), module, "PythonIndexOutput", 1);
        }

        void t_PythonIndexOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIndexOutput).tp_dict, "class_", make_descriptor(PythonIndexOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIndexOutput).tp_dict, "wrapfn_", make_descriptor(t_PythonIndexOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIndexOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIndexOutput::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonIndexOutput_close0 },
            { "getChecksum", "()J", (void *) t_PythonIndexOutput_getChecksum1 },
            { "getFilePointer", "()J", (void *) t_PythonIndexOutput_getFilePointer2 },
            { "pythonDecRef", "()V", (void *) t_PythonIndexOutput_pythonDecRef3 },
            { "writeByte", "(B)V", (void *) t_PythonIndexOutput_writeByte4 },
            { "writeBytes", "([B)V", (void *) t_PythonIndexOutput_writeBytes5 },
          };
          env->registerNatives(cls, methods, 6);
        }

        static PyObject *t_PythonIndexOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIndexOutput::initializeClass, 1)))
            return NULL;
          return t_PythonIndexOutput::wrap_Object(PythonIndexOutput(((t_PythonIndexOutput *) arg)->object.this$));
        }
        static PyObject *t_PythonIndexOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIndexOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIndexOutput_init_(t_PythonIndexOutput *self, PyObject *args, PyObject *kwds)
        {
          PythonIndexOutput object((jobject) NULL);

          INT_CALL(object = PythonIndexOutput());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIndexOutput_finalize(t_PythonIndexOutput *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIndexOutput_flush(t_PythonIndexOutput *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonIndexOutput), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_PythonIndexOutput_pythonExtension(t_PythonIndexOutput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonIndexOutput_writeBytes(t_PythonIndexOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PythonIndexOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static void JNICALL t_PythonIndexOutput_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jlong JNICALL t_PythonIndexOutput_getChecksum1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "getChecksum", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("getChecksum", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static jlong JNICALL t_PythonIndexOutput_getFilePointer2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jlong value;
          PyObject *result = PyObject_CallMethod(obj, "getFilePointer", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "J", &value))
          {
            throwTypeError("getFilePointer", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jlong) 0;
        }

        static void JNICALL t_PythonIndexOutput_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonIndexOutput_writeByte4(JNIEnv *jenv, jobject jobj, jbyte a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = PyInt_FromLong(a0);
          PyObject *result = PyObject_CallMethod(obj, "writeByte", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonIndexOutput_writeBytes5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIndexOutput::mids$[PythonIndexOutput::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = JArray<jbyte>(a0).wrap();
          PyObject *result = PyObject_CallMethod(obj, "writeBytes", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonIndexOutput_get__self(t_PythonIndexOutput *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/FieldCacheSource.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *FieldCacheSource::class$ = NULL;
            jmethodID *FieldCacheSource::mids$ = NULL;
            bool FieldCacheSource::live$ = false;

            jclass FieldCacheSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/FieldCacheSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
                mids$[mid_getFieldCache_a7c1cc27] = env->getMethodID(cls, "getFieldCache", "()Lorg/apache/lucene/search/FieldCache;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FieldCacheSource::FieldCacheSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String FieldCacheSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean FieldCacheSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::java::lang::String FieldCacheSource::getField() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
            }

            ::org::apache::lucene::search::FieldCache FieldCacheSource::getFieldCache() const
            {
              return ::org::apache::lucene::search::FieldCache(env->callObjectMethod(this$, mids$[mid_getFieldCache_a7c1cc27]));
            }

            jint FieldCacheSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_FieldCacheSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FieldCacheSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FieldCacheSource_init_(t_FieldCacheSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FieldCacheSource_description(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_equals(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_getField(t_FieldCacheSource *self);
            static PyObject *t_FieldCacheSource_getFieldCache(t_FieldCacheSource *self);
            static PyObject *t_FieldCacheSource_hashCode(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_get__field(t_FieldCacheSource *self, void *data);
            static PyObject *t_FieldCacheSource_get__fieldCache(t_FieldCacheSource *self, void *data);
            static PyGetSetDef t_FieldCacheSource__fields_[] = {
              DECLARE_GET_FIELD(t_FieldCacheSource, field),
              DECLARE_GET_FIELD(t_FieldCacheSource, fieldCache),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FieldCacheSource__methods_[] = {
              DECLARE_METHOD(t_FieldCacheSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldCacheSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldCacheSource, description, METH_VARARGS),
              DECLARE_METHOD(t_FieldCacheSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_FieldCacheSource, getField, METH_NOARGS),
              DECLARE_METHOD(t_FieldCacheSource, getFieldCache, METH_NOARGS),
              DECLARE_METHOD(t_FieldCacheSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FieldCacheSource, t_FieldCacheSource, ::org::apache::lucene::queries::function::ValueSource, FieldCacheSource, t_FieldCacheSource_init_, 0, 0, t_FieldCacheSource__fields_, 0, 0);

            void t_FieldCacheSource::install(PyObject *module)
            {
              installType(&PY_TYPE(FieldCacheSource), module, "FieldCacheSource", 0);
            }

            void t_FieldCacheSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FieldCacheSource).tp_dict, "class_", make_descriptor(FieldCacheSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FieldCacheSource).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FieldCacheSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FieldCacheSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FieldCacheSource::initializeClass, 1)))
                return NULL;
              return t_FieldCacheSource::wrap_Object(FieldCacheSource(((t_FieldCacheSource *) arg)->object.this$));
            }
            static PyObject *t_FieldCacheSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FieldCacheSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FieldCacheSource_init_(t_FieldCacheSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              FieldCacheSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = FieldCacheSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FieldCacheSource_description(t_FieldCacheSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FieldCacheSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_FieldCacheSource_equals(t_FieldCacheSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FieldCacheSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_FieldCacheSource_getField(t_FieldCacheSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            static PyObject *t_FieldCacheSource_getFieldCache(t_FieldCacheSource *self)
            {
              ::org::apache::lucene::search::FieldCache result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldCache());
              return ::org::apache::lucene::search::t_FieldCache::wrap_Object(result);
            }

            static PyObject *t_FieldCacheSource_hashCode(t_FieldCacheSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FieldCacheSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_FieldCacheSource_get__field(t_FieldCacheSource *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getField());
              return j2p(value);
            }

            static PyObject *t_FieldCacheSource_get__fieldCache(t_FieldCacheSource *self, void *data)
            {
              ::org::apache::lucene::search::FieldCache value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldCache());
              return ::org::apache::lucene::search::t_FieldCache::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DoubleDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DoubleDocValuesField::class$ = NULL;
        jmethodID *DoubleDocValuesField::mids$ = NULL;
        bool DoubleDocValuesField::live$ = false;

        jclass DoubleDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DoubleDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_493fce5f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;D)V");
            mids$[mid_setDoubleValue_5d1c7645] = env->getMethodID(cls, "setDoubleValue", "(D)V");
            mids$[mid_setLongValue_0ee6df2f] = env->getMethodID(cls, "setLongValue", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleDocValuesField::DoubleDocValuesField(const ::java::lang::String & a0, jdouble a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_493fce5f, a0.this$, a1)) {}

        void DoubleDocValuesField::setDoubleValue(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDoubleValue_5d1c7645], a0);
        }

        void DoubleDocValuesField::setLongValue(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLongValue_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DoubleDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoubleDocValuesField_init_(t_DoubleDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleDocValuesField_setDoubleValue(t_DoubleDocValuesField *self, PyObject *args);
        static PyObject *t_DoubleDocValuesField_setLongValue(t_DoubleDocValuesField *self, PyObject *args);
        static int t_DoubleDocValuesField_set__doubleValue(t_DoubleDocValuesField *self, PyObject *arg, void *data);
        static int t_DoubleDocValuesField_set__longValue(t_DoubleDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_DoubleDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_DoubleDocValuesField, doubleValue),
          DECLARE_SET_FIELD(t_DoubleDocValuesField, longValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DoubleDocValuesField__methods_[] = {
          DECLARE_METHOD(t_DoubleDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleDocValuesField, setDoubleValue, METH_VARARGS),
          DECLARE_METHOD(t_DoubleDocValuesField, setLongValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleDocValuesField, t_DoubleDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, DoubleDocValuesField, t_DoubleDocValuesField_init_, 0, 0, t_DoubleDocValuesField__fields_, 0, 0);

        void t_DoubleDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleDocValuesField), module, "DoubleDocValuesField", 0);
        }

        void t_DoubleDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleDocValuesField).tp_dict, "class_", make_descriptor(DoubleDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_DoubleDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoubleDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleDocValuesField::initializeClass, 1)))
            return NULL;
          return t_DoubleDocValuesField::wrap_Object(DoubleDocValuesField(((t_DoubleDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_DoubleDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoubleDocValuesField_init_(t_DoubleDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jdouble a1;
          DoubleDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sD", &a0, &a1))
          {
            INT_CALL(object = DoubleDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_DoubleDocValuesField_setDoubleValue(t_DoubleDocValuesField *self, PyObject *args)
        {
          jdouble a0;

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(self->object.setDoubleValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DoubleDocValuesField), (PyObject *) self, "setDoubleValue", args, 2);
        }

        static PyObject *t_DoubleDocValuesField_setLongValue(t_DoubleDocValuesField *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.setLongValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(DoubleDocValuesField), (PyObject *) self, "setLongValue", args, 2);
        }

        static int t_DoubleDocValuesField_set__doubleValue(t_DoubleDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDoubleValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "doubleValue", arg);
          return -1;
        }

        static int t_DoubleDocValuesField_set__longValue(t_DoubleDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setLongValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "longValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *DefaultSortedSetDocValuesReaderState::class$ = NULL;
          jmethodID *DefaultSortedSetDocValuesReaderState::mids$ = NULL;
          jfieldID *DefaultSortedSetDocValuesReaderState::fids$ = NULL;
          bool DefaultSortedSetDocValuesReaderState::live$ = false;

          jclass DefaultSortedSetDocValuesReaderState::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/DefaultSortedSetDocValuesReaderState");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7d7eaea9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;)V");
              mids$[mid_init$_215fea03] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_getDocValues_4bead171] = env->getMethodID(cls, "getDocValues", "()Lorg/apache/lucene/index/SortedSetDocValues;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getOrdRange_73e2ee38] = env->getMethodID(cls, "getOrdRange", "(Ljava/lang/String;)Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange;");
              mids$[mid_getOrigReader_94bbd010] = env->getMethodID(cls, "getOrigReader", "()Lorg/apache/lucene/index/IndexReader;");
              mids$[mid_getPrefixToOrdRange_db60befd] = env->getMethodID(cls, "getPrefixToOrdRange", "()Ljava/util/Map;");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");

              fids$ = new jfieldID[max_fid];
              fids$[fid_origReader] = env->getFieldID(cls, "origReader", "Lorg/apache/lucene/index/IndexReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultSortedSetDocValuesReaderState::DefaultSortedSetDocValuesReaderState(const ::org::apache::lucene::index::IndexReader & a0) : ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState(env->newObject(initializeClass, &mids$, mid_init$_7d7eaea9, a0.this$)) {}

          DefaultSortedSetDocValuesReaderState::DefaultSortedSetDocValuesReaderState(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1) : ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState(env->newObject(initializeClass, &mids$, mid_init$_215fea03, a0.this$, a1.this$)) {}

          ::org::apache::lucene::index::SortedSetDocValues DefaultSortedSetDocValuesReaderState::getDocValues() const
          {
            return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getDocValues_4bead171]));
          }

          ::java::lang::String DefaultSortedSetDocValuesReaderState::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange DefaultSortedSetDocValuesReaderState::getOrdRange(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange(env->callObjectMethod(this$, mids$[mid_getOrdRange_73e2ee38], a0.this$));
          }

          ::org::apache::lucene::index::IndexReader DefaultSortedSetDocValuesReaderState::getOrigReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getOrigReader_94bbd010]));
          }

          ::java::util::Map DefaultSortedSetDocValuesReaderState::getPrefixToOrdRange() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getPrefixToOrdRange_db60befd]));
          }

          jint DefaultSortedSetDocValuesReaderState::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          ::org::apache::lucene::index::IndexReader DefaultSortedSetDocValuesReaderState::_get_origReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->getObjectField(this$, fids$[fid_origReader]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_DefaultSortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultSortedSetDocValuesReaderState_init_(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getDocValues(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getField(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrigReader(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getPrefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_getSize(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args);

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__docValues(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__field(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__origReader(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__prefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__size(t_DefaultSortedSetDocValuesReaderState *self, void *data);
          static PyGetSetDef t_DefaultSortedSetDocValuesReaderState__fields_[] = {
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, docValues),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, field),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, origReader),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, prefixToOrdRange),
            DECLARE_GET_FIELD(t_DefaultSortedSetDocValuesReaderState, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DefaultSortedSetDocValuesReaderState__methods_[] = {
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getDocValues, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getField, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getOrdRange, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getOrigReader, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getPrefixToOrdRange, METH_VARARGS),
            DECLARE_METHOD(t_DefaultSortedSetDocValuesReaderState, getSize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultSortedSetDocValuesReaderState, t_DefaultSortedSetDocValuesReaderState, ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState, DefaultSortedSetDocValuesReaderState, t_DefaultSortedSetDocValuesReaderState_init_, 0, 0, t_DefaultSortedSetDocValuesReaderState__fields_, 0, 0);

          void t_DefaultSortedSetDocValuesReaderState::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultSortedSetDocValuesReaderState), module, "DefaultSortedSetDocValuesReaderState", 0);
          }

          void t_DefaultSortedSetDocValuesReaderState::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultSortedSetDocValuesReaderState).tp_dict, "class_", make_descriptor(DefaultSortedSetDocValuesReaderState::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultSortedSetDocValuesReaderState).tp_dict, "wrapfn_", make_descriptor(t_DefaultSortedSetDocValuesReaderState::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultSortedSetDocValuesReaderState).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultSortedSetDocValuesReaderState::initializeClass, 1)))
              return NULL;
            return t_DefaultSortedSetDocValuesReaderState::wrap_Object(DefaultSortedSetDocValuesReaderState(((t_DefaultSortedSetDocValuesReaderState *) arg)->object.this$));
          }
          static PyObject *t_DefaultSortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultSortedSetDocValuesReaderState::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultSortedSetDocValuesReaderState_init_(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                DefaultSortedSetDocValuesReaderState object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
                {
                  INT_CALL(object = DefaultSortedSetDocValuesReaderState(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                DefaultSortedSetDocValuesReaderState object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = DefaultSortedSetDocValuesReaderState(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getDocValues(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getDocValues());
              return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getDocValues", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getField(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.getOrdRange(a0));
              return ::org::apache::lucene::facet::sortedset::t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getOrdRange", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getOrigReader(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getOrigReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getOrigReader", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getPrefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            ::java::util::Map result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getPrefixToOrdRange());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::facet::sortedset::PY_TYPE(SortedSetDocValuesReaderState$OrdRange));
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getPrefixToOrdRange", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_getSize(t_DefaultSortedSetDocValuesReaderState *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSize());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(DefaultSortedSetDocValuesReaderState), (PyObject *) self, "getSize", args, 2);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__docValues(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::SortedSetDocValues value((jobject) NULL);
            OBJ_CALL(value = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__field(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__origReader(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getOrigReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__prefixToOrdRange(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_DefaultSortedSetDocValuesReaderState_get__size(t_DefaultSortedSetDocValuesReaderState *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$INPUT_TYPE::class$ = NULL;
          jmethodID *FST$INPUT_TYPE::mids$ = NULL;
          bool FST$INPUT_TYPE::live$ = false;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE1 = NULL;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE2 = NULL;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE4 = NULL;

          jclass FST$INPUT_TYPE::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$INPUT_TYPE");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_06b999b9] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");
              mids$[mid_values_da3dc83f] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BYTE1 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE1", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              BYTE2 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE2", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              BYTE4 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE4", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$INPUT_TYPE FST$INPUT_TYPE::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return FST$INPUT_TYPE(env->callStaticObjectMethod(cls, mids$[mid_valueOf_06b999b9], a0.this$));
          }

          JArray< FST$INPUT_TYPE > FST$INPUT_TYPE::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< FST$INPUT_TYPE >(env->callStaticObjectMethod(cls, mids$[mid_values_da3dc83f]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$INPUT_TYPE_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$INPUT_TYPE_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$INPUT_TYPE_of_(t_FST$INPUT_TYPE *self, PyObject *args);
          static PyObject *t_FST$INPUT_TYPE_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_FST$INPUT_TYPE_values(PyTypeObject *type);
          static PyObject *t_FST$INPUT_TYPE_get__parameters_(t_FST$INPUT_TYPE *self, void *data);
          static PyGetSetDef t_FST$INPUT_TYPE__fields_[] = {
            DECLARE_GET_FIELD(t_FST$INPUT_TYPE, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$INPUT_TYPE__methods_[] = {
            DECLARE_METHOD(t_FST$INPUT_TYPE, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST$INPUT_TYPE, t_FST$INPUT_TYPE, ::java::lang::Enum, FST$INPUT_TYPE, abstract_init, 0, 0, t_FST$INPUT_TYPE__fields_, 0, 0);
          PyObject *t_FST$INPUT_TYPE::wrap_Object(const FST$INPUT_TYPE& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$INPUT_TYPE::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$INPUT_TYPE *self = (t_FST$INPUT_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$INPUT_TYPE::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$INPUT_TYPE::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$INPUT_TYPE *self = (t_FST$INPUT_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$INPUT_TYPE::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$INPUT_TYPE), module, "FST$INPUT_TYPE", 0);
          }

          void t_FST$INPUT_TYPE::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "class_", make_descriptor(FST$INPUT_TYPE::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "wrapfn_", make_descriptor(t_FST$INPUT_TYPE::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FST$INPUT_TYPE::initializeClass);
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "BYTE1", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE1)));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "BYTE2", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE2)));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "BYTE4", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE4)));
          }

          static PyObject *t_FST$INPUT_TYPE_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$INPUT_TYPE::initializeClass, 1)))
              return NULL;
            return t_FST$INPUT_TYPE::wrap_Object(FST$INPUT_TYPE(((t_FST$INPUT_TYPE *) arg)->object.this$));
          }
          static PyObject *t_FST$INPUT_TYPE_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$INPUT_TYPE::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$INPUT_TYPE_of_(t_FST$INPUT_TYPE *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_FST$INPUT_TYPE_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            FST$INPUT_TYPE result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST$INPUT_TYPE::valueOf(a0));
              return t_FST$INPUT_TYPE::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_FST$INPUT_TYPE_values(PyTypeObject *type)
          {
            JArray< FST$INPUT_TYPE > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::FST$INPUT_TYPE::values());
            return JArray<jobject>(result.this$).wrap(t_FST$INPUT_TYPE::wrap_jobject);
          }
          static PyObject *t_FST$INPUT_TYPE_get__parameters_(t_FST$INPUT_TYPE *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hy/ArmenianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hy {

          ::java::lang::Class *ArmenianAnalyzer::class$ = NULL;
          jmethodID *ArmenianAnalyzer::mids$ = NULL;
          bool ArmenianAnalyzer::live$ = false;
          ::java::lang::String *ArmenianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ArmenianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hy/ArmenianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ArmenianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hy {
          static PyObject *t_ArmenianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArmenianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArmenianAnalyzer_init_(t_ArmenianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArmenianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ArmenianAnalyzer_get__defaultStopSet(t_ArmenianAnalyzer *self, void *data);
          static PyGetSetDef t_ArmenianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ArmenianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ArmenianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ArmenianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArmenianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArmenianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArmenianAnalyzer, t_ArmenianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ArmenianAnalyzer, t_ArmenianAnalyzer_init_, 0, 0, t_ArmenianAnalyzer__fields_, 0, 0);

          void t_ArmenianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArmenianAnalyzer), module, "ArmenianAnalyzer", 0);
          }

          void t_ArmenianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "class_", make_descriptor(ArmenianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ArmenianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArmenianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ArmenianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ArmenianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArmenianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ArmenianAnalyzer::wrap_Object(ArmenianAnalyzer(((t_ArmenianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ArmenianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArmenianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArmenianAnalyzer_init_(t_ArmenianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArmenianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hy::ArmenianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ArmenianAnalyzer_get__defaultStopSet(t_ArmenianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Lambda.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Lambda::class$ = NULL;
          jmethodID *Lambda::mids$ = NULL;
          bool Lambda::live$ = false;

          jclass Lambda::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Lambda");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_eddc6641] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_cb225ea0] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lambda::Lambda() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Lambda::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_eddc6641], a0.this$));
          }

          jfloat Lambda::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_cb225ea0], a0.this$);
          }

          ::java::lang::String Lambda::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Lambda_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lambda_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lambda_init_(t_Lambda *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lambda_explain(t_Lambda *self, PyObject *arg);
          static PyObject *t_Lambda_lambda(t_Lambda *self, PyObject *arg);
          static PyObject *t_Lambda_toString(t_Lambda *self, PyObject *args);

          static PyMethodDef t_Lambda__methods_[] = {
            DECLARE_METHOD(t_Lambda, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lambda, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lambda, explain, METH_O),
            DECLARE_METHOD(t_Lambda, lambda, METH_O),
            DECLARE_METHOD(t_Lambda, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lambda, t_Lambda, ::java::lang::Object, Lambda, t_Lambda_init_, 0, 0, 0, 0, 0);

          void t_Lambda::install(PyObject *module)
          {
            installType(&PY_TYPE(Lambda), module, "Lambda", 0);
          }

          void t_Lambda::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lambda).tp_dict, "class_", make_descriptor(Lambda::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lambda).tp_dict, "wrapfn_", make_descriptor(t_Lambda::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lambda).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lambda_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lambda::initializeClass, 1)))
              return NULL;
            return t_Lambda::wrap_Object(Lambda(((t_Lambda *) arg)->object.this$));
          }
          static PyObject *t_Lambda_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lambda::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lambda_init_(t_Lambda *self, PyObject *args, PyObject *kwds)
          {
            Lambda object((jobject) NULL);

            INT_CALL(object = Lambda());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lambda_explain(t_Lambda *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", arg);
            return NULL;
          }

          static PyObject *t_Lambda_lambda(t_Lambda *self, PyObject *arg)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "lambda", arg);
            return NULL;
          }

          static PyObject *t_Lambda_toString(t_Lambda *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lambda), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {

          ::java::lang::Class *ReverseStringFilter::class$ = NULL;
          jmethodID *ReverseStringFilter::mids$ = NULL;
          bool ReverseStringFilter::live$ = false;
          jchar ReverseStringFilter::INFORMATION_SEPARATOR_MARKER = (jchar) 0;
          jchar ReverseStringFilter::PUA_EC00_MARKER = (jchar) 0;
          jchar ReverseStringFilter::RTL_DIRECTION_MARKER = (jchar) 0;
          jchar ReverseStringFilter::START_OF_HEADING_MARKER = (jchar) 0;

          jclass ReverseStringFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/reverse/ReverseStringFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_0e43cbd7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;C)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reverse_4b169143] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;[C)V");
              mids$[mid_reverse_4fcde068] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_reverse_dcd30fdb] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;[CI)V");
              mids$[mid_reverse_41701017] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/Version;[CII)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              INFORMATION_SEPARATOR_MARKER = env->getStaticCharField(cls, "INFORMATION_SEPARATOR_MARKER");
              PUA_EC00_MARKER = env->getStaticCharField(cls, "PUA_EC00_MARKER");
              RTL_DIRECTION_MARKER = env->getStaticCharField(cls, "RTL_DIRECTION_MARKER");
              START_OF_HEADING_MARKER = env->getStaticCharField(cls, "START_OF_HEADING_MARKER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReverseStringFilter::ReverseStringFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          ReverseStringFilter::ReverseStringFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jchar a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_0e43cbd7, a0.this$, a1.this$, a2)) {}

          jboolean ReverseStringFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const JArray< jchar > & a1)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_4b169143], a0.this$, a1.this$);
          }

          ::java::lang::String ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_reverse_4fcde068], a0.this$, a1.this$));
          }

          void ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const JArray< jchar > & a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_dcd30fdb], a0.this$, a1.this$, a2);
          }

          void ReverseStringFilter::reverse(const ::org::apache::lucene::util::Version & a0, const JArray< jchar > & a1, jint a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reverse_41701017], a0.this$, a1.this$, a2, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {
          static PyObject *t_ReverseStringFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReverseStringFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReverseStringFilter_init_(t_ReverseStringFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReverseStringFilter_incrementToken(t_ReverseStringFilter *self, PyObject *args);
          static PyObject *t_ReverseStringFilter_reverse(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_ReverseStringFilter__methods_[] = {
            DECLARE_METHOD(t_ReverseStringFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ReverseStringFilter, reverse, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ReverseStringFilter, t_ReverseStringFilter, ::org::apache::lucene::analysis::TokenFilter, ReverseStringFilter, t_ReverseStringFilter_init_, 0, 0, 0, 0, 0);

          void t_ReverseStringFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ReverseStringFilter), module, "ReverseStringFilter", 0);
          }

          void t_ReverseStringFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "class_", make_descriptor(ReverseStringFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "wrapfn_", make_descriptor(t_ReverseStringFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ReverseStringFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "INFORMATION_SEPARATOR_MARKER", make_descriptor(ReverseStringFilter::INFORMATION_SEPARATOR_MARKER));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "PUA_EC00_MARKER", make_descriptor(ReverseStringFilter::PUA_EC00_MARKER));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "RTL_DIRECTION_MARKER", make_descriptor(ReverseStringFilter::RTL_DIRECTION_MARKER));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilter).tp_dict, "START_OF_HEADING_MARKER", make_descriptor(ReverseStringFilter::START_OF_HEADING_MARKER));
          }

          static PyObject *t_ReverseStringFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReverseStringFilter::initializeClass, 1)))
              return NULL;
            return t_ReverseStringFilter::wrap_Object(ReverseStringFilter(((t_ReverseStringFilter *) arg)->object.this$));
          }
          static PyObject *t_ReverseStringFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReverseStringFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReverseStringFilter_init_(t_ReverseStringFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ReverseStringFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = ReverseStringFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jchar a2;
                ReverseStringFilter object((jobject) NULL);

                if (!parseArgs(args, "KkC", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ReverseStringFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReverseStringFilter_incrementToken(t_ReverseStringFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ReverseStringFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ReverseStringFilter_reverse(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< jchar > a1((jobject) NULL);

                if (!parseArgs(args, "K[C", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< jchar > a1((jobject) NULL);
                jint a2;

                if (!parseArgs(args, "K[CI", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< jchar > a1((jobject) NULL);
                jint a2;
                jint a3;

                if (!parseArgs(args, "K[CII", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  OBJ_CALL(::org::apache::lucene::analysis::reverse::ReverseStringFilter::reverse(a0, a1, a2, a3));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError(type, "reverse", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordScoreComparator.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordScoreComparator::class$ = NULL;
          jmethodID *SuggestWordScoreComparator::mids$ = NULL;
          bool SuggestWordScoreComparator::live$ = false;

          jclass SuggestWordScoreComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordScoreComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_2e903bf1] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordScoreComparator::SuggestWordScoreComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SuggestWordScoreComparator::compare(const ::org::apache::lucene::search::spell::SuggestWord & a0, const ::org::apache::lucene::search::spell::SuggestWord & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_2e903bf1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordScoreComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordScoreComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWordScoreComparator_init_(t_SuggestWordScoreComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordScoreComparator_compare(t_SuggestWordScoreComparator *self, PyObject *args);

          static PyMethodDef t_SuggestWordScoreComparator__methods_[] = {
            DECLARE_METHOD(t_SuggestWordScoreComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordScoreComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordScoreComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWordScoreComparator, t_SuggestWordScoreComparator, ::java::lang::Object, SuggestWordScoreComparator, t_SuggestWordScoreComparator_init_, 0, 0, 0, 0, 0);

          void t_SuggestWordScoreComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordScoreComparator), module, "SuggestWordScoreComparator", 0);
          }

          void t_SuggestWordScoreComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWordScoreComparator).tp_dict, "class_", make_descriptor(SuggestWordScoreComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWordScoreComparator).tp_dict, "wrapfn_", make_descriptor(t_SuggestWordScoreComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWordScoreComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWordScoreComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordScoreComparator::initializeClass, 1)))
              return NULL;
            return t_SuggestWordScoreComparator::wrap_Object(SuggestWordScoreComparator(((t_SuggestWordScoreComparator *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordScoreComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordScoreComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWordScoreComparator_init_(t_SuggestWordScoreComparator *self, PyObject *args, PyObject *kwds)
          {
            SuggestWordScoreComparator object((jobject) NULL);

            INT_CALL(object = SuggestWordScoreComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWordScoreComparator_compare(t_SuggestWordScoreComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestWord a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianAnalyzer::class$ = NULL;
          jmethodID *GalicianAnalyzer::mids$ = NULL;
          bool GalicianAnalyzer::live$ = false;
          ::java::lang::String *GalicianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GalicianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          GalicianAnalyzer::GalicianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet GalicianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianAnalyzer_init_(t_GalicianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GalicianAnalyzer_get__defaultStopSet(t_GalicianAnalyzer *self, void *data);
          static PyGetSetDef t_GalicianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GalicianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GalicianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GalicianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianAnalyzer, t_GalicianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, GalicianAnalyzer, t_GalicianAnalyzer_init_, 0, 0, t_GalicianAnalyzer__fields_, 0, 0);

          void t_GalicianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianAnalyzer), module, "GalicianAnalyzer", 0);
          }

          void t_GalicianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "class_", make_descriptor(GalicianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_GalicianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(GalicianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(GalicianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GalicianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GalicianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GalicianAnalyzer::wrap_Object(GalicianAnalyzer(((t_GalicianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GalicianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianAnalyzer_init_(t_GalicianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                GalicianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GalicianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::gl::GalicianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GalicianAnalyzer_get__defaultStopSet(t_GalicianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/DummyQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *DummyQueryNodeBuilder::class$ = NULL;
              jmethodID *DummyQueryNodeBuilder::mids$ = NULL;
              bool DummyQueryNodeBuilder::live$ = false;

              jclass DummyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/DummyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_0cc6eb13] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/TermQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DummyQueryNodeBuilder::DummyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::TermQuery DummyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_build_0cc6eb13], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_DummyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DummyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DummyQueryNodeBuilder_init_(t_DummyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DummyQueryNodeBuilder_build(t_DummyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_DummyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_DummyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DummyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DummyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(DummyQueryNodeBuilder, t_DummyQueryNodeBuilder, ::java::lang::Object, DummyQueryNodeBuilder, t_DummyQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_DummyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(DummyQueryNodeBuilder), module, "DummyQueryNodeBuilder", 0);
              }

              void t_DummyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(DummyQueryNodeBuilder).tp_dict, "class_", make_descriptor(DummyQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(DummyQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_DummyQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(DummyQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DummyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DummyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_DummyQueryNodeBuilder::wrap_Object(DummyQueryNodeBuilder(((t_DummyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_DummyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DummyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DummyQueryNodeBuilder_init_(t_DummyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                DummyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = DummyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_DummyQueryNodeBuilder_build(t_DummyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::TermQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fa/PersianNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {

          ::java::lang::Class *PersianNormalizationFilter::class$ = NULL;
          jmethodID *PersianNormalizationFilter::mids$ = NULL;
          bool PersianNormalizationFilter::live$ = false;

          jclass PersianNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fa/PersianNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PersianNormalizationFilter::PersianNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PersianNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fa {
          static PyObject *t_PersianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PersianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PersianNormalizationFilter_init_(t_PersianNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PersianNormalizationFilter_incrementToken(t_PersianNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_PersianNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_PersianNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PersianNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PersianNormalizationFilter, t_PersianNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, PersianNormalizationFilter, t_PersianNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_PersianNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PersianNormalizationFilter), module, "PersianNormalizationFilter", 0);
          }

          void t_PersianNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilter).tp_dict, "class_", make_descriptor(PersianNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_PersianNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PersianNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PersianNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PersianNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_PersianNormalizationFilter::wrap_Object(PersianNormalizationFilter(((t_PersianNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_PersianNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PersianNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PersianNormalizationFilter_init_(t_PersianNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PersianNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PersianNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PersianNormalizationFilter_incrementToken(t_PersianNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PersianNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *AtomicReader::class$ = NULL;
        jmethodID *AtomicReader::mids$ = NULL;
        bool AtomicReader::live$ = false;

        jclass AtomicReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/AtomicReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_docFreq_7eca6a9e] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getContext_c2ef2576] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/AtomicReaderContext;");
            mids$[mid_getDocCount_5fdc3f57] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getSumDocFreq_5fdc3f54] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_5fdc3f54] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_hasNorms_5fdc3f44] = env->getMethodID(cls, "hasNorms", "(Ljava/lang/String;)Z");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_termDocsEnum_d9acd275] = env->getMethodID(cls, "termDocsEnum", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_termPositionsEnum_bf42c6a6] = env->getMethodID(cls, "termPositionsEnum", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_totalTermFreq_7eca6a9d] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_addCoreClosedListenerAsReaderClosedListener_36772e26] = env->getStaticMethodID(cls, "addCoreClosedListenerAsReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_removeCoreClosedListenerAsReaderClosedListener_36772e26] = env->getStaticMethodID(cls, "removeCoreClosedListenerAsReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void AtomicReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void AtomicReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        jint AtomicReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_7eca6a9e], a0.this$);
        }

        ::org::apache::lucene::index::Fields AtomicReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues AtomicReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::org::apache::lucene::index::AtomicReaderContext AtomicReader::getContext() const
        {
          return ::org::apache::lucene::index::AtomicReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_c2ef2576]));
        }

        jint AtomicReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_5fdc3f57], a0.this$);
        }

        ::org::apache::lucene::util::Bits AtomicReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos AtomicReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::util::Bits AtomicReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues AtomicReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues AtomicReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SortedDocValues AtomicReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues AtomicReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues AtomicReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        jlong AtomicReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_5fdc3f54], a0.this$);
        }

        jlong AtomicReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_5fdc3f54], a0.this$);
        }

        jboolean AtomicReader::hasNorms(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNorms_5fdc3f44], a0.this$);
        }

        void AtomicReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::org::apache::lucene::index::DocsEnum AtomicReader::termDocsEnum(const ::org::apache::lucene::index::Term & a0) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_termDocsEnum_d9acd275], a0.this$));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum AtomicReader::termPositionsEnum(const ::org::apache::lucene::index::Term & a0) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_termPositionsEnum_bf42c6a6], a0.this$));
        }

        ::org::apache::lucene::index::Terms AtomicReader::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }

        jlong AtomicReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_7eca6a9d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_AtomicReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AtomicReader_addCoreClosedListener(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_checkIntegrity(t_AtomicReader *self);
        static PyObject *t_AtomicReader_docFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_fields(t_AtomicReader *self);
        static PyObject *t_AtomicReader_getBinaryDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getContext(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_getDocCount(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_getDocsWithField(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getFieldInfos(t_AtomicReader *self);
        static PyObject *t_AtomicReader_getLiveDocs(t_AtomicReader *self);
        static PyObject *t_AtomicReader_getNormValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getNumericDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSortedDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSortedNumericDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSortedSetDocValues(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_getSumDocFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_getSumTotalTermFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_hasNorms(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_removeCoreClosedListener(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_termDocsEnum(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_termPositionsEnum(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_terms(t_AtomicReader *self, PyObject *arg);
        static PyObject *t_AtomicReader_totalTermFreq(t_AtomicReader *self, PyObject *args);
        static PyObject *t_AtomicReader_get__context(t_AtomicReader *self, void *data);
        static PyObject *t_AtomicReader_get__fieldInfos(t_AtomicReader *self, void *data);
        static PyObject *t_AtomicReader_get__liveDocs(t_AtomicReader *self, void *data);
        static PyGetSetDef t_AtomicReader__fields_[] = {
          DECLARE_GET_FIELD(t_AtomicReader, context),
          DECLARE_GET_FIELD(t_AtomicReader, fieldInfos),
          DECLARE_GET_FIELD(t_AtomicReader, liveDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AtomicReader__methods_[] = {
          DECLARE_METHOD(t_AtomicReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AtomicReader, addCoreClosedListener, METH_O),
          DECLARE_METHOD(t_AtomicReader, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, fields, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, getBinaryDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getContext, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, getDocsWithField, METH_O),
          DECLARE_METHOD(t_AtomicReader, getFieldInfos, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, getLiveDocs, METH_NOARGS),
          DECLARE_METHOD(t_AtomicReader, getNormValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getNumericDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSortedDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSortedNumericDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSortedSetDocValues, METH_O),
          DECLARE_METHOD(t_AtomicReader, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_AtomicReader, hasNorms, METH_O),
          DECLARE_METHOD(t_AtomicReader, removeCoreClosedListener, METH_O),
          DECLARE_METHOD(t_AtomicReader, termDocsEnum, METH_O),
          DECLARE_METHOD(t_AtomicReader, termPositionsEnum, METH_O),
          DECLARE_METHOD(t_AtomicReader, terms, METH_O),
          DECLARE_METHOD(t_AtomicReader, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AtomicReader, t_AtomicReader, ::org::apache::lucene::index::IndexReader, AtomicReader, abstract_init, 0, 0, t_AtomicReader__fields_, 0, 0);

        void t_AtomicReader::install(PyObject *module)
        {
          installType(&PY_TYPE(AtomicReader), module, "AtomicReader", 0);
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "CoreClosedListener", make_descriptor(&PY_TYPE(AtomicReader$CoreClosedListener)));
        }

        void t_AtomicReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "class_", make_descriptor(AtomicReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "wrapfn_", make_descriptor(t_AtomicReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AtomicReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AtomicReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AtomicReader::initializeClass, 1)))
            return NULL;
          return t_AtomicReader::wrap_Object(AtomicReader(((t_AtomicReader *) arg)->object.this$));
        }
        static PyObject *t_AtomicReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AtomicReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AtomicReader_addCoreClosedListener(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addCoreClosedListener", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_checkIntegrity(t_AtomicReader *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_AtomicReader_docFreq(t_AtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_AtomicReader_fields(t_AtomicReader *self)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);
          OBJ_CALL(result = self->object.fields());
          return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
        }

        static PyObject *t_AtomicReader_getBinaryDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getContext(t_AtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getContext());
            return ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getContext", args, 2);
        }

        static PyObject *t_AtomicReader_getDocCount(t_AtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_AtomicReader_getDocsWithField(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocsWithField", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getFieldInfos(t_AtomicReader *self)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
        }

        static PyObject *t_AtomicReader_getLiveDocs(t_AtomicReader *self)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);
          OBJ_CALL(result = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
        }

        static PyObject *t_AtomicReader_getNormValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNormValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getNumericDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getNumericDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSortedDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSortedNumericDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedNumericDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSortedSetDocValues(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortedSetDocValues", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_getSumDocFreq(t_AtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_AtomicReader_getSumTotalTermFreq(t_AtomicReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_AtomicReader_hasNorms(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.hasNorms(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "hasNorms", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_removeCoreClosedListener(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeCoreClosedListener", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_termDocsEnum(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.termDocsEnum(a0));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termDocsEnum", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_termPositionsEnum(t_AtomicReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.termPositionsEnum(a0));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "termPositionsEnum", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_terms(t_AtomicReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "terms", arg);
          return NULL;
        }

        static PyObject *t_AtomicReader_totalTermFreq(t_AtomicReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(AtomicReader), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_AtomicReader_get__context(t_AtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(value);
        }

        static PyObject *t_AtomicReader_get__fieldInfos(t_AtomicReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_AtomicReader_get__liveDocs(t_AtomicReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RamUsageEstimator.h"
#include "org/apache/lucene/util/RamUsageEstimator$JvmFeature.h"
#include "java/lang/Class.h"
#include "java/util/EnumSet.h"
#include "java/lang/Long.h"
#include "java/text/DecimalFormat.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RamUsageEstimator::class$ = NULL;
        jmethodID *RamUsageEstimator::mids$ = NULL;
        bool RamUsageEstimator::live$ = false;
        ::java::lang::String *RamUsageEstimator::JVM_INFO_STRING = NULL;
        jint RamUsageEstimator::NUM_BYTES_ARRAY_HEADER = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_BOOLEAN = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_BYTE = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_CHAR = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_DOUBLE = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_FLOAT = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_INT = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_LONG = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_ALIGNMENT = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_HEADER = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_OBJECT_REF = (jint) 0;
        jint RamUsageEstimator::NUM_BYTES_SHORT = (jint) 0;
        jlong RamUsageEstimator::ONE_GB = (jlong) 0;
        jlong RamUsageEstimator::ONE_KB = (jlong) 0;
        jlong RamUsageEstimator::ONE_MB = (jlong) 0;

        jclass RamUsageEstimator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RamUsageEstimator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_alignObjectSize_0ee6df33] = env->getStaticMethodID(cls, "alignObjectSize", "(J)J");
            mids$[mid_getSupportedFeatures_eebf2c68] = env->getStaticMethodID(cls, "getSupportedFeatures", "()Ljava/util/EnumSet;");
            mids$[mid_getUnsupportedFeatures_eebf2c68] = env->getStaticMethodID(cls, "getUnsupportedFeatures", "()Ljava/util/EnumSet;");
            mids$[mid_humanReadableUnits_3e02f30e] = env->getStaticMethodID(cls, "humanReadableUnits", "(J)Ljava/lang/String;");
            mids$[mid_humanReadableUnits_d1b61567] = env->getStaticMethodID(cls, "humanReadableUnits", "(JLjava/text/DecimalFormat;)Ljava/lang/String;");
            mids$[mid_isSupportedJVM_54c6a16a] = env->getStaticMethodID(cls, "isSupportedJVM", "()Z");
            mids$[mid_shallowSizeOf_c0f5dac6] = env->getStaticMethodID(cls, "shallowSizeOf", "([Ljava/lang/Object;)J");
            mids$[mid_shallowSizeOf_290588f2] = env->getStaticMethodID(cls, "shallowSizeOf", "(Ljava/lang/Object;)J");
            mids$[mid_shallowSizeOfInstance_a5deafe8] = env->getStaticMethodID(cls, "shallowSizeOfInstance", "(Ljava/lang/Class;)J");
            mids$[mid_sizeOf_f0c5b9df] = env->getStaticMethodID(cls, "sizeOf", "([Z)J");
            mids$[mid_sizeOf_da55802d] = env->getStaticMethodID(cls, "sizeOf", "(Ljava/lang/Long;)J");
            mids$[mid_sizeOf_c017fc5a] = env->getStaticMethodID(cls, "sizeOf", "([S)J");
            mids$[mid_sizeOf_9cc34323] = env->getStaticMethodID(cls, "sizeOf", "([F)J");
            mids$[mid_sizeOf_9ceb500f] = env->getStaticMethodID(cls, "sizeOf", "([J)J");
            mids$[mid_sizeOf_1efc2014] = env->getStaticMethodID(cls, "sizeOf", "([I)J");
            mids$[mid_sizeOf_f3b62cc5] = env->getStaticMethodID(cls, "sizeOf", "([D)J");
            mids$[mid_sizeOf_49b4f137] = env->getStaticMethodID(cls, "sizeOf", "([B)J");
            mids$[mid_sizeOf_700e23ca] = env->getStaticMethodID(cls, "sizeOf", "([C)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            JVM_INFO_STRING = new ::java::lang::String(env->getStaticObjectField(cls, "JVM_INFO_STRING", "Ljava/lang/String;"));
            NUM_BYTES_ARRAY_HEADER = env->getStaticIntField(cls, "NUM_BYTES_ARRAY_HEADER");
            NUM_BYTES_BOOLEAN = env->getStaticIntField(cls, "NUM_BYTES_BOOLEAN");
            NUM_BYTES_BYTE = env->getStaticIntField(cls, "NUM_BYTES_BYTE");
            NUM_BYTES_CHAR = env->getStaticIntField(cls, "NUM_BYTES_CHAR");
            NUM_BYTES_DOUBLE = env->getStaticIntField(cls, "NUM_BYTES_DOUBLE");
            NUM_BYTES_FLOAT = env->getStaticIntField(cls, "NUM_BYTES_FLOAT");
            NUM_BYTES_INT = env->getStaticIntField(cls, "NUM_BYTES_INT");
            NUM_BYTES_LONG = env->getStaticIntField(cls, "NUM_BYTES_LONG");
            NUM_BYTES_OBJECT_ALIGNMENT = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_ALIGNMENT");
            NUM_BYTES_OBJECT_HEADER = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_HEADER");
            NUM_BYTES_OBJECT_REF = env->getStaticIntField(cls, "NUM_BYTES_OBJECT_REF");
            NUM_BYTES_SHORT = env->getStaticIntField(cls, "NUM_BYTES_SHORT");
            ONE_GB = env->getStaticLongField(cls, "ONE_GB");
            ONE_KB = env->getStaticLongField(cls, "ONE_KB");
            ONE_MB = env->getStaticLongField(cls, "ONE_MB");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong RamUsageEstimator::alignObjectSize(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_alignObjectSize_0ee6df33], a0);
        }

        ::java::util::EnumSet RamUsageEstimator::getSupportedFeatures()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::EnumSet(env->callStaticObjectMethod(cls, mids$[mid_getSupportedFeatures_eebf2c68]));
        }

        ::java::util::EnumSet RamUsageEstimator::getUnsupportedFeatures()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::EnumSet(env->callStaticObjectMethod(cls, mids$[mid_getUnsupportedFeatures_eebf2c68]));
        }

        ::java::lang::String RamUsageEstimator::humanReadableUnits(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_humanReadableUnits_3e02f30e], a0));
        }

        ::java::lang::String RamUsageEstimator::humanReadableUnits(jlong a0, const ::java::text::DecimalFormat & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_humanReadableUnits_d1b61567], a0, a1.this$));
        }

        jboolean RamUsageEstimator::isSupportedJVM()
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isSupportedJVM_54c6a16a]);
        }

        jlong RamUsageEstimator::shallowSizeOf(const JArray< ::java::lang::Object > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOf_c0f5dac6], a0.this$);
        }

        jlong RamUsageEstimator::shallowSizeOf(const ::java::lang::Object & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOf_290588f2], a0.this$);
        }

        jlong RamUsageEstimator::shallowSizeOfInstance(const ::java::lang::Class & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_shallowSizeOfInstance_a5deafe8], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jboolean > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_f0c5b9df], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const ::java::lang::Long & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_da55802d], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jshort > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_c017fc5a], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jfloat > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_9cc34323], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jlong > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_9ceb500f], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jint > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_1efc2014], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jdouble > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_f3b62cc5], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jbyte > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_49b4f137], a0.this$);
        }

        jlong RamUsageEstimator::sizeOf(const JArray< jchar > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sizeOf_700e23ca], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RamUsageEstimator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_alignObjectSize(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_getSupportedFeatures(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator_getUnsupportedFeatures(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator_humanReadableUnits(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_isSupportedJVM(PyTypeObject *type);
        static PyObject *t_RamUsageEstimator_shallowSizeOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_shallowSizeOfInstance(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RamUsageEstimator_sizeOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_RamUsageEstimator_get__supportedFeatures(t_RamUsageEstimator *self, void *data);
        static PyObject *t_RamUsageEstimator_get__supportedJVM(t_RamUsageEstimator *self, void *data);
        static PyObject *t_RamUsageEstimator_get__unsupportedFeatures(t_RamUsageEstimator *self, void *data);
        static PyGetSetDef t_RamUsageEstimator__fields_[] = {
          DECLARE_GET_FIELD(t_RamUsageEstimator, supportedFeatures),
          DECLARE_GET_FIELD(t_RamUsageEstimator, supportedJVM),
          DECLARE_GET_FIELD(t_RamUsageEstimator, unsupportedFeatures),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RamUsageEstimator__methods_[] = {
          DECLARE_METHOD(t_RamUsageEstimator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, alignObjectSize, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, getSupportedFeatures, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, getUnsupportedFeatures, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, humanReadableUnits, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, isSupportedJVM, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, shallowSizeOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, shallowSizeOfInstance, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RamUsageEstimator, sizeOf, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RamUsageEstimator, t_RamUsageEstimator, ::java::lang::Object, RamUsageEstimator, abstract_init, 0, 0, t_RamUsageEstimator__fields_, 0, 0);

        void t_RamUsageEstimator::install(PyObject *module)
        {
          installType(&PY_TYPE(RamUsageEstimator), module, "RamUsageEstimator", 0);
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "JvmFeature", make_descriptor(&PY_TYPE(RamUsageEstimator$JvmFeature)));
        }

        void t_RamUsageEstimator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "class_", make_descriptor(RamUsageEstimator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "wrapfn_", make_descriptor(t_RamUsageEstimator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RamUsageEstimator::initializeClass);
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "JVM_INFO_STRING", make_descriptor(j2p(*RamUsageEstimator::JVM_INFO_STRING)));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_ARRAY_HEADER", make_descriptor(RamUsageEstimator::NUM_BYTES_ARRAY_HEADER));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_BOOLEAN", make_descriptor(RamUsageEstimator::NUM_BYTES_BOOLEAN));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_BYTE", make_descriptor(RamUsageEstimator::NUM_BYTES_BYTE));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_CHAR", make_descriptor(RamUsageEstimator::NUM_BYTES_CHAR));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_DOUBLE", make_descriptor(RamUsageEstimator::NUM_BYTES_DOUBLE));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_FLOAT", make_descriptor(RamUsageEstimator::NUM_BYTES_FLOAT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_INT", make_descriptor(RamUsageEstimator::NUM_BYTES_INT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_LONG", make_descriptor(RamUsageEstimator::NUM_BYTES_LONG));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_OBJECT_ALIGNMENT", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_ALIGNMENT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_OBJECT_HEADER", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_HEADER));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_OBJECT_REF", make_descriptor(RamUsageEstimator::NUM_BYTES_OBJECT_REF));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "NUM_BYTES_SHORT", make_descriptor(RamUsageEstimator::NUM_BYTES_SHORT));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "ONE_GB", make_descriptor(RamUsageEstimator::ONE_GB));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "ONE_KB", make_descriptor(RamUsageEstimator::ONE_KB));
          PyDict_SetItemString(PY_TYPE(RamUsageEstimator).tp_dict, "ONE_MB", make_descriptor(RamUsageEstimator::ONE_MB));
        }

        static PyObject *t_RamUsageEstimator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RamUsageEstimator::initializeClass, 1)))
            return NULL;
          return t_RamUsageEstimator::wrap_Object(RamUsageEstimator(((t_RamUsageEstimator *) arg)->object.this$));
        }
        static PyObject *t_RamUsageEstimator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RamUsageEstimator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RamUsageEstimator_alignObjectSize(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::alignObjectSize(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "alignObjectSize", arg);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_getSupportedFeatures(PyTypeObject *type)
        {
          ::java::util::EnumSet result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::getSupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(RamUsageEstimator$JvmFeature));
        }

        static PyObject *t_RamUsageEstimator_getUnsupportedFeatures(PyTypeObject *type)
        {
          ::java::util::EnumSet result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::getUnsupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(RamUsageEstimator$JvmFeature));
        }

        static PyObject *t_RamUsageEstimator_humanReadableUnits(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::humanReadableUnits(a0));
                return j2p(result);
              }
            }
            break;
           case 2:
            {
              jlong a0;
              ::java::text::DecimalFormat a1((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "Jk", ::java::text::DecimalFormat::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::humanReadableUnits(a0, a1));
                return j2p(result);
              }
            }
          }

          PyErr_SetArgsError(type, "humanReadableUnits", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_isSupportedJVM(PyTypeObject *type)
        {
          jboolean result;
          OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::isSupportedJVM());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_RamUsageEstimator_shallowSizeOf(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[o", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "shallowSizeOf", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_shallowSizeOfInstance(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          jlong result;

          if (!parseArg(arg, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::shallowSizeOfInstance(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "shallowSizeOfInstance", arg);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_sizeOf(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< jboolean > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[Z", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::java::lang::Long a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jshort > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[S", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jfloat > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[F", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jlong > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jint > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jdouble > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[D", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jbyte > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[B", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< jchar > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[C", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::RamUsageEstimator::sizeOf(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "sizeOf", args);
          return NULL;
        }

        static PyObject *t_RamUsageEstimator_get__supportedFeatures(t_RamUsageEstimator *self, void *data)
        {
          ::java::util::EnumSet value((jobject) NULL);
          OBJ_CALL(value = self->object.getSupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(value);
        }

        static PyObject *t_RamUsageEstimator_get__supportedJVM(t_RamUsageEstimator *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSupportedJVM());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_RamUsageEstimator_get__unsupportedFeatures(t_RamUsageEstimator *self, void *data)
        {
          ::java::util::EnumSet value((jobject) NULL);
          OBJ_CALL(value = self->object.getUnsupportedFeatures());
          return ::java::util::t_EnumSet::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Object::class$ = NULL;
    jmethodID *Object::mids$ = NULL;
    bool Object::live$ = false;

    jclass Object::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Object");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getClass_44a5f2c9] = env->getMethodID(cls, "getClass", "()Ljava/lang/Class;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_notify_54c6a166] = env->getMethodID(cls, "notify", "()V");
        mids$[mid_notifyAll_54c6a166] = env->getMethodID(cls, "notifyAll", "()V");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_wait_54c6a166] = env->getMethodID(cls, "wait", "()V");
        mids$[mid_wait_0ee6df2f] = env->getMethodID(cls, "wait", "(J)V");
        mids$[mid_wait_25d05c8f] = env->getMethodID(cls, "wait", "(JI)V");
        mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Object::Object() : ::JObject(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    jboolean Object::equals(const Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Class Object::getClass() const
    {
      return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getClass_44a5f2c9]));
    }

    jint Object::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    void Object::notify() const
    {
      env->callVoidMethod(this$, mids$[mid_notify_54c6a166]);
    }

    void Object::notifyAll() const
    {
      env->callVoidMethod(this$, mids$[mid_notifyAll_54c6a166]);
    }

    ::java::lang::String Object::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    void Object::wait() const
    {
      env->callVoidMethod(this$, mids$[mid_wait_54c6a166]);
    }

    void Object::wait(jlong a0) const
    {
      env->callVoidMethod(this$, mids$[mid_wait_0ee6df2f], a0);
    }

    void Object::wait(jlong a0, jint a1) const
    {
      env->callVoidMethod(this$, mids$[mid_wait_25d05c8f], a0, a1);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Object_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Object_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Object_init_(t_Object *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Object_equals(t_Object *self, PyObject *arg);
    static PyObject *t_Object_getClass(t_Object *self);
    static PyObject *t_Object_hashCode(t_Object *self);
    static PyObject *t_Object_notify(t_Object *self);
    static PyObject *t_Object_notifyAll(t_Object *self);
    static PyObject *t_Object_toString(t_Object *self);
    static PyObject *t_Object_wait(t_Object *self, PyObject *args);
    static PyObject *t_Object_get__class(t_Object *self, void *data);
    static PyGetSetDef t_Object__fields_[] = {
      DECLARE_GET_FIELD(t_Object, class),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Object__methods_[] = {
      DECLARE_METHOD(t_Object, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Object, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Object, equals, METH_O),
      DECLARE_METHOD(t_Object, getClass, METH_NOARGS),
      DECLARE_METHOD(t_Object, hashCode, METH_NOARGS),
      DECLARE_METHOD(t_Object, notify, METH_NOARGS),
      DECLARE_METHOD(t_Object, notifyAll, METH_NOARGS),
      DECLARE_METHOD(t_Object, toString, METH_NOARGS),
      DECLARE_METHOD(t_Object, wait, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Object, t_Object, JObject, Object, t_Object_init_, 0, 0, t_Object__fields_, 0, 0);

    void t_Object::install(PyObject *module)
    {
      installType(&PY_TYPE(Object), module, "Object", 0);
    }

    void t_Object::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Object).tp_dict, "class_", make_descriptor(Object::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Object).tp_dict, "wrapfn_", make_descriptor(t_Object::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Object).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Object_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Object::initializeClass, 1)))
        return NULL;
      return t_Object::wrap_Object(Object(((t_Object *) arg)->object.this$));
    }
    static PyObject *t_Object_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Object::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Object_init_(t_Object *self, PyObject *args, PyObject *kwds)
    {
      Object object((jobject) NULL);

      INT_CALL(object = Object());
      self->object = object;

      return 0;
    }

    static PyObject *t_Object_equals(t_Object *self, PyObject *arg)
    {
      Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "equals", arg);
      return NULL;
    }

    static PyObject *t_Object_getClass(t_Object *self)
    {
      ::java::lang::Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getClass());
      return ::java::lang::t_Class::wrap_Object(result);
    }

    static PyObject *t_Object_hashCode(t_Object *self)
    {
      jint result;
      OBJ_CALL(result = self->object.hashCode());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Object_notify(t_Object *self)
    {
      OBJ_CALL(self->object.notify());
      Py_RETURN_NONE;
    }

    static PyObject *t_Object_notifyAll(t_Object *self)
    {
      OBJ_CALL(self->object.notifyAll());
      Py_RETURN_NONE;
    }

    static PyObject *t_Object_toString(t_Object *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toString());
      return j2p(result);
    }

    static PyObject *t_Object_wait(t_Object *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.wait());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.wait(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.wait(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "wait", args);
      return NULL;
    }

    static PyObject *t_Object_get__class(t_Object *self, void *data)
    {
      ::java::lang::Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getClass());
      return ::java::lang::t_Class::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/FileDictionary.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *FileDictionary::class$ = NULL;
          jmethodID *FileDictionary::mids$ = NULL;
          bool FileDictionary::live$ = false;
          ::java::lang::String *FileDictionary::DEFAULT_FIELD_DELIMITER = NULL;

          jclass FileDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/FileDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_32277d42] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/lang/String;)V");
              mids$[mid_init$_97a84c62] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FIELD_DELIMITER = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_FIELD_DELIMITER", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FileDictionary::FileDictionary(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::InputStream & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_32277d42, a0.this$, a1.this$)) {}

          FileDictionary::FileDictionary(const ::java::io::Reader & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_97a84c62, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator FileDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_FileDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FileDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FileDictionary_init_(t_FileDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FileDictionary_getEntryIterator(t_FileDictionary *self);
          static PyObject *t_FileDictionary_get__entryIterator(t_FileDictionary *self, void *data);
          static PyGetSetDef t_FileDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_FileDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FileDictionary__methods_[] = {
            DECLARE_METHOD(t_FileDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FileDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FileDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FileDictionary, t_FileDictionary, ::java::lang::Object, FileDictionary, t_FileDictionary_init_, 0, 0, t_FileDictionary__fields_, 0, 0);

          void t_FileDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(FileDictionary), module, "FileDictionary", 0);
          }

          void t_FileDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "class_", make_descriptor(FileDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "wrapfn_", make_descriptor(t_FileDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FileDictionary::initializeClass);
            PyDict_SetItemString(PY_TYPE(FileDictionary).tp_dict, "DEFAULT_FIELD_DELIMITER", make_descriptor(j2p(*FileDictionary::DEFAULT_FIELD_DELIMITER)));
          }

          static PyObject *t_FileDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FileDictionary::initializeClass, 1)))
              return NULL;
            return t_FileDictionary::wrap_Object(FileDictionary(((t_FileDictionary *) arg)->object.this$));
          }
          static PyObject *t_FileDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FileDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FileDictionary_init_(t_FileDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = FileDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::InputStream a0((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = FileDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::io::InputStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::InputStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FileDictionary(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                FileDictionary object((jobject) NULL);

                if (!parseArgs(args, "ks", ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = FileDictionary(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FileDictionary_getEntryIterator(t_FileDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_FileDictionary_get__entryIterator(t_FileDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DoubleFieldSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DoubleFieldSource::class$ = NULL;
            jmethodID *DoubleFieldSource::mids$ = NULL;
            bool DoubleFieldSource::live$ = false;

            jclass DoubleFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DoubleFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_5456b073] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$DoubleParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DoubleFieldSource::DoubleFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            DoubleFieldSource::DoubleFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$DoubleParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5456b073, a0.this$, a1.this$)) {}

            ::java::lang::String DoubleFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DoubleFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues DoubleFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DoubleFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DoubleFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DoubleFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DoubleFieldSource_init_(t_DoubleFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DoubleFieldSource_description(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_equals(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_getValues(t_DoubleFieldSource *self, PyObject *args);
            static PyObject *t_DoubleFieldSource_hashCode(t_DoubleFieldSource *self, PyObject *args);

            static PyMethodDef t_DoubleFieldSource__methods_[] = {
              DECLARE_METHOD(t_DoubleFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DoubleFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DoubleFieldSource, t_DoubleFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, DoubleFieldSource, t_DoubleFieldSource_init_, 0, 0, 0, 0, 0);

            void t_DoubleFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DoubleFieldSource), module, "DoubleFieldSource", 0);
            }

            void t_DoubleFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DoubleFieldSource).tp_dict, "class_", make_descriptor(DoubleFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DoubleFieldSource).tp_dict, "wrapfn_", make_descriptor(t_DoubleFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DoubleFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DoubleFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DoubleFieldSource::initializeClass, 1)))
                return NULL;
              return t_DoubleFieldSource::wrap_Object(DoubleFieldSource(((t_DoubleFieldSource *) arg)->object.this$));
            }
            static PyObject *t_DoubleFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DoubleFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DoubleFieldSource_init_(t_DoubleFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  DoubleFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = DoubleFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$DoubleParser a1((jobject) NULL);
                  DoubleFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$DoubleParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = DoubleFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DoubleFieldSource_description(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DoubleFieldSource_equals(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DoubleFieldSource_getValues(t_DoubleFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DoubleFieldSource_hashCode(t_DoubleFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector$GroupCount.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionDistinctValuesCollector$GroupCount::class$ = NULL;
            jmethodID *FunctionDistinctValuesCollector$GroupCount::mids$ = NULL;
            bool FunctionDistinctValuesCollector$GroupCount::live$ = false;

            jclass FunctionDistinctValuesCollector$GroupCount::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector$GroupCount");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_of_(t_FunctionDistinctValuesCollector$GroupCount *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_get__parameters_(t_FunctionDistinctValuesCollector$GroupCount *self, void *data);
            static PyGetSetDef t_FunctionDistinctValuesCollector$GroupCount__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionDistinctValuesCollector$GroupCount, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionDistinctValuesCollector$GroupCount__methods_[] = {
              DECLARE_METHOD(t_FunctionDistinctValuesCollector$GroupCount, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector$GroupCount, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector$GroupCount, of_, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionDistinctValuesCollector$GroupCount, t_FunctionDistinctValuesCollector$GroupCount, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector$GroupCount, FunctionDistinctValuesCollector$GroupCount, abstract_init, 0, 0, t_FunctionDistinctValuesCollector$GroupCount__fields_, 0, 0);
            PyObject *t_FunctionDistinctValuesCollector$GroupCount::wrap_Object(const FunctionDistinctValuesCollector$GroupCount& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector$GroupCount::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector$GroupCount *self = (t_FunctionDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionDistinctValuesCollector$GroupCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector$GroupCount::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector$GroupCount *self = (t_FunctionDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionDistinctValuesCollector$GroupCount::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionDistinctValuesCollector$GroupCount), module, "FunctionDistinctValuesCollector$GroupCount", 0);
            }

            void t_FunctionDistinctValuesCollector$GroupCount::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector$GroupCount).tp_dict, "class_", make_descriptor(FunctionDistinctValuesCollector$GroupCount::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector$GroupCount).tp_dict, "wrapfn_", make_descriptor(t_FunctionDistinctValuesCollector$GroupCount::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector$GroupCount).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionDistinctValuesCollector$GroupCount::initializeClass, 1)))
                return NULL;
              return t_FunctionDistinctValuesCollector$GroupCount::wrap_Object(FunctionDistinctValuesCollector$GroupCount(((t_FunctionDistinctValuesCollector$GroupCount *) arg)->object.this$));
            }
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionDistinctValuesCollector$GroupCount::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_of_(t_FunctionDistinctValuesCollector$GroupCount *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_get__parameters_(t_FunctionDistinctValuesCollector$GroupCount *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *Spans::class$ = NULL;
          jmethodID *Spans::mids$ = NULL;
          bool Spans::live$ = false;

          jclass Spans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/Spans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Spans::Spans() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong Spans::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint Spans::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint Spans::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection Spans::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          jboolean Spans::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean Spans::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean Spans::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint Spans::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_Spans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Spans_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Spans_init_(t_Spans *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Spans_cost(t_Spans *self);
          static PyObject *t_Spans_doc(t_Spans *self);
          static PyObject *t_Spans_end(t_Spans *self);
          static PyObject *t_Spans_getPayload(t_Spans *self);
          static PyObject *t_Spans_isPayloadAvailable(t_Spans *self);
          static PyObject *t_Spans_next(t_Spans *self);
          static PyObject *t_Spans_skipTo(t_Spans *self, PyObject *arg);
          static PyObject *t_Spans_start(t_Spans *self);
          static PyObject *t_Spans_get__payload(t_Spans *self, void *data);
          static PyObject *t_Spans_get__payloadAvailable(t_Spans *self, void *data);
          static PyGetSetDef t_Spans__fields_[] = {
            DECLARE_GET_FIELD(t_Spans, payload),
            DECLARE_GET_FIELD(t_Spans, payloadAvailable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Spans__methods_[] = {
            DECLARE_METHOD(t_Spans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Spans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Spans, cost, METH_NOARGS),
            DECLARE_METHOD(t_Spans, doc, METH_NOARGS),
            DECLARE_METHOD(t_Spans, end, METH_NOARGS),
            DECLARE_METHOD(t_Spans, getPayload, METH_NOARGS),
            DECLARE_METHOD(t_Spans, isPayloadAvailable, METH_NOARGS),
            DECLARE_METHOD(t_Spans, next, METH_NOARGS),
            DECLARE_METHOD(t_Spans, skipTo, METH_O),
            DECLARE_METHOD(t_Spans, start, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Spans, t_Spans, ::java::lang::Object, Spans, t_Spans_init_, 0, 0, t_Spans__fields_, 0, 0);

          void t_Spans::install(PyObject *module)
          {
            installType(&PY_TYPE(Spans), module, "Spans", 0);
          }

          void t_Spans::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Spans).tp_dict, "class_", make_descriptor(Spans::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Spans).tp_dict, "wrapfn_", make_descriptor(t_Spans::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Spans).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Spans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Spans::initializeClass, 1)))
              return NULL;
            return t_Spans::wrap_Object(Spans(((t_Spans *) arg)->object.this$));
          }
          static PyObject *t_Spans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Spans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Spans_init_(t_Spans *self, PyObject *args, PyObject *kwds)
          {
            Spans object((jobject) NULL);

            INT_CALL(object = Spans());
            self->object = object;

            return 0;
          }

          static PyObject *t_Spans_cost(t_Spans *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Spans_doc(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.doc());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Spans_end(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.end());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Spans_getPayload(t_Spans *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
          }

          static PyObject *t_Spans_isPayloadAvailable(t_Spans *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Spans_next(t_Spans *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.next());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Spans_skipTo(t_Spans *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "skipTo", arg);
            return NULL;
          }

          static PyObject *t_Spans_start(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.start());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Spans_get__payload(t_Spans *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_Spans_get__payloadAvailable(t_Spans *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder.h"
#include "org/apache/lucene/search/MultiPhraseQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MultiPhraseQueryNodeBuilder::class$ = NULL;
              jmethodID *MultiPhraseQueryNodeBuilder::mids$ = NULL;
              bool MultiPhraseQueryNodeBuilder::live$ = false;

              jclass MultiPhraseQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MultiPhraseQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_5363542a] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/MultiPhraseQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiPhraseQueryNodeBuilder::MultiPhraseQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::MultiPhraseQuery MultiPhraseQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::MultiPhraseQuery(env->callObjectMethod(this$, mids$[mid_build_5363542a], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MultiPhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiPhraseQueryNodeBuilder_init_(t_MultiPhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MultiPhraseQueryNodeBuilder_build(t_MultiPhraseQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MultiPhraseQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiPhraseQueryNodeBuilder, t_MultiPhraseQueryNodeBuilder, ::java::lang::Object, MultiPhraseQueryNodeBuilder, t_MultiPhraseQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_MultiPhraseQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiPhraseQueryNodeBuilder), module, "MultiPhraseQueryNodeBuilder", 0);
              }

              void t_MultiPhraseQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNodeBuilder).tp_dict, "class_", make_descriptor(MultiPhraseQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_MultiPhraseQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiPhraseQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiPhraseQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MultiPhraseQueryNodeBuilder::wrap_Object(MultiPhraseQueryNodeBuilder(((t_MultiPhraseQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MultiPhraseQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiPhraseQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiPhraseQueryNodeBuilder_init_(t_MultiPhraseQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MultiPhraseQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MultiPhraseQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MultiPhraseQueryNodeBuilder_build(t_MultiPhraseQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::MultiPhraseQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_MultiPhraseQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40LiveDocsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40LiveDocsFormat::class$ = NULL;
          jmethodID *Lucene40LiveDocsFormat::mids$ = NULL;
          bool Lucene40LiveDocsFormat::live$ = false;

          jclass Lucene40LiveDocsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40LiveDocsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_files_cb8dcbcf] = env->getMethodID(cls, "files", "(Lorg/apache/lucene/index/SegmentCommitInfo;Ljava/util/Collection;)V");
              mids$[mid_newLiveDocs_f311e97a] = env->getMethodID(cls, "newLiveDocs", "(I)Lorg/apache/lucene/util/MutableBits;");
              mids$[mid_newLiveDocs_e3a7ca1a] = env->getMethodID(cls, "newLiveDocs", "(Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/util/MutableBits;");
              mids$[mid_readLiveDocs_60c7b77b] = env->getMethodID(cls, "readLiveDocs", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/util/Bits;");
              mids$[mid_writeLiveDocs_37123b35] = env->getMethodID(cls, "writeLiveDocs", "(Lorg/apache/lucene/util/MutableBits;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40LiveDocsFormat::Lucene40LiveDocsFormat() : ::org::apache::lucene::codecs::LiveDocsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lucene40LiveDocsFormat::files(const ::org::apache::lucene::index::SegmentCommitInfo & a0, const ::java::util::Collection & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_files_cb8dcbcf], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::MutableBits Lucene40LiveDocsFormat::newLiveDocs(jint a0) const
          {
            return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_f311e97a], a0));
          }

          ::org::apache::lucene::util::MutableBits Lucene40LiveDocsFormat::newLiveDocs(const ::org::apache::lucene::util::Bits & a0) const
          {
            return ::org::apache::lucene::util::MutableBits(env->callObjectMethod(this$, mids$[mid_newLiveDocs_e3a7ca1a], a0.this$));
          }

          ::org::apache::lucene::util::Bits Lucene40LiveDocsFormat::readLiveDocs(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentCommitInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_readLiveDocs_60c7b77b], a0.this$, a1.this$, a2.this$));
          }

          void Lucene40LiveDocsFormat::writeLiveDocs(const ::org::apache::lucene::util::MutableBits & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::SegmentCommitInfo & a2, jint a3, const ::org::apache::lucene::store::IOContext & a4) const
          {
            env->callVoidMethod(this$, mids$[mid_writeLiveDocs_37123b35], a0.this$, a1.this$, a2.this$, a3, a4.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40LiveDocsFormat_init_(t_Lucene40LiveDocsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40LiveDocsFormat_files(t_Lucene40LiveDocsFormat *self, PyObject *args);
          static PyObject *t_Lucene40LiveDocsFormat_newLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args);
          static PyObject *t_Lucene40LiveDocsFormat_readLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args);
          static PyObject *t_Lucene40LiveDocsFormat_writeLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40LiveDocsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, files, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, newLiveDocs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, readLiveDocs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40LiveDocsFormat, writeLiveDocs, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40LiveDocsFormat, t_Lucene40LiveDocsFormat, ::org::apache::lucene::codecs::LiveDocsFormat, Lucene40LiveDocsFormat, t_Lucene40LiveDocsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40LiveDocsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40LiveDocsFormat), module, "Lucene40LiveDocsFormat", 0);
          }

          void t_Lucene40LiveDocsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40LiveDocsFormat).tp_dict, "class_", make_descriptor(Lucene40LiveDocsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40LiveDocsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40LiveDocsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40LiveDocsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40LiveDocsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40LiveDocsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40LiveDocsFormat::wrap_Object(Lucene40LiveDocsFormat(((t_Lucene40LiveDocsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40LiveDocsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40LiveDocsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40LiveDocsFormat_init_(t_Lucene40LiveDocsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40LiveDocsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40LiveDocsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40LiveDocsFormat_files(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
            ::java::util::Collection a1((jobject) NULL);
            PyTypeObject **p1;

            if (!parseArgs(args, "kK", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
            {
              OBJ_CALL(self->object.files(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "files", args, 2);
          }

          static PyObject *t_Lucene40LiveDocsFormat_newLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::MutableBits result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.newLiveDocs(a0));
                  return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Bits a0((jobject) NULL);
                ::org::apache::lucene::util::MutableBits result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::Bits::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.newLiveDocs(a0));
                  return ::org::apache::lucene::util::t_MutableBits::wrap_Object(result);
                }
              }
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "newLiveDocs", args, 2);
          }

          static PyObject *t_Lucene40LiveDocsFormat_readLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentCommitInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::util::Bits result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.readLiveDocs(a0, a1, a2));
              return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "readLiveDocs", args, 2);
          }

          static PyObject *t_Lucene40LiveDocsFormat_writeLiveDocs(t_Lucene40LiveDocsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::util::MutableBits a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentCommitInfo a2((jobject) NULL);
            jint a3;
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);

            if (!parseArgs(args, "kkkIk", ::org::apache::lucene::util::MutableBits::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.writeLiveDocs(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40LiveDocsFormat), (PyObject *) self, "writeLiveDocs", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntsRefFSTEnum::class$ = NULL;
          jmethodID *IntsRefFSTEnum::mids$ = NULL;
          bool IntsRefFSTEnum::live$ = false;

          jclass IntsRefFSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntsRefFSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d454d65c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
              mids$[mid_current_4ce4ab35] = env->getMethodID(cls, "current", "()Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_next_4ce4ab35] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekCeil_8b422fd3] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekExact_8b422fd3] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekFloor_8b422fd3] = env->getMethodID(cls, "seekFloor", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_grow_54c6a166] = env->getMethodID(cls, "grow", "()V");
              mids$[mid_getTargetLabel_54c6a179] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_getCurrentLabel_54c6a179] = env->getMethodID(cls, "getCurrentLabel", "()I");
              mids$[mid_setCurrentLabel_39c7bd3c] = env->getMethodID(cls, "setCurrentLabel", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntsRefFSTEnum::IntsRefFSTEnum(const ::org::apache::lucene::util::fst::FST & a0) : ::org::apache::lucene::util::fst::FSTEnum(env->newObject(initializeClass, &mids$, mid_init$_d454d65c, a0.this$)) {}

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::current() const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_current_4ce4ab35]));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::next() const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_next_4ce4ab35]));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekCeil(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekCeil_8b422fd3], a0.this$));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekExact(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekExact_8b422fd3], a0.this$));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekFloor(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekFloor_8b422fd3], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntsRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_of_(t_IntsRefFSTEnum *self, PyObject *args);
          static int t_IntsRefFSTEnum_init_(t_IntsRefFSTEnum *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntsRefFSTEnum_current(t_IntsRefFSTEnum *self);
          static PyObject *t_IntsRefFSTEnum_next(t_IntsRefFSTEnum *self);
          static PyObject *t_IntsRefFSTEnum_seekCeil(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_seekExact(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_seekFloor(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_get__parameters_(t_IntsRefFSTEnum *self, void *data);
          static PyGetSetDef t_IntsRefFSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_IntsRefFSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntsRefFSTEnum__methods_[] = {
            DECLARE_METHOD(t_IntsRefFSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum, of_, METH_VARARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, current, METH_NOARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, next, METH_NOARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekCeil, METH_O),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekExact, METH_O),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekFloor, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntsRefFSTEnum, t_IntsRefFSTEnum, ::org::apache::lucene::util::fst::FSTEnum, IntsRefFSTEnum, t_IntsRefFSTEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_IntsRefFSTEnum *)) get_generic_next< t_IntsRefFSTEnum,::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput,::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput >), t_IntsRefFSTEnum__fields_, 0, 0);
          PyObject *t_IntsRefFSTEnum::wrap_Object(const IntsRefFSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum *self = (t_IntsRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntsRefFSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum *self = (t_IntsRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntsRefFSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(IntsRefFSTEnum), module, "IntsRefFSTEnum", 0);
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "InputOutput", make_descriptor(&PY_TYPE(IntsRefFSTEnum$InputOutput)));
          }

          void t_IntsRefFSTEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "class_", make_descriptor(IntsRefFSTEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "wrapfn_", make_descriptor(t_IntsRefFSTEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntsRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntsRefFSTEnum::initializeClass, 1)))
              return NULL;
            return t_IntsRefFSTEnum::wrap_Object(IntsRefFSTEnum(((t_IntsRefFSTEnum *) arg)->object.this$));
          }
          static PyObject *t_IntsRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntsRefFSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntsRefFSTEnum_of_(t_IntsRefFSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_IntsRefFSTEnum_init_(t_IntsRefFSTEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            IntsRefFSTEnum object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
            {
              INT_CALL(object = IntsRefFSTEnum(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IntsRefFSTEnum_current(t_IntsRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.current());
            return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_IntsRefFSTEnum_next(t_IntsRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_IntsRefFSTEnum_seekCeil(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
            return NULL;
          }

          static PyObject *t_IntsRefFSTEnum_seekExact(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekExact(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekExact", arg);
            return NULL;
          }

          static PyObject *t_IntsRefFSTEnum_seekFloor(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekFloor(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekFloor", arg);
            return NULL;
          }
          static PyObject *t_IntsRefFSTEnum_get__parameters_(t_IntsRefFSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/JoinUtil.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *JoinUtil::class$ = NULL;
          jmethodID *JoinUtil::mids$ = NULL;
          bool JoinUtil::live$ = false;

          jclass JoinUtil::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/JoinUtil");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createJoinQuery_ef4ce860] = env->getStaticMethodID(cls, "createJoinQuery", "(Ljava/lang/String;ZLjava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/join/ScoreMode;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::Query JoinUtil::createJoinQuery(const ::java::lang::String & a0, jboolean a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::Query & a3, const ::org::apache::lucene::search::IndexSearcher & a4, const ::org::apache::lucene::search::join::ScoreMode & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_createJoinQuery_ef4ce860], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_JoinUtil_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JoinUtil_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JoinUtil_createJoinQuery(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_JoinUtil__methods_[] = {
            DECLARE_METHOD(t_JoinUtil, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JoinUtil, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JoinUtil, createJoinQuery, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JoinUtil, t_JoinUtil, ::java::lang::Object, JoinUtil, abstract_init, 0, 0, 0, 0, 0);

          void t_JoinUtil::install(PyObject *module)
          {
            installType(&PY_TYPE(JoinUtil), module, "JoinUtil", 0);
          }

          void t_JoinUtil::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JoinUtil).tp_dict, "class_", make_descriptor(JoinUtil::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JoinUtil).tp_dict, "wrapfn_", make_descriptor(t_JoinUtil::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JoinUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JoinUtil_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JoinUtil::initializeClass, 1)))
              return NULL;
            return t_JoinUtil::wrap_Object(JoinUtil(((t_JoinUtil *) arg)->object.this$));
          }
          static PyObject *t_JoinUtil_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JoinUtil::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JoinUtil_createJoinQuery(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            jboolean a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::search::Query a3((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a4((jobject) NULL);
            ::org::apache::lucene::search::join::ScoreMode a5((jobject) NULL);
            PyTypeObject **p5;
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "sZskkK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::join::ScoreMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &p5, ::org::apache::lucene::search::join::t_ScoreMode::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::join::JoinUtil::createJoinQuery(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "createJoinQuery", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DoubleField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DoubleField::class$ = NULL;
        jmethodID *DoubleField::mids$ = NULL;
        bool DoubleField::live$ = false;
        ::org::apache::lucene::document::FieldType *DoubleField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *DoubleField::TYPE_STORED = NULL;

        jclass DoubleField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DoubleField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d4f106f2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DLorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_1922fa29] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;DLorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleField::DoubleField(const ::java::lang::String & a0, jdouble a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_d4f106f2, a0.this$, a1, a2.this$)) {}

        DoubleField::DoubleField(const ::java::lang::String & a0, jdouble a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_1922fa29, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DoubleField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DoubleField_init_(t_DoubleField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_DoubleField__methods_[] = {
          DECLARE_METHOD(t_DoubleField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleField, t_DoubleField, ::org::apache::lucene::document::Field, DoubleField, t_DoubleField_init_, 0, 0, 0, 0, 0);

        void t_DoubleField::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleField), module, "DoubleField", 0);
        }

        void t_DoubleField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "class_", make_descriptor(DoubleField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "wrapfn_", make_descriptor(t_DoubleField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DoubleField::initializeClass);
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DoubleField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(DoubleField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*DoubleField::TYPE_STORED)));
        }

        static PyObject *t_DoubleField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleField::initializeClass, 1)))
            return NULL;
          return t_DoubleField::wrap_Object(DoubleField(((t_DoubleField *) arg)->object.this$));
        }
        static PyObject *t_DoubleField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DoubleField_init_(t_DoubleField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              DoubleField object((jobject) NULL);

              if (!parseArgs(args, "sDK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = DoubleField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              DoubleField object((jobject) NULL);

              if (!parseArgs(args, "sDk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DoubleField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts.h"
#include "org/apache/lucene/util/packed/PackedInts$Decoder.h"
#include "org/apache/lucene/util/packed/PackedInts$Writer.h"
#include "org/apache/lucene/util/packed/PackedInts$Format.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/packed/PackedInts$Header.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/packed/PackedInts$Reader.h"
#include "org/apache/lucene/util/packed/PackedInts$Mutable.h"
#include "org/apache/lucene/util/packed/PackedInts$FormatAndBits.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/packed/PackedInts$Encoder.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/packed/PackedInts$ReaderIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts::class$ = NULL;
          jmethodID *PackedInts::mids$ = NULL;
          bool PackedInts::live$ = false;
          ::java::lang::String *PackedInts::CODEC_NAME = NULL;
          jfloat PackedInts::COMPACT = (jfloat) 0;
          jfloat PackedInts::DEFAULT = (jfloat) 0;
          jint PackedInts::DEFAULT_BUFFER_SIZE = (jint) 0;
          jfloat PackedInts::FAST = (jfloat) 0;
          jfloat PackedInts::FASTEST = (jfloat) 0;
          jint PackedInts::VERSION_BYTE_ALIGNED = (jint) 0;
          jint PackedInts::VERSION_CURRENT = (jint) 0;
          jint PackedInts::VERSION_MONOTONIC_WITHOUT_ZIGZAG = (jint) 0;
          jint PackedInts::VERSION_START = (jint) 0;

          jclass PackedInts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_bitsRequired_0ee6df30] = env->getStaticMethodID(cls, "bitsRequired", "(J)I");
              mids$[mid_checkVersion_39c7bd3c] = env->getStaticMethodID(cls, "checkVersion", "(I)V");
              mids$[mid_copy_5dfb99d8] = env->getStaticMethodID(cls, "copy", "(Lorg/apache/lucene/util/packed/PackedInts$Reader;ILorg/apache/lucene/util/packed/PackedInts$Mutable;III)V");
              mids$[mid_fastestFormatAndBits_a44dbe2e] = env->getStaticMethodID(cls, "fastestFormatAndBits", "(IIF)Lorg/apache/lucene/util/packed/PackedInts$FormatAndBits;");
              mids$[mid_getDecoder_a1fc44e7] = env->getStaticMethodID(cls, "getDecoder", "(Lorg/apache/lucene/util/packed/PackedInts$Format;II)Lorg/apache/lucene/util/packed/PackedInts$Decoder;");
              mids$[mid_getDirectReader_dd96fa63] = env->getStaticMethodID(cls, "getDirectReader", "(Lorg/apache/lucene/store/IndexInput;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getDirectReaderNoHeader_6d5658ed] = env->getStaticMethodID(cls, "getDirectReaderNoHeader", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/util/packed/PackedInts$Header;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getDirectReaderNoHeader_185fc68d] = env->getStaticMethodID(cls, "getDirectReaderNoHeader", "(Lorg/apache/lucene/store/IndexInput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getEncoder_82bbe26f] = env->getStaticMethodID(cls, "getEncoder", "(Lorg/apache/lucene/util/packed/PackedInts$Format;II)Lorg/apache/lucene/util/packed/PackedInts$Encoder;");
              mids$[mid_getMutable_5fda8e82] = env->getStaticMethodID(cls, "getMutable", "(IIF)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_getMutable_2ab94ab5] = env->getStaticMethodID(cls, "getMutable", "(IILorg/apache/lucene/util/packed/PackedInts$Format;)Lorg/apache/lucene/util/packed/PackedInts$Mutable;");
              mids$[mid_getReader_5e1a18f4] = env->getStaticMethodID(cls, "getReader", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getReaderIterator_edd93a0e] = env->getStaticMethodID(cls, "getReaderIterator", "(Lorg/apache/lucene/store/DataInput;I)Lorg/apache/lucene/util/packed/PackedInts$ReaderIterator;");
              mids$[mid_getReaderIteratorNoHeader_25f812d4] = env->getStaticMethodID(cls, "getReaderIteratorNoHeader", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/packed/PackedInts$Format;IIII)Lorg/apache/lucene/util/packed/PackedInts$ReaderIterator;");
              mids$[mid_getReaderNoHeader_5f216dfc] = env->getStaticMethodID(cls, "getReaderNoHeader", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/packed/PackedInts$Header;)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getReaderNoHeader_6f168df2] = env->getStaticMethodID(cls, "getReaderNoHeader", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Reader;");
              mids$[mid_getWriter_7e94d221] = env->getStaticMethodID(cls, "getWriter", "(Lorg/apache/lucene/store/DataOutput;IIF)Lorg/apache/lucene/util/packed/PackedInts$Writer;");
              mids$[mid_getWriterNoHeader_ec8145b0] = env->getStaticMethodID(cls, "getWriterNoHeader", "(Lorg/apache/lucene/store/DataOutput;Lorg/apache/lucene/util/packed/PackedInts$Format;III)Lorg/apache/lucene/util/packed/PackedInts$Writer;");
              mids$[mid_maxValue_39c7bd20] = env->getStaticMethodID(cls, "maxValue", "(I)J");
              mids$[mid_readHeader_1e64173a] = env->getStaticMethodID(cls, "readHeader", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/packed/PackedInts$Header;");
              mids$[mid_unsignedBitsRequired_0ee6df30] = env->getStaticMethodID(cls, "unsignedBitsRequired", "(J)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "CODEC_NAME", "Ljava/lang/String;"));
              COMPACT = env->getStaticFloatField(cls, "COMPACT");
              DEFAULT = env->getStaticFloatField(cls, "DEFAULT");
              DEFAULT_BUFFER_SIZE = env->getStaticIntField(cls, "DEFAULT_BUFFER_SIZE");
              FAST = env->getStaticFloatField(cls, "FAST");
              FASTEST = env->getStaticFloatField(cls, "FASTEST");
              VERSION_BYTE_ALIGNED = env->getStaticIntField(cls, "VERSION_BYTE_ALIGNED");
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_MONOTONIC_WITHOUT_ZIGZAG = env->getStaticIntField(cls, "VERSION_MONOTONIC_WITHOUT_ZIGZAG");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts::PackedInts() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PackedInts::bitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_bitsRequired_0ee6df30], a0);
          }

          void PackedInts::checkVersion(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_checkVersion_39c7bd3c], a0);
          }

          void PackedInts::copy(const ::org::apache::lucene::util::packed::PackedInts$Reader & a0, jint a1, const ::org::apache::lucene::util::packed::PackedInts$Mutable & a2, jint a3, jint a4, jint a5)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_copy_5dfb99d8], a0.this$, a1, a2.this$, a3, a4, a5);
          }

          ::org::apache::lucene::util::packed::PackedInts$FormatAndBits PackedInts::fastestFormatAndBits(jint a0, jint a1, jfloat a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$FormatAndBits(env->callStaticObjectMethod(cls, mids$[mid_fastestFormatAndBits_a44dbe2e], a0, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Decoder PackedInts::getDecoder(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Decoder(env->callStaticObjectMethod(cls, mids$[mid_getDecoder_a1fc44e7], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getDirectReader(const ::org::apache::lucene::store::IndexInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getDirectReader_dd96fa63], a0.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getDirectReaderNoHeader(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Header & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getDirectReaderNoHeader_6d5658ed], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getDirectReaderNoHeader(const ::org::apache::lucene::store::IndexInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getDirectReaderNoHeader_185fc68d], a0.this$, a1.this$, a2, a3, a4));
          }

          ::org::apache::lucene::util::packed::PackedInts$Encoder PackedInts::getEncoder(const ::org::apache::lucene::util::packed::PackedInts$Format & a0, jint a1, jint a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Encoder(env->callStaticObjectMethod(cls, mids$[mid_getEncoder_82bbe26f], a0.this$, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable PackedInts::getMutable(jint a0, jint a1, jfloat a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callStaticObjectMethod(cls, mids$[mid_getMutable_5fda8e82], a0, a1, a2));
          }

          ::org::apache::lucene::util::packed::PackedInts$Mutable PackedInts::getMutable(jint a0, jint a1, const ::org::apache::lucene::util::packed::PackedInts$Format & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Mutable(env->callStaticObjectMethod(cls, mids$[mid_getMutable_2ab94ab5], a0, a1, a2.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getReader(const ::org::apache::lucene::store::DataInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getReader_5e1a18f4], a0.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$ReaderIterator PackedInts::getReaderIterator(const ::org::apache::lucene::store::DataInput & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$ReaderIterator(env->callStaticObjectMethod(cls, mids$[mid_getReaderIterator_edd93a0e], a0.this$, a1));
          }

          ::org::apache::lucene::util::packed::PackedInts$ReaderIterator PackedInts::getReaderIteratorNoHeader(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4, jint a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$ReaderIterator(env->callStaticObjectMethod(cls, mids$[mid_getReaderIteratorNoHeader_25f812d4], a0.this$, a1.this$, a2, a3, a4, a5));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getReaderNoHeader(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Header & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getReaderNoHeader_5f216dfc], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::packed::PackedInts$Reader PackedInts::getReaderNoHeader(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Reader(env->callStaticObjectMethod(cls, mids$[mid_getReaderNoHeader_6f168df2], a0.this$, a1.this$, a2, a3, a4));
          }

          ::org::apache::lucene::util::packed::PackedInts$Writer PackedInts::getWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1, jint a2, jfloat a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Writer(env->callStaticObjectMethod(cls, mids$[mid_getWriter_7e94d221], a0.this$, a1, a2, a3));
          }

          ::org::apache::lucene::util::packed::PackedInts$Writer PackedInts::getWriterNoHeader(const ::org::apache::lucene::store::DataOutput & a0, const ::org::apache::lucene::util::packed::PackedInts$Format & a1, jint a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Writer(env->callStaticObjectMethod(cls, mids$[mid_getWriterNoHeader_ec8145b0], a0.this$, a1.this$, a2, a3, a4));
          }

          jlong PackedInts::maxValue(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticLongMethod(cls, mids$[mid_maxValue_39c7bd20], a0);
          }

          ::org::apache::lucene::util::packed::PackedInts$Header PackedInts::readHeader(const ::org::apache::lucene::store::DataInput & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::packed::PackedInts$Header(env->callStaticObjectMethod(cls, mids$[mid_readHeader_1e64173a], a0.this$));
          }

          jint PackedInts::unsignedBitsRequired(jlong a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_unsignedBitsRequired_0ee6df30], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/packed/PackedInts$NullReader.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts_init_(t_PackedInts *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts_bitsRequired(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_checkVersion(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_copy(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_fastestFormatAndBits(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getDecoder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getDirectReader(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_getDirectReaderNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getEncoder(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getMutable(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReader(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_getReaderIterator(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReaderIteratorNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getReaderNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getWriter(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_getWriterNoHeader(PyTypeObject *type, PyObject *args);
          static PyObject *t_PackedInts_maxValue(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_readHeader(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts_unsignedBitsRequired(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_PackedInts__methods_[] = {
            DECLARE_METHOD(t_PackedInts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, bitsRequired, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, checkVersion, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, copy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, fastestFormatAndBits, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDecoder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDirectReader, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getDirectReaderNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getEncoder, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getMutable, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReader, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderIterator, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderIteratorNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getReaderNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getWriter, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, getWriterNoHeader, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, maxValue, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, readHeader, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts, unsignedBitsRequired, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts, t_PackedInts, ::java::lang::Object, PackedInts, t_PackedInts_init_, 0, 0, 0, 0, 0);

          void t_PackedInts::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts), module, "PackedInts", 0);
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Header", make_descriptor(&PY_TYPE(PackedInts$Header)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Writer", make_descriptor(&PY_TYPE(PackedInts$Writer)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "NullReader", make_descriptor(&PY_TYPE(PackedInts$NullReader)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Mutable", make_descriptor(&PY_TYPE(PackedInts$Mutable)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "ReaderIterator", make_descriptor(&PY_TYPE(PackedInts$ReaderIterator)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Reader", make_descriptor(&PY_TYPE(PackedInts$Reader)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Encoder", make_descriptor(&PY_TYPE(PackedInts$Encoder)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Decoder", make_descriptor(&PY_TYPE(PackedInts$Decoder)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "FormatAndBits", make_descriptor(&PY_TYPE(PackedInts$FormatAndBits)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "Format", make_descriptor(&PY_TYPE(PackedInts$Format)));
          }

          void t_PackedInts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "class_", make_descriptor(PackedInts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "wrapfn_", make_descriptor(t_PackedInts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PackedInts::initializeClass);
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "CODEC_NAME", make_descriptor(j2p(*PackedInts::CODEC_NAME)));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "COMPACT", make_descriptor(PackedInts::COMPACT));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "DEFAULT", make_descriptor(PackedInts::DEFAULT));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "DEFAULT_BUFFER_SIZE", make_descriptor(PackedInts::DEFAULT_BUFFER_SIZE));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "FAST", make_descriptor(PackedInts::FAST));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "FASTEST", make_descriptor(PackedInts::FASTEST));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_BYTE_ALIGNED", make_descriptor(PackedInts::VERSION_BYTE_ALIGNED));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_CURRENT", make_descriptor(PackedInts::VERSION_CURRENT));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_MONOTONIC_WITHOUT_ZIGZAG", make_descriptor(PackedInts::VERSION_MONOTONIC_WITHOUT_ZIGZAG));
            PyDict_SetItemString(PY_TYPE(PackedInts).tp_dict, "VERSION_START", make_descriptor(PackedInts::VERSION_START));
          }

          static PyObject *t_PackedInts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts::initializeClass, 1)))
              return NULL;
            return t_PackedInts::wrap_Object(PackedInts(((t_PackedInts *) arg)->object.this$));
          }
          static PyObject *t_PackedInts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts_init_(t_PackedInts *self, PyObject *args, PyObject *kwds)
          {
            PackedInts object((jobject) NULL);

            INT_CALL(object = PackedInts());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedInts_bitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::bitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bitsRequired", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_checkVersion(PyTypeObject *type, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::packed::PackedInts::checkVersion(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "checkVersion", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_copy(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Reader a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::packed::PackedInts$Mutable a2((jobject) NULL);
            jint a3;
            jint a4;
            jint a5;

            if (!parseArgs(args, "kIkIII", ::org::apache::lucene::util::packed::PackedInts$Reader::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Mutable::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(::org::apache::lucene::util::packed::PackedInts::copy(a0, a1, a2, a3, a4, a5));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "copy", args);
            return NULL;
          }

          static PyObject *t_PackedInts_fastestFormatAndBits(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat a2;
            ::org::apache::lucene::util::packed::PackedInts$FormatAndBits result((jobject) NULL);

            if (!parseArgs(args, "IIF", &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::fastestFormatAndBits(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$FormatAndBits::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "fastestFormatAndBits", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getDecoder(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::packed::PackedInts$Decoder result((jobject) NULL);

            if (!parseArgs(args, "KII", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDecoder(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$Decoder::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getDecoder", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getDirectReader(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDirectReader(a0));
              return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getDirectReader", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_getDirectReaderNoHeader(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Header a1((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Header::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDirectReaderNoHeader(a0, a1));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                jint a3;
                jint a4;
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::IndexInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getDirectReaderNoHeader(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getDirectReaderNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getEncoder(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::packed::PackedInts$Format a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::util::packed::PackedInts$Encoder result((jobject) NULL);

            if (!parseArgs(args, "KII", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &p0, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getEncoder(a0, a1, a2));
              return ::org::apache::lucene::util::packed::t_PackedInts$Encoder::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getEncoder", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getMutable(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                jint a0;
                jint a1;
                jfloat a2;
                ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);

                if (!parseArgs(args, "IIF", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getMutable(a0, a1, a2));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
                }
              }
              {
                jint a0;
                jint a1;
                ::org::apache::lucene::util::packed::PackedInts$Format a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::util::packed::PackedInts$Mutable result((jobject) NULL);

                if (!parseArgs(args, "IIK", ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getMutable(a0, a1, a2));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Mutable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getMutable", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReader(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReader(a0));
              return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReader", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderIterator(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::packed::PackedInts$ReaderIterator result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderIterator(a0, a1));
              return ::org::apache::lucene::util::packed::t_PackedInts$ReaderIterator::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReaderIterator", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderIteratorNoHeader(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jint a3;
            jint a4;
            jint a5;
            ::org::apache::lucene::util::packed::PackedInts$ReaderIterator result((jobject) NULL);

            if (!parseArgs(args, "kKIIII", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4, &a5))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderIteratorNoHeader(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::util::packed::t_PackedInts$ReaderIterator::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getReaderIteratorNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getReaderNoHeader(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Header a1((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Header::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderNoHeader(a0, a1));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                jint a3;
                jint a4;
                ::org::apache::lucene::util::packed::PackedInts$Reader result((jobject) NULL);

                if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getReaderNoHeader(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::util::packed::t_PackedInts$Reader::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getReaderNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getWriter(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            jint a2;
            jfloat a3;
            ::org::apache::lucene::util::packed::PackedInts$Writer result((jobject) NULL);

            if (!parseArgs(args, "kIIF", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getWriter(a0, a1, a2, a3));
              return ::org::apache::lucene::util::packed::t_PackedInts$Writer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getWriter", args);
            return NULL;
          }

          static PyObject *t_PackedInts_getWriterNoHeader(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Format a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jint a3;
            jint a4;
            ::org::apache::lucene::util::packed::PackedInts$Writer result((jobject) NULL);

            if (!parseArgs(args, "kKIII", ::org::apache::lucene::store::DataOutput::initializeClass, ::org::apache::lucene::util::packed::PackedInts$Format::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::packed::t_PackedInts$Format::parameters_, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::getWriterNoHeader(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::util::packed::t_PackedInts$Writer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getWriterNoHeader", args);
            return NULL;
          }

          static PyObject *t_PackedInts_maxValue(PyTypeObject *type, PyObject *arg)
          {
            jint a0;
            jlong result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::maxValue(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "maxValue", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_readHeader(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::packed::PackedInts$Header result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::readHeader(a0));
              return ::org::apache::lucene::util::packed::t_PackedInts$Header::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "readHeader", arg);
            return NULL;
          }

          static PyObject *t_PackedInts_unsignedBitsRequired(PyTypeObject *type, PyObject *arg)
          {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::PackedInts::unsignedBitsRequired(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "unsignedBitsRequired", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SnapshotDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SnapshotDeletionPolicy::class$ = NULL;
        jmethodID *SnapshotDeletionPolicy::mids$ = NULL;
        bool SnapshotDeletionPolicy::live$ = false;

        jclass SnapshotDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SnapshotDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9cff6c2e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;)V");
            mids$[mid_getIndexCommit_6e559b4f] = env->getMethodID(cls, "getIndexCommit", "(J)Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getSnapshotCount_54c6a179] = env->getMethodID(cls, "getSnapshotCount", "()I");
            mids$[mid_getSnapshots_87851566] = env->getMethodID(cls, "getSnapshots", "()Ljava/util/List;");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");
            mids$[mid_release_fecc65d3] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_snapshot_09307276] = env->getMethodID(cls, "snapshot", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_incRef_fecc65d3] = env->getMethodID(cls, "incRef", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_releaseGen_0ee6df2f] = env->getMethodID(cls, "releaseGen", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SnapshotDeletionPolicy::SnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0) : ::org::apache::lucene::index::IndexDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_9cff6c2e, a0.this$)) {}

        ::org::apache::lucene::index::IndexCommit SnapshotDeletionPolicy::getIndexCommit(jlong a0) const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_6e559b4f], a0));
        }

        jint SnapshotDeletionPolicy::getSnapshotCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getSnapshotCount_54c6a179]);
        }

        ::java::util::List SnapshotDeletionPolicy::getSnapshots() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSnapshots_87851566]));
        }

        void SnapshotDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void SnapshotDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }

        void SnapshotDeletionPolicy::release(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_fecc65d3], a0.this$);
        }

        ::org::apache::lucene::index::IndexCommit SnapshotDeletionPolicy::snapshot() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_snapshot_09307276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SnapshotDeletionPolicy_init_(t_SnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SnapshotDeletionPolicy_getIndexCommit(t_SnapshotDeletionPolicy *self, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_getSnapshotCount(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_getSnapshots(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_onCommit(t_SnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_SnapshotDeletionPolicy_onInit(t_SnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_SnapshotDeletionPolicy_release(t_SnapshotDeletionPolicy *self, PyObject *arg);
        static PyObject *t_SnapshotDeletionPolicy_snapshot(t_SnapshotDeletionPolicy *self);
        static PyObject *t_SnapshotDeletionPolicy_get__snapshotCount(t_SnapshotDeletionPolicy *self, void *data);
        static PyObject *t_SnapshotDeletionPolicy_get__snapshots(t_SnapshotDeletionPolicy *self, void *data);
        static PyGetSetDef t_SnapshotDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_SnapshotDeletionPolicy, snapshotCount),
          DECLARE_GET_FIELD(t_SnapshotDeletionPolicy, snapshots),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SnapshotDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_SnapshotDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getIndexCommit, METH_O),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getSnapshotCount, METH_NOARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, getSnapshots, METH_NOARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, onInit, METH_VARARGS),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, release, METH_O),
          DECLARE_METHOD(t_SnapshotDeletionPolicy, snapshot, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SnapshotDeletionPolicy, t_SnapshotDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, SnapshotDeletionPolicy, t_SnapshotDeletionPolicy_init_, 0, 0, t_SnapshotDeletionPolicy__fields_, 0, 0);

        void t_SnapshotDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(SnapshotDeletionPolicy), module, "SnapshotDeletionPolicy", 0);
        }

        void t_SnapshotDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SnapshotDeletionPolicy).tp_dict, "class_", make_descriptor(SnapshotDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SnapshotDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_SnapshotDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SnapshotDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SnapshotDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_SnapshotDeletionPolicy::wrap_Object(SnapshotDeletionPolicy(((t_SnapshotDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_SnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SnapshotDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SnapshotDeletionPolicy_init_(t_SnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
          SnapshotDeletionPolicy object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, &a0))
          {
            INT_CALL(object = SnapshotDeletionPolicy(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SnapshotDeletionPolicy_getIndexCommit(t_SnapshotDeletionPolicy *self, PyObject *arg)
        {
          jlong a0;
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getIndexCommit(a0));
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getIndexCommit", arg);
          return NULL;
        }

        static PyObject *t_SnapshotDeletionPolicy_getSnapshotCount(t_SnapshotDeletionPolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSnapshotCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SnapshotDeletionPolicy_getSnapshots(t_SnapshotDeletionPolicy *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getSnapshots());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexCommit));
        }

        static PyObject *t_SnapshotDeletionPolicy_onCommit(t_SnapshotDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SnapshotDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_SnapshotDeletionPolicy_onInit(t_SnapshotDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SnapshotDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }

        static PyObject *t_SnapshotDeletionPolicy_release(t_SnapshotDeletionPolicy *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(self->object.release(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "release", arg);
          return NULL;
        }

        static PyObject *t_SnapshotDeletionPolicy_snapshot(t_SnapshotDeletionPolicy *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.snapshot());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_SnapshotDeletionPolicy_get__snapshotCount(t_SnapshotDeletionPolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSnapshotCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SnapshotDeletionPolicy_get__snapshots(t_SnapshotDeletionPolicy *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getSnapshots());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/SimpleBindings.h"
#include "java/lang/String.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *SimpleBindings::class$ = NULL;
        jmethodID *SimpleBindings::mids$ = NULL;
        bool SimpleBindings::live$ = false;

        jclass SimpleBindings::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/SimpleBindings");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_3578f7bf] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_add_bca05986] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/expressions/Expression;)V");
            mids$[mid_getValueSource_3afe260d] = env->getMethodID(cls, "getValueSource", "(Ljava/lang/String;)Lorg/apache/lucene/queries/function/ValueSource;");
            mids$[mid_validate_54c6a166] = env->getMethodID(cls, "validate", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleBindings::SimpleBindings() : ::org::apache::lucene::expressions::Bindings(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SimpleBindings::add(const ::org::apache::lucene::search::SortField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_3578f7bf], a0.this$);
        }

        void SimpleBindings::add(const ::java::lang::String & a0, const ::org::apache::lucene::expressions::Expression & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_bca05986], a0.this$, a1.this$);
        }

        ::org::apache::lucene::queries::function::ValueSource SimpleBindings::getValueSource(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_3afe260d], a0.this$));
        }

        void SimpleBindings::validate() const
        {
          env->callVoidMethod(this$, mids$[mid_validate_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_SimpleBindings_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleBindings_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleBindings_init_(t_SimpleBindings *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleBindings_add(t_SimpleBindings *self, PyObject *args);
        static PyObject *t_SimpleBindings_getValueSource(t_SimpleBindings *self, PyObject *args);
        static PyObject *t_SimpleBindings_validate(t_SimpleBindings *self);

        static PyMethodDef t_SimpleBindings__methods_[] = {
          DECLARE_METHOD(t_SimpleBindings, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleBindings, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleBindings, add, METH_VARARGS),
          DECLARE_METHOD(t_SimpleBindings, getValueSource, METH_VARARGS),
          DECLARE_METHOD(t_SimpleBindings, validate, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleBindings, t_SimpleBindings, ::org::apache::lucene::expressions::Bindings, SimpleBindings, t_SimpleBindings_init_, 0, 0, 0, 0, 0);

        void t_SimpleBindings::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleBindings), module, "SimpleBindings", 0);
        }

        void t_SimpleBindings::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleBindings).tp_dict, "class_", make_descriptor(SimpleBindings::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleBindings).tp_dict, "wrapfn_", make_descriptor(t_SimpleBindings::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleBindings).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleBindings_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleBindings::initializeClass, 1)))
            return NULL;
          return t_SimpleBindings::wrap_Object(SimpleBindings(((t_SimpleBindings *) arg)->object.this$));
        }
        static PyObject *t_SimpleBindings_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleBindings::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleBindings_init_(t_SimpleBindings *self, PyObject *args, PyObject *kwds)
        {
          SimpleBindings object((jobject) NULL);

          INT_CALL(object = SimpleBindings());
          self->object = object;

          return 0;
        }

        static PyObject *t_SimpleBindings_add(t_SimpleBindings *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::expressions::Expression a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::expressions::Expression::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_SimpleBindings_getValueSource(t_SimpleBindings *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getValueSource(a0));
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SimpleBindings), (PyObject *) self, "getValueSource", args, 2);
        }

        static PyObject *t_SimpleBindings_validate(t_SimpleBindings *self)
        {
          OBJ_CALL(self->object.validate());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FlushInfo::class$ = NULL;
        jmethodID *FlushInfo::mids$ = NULL;
        jfieldID *FlushInfo::fids$ = NULL;
        bool FlushInfo::live$ = false;

        jclass FlushInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FlushInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_03b232b5] = env->getMethodID(cls, "<init>", "(IJ)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_estimatedSegmentSize] = env->getFieldID(cls, "estimatedSegmentSize", "J");
            fids$[fid_numDocs] = env->getFieldID(cls, "numDocs", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FlushInfo::FlushInfo(jint a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_03b232b5, a0, a1)) {}

        jboolean FlushInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FlushInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String FlushInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong FlushInfo::_get_estimatedSegmentSize() const
        {
          return env->getLongField(this$, fids$[fid_estimatedSegmentSize]);
        }

        jint FlushInfo::_get_numDocs() const
        {
          return env->getIntField(this$, fids$[fid_numDocs]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FlushInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FlushInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FlushInfo_init_(t_FlushInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FlushInfo_equals(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_hashCode(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_toString(t_FlushInfo *self, PyObject *args);
        static PyObject *t_FlushInfo_get__estimatedSegmentSize(t_FlushInfo *self, void *data);
        static PyObject *t_FlushInfo_get__numDocs(t_FlushInfo *self, void *data);

        static PyGetSetDef t_FlushInfo__fields_[] = {
          DECLARE_GET_FIELD(t_FlushInfo, estimatedSegmentSize),
          DECLARE_GET_FIELD(t_FlushInfo, numDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FlushInfo__methods_[] = {
          DECLARE_METHOD(t_FlushInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FlushInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FlushInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_FlushInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FlushInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FlushInfo, t_FlushInfo, ::java::lang::Object, FlushInfo, t_FlushInfo_init_, 0, 0, t_FlushInfo__fields_, 0, 0);

        void t_FlushInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(FlushInfo), module, "FlushInfo", 0);
        }

        void t_FlushInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FlushInfo).tp_dict, "class_", make_descriptor(FlushInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FlushInfo).tp_dict, "wrapfn_", make_descriptor(t_FlushInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FlushInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FlushInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FlushInfo::initializeClass, 1)))
            return NULL;
          return t_FlushInfo::wrap_Object(FlushInfo(((t_FlushInfo *) arg)->object.this$));
        }
        static PyObject *t_FlushInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FlushInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FlushInfo_init_(t_FlushInfo *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jlong a1;
          FlushInfo object((jobject) NULL);

          if (!parseArgs(args, "IJ", &a0, &a1))
          {
            INT_CALL(object = FlushInfo(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FlushInfo_equals(t_FlushInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FlushInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FlushInfo_hashCode(t_FlushInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FlushInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FlushInfo_toString(t_FlushInfo *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FlushInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FlushInfo_get__estimatedSegmentSize(t_FlushInfo *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_estimatedSegmentSize());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_FlushInfo_get__numDocs(t_FlushInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numDocs());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std34/StandardTokenizerImpl34.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {

            ::java::lang::Class *StandardTokenizerImpl34::class$ = NULL;
            jmethodID *StandardTokenizerImpl34::mids$ = NULL;
            bool StandardTokenizerImpl34::live$ = false;
            jint StandardTokenizerImpl34::HANGUL_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::HIRAGANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::IDEOGRAPHIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::KATAKANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::NUMERIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::WORD_TYPE = (jint) 0;
            jint StandardTokenizerImpl34::YYEOF = (jint) 0;
            jint StandardTokenizerImpl34::YYINITIAL = (jint) 0;

            jclass StandardTokenizerImpl34::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std34/StandardTokenizerImpl34");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardTokenizerImpl34::StandardTokenizerImpl34(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint StandardTokenizerImpl34::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void StandardTokenizerImpl34::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void StandardTokenizerImpl34::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint StandardTokenizerImpl34::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar StandardTokenizerImpl34::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void StandardTokenizerImpl34::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint StandardTokenizerImpl34::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void StandardTokenizerImpl34::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void StandardTokenizerImpl34::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint StandardTokenizerImpl34::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String StandardTokenizerImpl34::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std34 {
            static PyObject *t_StandardTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardTokenizerImpl34_init_(t_StandardTokenizerImpl34 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardTokenizerImpl34_getNextToken(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_getText(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yybegin(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yychar(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yycharat(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yyclose(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yylength(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yypushback(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yyreset(t_StandardTokenizerImpl34 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl34_yystate(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_yytext(t_StandardTokenizerImpl34 *self);
            static PyObject *t_StandardTokenizerImpl34_get__nextToken(t_StandardTokenizerImpl34 *self, void *data);
            static PyGetSetDef t_StandardTokenizerImpl34__fields_[] = {
              DECLARE_GET_FIELD(t_StandardTokenizerImpl34, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardTokenizerImpl34__methods_[] = {
              DECLARE_METHOD(t_StandardTokenizerImpl34, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, getText, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yybegin, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yychar, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yycharat, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yylength, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yypushback, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yyreset, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yystate, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl34, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardTokenizerImpl34, t_StandardTokenizerImpl34, ::java::lang::Object, StandardTokenizerImpl34, t_StandardTokenizerImpl34_init_, 0, 0, t_StandardTokenizerImpl34__fields_, 0, 0);

            void t_StandardTokenizerImpl34::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardTokenizerImpl34), module, "StandardTokenizerImpl34", 0);
            }

            void t_StandardTokenizerImpl34::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "class_", make_descriptor(StandardTokenizerImpl34::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl34::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(StandardTokenizerImpl34::initializeClass);
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl34::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl34::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl34::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl34::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl34::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl34::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl34::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl34::YYEOF));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl34).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl34::YYINITIAL));
            }

            static PyObject *t_StandardTokenizerImpl34_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardTokenizerImpl34::initializeClass, 1)))
                return NULL;
              return t_StandardTokenizerImpl34::wrap_Object(StandardTokenizerImpl34(((t_StandardTokenizerImpl34 *) arg)->object.this$));
            }
            static PyObject *t_StandardTokenizerImpl34_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardTokenizerImpl34::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardTokenizerImpl34_init_(t_StandardTokenizerImpl34 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              StandardTokenizerImpl34 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = StandardTokenizerImpl34(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardTokenizerImpl34_getNextToken(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_getText(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yybegin(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yychar(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_yycharat(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yyclose(t_StandardTokenizerImpl34 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_StandardTokenizerImpl34_yylength(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_yypushback(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yyreset(t_StandardTokenizerImpl34 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl34_yystate(t_StandardTokenizerImpl34 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl34_yytext(t_StandardTokenizerImpl34 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_StandardTokenizerImpl34_get__nextToken(t_StandardTokenizerImpl34 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *DelimitedPayloadTokenFilterFactory::class$ = NULL;
          jmethodID *DelimitedPayloadTokenFilterFactory::mids$ = NULL;
          bool DelimitedPayloadTokenFilterFactory::live$ = false;
          ::java::lang::String *DelimitedPayloadTokenFilterFactory::DELIMITER_ATTR = NULL;
          ::java::lang::String *DelimitedPayloadTokenFilterFactory::ENCODER_ATTR = NULL;

          jclass DelimitedPayloadTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ca2c8453] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/payloads/DelimitedPayloadTokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DELIMITER_ATTR = new ::java::lang::String(env->getStaticObjectField(cls, "DELIMITER_ATTR", "Ljava/lang/String;"));
              ENCODER_ATTR = new ::java::lang::String(env->getStaticObjectField(cls, "ENCODER_ATTR", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DelimitedPayloadTokenFilterFactory::DelimitedPayloadTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter DelimitedPayloadTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter(env->callObjectMethod(this$, mids$[mid_create_ca2c8453], a0.this$));
          }

          void DelimitedPayloadTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_DelimitedPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DelimitedPayloadTokenFilterFactory_init_(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_create(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args);
          static PyObject *t_DelimitedPayloadTokenFilterFactory_inform(t_DelimitedPayloadTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_DelimitedPayloadTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_DelimitedPayloadTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DelimitedPayloadTokenFilterFactory, t_DelimitedPayloadTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, DelimitedPayloadTokenFilterFactory, t_DelimitedPayloadTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_DelimitedPayloadTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(DelimitedPayloadTokenFilterFactory), module, "DelimitedPayloadTokenFilterFactory", 0);
          }

          void t_DelimitedPayloadTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "class_", make_descriptor(DelimitedPayloadTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_DelimitedPayloadTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DelimitedPayloadTokenFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "DELIMITER_ATTR", make_descriptor(j2p(*DelimitedPayloadTokenFilterFactory::DELIMITER_ATTR)));
            PyDict_SetItemString(PY_TYPE(DelimitedPayloadTokenFilterFactory).tp_dict, "ENCODER_ATTR", make_descriptor(j2p(*DelimitedPayloadTokenFilterFactory::ENCODER_ATTR)));
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DelimitedPayloadTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_DelimitedPayloadTokenFilterFactory::wrap_Object(DelimitedPayloadTokenFilterFactory(((t_DelimitedPayloadTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_DelimitedPayloadTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DelimitedPayloadTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DelimitedPayloadTokenFilterFactory_init_(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            DelimitedPayloadTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = DelimitedPayloadTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_create(t_DelimitedPayloadTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::payloads::DelimitedPayloadTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::payloads::t_DelimitedPayloadTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DelimitedPayloadTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_DelimitedPayloadTokenFilterFactory_inform(t_DelimitedPayloadTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SetOnce$AlreadySetException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SetOnce$AlreadySetException::class$ = NULL;
        jmethodID *SetOnce$AlreadySetException::mids$ = NULL;
        bool SetOnce$AlreadySetException::live$ = false;

        jclass SetOnce$AlreadySetException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SetOnce$AlreadySetException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SetOnce$AlreadySetException::SetOnce$AlreadySetException() : ::java::lang::IllegalStateException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SetOnce$AlreadySetException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce$AlreadySetException_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce$AlreadySetException_of_(t_SetOnce$AlreadySetException *self, PyObject *args);
        static int t_SetOnce$AlreadySetException_init_(t_SetOnce$AlreadySetException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SetOnce$AlreadySetException_get__parameters_(t_SetOnce$AlreadySetException *self, void *data);
        static PyGetSetDef t_SetOnce$AlreadySetException__fields_[] = {
          DECLARE_GET_FIELD(t_SetOnce$AlreadySetException, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SetOnce$AlreadySetException__methods_[] = {
          DECLARE_METHOD(t_SetOnce$AlreadySetException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce$AlreadySetException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce$AlreadySetException, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SetOnce$AlreadySetException, t_SetOnce$AlreadySetException, ::java::lang::IllegalStateException, SetOnce$AlreadySetException, t_SetOnce$AlreadySetException_init_, 0, 0, t_SetOnce$AlreadySetException__fields_, 0, 0);
        PyObject *t_SetOnce$AlreadySetException::wrap_Object(const SetOnce$AlreadySetException& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce$AlreadySetException::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce$AlreadySetException *self = (t_SetOnce$AlreadySetException *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SetOnce$AlreadySetException::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce$AlreadySetException::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce$AlreadySetException *self = (t_SetOnce$AlreadySetException *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SetOnce$AlreadySetException::install(PyObject *module)
        {
          installType(&PY_TYPE(SetOnce$AlreadySetException), module, "SetOnce$AlreadySetException", 0);
        }

        void t_SetOnce$AlreadySetException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SetOnce$AlreadySetException).tp_dict, "class_", make_descriptor(SetOnce$AlreadySetException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SetOnce$AlreadySetException).tp_dict, "wrapfn_", make_descriptor(t_SetOnce$AlreadySetException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SetOnce$AlreadySetException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SetOnce$AlreadySetException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SetOnce$AlreadySetException::initializeClass, 1)))
            return NULL;
          return t_SetOnce$AlreadySetException::wrap_Object(SetOnce$AlreadySetException(((t_SetOnce$AlreadySetException *) arg)->object.this$));
        }
        static PyObject *t_SetOnce$AlreadySetException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SetOnce$AlreadySetException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SetOnce$AlreadySetException_of_(t_SetOnce$AlreadySetException *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SetOnce$AlreadySetException_init_(t_SetOnce$AlreadySetException *self, PyObject *args, PyObject *kwds)
        {
          SetOnce$AlreadySetException object((jobject) NULL);

          INT_CALL(object = SetOnce$AlreadySetException());
          self->object = object;

          return 0;
        }
        static PyObject *t_SetOnce$AlreadySetException_get__parameters_(t_SetOnce$AlreadySetException *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CloneNotSupportedException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *WildcardQueryNode::class$ = NULL;
              jmethodID *WildcardQueryNode::mids$ = NULL;
              bool WildcardQueryNode::live$ = false;

              jclass WildcardQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddeda85c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;)V");
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_3797a232] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/standard/nodes/WildcardQueryNode;");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              WildcardQueryNode::WildcardQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddeda85c, a0.this$)) {}

              WildcardQueryNode::WildcardQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              WildcardQueryNode WildcardQueryNode::cloneTree() const
              {
                return WildcardQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_3797a232]));
              }

              ::java::lang::CharSequence WildcardQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String WildcardQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_WildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_WildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_WildcardQueryNode_init_(t_WildcardQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_WildcardQueryNode_cloneTree(t_WildcardQueryNode *self, PyObject *args);
              static PyObject *t_WildcardQueryNode_toQueryString(t_WildcardQueryNode *self, PyObject *args);
              static PyObject *t_WildcardQueryNode_toString(t_WildcardQueryNode *self, PyObject *args);

              static PyMethodDef t_WildcardQueryNode__methods_[] = {
                DECLARE_METHOD(t_WildcardQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_WildcardQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_WildcardQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_WildcardQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(WildcardQueryNode, t_WildcardQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode, WildcardQueryNode, t_WildcardQueryNode_init_, 0, 0, 0, 0, 0);

              void t_WildcardQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(WildcardQueryNode), module, "WildcardQueryNode", 0);
              }

              void t_WildcardQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(WildcardQueryNode).tp_dict, "class_", make_descriptor(WildcardQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNode).tp_dict, "wrapfn_", make_descriptor(t_WildcardQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(WildcardQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_WildcardQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, WildcardQueryNode::initializeClass, 1)))
                  return NULL;
                return t_WildcardQueryNode::wrap_Object(WildcardQueryNode(((t_WildcardQueryNode *) arg)->object.this$));
              }
              static PyObject *t_WildcardQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, WildcardQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_WildcardQueryNode_init_(t_WildcardQueryNode *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                    WildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0))
                    {
                      INT_CALL(object = WildcardQueryNode(a0));
                      self->object = object;
                      break;
                    }
                  }
                  goto err;
                 case 4:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::java::lang::CharSequence a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    WildcardQueryNode object((jobject) NULL);

                    if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                    {
                      INT_CALL(object = WildcardQueryNode(a0, a1, a2, a3));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_WildcardQueryNode_cloneTree(t_WildcardQueryNode *self, PyObject *args)
              {
                WildcardQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_WildcardQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(WildcardQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_WildcardQueryNode_toQueryString(t_WildcardQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(WildcardQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_WildcardQueryNode_toString(t_WildcardQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(WildcardQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FSLockFactory.h"
#include "java/lang/String.h"
#include "java/io/File.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FSLockFactory::class$ = NULL;
        jmethodID *FSLockFactory::mids$ = NULL;
        bool FSLockFactory::live$ = false;

        jclass FSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getLockDir_a8eb7bbe] = env->getMethodID(cls, "getLockDir", "()Ljava/io/File;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_setLockDir_c3dacf57] = env->getMethodID(cls, "setLockDir", "(Ljava/io/File;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FSLockFactory::FSLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::io::File FSLockFactory::getLockDir() const
        {
          return ::java::io::File(env->callObjectMethod(this$, mids$[mid_getLockDir_a8eb7bbe]));
        }

        ::java::lang::String FSLockFactory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FSLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FSLockFactory_init_(t_FSLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FSLockFactory_getLockDir(t_FSLockFactory *self);
        static PyObject *t_FSLockFactory_toString(t_FSLockFactory *self, PyObject *args);
        static PyObject *t_FSLockFactory_get__lockDir(t_FSLockFactory *self, void *data);
        static PyGetSetDef t_FSLockFactory__fields_[] = {
          DECLARE_GET_FIELD(t_FSLockFactory, lockDir),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FSLockFactory__methods_[] = {
          DECLARE_METHOD(t_FSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSLockFactory, getLockDir, METH_NOARGS),
          DECLARE_METHOD(t_FSLockFactory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FSLockFactory, t_FSLockFactory, ::org::apache::lucene::store::LockFactory, FSLockFactory, t_FSLockFactory_init_, 0, 0, t_FSLockFactory__fields_, 0, 0);

        void t_FSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(FSLockFactory), module, "FSLockFactory", 0);
        }

        void t_FSLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FSLockFactory).tp_dict, "class_", make_descriptor(FSLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FSLockFactory).tp_dict, "wrapfn_", make_descriptor(t_FSLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FSLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FSLockFactory::initializeClass, 1)))
            return NULL;
          return t_FSLockFactory::wrap_Object(FSLockFactory(((t_FSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_FSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FSLockFactory_init_(t_FSLockFactory *self, PyObject *args, PyObject *kwds)
        {
          FSLockFactory object((jobject) NULL);

          INT_CALL(object = FSLockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_FSLockFactory_getLockDir(t_FSLockFactory *self)
        {
          ::java::io::File result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockDir());
          return ::java::io::t_File::wrap_Object(result);
        }

        static PyObject *t_FSLockFactory_toString(t_FSLockFactory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FSLockFactory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FSLockFactory_get__lockDir(t_FSLockFactory *self, void *data)
        {
          ::java::io::File value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockDir());
          return ::java::io::t_File::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSelector$Type::class$ = NULL;
        jmethodID *SortedNumericSelector$Type::mids$ = NULL;
        bool SortedNumericSelector$Type::live$ = false;
        SortedNumericSelector$Type *SortedNumericSelector$Type::MAX = NULL;
        SortedNumericSelector$Type *SortedNumericSelector$Type::MIN = NULL;

        jclass SortedNumericSelector$Type::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSelector$Type");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_46e516f8] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/SortedNumericSelector$Type;");
            mids$[mid_values_26c59952] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/SortedNumericSelector$Type;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MAX = new SortedNumericSelector$Type(env->getStaticObjectField(cls, "MAX", "Lorg/apache/lucene/search/SortedNumericSelector$Type;"));
            MIN = new SortedNumericSelector$Type(env->getStaticObjectField(cls, "MIN", "Lorg/apache/lucene/search/SortedNumericSelector$Type;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSelector$Type SortedNumericSelector$Type::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SortedNumericSelector$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_46e516f8], a0.this$));
        }

        JArray< SortedNumericSelector$Type > SortedNumericSelector$Type::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< SortedNumericSelector$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_26c59952]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSelector$Type_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector$Type_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSelector$Type_of_(t_SortedNumericSelector$Type *self, PyObject *args);
        static PyObject *t_SortedNumericSelector$Type_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortedNumericSelector$Type_values(PyTypeObject *type);
        static PyObject *t_SortedNumericSelector$Type_get__parameters_(t_SortedNumericSelector$Type *self, void *data);
        static PyGetSetDef t_SortedNumericSelector$Type__fields_[] = {
          DECLARE_GET_FIELD(t_SortedNumericSelector$Type, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedNumericSelector$Type__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSelector$Type, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, of_, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSelector$Type, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericSelector$Type, t_SortedNumericSelector$Type, ::java::lang::Enum, SortedNumericSelector$Type, abstract_init, 0, 0, t_SortedNumericSelector$Type__fields_, 0, 0);
        PyObject *t_SortedNumericSelector$Type::wrap_Object(const SortedNumericSelector$Type& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortedNumericSelector$Type::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortedNumericSelector$Type *self = (t_SortedNumericSelector$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SortedNumericSelector$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortedNumericSelector$Type::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortedNumericSelector$Type *self = (t_SortedNumericSelector$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SortedNumericSelector$Type::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSelector$Type), module, "SortedNumericSelector$Type", 0);
        }

        void t_SortedNumericSelector$Type::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "class_", make_descriptor(SortedNumericSelector$Type::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericSelector$Type::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedNumericSelector$Type::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "MAX", make_descriptor(t_SortedNumericSelector$Type::wrap_Object(*SortedNumericSelector$Type::MAX)));
          PyDict_SetItemString(PY_TYPE(SortedNumericSelector$Type).tp_dict, "MIN", make_descriptor(t_SortedNumericSelector$Type::wrap_Object(*SortedNumericSelector$Type::MIN)));
        }

        static PyObject *t_SortedNumericSelector$Type_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSelector$Type::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSelector$Type::wrap_Object(SortedNumericSelector$Type(((t_SortedNumericSelector$Type *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSelector$Type_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSelector$Type::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedNumericSelector$Type_of_(t_SortedNumericSelector$Type *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SortedNumericSelector$Type_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          SortedNumericSelector$Type result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector$Type::valueOf(a0));
            return t_SortedNumericSelector$Type::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_SortedNumericSelector$Type_values(PyTypeObject *type)
        {
          JArray< SortedNumericSelector$Type > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::SortedNumericSelector$Type::values());
          return JArray<jobject>(result.this$).wrap(t_SortedNumericSelector$Type::wrap_jobject);
        }
        static PyObject *t_SortedNumericSelector$Type_get__parameters_(t_SortedNumericSelector$Type *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptCompiler.h"
#include "java/lang/String.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptCompiler::class$ = NULL;
          jmethodID *JavascriptCompiler::mids$ = NULL;
          bool JavascriptCompiler::live$ = false;

          jclass JavascriptCompiler::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptCompiler");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compile_3f39a74f] = env->getStaticMethodID(cls, "compile", "(Ljava/lang/String;)Lorg/apache/lucene/expressions/Expression;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::expressions::Expression JavascriptCompiler::compile(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::expressions::Expression(env->callStaticObjectMethod(cls, mids$[mid_compile_3f39a74f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptCompiler_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptCompiler_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptCompiler_compile(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_JavascriptCompiler__methods_[] = {
            DECLARE_METHOD(t_JavascriptCompiler, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptCompiler, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptCompiler, compile, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptCompiler, t_JavascriptCompiler, ::java::lang::Object, JavascriptCompiler, abstract_init, 0, 0, 0, 0, 0);

          void t_JavascriptCompiler::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptCompiler), module, "JavascriptCompiler", 0);
          }

          void t_JavascriptCompiler::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptCompiler).tp_dict, "class_", make_descriptor(JavascriptCompiler::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptCompiler).tp_dict, "wrapfn_", make_descriptor(t_JavascriptCompiler::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptCompiler).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptCompiler_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptCompiler::initializeClass, 1)))
              return NULL;
            return t_JavascriptCompiler::wrap_Object(JavascriptCompiler(((t_JavascriptCompiler *) arg)->object.this$));
          }
          static PyObject *t_JavascriptCompiler_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptCompiler::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_JavascriptCompiler_compile(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::expressions::Expression result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::expressions::js::JavascriptCompiler::compile(a0));
              return ::org::apache::lucene::expressions::t_Expression::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "compile", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ASCIIFoldingFilter::class$ = NULL;
          jmethodID *ASCIIFoldingFilter::mids$ = NULL;
          bool ASCIIFoldingFilter::live$ = false;

          jclass ASCIIFoldingFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_a19d9eb9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_foldToASCII_ec6430f4] = env->getMethodID(cls, "foldToASCII", "([CI)V");
              mids$[mid_foldToASCII_8c28d06f] = env->getStaticMethodID(cls, "foldToASCII", "([CI[CII)I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isPreserveOriginal_54c6a16a] = env->getMethodID(cls, "isPreserveOriginal", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ASCIIFoldingFilter::ASCIIFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          ASCIIFoldingFilter::ASCIIFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_a19d9eb9, a0.this$, a1)) {}

          void ASCIIFoldingFilter::foldToASCII(const JArray< jchar > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_foldToASCII_ec6430f4], a0.this$, a1);
          }

          jint ASCIIFoldingFilter::foldToASCII(const JArray< jchar > & a0, jint a1, const JArray< jchar > & a2, jint a3, jint a4)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_foldToASCII_8c28d06f], a0.this$, a1, a2.this$, a3, a4);
          }

          jboolean ASCIIFoldingFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          jboolean ASCIIFoldingFilter::isPreserveOriginal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPreserveOriginal_54c6a16a]);
          }

          void ASCIIFoldingFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ASCIIFoldingFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ASCIIFoldingFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ASCIIFoldingFilter_init_(t_ASCIIFoldingFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ASCIIFoldingFilter_foldToASCII(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_foldToASCII_(PyTypeObject *type, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_incrementToken(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_isPreserveOriginal(t_ASCIIFoldingFilter *self);
          static PyObject *t_ASCIIFoldingFilter_reset(t_ASCIIFoldingFilter *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilter_get__preserveOriginal(t_ASCIIFoldingFilter *self, void *data);
          static PyGetSetDef t_ASCIIFoldingFilter__fields_[] = {
            DECLARE_GET_FIELD(t_ASCIIFoldingFilter, preserveOriginal),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ASCIIFoldingFilter__methods_[] = {
            DECLARE_METHOD(t_ASCIIFoldingFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, foldToASCII, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, foldToASCII_, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, isPreserveOriginal, METH_NOARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ASCIIFoldingFilter, t_ASCIIFoldingFilter, ::org::apache::lucene::analysis::TokenFilter, ASCIIFoldingFilter, t_ASCIIFoldingFilter_init_, 0, 0, t_ASCIIFoldingFilter__fields_, 0, 0);

          void t_ASCIIFoldingFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ASCIIFoldingFilter), module, "ASCIIFoldingFilter", 0);
          }

          void t_ASCIIFoldingFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilter).tp_dict, "class_", make_descriptor(ASCIIFoldingFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilter).tp_dict, "wrapfn_", make_descriptor(t_ASCIIFoldingFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ASCIIFoldingFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ASCIIFoldingFilter::initializeClass, 1)))
              return NULL;
            return t_ASCIIFoldingFilter::wrap_Object(ASCIIFoldingFilter(((t_ASCIIFoldingFilter *) arg)->object.this$));
          }
          static PyObject *t_ASCIIFoldingFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ASCIIFoldingFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ASCIIFoldingFilter_init_(t_ASCIIFoldingFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ASCIIFoldingFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = ASCIIFoldingFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                ASCIIFoldingFilter object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ASCIIFoldingFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ASCIIFoldingFilter_foldToASCII(t_ASCIIFoldingFilter *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.foldToASCII(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "foldToASCII", args);
            return NULL;
          }

          static PyObject *t_ASCIIFoldingFilter_foldToASCII_(PyTypeObject *type, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            JArray< jchar > a2((jobject) NULL);
            jint a3;
            jint a4;
            jint result;

            if (!parseArgs(args, "[CI[CII", &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter::foldToASCII(a0, a1, a2, a3, a4));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "foldToASCII_", args);
            return NULL;
          }

          static PyObject *t_ASCIIFoldingFilter_incrementToken(t_ASCIIFoldingFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ASCIIFoldingFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilter_isPreserveOriginal(t_ASCIIFoldingFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPreserveOriginal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ASCIIFoldingFilter_reset(t_ASCIIFoldingFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ASCIIFoldingFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilter_get__preserveOriginal(t_ASCIIFoldingFilter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPreserveOriginal());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue.h"
#include "org/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndFloatQueue::class$ = NULL;
        jmethodID *TopOrdAndFloatQueue::mids$ = NULL;
        bool TopOrdAndFloatQueue::live$ = false;

        jclass TopOrdAndFloatQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndFloatQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_lessThan_e2d62086] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue;Lorg/apache/lucene/facet/TopOrdAndFloatQueue$OrdAndValue;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndFloatQueue::TopOrdAndFloatQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndFloatQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndFloatQueue_of_(t_TopOrdAndFloatQueue *self, PyObject *args);
        static int t_TopOrdAndFloatQueue_init_(t_TopOrdAndFloatQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndFloatQueue_get__parameters_(t_TopOrdAndFloatQueue *self, void *data);
        static PyGetSetDef t_TopOrdAndFloatQueue__fields_[] = {
          DECLARE_GET_FIELD(t_TopOrdAndFloatQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndFloatQueue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndFloatQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndFloatQueue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndFloatQueue, t_TopOrdAndFloatQueue, ::org::apache::lucene::util::PriorityQueue, TopOrdAndFloatQueue, t_TopOrdAndFloatQueue_init_, 0, 0, t_TopOrdAndFloatQueue__fields_, 0, 0);
        PyObject *t_TopOrdAndFloatQueue::wrap_Object(const TopOrdAndFloatQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue *self = (t_TopOrdAndFloatQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndFloatQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndFloatQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndFloatQueue *self = (t_TopOrdAndFloatQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndFloatQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndFloatQueue), module, "TopOrdAndFloatQueue", 0);
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "OrdAndValue", make_descriptor(&PY_TYPE(TopOrdAndFloatQueue$OrdAndValue)));
        }

        void t_TopOrdAndFloatQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "class_", make_descriptor(TopOrdAndFloatQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndFloatQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndFloatQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndFloatQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndFloatQueue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndFloatQueue::wrap_Object(TopOrdAndFloatQueue(((t_TopOrdAndFloatQueue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndFloatQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndFloatQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndFloatQueue_of_(t_TopOrdAndFloatQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndFloatQueue_init_(t_TopOrdAndFloatQueue *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopOrdAndFloatQueue object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopOrdAndFloatQueue(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndFloatQueue$OrdAndValue);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_TopOrdAndFloatQueue_get__parameters_(t_TopOrdAndFloatQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsQueryFilter::class$ = NULL;
          jmethodID *CommonGramsQueryFilter::mids$ = NULL;
          bool CommonGramsQueryFilter::live$ = false;

          jclass CommonGramsQueryFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_625c9356] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/commongrams/CommonGramsFilter;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_isGramType_54c6a16a] = env->getMethodID(cls, "isGramType", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsQueryFilter::CommonGramsQueryFilter(const ::org::apache::lucene::analysis::commongrams::CommonGramsFilter & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_625c9356, a0.this$)) {}

          jboolean CommonGramsQueryFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          jboolean CommonGramsQueryFilter::isGramType() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isGramType_54c6a16a]);
          }

          void CommonGramsQueryFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsQueryFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsQueryFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsQueryFilter_init_(t_CommonGramsQueryFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsQueryFilter_incrementToken(t_CommonGramsQueryFilter *self, PyObject *args);
          static PyObject *t_CommonGramsQueryFilter_isGramType(t_CommonGramsQueryFilter *self);
          static PyObject *t_CommonGramsQueryFilter_reset(t_CommonGramsQueryFilter *self, PyObject *args);
          static PyObject *t_CommonGramsQueryFilter_get__gramType(t_CommonGramsQueryFilter *self, void *data);
          static PyGetSetDef t_CommonGramsQueryFilter__fields_[] = {
            DECLARE_GET_FIELD(t_CommonGramsQueryFilter, gramType),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CommonGramsQueryFilter__methods_[] = {
            DECLARE_METHOD(t_CommonGramsQueryFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, isGramType, METH_NOARGS),
            DECLARE_METHOD(t_CommonGramsQueryFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsQueryFilter, t_CommonGramsQueryFilter, ::org::apache::lucene::analysis::TokenFilter, CommonGramsQueryFilter, t_CommonGramsQueryFilter_init_, 0, 0, t_CommonGramsQueryFilter__fields_, 0, 0);

          void t_CommonGramsQueryFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsQueryFilter), module, "CommonGramsQueryFilter", 0);
          }

          void t_CommonGramsQueryFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilter).tp_dict, "class_", make_descriptor(CommonGramsQueryFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilter).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsQueryFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsQueryFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CommonGramsQueryFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsQueryFilter::initializeClass, 1)))
              return NULL;
            return t_CommonGramsQueryFilter::wrap_Object(CommonGramsQueryFilter(((t_CommonGramsQueryFilter *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsQueryFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsQueryFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsQueryFilter_init_(t_CommonGramsQueryFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::commongrams::CommonGramsFilter a0((jobject) NULL);
            CommonGramsQueryFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::commongrams::CommonGramsFilter::initializeClass, &a0))
            {
              INT_CALL(object = CommonGramsQueryFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsQueryFilter_incrementToken(t_CommonGramsQueryFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CommonGramsQueryFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CommonGramsQueryFilter_isGramType(t_CommonGramsQueryFilter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isGramType());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_CommonGramsQueryFilter_reset(t_CommonGramsQueryFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CommonGramsQueryFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_CommonGramsQueryFilter_get__gramType(t_CommonGramsQueryFilter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isGramType());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TypeAttribute::class$ = NULL;
          jmethodID *TypeAttribute::mids$ = NULL;
          bool TypeAttribute::live$ = false;
          ::java::lang::String *TypeAttribute::DEFAULT_TYPE = NULL;

          jclass TypeAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TypeAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_setType_5fdc3f48] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_type_14c7b5c5] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TypeAttribute::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_5fdc3f48], a0.this$);
          }

          ::java::lang::String TypeAttribute::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TypeAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttribute_setType(t_TypeAttribute *self, PyObject *arg);
          static PyObject *t_TypeAttribute_type(t_TypeAttribute *self);

          static PyMethodDef t_TypeAttribute__methods_[] = {
            DECLARE_METHOD(t_TypeAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttribute, setType, METH_O),
            DECLARE_METHOD(t_TypeAttribute, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAttribute, t_TypeAttribute, ::org::apache::lucene::util::Attribute, TypeAttribute, abstract_init, 0, 0, 0, 0, 0);

          void t_TypeAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAttribute), module, "TypeAttribute", 0);
          }

          void t_TypeAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "class_", make_descriptor(TypeAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "wrapfn_", make_descriptor(t_TypeAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TypeAttribute::initializeClass);
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "DEFAULT_TYPE", make_descriptor(j2p(*TypeAttribute::DEFAULT_TYPE)));
          }

          static PyObject *t_TypeAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAttribute::initializeClass, 1)))
              return NULL;
            return t_TypeAttribute::wrap_Object(TypeAttribute(((t_TypeAttribute *) arg)->object.this$));
          }
          static PyObject *t_TypeAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TypeAttribute_setType(t_TypeAttribute *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_TypeAttribute_type(t_TypeAttribute *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/DefaultEncoder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *DefaultEncoder::class$ = NULL;
          jmethodID *DefaultEncoder::mids$ = NULL;
          bool DefaultEncoder::live$ = false;

          jclass DefaultEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/DefaultEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encodeText_97a5258f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultEncoder::DefaultEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String DefaultEncoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_DefaultEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultEncoder_init_(t_DefaultEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultEncoder_encodeText(t_DefaultEncoder *self, PyObject *arg);

          static PyMethodDef t_DefaultEncoder__methods_[] = {
            DECLARE_METHOD(t_DefaultEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultEncoder, encodeText, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultEncoder, t_DefaultEncoder, ::java::lang::Object, DefaultEncoder, t_DefaultEncoder_init_, 0, 0, 0, 0, 0);

          void t_DefaultEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultEncoder), module, "DefaultEncoder", 0);
          }

          void t_DefaultEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultEncoder).tp_dict, "class_", make_descriptor(DefaultEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultEncoder).tp_dict, "wrapfn_", make_descriptor(t_DefaultEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultEncoder::initializeClass, 1)))
              return NULL;
            return t_DefaultEncoder::wrap_Object(DefaultEncoder(((t_DefaultEncoder *) arg)->object.this$));
          }
          static PyObject *t_DefaultEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultEncoder_init_(t_DefaultEncoder *self, PyObject *args, PyObject *kwds)
          {
            DefaultEncoder object((jobject) NULL);

            INT_CALL(object = DefaultEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_DefaultEncoder_encodeText(t_DefaultEncoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/TokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/ClassLoader.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *TokenizerFactory::class$ = NULL;
          jmethodID *TokenizerFactory::mids$ = NULL;
          bool TokenizerFactory::live$ = false;

          jclass TokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/TokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableTokenizers_03e99967] = env->getStaticMethodID(cls, "availableTokenizers", "()Ljava/util/Set;");
              mids$[mid_create_02e4fecd] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");
              mids$[mid_forName_9ff0ca4e] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/TokenizerFactory;");
              mids$[mid_lookupClass_7d663d97] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_reloadTokenizers_9110048d] = env->getStaticMethodID(cls, "reloadTokenizers", "(Ljava/lang/ClassLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set TokenizerFactory::availableTokenizers()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableTokenizers_03e99967]));
          }

          ::org::apache::lucene::analysis::Tokenizer TokenizerFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_02e4fecd], a0.this$));
          }

          ::org::apache::lucene::analysis::Tokenizer TokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }

          TokenizerFactory TokenizerFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return TokenizerFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_9ff0ca4e], a0.this$, a1.this$));
          }

          ::java::lang::Class TokenizerFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_7d663d97], a0.this$));
          }

          void TokenizerFactory::reloadTokenizers(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadTokenizers_9110048d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_TokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_availableTokenizers(PyTypeObject *type);
          static PyObject *t_TokenizerFactory_create(t_TokenizerFactory *self, PyObject *args);
          static PyObject *t_TokenizerFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenizerFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_reloadTokenizers(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_TokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_TokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, availableTokenizers, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TokenizerFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, reloadTokenizers, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenizerFactory, t_TokenizerFactory, ::org::apache::lucene::analysis::util::AbstractAnalysisFactory, TokenizerFactory, abstract_init, 0, 0, 0, 0, 0);

          void t_TokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenizerFactory), module, "TokenizerFactory", 0);
          }

          void t_TokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenizerFactory).tp_dict, "class_", make_descriptor(TokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_TokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_TokenizerFactory::wrap_Object(TokenizerFactory(((t_TokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TokenizerFactory_availableTokenizers(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::availableTokenizers());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TokenizerFactory_create(t_TokenizerFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.create(a0));
                  return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.create(a0, a1));
                  return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "create", args);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            TokenizerFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::forName(a0, a1));
              return t_TokenizerFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_reloadTokenizers(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::TokenizerFactory::reloadTokenizers(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadTokenizers", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46FieldInfosFormat::class$ = NULL;
          jmethodID *Lucene46FieldInfosFormat::mids$ = NULL;
          bool Lucene46FieldInfosFormat::live$ = false;

          jclass Lucene46FieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46FieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
              mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46FieldInfosFormat::Lucene46FieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldInfosReader Lucene46FieldInfosFormat::getFieldInfosReader() const
          {
            return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
          }

          ::org::apache::lucene::codecs::FieldInfosWriter Lucene46FieldInfosFormat::getFieldInfosWriter() const
          {
            return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46FieldInfosFormat_init_(t_Lucene46FieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosReader(t_Lucene46FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosWriter(t_Lucene46FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosReader(t_Lucene46FieldInfosFormat *self, void *data);
          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosWriter(t_Lucene46FieldInfosFormat *self, void *data);
          static PyGetSetDef t_Lucene46FieldInfosFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene46FieldInfosFormat, fieldInfosReader),
            DECLARE_GET_FIELD(t_Lucene46FieldInfosFormat, fieldInfosWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene46FieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, getFieldInfosReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46FieldInfosFormat, getFieldInfosWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46FieldInfosFormat, t_Lucene46FieldInfosFormat, ::org::apache::lucene::codecs::FieldInfosFormat, Lucene46FieldInfosFormat, t_Lucene46FieldInfosFormat_init_, 0, 0, t_Lucene46FieldInfosFormat__fields_, 0, 0);

          void t_Lucene46FieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46FieldInfosFormat), module, "Lucene46FieldInfosFormat", 0);
          }

          void t_Lucene46FieldInfosFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46FieldInfosFormat).tp_dict, "class_", make_descriptor(Lucene46FieldInfosFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene46FieldInfosFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46FieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene46FieldInfosFormat::wrap_Object(Lucene46FieldInfosFormat(((t_Lucene46FieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene46FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46FieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46FieldInfosFormat_init_(t_Lucene46FieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene46FieldInfosFormat object((jobject) NULL);

            INT_CALL(object = Lucene46FieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosReader(t_Lucene46FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosReader());
              return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46FieldInfosFormat), (PyObject *) self, "getFieldInfosReader", args, 2);
          }

          static PyObject *t_Lucene46FieldInfosFormat_getFieldInfosWriter(t_Lucene46FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosWriter());
              return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46FieldInfosFormat), (PyObject *) self, "getFieldInfosWriter", args, 2);
          }

          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosReader(t_Lucene46FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosReader());
            return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
          }

          static PyObject *t_Lucene46FieldInfosFormat_get__fieldInfosWriter(t_Lucene46FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosWriter());
            return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/FlagsAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *FlagsAttributeImpl::class$ = NULL;
          jmethodID *FlagsAttributeImpl::mids$ = NULL;
          bool FlagsAttributeImpl::live$ = false;

          jclass FlagsAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/FlagsAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getFlags_54c6a179] = env->getMethodID(cls, "getFlags", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setFlags_39c7bd3c] = env->getMethodID(cls, "setFlags", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FlagsAttributeImpl::FlagsAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void FlagsAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void FlagsAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean FlagsAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FlagsAttributeImpl::getFlags() const
          {
            return env->callIntMethod(this$, mids$[mid_getFlags_54c6a179]);
          }

          jint FlagsAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void FlagsAttributeImpl::setFlags(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFlags_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_FlagsAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FlagsAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FlagsAttributeImpl_init_(t_FlagsAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FlagsAttributeImpl_clear(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_copyTo(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_equals(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_getFlags(t_FlagsAttributeImpl *self);
          static PyObject *t_FlagsAttributeImpl_hashCode(t_FlagsAttributeImpl *self, PyObject *args);
          static PyObject *t_FlagsAttributeImpl_setFlags(t_FlagsAttributeImpl *self, PyObject *arg);
          static PyObject *t_FlagsAttributeImpl_get__flags(t_FlagsAttributeImpl *self, void *data);
          static int t_FlagsAttributeImpl_set__flags(t_FlagsAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_FlagsAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_FlagsAttributeImpl, flags),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FlagsAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_FlagsAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FlagsAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, getFlags, METH_NOARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FlagsAttributeImpl, setFlags, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FlagsAttributeImpl, t_FlagsAttributeImpl, ::org::apache::lucene::util::AttributeImpl, FlagsAttributeImpl, t_FlagsAttributeImpl_init_, 0, 0, t_FlagsAttributeImpl__fields_, 0, 0);

          void t_FlagsAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(FlagsAttributeImpl), module, "FlagsAttributeImpl", 0);
          }

          void t_FlagsAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FlagsAttributeImpl).tp_dict, "class_", make_descriptor(FlagsAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FlagsAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_FlagsAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FlagsAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FlagsAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FlagsAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_FlagsAttributeImpl::wrap_Object(FlagsAttributeImpl(((t_FlagsAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_FlagsAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FlagsAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FlagsAttributeImpl_init_(t_FlagsAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            FlagsAttributeImpl object((jobject) NULL);

            INT_CALL(object = FlagsAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_FlagsAttributeImpl_clear(t_FlagsAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_copyTo(t_FlagsAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_equals(t_FlagsAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_getFlags(t_FlagsAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getFlags());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FlagsAttributeImpl_hashCode(t_FlagsAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FlagsAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FlagsAttributeImpl_setFlags(t_FlagsAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setFlags(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFlags", arg);
            return NULL;
          }

          static PyObject *t_FlagsAttributeImpl_get__flags(t_FlagsAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getFlags());
            return PyInt_FromLong((long) value);
          }
          static int t_FlagsAttributeImpl_set__flags(t_FlagsAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setFlags(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "flags", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/StringWriter.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/StringBuffer.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *StringWriter::class$ = NULL;
    jmethodID *StringWriter::mids$ = NULL;
    bool StringWriter::live$ = false;

    jclass StringWriter::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/StringWriter");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_append_3aee6342] = env->getMethodID(cls, "append", "(C)Ljava/io/StringWriter;");
        mids$[mid_append_e2d4acee] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/StringWriter;");
        mids$[mid_append_199526fa] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/StringWriter;");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_getBuffer_d54172a5] = env->getMethodID(cls, "getBuffer", "()Ljava/lang/StringBuffer;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");
        mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    StringWriter::StringWriter() : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    StringWriter::StringWriter(jint a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    StringWriter StringWriter::append(jchar a0) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_3aee6342], a0));
    }

    StringWriter StringWriter::append(const ::java::lang::CharSequence & a0) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_e2d4acee], a0.this$));
    }

    StringWriter StringWriter::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_199526fa], a0.this$, a1, a2));
    }

    void StringWriter::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void StringWriter::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
    }

    ::java::lang::StringBuffer StringWriter::getBuffer() const
    {
      return ::java::lang::StringBuffer(env->callObjectMethod(this$, mids$[mid_getBuffer_d54172a5]));
    }

    ::java::lang::String StringWriter::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    void StringWriter::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
    }

    void StringWriter::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
    }

    void StringWriter::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
    }

    void StringWriter::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_StringWriter_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_StringWriter_instance_(PyTypeObject *type, PyObject *arg);
    static int t_StringWriter_init_(t_StringWriter *self, PyObject *args, PyObject *kwds);
    static PyObject *t_StringWriter_append(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_close(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_flush(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_getBuffer(t_StringWriter *self);
    static PyObject *t_StringWriter_toString(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_write(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_get__buffer(t_StringWriter *self, void *data);
    static PyGetSetDef t_StringWriter__fields_[] = {
      DECLARE_GET_FIELD(t_StringWriter, buffer),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_StringWriter__methods_[] = {
      DECLARE_METHOD(t_StringWriter, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringWriter, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringWriter, append, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, close, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, flush, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, getBuffer, METH_NOARGS),
      DECLARE_METHOD(t_StringWriter, toString, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(StringWriter, t_StringWriter, ::java::io::Writer, StringWriter, t_StringWriter_init_, 0, 0, t_StringWriter__fields_, 0, 0);

    void t_StringWriter::install(PyObject *module)
    {
      installType(&PY_TYPE(StringWriter), module, "StringWriter", 0);
    }

    void t_StringWriter::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "class_", make_descriptor(StringWriter::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "wrapfn_", make_descriptor(t_StringWriter::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_StringWriter_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, StringWriter::initializeClass, 1)))
        return NULL;
      return t_StringWriter::wrap_Object(StringWriter(((t_StringWriter *) arg)->object.this$));
    }
    static PyObject *t_StringWriter_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, StringWriter::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_StringWriter_init_(t_StringWriter *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          StringWriter object((jobject) NULL);

          INT_CALL(object = StringWriter());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          jint a0;
          StringWriter object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = StringWriter(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_StringWriter_append(t_StringWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_StringWriter::wrap_Object(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_StringWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_StringWriter::wrap_Object(result);
          }
        }
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "append", args, 2);
    }

    static PyObject *t_StringWriter_close(t_StringWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_StringWriter_flush(t_StringWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.flush());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "flush", args, 2);
    }

    static PyObject *t_StringWriter_getBuffer(t_StringWriter *self)
    {
      ::java::lang::StringBuffer result((jobject) NULL);
      OBJ_CALL(result = self->object.getBuffer());
      return ::java::lang::t_StringBuffer::wrap_Object(result);
    }

    static PyObject *t_StringWriter_toString(t_StringWriter *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_StringWriter_write(t_StringWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "write", args, 2);
    }

    static PyObject *t_StringWriter_get__buffer(t_StringWriter *self, void *data)
    {
      ::java::lang::StringBuffer value((jobject) NULL);
      OBJ_CALL(value = self->object.getBuffer());
      return ::java::lang::t_StringBuffer::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldsProducer::class$ = NULL;
        jmethodID *FieldsProducer::mids$ = NULL;
        bool FieldsProducer::live$ = false;

        jclass FieldsProducer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldsProducer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FieldsProducer::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void FieldsProducer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldsProducer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsProducer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsProducer_checkIntegrity(t_FieldsProducer *self);
        static PyObject *t_FieldsProducer_close(t_FieldsProducer *self);

        static PyMethodDef t_FieldsProducer__methods_[] = {
          DECLARE_METHOD(t_FieldsProducer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsProducer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsProducer, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_FieldsProducer, close, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldsProducer, t_FieldsProducer, ::org::apache::lucene::index::Fields, FieldsProducer, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldsProducer::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldsProducer), module, "FieldsProducer", 0);
        }

        void t_FieldsProducer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldsProducer).tp_dict, "class_", make_descriptor(FieldsProducer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldsProducer).tp_dict, "wrapfn_", make_descriptor(t_FieldsProducer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldsProducer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldsProducer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldsProducer::initializeClass, 1)))
            return NULL;
          return t_FieldsProducer::wrap_Object(FieldsProducer(((t_FieldsProducer *) arg)->object.this$));
        }
        static PyObject *t_FieldsProducer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldsProducer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldsProducer_checkIntegrity(t_FieldsProducer *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldsProducer_close(t_FieldsProducer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizerImpl::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizerImpl::mids$ = NULL;
          bool UAX29URLEmailTokenizerImpl::live$ = false;
          jint UAX29URLEmailTokenizerImpl::AVOID_BAD_URL = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::EMAIL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::HANGUL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::HIRAGANA_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::IDEOGRAPHIC_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::KATAKANA_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::NUMERIC_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::URL_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::WORD_TYPE = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::YYEOF = (jint) 0;
          jint UAX29URLEmailTokenizerImpl::YYINITIAL = (jint) 0;

          jclass UAX29URLEmailTokenizerImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
              mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
              mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
              mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
              mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
              mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
              mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
              mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
              mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
              mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
              mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              AVOID_BAD_URL = env->getStaticIntField(cls, "AVOID_BAD_URL");
              EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
              HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
              HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
              IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
              KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
              NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
              SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
              URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
              WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
              YYEOF = env->getStaticIntField(cls, "YYEOF");
              YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizerImpl::UAX29URLEmailTokenizerImpl(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jint UAX29URLEmailTokenizerImpl::getNextToken() const
          {
            return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
          }

          void UAX29URLEmailTokenizerImpl::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
          }

          void UAX29URLEmailTokenizerImpl::yybegin(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
          }

          jint UAX29URLEmailTokenizerImpl::yychar() const
          {
            return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
          }

          jchar UAX29URLEmailTokenizerImpl::yycharat(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
          }

          void UAX29URLEmailTokenizerImpl::yyclose() const
          {
            env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
          }

          jint UAX29URLEmailTokenizerImpl::yylength() const
          {
            return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
          }

          void UAX29URLEmailTokenizerImpl::yypushback(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
          }

          void UAX29URLEmailTokenizerImpl::yyreset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
          }

          jint UAX29URLEmailTokenizerImpl::yystate() const
          {
            return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
          }

          ::java::lang::String UAX29URLEmailTokenizerImpl::yytext() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizerImpl_init_(t_UAX29URLEmailTokenizerImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizerImpl_getNextToken(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_getText(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yybegin(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yychar(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yycharat(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yyclose(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yylength(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yypushback(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yyreset(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yystate(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_yytext(t_UAX29URLEmailTokenizerImpl *self);
          static PyObject *t_UAX29URLEmailTokenizerImpl_get__nextToken(t_UAX29URLEmailTokenizerImpl *self, void *data);
          static PyGetSetDef t_UAX29URLEmailTokenizerImpl__fields_[] = {
            DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailTokenizerImpl__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, getText, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yybegin, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yychar, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yycharat, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yyclose, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yylength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yypushback, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yyreset, METH_O),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yystate, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl, yytext, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailTokenizerImpl, t_UAX29URLEmailTokenizerImpl, ::java::lang::Object, UAX29URLEmailTokenizerImpl, t_UAX29URLEmailTokenizerImpl_init_, 0, 0, t_UAX29URLEmailTokenizerImpl__fields_, 0, 0);

          void t_UAX29URLEmailTokenizerImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizerImpl), module, "UAX29URLEmailTokenizerImpl", 0);
          }

          void t_UAX29URLEmailTokenizerImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailTokenizerImpl::initializeClass);
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "AVOID_BAD_URL", make_descriptor(UAX29URLEmailTokenizerImpl::AVOID_BAD_URL));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::EMAIL_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::HANGUL_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::HIRAGANA_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::IDEOGRAPHIC_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::KATAKANA_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::NUMERIC_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::SOUTH_EAST_ASIAN_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::URL_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl::WORD_TYPE));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl::YYEOF));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl::YYINITIAL));
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizerImpl::wrap_Object(UAX29URLEmailTokenizerImpl(((t_UAX29URLEmailTokenizerImpl *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizerImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizerImpl_init_(t_UAX29URLEmailTokenizerImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            UAX29URLEmailTokenizerImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = UAX29URLEmailTokenizerImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_getNextToken(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNextToken());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_getText(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getText", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yybegin(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yybegin(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yychar(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yychar());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yycharat(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.yycharat(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yyclose(t_UAX29URLEmailTokenizerImpl *self)
          {
            OBJ_CALL(self->object.yyclose());
            Py_RETURN_NONE;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yylength(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yylength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yypushback(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yypushback(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yyreset(t_UAX29URLEmailTokenizerImpl *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.yyreset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yystate(t_UAX29URLEmailTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yystate());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_yytext(t_UAX29URLEmailTokenizerImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.yytext());
            return j2p(result);
          }

          static PyObject *t_UAX29URLEmailTokenizerImpl_get__nextToken(t_UAX29URLEmailTokenizerImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNextToken());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "org/apache/lucene/store/FlushInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/MergeInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IOContext::class$ = NULL;
        jmethodID *IOContext::mids$ = NULL;
        jfieldID *IOContext::fids$ = NULL;
        bool IOContext::live$ = false;
        IOContext *IOContext::DEFAULT = NULL;
        IOContext *IOContext::READ = NULL;
        IOContext *IOContext::READONCE = NULL;

        jclass IOContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IOContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_b5b0f361] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/MergeInfo;)V");
            mids$[mid_init$_080fbf4f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/FlushInfo;)V");
            mids$[mid_init$_caa57ead] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IOContext$Context;)V");
            mids$[mid_init$_617520cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IOContext;Z)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext$Context;");
            fids$[fid_flushInfo] = env->getFieldID(cls, "flushInfo", "Lorg/apache/lucene/store/FlushInfo;");
            fids$[fid_mergeInfo] = env->getFieldID(cls, "mergeInfo", "Lorg/apache/lucene/store/MergeInfo;");
            fids$[fid_readOnce] = env->getFieldID(cls, "readOnce", "Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT = new IOContext(env->getStaticObjectField(cls, "DEFAULT", "Lorg/apache/lucene/store/IOContext;"));
            READ = new IOContext(env->getStaticObjectField(cls, "READ", "Lorg/apache/lucene/store/IOContext;"));
            READONCE = new IOContext(env->getStaticObjectField(cls, "READONCE", "Lorg/apache/lucene/store/IOContext;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IOContext::IOContext() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::MergeInfo & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b5b0f361, a0.this$)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::FlushInfo & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_080fbf4f, a0.this$)) {}

        IOContext::IOContext(const ::org::apache::lucene::store::IOContext$Context & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_caa57ead, a0.this$)) {}

        IOContext::IOContext(const IOContext & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_617520cb, a0.this$, a1)) {}

        jboolean IOContext::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint IOContext::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String IOContext::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::org::apache::lucene::store::IOContext$Context IOContext::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext$Context(env->getObjectField(this$, fids$[fid_context]));
        }

        ::org::apache::lucene::store::FlushInfo IOContext::_get_flushInfo() const
        {
          return ::org::apache::lucene::store::FlushInfo(env->getObjectField(this$, fids$[fid_flushInfo]));
        }

        ::org::apache::lucene::store::MergeInfo IOContext::_get_mergeInfo() const
        {
          return ::org::apache::lucene::store::MergeInfo(env->getObjectField(this$, fids$[fid_mergeInfo]));
        }

        jboolean IOContext::_get_readOnce() const
        {
          return env->getBooleanField(this$, fids$[fid_readOnce]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IOContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IOContext_init_(t_IOContext *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IOContext_equals(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_hashCode(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_toString(t_IOContext *self, PyObject *args);
        static PyObject *t_IOContext_get__context(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__flushInfo(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__mergeInfo(t_IOContext *self, void *data);
        static PyObject *t_IOContext_get__readOnce(t_IOContext *self, void *data);

        static PyGetSetDef t_IOContext__fields_[] = {
          DECLARE_GET_FIELD(t_IOContext, context),
          DECLARE_GET_FIELD(t_IOContext, flushInfo),
          DECLARE_GET_FIELD(t_IOContext, mergeInfo),
          DECLARE_GET_FIELD(t_IOContext, readOnce),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IOContext__methods_[] = {
          DECLARE_METHOD(t_IOContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext, equals, METH_VARARGS),
          DECLARE_METHOD(t_IOContext, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IOContext, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IOContext, t_IOContext, ::java::lang::Object, IOContext, t_IOContext_init_, 0, 0, t_IOContext__fields_, 0, 0);

        void t_IOContext::install(PyObject *module)
        {
          installType(&PY_TYPE(IOContext), module, "IOContext", 0);
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "Context", make_descriptor(&PY_TYPE(IOContext$Context)));
        }

        void t_IOContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "class_", make_descriptor(IOContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "wrapfn_", make_descriptor(t_IOContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IOContext::initializeClass);
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "DEFAULT", make_descriptor(t_IOContext::wrap_Object(*IOContext::DEFAULT)));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "READ", make_descriptor(t_IOContext::wrap_Object(*IOContext::READ)));
          PyDict_SetItemString(PY_TYPE(IOContext).tp_dict, "READONCE", make_descriptor(t_IOContext::wrap_Object(*IOContext::READONCE)));
        }

        static PyObject *t_IOContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOContext::initializeClass, 1)))
            return NULL;
          return t_IOContext::wrap_Object(IOContext(((t_IOContext *) arg)->object.this$));
        }
        static PyObject *t_IOContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IOContext_init_(t_IOContext *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              IOContext object((jobject) NULL);

              INT_CALL(object = IOContext());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::org::apache::lucene::store::MergeInfo a0((jobject) NULL);
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::MergeInfo::initializeClass, &a0))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::FlushInfo a0((jobject) NULL);
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::FlushInfo::initializeClass, &a0))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::store::IOContext$Context a0((jobject) NULL);
              PyTypeObject **p0;
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "K", ::org::apache::lucene::store::IOContext$Context::initializeClass, &a0, &p0, ::org::apache::lucene::store::t_IOContext$Context::parameters_))
              {
                INT_CALL(object = IOContext(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              IOContext a0((jobject) NULL);
              jboolean a1;
              IOContext object((jobject) NULL);

              if (!parseArgs(args, "kZ", IOContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IOContext(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IOContext_equals(t_IOContext *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IOContext), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IOContext_hashCode(t_IOContext *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IOContext), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IOContext_toString(t_IOContext *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(IOContext), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_IOContext_get__context(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::IOContext$Context value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext$Context::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__flushInfo(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::FlushInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_flushInfo());
          return ::org::apache::lucene::store::t_FlushInfo::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__mergeInfo(t_IOContext *self, void *data)
        {
          ::org::apache::lucene::store::MergeInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mergeInfo());
          return ::org::apache::lucene::store::t_MergeInfo::wrap_Object(value);
        }

        static PyObject *t_IOContext_get__readOnce(t_IOContext *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_readOnce());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *IOException::class$ = NULL;
    jmethodID *IOException::mids$ = NULL;
    bool IOException::live$ = false;

    jclass IOException::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/IOException");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    IOException::IOException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    IOException::IOException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

    IOException::IOException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    IOException::IOException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_IOException_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_IOException_instance_(PyTypeObject *type, PyObject *arg);
    static int t_IOException_init_(t_IOException *self, PyObject *args, PyObject *kwds);

    static PyMethodDef t_IOException__methods_[] = {
      DECLARE_METHOD(t_IOException, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_IOException, instance_, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(IOException, t_IOException, ::java::lang::Exception, IOException, t_IOException_init_, 0, 0, 0, 0, 0);

    void t_IOException::install(PyObject *module)
    {
      installType(&PY_TYPE(IOException), module, "IOException", 0);
    }

    void t_IOException::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "class_", make_descriptor(IOException::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "wrapfn_", make_descriptor(t_IOException::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_IOException_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, IOException::initializeClass, 1)))
        return NULL;
      return t_IOException::wrap_Object(IOException(((t_IOException *) arg)->object.this$));
    }
    static PyObject *t_IOException_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, IOException::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_IOException_init_(t_IOException *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          IOException object((jobject) NULL);

          INT_CALL(object = IOException());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::Throwable a0((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
          {
            INT_CALL(object = IOException(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = IOException(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Throwable a1((jobject) NULL);
          IOException object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = IOException(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder$Arc.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder$Arc::class$ = NULL;
          jmethodID *Builder$Arc::mids$ = NULL;
          jfieldID *Builder$Arc::fids$ = NULL;
          bool Builder$Arc::live$ = false;

          jclass Builder$Arc::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder$Arc");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_isFinal] = env->getFieldID(cls, "isFinal", "Z");
              fids$[fid_label] = env->getFieldID(cls, "label", "I");
              fids$[fid_nextFinalOutput] = env->getFieldID(cls, "nextFinalOutput", "Ljava/lang/Object;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder$Arc::Builder$Arc() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean Builder$Arc::_get_isFinal() const
          {
            return env->getBooleanField(this$, fids$[fid_isFinal]);
          }

          void Builder$Arc::_set_isFinal(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_isFinal], a0);
          }

          jint Builder$Arc::_get_label() const
          {
            return env->getIntField(this$, fids$[fid_label]);
          }

          void Builder$Arc::_set_label(jint a0) const
          {
            env->setIntField(this$, fids$[fid_label], a0);
          }

          ::java::lang::Object Builder$Arc::_get_nextFinalOutput() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_nextFinalOutput]));
          }

          void Builder$Arc::_set_nextFinalOutput(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_nextFinalOutput], a0.this$);
          }

          ::java::lang::Object Builder$Arc::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void Builder$Arc::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder$Arc_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$Arc_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$Arc_of_(t_Builder$Arc *self, PyObject *args);
          static int t_Builder$Arc_init_(t_Builder$Arc *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder$Arc_get__isFinal(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__isFinal(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__label(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__label(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__nextFinalOutput(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__nextFinalOutput(t_Builder$Arc *self, PyObject *arg, void *data);
          static PyObject *t_Builder$Arc_get__output(t_Builder$Arc *self, void *data);
          static int t_Builder$Arc_set__output(t_Builder$Arc *self, PyObject *arg, void *data);

          static PyObject *t_Builder$Arc_get__parameters_(t_Builder$Arc *self, void *data);
          static PyGetSetDef t_Builder$Arc__fields_[] = {
            DECLARE_GETSET_FIELD(t_Builder$Arc, isFinal),
            DECLARE_GETSET_FIELD(t_Builder$Arc, label),
            DECLARE_GETSET_FIELD(t_Builder$Arc, nextFinalOutput),
            DECLARE_GETSET_FIELD(t_Builder$Arc, output),
            DECLARE_GET_FIELD(t_Builder$Arc, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder$Arc__methods_[] = {
            DECLARE_METHOD(t_Builder$Arc, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$Arc, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$Arc, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder$Arc, t_Builder$Arc, ::java::lang::Object, Builder$Arc, t_Builder$Arc_init_, 0, 0, t_Builder$Arc__fields_, 0, 0);
          PyObject *t_Builder$Arc::wrap_Object(const Builder$Arc& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$Arc::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$Arc *self = (t_Builder$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder$Arc::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$Arc::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$Arc *self = (t_Builder$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder$Arc::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder$Arc), module, "Builder$Arc", 0);
          }

          void t_Builder$Arc::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder$Arc).tp_dict, "class_", make_descriptor(Builder$Arc::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder$Arc).tp_dict, "wrapfn_", make_descriptor(t_Builder$Arc::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder$Arc).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder$Arc_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder$Arc::initializeClass, 1)))
              return NULL;
            return t_Builder$Arc::wrap_Object(Builder$Arc(((t_Builder$Arc *) arg)->object.this$));
          }
          static PyObject *t_Builder$Arc_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder$Arc::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder$Arc_of_(t_Builder$Arc *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder$Arc_init_(t_Builder$Arc *self, PyObject *args, PyObject *kwds)
          {
            Builder$Arc object((jobject) NULL);

            INT_CALL(object = Builder$Arc());
            self->object = object;

            return 0;
          }
          static PyObject *t_Builder$Arc_get__parameters_(t_Builder$Arc *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Builder$Arc_get__isFinal(t_Builder$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_isFinal());
            Py_RETURN_BOOL(value);
          }
          static int t_Builder$Arc_set__isFinal(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_isFinal(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "isFinal", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__label(t_Builder$Arc *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_label());
            return PyInt_FromLong((long) value);
          }
          static int t_Builder$Arc_set__label(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_label(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "label", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__nextFinalOutput(t_Builder$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_nextFinalOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$Arc_set__nextFinalOutput(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_nextFinalOutput(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "nextFinalOutput", arg);
            return -1;
          }

          static PyObject *t_Builder$Arc_get__output(t_Builder$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Builder$Arc_set__output(t_Builder$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *BoostQueryNode::class$ = NULL;
              jmethodID *BoostQueryNode::mids$ = NULL;
              bool BoostQueryNode::live$ = false;

              jclass BoostQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/BoostQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_36cea640] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;F)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getValue_54c6a176] = env->getMethodID(cls, "getValue", "()F");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNode::BoostQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jfloat a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_36cea640, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BoostQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode BoostQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              jfloat BoostQueryNode::getValue() const
              {
                return env->callFloatMethod(this$, mids$[mid_getValue_54c6a176]);
              }

              ::java::lang::CharSequence BoostQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String BoostQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_BoostQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNode_init_(t_BoostQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BoostQueryNode_cloneTree(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_getChild(t_BoostQueryNode *self);
              static PyObject *t_BoostQueryNode_getValue(t_BoostQueryNode *self);
              static PyObject *t_BoostQueryNode_toQueryString(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_toString(t_BoostQueryNode *self, PyObject *args);
              static PyObject *t_BoostQueryNode_get__child(t_BoostQueryNode *self, void *data);
              static PyObject *t_BoostQueryNode_get__value(t_BoostQueryNode *self, void *data);
              static PyGetSetDef t_BoostQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_BoostQueryNode, child),
                DECLARE_GET_FIELD(t_BoostQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_BoostQueryNode__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_BoostQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_BoostQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_BoostQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_BoostQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BoostQueryNode, t_BoostQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, BoostQueryNode, t_BoostQueryNode_init_, 0, 0, t_BoostQueryNode__fields_, 0, 0);

              void t_BoostQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNode), module, "BoostQueryNode", 0);
              }

              void t_BoostQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BoostQueryNode).tp_dict, "class_", make_descriptor(BoostQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BoostQueryNode).tp_dict, "wrapfn_", make_descriptor(t_BoostQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BoostQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNode::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNode::wrap_Object(BoostQueryNode(((t_BoostQueryNode *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNode_init_(t_BoostQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jfloat a1;
                BoostQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = BoostQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_BoostQueryNode_cloneTree(t_BoostQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BoostQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_BoostQueryNode_getChild(t_BoostQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_BoostQueryNode_getValue(t_BoostQueryNode *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getValue());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_BoostQueryNode_toQueryString(t_BoostQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(BoostQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_BoostQueryNode_toString(t_BoostQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(BoostQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_BoostQueryNode_get__child(t_BoostQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_BoostQueryNode_get__value(t_BoostQueryNode *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getValue());
                return PyFloat_FromDouble((double) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {

              ::java::lang::Class *QueryConfigHandler::class$ = NULL;
              jmethodID *QueryConfigHandler::mids$ = NULL;
              bool QueryConfigHandler::live$ = false;

              jclass QueryConfigHandler::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_addFieldConfigListener_cafa3927] = env->getMethodID(cls, "addFieldConfigListener", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfigListener;)V");
                  mids$[mid_getFieldConfig_081010e4] = env->getMethodID(cls, "getFieldConfig", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryConfigHandler::QueryConfigHandler() : ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              void QueryConfigHandler::addFieldConfigListener(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_addFieldConfigListener_cafa3927], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig QueryConfigHandler::getFieldConfig(const ::java::lang::String & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig(env->callObjectMethod(this$, mids$[mid_getFieldConfig_081010e4], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace config {
              static PyObject *t_QueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryConfigHandler_init_(t_QueryConfigHandler *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryConfigHandler_addFieldConfigListener(t_QueryConfigHandler *self, PyObject *arg);
              static PyObject *t_QueryConfigHandler_getFieldConfig(t_QueryConfigHandler *self, PyObject *arg);

              static PyMethodDef t_QueryConfigHandler__methods_[] = {
                DECLARE_METHOD(t_QueryConfigHandler, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryConfigHandler, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryConfigHandler, addFieldConfigListener, METH_O),
                DECLARE_METHOD(t_QueryConfigHandler, getFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryConfigHandler, t_QueryConfigHandler, ::org::apache::lucene::queryparser::flexible::core::config::AbstractQueryConfig, QueryConfigHandler, t_QueryConfigHandler_init_, 0, 0, 0, 0, 0);

              void t_QueryConfigHandler::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryConfigHandler), module, "QueryConfigHandler", 0);
              }

              void t_QueryConfigHandler::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryConfigHandler).tp_dict, "class_", make_descriptor(QueryConfigHandler::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryConfigHandler).tp_dict, "wrapfn_", make_descriptor(t_QueryConfigHandler::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryConfigHandler).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryConfigHandler_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryConfigHandler::initializeClass, 1)))
                  return NULL;
                return t_QueryConfigHandler::wrap_Object(QueryConfigHandler(((t_QueryConfigHandler *) arg)->object.this$));
              }
              static PyObject *t_QueryConfigHandler_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryConfigHandler::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryConfigHandler_init_(t_QueryConfigHandler *self, PyObject *args, PyObject *kwds)
              {
                QueryConfigHandler object((jobject) NULL);

                INT_CALL(object = QueryConfigHandler());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryConfigHandler_addFieldConfigListener(t_QueryConfigHandler *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfigListener::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.addFieldConfigListener(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "addFieldConfigListener", arg);
                return NULL;
              }

              static PyObject *t_QueryConfigHandler_getFieldConfig(t_QueryConfigHandler *self, PyObject *arg)
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig result((jobject) NULL);

                if (!parseArg(arg, "s", &a0))
                {
                  OBJ_CALL(result = self->object.getFieldConfig(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::config::t_FieldConfig::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "getFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$FSTPath.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$FSTPath::class$ = NULL;
          jmethodID *Util$FSTPath::mids$ = NULL;
          jfieldID *Util$FSTPath::fids$ = NULL;
          bool Util$FSTPath::live$ = false;

          jclass Util$FSTPath::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$FSTPath");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_24ce56ea] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/IntsRef;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arc] = env->getFieldID(cls, "arc", "Lorg/apache/lucene/util/fst/FST$Arc;");
              fids$[fid_cost] = env->getFieldID(cls, "cost", "Ljava/lang/Object;");
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Util$FSTPath::Util$FSTPath(const ::java::lang::Object & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::IntsRef & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_24ce56ea, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String Util$FSTPath::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::org::apache::lucene::util::fst::FST$Arc Util$FSTPath::_get_arc() const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->getObjectField(this$, fids$[fid_arc]));
          }

          void Util$FSTPath::_set_arc(const ::org::apache::lucene::util::fst::FST$Arc & a0) const
          {
            env->setObjectField(this$, fids$[fid_arc], a0.this$);
          }

          ::java::lang::Object Util$FSTPath::_get_cost() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_cost]));
          }

          void Util$FSTPath::_set_cost(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_cost], a0.this$);
          }

          ::org::apache::lucene::util::IntsRef Util$FSTPath::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$FSTPath_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$FSTPath_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$FSTPath_of_(t_Util$FSTPath *self, PyObject *args);
          static int t_Util$FSTPath_init_(t_Util$FSTPath *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Util$FSTPath_toString(t_Util$FSTPath *self, PyObject *args);
          static PyObject *t_Util$FSTPath_get__arc(t_Util$FSTPath *self, void *data);
          static int t_Util$FSTPath_set__arc(t_Util$FSTPath *self, PyObject *arg, void *data);
          static PyObject *t_Util$FSTPath_get__cost(t_Util$FSTPath *self, void *data);
          static int t_Util$FSTPath_set__cost(t_Util$FSTPath *self, PyObject *arg, void *data);
          static PyObject *t_Util$FSTPath_get__input(t_Util$FSTPath *self, void *data);

          static PyObject *t_Util$FSTPath_get__parameters_(t_Util$FSTPath *self, void *data);
          static PyGetSetDef t_Util$FSTPath__fields_[] = {
            DECLARE_GETSET_FIELD(t_Util$FSTPath, arc),
            DECLARE_GETSET_FIELD(t_Util$FSTPath, cost),
            DECLARE_GET_FIELD(t_Util$FSTPath, input),
            DECLARE_GET_FIELD(t_Util$FSTPath, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$FSTPath__methods_[] = {
            DECLARE_METHOD(t_Util$FSTPath, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$FSTPath, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$FSTPath, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$FSTPath, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$FSTPath, t_Util$FSTPath, ::java::lang::Object, Util$FSTPath, t_Util$FSTPath_init_, 0, 0, t_Util$FSTPath__fields_, 0, 0);
          PyObject *t_Util$FSTPath::wrap_Object(const Util$FSTPath& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$FSTPath::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$FSTPath *self = (t_Util$FSTPath *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$FSTPath::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$FSTPath::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$FSTPath *self = (t_Util$FSTPath *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$FSTPath::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$FSTPath), module, "Util$FSTPath", 0);
          }

          void t_Util$FSTPath::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$FSTPath).tp_dict, "class_", make_descriptor(Util$FSTPath::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$FSTPath).tp_dict, "wrapfn_", make_descriptor(t_Util$FSTPath::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$FSTPath).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$FSTPath_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$FSTPath::initializeClass, 1)))
              return NULL;
            return t_Util$FSTPath::wrap_Object(Util$FSTPath(((t_Util$FSTPath *) arg)->object.this$));
          }
          static PyObject *t_Util$FSTPath_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$FSTPath::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$FSTPath_of_(t_Util$FSTPath *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Util$FSTPath_init_(t_Util$FSTPath *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::IntsRef a2((jobject) NULL);
            Util$FSTPath object((jobject) NULL);

            if (!parseArgs(args, "oKk", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2))
            {
              INT_CALL(object = Util$FSTPath(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Util$FSTPath_toString(t_Util$FSTPath *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Util$FSTPath), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_Util$FSTPath_get__parameters_(t_Util$FSTPath *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$FSTPath_get__arc(t_Util$FSTPath *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
            OBJ_CALL(value = self->object._get_arc());
            return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(value);
          }
          static int t_Util$FSTPath_set__arc(t_Util$FSTPath *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &value))
            {
              INT_CALL(self->object._set_arc(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "arc", arg);
            return -1;
          }

          static PyObject *t_Util$FSTPath_get__cost(t_Util$FSTPath *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_cost());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Util$FSTPath_set__cost(t_Util$FSTPath *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_cost(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "cost", arg);
            return -1;
          }

          static PyObject *t_Util$FSTPath_get__input(t_Util$FSTPath *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanFirstBuilder::class$ = NULL;
            jmethodID *SpanFirstBuilder::mids$ = NULL;
            bool SpanFirstBuilder::live$ = false;

            jclass SpanFirstBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanFirstBuilder::SpanFirstBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanFirstBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanFirstBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanFirstBuilder_init_(t_SpanFirstBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanFirstBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanFirstBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanFirstBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanFirstBuilder, t_SpanFirstBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanFirstBuilder, t_SpanFirstBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanFirstBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanFirstBuilder), module, "SpanFirstBuilder", 0);
            }

            void t_SpanFirstBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanFirstBuilder).tp_dict, "class_", make_descriptor(SpanFirstBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanFirstBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanFirstBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanFirstBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanFirstBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanFirstBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanFirstBuilder::wrap_Object(SpanFirstBuilder(((t_SpanFirstBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanFirstBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanFirstBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanFirstBuilder_init_(t_SpanFirstBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanFirstBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanFirstBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {

          ::java::lang::Class *Lucene3xSegmentInfoReader::class$ = NULL;
          jmethodID *Lucene3xSegmentInfoReader::mids$ = NULL;
          bool Lucene3xSegmentInfoReader::live$ = false;

          jclass Lucene3xSegmentInfoReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");
              mids$[mid_readLegacyInfos_1ebc3dab] = env->getStaticMethodID(cls, "readLegacyInfos", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/IndexInput;I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene3xSegmentInfoReader::Lucene3xSegmentInfoReader() : ::org::apache::lucene::codecs::SegmentInfoReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::index::SegmentInfo Lucene3xSegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
          }

          void Lucene3xSegmentInfoReader::readLegacyInfos(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::store::IndexInput & a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_readLegacyInfos_1ebc3dab], a0.this$, a1.this$, a2.this$, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {
          static PyObject *t_Lucene3xSegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene3xSegmentInfoReader_init_(t_Lucene3xSegmentInfoReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene3xSegmentInfoReader_read(t_Lucene3xSegmentInfoReader *self, PyObject *args);
          static PyObject *t_Lucene3xSegmentInfoReader_readLegacyInfos(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_Lucene3xSegmentInfoReader__methods_[] = {
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, read, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, readLegacyInfos, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene3xSegmentInfoReader, t_Lucene3xSegmentInfoReader, ::org::apache::lucene::codecs::SegmentInfoReader, Lucene3xSegmentInfoReader, t_Lucene3xSegmentInfoReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene3xSegmentInfoReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene3xSegmentInfoReader), module, "Lucene3xSegmentInfoReader", 0);
          }

          void t_Lucene3xSegmentInfoReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoReader).tp_dict, "class_", make_descriptor(Lucene3xSegmentInfoReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene3xSegmentInfoReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene3xSegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene3xSegmentInfoReader::initializeClass, 1)))
              return NULL;
            return t_Lucene3xSegmentInfoReader::wrap_Object(Lucene3xSegmentInfoReader(((t_Lucene3xSegmentInfoReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene3xSegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene3xSegmentInfoReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene3xSegmentInfoReader_init_(t_Lucene3xSegmentInfoReader *self, PyObject *args, PyObject *kwds)
          {
            Lucene3xSegmentInfoReader object((jobject) NULL);

            INT_CALL(object = Lucene3xSegmentInfoReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene3xSegmentInfoReader_read(t_Lucene3xSegmentInfoReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xSegmentInfoReader), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_Lucene3xSegmentInfoReader_readLegacyInfos(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::org::apache::lucene::store::IndexInput a2((jobject) NULL);
            jint a3;

            if (!parseArgs(args, "kkkI", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoReader::readLegacyInfos(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "readLegacyInfos", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiAnalyzer::class$ = NULL;
          jmethodID *ThaiAnalyzer::mids$ = NULL;
          bool ThaiAnalyzer::live$ = false;
          ::java::lang::String *ThaiAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ThaiAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiAnalyzer::ThaiAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ThaiAnalyzer::ThaiAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ThaiAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiAnalyzer_init_(t_ThaiAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ThaiAnalyzer_get__defaultStopSet(t_ThaiAnalyzer *self, void *data);
          static PyGetSetDef t_ThaiAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ThaiAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ThaiAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ThaiAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiAnalyzer, t_ThaiAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ThaiAnalyzer, t_ThaiAnalyzer_init_, 0, 0, t_ThaiAnalyzer__fields_, 0, 0);

          void t_ThaiAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiAnalyzer), module, "ThaiAnalyzer", 0);
          }

          void t_ThaiAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "class_", make_descriptor(ThaiAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ThaiAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ThaiAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ThaiAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ThaiAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ThaiAnalyzer::wrap_Object(ThaiAnalyzer(((t_ThaiAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ThaiAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiAnalyzer_init_(t_ThaiAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ThaiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ThaiAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ThaiAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ThaiAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::th::ThaiAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ThaiAnalyzer_get__defaultStopSet(t_ThaiAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermSecondPassGroupingCollector.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermSecondPassGroupingCollector::class$ = NULL;
            jmethodID *TermSecondPassGroupingCollector::mids$ = NULL;
            bool TermSecondPassGroupingCollector::live$ = false;

            jclass TermSecondPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermSecondPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_11c7601a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/Collection;Lorg/apache/lucene/search/Sort;Lorg/apache/lucene/search/Sort;IZZZ)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_retrieveGroup_e4de8d52] = env->getMethodID(cls, "retrieveGroup", "(I)Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermSecondPassGroupingCollector::TermSecondPassGroupingCollector(const ::java::lang::String & a0, const ::java::util::Collection & a1, const ::org::apache::lucene::search::Sort & a2, const ::org::apache::lucene::search::Sort & a3, jint a4, jboolean a5, jboolean a6, jboolean a7) : ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_11c7601a, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5, a6, a7)) {}

            void TermSecondPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermSecondPassGroupingCollector_of_(t_TermSecondPassGroupingCollector *self, PyObject *args);
            static int t_TermSecondPassGroupingCollector_init_(t_TermSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermSecondPassGroupingCollector_setNextReader(t_TermSecondPassGroupingCollector *self, PyObject *args);
            static int t_TermSecondPassGroupingCollector_set__nextReader(t_TermSecondPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermSecondPassGroupingCollector_get__parameters_(t_TermSecondPassGroupingCollector *self, void *data);
            static PyGetSetDef t_TermSecondPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_TermSecondPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_TermSecondPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermSecondPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermSecondPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermSecondPassGroupingCollector, t_TermSecondPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector, TermSecondPassGroupingCollector, t_TermSecondPassGroupingCollector_init_, 0, 0, t_TermSecondPassGroupingCollector__fields_, 0, 0);
            PyObject *t_TermSecondPassGroupingCollector::wrap_Object(const TermSecondPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermSecondPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermSecondPassGroupingCollector *self = (t_TermSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermSecondPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermSecondPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermSecondPassGroupingCollector *self = (t_TermSecondPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermSecondPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermSecondPassGroupingCollector), module, "TermSecondPassGroupingCollector", 0);
            }

            void t_TermSecondPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermSecondPassGroupingCollector).tp_dict, "class_", make_descriptor(TermSecondPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermSecondPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_TermSecondPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermSecondPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermSecondPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermSecondPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_TermSecondPassGroupingCollector::wrap_Object(TermSecondPassGroupingCollector(((t_TermSecondPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_TermSecondPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermSecondPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermSecondPassGroupingCollector_of_(t_TermSecondPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermSecondPassGroupingCollector_init_(t_TermSecondPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::Collection a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              ::org::apache::lucene::search::Sort a3((jobject) NULL);
              jint a4;
              jboolean a5;
              jboolean a6;
              jboolean a7;
              TermSecondPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "sKkkIZZZ", ::java::util::Collection::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_, &a2, &a3, &a4, &a5, &a6, &a7))
              {
                INT_CALL(object = TermSecondPassGroupingCollector(a0, a1, a2, a3, a4, a5, a6, a7));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermSecondPassGroupingCollector_setNextReader(t_TermSecondPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermSecondPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermSecondPassGroupingCollector_get__parameters_(t_TermSecondPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_TermSecondPassGroupingCollector_set__nextReader(t_TermSecondPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/fr/FrenchStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchStemFilter::class$ = NULL;
          jmethodID *FrenchStemFilter::mids$ = NULL;
          bool FrenchStemFilter::live$ = false;

          jclass FrenchStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_setStemmer_d53125fa] = env->getMethodID(cls, "setStemmer", "(Lorg/apache/lucene/analysis/fr/FrenchStemmer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchStemFilter::FrenchStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FrenchStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void FrenchStemFilter::setStemmer(const ::org::apache::lucene::analysis::fr::FrenchStemmer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemmer_d53125fa], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchStemFilter_init_(t_FrenchStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchStemFilter_incrementToken(t_FrenchStemFilter *self, PyObject *args);
          static PyObject *t_FrenchStemFilter_setStemmer(t_FrenchStemFilter *self, PyObject *arg);
          static int t_FrenchStemFilter_set__stemmer(t_FrenchStemFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_FrenchStemFilter__fields_[] = {
            DECLARE_SET_FIELD(t_FrenchStemFilter, stemmer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FrenchStemFilter__methods_[] = {
            DECLARE_METHOD(t_FrenchStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_FrenchStemFilter, setStemmer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchStemFilter, t_FrenchStemFilter, ::org::apache::lucene::analysis::TokenFilter, FrenchStemFilter, t_FrenchStemFilter_init_, 0, 0, t_FrenchStemFilter__fields_, 0, 0);

          void t_FrenchStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchStemFilter), module, "FrenchStemFilter", 0);
          }

          void t_FrenchStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchStemFilter).tp_dict, "class_", make_descriptor(FrenchStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FrenchStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchStemFilter::initializeClass, 1)))
              return NULL;
            return t_FrenchStemFilter::wrap_Object(FrenchStemFilter(((t_FrenchStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FrenchStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchStemFilter_init_(t_FrenchStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FrenchStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FrenchStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchStemFilter_incrementToken(t_FrenchStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FrenchStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_FrenchStemFilter_setStemmer(t_FrenchStemFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::fr::FrenchStemmer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::fr::FrenchStemmer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStemmer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemmer", arg);
            return NULL;
          }

          static int t_FrenchStemFilter_set__stemmer(t_FrenchStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::fr::FrenchStemmer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::fr::FrenchStemmer::initializeClass, &value))
              {
                INT_CALL(self->object.setStemmer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemmer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermRangeQuery::class$ = NULL;
        jmethodID *TermRangeQuery::mids$ = NULL;
        bool TermRangeQuery::live$ = false;

        jclass TermRangeQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermRangeQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3423b66] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getLowerTerm_4ae19461] = env->getMethodID(cls, "getLowerTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getUpperTerm_4ae19461] = env->getMethodID(cls, "getUpperTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newStringRange_ae529bcc] = env->getStaticMethodID(cls, "newStringRange", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/TermRangeQuery;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermRangeQuery::TermRangeQuery(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_d3423b66, a0.this$, a1.this$, a2.this$, a3, a4)) {}

        jboolean TermRangeQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef TermRangeQuery::getLowerTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getLowerTerm_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef TermRangeQuery::getUpperTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getUpperTerm_4ae19461]));
        }

        jint TermRangeQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean TermRangeQuery::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean TermRangeQuery::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        TermRangeQuery TermRangeQuery::newStringRange(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeQuery(env->callStaticObjectMethod(cls, mids$[mid_newStringRange_ae529bcc], a0.this$, a1.this$, a2.this$, a3, a4));
        }

        ::java::lang::String TermRangeQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermRangeQuery_init_(t_TermRangeQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermRangeQuery_equals(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_getLowerTerm(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_getUpperTerm(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_hashCode(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_includesLower(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_includesUpper(t_TermRangeQuery *self);
        static PyObject *t_TermRangeQuery_newStringRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeQuery_toString(t_TermRangeQuery *self, PyObject *args);
        static PyObject *t_TermRangeQuery_get__lowerTerm(t_TermRangeQuery *self, void *data);
        static PyObject *t_TermRangeQuery_get__upperTerm(t_TermRangeQuery *self, void *data);
        static PyGetSetDef t_TermRangeQuery__fields_[] = {
          DECLARE_GET_FIELD(t_TermRangeQuery, lowerTerm),
          DECLARE_GET_FIELD(t_TermRangeQuery, upperTerm),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermRangeQuery__methods_[] = {
          DECLARE_METHOD(t_TermRangeQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermRangeQuery, getLowerTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, getUpperTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermRangeQuery, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeQuery, newStringRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermRangeQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermRangeQuery, t_TermRangeQuery, ::org::apache::lucene::search::MultiTermQuery, TermRangeQuery, t_TermRangeQuery_init_, 0, 0, t_TermRangeQuery__fields_, 0, 0);

        void t_TermRangeQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TermRangeQuery), module, "TermRangeQuery", 0);
        }

        void t_TermRangeQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermRangeQuery).tp_dict, "class_", make_descriptor(TermRangeQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermRangeQuery::initializeClass, 1)))
            return NULL;
          return t_TermRangeQuery::wrap_Object(TermRangeQuery(((t_TermRangeQuery *) arg)->object.this$));
        }
        static PyObject *t_TermRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermRangeQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermRangeQuery_init_(t_TermRangeQuery *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeQuery object((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = TermRangeQuery(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermRangeQuery_equals(t_TermRangeQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermRangeQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermRangeQuery_getLowerTerm(t_TermRangeQuery *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeQuery_getUpperTerm(t_TermRangeQuery *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeQuery_hashCode(t_TermRangeQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermRangeQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermRangeQuery_includesLower(t_TermRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeQuery_includesUpper(t_TermRangeQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeQuery_newStringRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeQuery result((jobject) NULL);

          if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeQuery::newStringRange(a0, a1, a2, a3, a4));
            return t_TermRangeQuery::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newStringRange", args);
          return NULL;
        }

        static PyObject *t_TermRangeQuery_toString(t_TermRangeQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermRangeQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermRangeQuery_get__lowerTerm(t_TermRangeQuery *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_TermRangeQuery_get__upperTerm(t_TermRangeQuery *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CollectionTerminatedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CollectionTerminatedException::class$ = NULL;
        jmethodID *CollectionTerminatedException::mids$ = NULL;
        bool CollectionTerminatedException::live$ = false;

        jclass CollectionTerminatedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CollectionTerminatedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollectionTerminatedException::CollectionTerminatedException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CollectionTerminatedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionTerminatedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollectionTerminatedException_init_(t_CollectionTerminatedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CollectionTerminatedException__methods_[] = {
          DECLARE_METHOD(t_CollectionTerminatedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionTerminatedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollectionTerminatedException, t_CollectionTerminatedException, ::java::lang::RuntimeException, CollectionTerminatedException, t_CollectionTerminatedException_init_, 0, 0, 0, 0, 0);

        void t_CollectionTerminatedException::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionTerminatedException), module, "CollectionTerminatedException", 0);
        }

        void t_CollectionTerminatedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollectionTerminatedException).tp_dict, "class_", make_descriptor(CollectionTerminatedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollectionTerminatedException).tp_dict, "wrapfn_", make_descriptor(t_CollectionTerminatedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollectionTerminatedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionTerminatedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionTerminatedException::initializeClass, 1)))
            return NULL;
          return t_CollectionTerminatedException::wrap_Object(CollectionTerminatedException(((t_CollectionTerminatedException *) arg)->object.this$));
        }
        static PyObject *t_CollectionTerminatedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionTerminatedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollectionTerminatedException_init_(t_CollectionTerminatedException *self, PyObject *args, PyObject *kwds)
        {
          CollectionTerminatedException object((jobject) NULL);

          INT_CALL(object = CollectionTerminatedException());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "org/apache/lucene/index/IndexableFieldType.h"
#include "org/apache/lucene/document/FieldType$NumericType.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FieldType::class$ = NULL;
        jmethodID *FieldType::mids$ = NULL;
        bool FieldType::live$ = false;

        jclass FieldType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FieldType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_docValueType_db3dc573] = env->getMethodID(cls, "docValueType", "()Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_freeze_54c6a166] = env->getMethodID(cls, "freeze", "()V");
            mids$[mid_indexOptions_e1b704de] = env->getMethodID(cls, "indexOptions", "()Lorg/apache/lucene/index/FieldInfo$IndexOptions;");
            mids$[mid_indexed_54c6a16a] = env->getMethodID(cls, "indexed", "()Z");
            mids$[mid_numericPrecisionStep_54c6a179] = env->getMethodID(cls, "numericPrecisionStep", "()I");
            mids$[mid_numericType_81bd17c2] = env->getMethodID(cls, "numericType", "()Lorg/apache/lucene/document/FieldType$NumericType;");
            mids$[mid_omitNorms_54c6a16a] = env->getMethodID(cls, "omitNorms", "()Z");
            mids$[mid_setDocValueType_09b98f7a] = env->getMethodID(cls, "setDocValueType", "(Lorg/apache/lucene/index/FieldInfo$DocValuesType;)V");
            mids$[mid_setIndexOptions_9cd708ff] = env->getMethodID(cls, "setIndexOptions", "(Lorg/apache/lucene/index/FieldInfo$IndexOptions;)V");
            mids$[mid_setIndexed_bb0c767f] = env->getMethodID(cls, "setIndexed", "(Z)V");
            mids$[mid_setNumericPrecisionStep_39c7bd3c] = env->getMethodID(cls, "setNumericPrecisionStep", "(I)V");
            mids$[mid_setNumericType_d9029e47] = env->getMethodID(cls, "setNumericType", "(Lorg/apache/lucene/document/FieldType$NumericType;)V");
            mids$[mid_setOmitNorms_bb0c767f] = env->getMethodID(cls, "setOmitNorms", "(Z)V");
            mids$[mid_setStoreTermVectorOffsets_bb0c767f] = env->getMethodID(cls, "setStoreTermVectorOffsets", "(Z)V");
            mids$[mid_setStoreTermVectorPayloads_bb0c767f] = env->getMethodID(cls, "setStoreTermVectorPayloads", "(Z)V");
            mids$[mid_setStoreTermVectorPositions_bb0c767f] = env->getMethodID(cls, "setStoreTermVectorPositions", "(Z)V");
            mids$[mid_setStoreTermVectors_bb0c767f] = env->getMethodID(cls, "setStoreTermVectors", "(Z)V");
            mids$[mid_setStored_bb0c767f] = env->getMethodID(cls, "setStored", "(Z)V");
            mids$[mid_setTokenized_bb0c767f] = env->getMethodID(cls, "setTokenized", "(Z)V");
            mids$[mid_storeTermVectorOffsets_54c6a16a] = env->getMethodID(cls, "storeTermVectorOffsets", "()Z");
            mids$[mid_storeTermVectorPayloads_54c6a16a] = env->getMethodID(cls, "storeTermVectorPayloads", "()Z");
            mids$[mid_storeTermVectorPositions_54c6a16a] = env->getMethodID(cls, "storeTermVectorPositions", "()Z");
            mids$[mid_storeTermVectors_54c6a16a] = env->getMethodID(cls, "storeTermVectors", "()Z");
            mids$[mid_stored_54c6a16a] = env->getMethodID(cls, "stored", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_tokenized_54c6a16a] = env->getMethodID(cls, "tokenized", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldType::FieldType() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::index::FieldInfo$DocValuesType FieldType::docValueType() const
        {
          return ::org::apache::lucene::index::FieldInfo$DocValuesType(env->callObjectMethod(this$, mids$[mid_docValueType_db3dc573]));
        }

        void FieldType::freeze() const
        {
          env->callVoidMethod(this$, mids$[mid_freeze_54c6a166]);
        }

        ::org::apache::lucene::index::FieldInfo$IndexOptions FieldType::indexOptions() const
        {
          return ::org::apache::lucene::index::FieldInfo$IndexOptions(env->callObjectMethod(this$, mids$[mid_indexOptions_e1b704de]));
        }

        jboolean FieldType::indexed() const
        {
          return env->callBooleanMethod(this$, mids$[mid_indexed_54c6a16a]);
        }

        jint FieldType::numericPrecisionStep() const
        {
          return env->callIntMethod(this$, mids$[mid_numericPrecisionStep_54c6a179]);
        }

        ::org::apache::lucene::document::FieldType$NumericType FieldType::numericType() const
        {
          return ::org::apache::lucene::document::FieldType$NumericType(env->callObjectMethod(this$, mids$[mid_numericType_81bd17c2]));
        }

        jboolean FieldType::omitNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_omitNorms_54c6a16a]);
        }

        void FieldType::setDocValueType(const ::org::apache::lucene::index::FieldInfo$DocValuesType & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocValueType_09b98f7a], a0.this$);
        }

        void FieldType::setIndexOptions(const ::org::apache::lucene::index::FieldInfo$IndexOptions & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexOptions_9cd708ff], a0.this$);
        }

        void FieldType::setIndexed(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setIndexed_bb0c767f], a0);
        }

        void FieldType::setNumericPrecisionStep(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNumericPrecisionStep_39c7bd3c], a0);
        }

        void FieldType::setNumericType(const ::org::apache::lucene::document::FieldType$NumericType & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNumericType_d9029e47], a0.this$);
        }

        void FieldType::setOmitNorms(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setOmitNorms_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectorOffsets(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorOffsets_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectorPayloads(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorPayloads_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectorPositions(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectorPositions_bb0c767f], a0);
        }

        void FieldType::setStoreTermVectors(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStoreTermVectors_bb0c767f], a0);
        }

        void FieldType::setStored(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setStored_bb0c767f], a0);
        }

        void FieldType::setTokenized(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTokenized_bb0c767f], a0);
        }

        jboolean FieldType::storeTermVectorOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorOffsets_54c6a16a]);
        }

        jboolean FieldType::storeTermVectorPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPayloads_54c6a16a]);
        }

        jboolean FieldType::storeTermVectorPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectorPositions_54c6a16a]);
        }

        jboolean FieldType::storeTermVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_storeTermVectors_54c6a16a]);
        }

        jboolean FieldType::stored() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stored_54c6a16a]);
        }

        ::java::lang::String FieldType::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jboolean FieldType::tokenized() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tokenized_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FieldType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldType_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldType_init_(t_FieldType *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldType_docValueType(t_FieldType *self);
        static PyObject *t_FieldType_freeze(t_FieldType *self);
        static PyObject *t_FieldType_indexOptions(t_FieldType *self);
        static PyObject *t_FieldType_indexed(t_FieldType *self);
        static PyObject *t_FieldType_numericPrecisionStep(t_FieldType *self);
        static PyObject *t_FieldType_numericType(t_FieldType *self);
        static PyObject *t_FieldType_omitNorms(t_FieldType *self);
        static PyObject *t_FieldType_setDocValueType(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setIndexOptions(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setIndexed(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setNumericPrecisionStep(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setNumericType(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setOmitNorms(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorOffsets(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorPayloads(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectorPositions(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStoreTermVectors(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setStored(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_setTokenized(t_FieldType *self, PyObject *arg);
        static PyObject *t_FieldType_storeTermVectorOffsets(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectorPayloads(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectorPositions(t_FieldType *self);
        static PyObject *t_FieldType_storeTermVectors(t_FieldType *self);
        static PyObject *t_FieldType_stored(t_FieldType *self);
        static PyObject *t_FieldType_toString(t_FieldType *self, PyObject *args);
        static PyObject *t_FieldType_tokenized(t_FieldType *self);

        static PyMethodDef t_FieldType__methods_[] = {
          DECLARE_METHOD(t_FieldType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldType, docValueType, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, freeze, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, indexOptions, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, indexed, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, numericPrecisionStep, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, numericType, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, omitNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, setDocValueType, METH_O),
          DECLARE_METHOD(t_FieldType, setIndexOptions, METH_O),
          DECLARE_METHOD(t_FieldType, setIndexed, METH_O),
          DECLARE_METHOD(t_FieldType, setNumericPrecisionStep, METH_O),
          DECLARE_METHOD(t_FieldType, setNumericType, METH_O),
          DECLARE_METHOD(t_FieldType, setOmitNorms, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorOffsets, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorPayloads, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectorPositions, METH_O),
          DECLARE_METHOD(t_FieldType, setStoreTermVectors, METH_O),
          DECLARE_METHOD(t_FieldType, setStored, METH_O),
          DECLARE_METHOD(t_FieldType, setTokenized, METH_O),
          DECLARE_METHOD(t_FieldType, storeTermVectorOffsets, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectorPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectorPositions, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, storeTermVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, stored, METH_NOARGS),
          DECLARE_METHOD(t_FieldType, toString, METH_VARARGS),
          DECLARE_METHOD(t_FieldType, tokenized, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldType, t_FieldType, ::java::lang::Object, FieldType, t_FieldType_init_, 0, 0, 0, 0, 0);

        void t_FieldType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldType), module, "FieldType", 0);
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "NumericType", make_descriptor(&PY_TYPE(FieldType$NumericType)));
        }

        void t_FieldType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "class_", make_descriptor(FieldType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "wrapfn_", make_descriptor(t_FieldType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldType).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldType::initializeClass, 1)))
            return NULL;
          return t_FieldType::wrap_Object(FieldType(((t_FieldType *) arg)->object.this$));
        }
        static PyObject *t_FieldType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldType_init_(t_FieldType *self, PyObject *args, PyObject *kwds)
        {
          FieldType object((jobject) NULL);

          INT_CALL(object = FieldType());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldType_docValueType(t_FieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType result((jobject) NULL);
          OBJ_CALL(result = self->object.docValueType());
          return ::org::apache::lucene::index::t_FieldInfo$DocValuesType::wrap_Object(result);
        }

        static PyObject *t_FieldType_freeze(t_FieldType *self)
        {
          OBJ_CALL(self->object.freeze());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldType_indexOptions(t_FieldType *self)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions result((jobject) NULL);
          OBJ_CALL(result = self->object.indexOptions());
          return ::org::apache::lucene::index::t_FieldInfo$IndexOptions::wrap_Object(result);
        }

        static PyObject *t_FieldType_indexed(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.indexed());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_numericPrecisionStep(t_FieldType *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numericPrecisionStep());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FieldType_numericType(t_FieldType *self)
        {
          ::org::apache::lucene::document::FieldType$NumericType result((jobject) NULL);
          OBJ_CALL(result = self->object.numericType());
          return ::org::apache::lucene::document::t_FieldType$NumericType::wrap_Object(result);
        }

        static PyObject *t_FieldType_omitNorms(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.omitNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_setDocValueType(t_FieldType *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo$DocValuesType a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::index::FieldInfo$DocValuesType::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_FieldInfo$DocValuesType::parameters_))
          {
            OBJ_CALL(self->object.setDocValueType(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocValueType", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setIndexOptions(t_FieldType *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo$IndexOptions a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_))
          {
            OBJ_CALL(self->object.setIndexOptions(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexOptions", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setIndexed(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setIndexed(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexed", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setNumericPrecisionStep(t_FieldType *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setNumericPrecisionStep(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNumericPrecisionStep", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setNumericType(t_FieldType *self, PyObject *arg)
        {
          ::org::apache::lucene::document::FieldType$NumericType a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_FieldType$NumericType::parameters_))
          {
            OBJ_CALL(self->object.setNumericType(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setNumericType", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setOmitNorms(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setOmitNorms(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setOmitNorms", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorOffsets(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorOffsets(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorOffsets", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorPayloads(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorPayloads(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorPayloads", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectorPositions(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectorPositions(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectorPositions", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStoreTermVectors(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStoreTermVectors(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStoreTermVectors", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setStored(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setStored(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setStored", arg);
          return NULL;
        }

        static PyObject *t_FieldType_setTokenized(t_FieldType *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setTokenized(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTokenized", arg);
          return NULL;
        }

        static PyObject *t_FieldType_storeTermVectorOffsets(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectorPayloads(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectorPositions(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectorPositions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_storeTermVectors(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.storeTermVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_stored(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.stored());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldType_toString(t_FieldType *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldType), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldType_tokenized(t_FieldType *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tokenized());
          Py_RETURN_BOOL(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode.h"
#include "org/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *DuplicateFilter::class$ = NULL;
          jmethodID *DuplicateFilter::mids$ = NULL;
          bool DuplicateFilter::live$ = false;

          jclass DuplicateFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/DuplicateFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_0a23a3cc] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
              mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
              mids$[mid_getKeepMode_c01b4463] = env->getMethodID(cls, "getKeepMode", "()Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;");
              mids$[mid_getProcessingMode_815046ab] = env->getMethodID(cls, "getProcessingMode", "()Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setFieldName_5fdc3f48] = env->getMethodID(cls, "setFieldName", "(Ljava/lang/String;)V");
              mids$[mid_setKeepMode_9304b146] = env->getMethodID(cls, "setKeepMode", "(Lorg/apache/lucene/sandbox/queries/DuplicateFilter$KeepMode;)V");
              mids$[mid_setProcessingMode_a2322426] = env->getMethodID(cls, "setProcessingMode", "(Lorg/apache/lucene/sandbox/queries/DuplicateFilter$ProcessingMode;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DuplicateFilter::DuplicateFilter(const ::java::lang::String & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          DuplicateFilter::DuplicateFilter(const ::java::lang::String & a0, const ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode & a1, const ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode & a2) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_0a23a3cc, a0.this$, a1.this$, a2.this$)) {}

          jboolean DuplicateFilter::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::DocIdSet DuplicateFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
          {
            return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
          }

          ::java::lang::String DuplicateFilter::getFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode DuplicateFilter::getKeepMode() const
          {
            return ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode(env->callObjectMethod(this$, mids$[mid_getKeepMode_c01b4463]));
          }

          ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode DuplicateFilter::getProcessingMode() const
          {
            return ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode(env->callObjectMethod(this$, mids$[mid_getProcessingMode_815046ab]));
          }

          jint DuplicateFilter::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void DuplicateFilter::setFieldName(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFieldName_5fdc3f48], a0.this$);
          }

          void DuplicateFilter::setKeepMode(const ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setKeepMode_9304b146], a0.this$);
          }

          void DuplicateFilter::setProcessingMode(const ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setProcessingMode_a2322426], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_DuplicateFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DuplicateFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DuplicateFilter_init_(t_DuplicateFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DuplicateFilter_equals(t_DuplicateFilter *self, PyObject *args);
          static PyObject *t_DuplicateFilter_getDocIdSet(t_DuplicateFilter *self, PyObject *args);
          static PyObject *t_DuplicateFilter_getFieldName(t_DuplicateFilter *self);
          static PyObject *t_DuplicateFilter_getKeepMode(t_DuplicateFilter *self);
          static PyObject *t_DuplicateFilter_getProcessingMode(t_DuplicateFilter *self);
          static PyObject *t_DuplicateFilter_hashCode(t_DuplicateFilter *self, PyObject *args);
          static PyObject *t_DuplicateFilter_setFieldName(t_DuplicateFilter *self, PyObject *arg);
          static PyObject *t_DuplicateFilter_setKeepMode(t_DuplicateFilter *self, PyObject *arg);
          static PyObject *t_DuplicateFilter_setProcessingMode(t_DuplicateFilter *self, PyObject *arg);
          static PyObject *t_DuplicateFilter_get__fieldName(t_DuplicateFilter *self, void *data);
          static int t_DuplicateFilter_set__fieldName(t_DuplicateFilter *self, PyObject *arg, void *data);
          static PyObject *t_DuplicateFilter_get__keepMode(t_DuplicateFilter *self, void *data);
          static int t_DuplicateFilter_set__keepMode(t_DuplicateFilter *self, PyObject *arg, void *data);
          static PyObject *t_DuplicateFilter_get__processingMode(t_DuplicateFilter *self, void *data);
          static int t_DuplicateFilter_set__processingMode(t_DuplicateFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_DuplicateFilter__fields_[] = {
            DECLARE_GETSET_FIELD(t_DuplicateFilter, fieldName),
            DECLARE_GETSET_FIELD(t_DuplicateFilter, keepMode),
            DECLARE_GETSET_FIELD(t_DuplicateFilter, processingMode),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DuplicateFilter__methods_[] = {
            DECLARE_METHOD(t_DuplicateFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DuplicateFilter, equals, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter, getDocIdSet, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter, getFieldName, METH_NOARGS),
            DECLARE_METHOD(t_DuplicateFilter, getKeepMode, METH_NOARGS),
            DECLARE_METHOD(t_DuplicateFilter, getProcessingMode, METH_NOARGS),
            DECLARE_METHOD(t_DuplicateFilter, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_DuplicateFilter, setFieldName, METH_O),
            DECLARE_METHOD(t_DuplicateFilter, setKeepMode, METH_O),
            DECLARE_METHOD(t_DuplicateFilter, setProcessingMode, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DuplicateFilter, t_DuplicateFilter, ::org::apache::lucene::search::Filter, DuplicateFilter, t_DuplicateFilter_init_, 0, 0, t_DuplicateFilter__fields_, 0, 0);

          void t_DuplicateFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DuplicateFilter), module, "DuplicateFilter", 0);
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "ProcessingMode", make_descriptor(&PY_TYPE(DuplicateFilter$ProcessingMode)));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "KeepMode", make_descriptor(&PY_TYPE(DuplicateFilter$KeepMode)));
          }

          void t_DuplicateFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "class_", make_descriptor(DuplicateFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "wrapfn_", make_descriptor(t_DuplicateFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DuplicateFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DuplicateFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DuplicateFilter::initializeClass, 1)))
              return NULL;
            return t_DuplicateFilter::wrap_Object(DuplicateFilter(((t_DuplicateFilter *) arg)->object.this$));
          }
          static PyObject *t_DuplicateFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DuplicateFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DuplicateFilter_init_(t_DuplicateFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                DuplicateFilter object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = DuplicateFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode a2((jobject) NULL);
                PyTypeObject **p2;
                DuplicateFilter object((jobject) NULL);

                if (!parseArgs(args, "sKK", ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::initializeClass, ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::parameters_, &a2, &p2, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::parameters_))
                {
                  INT_CALL(object = DuplicateFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DuplicateFilter_equals(t_DuplicateFilter *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DuplicateFilter), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_DuplicateFilter_getDocIdSet(t_DuplicateFilter *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
              return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(DuplicateFilter), (PyObject *) self, "getDocIdSet", args, 2);
          }

          static PyObject *t_DuplicateFilter_getFieldName(t_DuplicateFilter *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFieldName());
            return j2p(result);
          }

          static PyObject *t_DuplicateFilter_getKeepMode(t_DuplicateFilter *self)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode result((jobject) NULL);
            OBJ_CALL(result = self->object.getKeepMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::wrap_Object(result);
          }

          static PyObject *t_DuplicateFilter_getProcessingMode(t_DuplicateFilter *self)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode result((jobject) NULL);
            OBJ_CALL(result = self->object.getProcessingMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::wrap_Object(result);
          }

          static PyObject *t_DuplicateFilter_hashCode(t_DuplicateFilter *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(DuplicateFilter), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_DuplicateFilter_setFieldName(t_DuplicateFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setFieldName(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFieldName", arg);
            return NULL;
          }

          static PyObject *t_DuplicateFilter_setKeepMode(t_DuplicateFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::initializeClass, &a0, &p0, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::parameters_))
            {
              OBJ_CALL(self->object.setKeepMode(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setKeepMode", arg);
            return NULL;
          }

          static PyObject *t_DuplicateFilter_setProcessingMode(t_DuplicateFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::initializeClass, &a0, &p0, ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::parameters_))
            {
              OBJ_CALL(self->object.setProcessingMode(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setProcessingMode", arg);
            return NULL;
          }

          static PyObject *t_DuplicateFilter_get__fieldName(t_DuplicateFilter *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldName());
            return j2p(value);
          }
          static int t_DuplicateFilter_set__fieldName(t_DuplicateFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setFieldName(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fieldName", arg);
            return -1;
          }

          static PyObject *t_DuplicateFilter_get__keepMode(t_DuplicateFilter *self, void *data)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode value((jobject) NULL);
            OBJ_CALL(value = self->object.getKeepMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$KeepMode::wrap_Object(value);
          }
          static int t_DuplicateFilter_set__keepMode(t_DuplicateFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::DuplicateFilter$KeepMode::initializeClass, &value))
              {
                INT_CALL(self->object.setKeepMode(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "keepMode", arg);
            return -1;
          }

          static PyObject *t_DuplicateFilter_get__processingMode(t_DuplicateFilter *self, void *data)
          {
            ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode value((jobject) NULL);
            OBJ_CALL(value = self->object.getProcessingMode());
            return ::org::apache::lucene::sandbox::queries::t_DuplicateFilter$ProcessingMode::wrap_Object(value);
          }
          static int t_DuplicateFilter_set__processingMode(t_DuplicateFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::sandbox::queries::DuplicateFilter$ProcessingMode::initializeClass, &value))
              {
                INT_CALL(self->object.setProcessingMode(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "processingMode", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41Codec.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41Codec::class$ = NULL;
          jmethodID *Lucene41Codec::mids$ = NULL;
          bool Lucene41Codec::live$ = false;

          jclass Lucene41Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41Codec::Lucene41Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene41Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene41Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene41Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene41Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene41Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene41Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene41Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene41Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene41Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41Codec_init_(t_Lucene41Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41Codec_docValuesFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_fieldInfosFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_getPostingsFormatForField(t_Lucene41Codec *self, PyObject *arg);
          static PyObject *t_Lucene41Codec_liveDocsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_normsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_postingsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_segmentInfoFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_storedFieldsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_termVectorsFormat(t_Lucene41Codec *self, PyObject *args);

          static PyMethodDef t_Lucene41Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene41Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene41Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41Codec, t_Lucene41Codec, ::org::apache::lucene::codecs::Codec, Lucene41Codec, t_Lucene41Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene41Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41Codec), module, "Lucene41Codec", 0);
          }

          void t_Lucene41Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41Codec).tp_dict, "class_", make_descriptor(Lucene41Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene41Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene41Codec::wrap_Object(Lucene41Codec(((t_Lucene41Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene41Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41Codec_init_(t_Lucene41Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene41Codec object((jobject) NULL);

            INT_CALL(object = Lucene41Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene41Codec_docValuesFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_fieldInfosFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_getPostingsFormatForField(t_Lucene41Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene41Codec_liveDocsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_normsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_postingsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_segmentInfoFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_storedFieldsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_termVectorsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup$LookupResult::class$ = NULL;
          jmethodID *Lookup$LookupResult::mids$ = NULL;
          jfieldID *Lookup$LookupResult::fids$ = NULL;
          bool Lookup$LookupResult::live$ = false;

          jclass Lookup$LookupResult::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup$LookupResult");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_03ea1383] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;J)V");
              mids$[mid_init$_f8b7fcb9] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLjava/util/Set;)V");
              mids$[mid_init$_bb9697af] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_init$_a19b2ec9] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLorg/apache/lucene/util/BytesRef;Ljava/util/Set;)V");
              mids$[mid_init$_37f21f6f] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Object;JLorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_init$_f9089661] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Object;JLorg/apache/lucene/util/BytesRef;Ljava/util/Set;)V");
              mids$[mid_compareTo_2615e59a] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/suggest/Lookup$LookupResult;)I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_contexts] = env->getFieldID(cls, "contexts", "Ljava/util/Set;");
              fids$[fid_highlightKey] = env->getFieldID(cls, "highlightKey", "Ljava/lang/Object;");
              fids$[fid_key] = env->getFieldID(cls, "key", "Ljava/lang/CharSequence;");
              fids$[fid_payload] = env->getFieldID(cls, "payload", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_value] = env->getFieldID(cls, "value", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_03ea1383, a0.this$, a1)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::java::util::Set & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f8b7fcb9, a0.this$, a1, a2.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::org::apache::lucene::util::BytesRef & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb9697af, a0.this$, a1, a2.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::org::apache::lucene::util::BytesRef & a2, const ::java::util::Set & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a19b2ec9, a0.this$, a1, a2.this$, a3.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_37f21f6f, a0.this$, a1.this$, a2, a3.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3, const ::java::util::Set & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f9089661, a0.this$, a1.this$, a2, a3.this$, a4.this$)) {}

          jint Lookup$LookupResult::compareTo(const Lookup$LookupResult & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_2615e59a], a0.this$);
          }

          ::java::lang::String Lookup$LookupResult::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::util::Set Lookup$LookupResult::_get_contexts() const
          {
            return ::java::util::Set(env->getObjectField(this$, fids$[fid_contexts]));
          }

          ::java::lang::Object Lookup$LookupResult::_get_highlightKey() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_highlightKey]));
          }

          ::java::lang::CharSequence Lookup$LookupResult::_get_key() const
          {
            return ::java::lang::CharSequence(env->getObjectField(this$, fids$[fid_key]));
          }

          ::org::apache::lucene::util::BytesRef Lookup$LookupResult::_get_payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_payload]));
          }

          jlong Lookup$LookupResult::_get_value() const
          {
            return env->getLongField(this$, fids$[fid_value]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup$LookupResult_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupResult_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lookup$LookupResult_init_(t_Lookup$LookupResult *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup$LookupResult_compareTo(t_Lookup$LookupResult *self, PyObject *arg);
          static PyObject *t_Lookup$LookupResult_toString(t_Lookup$LookupResult *self, PyObject *args);
          static PyObject *t_Lookup$LookupResult_get__contexts(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__highlightKey(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__key(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__payload(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__value(t_Lookup$LookupResult *self, void *data);

          static PyGetSetDef t_Lookup$LookupResult__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup$LookupResult, contexts),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, highlightKey),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, key),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, payload),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup$LookupResult__methods_[] = {
            DECLARE_METHOD(t_Lookup$LookupResult, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupResult, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupResult, compareTo, METH_O),
            DECLARE_METHOD(t_Lookup$LookupResult, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lookup$LookupResult, t_Lookup$LookupResult, ::java::lang::Object, Lookup$LookupResult, t_Lookup$LookupResult_init_, 0, 0, t_Lookup$LookupResult__fields_, 0, 0);

          void t_Lookup$LookupResult::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup$LookupResult), module, "Lookup$LookupResult", 0);
          }

          void t_Lookup$LookupResult::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lookup$LookupResult).tp_dict, "class_", make_descriptor(Lookup$LookupResult::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupResult).tp_dict, "wrapfn_", make_descriptor(t_Lookup$LookupResult::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupResult).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lookup$LookupResult_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup$LookupResult::initializeClass, 1)))
              return NULL;
            return t_Lookup$LookupResult::wrap_Object(Lookup$LookupResult(((t_Lookup$LookupResult *) arg)->object.this$));
          }
          static PyObject *t_Lookup$LookupResult_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup$LookupResult::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lookup$LookupResult_init_(t_Lookup$LookupResult *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJ", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJK", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJk", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJkK", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                jlong a2;
                ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OoJk", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                jlong a2;
                ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
                ::java::util::Set a4((jobject) NULL);
                PyTypeObject **p4;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OoJkK", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lookup$LookupResult_compareTo(t_Lookup$LookupResult *self, PyObject *arg)
          {
            Lookup$LookupResult a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", Lookup$LookupResult::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_Lookup$LookupResult_toString(t_Lookup$LookupResult *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lookup$LookupResult), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Lookup$LookupResult_get__contexts(t_Lookup$LookupResult *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object._get_contexts());
            return ::java::util::t_Set::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__highlightKey(t_Lookup$LookupResult *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_highlightKey());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__key(t_Lookup$LookupResult *self, void *data)
          {
            ::java::lang::CharSequence value((jobject) NULL);
            OBJ_CALL(value = self->object._get_key());
            return ::java::lang::t_CharSequence::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__payload(t_Lookup$LookupResult *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__value(t_Lookup$LookupResult *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_value());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util.h"
#include "java/io/Writer.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/lang/Long.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/fst/Util$TopResults.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util::class$ = NULL;
          jmethodID *Util::mids$ = NULL;
          bool Util::live$ = false;

          jclass Util::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_4f30bf3f] = env->getStaticMethodID(cls, "get", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/IntsRef;)Ljava/lang/Object;");
              mids$[mid_get_6697be43] = env->getStaticMethodID(cls, "get", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/BytesRef;)Ljava/lang/Object;");
              mids$[mid_getByOutput_40734dd8] = env->getStaticMethodID(cls, "getByOutput", "(Lorg/apache/lucene/util/fst/FST;J)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_getByOutput_6ff1a968] = env->getStaticMethodID(cls, "getByOutput", "(Lorg/apache/lucene/util/fst/FST;JLorg/apache/lucene/util/fst/FST$BytesReader;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_readCeilArc_3a8e72bb] = env->getStaticMethodID(cls, "readCeilArc", "(ILorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_shortestPaths_7b374667] = env->getStaticMethodID(cls, "shortestPaths", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;Ljava/util/Comparator;IZ)Lorg/apache/lucene/util/fst/Util$TopResults;");
              mids$[mid_toBytesRef_27bd6535] = env->getStaticMethodID(cls, "toBytesRef", "(Lorg/apache/lucene/util/IntsRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_toDot_53893198] = env->getStaticMethodID(cls, "toDot", "(Lorg/apache/lucene/util/fst/FST;Ljava/io/Writer;ZZ)V");
              mids$[mid_toIntsRef_9ff62e61] = env->getStaticMethodID(cls, "toIntsRef", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF16_2efa4e73] = env->getStaticMethodID(cls, "toUTF16", "(Ljava/lang/CharSequence;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF32_2efa4e73] = env->getStaticMethodID(cls, "toUTF32", "(Ljava/lang/CharSequence;Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");
              mids$[mid_toUTF32_78db5d6f] = env->getStaticMethodID(cls, "toUTF32", "([CIILorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/IntsRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Object Util::get(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_get_4f30bf3f], a0.this$, a1.this$));
          }

          ::java::lang::Object Util::get(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::BytesRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_get_6697be43], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::getByOutput(const ::org::apache::lucene::util::fst::FST & a0, jlong a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_getByOutput_40734dd8], a0.this$, a1));
          }

          ::org::apache::lucene::util::IntsRef Util::getByOutput(const ::org::apache::lucene::util::fst::FST & a0, jlong a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2, const ::org::apache::lucene::util::fst::FST$Arc & a3, const ::org::apache::lucene::util::fst::FST$Arc & a4, const ::org::apache::lucene::util::IntsRef & a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_getByOutput_6ff1a968], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc Util::readCeilArc(jint a0, const ::org::apache::lucene::util::fst::FST & a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$Arc & a3, const ::org::apache::lucene::util::fst::FST$BytesReader & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::fst::FST$Arc(env->callStaticObjectMethod(cls, mids$[mid_readCeilArc_3a8e72bb], a0, a1.this$, a2.this$, a3.this$, a4.this$));
          }

          ::org::apache::lucene::util::fst::Util$TopResults Util::shortestPaths(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::java::lang::Object & a2, const ::java::util::Comparator & a3, jint a4, jboolean a5)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::fst::Util$TopResults(env->callStaticObjectMethod(cls, mids$[mid_shortestPaths_7b374667], a0.this$, a1.this$, a2.this$, a3.this$, a4, a5));
          }

          ::org::apache::lucene::util::BytesRef Util::toBytesRef(const ::org::apache::lucene::util::IntsRef & a0, const ::org::apache::lucene::util::BytesRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_toBytesRef_27bd6535], a0.this$, a1.this$));
          }

          void Util::toDot(const ::org::apache::lucene::util::fst::FST & a0, const ::java::io::Writer & a1, jboolean a2, jboolean a3)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_toDot_53893198], a0.this$, a1.this$, a2, a3);
          }

          ::org::apache::lucene::util::IntsRef Util::toIntsRef(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toIntsRef_9ff62e61], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF16(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF16_2efa4e73], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF32(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::util::IntsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF32_2efa4e73], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::IntsRef Util::toUTF32(const JArray< jchar > & a0, jint a1, jint a2, const ::org::apache::lucene::util::IntsRef & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::IntsRef(env->callStaticObjectMethod(cls, mids$[mid_toUTF32_78db5d6f], a0.this$, a1, a2, a3.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/fst/Util$Result.h"
#include "org/apache/lucene/util/fst/Util$TopNSearcher.h"
#include "org/apache/lucene/util/fst/Util$FSTPath.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util_get(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_getByOutput(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_readCeilArc(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_shortestPaths(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toBytesRef(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toDot(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toIntsRef(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toUTF16(PyTypeObject *type, PyObject *args);
          static PyObject *t_Util_toUTF32(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_Util__methods_[] = {
            DECLARE_METHOD(t_Util, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util, get, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, getByOutput, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, readCeilArc, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, shortestPaths, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toBytesRef, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toDot, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toIntsRef, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toUTF16, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Util, toUTF32, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util, t_Util, ::java::lang::Object, Util, abstract_init, 0, 0, 0, 0, 0);

          void t_Util::install(PyObject *module)
          {
            installType(&PY_TYPE(Util), module, "Util", 0);
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "TopResults", make_descriptor(&PY_TYPE(Util$TopResults)));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "Result", make_descriptor(&PY_TYPE(Util$Result)));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "TopNSearcher", make_descriptor(&PY_TYPE(Util$TopNSearcher)));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "FSTPath", make_descriptor(&PY_TYPE(Util$FSTPath)));
          }

          void t_Util::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "class_", make_descriptor(Util::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "wrapfn_", make_descriptor(t_Util::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util::initializeClass, 1)))
              return NULL;
            return t_Util::wrap_Object(Util(((t_Util *) arg)->object.this$));
          }
          static PyObject *t_Util_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util_get(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::get(a0, a1));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::get(a0, a1));
                  return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "get", args);
            return NULL;
          }

          static PyObject *t_Util_getByOutput(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                jlong a1;
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "KJ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::getByOutput(a0, a1));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
              break;
             case 6:
              {
                ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                PyTypeObject **p0;
                jlong a1;
                ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::util::fst::FST$Arc a3((jobject) NULL);
                PyTypeObject **p3;
                ::org::apache::lucene::util::fst::FST$Arc a4((jobject) NULL);
                PyTypeObject **p4;
                ::org::apache::lucene::util::IntsRef a5((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "KJKKKk", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a4, &p4, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a5))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::getByOutput(a0, a1, a2, a3, a4, a5));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getByOutput", args);
            return NULL;
          }

          static PyObject *t_Util_readCeilArc(PyTypeObject *type, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::fst::FST a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::fst::FST$BytesReader a4((jobject) NULL);
            PyTypeObject **p4;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "IKKKK", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a4, &p4, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::readCeilArc(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "readCeilArc", args);
            return NULL;
          }

          static PyObject *t_Util_shortestPaths(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object a2((jobject) NULL);
            ::java::util::Comparator a3((jobject) NULL);
            PyTypeObject **p3;
            jint a4;
            jboolean a5;
            ::org::apache::lucene::util::fst::Util$TopResults result((jobject) NULL);

            if (!parseArgs(args, "KKoKIZ", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &a3, &p3, ::java::util::t_Comparator::parameters_, &a4, &a5))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::shortestPaths(a0, a1, a2, a3, a4, a5));
              return ::org::apache::lucene::util::fst::t_Util$TopResults::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "shortestPaths", args);
            return NULL;
          }

          static PyObject *t_Util_toBytesRef(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::IntsRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toBytesRef(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toBytesRef", args);
            return NULL;
          }

          static PyObject *t_Util_toDot(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::io::Writer a1((jobject) NULL);
            jboolean a2;
            jboolean a3;

            if (!parseArgs(args, "KkZZ", ::org::apache::lucene::util::fst::FST::initializeClass, ::java::io::Writer::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(::org::apache::lucene::util::fst::Util::toDot(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "toDot", args);
            return NULL;
          }

          static PyObject *t_Util_toIntsRef(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toIntsRef(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toIntsRef", args);
            return NULL;
          }

          static PyObject *t_Util_toUTF16(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::CharSequence a0((jobject) NULL);
            ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
            ::org::apache::lucene::util::IntsRef result((jobject) NULL);

            if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF16(a0, a1));
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "toUTF16", args);
            return NULL;
          }

          static PyObject *t_Util_toUTF32(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::util::IntsRef a1((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF32(a0, a1));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::util::IntsRef a3((jobject) NULL);
                ::org::apache::lucene::util::IntsRef result((jobject) NULL);

                if (!parseArgs(args, "[CIIk", ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::util::fst::Util::toUTF32(a0, a1, a2, a3));
                  return ::org::apache::lucene::util::t_IntsRef::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "toUTF32", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/StandardQueryNodeProcessorPipeline.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *StandardQueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *StandardQueryNodeProcessorPipeline::mids$ = NULL;
              bool StandardQueryNodeProcessorPipeline::live$ = false;

              jclass StandardQueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/StandardQueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryNodeProcessorPipeline::StandardQueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorPipeline(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_StandardQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryNodeProcessorPipeline_init_(t_StandardQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_StandardQueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryNodeProcessorPipeline, t_StandardQueryNodeProcessorPipeline, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorPipeline, StandardQueryNodeProcessorPipeline, t_StandardQueryNodeProcessorPipeline_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryNodeProcessorPipeline), module, "StandardQueryNodeProcessorPipeline", 0);
              }

              void t_StandardQueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryNodeProcessorPipeline).tp_dict, "class_", make_descriptor(StandardQueryNodeProcessorPipeline::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryNodeProcessorPipeline).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryNodeProcessorPipeline::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryNodeProcessorPipeline).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryNodeProcessorPipeline::wrap_Object(StandardQueryNodeProcessorPipeline(((t_StandardQueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryNodeProcessorPipeline_init_(t_StandardQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                StandardQueryNodeProcessorPipeline object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = StandardQueryNodeProcessorPipeline(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataInput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes$PagedBytesDataInput::class$ = NULL;
        jmethodID *PagedBytes$PagedBytesDataInput::mids$ = NULL;
        bool PagedBytes$PagedBytesDataInput::live$ = false;

        jclass PagedBytes$PagedBytesDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes$PagedBytesDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_da9ab8b7] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataInput;");
            mids$[mid_getPosition_54c6a17a] = env->getMethodID(cls, "getPosition", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_setPosition_0ee6df2f] = env->getMethodID(cls, "setPosition", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes$PagedBytesDataInput PagedBytes$PagedBytesDataInput::clone() const
        {
          return PagedBytes$PagedBytesDataInput(env->callObjectMethod(this$, mids$[mid_clone_da9ab8b7]));
        }

        jlong PagedBytes$PagedBytesDataInput::getPosition() const
        {
          return env->callLongMethod(this$, mids$[mid_getPosition_54c6a17a]);
        }

        jbyte PagedBytes$PagedBytesDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void PagedBytes$PagedBytesDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void PagedBytes$PagedBytesDataInput::setPosition(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setPosition_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes$PagedBytesDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_clone(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_getPosition(t_PagedBytes$PagedBytesDataInput *self);
        static PyObject *t_PagedBytes$PagedBytesDataInput_readByte(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_readBytes(t_PagedBytes$PagedBytesDataInput *self, PyObject *args);
        static PyObject *t_PagedBytes$PagedBytesDataInput_setPosition(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg);
        static PyObject *t_PagedBytes$PagedBytesDataInput_get__position(t_PagedBytes$PagedBytesDataInput *self, void *data);
        static int t_PagedBytes$PagedBytesDataInput_set__position(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg, void *data);
        static PyGetSetDef t_PagedBytes$PagedBytesDataInput__fields_[] = {
          DECLARE_GETSET_FIELD(t_PagedBytes$PagedBytesDataInput, position),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes$PagedBytesDataInput__methods_[] = {
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, clone, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, getPosition, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes$PagedBytesDataInput, setPosition, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes$PagedBytesDataInput, t_PagedBytes$PagedBytesDataInput, ::org::apache::lucene::store::DataInput, PagedBytes$PagedBytesDataInput, abstract_init, 0, 0, t_PagedBytes$PagedBytesDataInput__fields_, 0, 0);

        void t_PagedBytes$PagedBytesDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes$PagedBytesDataInput), module, "PagedBytes$PagedBytesDataInput", 0);
        }

        void t_PagedBytes$PagedBytesDataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataInput).tp_dict, "class_", make_descriptor(PagedBytes$PagedBytesDataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataInput).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes$PagedBytesDataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes$PagedBytesDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes$PagedBytesDataInput::initializeClass, 1)))
            return NULL;
          return t_PagedBytes$PagedBytesDataInput::wrap_Object(PagedBytes$PagedBytesDataInput(((t_PagedBytes$PagedBytesDataInput *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes$PagedBytesDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes$PagedBytesDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_clone(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          PagedBytes$PagedBytesDataInput result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.clone());
            return t_PagedBytes$PagedBytesDataInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "clone", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_getPosition(t_PagedBytes$PagedBytesDataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_readByte(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_readBytes(t_PagedBytes$PagedBytesDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PagedBytes$PagedBytesDataInput), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_setPosition(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setPosition(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setPosition", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes$PagedBytesDataInput_get__position(t_PagedBytes$PagedBytesDataInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPosition());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_PagedBytes$PagedBytesDataInput_set__position(t_PagedBytes$PagedBytesDataInput *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setPosition(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "position", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianLightStemmer::class$ = NULL;
          jmethodID *RussianLightStemmer::mids$ = NULL;
          bool RussianLightStemmer::live$ = false;

          jclass RussianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianLightStemmer::RussianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint RussianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianLightStemmer_init_(t_RussianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianLightStemmer_stem(t_RussianLightStemmer *self, PyObject *args);

          static PyMethodDef t_RussianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_RussianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianLightStemmer, t_RussianLightStemmer, ::java::lang::Object, RussianLightStemmer, t_RussianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_RussianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianLightStemmer), module, "RussianLightStemmer", 0);
          }

          void t_RussianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianLightStemmer).tp_dict, "class_", make_descriptor(RussianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_RussianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RussianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_RussianLightStemmer::wrap_Object(RussianLightStemmer(((t_RussianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_RussianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianLightStemmer_init_(t_RussianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            RussianLightStemmer object((jobject) NULL);

            INT_CALL(object = RussianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_RussianLightStemmer_stem(t_RussianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleSpanFragmenter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "org/apache/lucene/search/highlight/QueryScorer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleSpanFragmenter::class$ = NULL;
          jmethodID *SimpleSpanFragmenter::mids$ = NULL;
          bool SimpleSpanFragmenter::live$ = false;

          jclass SimpleSpanFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleSpanFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fe38f734] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/QueryScorer;)V");
              mids$[mid_init$_14d972ea] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/QueryScorer;I)V");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleSpanFragmenter::SimpleSpanFragmenter(const ::org::apache::lucene::search::highlight::QueryScorer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fe38f734, a0.this$)) {}

          SimpleSpanFragmenter::SimpleSpanFragmenter(const ::org::apache::lucene::search::highlight::QueryScorer & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_14d972ea, a0.this$, a1)) {}

          jboolean SimpleSpanFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void SimpleSpanFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleSpanFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleSpanFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleSpanFragmenter_init_(t_SimpleSpanFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleSpanFragmenter_isNewFragment(t_SimpleSpanFragmenter *self);
          static PyObject *t_SimpleSpanFragmenter_start(t_SimpleSpanFragmenter *self, PyObject *args);
          static PyObject *t_SimpleSpanFragmenter_get__newFragment(t_SimpleSpanFragmenter *self, void *data);
          static PyGetSetDef t_SimpleSpanFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_SimpleSpanFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleSpanFragmenter__methods_[] = {
            DECLARE_METHOD(t_SimpleSpanFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleSpanFragmenter, t_SimpleSpanFragmenter, ::java::lang::Object, SimpleSpanFragmenter, t_SimpleSpanFragmenter_init_, 0, 0, t_SimpleSpanFragmenter__fields_, 0, 0);

          void t_SimpleSpanFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleSpanFragmenter), module, "SimpleSpanFragmenter", 0);
          }

          void t_SimpleSpanFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleSpanFragmenter).tp_dict, "class_", make_descriptor(SimpleSpanFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleSpanFragmenter).tp_dict, "wrapfn_", make_descriptor(t_SimpleSpanFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleSpanFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleSpanFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleSpanFragmenter::initializeClass, 1)))
              return NULL;
            return t_SimpleSpanFragmenter::wrap_Object(SimpleSpanFragmenter(((t_SimpleSpanFragmenter *) arg)->object.this$));
          }
          static PyObject *t_SimpleSpanFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleSpanFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleSpanFragmenter_init_(t_SimpleSpanFragmenter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::highlight::QueryScorer a0((jobject) NULL);
                SimpleSpanFragmenter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::highlight::QueryScorer::initializeClass, &a0))
                {
                  INT_CALL(object = SimpleSpanFragmenter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::highlight::QueryScorer a0((jobject) NULL);
                jint a1;
                SimpleSpanFragmenter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::search::highlight::QueryScorer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SimpleSpanFragmenter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleSpanFragmenter_isNewFragment(t_SimpleSpanFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimpleSpanFragmenter_start(t_SimpleSpanFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_SimpleSpanFragmenter_get__newFragment(t_SimpleSpanFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Reader.h"
#include "java/lang/Readable.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *Reader::class$ = NULL;
    jmethodID *Reader::mids$ = NULL;
    bool Reader::live$ = false;

    jclass Reader::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/Reader");

        mids$ = new jmethodID[max_mid];
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_700e23c9] = env->getMethodID(cls, "read", "([C)I");
        mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
        mids$[mid_ready_54c6a16a] = env->getMethodID(cls, "ready", "()Z");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void Reader::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void Reader::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean Reader::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint Reader::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint Reader::read(const JArray< jchar > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_700e23c9], a0.this$);
    }

    jint Reader::read(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
    }

    jboolean Reader::ready() const
    {
      return env->callBooleanMethod(this$, mids$[mid_ready_54c6a16a]);
    }

    void Reader::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong Reader::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_Reader_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Reader_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Reader_close(t_Reader *self);
    static PyObject *t_Reader_mark(t_Reader *self, PyObject *arg);
    static PyObject *t_Reader_markSupported(t_Reader *self);
    static PyObject *t_Reader_read(t_Reader *self, PyObject *args);
    static PyObject *t_Reader_ready(t_Reader *self);
    static PyObject *t_Reader_reset(t_Reader *self);
    static PyObject *t_Reader_skip(t_Reader *self, PyObject *arg);

    static PyMethodDef t_Reader__methods_[] = {
      DECLARE_METHOD(t_Reader, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Reader, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Reader, close, METH_NOARGS),
      DECLARE_METHOD(t_Reader, mark, METH_O),
      DECLARE_METHOD(t_Reader, markSupported, METH_NOARGS),
      DECLARE_METHOD(t_Reader, read, METH_VARARGS),
      DECLARE_METHOD(t_Reader, ready, METH_NOARGS),
      DECLARE_METHOD(t_Reader, reset, METH_NOARGS),
      DECLARE_METHOD(t_Reader, skip, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Reader, t_Reader, ::java::lang::Object, Reader, abstract_init, 0, 0, 0, 0, 0);

    void t_Reader::install(PyObject *module)
    {
      installType(&PY_TYPE(Reader), module, "Reader", 0);
    }

    void t_Reader::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "class_", make_descriptor(Reader::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "wrapfn_", make_descriptor(t_Reader::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Reader_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Reader::initializeClass, 1)))
        return NULL;
      return t_Reader::wrap_Object(Reader(((t_Reader *) arg)->object.this$));
    }
    static PyObject *t_Reader_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Reader::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Reader_close(t_Reader *self)
    {
      OBJ_CALL(self->object.close());
      Py_RETURN_NONE;
    }

    static PyObject *t_Reader_mark(t_Reader *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "mark", arg);
      return NULL;
    }

    static PyObject *t_Reader_markSupported(t_Reader *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.markSupported());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Reader_read(t_Reader *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "read", args);
      return NULL;
    }

    static PyObject *t_Reader_ready(t_Reader *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.ready());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Reader_reset(t_Reader *self)
    {
      OBJ_CALL(self->object.reset());
      Py_RETURN_NONE;
    }

    static PyObject *t_Reader_skip(t_Reader *self, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError((PyObject *) self, "skip", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *AbstractAnalysisFactory::class$ = NULL;
          jmethodID *AbstractAnalysisFactory::mids$ = NULL;
          bool AbstractAnalysisFactory::live$ = false;
          ::java::lang::String *AbstractAnalysisFactory::LUCENE_MATCH_VERSION_PARAM = NULL;

          jclass AbstractAnalysisFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/AbstractAnalysisFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_4630d771] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_4be9e858] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;");
              mids$[mid_get_c717d02f] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_bc17366a] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_7fb22fcf] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Ljava/lang/String;Z)Ljava/lang/String;");
              mids$[mid_getChar_2bcf84e7] = env->getMethodID(cls, "getChar", "(Ljava/util/Map;Ljava/lang/String;C)C");
              mids$[mid_getClassArg_14c7b5c5] = env->getMethodID(cls, "getClassArg", "()Ljava/lang/String;");
              mids$[mid_getLuceneMatchVersion_a83d688e] = env->getMethodID(cls, "getLuceneMatchVersion", "()Lorg/apache/lucene/util/Version;");
              mids$[mid_getOriginalArgs_db60befd] = env->getMethodID(cls, "getOriginalArgs", "()Ljava/util/Map;");
              mids$[mid_getSet_3ddefc5b] = env->getMethodID(cls, "getSet", "(Ljava/util/Map;Ljava/lang/String;)Ljava/util/Set;");
              mids$[mid_isExplicitLuceneMatchVersion_54c6a16a] = env->getMethodID(cls, "isExplicitLuceneMatchVersion", "()Z");
              mids$[mid_require_4630d771] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_require_4be9e858] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;");
              mids$[mid_require_203fb939] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Z)Ljava/lang/String;");
              mids$[mid_requireChar_68876213] = env->getMethodID(cls, "requireChar", "(Ljava/util/Map;Ljava/lang/String;)C");
              mids$[mid_setExplicitLuceneMatchVersion_bb0c767f] = env->getMethodID(cls, "setExplicitLuceneMatchVersion", "(Z)V");
              mids$[mid_getBoolean_53e7fc33] = env->getMethodID(cls, "getBoolean", "(Ljava/util/Map;Ljava/lang/String;Z)Z");
              mids$[mid_getInt_29d335db] = env->getMethodID(cls, "getInt", "(Ljava/util/Map;Ljava/lang/String;I)I");
              mids$[mid_getFloat_a7ea7213] = env->getMethodID(cls, "getFloat", "(Ljava/util/Map;Ljava/lang/String;F)F");
              mids$[mid_getWordSet_94dc101c] = env->getMethodID(cls, "getWordSet", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_assureMatchVersion_54c6a166] = env->getMethodID(cls, "assureMatchVersion", "()V");
              mids$[mid_requireInt_68876219] = env->getMethodID(cls, "requireInt", "(Ljava/util/Map;Ljava/lang/String;)I");
              mids$[mid_requireBoolean_6887620a] = env->getMethodID(cls, "requireBoolean", "(Ljava/util/Map;Ljava/lang/String;)Z");
              mids$[mid_requireFloat_68876216] = env->getMethodID(cls, "requireFloat", "(Ljava/util/Map;Ljava/lang/String;)F");
              mids$[mid_getPattern_222e4d23] = env->getMethodID(cls, "getPattern", "(Ljava/util/Map;Ljava/lang/String;)Ljava/util/regex/Pattern;");
              mids$[mid_getLines_161f664b] = env->getMethodID(cls, "getLines", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;)Ljava/util/List;");
              mids$[mid_getSnowballWordSet_94dc101c] = env->getMethodID(cls, "getSnowballWordSet", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_splitFileNames_0feb8f08] = env->getMethodID(cls, "splitFileNames", "(Ljava/lang/String;)Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              LUCENE_MATCH_VERSION_PARAM = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_MATCH_VERSION_PARAM", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_4630d771], a0.this$, a1.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_4be9e858], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_c717d02f], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, const ::java::lang::String & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_bc17366a], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, const ::java::lang::String & a3, jboolean a4) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_7fb22fcf], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          jchar AbstractAnalysisFactory::getChar(const ::java::util::Map & a0, const ::java::lang::String & a1, jchar a2) const
          {
            return env->callCharMethod(this$, mids$[mid_getChar_2bcf84e7], a0.this$, a1.this$, a2);
          }

          ::java::lang::String AbstractAnalysisFactory::getClassArg() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getClassArg_14c7b5c5]));
          }

          ::org::apache::lucene::util::Version AbstractAnalysisFactory::getLuceneMatchVersion() const
          {
            return ::org::apache::lucene::util::Version(env->callObjectMethod(this$, mids$[mid_getLuceneMatchVersion_a83d688e]));
          }

          ::java::util::Map AbstractAnalysisFactory::getOriginalArgs() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getOriginalArgs_db60befd]));
          }

          ::java::util::Set AbstractAnalysisFactory::getSet(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getSet_3ddefc5b], a0.this$, a1.this$));
          }

          jboolean AbstractAnalysisFactory::isExplicitLuceneMatchVersion() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isExplicitLuceneMatchVersion_54c6a16a]);
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_4630d771], a0.this$, a1.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_4be9e858], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, jboolean a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_203fb939], a0.this$, a1.this$, a2.this$, a3));
          }

          jchar AbstractAnalysisFactory::requireChar(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return env->callCharMethod(this$, mids$[mid_requireChar_68876213], a0.this$, a1.this$);
          }

          void AbstractAnalysisFactory::setExplicitLuceneMatchVersion(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExplicitLuceneMatchVersion_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_AbstractAnalysisFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_get(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_getChar(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_getClassArg(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getLuceneMatchVersion(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getOriginalArgs(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getSet(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_isExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_require(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_requireChar(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_setExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_get__classArg(t_AbstractAnalysisFactory *self, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, void *data);
          static int t_AbstractAnalysisFactory_set__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__luceneMatchVersion(t_AbstractAnalysisFactory *self, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__originalArgs(t_AbstractAnalysisFactory *self, void *data);
          static PyGetSetDef t_AbstractAnalysisFactory__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, classArg),
            DECLARE_GETSET_FIELD(t_AbstractAnalysisFactory, explicitLuceneMatchVersion),
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, luceneMatchVersion),
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, originalArgs),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAnalysisFactory__methods_[] = {
            DECLARE_METHOD(t_AbstractAnalysisFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, get, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getChar, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getClassArg, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getLuceneMatchVersion, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getOriginalArgs, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getSet, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, isExplicitLuceneMatchVersion, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, require, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, requireChar, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, setExplicitLuceneMatchVersion, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAnalysisFactory, t_AbstractAnalysisFactory, ::java::lang::Object, AbstractAnalysisFactory, abstract_init, 0, 0, t_AbstractAnalysisFactory__fields_, 0, 0);

          void t_AbstractAnalysisFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAnalysisFactory), module, "AbstractAnalysisFactory", 0);
          }

          void t_AbstractAnalysisFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "class_", make_descriptor(AbstractAnalysisFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "wrapfn_", make_descriptor(t_AbstractAnalysisFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(AbstractAnalysisFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "LUCENE_MATCH_VERSION_PARAM", make_descriptor(j2p(*AbstractAnalysisFactory::LUCENE_MATCH_VERSION_PARAM)));
          }

          static PyObject *t_AbstractAnalysisFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAnalysisFactory::initializeClass, 1)))
              return NULL;
            return t_AbstractAnalysisFactory::wrap_Object(AbstractAnalysisFactory(((t_AbstractAnalysisFactory *) arg)->object.this$));
          }
          static PyObject *t_AbstractAnalysisFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAnalysisFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAnalysisFactory_get(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.get(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsK", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2));
                  return j2p(result);
                }
              }
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Kss", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2));
                  return j2p(result);
                }
              }
              break;
             case 4:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKs", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 5:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String a3((jobject) NULL);
                jboolean a4;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKsZ", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3, a4));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_getChar(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            jchar a2;
            jchar result;

            if (!parseArgs(args, "KsC", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getChar(a0, a1, a2));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "getChar", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_getClassArg(t_AbstractAnalysisFactory *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getClassArg());
            return j2p(result);
          }

          static PyObject *t_AbstractAnalysisFactory_getLuceneMatchVersion(t_AbstractAnalysisFactory *self)
          {
            ::org::apache::lucene::util::Version result((jobject) NULL);
            OBJ_CALL(result = self->object.getLuceneMatchVersion());
            return ::org::apache::lucene::util::t_Version::wrap_Object(result);
          }

          static PyObject *t_AbstractAnalysisFactory_getOriginalArgs(t_AbstractAnalysisFactory *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getOriginalArgs());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_AbstractAnalysisFactory_getSet(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::java::util::Set result((jobject) NULL);

            if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getSet(a0, a1));
              return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError((PyObject *) self, "getSet", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_isExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isExplicitLuceneMatchVersion());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_AbstractAnalysisFactory_require(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.require(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsK", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.require(a0, a1, a2));
                  return j2p(result);
                }
              }
              break;
             case 4:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKZ", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3))
                {
                  OBJ_CALL(result = self->object.require(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "require", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_requireChar(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            jchar result;

            if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.requireChar(a0, a1));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "requireChar", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_setExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExplicitLuceneMatchVersion(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExplicitLuceneMatchVersion", arg);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_get__classArg(t_AbstractAnalysisFactory *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getClassArg());
            return j2p(value);
          }

          static PyObject *t_AbstractAnalysisFactory_get__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isExplicitLuceneMatchVersion());
            Py_RETURN_BOOL(value);
          }
          static int t_AbstractAnalysisFactory_set__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExplicitLuceneMatchVersion(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "explicitLuceneMatchVersion", arg);
            return -1;
          }

          static PyObject *t_AbstractAnalysisFactory_get__luceneMatchVersion(t_AbstractAnalysisFactory *self, void *data)
          {
            ::org::apache::lucene::util::Version value((jobject) NULL);
            OBJ_CALL(value = self->object.getLuceneMatchVersion());
            return ::org::apache::lucene::util::t_Version::wrap_Object(value);
          }

          static PyObject *t_AbstractAnalysisFactory_get__originalArgs(t_AbstractAnalysisFactory *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getOriginalArgs());
            return ::java::util::t_Map::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hi/HindiStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {

          ::java::lang::Class *HindiStemmer::class$ = NULL;
          jmethodID *HindiStemmer::mids$ = NULL;
          bool HindiStemmer::live$ = false;

          jclass HindiStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hi/HindiStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HindiStemmer::HindiStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint HindiStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hi {
          static PyObject *t_HindiStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HindiStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HindiStemmer_init_(t_HindiStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HindiStemmer_stem(t_HindiStemmer *self, PyObject *args);

          static PyMethodDef t_HindiStemmer__methods_[] = {
            DECLARE_METHOD(t_HindiStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HindiStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HindiStemmer, t_HindiStemmer, ::java::lang::Object, HindiStemmer, t_HindiStemmer_init_, 0, 0, 0, 0, 0);

          void t_HindiStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(HindiStemmer), module, "HindiStemmer", 0);
          }

          void t_HindiStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HindiStemmer).tp_dict, "class_", make_descriptor(HindiStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HindiStemmer).tp_dict, "wrapfn_", make_descriptor(t_HindiStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HindiStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HindiStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HindiStemmer::initializeClass, 1)))
              return NULL;
            return t_HindiStemmer::wrap_Object(HindiStemmer(((t_HindiStemmer *) arg)->object.this$));
          }
          static PyObject *t_HindiStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HindiStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HindiStemmer_init_(t_HindiStemmer *self, PyObject *args, PyObject *kwds)
          {
            HindiStemmer object((jobject) NULL);

            INT_CALL(object = HindiStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HindiStemmer_stem(t_HindiStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ComplexExplanation.h"
#include "java/lang/String.h"
#include "java/lang/Boolean.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ComplexExplanation::class$ = NULL;
        jmethodID *ComplexExplanation::mids$ = NULL;
        bool ComplexExplanation::live$ = false;

        jclass ComplexExplanation::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ComplexExplanation");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_2ed007a2] = env->getMethodID(cls, "<init>", "(ZFLjava/lang/String;)V");
            mids$[mid_getMatch_34327cc3] = env->getMethodID(cls, "getMatch", "()Ljava/lang/Boolean;");
            mids$[mid_isMatch_54c6a16a] = env->getMethodID(cls, "isMatch", "()Z");
            mids$[mid_setMatch_d07f0c8e] = env->getMethodID(cls, "setMatch", "(Ljava/lang/Boolean;)V");
            mids$[mid_getSummary_14c7b5c5] = env->getMethodID(cls, "getSummary", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ComplexExplanation::ComplexExplanation() : ::org::apache::lucene::search::Explanation(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ComplexExplanation::ComplexExplanation(jboolean a0, jfloat a1, const ::java::lang::String & a2) : ::org::apache::lucene::search::Explanation(env->newObject(initializeClass, &mids$, mid_init$_2ed007a2, a0, a1, a2.this$)) {}

        ::java::lang::Boolean ComplexExplanation::getMatch() const
        {
          return ::java::lang::Boolean(env->callObjectMethod(this$, mids$[mid_getMatch_34327cc3]));
        }

        jboolean ComplexExplanation::isMatch() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isMatch_54c6a16a]);
        }

        void ComplexExplanation::setMatch(const ::java::lang::Boolean & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMatch_d07f0c8e], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ComplexExplanation_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ComplexExplanation_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ComplexExplanation_init_(t_ComplexExplanation *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ComplexExplanation_getMatch(t_ComplexExplanation *self);
        static PyObject *t_ComplexExplanation_isMatch(t_ComplexExplanation *self, PyObject *args);
        static PyObject *t_ComplexExplanation_setMatch(t_ComplexExplanation *self, PyObject *arg);
        static PyObject *t_ComplexExplanation_get__match(t_ComplexExplanation *self, void *data);
        static int t_ComplexExplanation_set__match(t_ComplexExplanation *self, PyObject *arg, void *data);
        static PyGetSetDef t_ComplexExplanation__fields_[] = {
          DECLARE_GETSET_FIELD(t_ComplexExplanation, match),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ComplexExplanation__methods_[] = {
          DECLARE_METHOD(t_ComplexExplanation, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ComplexExplanation, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ComplexExplanation, getMatch, METH_NOARGS),
          DECLARE_METHOD(t_ComplexExplanation, isMatch, METH_VARARGS),
          DECLARE_METHOD(t_ComplexExplanation, setMatch, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ComplexExplanation, t_ComplexExplanation, ::org::apache::lucene::search::Explanation, ComplexExplanation, t_ComplexExplanation_init_, 0, 0, t_ComplexExplanation__fields_, 0, 0);

        void t_ComplexExplanation::install(PyObject *module)
        {
          installType(&PY_TYPE(ComplexExplanation), module, "ComplexExplanation", 0);
        }

        void t_ComplexExplanation::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ComplexExplanation).tp_dict, "class_", make_descriptor(ComplexExplanation::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ComplexExplanation).tp_dict, "wrapfn_", make_descriptor(t_ComplexExplanation::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ComplexExplanation).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ComplexExplanation_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ComplexExplanation::initializeClass, 1)))
            return NULL;
          return t_ComplexExplanation::wrap_Object(ComplexExplanation(((t_ComplexExplanation *) arg)->object.this$));
        }
        static PyObject *t_ComplexExplanation_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ComplexExplanation::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ComplexExplanation_init_(t_ComplexExplanation *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ComplexExplanation object((jobject) NULL);

              INT_CALL(object = ComplexExplanation());
              self->object = object;
              break;
            }
            goto err;
           case 3:
            {
              jboolean a0;
              jfloat a1;
              ::java::lang::String a2((jobject) NULL);
              ComplexExplanation object((jobject) NULL);

              if (!parseArgs(args, "ZFs", &a0, &a1, &a2))
              {
                INT_CALL(object = ComplexExplanation(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ComplexExplanation_getMatch(t_ComplexExplanation *self)
        {
          ::java::lang::Boolean result((jobject) NULL);
          OBJ_CALL(result = self->object.getMatch());
          return ::java::lang::t_Boolean::wrap_Object(result);
        }

        static PyObject *t_ComplexExplanation_isMatch(t_ComplexExplanation *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isMatch());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ComplexExplanation), (PyObject *) self, "isMatch", args, 2);
        }

        static PyObject *t_ComplexExplanation_setMatch(t_ComplexExplanation *self, PyObject *arg)
        {
          ::java::lang::Boolean a0((jobject) NULL);

          if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Boolean), &a0))
          {
            OBJ_CALL(self->object.setMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMatch", arg);
          return NULL;
        }

        static PyObject *t_ComplexExplanation_get__match(t_ComplexExplanation *self, void *data)
        {
          ::java::lang::Boolean value((jobject) NULL);
          OBJ_CALL(value = self->object.getMatch());
          return ::java::lang::t_Boolean::wrap_Object(value);
        }
        static int t_ComplexExplanation_set__match(t_ComplexExplanation *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Boolean value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Boolean), &value))
            {
              INT_CALL(self->object.setMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "match", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekLowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/el/GreekLowerCaseFilter.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekLowerCaseFilterFactory::class$ = NULL;
          jmethodID *GreekLowerCaseFilterFactory::mids$ = NULL;
          bool GreekLowerCaseFilterFactory::live$ = false;

          jclass GreekLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ce990bd7] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/el/GreekLowerCaseFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekLowerCaseFilterFactory::GreekLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::el::GreekLowerCaseFilter GreekLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::el::GreekLowerCaseFilter(env->callObjectMethod(this$, mids$[mid_create_ce990bd7], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory GreekLowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekLowerCaseFilterFactory_init_(t_GreekLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekLowerCaseFilterFactory_create(t_GreekLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_GreekLowerCaseFilterFactory_getMultiTermComponent(t_GreekLowerCaseFilterFactory *self);
          static PyObject *t_GreekLowerCaseFilterFactory_get__multiTermComponent(t_GreekLowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_GreekLowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_GreekLowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GreekLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekLowerCaseFilterFactory, t_GreekLowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GreekLowerCaseFilterFactory, t_GreekLowerCaseFilterFactory_init_, 0, 0, t_GreekLowerCaseFilterFactory__fields_, 0, 0);

          void t_GreekLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekLowerCaseFilterFactory), module, "GreekLowerCaseFilterFactory", 0);
          }

          void t_GreekLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilterFactory).tp_dict, "class_", make_descriptor(GreekLowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GreekLowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GreekLowerCaseFilterFactory::wrap_Object(GreekLowerCaseFilterFactory(((t_GreekLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GreekLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekLowerCaseFilterFactory_init_(t_GreekLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GreekLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GreekLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekLowerCaseFilterFactory_create(t_GreekLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::el::GreekLowerCaseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::el::t_GreekLowerCaseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GreekLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_GreekLowerCaseFilterFactory_getMultiTermComponent(t_GreekLowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_GreekLowerCaseFilterFactory_get__multiTermComponent(t_GreekLowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SpanNearClauseFactory::class$ = NULL;
            jmethodID *SpanNearClauseFactory::mids$ = NULL;
            bool SpanNearClauseFactory::live$ = false;

            jclass SpanNearClauseFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SpanNearClauseFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_e15223d7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)V");
                mids$[mid_addSpanQuery_6e301113] = env->getMethodID(cls, "addSpanQuery", "(Lorg/apache/lucene/search/Query;)V");
                mids$[mid_addTermWeighted_286d05ee] = env->getMethodID(cls, "addTermWeighted", "(Lorg/apache/lucene/index/Term;F)V");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_getBasicQueryFactory_d652c3af] = env->getMethodID(cls, "getBasicQueryFactory", "()Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;");
                mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
                mids$[mid_getIndexReader_94bbd010] = env->getMethodID(cls, "getIndexReader", "()Lorg/apache/lucene/index/IndexReader;");
                mids$[mid_makeSpanClause_d3aa0332] = env->getMethodID(cls, "makeSpanClause", "()Lorg/apache/lucene/search/spans/SpanQuery;");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_addSpanQueryWeighted_3125e560] = env->getMethodID(cls, "addSpanQueryWeighted", "(Lorg/apache/lucene/search/spans/SpanQuery;F)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanNearClauseFactory::SpanNearClauseFactory(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e15223d7, a0.this$, a1.this$, a2.this$)) {}

            void SpanNearClauseFactory::addSpanQuery(const ::org::apache::lucene::search::Query & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addSpanQuery_6e301113], a0.this$);
            }

            void SpanNearClauseFactory::addTermWeighted(const ::org::apache::lucene::index::Term & a0, jfloat a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addTermWeighted_286d05ee], a0.this$, a1);
            }

            void SpanNearClauseFactory::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory SpanNearClauseFactory::getBasicQueryFactory() const
            {
              return ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory(env->callObjectMethod(this$, mids$[mid_getBasicQueryFactory_d652c3af]));
            }

            ::java::lang::String SpanNearClauseFactory::getFieldName() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
            }

            ::org::apache::lucene::index::IndexReader SpanNearClauseFactory::getIndexReader() const
            {
              return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getIndexReader_94bbd010]));
            }

            ::org::apache::lucene::search::spans::SpanQuery SpanNearClauseFactory::makeSpanClause() const
            {
              return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_makeSpanClause_d3aa0332]));
            }

            jint SpanNearClauseFactory::size() const
            {
              return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SpanNearClauseFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanNearClauseFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanNearClauseFactory_init_(t_SpanNearClauseFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SpanNearClauseFactory_addSpanQuery(t_SpanNearClauseFactory *self, PyObject *arg);
            static PyObject *t_SpanNearClauseFactory_addTermWeighted(t_SpanNearClauseFactory *self, PyObject *args);
            static PyObject *t_SpanNearClauseFactory_clear(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getBasicQueryFactory(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getFieldName(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_getIndexReader(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_makeSpanClause(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_size(t_SpanNearClauseFactory *self);
            static PyObject *t_SpanNearClauseFactory_get__basicQueryFactory(t_SpanNearClauseFactory *self, void *data);
            static PyObject *t_SpanNearClauseFactory_get__fieldName(t_SpanNearClauseFactory *self, void *data);
            static PyObject *t_SpanNearClauseFactory_get__indexReader(t_SpanNearClauseFactory *self, void *data);
            static PyGetSetDef t_SpanNearClauseFactory__fields_[] = {
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, basicQueryFactory),
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, fieldName),
              DECLARE_GET_FIELD(t_SpanNearClauseFactory, indexReader),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SpanNearClauseFactory__methods_[] = {
              DECLARE_METHOD(t_SpanNearClauseFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNearClauseFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanNearClauseFactory, addSpanQuery, METH_O),
              DECLARE_METHOD(t_SpanNearClauseFactory, addTermWeighted, METH_VARARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, clear, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getBasicQueryFactory, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getFieldName, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, getIndexReader, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, makeSpanClause, METH_NOARGS),
              DECLARE_METHOD(t_SpanNearClauseFactory, size, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanNearClauseFactory, t_SpanNearClauseFactory, ::java::lang::Object, SpanNearClauseFactory, t_SpanNearClauseFactory_init_, 0, 0, t_SpanNearClauseFactory__fields_, 0, 0);

            void t_SpanNearClauseFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanNearClauseFactory), module, "SpanNearClauseFactory", 0);
            }

            void t_SpanNearClauseFactory::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanNearClauseFactory).tp_dict, "class_", make_descriptor(SpanNearClauseFactory::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanNearClauseFactory).tp_dict, "wrapfn_", make_descriptor(t_SpanNearClauseFactory::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanNearClauseFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanNearClauseFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanNearClauseFactory::initializeClass, 1)))
                return NULL;
              return t_SpanNearClauseFactory::wrap_Object(SpanNearClauseFactory(((t_SpanNearClauseFactory *) arg)->object.this$));
            }
            static PyObject *t_SpanNearClauseFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanNearClauseFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanNearClauseFactory_init_(t_SpanNearClauseFactory *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a2((jobject) NULL);
              SpanNearClauseFactory object((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SpanNearClauseFactory(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SpanNearClauseFactory_addSpanQuery(t_SpanNearClauseFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(self->object.addSpanQuery(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addSpanQuery", arg);
              return NULL;
            }

            static PyObject *t_SpanNearClauseFactory_addTermWeighted(t_SpanNearClauseFactory *self, PyObject *args)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jfloat a1;

              if (!parseArgs(args, "kF", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addTermWeighted(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addTermWeighted", args);
              return NULL;
            }

            static PyObject *t_SpanNearClauseFactory_clear(t_SpanNearClauseFactory *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_SpanNearClauseFactory_getBasicQueryFactory(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory result((jobject) NULL);
              OBJ_CALL(result = self->object.getBasicQueryFactory());
              return ::org::apache::lucene::queryparser::surround::query::t_BasicQueryFactory::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_getFieldName(t_SpanNearClauseFactory *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldName());
              return j2p(result);
            }

            static PyObject *t_SpanNearClauseFactory_getIndexReader(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::index::IndexReader result((jobject) NULL);
              OBJ_CALL(result = self->object.getIndexReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_makeSpanClause(t_SpanNearClauseFactory *self)
            {
              ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.makeSpanClause());
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            static PyObject *t_SpanNearClauseFactory_size(t_SpanNearClauseFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_SpanNearClauseFactory_get__basicQueryFactory(t_SpanNearClauseFactory *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory value((jobject) NULL);
              OBJ_CALL(value = self->object.getBasicQueryFactory());
              return ::org::apache::lucene::queryparser::surround::query::t_BasicQueryFactory::wrap_Object(value);
            }

            static PyObject *t_SpanNearClauseFactory_get__fieldName(t_SpanNearClauseFactory *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldName());
              return j2p(value);
            }

            static PyObject *t_SpanNearClauseFactory_get__indexReader(t_SpanNearClauseFactory *self, void *data)
            {
              ::org::apache::lucene::index::IndexReader value((jobject) NULL);
              OBJ_CALL(value = self->object.getIndexReader());
              return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AppendingDeltaPackedLongBuffer::class$ = NULL;
          jmethodID *AppendingDeltaPackedLongBuffer::mids$ = NULL;
          bool AppendingDeltaPackedLongBuffer::live$ = false;

          jclass AppendingDeltaPackedLongBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AppendingDeltaPackedLongBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_init$_a74e6883] = env->getMethodID(cls, "<init>", "(IIF)V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AppendingDeltaPackedLongBuffer::AppendingDeltaPackedLongBuffer() : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          AppendingDeltaPackedLongBuffer::AppendingDeltaPackedLongBuffer(jfloat a0) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          AppendingDeltaPackedLongBuffer::AppendingDeltaPackedLongBuffer(jint a0, jint a1, jfloat a2) : ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer(env->newObject(initializeClass, &mids$, mid_init$_a74e6883, a0, a1, a2)) {}

          jlong AppendingDeltaPackedLongBuffer::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AppendingDeltaPackedLongBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AppendingDeltaPackedLongBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AppendingDeltaPackedLongBuffer_init_(t_AppendingDeltaPackedLongBuffer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AppendingDeltaPackedLongBuffer_ramBytesUsed(t_AppendingDeltaPackedLongBuffer *self, PyObject *args);

          static PyMethodDef t_AppendingDeltaPackedLongBuffer__methods_[] = {
            DECLARE_METHOD(t_AppendingDeltaPackedLongBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AppendingDeltaPackedLongBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AppendingDeltaPackedLongBuffer, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AppendingDeltaPackedLongBuffer, t_AppendingDeltaPackedLongBuffer, ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer, AppendingDeltaPackedLongBuffer, t_AppendingDeltaPackedLongBuffer_init_, 0, 0, 0, 0, 0);

          void t_AppendingDeltaPackedLongBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(AppendingDeltaPackedLongBuffer), module, "AppendingDeltaPackedLongBuffer", 0);
          }

          void t_AppendingDeltaPackedLongBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AppendingDeltaPackedLongBuffer).tp_dict, "class_", make_descriptor(AppendingDeltaPackedLongBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AppendingDeltaPackedLongBuffer).tp_dict, "wrapfn_", make_descriptor(t_AppendingDeltaPackedLongBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AppendingDeltaPackedLongBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AppendingDeltaPackedLongBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AppendingDeltaPackedLongBuffer::initializeClass, 1)))
              return NULL;
            return t_AppendingDeltaPackedLongBuffer::wrap_Object(AppendingDeltaPackedLongBuffer(((t_AppendingDeltaPackedLongBuffer *) arg)->object.this$));
          }
          static PyObject *t_AppendingDeltaPackedLongBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AppendingDeltaPackedLongBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AppendingDeltaPackedLongBuffer_init_(t_AppendingDeltaPackedLongBuffer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                AppendingDeltaPackedLongBuffer object((jobject) NULL);

                INT_CALL(object = AppendingDeltaPackedLongBuffer());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                AppendingDeltaPackedLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = AppendingDeltaPackedLongBuffer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jint a0;
                jint a1;
                jfloat a2;
                AppendingDeltaPackedLongBuffer object((jobject) NULL);

                if (!parseArgs(args, "IIF", &a0, &a1, &a2))
                {
                  INT_CALL(object = AppendingDeltaPackedLongBuffer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AppendingDeltaPackedLongBuffer_ramBytesUsed(t_AppendingDeltaPackedLongBuffer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(AppendingDeltaPackedLongBuffer), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ScoreCachingWrappingScorer.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ScoreCachingWrappingScorer::class$ = NULL;
        jmethodID *ScoreCachingWrappingScorer::mids$ = NULL;
        bool ScoreCachingWrappingScorer::live$ = false;

        jclass ScoreCachingWrappingScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ScoreCachingWrappingScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8be0880c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_getChildren_2d2d7de4] = env->getMethodID(cls, "getChildren", "()Ljava/util/Collection;");
            mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ScoreCachingWrappingScorer::ScoreCachingWrappingScorer(const ::org::apache::lucene::search::Scorer & a0) : ::org::apache::lucene::search::FilterScorer(env->newObject(initializeClass, &mids$, mid_init$_8be0880c, a0.this$)) {}

        ::java::util::Collection ScoreCachingWrappingScorer::getChildren() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getChildren_2d2d7de4]));
        }

        jfloat ScoreCachingWrappingScorer::score() const
        {
          return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ScoreCachingWrappingScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ScoreCachingWrappingScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ScoreCachingWrappingScorer_init_(t_ScoreCachingWrappingScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ScoreCachingWrappingScorer_getChildren(t_ScoreCachingWrappingScorer *self, PyObject *args);
        static PyObject *t_ScoreCachingWrappingScorer_score(t_ScoreCachingWrappingScorer *self, PyObject *args);
        static PyObject *t_ScoreCachingWrappingScorer_get__children(t_ScoreCachingWrappingScorer *self, void *data);
        static PyGetSetDef t_ScoreCachingWrappingScorer__fields_[] = {
          DECLARE_GET_FIELD(t_ScoreCachingWrappingScorer, children),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ScoreCachingWrappingScorer__methods_[] = {
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, getChildren, METH_VARARGS),
          DECLARE_METHOD(t_ScoreCachingWrappingScorer, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ScoreCachingWrappingScorer, t_ScoreCachingWrappingScorer, ::org::apache::lucene::search::FilterScorer, ScoreCachingWrappingScorer, t_ScoreCachingWrappingScorer_init_, 0, 0, t_ScoreCachingWrappingScorer__fields_, 0, 0);

        void t_ScoreCachingWrappingScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(ScoreCachingWrappingScorer), module, "ScoreCachingWrappingScorer", 0);
        }

        void t_ScoreCachingWrappingScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ScoreCachingWrappingScorer).tp_dict, "class_", make_descriptor(ScoreCachingWrappingScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ScoreCachingWrappingScorer).tp_dict, "wrapfn_", make_descriptor(t_ScoreCachingWrappingScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ScoreCachingWrappingScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ScoreCachingWrappingScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ScoreCachingWrappingScorer::initializeClass, 1)))
            return NULL;
          return t_ScoreCachingWrappingScorer::wrap_Object(ScoreCachingWrappingScorer(((t_ScoreCachingWrappingScorer *) arg)->object.this$));
        }
        static PyObject *t_ScoreCachingWrappingScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ScoreCachingWrappingScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ScoreCachingWrappingScorer_init_(t_ScoreCachingWrappingScorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);
          ScoreCachingWrappingScorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            INT_CALL(object = ScoreCachingWrappingScorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ScoreCachingWrappingScorer_getChildren(t_ScoreCachingWrappingScorer *self, PyObject *args)
        {
          ::java::util::Collection result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getChildren());
            return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::search::PY_TYPE(Scorer$ChildScorer));
          }

          return callSuper(&PY_TYPE(ScoreCachingWrappingScorer), (PyObject *) self, "getChildren", args, 2);
        }

        static PyObject *t_ScoreCachingWrappingScorer_score(t_ScoreCachingWrappingScorer *self, PyObject *args)
        {
          jfloat result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.score());
            return PyFloat_FromDouble((double) result);
          }

          return callSuper(&PY_TYPE(ScoreCachingWrappingScorer), (PyObject *) self, "score", args, 2);
        }

        static PyObject *t_ScoreCachingWrappingScorer_get__children(t_ScoreCachingWrappingScorer *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getChildren());
          return ::java::util::t_Collection::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/util/Set.h"
#include "java/lang/Character.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleBoundaryScanner::class$ = NULL;
          jmethodID *SimpleBoundaryScanner::mids$ = NULL;
          bool SimpleBoundaryScanner::live$ = false;
          JArray< ::java::lang::Character > *SimpleBoundaryScanner::DEFAULT_BOUNDARY_CHARS = NULL;
          jint SimpleBoundaryScanner::DEFAULT_MAX_SCAN = (jint) 0;

          jclass SimpleBoundaryScanner::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleBoundaryScanner");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_a03f060b] = env->getMethodID(cls, "<init>", "([Ljava/lang/Character;)V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_4d893084] = env->getMethodID(cls, "<init>", "(ILjava/util/Set;)V");
              mids$[mid_init$_ac2fcfe5] = env->getMethodID(cls, "<init>", "(I[Ljava/lang/Character;)V");
              mids$[mid_findEndOffset_f3d950f1] = env->getMethodID(cls, "findEndOffset", "(Ljava/lang/StringBuilder;I)I");
              mids$[mid_findStartOffset_f3d950f1] = env->getMethodID(cls, "findStartOffset", "(Ljava/lang/StringBuilder;I)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_BOUNDARY_CHARS = new JArray< ::java::lang::Character >(env->getStaticObjectField(cls, "DEFAULT_BOUNDARY_CHARS", "[Ljava/lang/Character;"));
              DEFAULT_MAX_SCAN = env->getStaticIntField(cls, "DEFAULT_MAX_SCAN");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleBoundaryScanner::SimpleBoundaryScanner() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(const JArray< ::java::lang::Character > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a03f060b, a0.this$)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0, const ::java::util::Set & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4d893084, a0, a1.this$)) {}

          SimpleBoundaryScanner::SimpleBoundaryScanner(jint a0, const JArray< ::java::lang::Character > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ac2fcfe5, a0, a1.this$)) {}

          jint SimpleBoundaryScanner::findEndOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findEndOffset_f3d950f1], a0.this$, a1);
          }

          jint SimpleBoundaryScanner::findStartOffset(const ::java::lang::StringBuilder & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_findStartOffset_f3d950f1], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleBoundaryScanner_init_(t_SimpleBoundaryScanner *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleBoundaryScanner_findEndOffset(t_SimpleBoundaryScanner *self, PyObject *args);
          static PyObject *t_SimpleBoundaryScanner_findStartOffset(t_SimpleBoundaryScanner *self, PyObject *args);

          static PyMethodDef t_SimpleBoundaryScanner__methods_[] = {
            DECLARE_METHOD(t_SimpleBoundaryScanner, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, findEndOffset, METH_VARARGS),
            DECLARE_METHOD(t_SimpleBoundaryScanner, findStartOffset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleBoundaryScanner, t_SimpleBoundaryScanner, ::java::lang::Object, SimpleBoundaryScanner, t_SimpleBoundaryScanner_init_, 0, 0, 0, 0, 0);

          void t_SimpleBoundaryScanner::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleBoundaryScanner), module, "SimpleBoundaryScanner", 0);
          }

          void t_SimpleBoundaryScanner::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "class_", make_descriptor(SimpleBoundaryScanner::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "wrapfn_", make_descriptor(t_SimpleBoundaryScanner::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SimpleBoundaryScanner::initializeClass);
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "DEFAULT_BOUNDARY_CHARS", make_descriptor(JArray<jobject>(SimpleBoundaryScanner::DEFAULT_BOUNDARY_CHARS->this$).wrap(::java::lang::t_Character::wrap_jobject)));
            PyDict_SetItemString(PY_TYPE(SimpleBoundaryScanner).tp_dict, "DEFAULT_MAX_SCAN", make_descriptor(SimpleBoundaryScanner::DEFAULT_MAX_SCAN));
          }

          static PyObject *t_SimpleBoundaryScanner_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleBoundaryScanner::initializeClass, 1)))
              return NULL;
            return t_SimpleBoundaryScanner::wrap_Object(SimpleBoundaryScanner(((t_SimpleBoundaryScanner *) arg)->object.this$));
          }
          static PyObject *t_SimpleBoundaryScanner_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleBoundaryScanner::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleBoundaryScanner_init_(t_SimpleBoundaryScanner *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleBoundaryScanner object((jobject) NULL);

                INT_CALL(object = SimpleBoundaryScanner());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                JArray< ::java::lang::Character > a0((jobject) NULL);
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "[O", &::java::lang::PY_TYPE(Character), &a0))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                ::java::util::Set a1((jobject) NULL);
                PyTypeObject **p1;
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                jint a0;
                JArray< ::java::lang::Character > a1((jobject) NULL);
                SimpleBoundaryScanner object((jobject) NULL);

                if (!parseArgs(args, "I[O", &::java::lang::PY_TYPE(Character), &a0, &a1))
                {
                  INT_CALL(object = SimpleBoundaryScanner(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleBoundaryScanner_findEndOffset(t_SimpleBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findEndOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findEndOffset", args);
            return NULL;
          }

          static PyObject *t_SimpleBoundaryScanner_findStartOffset(t_SimpleBoundaryScanner *self, PyObject *args)
          {
            ::java::lang::StringBuilder a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "kI", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.findStartOffset(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "findStartOffset", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractBlockPackedWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractBlockPackedWriter::class$ = NULL;
          jmethodID *AbstractBlockPackedWriter::mids$ = NULL;
          bool AbstractBlockPackedWriter::live$ = false;

          jclass AbstractBlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractBlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4663c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_finish_54c6a166] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_reset_27875f57] = env->getMethodID(cls, "reset", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
              mids$[mid_writeValues_39c7bd3c] = env->getMethodID(cls, "writeValues", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractBlockPackedWriter::AbstractBlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f4663c33, a0.this$, a1)) {}

          void AbstractBlockPackedWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          void AbstractBlockPackedWriter::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_54c6a166]);
          }

          jlong AbstractBlockPackedWriter::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
          }

          void AbstractBlockPackedWriter::reset(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_27875f57], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractBlockPackedWriter_init_(t_AbstractBlockPackedWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractBlockPackedWriter_add(t_AbstractBlockPackedWriter *self, PyObject *arg);
          static PyObject *t_AbstractBlockPackedWriter_finish(t_AbstractBlockPackedWriter *self);
          static PyObject *t_AbstractBlockPackedWriter_ord(t_AbstractBlockPackedWriter *self);
          static PyObject *t_AbstractBlockPackedWriter_reset(t_AbstractBlockPackedWriter *self, PyObject *arg);

          static PyMethodDef t_AbstractBlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_AbstractBlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, add, METH_O),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, finish, METH_NOARGS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, ord, METH_NOARGS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, reset, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractBlockPackedWriter, t_AbstractBlockPackedWriter, ::java::lang::Object, AbstractBlockPackedWriter, t_AbstractBlockPackedWriter_init_, 0, 0, 0, 0, 0);

          void t_AbstractBlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractBlockPackedWriter), module, "AbstractBlockPackedWriter", 0);
          }

          void t_AbstractBlockPackedWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractBlockPackedWriter).tp_dict, "class_", make_descriptor(AbstractBlockPackedWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractBlockPackedWriter).tp_dict, "wrapfn_", make_descriptor(t_AbstractBlockPackedWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractBlockPackedWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractBlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_AbstractBlockPackedWriter::wrap_Object(AbstractBlockPackedWriter(((t_AbstractBlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_AbstractBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractBlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractBlockPackedWriter_init_(t_AbstractBlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            AbstractBlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = AbstractBlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractBlockPackedWriter_add(t_AbstractBlockPackedWriter *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_AbstractBlockPackedWriter_finish(t_AbstractBlockPackedWriter *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_AbstractBlockPackedWriter_ord(t_AbstractBlockPackedWriter *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractBlockPackedWriter_reset(t_AbstractBlockPackedWriter *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/DanishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *DanishStemmer::class$ = NULL;
        jmethodID *DanishStemmer::mids$ = NULL;
        bool DanishStemmer::live$ = false;

        jclass DanishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/DanishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DanishStemmer::DanishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean DanishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint DanishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean DanishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_DanishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DanishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DanishStemmer_init_(t_DanishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DanishStemmer_equals(t_DanishStemmer *self, PyObject *args);
        static PyObject *t_DanishStemmer_hashCode(t_DanishStemmer *self, PyObject *args);
        static PyObject *t_DanishStemmer_stem(t_DanishStemmer *self, PyObject *args);

        static PyMethodDef t_DanishStemmer__methods_[] = {
          DECLARE_METHOD(t_DanishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DanishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DanishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_DanishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_DanishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DanishStemmer, t_DanishStemmer, ::org::tartarus::snowball::SnowballProgram, DanishStemmer, t_DanishStemmer_init_, 0, 0, 0, 0, 0);

        void t_DanishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(DanishStemmer), module, "DanishStemmer", 0);
        }

        void t_DanishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DanishStemmer).tp_dict, "class_", make_descriptor(DanishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DanishStemmer).tp_dict, "wrapfn_", make_descriptor(t_DanishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DanishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DanishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DanishStemmer::initializeClass, 1)))
            return NULL;
          return t_DanishStemmer::wrap_Object(DanishStemmer(((t_DanishStemmer *) arg)->object.this$));
        }
        static PyObject *t_DanishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DanishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DanishStemmer_init_(t_DanishStemmer *self, PyObject *args, PyObject *kwds)
        {
          DanishStemmer object((jobject) NULL);

          INT_CALL(object = DanishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_DanishStemmer_equals(t_DanishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DanishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_DanishStemmer_hashCode(t_DanishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(DanishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_DanishStemmer_stem(t_DanishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(DanishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemmer::class$ = NULL;
          jmethodID *LatvianStemmer::mids$ = NULL;
          bool LatvianStemmer::live$ = false;

          jclass LatvianStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemmer::LatvianStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint LatvianStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemmer_init_(t_LatvianStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemmer_stem(t_LatvianStemmer *self, PyObject *args);

          static PyMethodDef t_LatvianStemmer__methods_[] = {
            DECLARE_METHOD(t_LatvianStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianStemmer, t_LatvianStemmer, ::java::lang::Object, LatvianStemmer, t_LatvianStemmer_init_, 0, 0, 0, 0, 0);

          void t_LatvianStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemmer), module, "LatvianStemmer", 0);
          }

          void t_LatvianStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianStemmer).tp_dict, "class_", make_descriptor(LatvianStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianStemmer).tp_dict, "wrapfn_", make_descriptor(t_LatvianStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatvianStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemmer::initializeClass, 1)))
              return NULL;
            return t_LatvianStemmer::wrap_Object(LatvianStemmer(((t_LatvianStemmer *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemmer_init_(t_LatvianStemmer *self, PyObject *args, PyObject *kwds)
          {
            LatvianStemmer object((jobject) NULL);

            INT_CALL(object = LatvianStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_LatvianStemmer_stem(t_LatvianStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterDocsEnum.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterDocsEnum::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterDocsEnum::mids$ = NULL;
        bool FilterAtomicReader$FilterDocsEnum::live$ = false;

        jclass FilterAtomicReader$FilterDocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterDocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ea9b58a1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/DocsEnum;)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterDocsEnum::FilterAtomicReader$FilterDocsEnum(const ::org::apache::lucene::index::DocsEnum & a0) : ::org::apache::lucene::index::DocsEnum(env->newObject(initializeClass, &mids$, mid_init$_ea9b58a1, a0.this$)) {}

        jint FilterAtomicReader$FilterDocsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        ::org::apache::lucene::util::AttributeSource FilterAtomicReader$FilterDocsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jlong FilterAtomicReader$FilterDocsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FilterAtomicReader$FilterDocsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint FilterAtomicReader$FilterDocsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterDocsEnum_init_(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_advance(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_attributes(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cost(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_docID(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_freq(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_nextDoc(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args);

        static PyMethodDef t_FilterAtomicReader$FilterDocsEnum__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, attributes, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterDocsEnum, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterDocsEnum, t_FilterAtomicReader$FilterDocsEnum, ::org::apache::lucene::index::DocsEnum, FilterAtomicReader$FilterDocsEnum, t_FilterAtomicReader$FilterDocsEnum_init_, 0, 0, 0, 0, 0);

        void t_FilterAtomicReader$FilterDocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), module, "FilterAtomicReader$FilterDocsEnum", 0);
        }

        void t_FilterAtomicReader$FilterDocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsEnum).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterDocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsEnum).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterDocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterDocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterDocsEnum::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterDocsEnum::wrap_Object(FilterAtomicReader$FilterDocsEnum(((t_FilterAtomicReader$FilterDocsEnum *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterDocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterDocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterDocsEnum_init_(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::DocsEnum a0((jobject) NULL);
          FilterAtomicReader$FilterDocsEnum object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::DocsEnum::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterDocsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_advance(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_attributes(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.attributes());
            return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "attributes", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_cost(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_docID(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_freq(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterDocsEnum_nextDoc(t_FilterAtomicReader$FilterDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterDocsEnum), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractAllGroupHeadsCollector::class$ = NULL;
          jmethodID *AbstractAllGroupHeadsCollector::mids$ = NULL;
          bool AbstractAllGroupHeadsCollector::live$ = false;

          jclass AbstractAllGroupHeadsCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_groupHeadsSize_54c6a179] = env->getMethodID(cls, "groupHeadsSize", "()I");
              mids$[mid_retrieveGroupHeads_dab10e75] = env->getMethodID(cls, "retrieveGroupHeads", "()[I");
              mids$[mid_retrieveGroupHeads_e64a66db] = env->getMethodID(cls, "retrieveGroupHeads", "(I)Lorg/apache/lucene/util/FixedBitSet;");
              mids$[mid_retrieveGroupHeadAndAddIfNotExist_39c7bd3c] = env->getMethodID(cls, "retrieveGroupHeadAndAddIfNotExist", "(I)V");
              mids$[mid_getCollectedGroupHeads_2d2d7de4] = env->getMethodID(cls, "getCollectedGroupHeads", "()Ljava/util/Collection;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean AbstractAllGroupHeadsCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void AbstractAllGroupHeadsCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          jint AbstractAllGroupHeadsCollector::groupHeadsSize() const
          {
            return env->callIntMethod(this$, mids$[mid_groupHeadsSize_54c6a179]);
          }

          JArray< jint > AbstractAllGroupHeadsCollector::retrieveGroupHeads() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_retrieveGroupHeads_dab10e75]));
          }

          ::org::apache::lucene::util::FixedBitSet AbstractAllGroupHeadsCollector::retrieveGroupHeads(jint a0) const
          {
            return ::org::apache::lucene::util::FixedBitSet(env->callObjectMethod(this$, mids$[mid_retrieveGroupHeads_e64a66db], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector$GroupHead.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector_of_(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_collect(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_groupHeadsSize(t_AbstractAllGroupHeadsCollector *self);
          static PyObject *t_AbstractAllGroupHeadsCollector_retrieveGroupHeads(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_get__parameters_(t_AbstractAllGroupHeadsCollector *self, void *data);
          static PyGetSetDef t_AbstractAllGroupHeadsCollector__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractAllGroupHeadsCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAllGroupHeadsCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, groupHeadsSize, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, retrieveGroupHeads, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAllGroupHeadsCollector, t_AbstractAllGroupHeadsCollector, ::org::apache::lucene::search::Collector, AbstractAllGroupHeadsCollector, abstract_init, 0, 0, t_AbstractAllGroupHeadsCollector__fields_, 0, 0);
          PyObject *t_AbstractAllGroupHeadsCollector::wrap_Object(const AbstractAllGroupHeadsCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector *self = (t_AbstractAllGroupHeadsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractAllGroupHeadsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector *self = (t_AbstractAllGroupHeadsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractAllGroupHeadsCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAllGroupHeadsCollector), module, "AbstractAllGroupHeadsCollector", 0);
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "GroupHead", make_descriptor(&PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead)));
          }

          void t_AbstractAllGroupHeadsCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "class_", make_descriptor(AbstractAllGroupHeadsCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractAllGroupHeadsCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAllGroupHeadsCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractAllGroupHeadsCollector::wrap_Object(AbstractAllGroupHeadsCollector(((t_AbstractAllGroupHeadsCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAllGroupHeadsCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_of_(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractAllGroupHeadsCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_collect(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractAllGroupHeadsCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_groupHeadsSize(t_AbstractAllGroupHeadsCollector *self)
          {
            jint result;
            OBJ_CALL(result = self->object.groupHeadsSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_retrieveGroupHeads(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                JArray< jint > result((jobject) NULL);
                OBJ_CALL(result = self->object.retrieveGroupHeads());
                return result.wrap();
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::FixedBitSet result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.retrieveGroupHeads(a0));
                  return ::org::apache::lucene::util::t_FixedBitSet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "retrieveGroupHeads", args);
            return NULL;
          }
          static PyObject *t_AbstractAllGroupHeadsCollector_get__parameters_(t_AbstractAllGroupHeadsCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayIterator::class$ = NULL;
          jmethodID *CharArrayIterator::mids$ = NULL;
          bool CharArrayIterator::live$ = false;
          jboolean CharArrayIterator::HAS_BUGGY_BREAKITERATORS = (jboolean) 0;

          jclass CharArrayIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clone_18028ee5] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_current_54c6a173] = env->getMethodID(cls, "current", "()C");
              mids$[mid_first_54c6a173] = env->getMethodID(cls, "first", "()C");
              mids$[mid_getBeginIndex_54c6a179] = env->getMethodID(cls, "getBeginIndex", "()I");
              mids$[mid_getEndIndex_54c6a179] = env->getMethodID(cls, "getEndIndex", "()I");
              mids$[mid_getIndex_54c6a179] = env->getMethodID(cls, "getIndex", "()I");
              mids$[mid_getLength_54c6a179] = env->getMethodID(cls, "getLength", "()I");
              mids$[mid_getStart_54c6a179] = env->getMethodID(cls, "getStart", "()I");
              mids$[mid_getText_dab10e7f] = env->getMethodID(cls, "getText", "()[C");
              mids$[mid_last_54c6a173] = env->getMethodID(cls, "last", "()C");
              mids$[mid_newSentenceInstance_18028ee5] = env->getStaticMethodID(cls, "newSentenceInstance", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_newWordInstance_18028ee5] = env->getStaticMethodID(cls, "newWordInstance", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_next_54c6a173] = env->getMethodID(cls, "next", "()C");
              mids$[mid_previous_54c6a173] = env->getMethodID(cls, "previous", "()C");
              mids$[mid_setIndex_39c7bd29] = env->getMethodID(cls, "setIndex", "(I)C");
              mids$[mid_setText_6f0bb356] = env->getMethodID(cls, "setText", "([CII)V");
              mids$[mid_jreBugWorkaround_87fd544f] = env->getMethodID(cls, "jreBugWorkaround", "(C)C");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              HAS_BUGGY_BREAKITERATORS = env->getStaticBooleanField(cls, "HAS_BUGGY_BREAKITERATORS");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharArrayIterator::CharArrayIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          CharArrayIterator CharArrayIterator::clone() const
          {
            return CharArrayIterator(env->callObjectMethod(this$, mids$[mid_clone_18028ee5]));
          }

          jchar CharArrayIterator::current() const
          {
            return env->callCharMethod(this$, mids$[mid_current_54c6a173]);
          }

          jchar CharArrayIterator::first() const
          {
            return env->callCharMethod(this$, mids$[mid_first_54c6a173]);
          }

          jint CharArrayIterator::getBeginIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginIndex_54c6a179]);
          }

          jint CharArrayIterator::getEndIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndIndex_54c6a179]);
          }

          jint CharArrayIterator::getIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getIndex_54c6a179]);
          }

          jint CharArrayIterator::getLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getLength_54c6a179]);
          }

          jint CharArrayIterator::getStart() const
          {
            return env->callIntMethod(this$, mids$[mid_getStart_54c6a179]);
          }

          JArray< jchar > CharArrayIterator::getText() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getText_dab10e7f]));
          }

          jchar CharArrayIterator::last() const
          {
            return env->callCharMethod(this$, mids$[mid_last_54c6a173]);
          }

          CharArrayIterator CharArrayIterator::newSentenceInstance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayIterator(env->callStaticObjectMethod(cls, mids$[mid_newSentenceInstance_18028ee5]));
          }

          CharArrayIterator CharArrayIterator::newWordInstance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayIterator(env->callStaticObjectMethod(cls, mids$[mid_newWordInstance_18028ee5]));
          }

          jchar CharArrayIterator::next() const
          {
            return env->callCharMethod(this$, mids$[mid_next_54c6a173]);
          }

          jchar CharArrayIterator::previous() const
          {
            return env->callCharMethod(this$, mids$[mid_previous_54c6a173]);
          }

          jchar CharArrayIterator::setIndex(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_setIndex_39c7bd29], a0);
          }

          void CharArrayIterator::setText(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_setText_6f0bb356], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharArrayIterator_init_(t_CharArrayIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharArrayIterator_clone(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_current(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_first(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getBeginIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getEndIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getLength(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getStart(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getText(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_last(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_newSentenceInstance(PyTypeObject *type);
          static PyObject *t_CharArrayIterator_newWordInstance(PyTypeObject *type);
          static PyObject *t_CharArrayIterator_next(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_previous(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_setIndex(t_CharArrayIterator *self, PyObject *arg);
          static PyObject *t_CharArrayIterator_setText(t_CharArrayIterator *self, PyObject *args);
          static PyObject *t_CharArrayIterator_get__beginIndex(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__endIndex(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__index(t_CharArrayIterator *self, void *data);
          static int t_CharArrayIterator_set__index(t_CharArrayIterator *self, PyObject *arg, void *data);
          static PyObject *t_CharArrayIterator_get__length(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__start(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__text(t_CharArrayIterator *self, void *data);
          static PyGetSetDef t_CharArrayIterator__fields_[] = {
            DECLARE_GET_FIELD(t_CharArrayIterator, beginIndex),
            DECLARE_GET_FIELD(t_CharArrayIterator, endIndex),
            DECLARE_GETSET_FIELD(t_CharArrayIterator, index),
            DECLARE_GET_FIELD(t_CharArrayIterator, length),
            DECLARE_GET_FIELD(t_CharArrayIterator, start),
            DECLARE_GET_FIELD(t_CharArrayIterator, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayIterator__methods_[] = {
            DECLARE_METHOD(t_CharArrayIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, clone, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, current, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, first, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getBeginIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getEndIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getLength, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getStart, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getText, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, last, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, newSentenceInstance, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, newWordInstance, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, previous, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, setIndex, METH_O),
            DECLARE_METHOD(t_CharArrayIterator, setText, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayIterator, t_CharArrayIterator, ::java::lang::Object, CharArrayIterator, t_CharArrayIterator_init_, 0, 0, t_CharArrayIterator__fields_, 0, 0);

          void t_CharArrayIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayIterator), module, "CharArrayIterator", 0);
          }

          void t_CharArrayIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "class_", make_descriptor(CharArrayIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "wrapfn_", make_descriptor(t_CharArrayIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CharArrayIterator::initializeClass);
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "HAS_BUGGY_BREAKITERATORS", make_descriptor(CharArrayIterator::HAS_BUGGY_BREAKITERATORS));
          }

          static PyObject *t_CharArrayIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayIterator::initializeClass, 1)))
              return NULL;
            return t_CharArrayIterator::wrap_Object(CharArrayIterator(((t_CharArrayIterator *) arg)->object.this$));
          }
          static PyObject *t_CharArrayIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharArrayIterator_init_(t_CharArrayIterator *self, PyObject *args, PyObject *kwds)
          {
            CharArrayIterator object((jobject) NULL);

            INT_CALL(object = CharArrayIterator());
            self->object = object;

            return 0;
          }

          static PyObject *t_CharArrayIterator_clone(t_CharArrayIterator *self)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_current(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.current());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_first(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.first());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_getBeginIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginIndex());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getEndIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndIndex());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getIndex());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getLength(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getStart(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStart());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getText(t_CharArrayIterator *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return result.wrap();
          }

          static PyObject *t_CharArrayIterator_last(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.last());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_newSentenceInstance(PyTypeObject *type)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayIterator::newSentenceInstance());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_newWordInstance(PyTypeObject *type)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayIterator::newWordInstance());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_next(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.next());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_previous(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.previous());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_setIndex(t_CharArrayIterator *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setIndex(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "setIndex", arg);
            return NULL;
          }

          static PyObject *t_CharArrayIterator_setText(t_CharArrayIterator *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.setText(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setText", args);
            return NULL;
          }

          static PyObject *t_CharArrayIterator_get__beginIndex(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginIndex());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__endIndex(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndIndex());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__index(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getIndex());
            return PyInt_FromLong((long) value);
          }
          static int t_CharArrayIterator_set__index(t_CharArrayIterator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setIndex(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "index", arg);
            return -1;
          }

          static PyObject *t_CharArrayIterator_get__length(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__start(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStart());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__text(t_CharArrayIterator *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *AnalyzingSuggester::class$ = NULL;
            jmethodID *AnalyzingSuggester::mids$ = NULL;
            bool AnalyzingSuggester::live$ = false;
            jint AnalyzingSuggester::EXACT_FIRST = (jint) 0;
            jint AnalyzingSuggester::PRESERVE_SEP = (jint) 0;

            jclass AnalyzingSuggester::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_6a3c5772] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;)V");
                mids$[mid_init$_9a7c82f9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/analysis/Analyzer;IIIZ)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");
                mids$[mid_convertAutomaton_7aca8e1f] = env->getMethodID(cls, "convertAutomaton", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/automaton/Automaton;");
                mids$[mid_getFullPrefixPaths_a9ea3855] = env->getMethodID(cls, "getFullPrefixPaths", "(Ljava/util/List;Lorg/apache/lucene/util/automaton/Automaton;Lorg/apache/lucene/util/fst/FST;)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EXACT_FIRST = env->getStaticIntField(cls, "EXACT_FIRST");
                PRESERVE_SEP = env->getStaticIntField(cls, "PRESERVE_SEP");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_6a3c5772, a0.this$, a1.this$)) {}

            AnalyzingSuggester::AnalyzingSuggester(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::analysis::Analyzer & a1, jint a2, jint a3, jint a4, jboolean a5) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_9a7c82f9, a0.this$, a1.this$, a2, a3, a4, a5)) {}

            void AnalyzingSuggester::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object AnalyzingSuggester::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong AnalyzingSuggester::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean AnalyzingSuggester::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List AnalyzingSuggester::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong AnalyzingSuggester::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean AnalyzingSuggester::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_AnalyzingSuggester_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AnalyzingSuggester_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AnalyzingSuggester_init_(t_AnalyzingSuggester *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AnalyzingSuggester_build(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_get(t_AnalyzingSuggester *self, PyObject *arg);
            static PyObject *t_AnalyzingSuggester_getCount(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_load(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_lookup(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_ramBytesUsed(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_store(t_AnalyzingSuggester *self, PyObject *args);
            static PyObject *t_AnalyzingSuggester_get__count(t_AnalyzingSuggester *self, void *data);
            static PyGetSetDef t_AnalyzingSuggester__fields_[] = {
              DECLARE_GET_FIELD(t_AnalyzingSuggester, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_AnalyzingSuggester__methods_[] = {
              DECLARE_METHOD(t_AnalyzingSuggester, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingSuggester, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AnalyzingSuggester, build, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, get, METH_O),
              DECLARE_METHOD(t_AnalyzingSuggester, getCount, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, load, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, lookup, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_AnalyzingSuggester, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(AnalyzingSuggester, t_AnalyzingSuggester, ::org::apache::lucene::search::suggest::Lookup, AnalyzingSuggester, t_AnalyzingSuggester_init_, 0, 0, t_AnalyzingSuggester__fields_, 0, 0);

            void t_AnalyzingSuggester::install(PyObject *module)
            {
              installType(&PY_TYPE(AnalyzingSuggester), module, "AnalyzingSuggester", 0);
            }

            void t_AnalyzingSuggester::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "class_", make_descriptor(AnalyzingSuggester::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "wrapfn_", make_descriptor(t_AnalyzingSuggester::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(AnalyzingSuggester::initializeClass);
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "EXACT_FIRST", make_descriptor(AnalyzingSuggester::EXACT_FIRST));
              PyDict_SetItemString(PY_TYPE(AnalyzingSuggester).tp_dict, "PRESERVE_SEP", make_descriptor(AnalyzingSuggester::PRESERVE_SEP));
            }

            static PyObject *t_AnalyzingSuggester_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AnalyzingSuggester::initializeClass, 1)))
                return NULL;
              return t_AnalyzingSuggester::wrap_Object(AnalyzingSuggester(((t_AnalyzingSuggester *) arg)->object.this$));
            }
            static PyObject *t_AnalyzingSuggester_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AnalyzingSuggester::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AnalyzingSuggester_init_(t_AnalyzingSuggester *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 6:
                {
                  ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                  jint a2;
                  jint a3;
                  jint a4;
                  jboolean a5;
                  AnalyzingSuggester object((jobject) NULL);

                  if (!parseArgs(args, "kkIIIZ", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                  {
                    INT_CALL(object = AnalyzingSuggester(a0, a1, a2, a3, a4, a5));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AnalyzingSuggester_build(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_get(t_AnalyzingSuggester *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_AnalyzingSuggester_getCount(t_AnalyzingSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_load(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_lookup(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_ramBytesUsed(t_AnalyzingSuggester *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_store(t_AnalyzingSuggester *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(AnalyzingSuggester), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_AnalyzingSuggester_get__count(t_AnalyzingSuggester *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/SlopQueryNodeBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *SlopQueryNodeBuilder::class$ = NULL;
              jmethodID *SlopQueryNodeBuilder::mids$ = NULL;
              bool SlopQueryNodeBuilder::live$ = false;

              jclass SlopQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/SlopQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              SlopQueryNodeBuilder::SlopQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query SlopQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_SlopQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SlopQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_SlopQueryNodeBuilder_init_(t_SlopQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_SlopQueryNodeBuilder_build(t_SlopQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_SlopQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_SlopQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SlopQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(SlopQueryNodeBuilder, t_SlopQueryNodeBuilder, ::java::lang::Object, SlopQueryNodeBuilder, t_SlopQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_SlopQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(SlopQueryNodeBuilder), module, "SlopQueryNodeBuilder", 0);
              }

              void t_SlopQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(SlopQueryNodeBuilder).tp_dict, "class_", make_descriptor(SlopQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(SlopQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_SlopQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(SlopQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SlopQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SlopQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_SlopQueryNodeBuilder::wrap_Object(SlopQueryNodeBuilder(((t_SlopQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_SlopQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SlopQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_SlopQueryNodeBuilder_init_(t_SlopQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                SlopQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = SlopQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_SlopQueryNodeBuilder_build(t_SlopQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/BooleanFilter.h"
#include "java/lang/Iterable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/util/List.h"
#include "org/apache/lucene/queries/FilterClause.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Object.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *BooleanFilter::class$ = NULL;
        jmethodID *BooleanFilter::mids$ = NULL;
        bool BooleanFilter::live$ = false;

        jclass BooleanFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/BooleanFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_ef4f412a] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queries/FilterClause;)V");
            mids$[mid_add_7373f548] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_clauses_87851566] = env->getMethodID(cls, "clauses", "()Ljava/util/List;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanFilter::BooleanFilter() : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void BooleanFilter::add(const ::org::apache::lucene::queries::FilterClause & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_ef4f412a], a0.this$);
        }

        void BooleanFilter::add(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7373f548], a0.this$, a1.this$);
        }

        ::java::util::List BooleanFilter::clauses() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_clauses_87851566]));
        }

        jboolean BooleanFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet BooleanFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        jint BooleanFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::util::Iterator BooleanFilter::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::java::lang::String BooleanFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_BooleanFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanFilter_init_(t_BooleanFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanFilter_add(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_clauses(t_BooleanFilter *self);
        static PyObject *t_BooleanFilter_equals(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_getDocIdSet(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_hashCode(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_iterator(t_BooleanFilter *self);
        static PyObject *t_BooleanFilter_toString(t_BooleanFilter *self, PyObject *args);

        static PyMethodDef t_BooleanFilter__methods_[] = {
          DECLARE_METHOD(t_BooleanFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanFilter, add, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, clauses, METH_NOARGS),
          DECLARE_METHOD(t_BooleanFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, iterator, METH_NOARGS),
          DECLARE_METHOD(t_BooleanFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanFilter, t_BooleanFilter, ::org::apache::lucene::search::Filter, BooleanFilter, t_BooleanFilter_init_, ((PyObject *(*)(t_BooleanFilter *)) get_iterator< t_BooleanFilter >), 0, 0, 0, 0);

        void t_BooleanFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanFilter), module, "BooleanFilter", 0);
        }

        void t_BooleanFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanFilter).tp_dict, "class_", make_descriptor(BooleanFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanFilter).tp_dict, "wrapfn_", make_descriptor(t_BooleanFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanFilter::initializeClass, 1)))
            return NULL;
          return t_BooleanFilter::wrap_Object(BooleanFilter(((t_BooleanFilter *) arg)->object.this$));
        }
        static PyObject *t_BooleanFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanFilter_init_(t_BooleanFilter *self, PyObject *args, PyObject *kwds)
        {
          BooleanFilter object((jobject) NULL);

          INT_CALL(object = BooleanFilter());
          self->object = object;

          return 0;
        }

        static PyObject *t_BooleanFilter_add(t_BooleanFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::queries::FilterClause a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::FilterClause::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::Filter a0((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_BooleanFilter_clauses(t_BooleanFilter *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.clauses());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queries::PY_TYPE(FilterClause));
        }

        static PyObject *t_BooleanFilter_equals(t_BooleanFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BooleanFilter_getDocIdSet(t_BooleanFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_BooleanFilter_hashCode(t_BooleanFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BooleanFilter_iterator(t_BooleanFilter *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::queries::PY_TYPE(FilterClause));
        }

        static PyObject *t_BooleanFilter_toString(t_BooleanFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsFormat::class$ = NULL;
          jmethodID *CompressingStoredFieldsFormat::mids$ = NULL;
          bool CompressingStoredFieldsFormat::live$ = false;

          jclass CompressingStoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_41920a78] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_init$_5a706bd2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;I)V");
              mids$[mid_fieldsReader_bbe26ec4] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_fieldsWriter_c73cceda] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsFormat::CompressingStoredFieldsFormat(const ::java::lang::String & a0, const ::org::apache::lucene::codecs::compressing::CompressionMode & a1, jint a2) : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_41920a78, a0.this$, a1.this$, a2)) {}

          CompressingStoredFieldsFormat::CompressingStoredFieldsFormat(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::codecs::compressing::CompressionMode & a2, jint a3) : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_5a706bd2, a0.this$, a1.this$, a2.this$, a3)) {}

          ::org::apache::lucene::codecs::StoredFieldsReader CompressingStoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_bbe26ec4], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::StoredFieldsWriter CompressingStoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_c73cceda], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String CompressingStoredFieldsFormat::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingStoredFieldsFormat_init_(t_CompressingStoredFieldsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingStoredFieldsFormat_fieldsReader(t_CompressingStoredFieldsFormat *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsFormat_fieldsWriter(t_CompressingStoredFieldsFormat *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsFormat_toString(t_CompressingStoredFieldsFormat *self, PyObject *args);

          static PyMethodDef t_CompressingStoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, fieldsWriter, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsFormat, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsFormat, t_CompressingStoredFieldsFormat, ::org::apache::lucene::codecs::StoredFieldsFormat, CompressingStoredFieldsFormat, t_CompressingStoredFieldsFormat_init_, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsFormat), module, "CompressingStoredFieldsFormat", 0);
          }

          void t_CompressingStoredFieldsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsFormat).tp_dict, "class_", make_descriptor(CompressingStoredFieldsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsFormat::wrap_Object(CompressingStoredFieldsFormat(((t_CompressingStoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingStoredFieldsFormat_init_(t_CompressingStoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::codecs::compressing::CompressionMode a1((jobject) NULL);
                jint a2;
                CompressingStoredFieldsFormat object((jobject) NULL);

                if (!parseArgs(args, "skI", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = CompressingStoredFieldsFormat(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::codecs::compressing::CompressionMode a2((jobject) NULL);
                jint a3;
                CompressingStoredFieldsFormat object((jobject) NULL);

                if (!parseArgs(args, "sskI", ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = CompressingStoredFieldsFormat(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingStoredFieldsFormat_fieldsReader(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsFormat_fieldsWriter(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsFormat_toString(t_CompressingStoredFieldsFormat *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsFormat), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermContext::class$ = NULL;
        jmethodID *TermContext::mids$ = NULL;
        jfieldID *TermContext::fids$ = NULL;
        bool TermContext::live$ = false;

        jclass TermContext::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermContext");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4df5686b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;)V");
            mids$[mid_init$_5a9a23d9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReaderContext;Lorg/apache/lucene/index/TermState;IIJ)V");
            mids$[mid_build_9d3a5124] = env->getStaticMethodID(cls, "build", "(Lorg/apache/lucene/index/IndexReaderContext;Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/index/TermContext;");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_get_17d8f64c] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/TermState;");
            mids$[mid_register_edacd7f4] = env->getMethodID(cls, "register", "(Lorg/apache/lucene/index/TermState;IIJ)V");
            mids$[mid_setDocFreq_39c7bd3c] = env->getMethodID(cls, "setDocFreq", "(I)V");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            fids$ = new jfieldID[max_fid];
            fids$[fid_topReaderContext] = env->getFieldID(cls, "topReaderContext", "Lorg/apache/lucene/index/IndexReaderContext;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermContext::TermContext(const ::org::apache::lucene::index::IndexReaderContext & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4df5686b, a0.this$)) {}

        TermContext::TermContext(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::org::apache::lucene::index::TermState & a1, jint a2, jint a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5a9a23d9, a0.this$, a1.this$, a2, a3, a4)) {}

        TermContext TermContext::build(const ::org::apache::lucene::index::IndexReaderContext & a0, const ::org::apache::lucene::index::Term & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TermContext(env->callStaticObjectMethod(cls, mids$[mid_build_9d3a5124], a0.this$, a1.this$));
        }

        void TermContext::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jint TermContext::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::TermState TermContext::get(jint a0) const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_get_17d8f64c], a0));
        }

        void TermContext::register$(const ::org::apache::lucene::index::TermState & a0, jint a1, jint a2, jlong a3) const
        {
          env->callVoidMethod(this$, mids$[mid_register_edacd7f4], a0.this$, a1, a2, a3);
        }

        void TermContext::setDocFreq(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocFreq_39c7bd3c], a0);
        }

        jlong TermContext::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }

        ::org::apache::lucene::index::IndexReaderContext TermContext::_get_topReaderContext() const
        {
          return ::org::apache::lucene::index::IndexReaderContext(env->getObjectField(this$, fids$[fid_topReaderContext]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermContext_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermContext_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermContext_init_(t_TermContext *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermContext_build(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermContext_clear(t_TermContext *self);
        static PyObject *t_TermContext_docFreq(t_TermContext *self);
        static PyObject *t_TermContext_get(t_TermContext *self, PyObject *arg);
        static PyObject *t_TermContext_register(t_TermContext *self, PyObject *args);
        static PyObject *t_TermContext_setDocFreq(t_TermContext *self, PyObject *arg);
        static PyObject *t_TermContext_totalTermFreq(t_TermContext *self);
        static PyObject *t_TermContext_get__topReaderContext(t_TermContext *self, void *data);

        static PyGetSetDef t_TermContext__fields_[] = {
          DECLARE_GET_FIELD(t_TermContext, topReaderContext),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermContext__methods_[] = {
          DECLARE_METHOD(t_TermContext, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermContext, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermContext, build, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermContext, clear, METH_NOARGS),
          DECLARE_METHOD(t_TermContext, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermContext, get, METH_O),
          DECLARE_METHOD(t_TermContext, register, METH_VARARGS),
          DECLARE_METHOD(t_TermContext, setDocFreq, METH_O),
          DECLARE_METHOD(t_TermContext, totalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermContext, t_TermContext, ::java::lang::Object, TermContext, t_TermContext_init_, 0, 0, t_TermContext__fields_, 0, 0);

        void t_TermContext::install(PyObject *module)
        {
          installType(&PY_TYPE(TermContext), module, "TermContext", 0);
        }

        void t_TermContext::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermContext).tp_dict, "class_", make_descriptor(TermContext::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermContext).tp_dict, "wrapfn_", make_descriptor(t_TermContext::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermContext).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermContext_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermContext::initializeClass, 1)))
            return NULL;
          return t_TermContext::wrap_Object(TermContext(((t_TermContext *) arg)->object.this$));
        }
        static PyObject *t_TermContext_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermContext::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermContext_init_(t_TermContext *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              TermContext object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReaderContext::initializeClass, &a0))
              {
                INT_CALL(object = TermContext(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);
              jint a2;
              jint a3;
              jlong a4;
              TermContext object((jobject) NULL);

              if (!parseArgs(args, "kkIIJ", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = TermContext(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermContext_build(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReaderContext a0((jobject) NULL);
          ::org::apache::lucene::index::Term a1((jobject) NULL);
          TermContext result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReaderContext::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::TermContext::build(a0, a1));
            return t_TermContext::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "build", args);
          return NULL;
        }

        static PyObject *t_TermContext_clear(t_TermContext *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_TermContext_docFreq(t_TermContext *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docFreq());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TermContext_get(t_TermContext *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::TermState result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_TermContext_register(t_TermContext *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong a3;

          if (!parseArgs(args, "kIIJ", ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.register$(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "register", args);
          return NULL;
        }

        static PyObject *t_TermContext_setDocFreq(t_TermContext *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setDocFreq(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocFreq", arg);
          return NULL;
        }

        static PyObject *t_TermContext_totalTermFreq(t_TermContext *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermContext_get__topReaderContext(t_TermContext *self, void *data)
        {
          ::org::apache::lucene::index::IndexReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_topReaderContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NoSuchDirectoryException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NoSuchDirectoryException::class$ = NULL;
        jmethodID *NoSuchDirectoryException::mids$ = NULL;
        bool NoSuchDirectoryException::live$ = false;

        jclass NoSuchDirectoryException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NoSuchDirectoryException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NoSuchDirectoryException::NoSuchDirectoryException(const ::java::lang::String & a0) : ::java::io::FileNotFoundException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NoSuchDirectoryException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoSuchDirectoryException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NoSuchDirectoryException_init_(t_NoSuchDirectoryException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_NoSuchDirectoryException__methods_[] = {
          DECLARE_METHOD(t_NoSuchDirectoryException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoSuchDirectoryException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoSuchDirectoryException, t_NoSuchDirectoryException, ::java::io::FileNotFoundException, NoSuchDirectoryException, t_NoSuchDirectoryException_init_, 0, 0, 0, 0, 0);

        void t_NoSuchDirectoryException::install(PyObject *module)
        {
          installType(&PY_TYPE(NoSuchDirectoryException), module, "NoSuchDirectoryException", 0);
        }

        void t_NoSuchDirectoryException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoSuchDirectoryException).tp_dict, "class_", make_descriptor(NoSuchDirectoryException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoSuchDirectoryException).tp_dict, "wrapfn_", make_descriptor(t_NoSuchDirectoryException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoSuchDirectoryException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NoSuchDirectoryException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoSuchDirectoryException::initializeClass, 1)))
            return NULL;
          return t_NoSuchDirectoryException::wrap_Object(NoSuchDirectoryException(((t_NoSuchDirectoryException *) arg)->object.this$));
        }
        static PyObject *t_NoSuchDirectoryException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoSuchDirectoryException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NoSuchDirectoryException_init_(t_NoSuchDirectoryException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          NoSuchDirectoryException object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = NoSuchDirectoryException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleFilter::class$ = NULL;
          jmethodID *ShingleFilter::mids$ = NULL;
          bool ShingleFilter::live$ = false;
          ::java::lang::String *ShingleFilter::DEFAULT_FILLER_TOKEN = NULL;
          jint ShingleFilter::DEFAULT_MAX_SHINGLE_SIZE = (jint) 0;
          jint ShingleFilter::DEFAULT_MIN_SHINGLE_SIZE = (jint) 0;
          ::java::lang::String *ShingleFilter::DEFAULT_TOKEN_SEPARATOR = NULL;
          ::java::lang::String *ShingleFilter::DEFAULT_TOKEN_TYPE = NULL;

          jclass ShingleFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_be0a1066] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_7f9e10a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setFillerToken_5fdc3f48] = env->getMethodID(cls, "setFillerToken", "(Ljava/lang/String;)V");
              mids$[mid_setMaxShingleSize_39c7bd3c] = env->getMethodID(cls, "setMaxShingleSize", "(I)V");
              mids$[mid_setMinShingleSize_39c7bd3c] = env->getMethodID(cls, "setMinShingleSize", "(I)V");
              mids$[mid_setOutputUnigrams_bb0c767f] = env->getMethodID(cls, "setOutputUnigrams", "(Z)V");
              mids$[mid_setOutputUnigramsIfNoShingles_bb0c767f] = env->getMethodID(cls, "setOutputUnigramsIfNoShingles", "(Z)V");
              mids$[mid_setTokenSeparator_5fdc3f48] = env->getMethodID(cls, "setTokenSeparator", "(Ljava/lang/String;)V");
              mids$[mid_setTokenType_5fdc3f48] = env->getMethodID(cls, "setTokenType", "(Ljava/lang/String;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FILLER_TOKEN = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_FILLER_TOKEN", "Ljava/lang/String;"));
              DEFAULT_MAX_SHINGLE_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_SHINGLE_SIZE");
              DEFAULT_MIN_SHINGLE_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_SHINGLE_SIZE");
              DEFAULT_TOKEN_SEPARATOR = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TOKEN_SEPARATOR", "Ljava/lang/String;"));
              DEFAULT_TOKEN_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TOKEN_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_be0a1066, a0.this$, a1.this$)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_7f9e10a8, a0.this$, a1, a2)) {}

          void ShingleFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean ShingleFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ShingleFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void ShingleFilter::setFillerToken(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFillerToken_5fdc3f48], a0.this$);
          }

          void ShingleFilter::setMaxShingleSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxShingleSize_39c7bd3c], a0);
          }

          void ShingleFilter::setMinShingleSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinShingleSize_39c7bd3c], a0);
          }

          void ShingleFilter::setOutputUnigrams(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setOutputUnigrams_bb0c767f], a0);
          }

          void ShingleFilter::setOutputUnigramsIfNoShingles(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setOutputUnigramsIfNoShingles_bb0c767f], a0);
          }

          void ShingleFilter::setTokenSeparator(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTokenSeparator_5fdc3f48], a0.this$);
          }

          void ShingleFilter::setTokenType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTokenType_5fdc3f48], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleFilter_init_(t_ShingleFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleFilter_end(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_incrementToken(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_reset(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_setFillerToken(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setMaxShingleSize(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setMinShingleSize(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setOutputUnigrams(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setOutputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setTokenSeparator(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setTokenType(t_ShingleFilter *self, PyObject *arg);
          static int t_ShingleFilter_set__fillerToken(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__maxShingleSize(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__minShingleSize(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__outputUnigrams(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__outputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__tokenSeparator(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__tokenType(t_ShingleFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_ShingleFilter__fields_[] = {
            DECLARE_SET_FIELD(t_ShingleFilter, fillerToken),
            DECLARE_SET_FIELD(t_ShingleFilter, maxShingleSize),
            DECLARE_SET_FIELD(t_ShingleFilter, minShingleSize),
            DECLARE_SET_FIELD(t_ShingleFilter, outputUnigrams),
            DECLARE_SET_FIELD(t_ShingleFilter, outputUnigramsIfNoShingles),
            DECLARE_SET_FIELD(t_ShingleFilter, tokenSeparator),
            DECLARE_SET_FIELD(t_ShingleFilter, tokenType),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ShingleFilter__methods_[] = {
            DECLARE_METHOD(t_ShingleFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, setFillerToken, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setMaxShingleSize, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setMinShingleSize, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setOutputUnigrams, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setOutputUnigramsIfNoShingles, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setTokenSeparator, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setTokenType, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ShingleFilter, t_ShingleFilter, ::org::apache::lucene::analysis::TokenFilter, ShingleFilter, t_ShingleFilter_init_, 0, 0, t_ShingleFilter__fields_, 0, 0);

          void t_ShingleFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleFilter), module, "ShingleFilter", 0);
          }

          void t_ShingleFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "class_", make_descriptor(ShingleFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "wrapfn_", make_descriptor(t_ShingleFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ShingleFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_FILLER_TOKEN", make_descriptor(j2p(*ShingleFilter::DEFAULT_FILLER_TOKEN)));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_MAX_SHINGLE_SIZE", make_descriptor(ShingleFilter::DEFAULT_MAX_SHINGLE_SIZE));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_MIN_SHINGLE_SIZE", make_descriptor(ShingleFilter::DEFAULT_MIN_SHINGLE_SIZE));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_TOKEN_SEPARATOR", make_descriptor(j2p(*ShingleFilter::DEFAULT_TOKEN_SEPARATOR)));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_TOKEN_TYPE", make_descriptor(j2p(*ShingleFilter::DEFAULT_TOKEN_TYPE)));
          }

          static PyObject *t_ShingleFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleFilter::initializeClass, 1)))
              return NULL;
            return t_ShingleFilter::wrap_Object(ShingleFilter(((t_ShingleFilter *) arg)->object.this$));
          }
          static PyObject *t_ShingleFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleFilter_init_(t_ShingleFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = ShingleFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jint a2;
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ShingleFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleFilter_end(t_ShingleFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ShingleFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ShingleFilter_incrementToken(t_ShingleFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ShingleFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ShingleFilter_reset(t_ShingleFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ShingleFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ShingleFilter_setFillerToken(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setFillerToken(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFillerToken", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setMaxShingleSize(t_ShingleFilter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxShingleSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxShingleSize", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setMinShingleSize(t_ShingleFilter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinShingleSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinShingleSize", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setOutputUnigrams(t_ShingleFilter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setOutputUnigrams(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOutputUnigrams", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setOutputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setOutputUnigramsIfNoShingles(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOutputUnigramsIfNoShingles", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setTokenSeparator(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTokenSeparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTokenSeparator", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setTokenType(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTokenType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTokenType", arg);
            return NULL;
          }

          static int t_ShingleFilter_set__fillerToken(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setFillerToken(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fillerToken", arg);
            return -1;
          }

          static int t_ShingleFilter_set__maxShingleSize(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxShingleSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxShingleSize", arg);
            return -1;
          }

          static int t_ShingleFilter_set__minShingleSize(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinShingleSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minShingleSize", arg);
            return -1;
          }

          static int t_ShingleFilter_set__outputUnigrams(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setOutputUnigrams(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "outputUnigrams", arg);
            return -1;
          }

          static int t_ShingleFilter_set__outputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setOutputUnigramsIfNoShingles(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "outputUnigramsIfNoShingles", arg);
            return -1;
          }

          static int t_ShingleFilter_set__tokenSeparator(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTokenSeparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "tokenSeparator", arg);
            return -1;
          }

          static int t_ShingleFilter_set__tokenType(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTokenType(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "tokenType", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TypeAttributeImpl::class$ = NULL;
          jmethodID *TypeAttributeImpl::mids$ = NULL;
          bool TypeAttributeImpl::live$ = false;

          jclass TypeAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setType_5fdc3f48] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_type_14c7b5c5] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAttributeImpl::TypeAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          TypeAttributeImpl::TypeAttributeImpl(const ::java::lang::String & a0) : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          void TypeAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void TypeAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean TypeAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint TypeAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void TypeAttributeImpl::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_5fdc3f48], a0.this$);
          }

          ::java::lang::String TypeAttributeImpl::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TypeAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAttributeImpl_init_(t_TypeAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAttributeImpl_clear(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_copyTo(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_equals(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_hashCode(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_setType(t_TypeAttributeImpl *self, PyObject *arg);
          static PyObject *t_TypeAttributeImpl_type(t_TypeAttributeImpl *self);

          static PyMethodDef t_TypeAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_TypeAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, setType, METH_O),
            DECLARE_METHOD(t_TypeAttributeImpl, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAttributeImpl, t_TypeAttributeImpl, ::org::apache::lucene::util::AttributeImpl, TypeAttributeImpl, t_TypeAttributeImpl_init_, 0, 0, 0, 0, 0);

          void t_TypeAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAttributeImpl), module, "TypeAttributeImpl", 0);
          }

          void t_TypeAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAttributeImpl).tp_dict, "class_", make_descriptor(TypeAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_TypeAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_TypeAttributeImpl::wrap_Object(TypeAttributeImpl(((t_TypeAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_TypeAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAttributeImpl_init_(t_TypeAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                TypeAttributeImpl object((jobject) NULL);

                INT_CALL(object = TypeAttributeImpl());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                TypeAttributeImpl object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = TypeAttributeImpl(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAttributeImpl_clear(t_TypeAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_copyTo(t_TypeAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_equals(t_TypeAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_hashCode(t_TypeAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_setType(t_TypeAttributeImpl *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_TypeAttributeImpl_type(t_TypeAttributeImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenizer::class$ = NULL;
          jmethodID *NGramTokenizer::mids$ = NULL;
          bool NGramTokenizer::live$ = false;
          jint NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE = (jint) 0;
          jint NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE = (jint) 0;

          jclass NGramTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_47cfcf59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;II)V");
              mids$[mid_init$_0c87564f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_NGRAM_SIZE");
              DEFAULT_MIN_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_NGRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenizer::NGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          NGramTokenizer::NGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_47cfcf59, a0.this$, a1.this$, a2, a3)) {}

          NGramTokenizer::NGramTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2, jint a3, jint a4) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_0c87564f, a0.this$, a1.this$, a2.this$, a3, a4)) {}

          void NGramTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean NGramTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void NGramTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenizer_init_(t_NGramTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenizer_end(t_NGramTokenizer *self, PyObject *args);
          static PyObject *t_NGramTokenizer_incrementToken(t_NGramTokenizer *self, PyObject *args);
          static PyObject *t_NGramTokenizer_reset(t_NGramTokenizer *self, PyObject *args);

          static PyMethodDef t_NGramTokenizer__methods_[] = {
            DECLARE_METHOD(t_NGramTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramTokenizer, t_NGramTokenizer, ::org::apache::lucene::analysis::Tokenizer, NGramTokenizer, t_NGramTokenizer_init_, 0, 0, 0, 0, 0);

          void t_NGramTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenizer), module, "NGramTokenizer", 0);
          }

          void t_NGramTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "class_", make_descriptor(NGramTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "wrapfn_", make_descriptor(t_NGramTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NGramTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "DEFAULT_MAX_NGRAM_SIZE", make_descriptor(NGramTokenizer::DEFAULT_MAX_NGRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(NGramTokenizer).tp_dict, "DEFAULT_MIN_NGRAM_SIZE", make_descriptor(NGramTokenizer::DEFAULT_MIN_NGRAM_SIZE));
          }

          static PyObject *t_NGramTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenizer::initializeClass, 1)))
              return NULL;
            return t_NGramTokenizer::wrap_Object(NGramTokenizer(((t_NGramTokenizer *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenizer_init_(t_NGramTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                jint a2;
                jint a3;
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                jint a3;
                jint a4;
                NGramTokenizer object((jobject) NULL);

                if (!parseArgs(args, "KkkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = NGramTokenizer(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenizer_end(t_NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NGramTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_NGramTokenizer_incrementToken(t_NGramTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NGramTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_NGramTokenizer_reset(t_NGramTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NGramTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery.h"
#include "org/apache/lucene/search/payloads/PayloadFunction.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadNearQuery::class$ = NULL;
          jmethodID *PayloadNearQuery::mids$ = NULL;
          bool PayloadNearQuery::live$ = false;

          jclass PayloadNearQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadNearQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4e7e9f44] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZ)V");
              mids$[mid_init$_ba8911fe] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZLorg/apache/lucene/search/payloads/PayloadFunction;)V");
              mids$[mid_clone_95fde422] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/payloads/PayloadNearQuery;");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadNearQuery::PayloadNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2) : ::org::apache::lucene::search::spans::SpanNearQuery(env->newObject(initializeClass, &mids$, mid_init$_4e7e9f44, a0.this$, a1, a2)) {}

          PayloadNearQuery::PayloadNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2, const ::org::apache::lucene::search::payloads::PayloadFunction & a3) : ::org::apache::lucene::search::spans::SpanNearQuery(env->newObject(initializeClass, &mids$, mid_init$_ba8911fe, a0.this$, a1, a2, a3.this$)) {}

          PayloadNearQuery PayloadNearQuery::clone() const
          {
            return PayloadNearQuery(env->callObjectMethod(this$, mids$[mid_clone_95fde422]));
          }

          ::org::apache::lucene::search::Weight PayloadNearQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean PayloadNearQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PayloadNearQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String PayloadNearQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadNearQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadNearQuery_init_(t_PayloadNearQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadNearQuery_clone(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_createWeight(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_equals(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_hashCode(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_toString(t_PayloadNearQuery *self, PyObject *args);

          static PyMethodDef t_PayloadNearQuery__methods_[] = {
            DECLARE_METHOD(t_PayloadNearQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadNearQuery, t_PayloadNearQuery, ::org::apache::lucene::search::spans::SpanNearQuery, PayloadNearQuery, t_PayloadNearQuery_init_, 0, 0, 0, 0, 0);

          void t_PayloadNearQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadNearQuery), module, "PayloadNearQuery", 0);
          }

          void t_PayloadNearQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery).tp_dict, "class_", make_descriptor(PayloadNearQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery).tp_dict, "wrapfn_", make_descriptor(t_PayloadNearQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadNearQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadNearQuery::initializeClass, 1)))
              return NULL;
            return t_PayloadNearQuery::wrap_Object(PayloadNearQuery(((t_PayloadNearQuery *) arg)->object.this$));
          }
          static PyObject *t_PayloadNearQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadNearQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadNearQuery_init_(t_PayloadNearQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                PayloadNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZ", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PayloadNearQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                ::org::apache::lucene::search::payloads::PayloadFunction a3((jobject) NULL);
                PayloadNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::payloads::PayloadFunction::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PayloadNearQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadNearQuery_clone(t_PayloadNearQuery *self, PyObject *args)
          {
            PayloadNearQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_PayloadNearQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_PayloadNearQuery_createWeight(t_PayloadNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_PayloadNearQuery_equals(t_PayloadNearQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadNearQuery_hashCode(t_PayloadNearQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PayloadNearQuery_toString(t_PayloadNearQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianFoldingFilter::class$ = NULL;
          jmethodID *ScandinavianFoldingFilter::mids$ = NULL;
          bool ScandinavianFoldingFilter::live$ = false;

          jclass ScandinavianFoldingFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianFoldingFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianFoldingFilter::ScandinavianFoldingFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ScandinavianFoldingFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianFoldingFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianFoldingFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianFoldingFilter_init_(t_ScandinavianFoldingFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianFoldingFilter_incrementToken(t_ScandinavianFoldingFilter *self, PyObject *args);

          static PyMethodDef t_ScandinavianFoldingFilter__methods_[] = {
            DECLARE_METHOD(t_ScandinavianFoldingFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianFoldingFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianFoldingFilter, t_ScandinavianFoldingFilter, ::org::apache::lucene::analysis::TokenFilter, ScandinavianFoldingFilter, t_ScandinavianFoldingFilter_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianFoldingFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianFoldingFilter), module, "ScandinavianFoldingFilter", 0);
          }

          void t_ScandinavianFoldingFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilter).tp_dict, "class_", make_descriptor(ScandinavianFoldingFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilter).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianFoldingFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianFoldingFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianFoldingFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianFoldingFilter::initializeClass, 1)))
              return NULL;
            return t_ScandinavianFoldingFilter::wrap_Object(ScandinavianFoldingFilter(((t_ScandinavianFoldingFilter *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianFoldingFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianFoldingFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianFoldingFilter_init_(t_ScandinavianFoldingFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ScandinavianFoldingFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ScandinavianFoldingFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianFoldingFilter_incrementToken(t_ScandinavianFoldingFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ScandinavianFoldingFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ScandinavianNormalizationFilterFactory::class$ = NULL;
          jmethodID *ScandinavianNormalizationFilterFactory::mids$ = NULL;
          bool ScandinavianNormalizationFilterFactory::live$ = false;

          jclass ScandinavianNormalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_c49b1257] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/ScandinavianNormalizationFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ScandinavianNormalizationFilterFactory::ScandinavianNormalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter ScandinavianNormalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter(env->callObjectMethod(this$, mids$[mid_create_c49b1257], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ScandinavianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ScandinavianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ScandinavianNormalizationFilterFactory_init_(t_ScandinavianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ScandinavianNormalizationFilterFactory_create(t_ScandinavianNormalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_ScandinavianNormalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ScandinavianNormalizationFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ScandinavianNormalizationFilterFactory, t_ScandinavianNormalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ScandinavianNormalizationFilterFactory, t_ScandinavianNormalizationFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ScandinavianNormalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ScandinavianNormalizationFilterFactory), module, "ScandinavianNormalizationFilterFactory", 0);
          }

          void t_ScandinavianNormalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilterFactory).tp_dict, "class_", make_descriptor(ScandinavianNormalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ScandinavianNormalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ScandinavianNormalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ScandinavianNormalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ScandinavianNormalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ScandinavianNormalizationFilterFactory::wrap_Object(ScandinavianNormalizationFilterFactory(((t_ScandinavianNormalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ScandinavianNormalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ScandinavianNormalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ScandinavianNormalizationFilterFactory_init_(t_ScandinavianNormalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ScandinavianNormalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ScandinavianNormalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ScandinavianNormalizationFilterFactory_create(t_ScandinavianNormalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::ScandinavianNormalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_ScandinavianNormalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ScandinavianNormalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/xml/sax/helpers/DefaultHandler.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace xml {
    namespace sax {
      namespace helpers {

        ::java::lang::Class *DefaultHandler::class$ = NULL;
        jmethodID *DefaultHandler::mids$ = NULL;
        bool DefaultHandler::live$ = false;

        jclass DefaultHandler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/xml/sax/helpers/DefaultHandler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_characters_6f0bb356] = env->getMethodID(cls, "characters", "([CII)V");
            mids$[mid_endDocument_54c6a166] = env->getMethodID(cls, "endDocument", "()V");
            mids$[mid_endElement_9c119564] = env->getMethodID(cls, "endElement", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_endPrefixMapping_5fdc3f48] = env->getMethodID(cls, "endPrefixMapping", "(Ljava/lang/String;)V");
            mids$[mid_ignorableWhitespace_6f0bb356] = env->getMethodID(cls, "ignorableWhitespace", "([CII)V");
            mids$[mid_notationDecl_9c119564] = env->getMethodID(cls, "notationDecl", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_processingInstruction_4a264742] = env->getMethodID(cls, "processingInstruction", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_skippedEntity_5fdc3f48] = env->getMethodID(cls, "skippedEntity", "(Ljava/lang/String;)V");
            mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
            mids$[mid_startPrefixMapping_4a264742] = env->getMethodID(cls, "startPrefixMapping", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_unparsedEntityDecl_3202cd2e] = env->getMethodID(cls, "unparsedEntityDecl", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DefaultHandler::DefaultHandler() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void DefaultHandler::characters(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_characters_6f0bb356], a0.this$, a1, a2);
        }

        void DefaultHandler::endDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_endDocument_54c6a166]);
        }

        void DefaultHandler::endElement(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_endElement_9c119564], a0.this$, a1.this$, a2.this$);
        }

        void DefaultHandler::endPrefixMapping(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_endPrefixMapping_5fdc3f48], a0.this$);
        }

        void DefaultHandler::ignorableWhitespace(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_ignorableWhitespace_6f0bb356], a0.this$, a1, a2);
        }

        void DefaultHandler::notationDecl(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_notationDecl_9c119564], a0.this$, a1.this$, a2.this$);
        }

        void DefaultHandler::processingInstruction(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_processingInstruction_4a264742], a0.this$, a1.this$);
        }

        void DefaultHandler::skippedEntity(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skippedEntity_5fdc3f48], a0.this$);
        }

        void DefaultHandler::startDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
        }

        void DefaultHandler::startPrefixMapping(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startPrefixMapping_4a264742], a0.this$, a1.this$);
        }

        void DefaultHandler::unparsedEntityDecl(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_unparsedEntityDecl_3202cd2e], a0.this$, a1.this$, a2.this$, a3.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace xml {
    namespace sax {
      namespace helpers {
        static PyObject *t_DefaultHandler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DefaultHandler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DefaultHandler_init_(t_DefaultHandler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DefaultHandler_characters(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_endDocument(t_DefaultHandler *self);
        static PyObject *t_DefaultHandler_endElement(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_endPrefixMapping(t_DefaultHandler *self, PyObject *arg);
        static PyObject *t_DefaultHandler_ignorableWhitespace(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_notationDecl(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_processingInstruction(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_skippedEntity(t_DefaultHandler *self, PyObject *arg);
        static PyObject *t_DefaultHandler_startDocument(t_DefaultHandler *self);
        static PyObject *t_DefaultHandler_startPrefixMapping(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_unparsedEntityDecl(t_DefaultHandler *self, PyObject *args);

        static PyMethodDef t_DefaultHandler__methods_[] = {
          DECLARE_METHOD(t_DefaultHandler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DefaultHandler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DefaultHandler, characters, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, endDocument, METH_NOARGS),
          DECLARE_METHOD(t_DefaultHandler, endElement, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, endPrefixMapping, METH_O),
          DECLARE_METHOD(t_DefaultHandler, ignorableWhitespace, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, notationDecl, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, processingInstruction, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, skippedEntity, METH_O),
          DECLARE_METHOD(t_DefaultHandler, startDocument, METH_NOARGS),
          DECLARE_METHOD(t_DefaultHandler, startPrefixMapping, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, unparsedEntityDecl, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DefaultHandler, t_DefaultHandler, ::java::lang::Object, DefaultHandler, t_DefaultHandler_init_, 0, 0, 0, 0, 0);

        void t_DefaultHandler::install(PyObject *module)
        {
          installType(&PY_TYPE(DefaultHandler), module, "DefaultHandler", 0);
        }

        void t_DefaultHandler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DefaultHandler).tp_dict, "class_", make_descriptor(DefaultHandler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DefaultHandler).tp_dict, "wrapfn_", make_descriptor(t_DefaultHandler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DefaultHandler).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DefaultHandler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DefaultHandler::initializeClass, 1)))
            return NULL;
          return t_DefaultHandler::wrap_Object(DefaultHandler(((t_DefaultHandler *) arg)->object.this$));
        }
        static PyObject *t_DefaultHandler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DefaultHandler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DefaultHandler_init_(t_DefaultHandler *self, PyObject *args, PyObject *kwds)
        {
          DefaultHandler object((jobject) NULL);

          INT_CALL(object = DefaultHandler());
          self->object = object;

          return 0;
        }

        static PyObject *t_DefaultHandler_characters(t_DefaultHandler *self, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.characters(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "characters", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_endDocument(t_DefaultHandler *self)
        {
          OBJ_CALL(self->object.endDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_DefaultHandler_endElement(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.endElement(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "endElement", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_endPrefixMapping(t_DefaultHandler *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.endPrefixMapping(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "endPrefixMapping", arg);
          return NULL;
        }

        static PyObject *t_DefaultHandler_ignorableWhitespace(t_DefaultHandler *self, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.ignorableWhitespace(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "ignorableWhitespace", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_notationDecl(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.notationDecl(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "notationDecl", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_processingInstruction(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.processingInstruction(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "processingInstruction", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_skippedEntity(t_DefaultHandler *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.skippedEntity(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "skippedEntity", arg);
          return NULL;
        }

        static PyObject *t_DefaultHandler_startDocument(t_DefaultHandler *self)
        {
          OBJ_CALL(self->object.startDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_DefaultHandler_startPrefixMapping(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.startPrefixMapping(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startPrefixMapping", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_unparsedEntityDecl(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::java::lang::String a3((jobject) NULL);

          if (!parseArgs(args, "ssss", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.unparsedEntityDecl(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "unparsedEntityDecl", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/FieldsQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *FieldsQuery::class$ = NULL;
            jmethodID *FieldsQuery::mids$ = NULL;
            bool FieldsQuery::live$ = false;

            jclass FieldsQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/FieldsQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_2649f1ba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/util/List;C)V");
                mids$[mid_init$_bcbc5f3f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/lang/String;C)V");
                mids$[mid_getFieldNames_87851566] = env->getMethodID(cls, "getFieldNames", "()Ljava/util/List;");
                mids$[mid_getFieldOperator_54c6a173] = env->getMethodID(cls, "getFieldOperator", "()C");
                mids$[mid_isFieldsSubQueryAcceptable_54c6a16a] = env->getMethodID(cls, "isFieldsSubQueryAcceptable", "()Z");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_makeLuceneQueryNoBoost_3d79835e] = env->getMethodID(cls, "makeLuceneQueryNoBoost", "(Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_fieldNamesToString_9f94ae34] = env->getMethodID(cls, "fieldNamesToString", "(Ljava/lang/StringBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FieldsQuery::FieldsQuery(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0, const ::java::util::List & a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_2649f1ba, a0.this$, a1.this$, a2)) {}

            FieldsQuery::FieldsQuery(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0, const ::java::lang::String & a1, jchar a2) : ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->newObject(initializeClass, &mids$, mid_init$_bcbc5f3f, a0.this$, a1.this$, a2)) {}

            ::java::util::List FieldsQuery::getFieldNames() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFieldNames_87851566]));
            }

            jchar FieldsQuery::getFieldOperator() const
            {
              return env->callCharMethod(this$, mids$[mid_getFieldOperator_54c6a173]);
            }

            jboolean FieldsQuery::isFieldsSubQueryAcceptable() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFieldsSubQueryAcceptable_54c6a16a]);
            }

            ::org::apache::lucene::search::Query FieldsQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }

            ::org::apache::lucene::search::Query FieldsQuery::makeLuceneQueryNoBoost(const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a0) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryNoBoost_3d79835e], a0.this$));
            }

            ::java::lang::String FieldsQuery::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_FieldsQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FieldsQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FieldsQuery_init_(t_FieldsQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FieldsQuery_getFieldNames(t_FieldsQuery *self);
            static PyObject *t_FieldsQuery_getFieldOperator(t_FieldsQuery *self);
            static PyObject *t_FieldsQuery_isFieldsSubQueryAcceptable(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_makeLuceneQueryFieldNoBoost(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_makeLuceneQueryNoBoost(t_FieldsQuery *self, PyObject *arg);
            static PyObject *t_FieldsQuery_toString(t_FieldsQuery *self, PyObject *args);
            static PyObject *t_FieldsQuery_get__fieldNames(t_FieldsQuery *self, void *data);
            static PyObject *t_FieldsQuery_get__fieldOperator(t_FieldsQuery *self, void *data);
            static PyObject *t_FieldsQuery_get__fieldsSubQueryAcceptable(t_FieldsQuery *self, void *data);
            static PyGetSetDef t_FieldsQuery__fields_[] = {
              DECLARE_GET_FIELD(t_FieldsQuery, fieldNames),
              DECLARE_GET_FIELD(t_FieldsQuery, fieldOperator),
              DECLARE_GET_FIELD(t_FieldsQuery, fieldsSubQueryAcceptable),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FieldsQuery__methods_[] = {
              DECLARE_METHOD(t_FieldsQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldsQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldsQuery, getFieldNames, METH_NOARGS),
              DECLARE_METHOD(t_FieldsQuery, getFieldOperator, METH_NOARGS),
              DECLARE_METHOD(t_FieldsQuery, isFieldsSubQueryAcceptable, METH_VARARGS),
              DECLARE_METHOD(t_FieldsQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              DECLARE_METHOD(t_FieldsQuery, makeLuceneQueryNoBoost, METH_O),
              DECLARE_METHOD(t_FieldsQuery, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FieldsQuery, t_FieldsQuery, ::org::apache::lucene::queryparser::surround::query::SrndQuery, FieldsQuery, t_FieldsQuery_init_, 0, 0, t_FieldsQuery__fields_, 0, 0);

            void t_FieldsQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(FieldsQuery), module, "FieldsQuery", 0);
            }

            void t_FieldsQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FieldsQuery).tp_dict, "class_", make_descriptor(FieldsQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FieldsQuery).tp_dict, "wrapfn_", make_descriptor(t_FieldsQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FieldsQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FieldsQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FieldsQuery::initializeClass, 1)))
                return NULL;
              return t_FieldsQuery::wrap_Object(FieldsQuery(((t_FieldsQuery *) arg)->object.this$));
            }
            static PyObject *t_FieldsQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FieldsQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FieldsQuery_init_(t_FieldsQuery *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);
                  ::java::util::List a1((jobject) NULL);
                  PyTypeObject **p1;
                  jchar a2;
                  FieldsQuery object((jobject) NULL);

                  if (!parseArgs(args, "kKC", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2))
                  {
                    INT_CALL(object = FieldsQuery(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);
                  ::java::lang::String a1((jobject) NULL);
                  jchar a2;
                  FieldsQuery object((jobject) NULL);

                  if (!parseArgs(args, "ksC", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FieldsQuery(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FieldsQuery_getFieldNames(t_FieldsQuery *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldNames());
              return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_FieldsQuery_getFieldOperator(t_FieldsQuery *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.getFieldOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_FieldsQuery_isFieldsSubQueryAcceptable(t_FieldsQuery *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.isFieldsSubQueryAcceptable());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FieldsQuery), (PyObject *) self, "isFieldsSubQueryAcceptable", args, 2);
            }

            static PyObject *t_FieldsQuery_makeLuceneQueryFieldNoBoost(t_FieldsQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FieldsQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }

            static PyObject *t_FieldsQuery_makeLuceneQueryNoBoost(t_FieldsQuery *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a0((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryNoBoost(a0));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "makeLuceneQueryNoBoost", arg);
              return NULL;
            }

            static PyObject *t_FieldsQuery_toString(t_FieldsQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FieldsQuery), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FieldsQuery_get__fieldNames(t_FieldsQuery *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldNames());
              return ::java::util::t_List::wrap_Object(value);
            }

            static PyObject *t_FieldsQuery_get__fieldOperator(t_FieldsQuery *self, void *data)
            {
              jchar value;
              OBJ_CALL(value = self->object.getFieldOperator());
              return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
            }

            static PyObject *t_FieldsQuery_get__fieldsSubQueryAcceptable(t_FieldsQuery *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFieldsSubQueryAcceptable());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/WordlistLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Version.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/util/CharArrayMap.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *WordlistLoader::class$ = NULL;
          jmethodID *WordlistLoader::mids$ = NULL;
          bool WordlistLoader::live$ = false;

          jclass WordlistLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/WordlistLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getSnowballWordSet_f4ba7807] = env->getStaticMethodID(cls, "getSnowballWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getSnowballWordSet_b3c09259] = env->getStaticMethodID(cls, "getSnowballWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getStemDict_a82ef4ef] = env->getStaticMethodID(cls, "getStemDict", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/util/CharArrayMap;)Lorg/apache/lucene/analysis/util/CharArrayMap;");
              mids$[mid_getWordSet_b3c09259] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getWordSet_f4ba7807] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getWordSet_47002787] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Ljava/lang/String;Lorg/apache/lucene/util/Version;)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_getWordSet_24df331d] = env->getStaticMethodID(cls, "getWordSet", "(Ljava/io/Reader;Ljava/lang/String;Lorg/apache/lucene/analysis/util/CharArraySet;)Lorg/apache/lucene/analysis/util/CharArraySet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getSnowballWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getSnowballWordSet_f4ba7807], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getSnowballWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::util::Version & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getSnowballWordSet_b3c09259], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArrayMap WordlistLoader::getStemDict(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::util::CharArrayMap & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_getStemDict_a82ef4ef], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::util::Version & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_b3c09259], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_f4ba7807], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::util::Version & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_47002787], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet WordlistLoader::getWordSet(const ::java::io::Reader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getWordSet_24df331d], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_WordlistLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordlistLoader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordlistLoader_getSnowballWordSet(PyTypeObject *type, PyObject *args);
          static PyObject *t_WordlistLoader_getStemDict(PyTypeObject *type, PyObject *args);
          static PyObject *t_WordlistLoader_getWordSet(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_WordlistLoader__methods_[] = {
            DECLARE_METHOD(t_WordlistLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, getSnowballWordSet, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, getStemDict, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_WordlistLoader, getWordSet, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordlistLoader, t_WordlistLoader, ::java::lang::Object, WordlistLoader, abstract_init, 0, 0, 0, 0, 0);

          void t_WordlistLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(WordlistLoader), module, "WordlistLoader", 0);
          }

          void t_WordlistLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordlistLoader).tp_dict, "class_", make_descriptor(WordlistLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordlistLoader).tp_dict, "wrapfn_", make_descriptor(t_WordlistLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordlistLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WordlistLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordlistLoader::initializeClass, 1)))
              return NULL;
            return t_WordlistLoader::wrap_Object(WordlistLoader(((t_WordlistLoader *) arg)->object.this$));
          }
          static PyObject *t_WordlistLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordlistLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_WordlistLoader_getSnowballWordSet(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getSnowballWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::util::Version a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getSnowballWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getSnowballWordSet", args);
            return NULL;
          }

          static PyObject *t_WordlistLoader_getStemDict(PyTypeObject *type, PyObject *args)
          {
            ::java::io::Reader a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArrayMap a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::analysis::util::CharArrayMap result((jobject) NULL);

            if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArrayMap::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArrayMap::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getStemDict(a0, a1));
              return ::org::apache::lucene::analysis::util::t_CharArrayMap::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError(type, "getStemDict", args);
            return NULL;
          }

          static PyObject *t_WordlistLoader_getWordSet(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::util::Version a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "kK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::util::Version a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "ksK", ::java::io::Reader::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
              {
                ::java::io::Reader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

                if (!parseArgs(args, "ksK", ::java::io::Reader::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::util::WordlistLoader::getWordSet(a0, a1, a2));
                  return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getWordSet", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntsRefFSTEnum$InputOutput::class$ = NULL;
          jmethodID *IntsRefFSTEnum$InputOutput::mids$ = NULL;
          jfieldID *IntsRefFSTEnum$InputOutput::fids$ = NULL;
          bool IntsRefFSTEnum$InputOutput::live$ = false;

          jclass IntsRefFSTEnum$InputOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntsRefFSTEnum$InputOutput::IntsRefFSTEnum$InputOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::IntsRef IntsRefFSTEnum$InputOutput::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
          }

          void IntsRefFSTEnum$InputOutput::_set_input(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            env->setObjectField(this$, fids$[fid_input], a0.this$);
          }

          ::java::lang::Object IntsRefFSTEnum$InputOutput::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void IntsRefFSTEnum$InputOutput::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntsRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum$InputOutput_of_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args);
          static int t_IntsRefFSTEnum$InputOutput_init_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__input(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static int t_IntsRefFSTEnum$InputOutput_set__input(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data);
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__output(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static int t_IntsRefFSTEnum$InputOutput_set__output(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data);

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__parameters_(t_IntsRefFSTEnum$InputOutput *self, void *data);
          static PyGetSetDef t_IntsRefFSTEnum$InputOutput__fields_[] = {
            DECLARE_GETSET_FIELD(t_IntsRefFSTEnum$InputOutput, input),
            DECLARE_GETSET_FIELD(t_IntsRefFSTEnum$InputOutput, output),
            DECLARE_GET_FIELD(t_IntsRefFSTEnum$InputOutput, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntsRefFSTEnum$InputOutput__methods_[] = {
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum$InputOutput, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntsRefFSTEnum$InputOutput, t_IntsRefFSTEnum$InputOutput, ::java::lang::Object, IntsRefFSTEnum$InputOutput, t_IntsRefFSTEnum$InputOutput_init_, 0, 0, t_IntsRefFSTEnum$InputOutput__fields_, 0, 0);
          PyObject *t_IntsRefFSTEnum$InputOutput::wrap_Object(const IntsRefFSTEnum$InputOutput& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum$InputOutput::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum$InputOutput *self = (t_IntsRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntsRefFSTEnum$InputOutput::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum$InputOutput::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum$InputOutput *self = (t_IntsRefFSTEnum$InputOutput *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntsRefFSTEnum$InputOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(IntsRefFSTEnum$InputOutput), module, "IntsRefFSTEnum$InputOutput", 0);
          }

          void t_IntsRefFSTEnum$InputOutput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum$InputOutput).tp_dict, "class_", make_descriptor(IntsRefFSTEnum$InputOutput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum$InputOutput).tp_dict, "wrapfn_", make_descriptor(t_IntsRefFSTEnum$InputOutput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum$InputOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntsRefFSTEnum$InputOutput::initializeClass, 1)))
              return NULL;
            return t_IntsRefFSTEnum$InputOutput::wrap_Object(IntsRefFSTEnum$InputOutput(((t_IntsRefFSTEnum$InputOutput *) arg)->object.this$));
          }
          static PyObject *t_IntsRefFSTEnum$InputOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntsRefFSTEnum$InputOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_of_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_IntsRefFSTEnum$InputOutput_init_(t_IntsRefFSTEnum$InputOutput *self, PyObject *args, PyObject *kwds)
          {
            IntsRefFSTEnum$InputOutput object((jobject) NULL);

            INT_CALL(object = IntsRefFSTEnum$InputOutput());
            self->object = object;

            return 0;
          }
          static PyObject *t_IntsRefFSTEnum$InputOutput_get__parameters_(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__input(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }
          static int t_IntsRefFSTEnum$InputOutput_set__input(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &value))
            {
              INT_CALL(self->object._set_input(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "input", arg);
            return -1;
          }

          static PyObject *t_IntsRefFSTEnum$InputOutput_get__output(t_IntsRefFSTEnum$InputOutput *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_IntsRefFSTEnum$InputOutput_set__output(t_IntsRefFSTEnum$InputOutput *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianLightStemmer::class$ = NULL;
          jmethodID *HungarianLightStemmer::mids$ = NULL;
          bool HungarianLightStemmer::live$ = false;

          jclass HungarianLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianLightStemmer::HungarianLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint HungarianLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianLightStemmer_init_(t_HungarianLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianLightStemmer_stem(t_HungarianLightStemmer *self, PyObject *args);

          static PyMethodDef t_HungarianLightStemmer__methods_[] = {
            DECLARE_METHOD(t_HungarianLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianLightStemmer, t_HungarianLightStemmer, ::java::lang::Object, HungarianLightStemmer, t_HungarianLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_HungarianLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianLightStemmer), module, "HungarianLightStemmer", 0);
          }

          void t_HungarianLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianLightStemmer).tp_dict, "class_", make_descriptor(HungarianLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_HungarianLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HungarianLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianLightStemmer::initializeClass, 1)))
              return NULL;
            return t_HungarianLightStemmer::wrap_Object(HungarianLightStemmer(((t_HungarianLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_HungarianLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianLightStemmer_init_(t_HungarianLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            HungarianLightStemmer object((jobject) NULL);

            INT_CALL(object = HungarianLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_HungarianLightStemmer_stem(t_HungarianLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizer::class$ = NULL;
          jmethodID *IndicNormalizer::mids$ = NULL;
          bool IndicNormalizer::live$ = false;

          jclass IndicNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizer::IndicNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint IndicNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizer_init_(t_IndicNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizer_normalize(t_IndicNormalizer *self, PyObject *args);

          static PyMethodDef t_IndicNormalizer__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicNormalizer, t_IndicNormalizer, ::java::lang::Object, IndicNormalizer, t_IndicNormalizer_init_, 0, 0, 0, 0, 0);

          void t_IndicNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizer), module, "IndicNormalizer", 0);
          }

          void t_IndicNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicNormalizer).tp_dict, "class_", make_descriptor(IndicNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicNormalizer).tp_dict, "wrapfn_", make_descriptor(t_IndicNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizer::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizer::wrap_Object(IndicNormalizer(((t_IndicNormalizer *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizer_init_(t_IndicNormalizer *self, PyObject *args, PyObject *kwds)
          {
            IndicNormalizer object((jobject) NULL);

            INT_CALL(object = IndicNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_IndicNormalizer_normalize(t_IndicNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LuceneDictionary.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LuceneDictionary::class$ = NULL;
          jmethodID *LuceneDictionary::mids$ = NULL;
          bool LuceneDictionary::live$ = false;

          jclass LuceneDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LuceneDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_215fea03] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LuceneDictionary::LuceneDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_215fea03, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator LuceneDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LuceneDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LuceneDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LuceneDictionary_init_(t_LuceneDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LuceneDictionary_getEntryIterator(t_LuceneDictionary *self);
          static PyObject *t_LuceneDictionary_get__entryIterator(t_LuceneDictionary *self, void *data);
          static PyGetSetDef t_LuceneDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_LuceneDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LuceneDictionary__methods_[] = {
            DECLARE_METHOD(t_LuceneDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LuceneDictionary, t_LuceneDictionary, ::java::lang::Object, LuceneDictionary, t_LuceneDictionary_init_, 0, 0, t_LuceneDictionary__fields_, 0, 0);

          void t_LuceneDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(LuceneDictionary), module, "LuceneDictionary", 0);
          }

          void t_LuceneDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LuceneDictionary).tp_dict, "class_", make_descriptor(LuceneDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LuceneDictionary).tp_dict, "wrapfn_", make_descriptor(t_LuceneDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LuceneDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LuceneDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LuceneDictionary::initializeClass, 1)))
              return NULL;
            return t_LuceneDictionary::wrap_Object(LuceneDictionary(((t_LuceneDictionary *) arg)->object.this$));
          }
          static PyObject *t_LuceneDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LuceneDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LuceneDictionary_init_(t_LuceneDictionary *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            LuceneDictionary object((jobject) NULL);

            if (!parseArgs(args, "ks", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = LuceneDictionary(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LuceneDictionary_getEntryIterator(t_LuceneDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_LuceneDictionary_get__entryIterator(t_LuceneDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/FrenchStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *FrenchStemmer::class$ = NULL;
        jmethodID *FrenchStemmer::mids$ = NULL;
        bool FrenchStemmer::live$ = false;

        jclass FrenchStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/FrenchStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FrenchStemmer::FrenchStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean FrenchStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FrenchStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FrenchStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FrenchStemmer_equals(t_FrenchStemmer *self, PyObject *args);
        static PyObject *t_FrenchStemmer_hashCode(t_FrenchStemmer *self, PyObject *args);
        static PyObject *t_FrenchStemmer_stem(t_FrenchStemmer *self, PyObject *args);

        static PyMethodDef t_FrenchStemmer__methods_[] = {
          DECLARE_METHOD(t_FrenchStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FrenchStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FrenchStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_FrenchStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FrenchStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FrenchStemmer, t_FrenchStemmer, ::org::tartarus::snowball::SnowballProgram, FrenchStemmer, t_FrenchStemmer_init_, 0, 0, 0, 0, 0);

        void t_FrenchStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(FrenchStemmer), module, "FrenchStemmer", 0);
        }

        void t_FrenchStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "class_", make_descriptor(FrenchStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FrenchStemmer::initializeClass, 1)))
            return NULL;
          return t_FrenchStemmer::wrap_Object(FrenchStemmer(((t_FrenchStemmer *) arg)->object.this$));
        }
        static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FrenchStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds)
        {
          FrenchStemmer object((jobject) NULL);

          INT_CALL(object = FrenchStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_FrenchStemmer_equals(t_FrenchStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FrenchStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FrenchStemmer_hashCode(t_FrenchStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FrenchStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FrenchStemmer_stem(t_FrenchStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FrenchStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/ByteSequenceOutputs.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *ByteSequenceOutputs::class$ = NULL;
          jmethodID *ByteSequenceOutputs::mids$ = NULL;
          bool ByteSequenceOutputs::live$ = false;

          jclass ByteSequenceOutputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/ByteSequenceOutputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0991fadd] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_common_0991fadd] = env->getMethodID(cls, "common", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getNoOutput_4ae19461] = env->getMethodID(cls, "getNoOutput", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getSingleton_f61c4f3f] = env->getStaticMethodID(cls, "getSingleton", "()Lorg/apache/lucene/util/fst/ByteSequenceOutputs;");
              mids$[mid_outputToString_edfda73b] = env->getMethodID(cls, "outputToString", "(Lorg/apache/lucene/util/BytesRef;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_7bc03dd8] = env->getMethodID(cls, "ramBytesUsed", "(Lorg/apache/lucene/util/BytesRef;)J");
              mids$[mid_read_78c77a42] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_0991fadd] = env->getMethodID(cls, "subtract", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_write_178211b1] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::add(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_add_0991fadd], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::common(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_common_0991fadd], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::getNoOutput() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getNoOutput_4ae19461]));
          }

          ByteSequenceOutputs ByteSequenceOutputs::getSingleton()
          {
            jclass cls = env->getClass(initializeClass);
            return ByteSequenceOutputs(env->callStaticObjectMethod(cls, mids$[mid_getSingleton_f61c4f3f]));
          }

          ::java::lang::String ByteSequenceOutputs::outputToString(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_edfda73b], a0.this$));
          }

          jlong ByteSequenceOutputs::ramBytesUsed(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_7bc03dd8], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_read_78c77a42], a0.this$));
          }

          void ByteSequenceOutputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef ByteSequenceOutputs::subtract(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_subtract_0991fadd], a0.this$, a1.this$));
          }

          void ByteSequenceOutputs::write(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_178211b1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_ByteSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteSequenceOutputs_of_(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_add(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_common(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_getNoOutput(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_getSingleton(PyTypeObject *type);
          static PyObject *t_ByteSequenceOutputs_outputToString(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_ramBytesUsed(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_read(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_skipOutput(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_subtract(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_write(t_ByteSequenceOutputs *self, PyObject *args);
          static PyObject *t_ByteSequenceOutputs_get__noOutput(t_ByteSequenceOutputs *self, void *data);
          static PyObject *t_ByteSequenceOutputs_get__singleton(t_ByteSequenceOutputs *self, void *data);
          static PyObject *t_ByteSequenceOutputs_get__parameters_(t_ByteSequenceOutputs *self, void *data);
          static PyGetSetDef t_ByteSequenceOutputs__fields_[] = {
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, noOutput),
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, singleton),
            DECLARE_GET_FIELD(t_ByteSequenceOutputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ByteSequenceOutputs__methods_[] = {
            DECLARE_METHOD(t_ByteSequenceOutputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, add, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, common, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, getNoOutput, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, getSingleton, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_ByteSequenceOutputs, outputToString, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, read, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, skipOutput, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_ByteSequenceOutputs, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ByteSequenceOutputs, t_ByteSequenceOutputs, ::org::apache::lucene::util::fst::Outputs, ByteSequenceOutputs, abstract_init, 0, 0, t_ByteSequenceOutputs__fields_, 0, 0);
          PyObject *t_ByteSequenceOutputs::wrap_Object(const ByteSequenceOutputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ByteSequenceOutputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ByteSequenceOutputs *self = (t_ByteSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ByteSequenceOutputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ByteSequenceOutputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ByteSequenceOutputs *self = (t_ByteSequenceOutputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ByteSequenceOutputs::install(PyObject *module)
          {
            installType(&PY_TYPE(ByteSequenceOutputs), module, "ByteSequenceOutputs", 0);
          }

          void t_ByteSequenceOutputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ByteSequenceOutputs).tp_dict, "class_", make_descriptor(ByteSequenceOutputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ByteSequenceOutputs).tp_dict, "wrapfn_", make_descriptor(t_ByteSequenceOutputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ByteSequenceOutputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ByteSequenceOutputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ByteSequenceOutputs::initializeClass, 1)))
              return NULL;
            return t_ByteSequenceOutputs::wrap_Object(ByteSequenceOutputs(((t_ByteSequenceOutputs *) arg)->object.this$));
          }
          static PyObject *t_ByteSequenceOutputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ByteSequenceOutputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ByteSequenceOutputs_of_(t_ByteSequenceOutputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_ByteSequenceOutputs_add(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "add", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_common(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "common", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_getNoOutput(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getNoOutput());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "getNoOutput", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_getSingleton(PyTypeObject *type)
          {
            ByteSequenceOutputs result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::ByteSequenceOutputs::getSingleton());
            return t_ByteSequenceOutputs::wrap_Object(result);
          }

          static PyObject *t_ByteSequenceOutputs_outputToString(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "outputToString", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_ramBytesUsed(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jlong result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_read(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_skipOutput(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "skipOutput", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_subtract(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "subtract", args, 2);
          }

          static PyObject *t_ByteSequenceOutputs_write(t_ByteSequenceOutputs *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ByteSequenceOutputs), (PyObject *) self, "write", args, 2);
          }
          static PyObject *t_ByteSequenceOutputs_get__parameters_(t_ByteSequenceOutputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_ByteSequenceOutputs_get__noOutput(t_ByteSequenceOutputs *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_ByteSequenceOutputs_get__singleton(t_ByteSequenceOutputs *self, void *data)
          {
            ByteSequenceOutputs value((jobject) NULL);
            OBJ_CALL(value = self->object.getSingleton());
            return t_ByteSequenceOutputs::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/DOMUtils.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *DOMUtils::class$ = NULL;
          jmethodID *DOMUtils::mids$ = NULL;
          bool DOMUtils::live$ = false;

          jclass DOMUtils::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/DOMUtils");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DOMUtils::DOMUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_DOMUtils_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DOMUtils_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DOMUtils_init_(t_DOMUtils *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DOMUtils__methods_[] = {
            DECLARE_METHOD(t_DOMUtils, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DOMUtils, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DOMUtils, t_DOMUtils, ::java::lang::Object, DOMUtils, t_DOMUtils_init_, 0, 0, 0, 0, 0);

          void t_DOMUtils::install(PyObject *module)
          {
            installType(&PY_TYPE(DOMUtils), module, "DOMUtils", 0);
          }

          void t_DOMUtils::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DOMUtils).tp_dict, "class_", make_descriptor(DOMUtils::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DOMUtils).tp_dict, "wrapfn_", make_descriptor(t_DOMUtils::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DOMUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DOMUtils_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DOMUtils::initializeClass, 1)))
              return NULL;
            return t_DOMUtils::wrap_Object(DOMUtils(((t_DOMUtils *) arg)->object.this$));
          }
          static PyObject *t_DOMUtils_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DOMUtils::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DOMUtils_init_(t_DOMUtils *self, PyObject *args, PyObject *kwds)
          {
            DOMUtils object((jobject) NULL);

            INT_CALL(object = DOMUtils());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$Arc::class$ = NULL;
          jmethodID *FST$Arc::mids$ = NULL;
          jfieldID *FST$Arc::fids$ = NULL;
          bool FST$Arc::live$ = false;

          jclass FST$Arc::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$Arc");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_copyFrom_8c07e6cb] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/util/fst/FST$Arc;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_isFinal_54c6a16a] = env->getMethodID(cls, "isFinal", "()Z");
              mids$[mid_isLast_54c6a16a] = env->getMethodID(cls, "isLast", "()Z");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_label] = env->getFieldID(cls, "label", "I");
              fids$[fid_nextFinalOutput] = env->getFieldID(cls, "nextFinalOutput", "Ljava/lang/Object;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");
              fids$[fid_target] = env->getFieldID(cls, "target", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$Arc::FST$Arc() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          FST$Arc FST$Arc::copyFrom(const FST$Arc & a0) const
          {
            return FST$Arc(env->callObjectMethod(this$, mids$[mid_copyFrom_8c07e6cb], a0.this$));
          }

          jboolean FST$Arc::isFinal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isFinal_54c6a16a]);
          }

          jboolean FST$Arc::isLast() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isLast_54c6a16a]);
          }

          ::java::lang::String FST$Arc::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jint FST$Arc::_get_label() const
          {
            return env->getIntField(this$, fids$[fid_label]);
          }

          void FST$Arc::_set_label(jint a0) const
          {
            env->setIntField(this$, fids$[fid_label], a0);
          }

          ::java::lang::Object FST$Arc::_get_nextFinalOutput() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_nextFinalOutput]));
          }

          void FST$Arc::_set_nextFinalOutput(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_nextFinalOutput], a0.this$);
          }

          ::java::lang::Object FST$Arc::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void FST$Arc::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }

          jlong FST$Arc::_get_target() const
          {
            return env->getLongField(this$, fids$[fid_target]);
          }

          void FST$Arc::_set_target(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_target], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$Arc_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$Arc_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$Arc_of_(t_FST$Arc *self, PyObject *args);
          static int t_FST$Arc_init_(t_FST$Arc *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST$Arc_copyFrom(t_FST$Arc *self, PyObject *arg);
          static PyObject *t_FST$Arc_isFinal(t_FST$Arc *self);
          static PyObject *t_FST$Arc_isLast(t_FST$Arc *self);
          static PyObject *t_FST$Arc_toString(t_FST$Arc *self, PyObject *args);
          static PyObject *t_FST$Arc_get__label(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__label(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__nextFinalOutput(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__nextFinalOutput(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__output(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__output(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__target(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__target(t_FST$Arc *self, PyObject *arg, void *data);

          static PyObject *t_FST$Arc_get__final(t_FST$Arc *self, void *data);
          static PyObject *t_FST$Arc_get__last(t_FST$Arc *self, void *data);
          static PyObject *t_FST$Arc_get__parameters_(t_FST$Arc *self, void *data);
          static PyGetSetDef t_FST$Arc__fields_[] = {
            DECLARE_GETSET_FIELD(t_FST$Arc, label),
            DECLARE_GETSET_FIELD(t_FST$Arc, nextFinalOutput),
            DECLARE_GETSET_FIELD(t_FST$Arc, output),
            DECLARE_GETSET_FIELD(t_FST$Arc, target),
            DECLARE_GET_FIELD(t_FST$Arc, final),
            DECLARE_GET_FIELD(t_FST$Arc, last),
            DECLARE_GET_FIELD(t_FST$Arc, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$Arc__methods_[] = {
            DECLARE_METHOD(t_FST$Arc, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$Arc, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$Arc, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$Arc, copyFrom, METH_O),
            DECLARE_METHOD(t_FST$Arc, isFinal, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, isLast, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST$Arc, t_FST$Arc, ::java::lang::Object, FST$Arc, t_FST$Arc_init_, 0, 0, t_FST$Arc__fields_, 0, 0);
          PyObject *t_FST$Arc::wrap_Object(const FST$Arc& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$Arc::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$Arc *self = (t_FST$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$Arc::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$Arc::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$Arc *self = (t_FST$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$Arc::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$Arc), module, "FST$Arc", 0);
          }

          void t_FST$Arc::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST$Arc).tp_dict, "class_", make_descriptor(FST$Arc::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST$Arc).tp_dict, "wrapfn_", make_descriptor(t_FST$Arc::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST$Arc).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FST$Arc_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$Arc::initializeClass, 1)))
              return NULL;
            return t_FST$Arc::wrap_Object(FST$Arc(((t_FST$Arc *) arg)->object.this$));
          }
          static PyObject *t_FST$Arc_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$Arc::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$Arc_of_(t_FST$Arc *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST$Arc_init_(t_FST$Arc *self, PyObject *args, PyObject *kwds)
          {
            FST$Arc object((jobject) NULL);

            INT_CALL(object = FST$Arc());
            self->object = object;

            return 0;
          }

          static PyObject *t_FST$Arc_copyFrom(t_FST$Arc *self, PyObject *arg)
          {
            FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            FST$Arc result((jobject) NULL);

            if (!parseArg(arg, "K", FST$Arc::initializeClass, &a0, &p0, t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = self->object.copyFrom(a0));
              return t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "copyFrom", arg);
            return NULL;
          }

          static PyObject *t_FST$Arc_isFinal(t_FST$Arc *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isFinal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$Arc_isLast(t_FST$Arc *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isLast());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$Arc_toString(t_FST$Arc *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FST$Arc), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_FST$Arc_get__parameters_(t_FST$Arc *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST$Arc_get__label(t_FST$Arc *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_label());
            return PyInt_FromLong((long) value);
          }
          static int t_FST$Arc_set__label(t_FST$Arc *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_label(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "label", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__nextFinalOutput(t_FST$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_nextFinalOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_FST$Arc_set__nextFinalOutput(t_FST$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_nextFinalOutput(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "nextFinalOutput", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__output(t_FST$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_FST$Arc_set__output(t_FST$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__target(t_FST$Arc *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_target());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_FST$Arc_set__target(t_FST$Arc *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_target(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "target", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__final(t_FST$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isFinal());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FST$Arc_get__last(t_FST$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isLast());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleAnalyzerWrapper::class$ = NULL;
          jmethodID *ShingleAnalyzerWrapper::mids$ = NULL;
          bool ShingleAnalyzerWrapper::live$ = false;

          jclass ShingleAnalyzerWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_31619410] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_e882998a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;I)V");
              mids$[mid_init$_e55e5adf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;II)V");
              mids$[mid_init$_ad527988] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;II)V");
              mids$[mid_init$_05cde3fa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;IILjava/lang/String;ZZLjava/lang/String;)V");
              mids$[mid_getFillerToken_14c7b5c5] = env->getMethodID(cls, "getFillerToken", "()Ljava/lang/String;");
              mids$[mid_getMaxShingleSize_54c6a179] = env->getMethodID(cls, "getMaxShingleSize", "()I");
              mids$[mid_getMinShingleSize_54c6a179] = env->getMethodID(cls, "getMinShingleSize", "()I");
              mids$[mid_getTokenSeparator_14c7b5c5] = env->getMethodID(cls, "getTokenSeparator", "()Ljava/lang/String;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_isOutputUnigrams_54c6a16a] = env->getMethodID(cls, "isOutputUnigrams", "()Z");
              mids$[mid_isOutputUnigramsIfNoShingles_54c6a16a] = env->getMethodID(cls, "isOutputUnigramsIfNoShingles", "()Z");
              mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_31619410, a0.this$)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_e882998a, a0.this$, a1)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::util::Version & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_e55e5adf, a0.this$, a1, a2)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_ad527988, a0.this$, a1, a2)) {}

          ShingleAnalyzerWrapper::ShingleAnalyzerWrapper(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jint a2, const ::java::lang::String & a3, jboolean a4, jboolean a5, const ::java::lang::String & a6) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_05cde3fa, a0.this$, a1, a2, a3.this$, a4, a5, a6.this$)) {}

          ::java::lang::String ShingleAnalyzerWrapper::getFillerToken() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFillerToken_14c7b5c5]));
          }

          jint ShingleAnalyzerWrapper::getMaxShingleSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxShingleSize_54c6a179]);
          }

          jint ShingleAnalyzerWrapper::getMinShingleSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinShingleSize_54c6a179]);
          }

          ::java::lang::String ShingleAnalyzerWrapper::getTokenSeparator() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTokenSeparator_14c7b5c5]));
          }

          ::org::apache::lucene::analysis::Analyzer ShingleAnalyzerWrapper::getWrappedAnalyzer(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getWrappedAnalyzer_29a2299f], a0.this$));
          }

          jboolean ShingleAnalyzerWrapper::isOutputUnigrams() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOutputUnigrams_54c6a16a]);
          }

          jboolean ShingleAnalyzerWrapper::isOutputUnigramsIfNoShingles() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOutputUnigramsIfNoShingles_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleAnalyzerWrapper_init_(t_ShingleAnalyzerWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleAnalyzerWrapper_getFillerToken(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getMaxShingleSize(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getMinShingleSize(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getTokenSeparator(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_getWrappedAnalyzer(t_ShingleAnalyzerWrapper *self, PyObject *arg);
          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigrams(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self);
          static PyObject *t_ShingleAnalyzerWrapper_get__fillerToken(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__maxShingleSize(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__minShingleSize(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigrams(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self, void *data);
          static PyObject *t_ShingleAnalyzerWrapper_get__tokenSeparator(t_ShingleAnalyzerWrapper *self, void *data);
          static PyGetSetDef t_ShingleAnalyzerWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, fillerToken),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, maxShingleSize),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, minShingleSize),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, outputUnigrams),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, outputUnigramsIfNoShingles),
            DECLARE_GET_FIELD(t_ShingleAnalyzerWrapper, tokenSeparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ShingleAnalyzerWrapper__methods_[] = {
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getFillerToken, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getMaxShingleSize, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getMinShingleSize, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getTokenSeparator, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, getWrappedAnalyzer, METH_O),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, isOutputUnigrams, METH_NOARGS),
            DECLARE_METHOD(t_ShingleAnalyzerWrapper, isOutputUnigramsIfNoShingles, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ShingleAnalyzerWrapper, t_ShingleAnalyzerWrapper, ::org::apache::lucene::analysis::AnalyzerWrapper, ShingleAnalyzerWrapper, t_ShingleAnalyzerWrapper_init_, 0, 0, t_ShingleAnalyzerWrapper__fields_, 0, 0);

          void t_ShingleAnalyzerWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleAnalyzerWrapper), module, "ShingleAnalyzerWrapper", 0);
          }

          void t_ShingleAnalyzerWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ShingleAnalyzerWrapper).tp_dict, "class_", make_descriptor(ShingleAnalyzerWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ShingleAnalyzerWrapper).tp_dict, "wrapfn_", make_descriptor(t_ShingleAnalyzerWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ShingleAnalyzerWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ShingleAnalyzerWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleAnalyzerWrapper::initializeClass, 1)))
              return NULL;
            return t_ShingleAnalyzerWrapper::wrap_Object(ShingleAnalyzerWrapper(((t_ShingleAnalyzerWrapper *) arg)->object.this$));
          }
          static PyObject *t_ShingleAnalyzerWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleAnalyzerWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleAnalyzerWrapper_init_(t_ShingleAnalyzerWrapper *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jint a2;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "KII", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jint a2;
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 7:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                jboolean a4;
                jboolean a5;
                ::java::lang::String a6((jobject) NULL);
                ShingleAnalyzerWrapper object((jobject) NULL);

                if (!parseArgs(args, "kIIsZZs", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  INT_CALL(object = ShingleAnalyzerWrapper(a0, a1, a2, a3, a4, a5, a6));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleAnalyzerWrapper_getFillerToken(t_ShingleAnalyzerWrapper *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFillerToken());
            return j2p(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getMaxShingleSize(t_ShingleAnalyzerWrapper *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxShingleSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getMinShingleSize(t_ShingleAnalyzerWrapper *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinShingleSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getTokenSeparator(t_ShingleAnalyzerWrapper *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getTokenSeparator());
            return j2p(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_getWrappedAnalyzer(t_ShingleAnalyzerWrapper *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getWrappedAnalyzer(a0));
              return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWrappedAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigrams(t_ShingleAnalyzerWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isOutputUnigrams());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_isOutputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isOutputUnigramsIfNoShingles());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__fillerToken(t_ShingleAnalyzerWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFillerToken());
            return j2p(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__maxShingleSize(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxShingleSize());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__minShingleSize(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinShingleSize());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigrams(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isOutputUnigrams());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__outputUnigramsIfNoShingles(t_ShingleAnalyzerWrapper *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isOutputUnigramsIfNoShingles());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_ShingleAnalyzerWrapper_get__tokenSeparator(t_ShingleAnalyzerWrapper *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getTokenSeparator());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenizerFactory::class$ = NULL;
          jmethodID *NGramTokenizerFactory::mids$ = NULL;
          bool NGramTokenizerFactory::live$ = false;

          jclass NGramTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenizerFactory::NGramTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer NGramTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenizerFactory_init_(t_NGramTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenizerFactory_create(t_NGramTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_NGramTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_NGramTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramTokenizerFactory, t_NGramTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, NGramTokenizerFactory, t_NGramTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_NGramTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenizerFactory), module, "NGramTokenizerFactory", 0);
          }

          void t_NGramTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramTokenizerFactory).tp_dict, "class_", make_descriptor(NGramTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_NGramTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_NGramTokenizerFactory::wrap_Object(NGramTokenizerFactory(((t_NGramTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenizerFactory_init_(t_NGramTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NGramTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NGramTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenizerFactory_create(t_NGramTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NGramTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/analyzing/FSTUtil$Path.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {

            ::java::lang::Class *FSTUtil$Path::class$ = NULL;
            jmethodID *FSTUtil$Path::mids$ = NULL;
            jfieldID *FSTUtil$Path::fids$ = NULL;
            bool FSTUtil$Path::live$ = false;

            jclass FSTUtil$Path::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/analyzing/FSTUtil$Path");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f5d3d1ef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/State;Lorg/apache/lucene/util/fst/FST$Arc;Ljava/lang/Object;Lorg/apache/lucene/util/IntsRef;)V");

                fids$ = new jfieldID[max_fid];
                fids$[fid_fstNode] = env->getFieldID(cls, "fstNode", "Lorg/apache/lucene/util/fst/FST$Arc;");
                fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");
                fids$[fid_state] = env->getFieldID(cls, "state", "Lorg/apache/lucene/util/automaton/State;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTUtil$Path::FSTUtil$Path(const ::org::apache::lucene::util::automaton::State & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::java::lang::Object & a2, const ::org::apache::lucene::util::IntsRef & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f5d3d1ef, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::util::fst::FST$Arc FSTUtil$Path::_get_fstNode() const
            {
              return ::org::apache::lucene::util::fst::FST$Arc(env->getObjectField(this$, fids$[fid_fstNode]));
            }

            ::org::apache::lucene::util::IntsRef FSTUtil$Path::_get_input() const
            {
              return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
            }

            ::org::apache::lucene::util::automaton::State FSTUtil$Path::_get_state() const
            {
              return ::org::apache::lucene::util::automaton::State(env->getObjectField(this$, fids$[fid_state]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace analyzing {
            static PyObject *t_FSTUtil$Path_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil$Path_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTUtil$Path_of_(t_FSTUtil$Path *self, PyObject *args);
            static int t_FSTUtil$Path_init_(t_FSTUtil$Path *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTUtil$Path_get__fstNode(t_FSTUtil$Path *self, void *data);
            static PyObject *t_FSTUtil$Path_get__input(t_FSTUtil$Path *self, void *data);
            static PyObject *t_FSTUtil$Path_get__state(t_FSTUtil$Path *self, void *data);

            static PyObject *t_FSTUtil$Path_get__parameters_(t_FSTUtil$Path *self, void *data);
            static PyGetSetDef t_FSTUtil$Path__fields_[] = {
              DECLARE_GET_FIELD(t_FSTUtil$Path, fstNode),
              DECLARE_GET_FIELD(t_FSTUtil$Path, input),
              DECLARE_GET_FIELD(t_FSTUtil$Path, state),
              DECLARE_GET_FIELD(t_FSTUtil$Path, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTUtil$Path__methods_[] = {
              DECLARE_METHOD(t_FSTUtil$Path, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil$Path, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTUtil$Path, of_, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTUtil$Path, t_FSTUtil$Path, ::java::lang::Object, FSTUtil$Path, t_FSTUtil$Path_init_, 0, 0, t_FSTUtil$Path__fields_, 0, 0);
            PyObject *t_FSTUtil$Path::wrap_Object(const FSTUtil$Path& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FSTUtil$Path::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FSTUtil$Path *self = (t_FSTUtil$Path *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FSTUtil$Path::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FSTUtil$Path::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FSTUtil$Path *self = (t_FSTUtil$Path *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FSTUtil$Path::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTUtil$Path), module, "FSTUtil$Path", 0);
            }

            void t_FSTUtil$Path::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTUtil$Path).tp_dict, "class_", make_descriptor(FSTUtil$Path::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTUtil$Path).tp_dict, "wrapfn_", make_descriptor(t_FSTUtil$Path::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTUtil$Path).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTUtil$Path_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTUtil$Path::initializeClass, 1)))
                return NULL;
              return t_FSTUtil$Path::wrap_Object(FSTUtil$Path(((t_FSTUtil$Path *) arg)->object.this$));
            }
            static PyObject *t_FSTUtil$Path_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTUtil$Path::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FSTUtil$Path_of_(t_FSTUtil$Path *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FSTUtil$Path_init_(t_FSTUtil$Path *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::util::automaton::State a0((jobject) NULL);
              ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::lang::Object a2((jobject) NULL);
              ::org::apache::lucene::util::IntsRef a3((jobject) NULL);
              FSTUtil$Path object((jobject) NULL);

              if (!parseArgs(args, "kKok", ::org::apache::lucene::util::automaton::State::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &a3))
              {
                INT_CALL(object = FSTUtil$Path(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
            static PyObject *t_FSTUtil$Path_get__parameters_(t_FSTUtil$Path *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_FSTUtil$Path_get__fstNode(t_FSTUtil$Path *self, void *data)
            {
              ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
              OBJ_CALL(value = self->object._get_fstNode());
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(value);
            }

            static PyObject *t_FSTUtil$Path_get__input(t_FSTUtil$Path *self, void *data)
            {
              ::org::apache::lucene::util::IntsRef value((jobject) NULL);
              OBJ_CALL(value = self->object._get_input());
              return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
            }

            static PyObject *t_FSTUtil$Path_get__state(t_FSTUtil$Path *self, void *data)
            {
              ::org::apache::lucene::util::automaton::State value((jobject) NULL);
              OBJ_CALL(value = self->object._get_state());
              return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Float::class$ = NULL;
    jmethodID *Float::mids$ = NULL;
    bool Float::live$ = false;
    jint Float::MAX_EXPONENT = (jint) 0;
    jfloat Float::MAX_VALUE = (jfloat) 0;
    jint Float::MIN_EXPONENT = (jint) 0;
    jfloat Float::MIN_NORMAL = (jfloat) 0;
    jfloat Float::MIN_VALUE = (jfloat) 0;
    jfloat Float::NEGATIVE_INFINITY = (jfloat) 0;
    jfloat Float::NaN = (jfloat) 0;
    jfloat Float::POSITIVE_INFINITY = (jfloat) 0;
    jint Float::SIZE = (jint) 0;
    ::java::lang::Class *Float::TYPE = NULL;

    jclass Float::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Float");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
        mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_f1b0c01b] = env->getStaticMethodID(cls, "compare", "(FF)I");
        mids$[mid_compareTo_6b30eb75] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Float;)I");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatToIntBits_06298cb4] = env->getStaticMethodID(cls, "floatToIntBits", "(F)I");
        mids$[mid_floatToRawIntBits_06298cb4] = env->getStaticMethodID(cls, "floatToRawIntBits", "(F)I");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_intBitsToFloat_39c7bd2c] = env->getStaticMethodID(cls, "intBitsToFloat", "(I)F");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_isInfinite_54c6a16a] = env->getMethodID(cls, "isInfinite", "()Z");
        mids$[mid_isInfinite_06298ca7] = env->getStaticMethodID(cls, "isInfinite", "(F)Z");
        mids$[mid_isNaN_54c6a16a] = env->getMethodID(cls, "isNaN", "()Z");
        mids$[mid_isNaN_06298ca7] = env->getStaticMethodID(cls, "isNaN", "(F)Z");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseFloat_5fdc3f58] = env->getStaticMethodID(cls, "parseFloat", "(Ljava/lang/String;)F");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toHexString_5ded254a] = env->getStaticMethodID(cls, "toHexString", "(F)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_5ded254a] = env->getStaticMethodID(cls, "toString", "(F)Ljava/lang/String;");
        mids$[mid_valueOf_685a245e] = env->getStaticMethodID(cls, "valueOf", "(F)Ljava/lang/Float;");
        mids$[mid_valueOf_b837041d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Float;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_EXPONENT = env->getStaticIntField(cls, "MAX_EXPONENT");
        MAX_VALUE = env->getStaticFloatField(cls, "MAX_VALUE");
        MIN_EXPONENT = env->getStaticIntField(cls, "MIN_EXPONENT");
        MIN_NORMAL = env->getStaticFloatField(cls, "MIN_NORMAL");
        MIN_VALUE = env->getStaticFloatField(cls, "MIN_VALUE");
        NEGATIVE_INFINITY = env->getStaticFloatField(cls, "NEGATIVE_INFINITY");
        NaN = env->getStaticFloatField(cls, "NaN");
        POSITIVE_INFINITY = env->getStaticFloatField(cls, "POSITIVE_INFINITY");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Float::Float(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Float::Float(jdouble a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

    Float::Float(jfloat a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

    jbyte Float::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Float::compare(jfloat a0, jfloat a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_f1b0c01b], a0, a1);
    }

    jint Float::compareTo(const Float & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_6b30eb75], a0.this$);
    }

    jdouble Float::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Float::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jint Float::floatToIntBits(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_floatToIntBits_06298cb4], a0);
    }

    jint Float::floatToRawIntBits(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_floatToRawIntBits_06298cb4], a0);
    }

    jfloat Float::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Float::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jfloat Float::intBitsToFloat(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_intBitsToFloat_39c7bd2c], a0);
    }

    jint Float::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jboolean Float::isInfinite() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInfinite_54c6a16a]);
    }

    jboolean Float::isInfinite(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isInfinite_06298ca7], a0);
    }

    jboolean Float::isNaN() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isNaN_54c6a16a]);
    }

    jboolean Float::isNaN(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_isNaN_06298ca7], a0);
    }

    jlong Float::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jfloat Float::parseFloat(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticFloatMethod(cls, mids$[mid_parseFloat_5fdc3f58], a0.this$);
    }

    jshort Float::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Float::toHexString(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_5ded254a], a0));
    }

    ::java::lang::String Float::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Float::toString(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_5ded254a], a0));
    }

    Float Float::valueOf(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Float(env->callStaticObjectMethod(cls, mids$[mid_valueOf_685a245e], a0));
    }

    Float Float::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Float(env->callStaticObjectMethod(cls, mids$[mid_valueOf_b837041d], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Float_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Float_init_(t_Float *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Float_byteValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_compareTo(t_Float *self, PyObject *arg);
    static PyObject *t_Float_doubleValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_equals(t_Float *self, PyObject *args);
    static PyObject *t_Float_floatToIntBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_floatToRawIntBits(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_floatValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_hashCode(t_Float *self, PyObject *args);
    static PyObject *t_Float_intBitsToFloat(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_intValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_isInfinite(t_Float *self);
    static PyObject *t_Float_isInfinite_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_isNaN(t_Float *self);
    static PyObject *t_Float_isNaN_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_longValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_parseFloat(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_shortValue(t_Float *self, PyObject *args);
    static PyObject *t_Float_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Float_toString(t_Float *self, PyObject *args);
    static PyObject *t_Float_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_Float_get__infinite(t_Float *self, void *data);
    static PyObject *t_Float_get__naN(t_Float *self, void *data);
    static PyGetSetDef t_Float__fields_[] = {
      DECLARE_GET_FIELD(t_Float, infinite),
      DECLARE_GET_FIELD(t_Float, naN),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Float__methods_[] = {
      DECLARE_METHOD(t_Float, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Float, compareTo, METH_O),
      DECLARE_METHOD(t_Float, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, equals, METH_VARARGS),
      DECLARE_METHOD(t_Float, floatToIntBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, floatToRawIntBits, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Float, intBitsToFloat, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, isInfinite, METH_NOARGS),
      DECLARE_METHOD(t_Float, isInfinite_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, isNaN, METH_NOARGS),
      DECLARE_METHOD(t_Float, isNaN_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, parseFloat, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Float, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, toString, METH_VARARGS),
      DECLARE_METHOD(t_Float, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Float, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Float, t_Float, ::java::lang::Number, Float, t_Float_init_, 0, 0, t_Float__fields_, 0, 0);

    void t_Float::install(PyObject *module)
    {
      installType(&PY_TYPE(Float), module, "Float", 0);
    }

    void t_Float::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "class_", make_descriptor(Float::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "wrapfn_", make_descriptor(unboxFloat));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "boxfn_", make_descriptor(boxFloat));
      env->getClass(Float::initializeClass);
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MAX_EXPONENT", make_descriptor(Float::MAX_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MAX_VALUE", make_descriptor(Float::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_EXPONENT", make_descriptor(Float::MIN_EXPONENT));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_NORMAL", make_descriptor(Float::MIN_NORMAL));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_VALUE", make_descriptor(Float::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "NEGATIVE_INFINITY", make_descriptor(Float::NEGATIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "NaN", make_descriptor(Float::NaN));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "POSITIVE_INFINITY", make_descriptor(Float::POSITIVE_INFINITY));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "SIZE", make_descriptor(Float::SIZE));
      PyDict_SetItemString(PY_TYPE(Float).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Float::TYPE)));
    }

    static PyObject *t_Float_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Float::initializeClass, 1)))
        return NULL;
      return t_Float::wrap_Object(Float(((t_Float *) arg)->object.this$));
    }
    static PyObject *t_Float_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Float::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Float_init_(t_Float *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Float object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
        {
          jdouble a0;
          Float object((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
        {
          jfloat a0;
          Float object((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            INT_CALL(object = Float(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Float_byteValue(t_Float *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Float_compare(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      jfloat a1;
      jint result;

      if (!parseArgs(args, "FF", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Float::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Float_compareTo(t_Float *self, PyObject *arg)
    {
      Float a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Float), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Float_doubleValue(t_Float *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Float_equals(t_Float *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Float_floatToIntBits(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jint result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::floatToIntBits(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "floatToIntBits", arg);
      return NULL;
    }

    static PyObject *t_Float_floatToRawIntBits(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jint result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::floatToRawIntBits(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "floatToRawIntBits", arg);
      return NULL;
    }

    static PyObject *t_Float_floatValue(t_Float *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Float_hashCode(t_Float *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Float_intBitsToFloat(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jfloat result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::intBitsToFloat(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "intBitsToFloat", arg);
      return NULL;
    }

    static PyObject *t_Float_intValue(t_Float *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Float_isInfinite(t_Float *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInfinite());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Float_isInfinite_(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isInfinite(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isInfinite_", arg);
      return NULL;
    }

    static PyObject *t_Float_isNaN(t_Float *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isNaN());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Float_isNaN_(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      jboolean result;

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::isNaN(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "isNaN_", arg);
      return NULL;
    }

    static PyObject *t_Float_longValue(t_Float *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Float_parseFloat(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jfloat result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::parseFloat(a0));
        return PyFloat_FromDouble((double) result);
      }

      PyErr_SetArgsError(type, "parseFloat", arg);
      return NULL;
    }

    static PyObject *t_Float_shortValue(t_Float *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Float_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jfloat a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Float_toString(t_Float *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Float), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Float_toString_(PyTypeObject *type, PyObject *args)
    {
      jfloat a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "F", &a0))
      {
        OBJ_CALL(result = ::java::lang::Float::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Float_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jfloat a0;
          Float result((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(result = ::java::lang::Float::valueOf(a0));
            return t_Float::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Float result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Float::valueOf(a0));
            return t_Float::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_Float_get__infinite(t_Float *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInfinite());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Float_get__naN(t_Float *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isNaN());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SortedSetSortField.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/sandbox/queries/SortedSetSortField$Selector.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SortedSetSortField::class$ = NULL;
          jmethodID *SortedSetSortField::mids$ = NULL;
          bool SortedSetSortField::live$ = false;

          jclass SortedSetSortField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SortedSetSortField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
              mids$[mid_init$_95ba0b53] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZLorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
              mids$[mid_getSelector_01e98d5f] = env->getMethodID(cls, "getSelector", "()Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setMissingValue_290588ee] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetSortField::SortedSetSortField(const ::java::lang::String & a0, jboolean a1) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

          SortedSetSortField::SortedSetSortField(const ::java::lang::String & a0, jboolean a1, const ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector & a2) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_95ba0b53, a0.this$, a1, a2.this$)) {}

          jboolean SortedSetSortField::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::search::FieldComparator SortedSetSortField::getComparator(jint a0, jint a1) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
          }

          ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector SortedSetSortField::getSelector() const
          {
            return ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector(env->callObjectMethod(this$, mids$[mid_getSelector_01e98d5f]));
          }

          jint SortedSetSortField::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void SortedSetSortField::setMissingValue(const ::java::lang::Object & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMissingValue_290588ee], a0.this$);
          }

          ::java::lang::String SortedSetSortField::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SortedSetSortField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetSortField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedSetSortField_init_(t_SortedSetSortField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedSetSortField_equals(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_getComparator(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_getSelector(t_SortedSetSortField *self);
          static PyObject *t_SortedSetSortField_hashCode(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_setMissingValue(t_SortedSetSortField *self, PyObject *args);
          static PyObject *t_SortedSetSortField_toString(t_SortedSetSortField *self, PyObject *args);
          static int t_SortedSetSortField_set__missingValue(t_SortedSetSortField *self, PyObject *arg, void *data);
          static PyObject *t_SortedSetSortField_get__selector(t_SortedSetSortField *self, void *data);
          static PyGetSetDef t_SortedSetSortField__fields_[] = {
            DECLARE_SET_FIELD(t_SortedSetSortField, missingValue),
            DECLARE_GET_FIELD(t_SortedSetSortField, selector),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetSortField__methods_[] = {
            DECLARE_METHOD(t_SortedSetSortField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField, equals, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, getSelector, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetSortField, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, setMissingValue, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetSortField, t_SortedSetSortField, ::org::apache::lucene::search::SortField, SortedSetSortField, t_SortedSetSortField_init_, 0, 0, t_SortedSetSortField__fields_, 0, 0);

          void t_SortedSetSortField::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetSortField), module, "SortedSetSortField", 0);
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "Selector", make_descriptor(&PY_TYPE(SortedSetSortField$Selector)));
          }

          void t_SortedSetSortField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "class_", make_descriptor(SortedSetSortField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "wrapfn_", make_descriptor(t_SortedSetSortField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetSortField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetSortField::initializeClass, 1)))
              return NULL;
            return t_SortedSetSortField::wrap_Object(SortedSetSortField(((t_SortedSetSortField *) arg)->object.this$));
          }
          static PyObject *t_SortedSetSortField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetSortField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedSetSortField_init_(t_SortedSetSortField *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                SortedSetSortField object((jobject) NULL);

                if (!parseArgs(args, "sZ", &a0, &a1))
                {
                  INT_CALL(object = SortedSetSortField(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector a2((jobject) NULL);
                PyTypeObject **p2;
                SortedSetSortField object((jobject) NULL);

                if (!parseArgs(args, "sZK", ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::sandbox::queries::t_SortedSetSortField$Selector::parameters_))
                {
                  INT_CALL(object = SortedSetSortField(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedSetSortField_equals(t_SortedSetSortField *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SortedSetSortField_getComparator(t_SortedSetSortField *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getComparator(a0, a1));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_SortedSetSortField_getSelector(t_SortedSetSortField *self)
          {
            ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector result((jobject) NULL);
            OBJ_CALL(result = self->object.getSelector());
            return ::org::apache::lucene::sandbox::queries::t_SortedSetSortField$Selector::wrap_Object(result);
          }

          static PyObject *t_SortedSetSortField_hashCode(t_SortedSetSortField *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SortedSetSortField_setMissingValue(t_SortedSetSortField *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(self->object.setMissingValue(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "setMissingValue", args, 2);
          }

          static PyObject *t_SortedSetSortField_toString(t_SortedSetSortField *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SortedSetSortField), (PyObject *) self, "toString", args, 2);
          }

          static int t_SortedSetSortField_set__missingValue(t_SortedSetSortField *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::Object value((jobject) NULL);
              if (!parseArg(arg, "o", &value))
              {
                INT_CALL(self->object.setMissingValue(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
            return -1;
          }

          static PyObject *t_SortedSetSortField_get__selector(t_SortedSetSortField *self, void *data)
          {
            ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector value((jobject) NULL);
            OBJ_CALL(value = self->object.getSelector());
            return ::org::apache::lucene::sandbox::queries::t_SortedSetSortField$Selector::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BaseCompositeReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/Term.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BaseCompositeReader::class$ = NULL;
        jmethodID *BaseCompositeReader::mids$ = NULL;
        bool BaseCompositeReader::live$ = false;

        jclass BaseCompositeReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BaseCompositeReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docFreq_7eca6a9e] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_getDocCount_5fdc3f57] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getSumDocFreq_5fdc3f54] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_5fdc3f54] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_totalTermFreq_7eca6a9d] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_readerIndex_39c7bd23] = env->getMethodID(cls, "readerIndex", "(I)I");
            mids$[mid_getSequentialSubReaders_87851566] = env->getMethodID(cls, "getSequentialSubReaders", "()Ljava/util/List;");
            mids$[mid_readerBase_39c7bd23] = env->getMethodID(cls, "readerBase", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint BaseCompositeReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_7eca6a9e], a0.this$);
        }

        void BaseCompositeReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        jint BaseCompositeReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_5fdc3f57], a0.this$);
        }

        jlong BaseCompositeReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_5fdc3f54], a0.this$);
        }

        jlong BaseCompositeReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::index::Fields BaseCompositeReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jint BaseCompositeReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint BaseCompositeReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        jlong BaseCompositeReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_7eca6a9d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BaseCompositeReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseCompositeReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BaseCompositeReader_of_(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_docFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_document(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getDocCount(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getSumDocFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getSumTotalTermFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_getTermVectors(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_maxDoc(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_numDocs(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_totalTermFreq(t_BaseCompositeReader *self, PyObject *args);
        static PyObject *t_BaseCompositeReader_get__parameters_(t_BaseCompositeReader *self, void *data);
        static PyGetSetDef t_BaseCompositeReader__fields_[] = {
          DECLARE_GET_FIELD(t_BaseCompositeReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BaseCompositeReader__methods_[] = {
          DECLARE_METHOD(t_BaseCompositeReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseCompositeReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BaseCompositeReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, document, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getDocCount, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getSumDocFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getSumTotalTermFreq, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_BaseCompositeReader, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BaseCompositeReader, t_BaseCompositeReader, ::org::apache::lucene::index::CompositeReader, BaseCompositeReader, abstract_init, 0, 0, t_BaseCompositeReader__fields_, 0, 0);
        PyObject *t_BaseCompositeReader::wrap_Object(const BaseCompositeReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BaseCompositeReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BaseCompositeReader *self = (t_BaseCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_BaseCompositeReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BaseCompositeReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BaseCompositeReader *self = (t_BaseCompositeReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_BaseCompositeReader::install(PyObject *module)
        {
          installType(&PY_TYPE(BaseCompositeReader), module, "BaseCompositeReader", 0);
        }

        void t_BaseCompositeReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BaseCompositeReader).tp_dict, "class_", make_descriptor(BaseCompositeReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BaseCompositeReader).tp_dict, "wrapfn_", make_descriptor(t_BaseCompositeReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BaseCompositeReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BaseCompositeReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BaseCompositeReader::initializeClass, 1)))
            return NULL;
          return t_BaseCompositeReader::wrap_Object(BaseCompositeReader(((t_BaseCompositeReader *) arg)->object.this$));
        }
        static PyObject *t_BaseCompositeReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BaseCompositeReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BaseCompositeReader_of_(t_BaseCompositeReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_BaseCompositeReader_docFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_document(t_BaseCompositeReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getDocCount(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getDocCount", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getSumDocFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getSumDocFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getSumTotalTermFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
        }

        static PyObject *t_BaseCompositeReader_getTermVectors(t_BaseCompositeReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_BaseCompositeReader_maxDoc(t_BaseCompositeReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_BaseCompositeReader_numDocs(t_BaseCompositeReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_BaseCompositeReader_totalTermFreq(t_BaseCompositeReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(BaseCompositeReader), (PyObject *) self, "totalTermFreq", args, 2);
        }
        static PyObject *t_BaseCompositeReader_get__parameters_(t_BaseCompositeReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Boolean.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/io/Serializable.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Boolean::class$ = NULL;
    jmethodID *Boolean::mids$ = NULL;
    bool Boolean::live$ = false;
    Boolean *Boolean::FALSE = NULL;
    Boolean *Boolean::TRUE = NULL;
    ::java::lang::Class *Boolean::TYPE = NULL;

    jclass Boolean::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Boolean");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_booleanValue_54c6a16a] = env->getMethodID(cls, "booleanValue", "()Z");
        mids$[mid_compare_46f2e2db] = env->getStaticMethodID(cls, "compare", "(ZZ)I");
        mids$[mid_compareTo_d07f0c91] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Boolean;)I");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getBoolean_5fdc3f44] = env->getStaticMethodID(cls, "getBoolean", "(Ljava/lang/String;)Z");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_parseBoolean_5fdc3f44] = env->getStaticMethodID(cls, "parseBoolean", "(Ljava/lang/String;)Z");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_445a175e] = env->getStaticMethodID(cls, "toString", "(Z)Ljava/lang/String;");
        mids$[mid_valueOf_a98d5bba] = env->getStaticMethodID(cls, "valueOf", "(Z)Ljava/lang/Boolean;");
        mids$[mid_valueOf_9d4a8ff9] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Boolean;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        FALSE = new Boolean(env->getStaticObjectField(cls, "FALSE", "Ljava/lang/Boolean;"));
        TRUE = new Boolean(env->getStaticObjectField(cls, "TRUE", "Ljava/lang/Boolean;"));
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Boolean::Boolean(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

    Boolean::Boolean(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jboolean Boolean::booleanValue() const
    {
      return env->callBooleanMethod(this$, mids$[mid_booleanValue_54c6a16a]);
    }

    jint Boolean::compare(jboolean a0, jboolean a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_46f2e2db], a0, a1);
    }

    jint Boolean::compareTo(const Boolean & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_d07f0c91], a0.this$);
    }

    jboolean Boolean::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jboolean Boolean::getBoolean(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_getBoolean_5fdc3f44], a0.this$);
    }

    jint Boolean::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean Boolean::parseBoolean(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_parseBoolean_5fdc3f44], a0.this$);
    }

    ::java::lang::String Boolean::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Boolean::toString(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_445a175e], a0));
    }

    Boolean Boolean::valueOf(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Boolean(env->callStaticObjectMethod(cls, mids$[mid_valueOf_a98d5bba], a0));
    }

    Boolean Boolean::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Boolean(env->callStaticObjectMethod(cls, mids$[mid_valueOf_9d4a8ff9], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Boolean_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Boolean_init_(t_Boolean *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Boolean_booleanValue(t_Boolean *self);
    static PyObject *t_Boolean_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_compareTo(t_Boolean *self, PyObject *arg);
    static PyObject *t_Boolean_equals(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_getBoolean(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_hashCode(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_parseBoolean(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Boolean_toString(t_Boolean *self, PyObject *args);
    static PyObject *t_Boolean_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Boolean_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Boolean__methods_[] = {
      DECLARE_METHOD(t_Boolean, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, booleanValue, METH_NOARGS),
      DECLARE_METHOD(t_Boolean, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Boolean, compareTo, METH_O),
      DECLARE_METHOD(t_Boolean, equals, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, getBoolean, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, parseBoolean, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, toString, METH_VARARGS),
      DECLARE_METHOD(t_Boolean, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Boolean, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Boolean, t_Boolean, ::java::lang::Object, Boolean, t_Boolean_init_, 0, 0, 0, 0, 0);

    void t_Boolean::install(PyObject *module)
    {
      installType(&PY_TYPE(Boolean), module, "Boolean", 0);
    }

    void t_Boolean::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "class_", make_descriptor(Boolean::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "wrapfn_", make_descriptor(unboxBoolean));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "boxfn_", make_descriptor(boxBoolean));
      env->getClass(Boolean::initializeClass);
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "FALSE", make_descriptor(t_Boolean::wrap_Object(*Boolean::FALSE)));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "TRUE", make_descriptor(t_Boolean::wrap_Object(*Boolean::TRUE)));
      PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Boolean::TYPE)));
    }

    static PyObject *t_Boolean_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Boolean::initializeClass, 1)))
        return NULL;
      return t_Boolean::wrap_Object(Boolean(((t_Boolean *) arg)->object.this$));
    }
    static PyObject *t_Boolean_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Boolean::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Boolean_init_(t_Boolean *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jboolean a0;
          Boolean object((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            INT_CALL(object = Boolean(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Boolean object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Boolean(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Boolean_booleanValue(t_Boolean *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.booleanValue());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Boolean_compare(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      jboolean a1;
      jint result;

      if (!parseArgs(args, "ZZ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Boolean::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Boolean_compareTo(t_Boolean *self, PyObject *arg)
    {
      Boolean a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Boolean), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Boolean_equals(t_Boolean *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Boolean_getBoolean(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::getBoolean(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "getBoolean", arg);
      return NULL;
    }

    static PyObject *t_Boolean_hashCode(t_Boolean *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Boolean_parseBoolean(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::parseBoolean(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "parseBoolean", arg);
      return NULL;
    }

    static PyObject *t_Boolean_toString(t_Boolean *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Boolean_toString_(PyTypeObject *type, PyObject *args)
    {
      jboolean a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "Z", &a0))
      {
        OBJ_CALL(result = ::java::lang::Boolean::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Boolean_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jboolean a0;
          Boolean result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = ::java::lang::Boolean::valueOf(a0));
            return t_Boolean::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Boolean result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Boolean::valueOf(a0));
            return t_Boolean::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/GermanStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *GermanStemmer::class$ = NULL;
        jmethodID *GermanStemmer::mids$ = NULL;
        bool GermanStemmer::live$ = false;

        jclass GermanStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/GermanStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        GermanStemmer::GermanStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean GermanStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint GermanStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean GermanStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_GermanStemmer_equals(t_GermanStemmer *self, PyObject *args);
        static PyObject *t_GermanStemmer_hashCode(t_GermanStemmer *self, PyObject *args);
        static PyObject *t_GermanStemmer_stem(t_GermanStemmer *self, PyObject *args);

        static PyMethodDef t_GermanStemmer__methods_[] = {
          DECLARE_METHOD(t_GermanStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GermanStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GermanStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_GermanStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_GermanStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(GermanStemmer, t_GermanStemmer, ::org::tartarus::snowball::SnowballProgram, GermanStemmer, t_GermanStemmer_init_, 0, 0, 0, 0, 0);

        void t_GermanStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(GermanStemmer), module, "GermanStemmer", 0);
        }

        void t_GermanStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "class_", make_descriptor(GermanStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(GermanStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_GermanStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GermanStemmer::initializeClass, 1)))
            return NULL;
          return t_GermanStemmer::wrap_Object(GermanStemmer(((t_GermanStemmer *) arg)->object.this$));
        }
        static PyObject *t_GermanStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GermanStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_GermanStemmer_init_(t_GermanStemmer *self, PyObject *args, PyObject *kwds)
        {
          GermanStemmer object((jobject) NULL);

          INT_CALL(object = GermanStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_GermanStemmer_equals(t_GermanStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(GermanStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_GermanStemmer_hashCode(t_GermanStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(GermanStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_GermanStemmer_stem(t_GermanStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(GermanStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FragmentsBuilder.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FragmentsBuilder::class$ = NULL;
          jmethodID *FragmentsBuilder::mids$ = NULL;
          bool FragmentsBuilder::live$ = false;

          jclass FragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_createFragment_dbdbadf3] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;)Ljava/lang/String;");
              mids$[mid_createFragment_4ae15401] = env->getMethodID(cls, "createFragment", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)Ljava/lang/String;");
              mids$[mid_createFragments_b5534699] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I)[Ljava/lang/String;");
              mids$[mid_createFragments_a6aed56f] = env->getMethodID(cls, "createFragments", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/search/vectorhighlight/FieldFragList;I[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/highlight/Encoder;)[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String FragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_dbdbadf3], a0.this$, a1, a2.this$, a3.this$));
          }

          ::java::lang::String FragmentsBuilder::createFragment(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, const JArray< ::java::lang::String > & a4, const JArray< ::java::lang::String > & a5, const ::org::apache::lucene::search::highlight::Encoder & a6) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_createFragment_4ae15401], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$));
          }

          JArray< ::java::lang::String > FragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_b5534699], a0.this$, a1, a2.this$, a3.this$, a4));
          }

          JArray< ::java::lang::String > FragmentsBuilder::createFragments(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::search::vectorhighlight::FieldFragList & a3, jint a4, const JArray< ::java::lang::String > & a5, const JArray< ::java::lang::String > & a6, const ::org::apache::lucene::search::highlight::Encoder & a7) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_createFragments_a6aed56f], a0.this$, a1, a2.this$, a3.this$, a4, a5.this$, a6.this$, a7.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FragmentsBuilder_createFragment(t_FragmentsBuilder *self, PyObject *args);
          static PyObject *t_FragmentsBuilder_createFragments(t_FragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_FragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_FragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FragmentsBuilder, createFragment, METH_VARARGS),
            DECLARE_METHOD(t_FragmentsBuilder, createFragments, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FragmentsBuilder, t_FragmentsBuilder, ::java::lang::Object, FragmentsBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_FragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(FragmentsBuilder), module, "FragmentsBuilder", 0);
          }

          void t_FragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FragmentsBuilder).tp_dict, "class_", make_descriptor(FragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_FragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_FragmentsBuilder::wrap_Object(FragmentsBuilder(((t_FragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_FragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FragmentsBuilder_createFragment(t_FragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 7:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                JArray< ::java::lang::String > a4((jobject) NULL);
                JArray< ::java::lang::String > a5((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a6((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kIsk[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                {
                  OBJ_CALL(result = self->object.createFragment(a0, a1, a2, a3, a4, a5, a6));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragment", args);
            return NULL;
          }

          static PyObject *t_FragmentsBuilder_createFragments(t_FragmentsBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 8:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::FieldFragList a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > a5((jobject) NULL);
                JArray< ::java::lang::String > a6((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a7((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kIskI[s[sk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::vectorhighlight::FieldFragList::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
                {
                  OBJ_CALL(result = self->object.createFragments(a0, a1, a2, a3, a4, a5, a6, a7));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "createFragments", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/TermsConsumer.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *BlockTreeTermsWriter::class$ = NULL;
          jmethodID *BlockTreeTermsWriter::mids$ = NULL;
          bool BlockTreeTermsWriter::live$ = false;
          jint BlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE = (jint) 0;
          jint BlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_APPEND_ONLY = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_CHECKSUM = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_CURRENT = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_META_ARRAY = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_MIN_MAX_TERMS = (jint) 0;
          jint BlockTreeTermsWriter::VERSION_START = (jint) 0;

          jclass BlockTreeTermsWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3f2db6e1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Lorg/apache/lucene/codecs/PostingsWriterBase;II)V");
              mids$[mid_addField_eb6fab90] = env->getMethodID(cls, "addField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/codecs/TermsConsumer;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_SIZE");
              DEFAULT_MIN_BLOCK_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_BLOCK_SIZE");
              VERSION_APPEND_ONLY = env->getStaticIntField(cls, "VERSION_APPEND_ONLY");
              VERSION_CHECKSUM = env->getStaticIntField(cls, "VERSION_CHECKSUM");
              VERSION_CURRENT = env->getStaticIntField(cls, "VERSION_CURRENT");
              VERSION_META_ARRAY = env->getStaticIntField(cls, "VERSION_META_ARRAY");
              VERSION_MIN_MAX_TERMS = env->getStaticIntField(cls, "VERSION_MIN_MAX_TERMS");
              VERSION_START = env->getStaticIntField(cls, "VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockTreeTermsWriter::BlockTreeTermsWriter(const ::org::apache::lucene::index::SegmentWriteState & a0, const ::org::apache::lucene::codecs::PostingsWriterBase & a1, jint a2, jint a3) : ::org::apache::lucene::codecs::FieldsConsumer(env->newObject(initializeClass, &mids$, mid_init$_3f2db6e1, a0.this$, a1.this$, a2, a3)) {}

          ::org::apache::lucene::codecs::TermsConsumer BlockTreeTermsWriter::addField(const ::org::apache::lucene::index::FieldInfo & a0) const
          {
            return ::org::apache::lucene::codecs::TermsConsumer(env->callObjectMethod(this$, mids$[mid_addField_eb6fab90], a0.this$));
          }

          void BlockTreeTermsWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_BlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockTreeTermsWriter_init_(t_BlockTreeTermsWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockTreeTermsWriter_addField(t_BlockTreeTermsWriter *self, PyObject *args);
          static PyObject *t_BlockTreeTermsWriter_close(t_BlockTreeTermsWriter *self, PyObject *args);

          static PyMethodDef t_BlockTreeTermsWriter__methods_[] = {
            DECLARE_METHOD(t_BlockTreeTermsWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, addField, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsWriter, close, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockTreeTermsWriter, t_BlockTreeTermsWriter, ::org::apache::lucene::codecs::FieldsConsumer, BlockTreeTermsWriter, t_BlockTreeTermsWriter_init_, 0, 0, 0, 0, 0);

          void t_BlockTreeTermsWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockTreeTermsWriter), module, "BlockTreeTermsWriter", 0);
          }

          void t_BlockTreeTermsWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "class_", make_descriptor(BlockTreeTermsWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "wrapfn_", make_descriptor(t_BlockTreeTermsWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BlockTreeTermsWriter::initializeClass);
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "DEFAULT_MAX_BLOCK_SIZE", make_descriptor(BlockTreeTermsWriter::DEFAULT_MAX_BLOCK_SIZE));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "DEFAULT_MIN_BLOCK_SIZE", make_descriptor(BlockTreeTermsWriter::DEFAULT_MIN_BLOCK_SIZE));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_APPEND_ONLY", make_descriptor(BlockTreeTermsWriter::VERSION_APPEND_ONLY));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_CHECKSUM", make_descriptor(BlockTreeTermsWriter::VERSION_CHECKSUM));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_CURRENT", make_descriptor(BlockTreeTermsWriter::VERSION_CURRENT));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_META_ARRAY", make_descriptor(BlockTreeTermsWriter::VERSION_META_ARRAY));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_MIN_MAX_TERMS", make_descriptor(BlockTreeTermsWriter::VERSION_MIN_MAX_TERMS));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsWriter).tp_dict, "VERSION_START", make_descriptor(BlockTreeTermsWriter::VERSION_START));
          }

          static PyObject *t_BlockTreeTermsWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockTreeTermsWriter::initializeClass, 1)))
              return NULL;
            return t_BlockTreeTermsWriter::wrap_Object(BlockTreeTermsWriter(((t_BlockTreeTermsWriter *) arg)->object.this$));
          }
          static PyObject *t_BlockTreeTermsWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockTreeTermsWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockTreeTermsWriter_init_(t_BlockTreeTermsWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase a1((jobject) NULL);
            jint a2;
            jint a3;
            BlockTreeTermsWriter object((jobject) NULL);

            if (!parseArgs(args, "kkII", ::org::apache::lucene::index::SegmentWriteState::initializeClass, ::org::apache::lucene::codecs::PostingsWriterBase::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockTreeTermsWriter(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockTreeTermsWriter_addField(t_BlockTreeTermsWriter *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::TermsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.addField(a0));
              return ::org::apache::lucene::codecs::t_TermsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsWriter), (PyObject *) self, "addField", args, 2);
          }

          static PyObject *t_BlockTreeTermsWriter_close(t_BlockTreeTermsWriter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockTreeTermsWriter), (PyObject *) self, "close", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/BoostedQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {

          ::java::lang::Class *BoostedQuery::class$ = NULL;
          jmethodID *BoostedQuery::mids$ = NULL;
          bool BoostedQuery::live$ = false;

          jclass BoostedQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/BoostedQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_59d41d93] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
              mids$[mid_getValueSource_b62b6193] = env->getMethodID(cls, "getValueSource", "()Lorg/apache/lucene/queries/function/ValueSource;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BoostedQuery::BoostedQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_59d41d93, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::Weight BoostedQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean BoostedQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void BoostedQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::org::apache::lucene::search::Query BoostedQuery::getQuery() const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
          }

          ::org::apache::lucene::queries::function::ValueSource BoostedQuery::getValueSource() const
          {
            return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_b62b6193]));
          }

          jint BoostedQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query BoostedQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String BoostedQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          static PyObject *t_BoostedQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BoostedQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BoostedQuery_init_(t_BoostedQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BoostedQuery_createWeight(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_equals(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_extractTerms(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_getQuery(t_BoostedQuery *self);
          static PyObject *t_BoostedQuery_getValueSource(t_BoostedQuery *self);
          static PyObject *t_BoostedQuery_hashCode(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_rewrite(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_toString(t_BoostedQuery *self, PyObject *args);
          static PyObject *t_BoostedQuery_get__query(t_BoostedQuery *self, void *data);
          static PyObject *t_BoostedQuery_get__valueSource(t_BoostedQuery *self, void *data);
          static PyGetSetDef t_BoostedQuery__fields_[] = {
            DECLARE_GET_FIELD(t_BoostedQuery, query),
            DECLARE_GET_FIELD(t_BoostedQuery, valueSource),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BoostedQuery__methods_[] = {
            DECLARE_METHOD(t_BoostedQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoostedQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BoostedQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, getQuery, METH_NOARGS),
            DECLARE_METHOD(t_BoostedQuery, getValueSource, METH_NOARGS),
            DECLARE_METHOD(t_BoostedQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_BoostedQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BoostedQuery, t_BoostedQuery, ::org::apache::lucene::search::Query, BoostedQuery, t_BoostedQuery_init_, 0, 0, t_BoostedQuery__fields_, 0, 0);

          void t_BoostedQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(BoostedQuery), module, "BoostedQuery", 0);
          }

          void t_BoostedQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BoostedQuery).tp_dict, "class_", make_descriptor(BoostedQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BoostedQuery).tp_dict, "wrapfn_", make_descriptor(t_BoostedQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BoostedQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BoostedQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BoostedQuery::initializeClass, 1)))
              return NULL;
            return t_BoostedQuery::wrap_Object(BoostedQuery(((t_BoostedQuery *) arg)->object.this$));
          }
          static PyObject *t_BoostedQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BoostedQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BoostedQuery_init_(t_BoostedQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
            BoostedQuery object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
            {
              INT_CALL(object = BoostedQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BoostedQuery_createWeight(t_BoostedQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_BoostedQuery_equals(t_BoostedQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_BoostedQuery_extractTerms(t_BoostedQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_BoostedQuery_getQuery(t_BoostedQuery *self)
          {
            ::org::apache::lucene::search::Query result((jobject) NULL);
            OBJ_CALL(result = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          static PyObject *t_BoostedQuery_getValueSource(t_BoostedQuery *self)
          {
            ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);
            OBJ_CALL(result = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          static PyObject *t_BoostedQuery_hashCode(t_BoostedQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_BoostedQuery_rewrite(t_BoostedQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_BoostedQuery_toString(t_BoostedQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BoostedQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_BoostedQuery_get__query(t_BoostedQuery *self, void *data)
          {
            ::org::apache::lucene::search::Query value((jobject) NULL);
            OBJ_CALL(value = self->object.getQuery());
            return ::org::apache::lucene::search::t_Query::wrap_Object(value);
          }

          static PyObject *t_BoostedQuery_get__valueSource(t_BoostedQuery *self, void *data)
          {
            ::org::apache::lucene::queries::function::ValueSource value((jobject) NULL);
            OBJ_CALL(value = self->object.getValueSource());
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/OpenStringBuilder.h"
#include "java/lang/Appendable.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *OpenStringBuilder::class$ = NULL;
          jmethodID *OpenStringBuilder::mids$ = NULL;
          bool OpenStringBuilder::live$ = false;

          jclass OpenStringBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/OpenStringBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_ec6430f4] = env->getMethodID(cls, "<init>", "([CI)V");
              mids$[mid_append_fac808c8] = env->getMethodID(cls, "append", "(C)Ljava/lang/Appendable;");
              mids$[mid_append_ca3c2aa4] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/lang/Appendable;");
              mids$[mid_append_7f83fd04] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;");
              mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
              mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
              mids$[mid_getArray_dab10e7f] = env->getMethodID(cls, "getArray", "()[C");
              mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
              mids$[mid_reserve_39c7bd3c] = env->getMethodID(cls, "reserve", "(I)V");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_set_ec6430f4] = env->getMethodID(cls, "set", "([CI)V");
              mids$[mid_setCharAt_83eec158] = env->getMethodID(cls, "setCharAt", "(IC)V");
              mids$[mid_setLength_39c7bd3c] = env->getMethodID(cls, "setLength", "(I)V");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
              mids$[mid_toCharArray_dab10e7f] = env->getMethodID(cls, "toCharArray", "()[C");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_unsafeWrite_39c7bd3c] = env->getMethodID(cls, "unsafeWrite", "(I)V");
              mids$[mid_unsafeWrite_87fd545a] = env->getMethodID(cls, "unsafeWrite", "(C)V");
              mids$[mid_unsafeWrite_6f0bb356] = env->getMethodID(cls, "unsafeWrite", "([CII)V");
              mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
              mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
              mids$[mid_write_87fd545a] = env->getMethodID(cls, "write", "(C)V");
              mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
              mids$[mid_write_20cf5c67] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/analysis/util/OpenStringBuilder;)V");
              mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
              mids$[mid_resize_39c7bd3c] = env->getMethodID(cls, "resize", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OpenStringBuilder::OpenStringBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          OpenStringBuilder::OpenStringBuilder(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          OpenStringBuilder::OpenStringBuilder(const JArray< jchar > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ec6430f4, a0.this$, a1)) {}

          ::java::lang::Appendable OpenStringBuilder::append(jchar a0) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_fac808c8], a0));
          }

          ::java::lang::Appendable OpenStringBuilder::append(const ::java::lang::CharSequence & a0) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_ca3c2aa4], a0.this$));
          }

          ::java::lang::Appendable OpenStringBuilder::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return ::java::lang::Appendable(env->callObjectMethod(this$, mids$[mid_append_7f83fd04], a0.this$, a1, a2));
          }

          jint OpenStringBuilder::capacity() const
          {
            return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
          }

          jchar OpenStringBuilder::charAt(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
          }

          void OpenStringBuilder::flush() const
          {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
          }

          JArray< jchar > OpenStringBuilder::getArray() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e7f]));
          }

          jint OpenStringBuilder::length() const
          {
            return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
          }

          void OpenStringBuilder::reserve(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reserve_39c7bd3c], a0);
          }

          void OpenStringBuilder::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void OpenStringBuilder::set(const JArray< jchar > & a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_set_ec6430f4], a0.this$, a1);
          }

          void OpenStringBuilder::setCharAt(jint a0, jchar a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setCharAt_83eec158], a0, a1);
          }

          void OpenStringBuilder::setLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLength_39c7bd3c], a0);
          }

          jint OpenStringBuilder::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::java::lang::CharSequence OpenStringBuilder::subSequence(jint a0, jint a1) const
          {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
          }

          JArray< jchar > OpenStringBuilder::toCharArray() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_toCharArray_dab10e7f]));
          }

          ::java::lang::String OpenStringBuilder::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          void OpenStringBuilder::unsafeWrite(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_39c7bd3c], a0);
          }

          void OpenStringBuilder::unsafeWrite(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_87fd545a], a0);
          }

          void OpenStringBuilder::unsafeWrite(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_unsafeWrite_6f0bb356], a0.this$, a1, a2);
          }

          void OpenStringBuilder::write(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
          }

          void OpenStringBuilder::write(const JArray< jchar > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
          }

          void OpenStringBuilder::write(jchar a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_87fd545a], a0);
          }

          void OpenStringBuilder::write(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
          }

          void OpenStringBuilder::write(const OpenStringBuilder & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_write_20cf5c67], a0.this$);
          }

          void OpenStringBuilder::write(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_OpenStringBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OpenStringBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OpenStringBuilder_init_(t_OpenStringBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OpenStringBuilder_append(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_capacity(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_charAt(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_flush(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_getArray(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_length(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_reserve(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_reset(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_set(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_setCharAt(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_setLength(t_OpenStringBuilder *self, PyObject *arg);
          static PyObject *t_OpenStringBuilder_size(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_subSequence(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_toCharArray(t_OpenStringBuilder *self);
          static PyObject *t_OpenStringBuilder_toString(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_unsafeWrite(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_write(t_OpenStringBuilder *self, PyObject *args);
          static PyObject *t_OpenStringBuilder_get__array(t_OpenStringBuilder *self, void *data);
          static PyGetSetDef t_OpenStringBuilder__fields_[] = {
            DECLARE_GET_FIELD(t_OpenStringBuilder, array),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_OpenStringBuilder__methods_[] = {
            DECLARE_METHOD(t_OpenStringBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OpenStringBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OpenStringBuilder, append, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, capacity, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, charAt, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, flush, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, getArray, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, length, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, reserve, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, reset, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, set, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, setCharAt, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, setLength, METH_O),
            DECLARE_METHOD(t_OpenStringBuilder, size, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, toCharArray, METH_NOARGS),
            DECLARE_METHOD(t_OpenStringBuilder, toString, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, unsafeWrite, METH_VARARGS),
            DECLARE_METHOD(t_OpenStringBuilder, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OpenStringBuilder, t_OpenStringBuilder, ::java::lang::Object, OpenStringBuilder, t_OpenStringBuilder_init_, 0, 0, t_OpenStringBuilder__fields_, 0, 0);

          void t_OpenStringBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(OpenStringBuilder), module, "OpenStringBuilder", 0);
          }

          void t_OpenStringBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OpenStringBuilder).tp_dict, "class_", make_descriptor(OpenStringBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OpenStringBuilder).tp_dict, "wrapfn_", make_descriptor(t_OpenStringBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OpenStringBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OpenStringBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OpenStringBuilder::initializeClass, 1)))
              return NULL;
            return t_OpenStringBuilder::wrap_Object(OpenStringBuilder(((t_OpenStringBuilder *) arg)->object.this$));
          }
          static PyObject *t_OpenStringBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OpenStringBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OpenStringBuilder_init_(t_OpenStringBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                OpenStringBuilder object((jobject) NULL);

                INT_CALL(object = OpenStringBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                OpenStringBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = OpenStringBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                OpenStringBuilder object((jobject) NULL);

                if (!parseArgs(args, "[CI", &a0, &a1))
                {
                  INT_CALL(object = OpenStringBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OpenStringBuilder_append(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jchar a0;
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                ::java::lang::Appendable result((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return ::java::lang::t_Appendable::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_capacity(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.capacity());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_charAt(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.charAt(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_flush(t_OpenStringBuilder *self)
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          static PyObject *t_OpenStringBuilder_getArray(t_OpenStringBuilder *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getArray());
            return result.wrap();
          }

          static PyObject *t_OpenStringBuilder_length(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_reserve(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.reserve(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reserve", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_reset(t_OpenStringBuilder *self)
          {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
          }

          static PyObject *t_OpenStringBuilder_set(t_OpenStringBuilder *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(self->object.set(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_setCharAt(t_OpenStringBuilder *self, PyObject *args)
          {
            jint a0;
            jchar a1;

            if (!parseArgs(args, "IC", &a0, &a1))
            {
              OBJ_CALL(self->object.setCharAt(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCharAt", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_setLength(t_OpenStringBuilder *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_size(t_OpenStringBuilder *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_OpenStringBuilder_subSequence(t_OpenStringBuilder *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::lang::CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subSequence(a0, a1));
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subSequence", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_toCharArray(t_OpenStringBuilder *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.toCharArray());
            return result.wrap();
          }

          static PyObject *t_OpenStringBuilder_toString(t_OpenStringBuilder *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(OpenStringBuilder), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_OpenStringBuilder_unsafeWrite(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jchar a0;

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.unsafeWrite(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "unsafeWrite", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_write(t_OpenStringBuilder *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                JArray< jchar > a0((jobject) NULL);

                if (!parseArgs(args, "[C", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jchar a0;

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                jint a0;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                OpenStringBuilder a0((jobject) NULL);

                if (!parseArgs(args, "k", OpenStringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.write(a0));
                  Py_RETURN_NONE;
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(self->object.write(a0, a1, a2));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
          }

          static PyObject *t_OpenStringBuilder_get__array(t_OpenStringBuilder *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getArray());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *Lucene43EdgeNGramTokenizer$Side::class$ = NULL;
          jmethodID *Lucene43EdgeNGramTokenizer$Side::mids$ = NULL;
          bool Lucene43EdgeNGramTokenizer$Side::live$ = false;
          Lucene43EdgeNGramTokenizer$Side *Lucene43EdgeNGramTokenizer$Side::BACK = NULL;
          Lucene43EdgeNGramTokenizer$Side *Lucene43EdgeNGramTokenizer$Side::FRONT = NULL;

          jclass Lucene43EdgeNGramTokenizer$Side::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getLabel_14c7b5c5] = env->getMethodID(cls, "getLabel", "()Ljava/lang/String;");
              mids$[mid_getSide_2ac44635] = env->getStaticMethodID(cls, "getSide", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;");
              mids$[mid_valueOf_2ac44635] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;");
              mids$[mid_values_0033eb83] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BACK = new Lucene43EdgeNGramTokenizer$Side(env->getStaticObjectField(cls, "BACK", "Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;"));
              FRONT = new Lucene43EdgeNGramTokenizer$Side(env->getStaticObjectField(cls, "FRONT", "Lorg/apache/lucene/analysis/ngram/Lucene43EdgeNGramTokenizer$Side;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Lucene43EdgeNGramTokenizer$Side::getLabel() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLabel_14c7b5c5]));
          }

          Lucene43EdgeNGramTokenizer$Side Lucene43EdgeNGramTokenizer$Side::getSide(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Lucene43EdgeNGramTokenizer$Side(env->callStaticObjectMethod(cls, mids$[mid_getSide_2ac44635], a0.this$));
          }

          Lucene43EdgeNGramTokenizer$Side Lucene43EdgeNGramTokenizer$Side::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Lucene43EdgeNGramTokenizer$Side(env->callStaticObjectMethod(cls, mids$[mid_valueOf_2ac44635], a0.this$));
          }

          JArray< Lucene43EdgeNGramTokenizer$Side > Lucene43EdgeNGramTokenizer$Side::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< Lucene43EdgeNGramTokenizer$Side >(env->callStaticObjectMethod(cls, mids$[mid_values_0033eb83]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_of_(t_Lucene43EdgeNGramTokenizer$Side *self, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getLabel(t_Lucene43EdgeNGramTokenizer$Side *self);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getSide(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_values(PyTypeObject *type);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__label(t_Lucene43EdgeNGramTokenizer$Side *self, void *data);
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__parameters_(t_Lucene43EdgeNGramTokenizer$Side *self, void *data);
          static PyGetSetDef t_Lucene43EdgeNGramTokenizer$Side__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene43EdgeNGramTokenizer$Side, label),
            DECLARE_GET_FIELD(t_Lucene43EdgeNGramTokenizer$Side, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene43EdgeNGramTokenizer$Side__methods_[] = {
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, of_, METH_VARARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, getLabel, METH_NOARGS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, getSide, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Lucene43EdgeNGramTokenizer$Side, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene43EdgeNGramTokenizer$Side, t_Lucene43EdgeNGramTokenizer$Side, ::java::lang::Enum, Lucene43EdgeNGramTokenizer$Side, abstract_init, 0, 0, t_Lucene43EdgeNGramTokenizer$Side__fields_, 0, 0);
          PyObject *t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(const Lucene43EdgeNGramTokenizer$Side& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene43EdgeNGramTokenizer$Side *self = (t_Lucene43EdgeNGramTokenizer$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Lucene43EdgeNGramTokenizer$Side *self = (t_Lucene43EdgeNGramTokenizer$Side *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Lucene43EdgeNGramTokenizer$Side::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene43EdgeNGramTokenizer$Side), module, "Lucene43EdgeNGramTokenizer$Side", 0);
          }

          void t_Lucene43EdgeNGramTokenizer$Side::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "class_", make_descriptor(Lucene43EdgeNGramTokenizer$Side::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "wrapfn_", make_descriptor(t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene43EdgeNGramTokenizer$Side::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "BACK", make_descriptor(t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(*Lucene43EdgeNGramTokenizer$Side::BACK)));
            PyDict_SetItemString(PY_TYPE(Lucene43EdgeNGramTokenizer$Side).tp_dict, "FRONT", make_descriptor(t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(*Lucene43EdgeNGramTokenizer$Side::FRONT)));
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene43EdgeNGramTokenizer$Side::initializeClass, 1)))
              return NULL;
            return t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(Lucene43EdgeNGramTokenizer$Side(((t_Lucene43EdgeNGramTokenizer$Side *) arg)->object.this$));
          }
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene43EdgeNGramTokenizer$Side::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_of_(t_Lucene43EdgeNGramTokenizer$Side *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getLabel(t_Lucene43EdgeNGramTokenizer$Side *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLabel());
            return j2p(result);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_getSide(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            Lucene43EdgeNGramTokenizer$Side result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::getSide(a0));
              return t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getSide", arg);
            return NULL;
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            Lucene43EdgeNGramTokenizer$Side result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::valueOf(a0));
              return t_Lucene43EdgeNGramTokenizer$Side::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_values(PyTypeObject *type)
          {
            JArray< Lucene43EdgeNGramTokenizer$Side > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ngram::Lucene43EdgeNGramTokenizer$Side::values());
            return JArray<jobject>(result.this$).wrap(t_Lucene43EdgeNGramTokenizer$Side::wrap_jobject);
          }
          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__parameters_(t_Lucene43EdgeNGramTokenizer$Side *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Lucene43EdgeNGramTokenizer$Side_get__label(t_Lucene43EdgeNGramTokenizer$Side *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLabel());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceTokenizer::class$ = NULL;
          jmethodID *WhitespaceTokenizer::mids$ = NULL;
          bool WhitespaceTokenizer::live$ = false;

          jclass WhitespaceTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceTokenizer::WhitespaceTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          WhitespaceTokenizer::WhitespaceTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceTokenizer_init_(t_WhitespaceTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_WhitespaceTokenizer__methods_[] = {
            DECLARE_METHOD(t_WhitespaceTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WhitespaceTokenizer, t_WhitespaceTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, WhitespaceTokenizer, t_WhitespaceTokenizer_init_, 0, 0, 0, 0, 0);

          void t_WhitespaceTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceTokenizer), module, "WhitespaceTokenizer", 0);
          }

          void t_WhitespaceTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizer).tp_dict, "class_", make_descriptor(WhitespaceTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizer).tp_dict, "wrapfn_", make_descriptor(t_WhitespaceTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WhitespaceTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WhitespaceTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceTokenizer::initializeClass, 1)))
              return NULL;
            return t_WhitespaceTokenizer::wrap_Object(WhitespaceTokenizer(((t_WhitespaceTokenizer *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceTokenizer_init_(t_WhitespaceTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                WhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = WhitespaceTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                WhitespaceTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = WhitespaceTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene45/Lucene45DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {

          ::java::lang::Class *Lucene45DocValuesFormat::class$ = NULL;
          jmethodID *Lucene45DocValuesFormat::mids$ = NULL;
          bool Lucene45DocValuesFormat::live$ = false;

          jclass Lucene45DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene45/Lucene45DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene45DocValuesFormat::Lucene45DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene45DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene45DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene45 {
          static PyObject *t_Lucene45DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene45DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene45DocValuesFormat_init_(t_Lucene45DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene45DocValuesFormat_fieldsConsumer(t_Lucene45DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene45DocValuesFormat_fieldsProducer(t_Lucene45DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene45DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene45DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene45DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene45DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene45DocValuesFormat, t_Lucene45DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene45DocValuesFormat, t_Lucene45DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene45DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene45DocValuesFormat), module, "Lucene45DocValuesFormat", 0);
          }

          void t_Lucene45DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene45DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene45DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene45DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene45DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene45DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene45DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene45DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene45DocValuesFormat::wrap_Object(Lucene45DocValuesFormat(((t_Lucene45DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene45DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene45DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene45DocValuesFormat_init_(t_Lucene45DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene45DocValuesFormat object((jobject) NULL);

            INT_CALL(object = Lucene45DocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene45DocValuesFormat_fieldsConsumer(t_Lucene45DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene45DocValuesFormat_fieldsProducer(t_Lucene45DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene45DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemmer::class$ = NULL;
          jmethodID *GermanMinimalStemmer::mids$ = NULL;
          bool GermanMinimalStemmer::live$ = false;

          jclass GermanMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemmer::GermanMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GermanMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemmer_init_(t_GermanMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemmer_stem(t_GermanMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanMinimalStemmer, t_GermanMinimalStemmer, ::java::lang::Object, GermanMinimalStemmer, t_GermanMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_GermanMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemmer), module, "GermanMinimalStemmer", 0);
          }

          void t_GermanMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemmer).tp_dict, "class_", make_descriptor(GermanMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_GermanMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemmer::wrap_Object(GermanMinimalStemmer(((t_GermanMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemmer_init_(t_GermanMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            GermanMinimalStemmer object((jobject) NULL);

            INT_CALL(object = GermanMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GermanMinimalStemmer_stem(t_GermanMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/PatternConsumer.h"
#include "java/lang/String.h"
#include "java/util/ArrayList.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *PatternConsumer::class$ = NULL;
            jmethodID *PatternConsumer::mids$ = NULL;
            bool PatternConsumer::live$ = false;

            jclass PatternConsumer::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/PatternConsumer");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addClass_5fdc3f48] = env->getMethodID(cls, "addClass", "(Ljava/lang/String;)V");
                mids$[mid_addException_069f7243] = env->getMethodID(cls, "addException", "(Ljava/lang/String;Ljava/util/ArrayList;)V");
                mids$[mid_addPattern_4a264742] = env->getMethodID(cls, "addPattern", "(Ljava/lang/String;Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void PatternConsumer::addClass(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_addClass_5fdc3f48], a0.this$);
            }

            void PatternConsumer::addException(const ::java::lang::String & a0, const ::java::util::ArrayList & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addException_069f7243], a0.this$, a1.this$);
            }

            void PatternConsumer::addPattern(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addPattern_4a264742], a0.this$, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_PatternConsumer_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternConsumer_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PatternConsumer_addClass(t_PatternConsumer *self, PyObject *arg);
            static PyObject *t_PatternConsumer_addException(t_PatternConsumer *self, PyObject *args);
            static PyObject *t_PatternConsumer_addPattern(t_PatternConsumer *self, PyObject *args);

            static PyMethodDef t_PatternConsumer__methods_[] = {
              DECLARE_METHOD(t_PatternConsumer, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternConsumer, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PatternConsumer, addClass, METH_O),
              DECLARE_METHOD(t_PatternConsumer, addException, METH_VARARGS),
              DECLARE_METHOD(t_PatternConsumer, addPattern, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PatternConsumer, t_PatternConsumer, ::java::lang::Object, PatternConsumer, abstract_init, 0, 0, 0, 0, 0);

            void t_PatternConsumer::install(PyObject *module)
            {
              installType(&PY_TYPE(PatternConsumer), module, "PatternConsumer", 0);
            }

            void t_PatternConsumer::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PatternConsumer).tp_dict, "class_", make_descriptor(PatternConsumer::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PatternConsumer).tp_dict, "wrapfn_", make_descriptor(t_PatternConsumer::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PatternConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PatternConsumer_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PatternConsumer::initializeClass, 1)))
                return NULL;
              return t_PatternConsumer::wrap_Object(PatternConsumer(((t_PatternConsumer *) arg)->object.this$));
            }
            static PyObject *t_PatternConsumer_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PatternConsumer::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_PatternConsumer_addClass(t_PatternConsumer *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.addClass(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addClass", arg);
              return NULL;
            }

            static PyObject *t_PatternConsumer_addException(t_PatternConsumer *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::util::ArrayList a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "sK", ::java::util::ArrayList::initializeClass, &a0, &a1, &p1, ::java::util::t_ArrayList::parameters_))
              {
                OBJ_CALL(self->object.addException(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addException", args);
              return NULL;
            }

            static PyObject *t_PatternConsumer_addPattern(t_PatternConsumer *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(self->object.addPattern(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addPattern", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *QueryBuilder::class$ = NULL;
          jmethodID *QueryBuilder::mids$ = NULL;
          bool QueryBuilder::live$ = false;

          jclass QueryBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/QueryBuilder");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_QueryBuilder__methods_[] = {
            DECLARE_METHOD(t_QueryBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilder, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryBuilder, t_QueryBuilder, ::java::lang::Object, QueryBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_QueryBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryBuilder), module, "QueryBuilder", 0);
          }

          void t_QueryBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "class_", make_descriptor(QueryBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryBuilder::initializeClass, 1)))
              return NULL;
            return t_QueryBuilder::wrap_Object(QueryBuilder(((t_QueryBuilder *) arg)->object.this$));
          }
          static PyObject *t_QueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ControlledRealTimeReopenThread.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "org/apache/lucene/index/TrackingIndexWriter.h"
#include "java/io/Closeable.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ControlledRealTimeReopenThread::class$ = NULL;
        jmethodID *ControlledRealTimeReopenThread::mids$ = NULL;
        bool ControlledRealTimeReopenThread::live$ = false;

        jclass ControlledRealTimeReopenThread::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ControlledRealTimeReopenThread");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a0c538a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TrackingIndexWriter;Lorg/apache/lucene/search/ReferenceManager;DD)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_run_54c6a166] = env->getMethodID(cls, "run", "()V");
            mids$[mid_waitForGeneration_0ee6df2f] = env->getMethodID(cls, "waitForGeneration", "(J)V");
            mids$[mid_waitForGeneration_25d05c83] = env->getMethodID(cls, "waitForGeneration", "(JI)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ControlledRealTimeReopenThread::ControlledRealTimeReopenThread(const ::org::apache::lucene::index::TrackingIndexWriter & a0, const ::org::apache::lucene::search::ReferenceManager & a1, jdouble a2, jdouble a3) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_a0c538a8, a0.this$, a1.this$, a2, a3)) {}

        void ControlledRealTimeReopenThread::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void ControlledRealTimeReopenThread::run() const
        {
          env->callVoidMethod(this$, mids$[mid_run_54c6a166]);
        }

        void ControlledRealTimeReopenThread::waitForGeneration(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_waitForGeneration_0ee6df2f], a0);
        }

        jboolean ControlledRealTimeReopenThread::waitForGeneration(jlong a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_waitForGeneration_25d05c83], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ControlledRealTimeReopenThread_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ControlledRealTimeReopenThread_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ControlledRealTimeReopenThread_of_(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static int t_ControlledRealTimeReopenThread_init_(t_ControlledRealTimeReopenThread *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ControlledRealTimeReopenThread_close(t_ControlledRealTimeReopenThread *self);
        static PyObject *t_ControlledRealTimeReopenThread_run(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static PyObject *t_ControlledRealTimeReopenThread_waitForGeneration(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static PyObject *t_ControlledRealTimeReopenThread_get__parameters_(t_ControlledRealTimeReopenThread *self, void *data);
        static PyGetSetDef t_ControlledRealTimeReopenThread__fields_[] = {
          DECLARE_GET_FIELD(t_ControlledRealTimeReopenThread, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ControlledRealTimeReopenThread__methods_[] = {
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, of_, METH_VARARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, close, METH_NOARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, run, METH_VARARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, waitForGeneration, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ControlledRealTimeReopenThread, t_ControlledRealTimeReopenThread, ::java::lang::Thread, ControlledRealTimeReopenThread, t_ControlledRealTimeReopenThread_init_, 0, 0, t_ControlledRealTimeReopenThread__fields_, 0, 0);
        PyObject *t_ControlledRealTimeReopenThread::wrap_Object(const ControlledRealTimeReopenThread& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ControlledRealTimeReopenThread::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ControlledRealTimeReopenThread *self = (t_ControlledRealTimeReopenThread *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ControlledRealTimeReopenThread::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ControlledRealTimeReopenThread::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ControlledRealTimeReopenThread *self = (t_ControlledRealTimeReopenThread *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ControlledRealTimeReopenThread::install(PyObject *module)
        {
          installType(&PY_TYPE(ControlledRealTimeReopenThread), module, "ControlledRealTimeReopenThread", 0);
        }

        void t_ControlledRealTimeReopenThread::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ControlledRealTimeReopenThread).tp_dict, "class_", make_descriptor(ControlledRealTimeReopenThread::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ControlledRealTimeReopenThread).tp_dict, "wrapfn_", make_descriptor(t_ControlledRealTimeReopenThread::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ControlledRealTimeReopenThread).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ControlledRealTimeReopenThread_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ControlledRealTimeReopenThread::initializeClass, 1)))
            return NULL;
          return t_ControlledRealTimeReopenThread::wrap_Object(ControlledRealTimeReopenThread(((t_ControlledRealTimeReopenThread *) arg)->object.this$));
        }
        static PyObject *t_ControlledRealTimeReopenThread_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ControlledRealTimeReopenThread::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ControlledRealTimeReopenThread_of_(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ControlledRealTimeReopenThread_init_(t_ControlledRealTimeReopenThread *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TrackingIndexWriter a0((jobject) NULL);
          ::org::apache::lucene::search::ReferenceManager a1((jobject) NULL);
          PyTypeObject **p1;
          jdouble a2;
          jdouble a3;
          ControlledRealTimeReopenThread object((jobject) NULL);

          if (!parseArgs(args, "kKDD", ::org::apache::lucene::index::TrackingIndexWriter::initializeClass, ::org::apache::lucene::search::ReferenceManager::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ReferenceManager::parameters_, &a2, &a3))
          {
            INT_CALL(object = ControlledRealTimeReopenThread(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ControlledRealTimeReopenThread_close(t_ControlledRealTimeReopenThread *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_ControlledRealTimeReopenThread_run(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.run());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ControlledRealTimeReopenThread), (PyObject *) self, "run", args, 2);
        }

        static PyObject *t_ControlledRealTimeReopenThread_waitForGeneration(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.waitForGeneration(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jint a1;
              jboolean result;

              if (!parseArgs(args, "JI", &a0, &a1))
              {
                OBJ_CALL(result = self->object.waitForGeneration(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "waitForGeneration", args);
          return NULL;
        }
        static PyObject *t_ControlledRealTimeReopenThread_get__parameters_(t_ControlledRealTimeReopenThread *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/GroupingSearch.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *GroupingSearch::class$ = NULL;
          jmethodID *GroupingSearch::mids$ = NULL;
          bool GroupingSearch::live$ = false;

          jclass GroupingSearch::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/GroupingSearch");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_init$_9d3ebac8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;)V");
              mids$[mid_disableCaching_bd44cd2b] = env->getMethodID(cls, "disableCaching", "()Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_getAllGroupHeads_03c2457d] = env->getMethodID(cls, "getAllGroupHeads", "()Lorg/apache/lucene/util/Bits;");
              mids$[mid_getAllMatchingGroups_2d2d7de4] = env->getMethodID(cls, "getAllMatchingGroups", "()Ljava/util/Collection;");
              mids$[mid_search_cc5c11db] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_search_2bb63d27] = env->getMethodID(cls, "search", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setAllGroupHeads_b6dc0458] = env->getMethodID(cls, "setAllGroupHeads", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setAllGroups_b6dc0458] = env->getMethodID(cls, "setAllGroups", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setCaching_8d110dba] = env->getMethodID(cls, "setCaching", "(IZ)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setCachingInMB_c48a1ff7] = env->getMethodID(cls, "setCachingInMB", "(DZ)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setFillSortFields_b6dc0458] = env->getMethodID(cls, "setFillSortFields", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupDocsLimit_2cfcb8b1] = env->getMethodID(cls, "setGroupDocsLimit", "(I)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupDocsOffset_2cfcb8b1] = env->getMethodID(cls, "setGroupDocsOffset", "(I)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setGroupSort_a0e5bdf3] = env->getMethodID(cls, "setGroupSort", "(Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setIncludeMaxScore_b6dc0458] = env->getMethodID(cls, "setIncludeMaxScore", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setIncludeScores_b6dc0458] = env->getMethodID(cls, "setIncludeScores", "(Z)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setInitialSize_2cfcb8b1] = env->getMethodID(cls, "setInitialSize", "(I)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_setSortWithinGroup_a0e5bdf3] = env->getMethodID(cls, "setSortWithinGroup", "(Lorg/apache/lucene/search/Sort;)Lorg/apache/lucene/search/grouping/GroupingSearch;");
              mids$[mid_groupByFieldOrFunction_2bb63d27] = env->getMethodID(cls, "groupByFieldOrFunction", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_groupByDocBlock_2bb63d27] = env->getMethodID(cls, "groupByDocBlock", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Query;II)Lorg/apache/lucene/search/grouping/TopGroups;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GroupingSearch::GroupingSearch(const ::org::apache::lucene::search::Filter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}

          GroupingSearch::GroupingSearch(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          GroupingSearch::GroupingSearch(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9d3ebac8, a0.this$, a1.this$)) {}

          GroupingSearch GroupingSearch::disableCaching() const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_disableCaching_bd44cd2b]));
          }

          ::org::apache::lucene::util::Bits GroupingSearch::getAllGroupHeads() const
          {
            return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getAllGroupHeads_03c2457d]));
          }

          ::java::util::Collection GroupingSearch::getAllMatchingGroups() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getAllMatchingGroups_2d2d7de4]));
          }

          ::org::apache::lucene::search::grouping::TopGroups GroupingSearch::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Query & a1, jint a2, jint a3) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_search_cc5c11db], a0.this$, a1.this$, a2, a3));
          }

          ::org::apache::lucene::search::grouping::TopGroups GroupingSearch::search(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Query & a2, jint a3, jint a4) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_search_2bb63d27], a0.this$, a1.this$, a2.this$, a3, a4));
          }

          GroupingSearch GroupingSearch::setAllGroupHeads(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setAllGroupHeads_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setAllGroups(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setAllGroups_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setCaching(jint a0, jboolean a1) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setCaching_8d110dba], a0, a1));
          }

          GroupingSearch GroupingSearch::setCachingInMB(jdouble a0, jboolean a1) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setCachingInMB_c48a1ff7], a0, a1));
          }

          GroupingSearch GroupingSearch::setFillSortFields(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setFillSortFields_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setGroupDocsLimit(jint a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupDocsLimit_2cfcb8b1], a0));
          }

          GroupingSearch GroupingSearch::setGroupDocsOffset(jint a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupDocsOffset_2cfcb8b1], a0));
          }

          GroupingSearch GroupingSearch::setGroupSort(const ::org::apache::lucene::search::Sort & a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setGroupSort_a0e5bdf3], a0.this$));
          }

          GroupingSearch GroupingSearch::setIncludeMaxScore(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setIncludeMaxScore_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setIncludeScores(jboolean a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setIncludeScores_b6dc0458], a0));
          }

          GroupingSearch GroupingSearch::setInitialSize(jint a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setInitialSize_2cfcb8b1], a0));
          }

          GroupingSearch GroupingSearch::setSortWithinGroup(const ::org::apache::lucene::search::Sort & a0) const
          {
            return GroupingSearch(env->callObjectMethod(this$, mids$[mid_setSortWithinGroup_a0e5bdf3], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_GroupingSearch_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GroupingSearch_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GroupingSearch_init_(t_GroupingSearch *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GroupingSearch_disableCaching(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_getAllGroupHeads(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_getAllMatchingGroups(t_GroupingSearch *self);
          static PyObject *t_GroupingSearch_search(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setAllGroupHeads(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setAllGroups(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setCaching(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setCachingInMB(t_GroupingSearch *self, PyObject *args);
          static PyObject *t_GroupingSearch_setFillSortFields(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setGroupDocsLimit(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setGroupDocsOffset(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setGroupSort(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setIncludeMaxScore(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setIncludeScores(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setInitialSize(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_setSortWithinGroup(t_GroupingSearch *self, PyObject *arg);
          static PyObject *t_GroupingSearch_get__allGroupHeads(t_GroupingSearch *self, void *data);
          static int t_GroupingSearch_set__allGroupHeads(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__allGroups(t_GroupingSearch *self, PyObject *arg, void *data);
          static PyObject *t_GroupingSearch_get__allMatchingGroups(t_GroupingSearch *self, void *data);
          static int t_GroupingSearch_set__fillSortFields(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__groupDocsLimit(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__groupDocsOffset(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__groupSort(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__includeMaxScore(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__includeScores(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__initialSize(t_GroupingSearch *self, PyObject *arg, void *data);
          static int t_GroupingSearch_set__sortWithinGroup(t_GroupingSearch *self, PyObject *arg, void *data);
          static PyGetSetDef t_GroupingSearch__fields_[] = {
            DECLARE_GETSET_FIELD(t_GroupingSearch, allGroupHeads),
            DECLARE_SET_FIELD(t_GroupingSearch, allGroups),
            DECLARE_GET_FIELD(t_GroupingSearch, allMatchingGroups),
            DECLARE_SET_FIELD(t_GroupingSearch, fillSortFields),
            DECLARE_SET_FIELD(t_GroupingSearch, groupDocsLimit),
            DECLARE_SET_FIELD(t_GroupingSearch, groupDocsOffset),
            DECLARE_SET_FIELD(t_GroupingSearch, groupSort),
            DECLARE_SET_FIELD(t_GroupingSearch, includeMaxScore),
            DECLARE_SET_FIELD(t_GroupingSearch, includeScores),
            DECLARE_SET_FIELD(t_GroupingSearch, initialSize),
            DECLARE_SET_FIELD(t_GroupingSearch, sortWithinGroup),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GroupingSearch__methods_[] = {
            DECLARE_METHOD(t_GroupingSearch, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupingSearch, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GroupingSearch, disableCaching, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, getAllGroupHeads, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, getAllMatchingGroups, METH_NOARGS),
            DECLARE_METHOD(t_GroupingSearch, search, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setAllGroupHeads, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setAllGroups, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setCaching, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setCachingInMB, METH_VARARGS),
            DECLARE_METHOD(t_GroupingSearch, setFillSortFields, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setGroupDocsLimit, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setGroupDocsOffset, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setGroupSort, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setIncludeMaxScore, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setIncludeScores, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setInitialSize, METH_O),
            DECLARE_METHOD(t_GroupingSearch, setSortWithinGroup, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GroupingSearch, t_GroupingSearch, ::java::lang::Object, GroupingSearch, t_GroupingSearch_init_, 0, 0, t_GroupingSearch__fields_, 0, 0);

          void t_GroupingSearch::install(PyObject *module)
          {
            installType(&PY_TYPE(GroupingSearch), module, "GroupingSearch", 0);
          }

          void t_GroupingSearch::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GroupingSearch).tp_dict, "class_", make_descriptor(GroupingSearch::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GroupingSearch).tp_dict, "wrapfn_", make_descriptor(t_GroupingSearch::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GroupingSearch).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GroupingSearch_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GroupingSearch::initializeClass, 1)))
              return NULL;
            return t_GroupingSearch::wrap_Object(GroupingSearch(((t_GroupingSearch *) arg)->object.this$));
          }
          static PyObject *t_GroupingSearch_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GroupingSearch::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GroupingSearch_init_(t_GroupingSearch *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::Filter a0((jobject) NULL);
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
                {
                  INT_CALL(object = GroupingSearch(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = GroupingSearch(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                GroupingSearch object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = GroupingSearch(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GroupingSearch_disableCaching(t_GroupingSearch *self)
          {
            GroupingSearch result((jobject) NULL);
            OBJ_CALL(result = self->object.disableCaching());
            return t_GroupingSearch::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_getAllGroupHeads(t_GroupingSearch *self)
          {
            ::org::apache::lucene::util::Bits result((jobject) NULL);
            OBJ_CALL(result = self->object.getAllGroupHeads());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_getAllMatchingGroups(t_GroupingSearch *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getAllMatchingGroups());
            return ::java::util::t_Collection::wrap_Object(result);
          }

          static PyObject *t_GroupingSearch_search(t_GroupingSearch *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                jint a2;
                jint a3;
                ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.search(a0, a1, a2, a3));
                  return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
                ::org::apache::lucene::search::Filter a1((jobject) NULL);
                ::org::apache::lucene::search::Query a2((jobject) NULL);
                jint a3;
                jint a4;
                ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

                if (!parseArgs(args, "kkkII", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.search(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "search", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setAllGroupHeads(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setAllGroupHeads(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setAllGroupHeads", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setAllGroups(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setAllGroups(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setAllGroups", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setCaching(t_GroupingSearch *self, PyObject *args)
          {
            jint a0;
            jboolean a1;
            GroupingSearch result((jobject) NULL);

            if (!parseArgs(args, "IZ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.setCaching(a0, a1));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setCaching", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setCachingInMB(t_GroupingSearch *self, PyObject *args)
          {
            jdouble a0;
            jboolean a1;
            GroupingSearch result((jobject) NULL);

            if (!parseArgs(args, "DZ", &a0, &a1))
            {
              OBJ_CALL(result = self->object.setCachingInMB(a0, a1));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setCachingInMB", args);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setFillSortFields(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setFillSortFields(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setFillSortFields", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupDocsLimit(t_GroupingSearch *self, PyObject *arg)
          {
            jint a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setGroupDocsLimit(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupDocsLimit", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupDocsOffset(t_GroupingSearch *self, PyObject *arg)
          {
            jint a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setGroupDocsOffset(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupDocsOffset", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setGroupSort(t_GroupingSearch *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setGroupSort(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setGroupSort", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setIncludeMaxScore(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setIncludeMaxScore(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setIncludeMaxScore", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setIncludeScores(t_GroupingSearch *self, PyObject *arg)
          {
            jboolean a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(result = self->object.setIncludeScores(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setIncludeScores", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setInitialSize(t_GroupingSearch *self, PyObject *arg)
          {
            jint a0;
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setInitialSize(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setInitialSize", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_setSortWithinGroup(t_GroupingSearch *self, PyObject *arg)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            GroupingSearch result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.setSortWithinGroup(a0));
              return t_GroupingSearch::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setSortWithinGroup", arg);
            return NULL;
          }

          static PyObject *t_GroupingSearch_get__allGroupHeads(t_GroupingSearch *self, void *data)
          {
            ::org::apache::lucene::util::Bits value((jobject) NULL);
            OBJ_CALL(value = self->object.getAllGroupHeads());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
          }
          static int t_GroupingSearch_set__allGroupHeads(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllGroupHeads(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allGroupHeads", arg);
            return -1;
          }

          static int t_GroupingSearch_set__allGroups(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setAllGroups(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "allGroups", arg);
            return -1;
          }

          static PyObject *t_GroupingSearch_get__allMatchingGroups(t_GroupingSearch *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getAllMatchingGroups());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static int t_GroupingSearch_set__fillSortFields(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setFillSortFields(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fillSortFields", arg);
            return -1;
          }

          static int t_GroupingSearch_set__groupDocsLimit(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setGroupDocsLimit(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupDocsLimit", arg);
            return -1;
          }

          static int t_GroupingSearch_set__groupDocsOffset(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setGroupDocsOffset(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupDocsOffset", arg);
            return -1;
          }

          static int t_GroupingSearch_set__groupSort(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Sort value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &value))
              {
                INT_CALL(self->object.setGroupSort(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "groupSort", arg);
            return -1;
          }

          static int t_GroupingSearch_set__includeMaxScore(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setIncludeMaxScore(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "includeMaxScore", arg);
            return -1;
          }

          static int t_GroupingSearch_set__includeScores(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setIncludeScores(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "includeScores", arg);
            return -1;
          }

          static int t_GroupingSearch_set__initialSize(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setInitialSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "initialSize", arg);
            return -1;
          }

          static int t_GroupingSearch_set__sortWithinGroup(t_GroupingSearch *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Sort value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Sort::initializeClass, &value))
              {
                INT_CALL(self->object.setSortWithinGroup(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "sortWithinGroup", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder.h"
#include "org/apache/lucene/search/FuzzyQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *FuzzyQueryNodeBuilder::class$ = NULL;
              jmethodID *FuzzyQueryNodeBuilder::mids$ = NULL;
              bool FuzzyQueryNodeBuilder::live$ = false;

              jclass FuzzyQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/FuzzyQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_0622d624] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/FuzzyQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNodeBuilder::FuzzyQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::FuzzyQuery FuzzyQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::FuzzyQuery(env->callObjectMethod(this$, mids$[mid_build_0622d624], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_FuzzyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNodeBuilder_init_(t_FuzzyQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyQueryNodeBuilder_build(t_FuzzyQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_FuzzyQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyQueryNodeBuilder, t_FuzzyQueryNodeBuilder, ::java::lang::Object, FuzzyQueryNodeBuilder, t_FuzzyQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_FuzzyQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNodeBuilder), module, "FuzzyQueryNodeBuilder", 0);
              }

              void t_FuzzyQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeBuilder).tp_dict, "class_", make_descriptor(FuzzyQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNodeBuilder::wrap_Object(FuzzyQueryNodeBuilder(((t_FuzzyQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNodeBuilder_init_(t_FuzzyQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                FuzzyQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = FuzzyQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_FuzzyQueryNodeBuilder_build(t_FuzzyQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::FuzzyQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_FuzzyQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *FuzzyLikeThisQuery::class$ = NULL;
          jmethodID *FuzzyLikeThisQuery::mids$ = NULL;
          bool FuzzyLikeThisQuery::live$ = false;

          jclass FuzzyLikeThisQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_374e0216] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_addTerms_7066f4ef] = env->getMethodID(cls, "addTerms", "(Ljava/lang/String;Ljava/lang/String;FI)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isIgnoreTF_54c6a16a] = env->getMethodID(cls, "isIgnoreTF", "()Z");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setIgnoreTF_bb0c767f] = env->getMethodID(cls, "setIgnoreTF", "(Z)V");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FuzzyLikeThisQuery::FuzzyLikeThisQuery(jint a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_374e0216, a0, a1.this$)) {}

          void FuzzyLikeThisQuery::addTerms(const ::java::lang::String & a0, const ::java::lang::String & a1, jfloat a2, jint a3) const
          {
            env->callVoidMethod(this$, mids$[mid_addTerms_7066f4ef], a0.this$, a1.this$, a2, a3);
          }

          jboolean FuzzyLikeThisQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint FuzzyLikeThisQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean FuzzyLikeThisQuery::isIgnoreTF() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreTF_54c6a16a]);
          }

          ::org::apache::lucene::search::Query FuzzyLikeThisQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          void FuzzyLikeThisQuery::setIgnoreTF(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setIgnoreTF_bb0c767f], a0);
          }

          ::java::lang::String FuzzyLikeThisQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_FuzzyLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FuzzyLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FuzzyLikeThisQuery_init_(t_FuzzyLikeThisQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FuzzyLikeThisQuery_addTerms(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_equals(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_hashCode(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_isIgnoreTF(t_FuzzyLikeThisQuery *self);
          static PyObject *t_FuzzyLikeThisQuery_rewrite(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_setIgnoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg);
          static PyObject *t_FuzzyLikeThisQuery_toString(t_FuzzyLikeThisQuery *self, PyObject *args);
          static PyObject *t_FuzzyLikeThisQuery_get__ignoreTF(t_FuzzyLikeThisQuery *self, void *data);
          static int t_FuzzyLikeThisQuery_set__ignoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg, void *data);
          static PyGetSetDef t_FuzzyLikeThisQuery__fields_[] = {
            DECLARE_GETSET_FIELD(t_FuzzyLikeThisQuery, ignoreTF),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FuzzyLikeThisQuery__methods_[] = {
            DECLARE_METHOD(t_FuzzyLikeThisQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, addTerms, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, isIgnoreTF, METH_NOARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, setIgnoreTF, METH_O),
            DECLARE_METHOD(t_FuzzyLikeThisQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FuzzyLikeThisQuery, t_FuzzyLikeThisQuery, ::org::apache::lucene::search::Query, FuzzyLikeThisQuery, t_FuzzyLikeThisQuery_init_, 0, 0, t_FuzzyLikeThisQuery__fields_, 0, 0);

          void t_FuzzyLikeThisQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(FuzzyLikeThisQuery), module, "FuzzyLikeThisQuery", 0);
          }

          void t_FuzzyLikeThisQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQuery).tp_dict, "class_", make_descriptor(FuzzyLikeThisQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQuery).tp_dict, "wrapfn_", make_descriptor(t_FuzzyLikeThisQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FuzzyLikeThisQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FuzzyLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FuzzyLikeThisQuery::initializeClass, 1)))
              return NULL;
            return t_FuzzyLikeThisQuery::wrap_Object(FuzzyLikeThisQuery(((t_FuzzyLikeThisQuery *) arg)->object.this$));
          }
          static PyObject *t_FuzzyLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FuzzyLikeThisQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FuzzyLikeThisQuery_init_(t_FuzzyLikeThisQuery *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
            FuzzyLikeThisQuery object((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
            {
              INT_CALL(object = FuzzyLikeThisQuery(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FuzzyLikeThisQuery_addTerms(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            jint a3;

            if (!parseArgs(args, "ssFI", &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.addTerms(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addTerms", args);
            return NULL;
          }

          static PyObject *t_FuzzyLikeThisQuery_equals(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_hashCode(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_isIgnoreTF(t_FuzzyLikeThisQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreTF());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FuzzyLikeThisQuery_rewrite(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_setIgnoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setIgnoreTF(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setIgnoreTF", arg);
            return NULL;
          }

          static PyObject *t_FuzzyLikeThisQuery_toString(t_FuzzyLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FuzzyLikeThisQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FuzzyLikeThisQuery_get__ignoreTF(t_FuzzyLikeThisQuery *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreTF());
            Py_RETURN_BOOL(value);
          }
          static int t_FuzzyLikeThisQuery_set__ignoreTF(t_FuzzyLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setIgnoreTF(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "ignoreTF", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/BufferedChecksum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *BufferedChecksum::class$ = NULL;
        jmethodID *BufferedChecksum::mids$ = NULL;
        bool BufferedChecksum::live$ = false;
        jint BufferedChecksum::DEFAULT_BUFFERSIZE = (jint) 0;

        jclass BufferedChecksum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/BufferedChecksum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValue_54c6a17a] = env->getMethodID(cls, "getValue", "()J");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_update_39c7bd3c] = env->getMethodID(cls, "update", "(I)V");
            mids$[mid_update_86f4435f] = env->getMethodID(cls, "update", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERSIZE = env->getStaticIntField(cls, "DEFAULT_BUFFERSIZE");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong BufferedChecksum::getValue() const
        {
          return env->callLongMethod(this$, mids$[mid_getValue_54c6a17a]);
        }

        void BufferedChecksum::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void BufferedChecksum::update(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_update_39c7bd3c], a0);
        }

        void BufferedChecksum::update(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_update_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_BufferedChecksum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedChecksum_getValue(t_BufferedChecksum *self);
        static PyObject *t_BufferedChecksum_reset(t_BufferedChecksum *self);
        static PyObject *t_BufferedChecksum_update(t_BufferedChecksum *self, PyObject *args);
        static PyObject *t_BufferedChecksum_get__value(t_BufferedChecksum *self, void *data);
        static PyGetSetDef t_BufferedChecksum__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedChecksum, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedChecksum__methods_[] = {
          DECLARE_METHOD(t_BufferedChecksum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedChecksum, getValue, METH_NOARGS),
          DECLARE_METHOD(t_BufferedChecksum, reset, METH_NOARGS),
          DECLARE_METHOD(t_BufferedChecksum, update, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedChecksum, t_BufferedChecksum, ::java::lang::Object, BufferedChecksum, abstract_init, 0, 0, t_BufferedChecksum__fields_, 0, 0);

        void t_BufferedChecksum::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedChecksum), module, "BufferedChecksum", 0);
        }

        void t_BufferedChecksum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "class_", make_descriptor(BufferedChecksum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "wrapfn_", make_descriptor(t_BufferedChecksum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BufferedChecksum::initializeClass);
          PyDict_SetItemString(PY_TYPE(BufferedChecksum).tp_dict, "DEFAULT_BUFFERSIZE", make_descriptor(BufferedChecksum::DEFAULT_BUFFERSIZE));
        }

        static PyObject *t_BufferedChecksum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedChecksum::initializeClass, 1)))
            return NULL;
          return t_BufferedChecksum::wrap_Object(BufferedChecksum(((t_BufferedChecksum *) arg)->object.this$));
        }
        static PyObject *t_BufferedChecksum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedChecksum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BufferedChecksum_getValue(t_BufferedChecksum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_BufferedChecksum_reset(t_BufferedChecksum *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }

        static PyObject *t_BufferedChecksum_update(t_BufferedChecksum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.update(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.update(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "update", args);
          return NULL;
        }

        static PyObject *t_BufferedChecksum_get__value(t_BufferedChecksum *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValue());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermsEnum$SeekStatus::class$ = NULL;
        jmethodID *TermsEnum$SeekStatus::mids$ = NULL;
        bool TermsEnum$SeekStatus::live$ = false;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::END = NULL;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::FOUND = NULL;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::NOT_FOUND = NULL;

        jclass TermsEnum$SeekStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermsEnum$SeekStatus");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_e0b0a2bc] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_values_5e8184a6] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/TermsEnum$SeekStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            END = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "END", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            FOUND = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "FOUND", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            NOT_FOUND = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "NOT_FOUND", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermsEnum$SeekStatus TermsEnum$SeekStatus::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return TermsEnum$SeekStatus(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e0b0a2bc], a0.this$));
        }

        JArray< TermsEnum$SeekStatus > TermsEnum$SeekStatus::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< TermsEnum$SeekStatus >(env->callStaticObjectMethod(cls, mids$[mid_values_5e8184a6]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermsEnum$SeekStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum$SeekStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum$SeekStatus_of_(t_TermsEnum$SeekStatus *self, PyObject *args);
        static PyObject *t_TermsEnum$SeekStatus_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermsEnum$SeekStatus_values(PyTypeObject *type);
        static PyObject *t_TermsEnum$SeekStatus_get__parameters_(t_TermsEnum$SeekStatus *self, void *data);
        static PyGetSetDef t_TermsEnum$SeekStatus__fields_[] = {
          DECLARE_GET_FIELD(t_TermsEnum$SeekStatus, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermsEnum$SeekStatus__methods_[] = {
          DECLARE_METHOD(t_TermsEnum$SeekStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, of_, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsEnum$SeekStatus, t_TermsEnum$SeekStatus, ::java::lang::Enum, TermsEnum$SeekStatus, abstract_init, 0, 0, t_TermsEnum$SeekStatus__fields_, 0, 0);
        PyObject *t_TermsEnum$SeekStatus::wrap_Object(const TermsEnum$SeekStatus& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermsEnum$SeekStatus::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermsEnum$SeekStatus *self = (t_TermsEnum$SeekStatus *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TermsEnum$SeekStatus::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermsEnum$SeekStatus::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermsEnum$SeekStatus *self = (t_TermsEnum$SeekStatus *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TermsEnum$SeekStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsEnum$SeekStatus), module, "TermsEnum$SeekStatus", 0);
        }

        void t_TermsEnum$SeekStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "class_", make_descriptor(TermsEnum$SeekStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "wrapfn_", make_descriptor(t_TermsEnum$SeekStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TermsEnum$SeekStatus::initializeClass);
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "END", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::END)));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "FOUND", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::FOUND)));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "NOT_FOUND", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::NOT_FOUND)));
        }

        static PyObject *t_TermsEnum$SeekStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsEnum$SeekStatus::initializeClass, 1)))
            return NULL;
          return t_TermsEnum$SeekStatus::wrap_Object(TermsEnum$SeekStatus(((t_TermsEnum$SeekStatus *) arg)->object.this$));
        }
        static PyObject *t_TermsEnum$SeekStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsEnum$SeekStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermsEnum$SeekStatus_of_(t_TermsEnum$SeekStatus *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TermsEnum$SeekStatus_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::TermsEnum$SeekStatus::valueOf(a0));
            return t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_TermsEnum$SeekStatus_values(PyTypeObject *type)
        {
          JArray< TermsEnum$SeekStatus > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::TermsEnum$SeekStatus::values());
          return JArray<jobject>(result.this$).wrap(t_TermsEnum$SeekStatus::wrap_jobject);
        }
        static PyObject *t_TermsEnum$SeekStatus_get__parameters_(t_TermsEnum$SeekStatus *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$logical_or_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$logical_or_return::class$ = NULL;
          jmethodID *JavascriptParser$logical_or_return::mids$ = NULL;
          bool JavascriptParser$logical_or_return::live$ = false;

          jclass JavascriptParser$logical_or_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$logical_or_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$logical_or_return::JavascriptParser$logical_or_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$logical_or_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$logical_or_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$logical_or_return_init_(t_JavascriptParser$logical_or_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$logical_or_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$logical_or_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$logical_or_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$logical_or_return, t_JavascriptParser$logical_or_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$logical_or_return, t_JavascriptParser$logical_or_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$logical_or_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$logical_or_return), module, "JavascriptParser$logical_or_return", 0);
          }

          void t_JavascriptParser$logical_or_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_or_return).tp_dict, "class_", make_descriptor(JavascriptParser$logical_or_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_or_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$logical_or_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$logical_or_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$logical_or_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$logical_or_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$logical_or_return::wrap_Object(JavascriptParser$logical_or_return(((t_JavascriptParser$logical_or_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$logical_or_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$logical_or_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$logical_or_return_init_(t_JavascriptParser$logical_or_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$logical_or_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$logical_or_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LruTaxonomyWriterCache$LRUType::class$ = NULL;
            jmethodID *LruTaxonomyWriterCache$LRUType::mids$ = NULL;
            bool LruTaxonomyWriterCache$LRUType::live$ = false;
            LruTaxonomyWriterCache$LRUType *LruTaxonomyWriterCache$LRUType::LRU_HASHED = NULL;
            LruTaxonomyWriterCache$LRUType *LruTaxonomyWriterCache$LRUType::LRU_STRING = NULL;

            jclass LruTaxonomyWriterCache$LRUType::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType");

                mids$ = new jmethodID[max_mid];
                mids$[mid_valueOf_dc8e332a] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;");
                mids$[mid_values_bbbf1f8c] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                LRU_HASHED = new LruTaxonomyWriterCache$LRUType(env->getStaticObjectField(cls, "LRU_HASHED", "Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;"));
                LRU_STRING = new LruTaxonomyWriterCache$LRUType(env->getStaticObjectField(cls, "LRU_STRING", "Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LruTaxonomyWriterCache$LRUType LruTaxonomyWriterCache$LRUType::valueOf(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return LruTaxonomyWriterCache$LRUType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_dc8e332a], a0.this$));
            }

            JArray< LruTaxonomyWriterCache$LRUType > LruTaxonomyWriterCache$LRUType::values()
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< LruTaxonomyWriterCache$LRUType >(env->callStaticObjectMethod(cls, mids$[mid_values_bbbf1f8c]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LruTaxonomyWriterCache$LRUType_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_of_(t_LruTaxonomyWriterCache$LRUType *self, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_valueOf(PyTypeObject *type, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_values(PyTypeObject *type);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_get__parameters_(t_LruTaxonomyWriterCache$LRUType *self, void *data);
            static PyGetSetDef t_LruTaxonomyWriterCache$LRUType__fields_[] = {
              DECLARE_GET_FIELD(t_LruTaxonomyWriterCache$LRUType, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LruTaxonomyWriterCache$LRUType__methods_[] = {
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, of_, METH_VARARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, valueOf, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, values, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LruTaxonomyWriterCache$LRUType, t_LruTaxonomyWriterCache$LRUType, ::java::lang::Enum, LruTaxonomyWriterCache$LRUType, abstract_init, 0, 0, t_LruTaxonomyWriterCache$LRUType__fields_, 0, 0);
            PyObject *t_LruTaxonomyWriterCache$LRUType::wrap_Object(const LruTaxonomyWriterCache$LRUType& object, PyTypeObject *p0)
            {
              PyObject *obj = t_LruTaxonomyWriterCache$LRUType::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_LruTaxonomyWriterCache$LRUType *self = (t_LruTaxonomyWriterCache$LRUType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_LruTaxonomyWriterCache$LRUType::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_LruTaxonomyWriterCache$LRUType::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_LruTaxonomyWriterCache$LRUType *self = (t_LruTaxonomyWriterCache$LRUType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_LruTaxonomyWriterCache$LRUType::install(PyObject *module)
            {
              installType(&PY_TYPE(LruTaxonomyWriterCache$LRUType), module, "LruTaxonomyWriterCache$LRUType", 0);
            }

            void t_LruTaxonomyWriterCache$LRUType::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "class_", make_descriptor(LruTaxonomyWriterCache$LRUType::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "wrapfn_", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(LruTaxonomyWriterCache$LRUType::initializeClass);
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "LRU_HASHED", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_Object(*LruTaxonomyWriterCache$LRUType::LRU_HASHED)));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "LRU_STRING", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_Object(*LruTaxonomyWriterCache$LRUType::LRU_STRING)));
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LruTaxonomyWriterCache$LRUType::initializeClass, 1)))
                return NULL;
              return t_LruTaxonomyWriterCache$LRUType::wrap_Object(LruTaxonomyWriterCache$LRUType(((t_LruTaxonomyWriterCache$LRUType *) arg)->object.this$));
            }
            static PyObject *t_LruTaxonomyWriterCache$LRUType_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LruTaxonomyWriterCache$LRUType::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_of_(t_LruTaxonomyWriterCache$LRUType *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_valueOf(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              LruTaxonomyWriterCache$LRUType result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::valueOf(a0));
                return t_LruTaxonomyWriterCache$LRUType::wrap_Object(result);
              }

              return callSuper(type, "valueOf", args, 2);
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_values(PyTypeObject *type)
            {
              JArray< LruTaxonomyWriterCache$LRUType > result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::values());
              return JArray<jobject>(result.this$).wrap(t_LruTaxonomyWriterCache$LRUType::wrap_jobject);
            }
            static PyObject *t_LruTaxonomyWriterCache$LRUType_get__parameters_(t_LruTaxonomyWriterCache$LRUType *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/ChecksumIndexInput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *ChecksumIndexInput::class$ = NULL;
        jmethodID *ChecksumIndexInput::mids$ = NULL;
        bool ChecksumIndexInput::live$ = false;

        jclass ChecksumIndexInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/ChecksumIndexInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getChecksum_54c6a17a] = env->getMethodID(cls, "getChecksum", "()J");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong ChecksumIndexInput::getChecksum() const
        {
          return env->callLongMethod(this$, mids$[mid_getChecksum_54c6a17a]);
        }

        void ChecksumIndexInput::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_ChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ChecksumIndexInput_getChecksum(t_ChecksumIndexInput *self);
        static PyObject *t_ChecksumIndexInput_seek(t_ChecksumIndexInput *self, PyObject *args);
        static PyObject *t_ChecksumIndexInput_get__checksum(t_ChecksumIndexInput *self, void *data);
        static PyGetSetDef t_ChecksumIndexInput__fields_[] = {
          DECLARE_GET_FIELD(t_ChecksumIndexInput, checksum),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ChecksumIndexInput__methods_[] = {
          DECLARE_METHOD(t_ChecksumIndexInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChecksumIndexInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ChecksumIndexInput, getChecksum, METH_NOARGS),
          DECLARE_METHOD(t_ChecksumIndexInput, seek, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ChecksumIndexInput, t_ChecksumIndexInput, ::org::apache::lucene::store::IndexInput, ChecksumIndexInput, abstract_init, 0, 0, t_ChecksumIndexInput__fields_, 0, 0);

        void t_ChecksumIndexInput::install(PyObject *module)
        {
          installType(&PY_TYPE(ChecksumIndexInput), module, "ChecksumIndexInput", 0);
        }

        void t_ChecksumIndexInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ChecksumIndexInput).tp_dict, "class_", make_descriptor(ChecksumIndexInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ChecksumIndexInput).tp_dict, "wrapfn_", make_descriptor(t_ChecksumIndexInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ChecksumIndexInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ChecksumIndexInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ChecksumIndexInput::initializeClass, 1)))
            return NULL;
          return t_ChecksumIndexInput::wrap_Object(ChecksumIndexInput(((t_ChecksumIndexInput *) arg)->object.this$));
        }
        static PyObject *t_ChecksumIndexInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ChecksumIndexInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ChecksumIndexInput_getChecksum(t_ChecksumIndexInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_ChecksumIndexInput_seek(t_ChecksumIndexInput *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ChecksumIndexInput), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_ChecksumIndexInput_get__checksum(t_ChecksumIndexInput *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getChecksum());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CloseableThreadLocal.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CloseableThreadLocal::class$ = NULL;
        jmethodID *CloseableThreadLocal::mids$ = NULL;
        bool CloseableThreadLocal::live$ = false;

        jclass CloseableThreadLocal::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CloseableThreadLocal");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_get_846352c3] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_set_290588ee] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");
            mids$[mid_initialValue_846352c3] = env->getMethodID(cls, "initialValue", "()Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CloseableThreadLocal::CloseableThreadLocal() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void CloseableThreadLocal::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::java::lang::Object CloseableThreadLocal::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_846352c3]));
        }

        void CloseableThreadLocal::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CloseableThreadLocal_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_of_(t_CloseableThreadLocal *self, PyObject *args);
        static int t_CloseableThreadLocal_init_(t_CloseableThreadLocal *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CloseableThreadLocal_close(t_CloseableThreadLocal *self);
        static PyObject *t_CloseableThreadLocal_get(t_CloseableThreadLocal *self);
        static PyObject *t_CloseableThreadLocal_set(t_CloseableThreadLocal *self, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_get__parameters_(t_CloseableThreadLocal *self, void *data);
        static PyGetSetDef t_CloseableThreadLocal__fields_[] = {
          DECLARE_GET_FIELD(t_CloseableThreadLocal, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CloseableThreadLocal__methods_[] = {
          DECLARE_METHOD(t_CloseableThreadLocal, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CloseableThreadLocal, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CloseableThreadLocal, of_, METH_VARARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, close, METH_NOARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, get, METH_NOARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CloseableThreadLocal, t_CloseableThreadLocal, ::java::lang::Object, CloseableThreadLocal, t_CloseableThreadLocal_init_, 0, 0, t_CloseableThreadLocal__fields_, 0, 0);
        PyObject *t_CloseableThreadLocal::wrap_Object(const CloseableThreadLocal& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CloseableThreadLocal::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CloseableThreadLocal *self = (t_CloseableThreadLocal *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_CloseableThreadLocal::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CloseableThreadLocal::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CloseableThreadLocal *self = (t_CloseableThreadLocal *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_CloseableThreadLocal::install(PyObject *module)
        {
          installType(&PY_TYPE(CloseableThreadLocal), module, "CloseableThreadLocal", 0);
        }

        void t_CloseableThreadLocal::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CloseableThreadLocal).tp_dict, "class_", make_descriptor(CloseableThreadLocal::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CloseableThreadLocal).tp_dict, "wrapfn_", make_descriptor(t_CloseableThreadLocal::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CloseableThreadLocal).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CloseableThreadLocal_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CloseableThreadLocal::initializeClass, 1)))
            return NULL;
          return t_CloseableThreadLocal::wrap_Object(CloseableThreadLocal(((t_CloseableThreadLocal *) arg)->object.this$));
        }
        static PyObject *t_CloseableThreadLocal_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CloseableThreadLocal::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CloseableThreadLocal_of_(t_CloseableThreadLocal *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_CloseableThreadLocal_init_(t_CloseableThreadLocal *self, PyObject *args, PyObject *kwds)
        {
          CloseableThreadLocal object((jobject) NULL);

          INT_CALL(object = CloseableThreadLocal());
          self->object = object;

          return 0;
        }

        static PyObject *t_CloseableThreadLocal_close(t_CloseableThreadLocal *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_CloseableThreadLocal_get(t_CloseableThreadLocal *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_CloseableThreadLocal_set(t_CloseableThreadLocal *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
        static PyObject *t_CloseableThreadLocal_get__parameters_(t_CloseableThreadLocal *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueFloat.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueFloat::class$ = NULL;
          jmethodID *MutableValueFloat::mids$ = NULL;
          jfieldID *MutableValueFloat::fids$ = NULL;
          bool MutableValueFloat::live$ = false;

          jclass MutableValueFloat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueFloat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueFloat::MutableValueFloat() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueFloat::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueFloat::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueFloat::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueFloat::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueFloat::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueFloat::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jfloat MutableValueFloat::_get_value() const
          {
            return env->getFloatField(this$, fids$[fid_value]);
          }

          void MutableValueFloat::_set_value(jfloat a0) const
          {
            env->setFloatField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueFloat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueFloat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueFloat_init_(t_MutableValueFloat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueFloat_compareSameType(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_copy(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_duplicate(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_equalsSameType(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_hashCode(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_toObject(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_get__value(t_MutableValueFloat *self, void *data);
          static int t_MutableValueFloat_set__value(t_MutableValueFloat *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueFloat__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueFloat, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueFloat__methods_[] = {
            DECLARE_METHOD(t_MutableValueFloat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueFloat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueFloat, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueFloat, t_MutableValueFloat, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueFloat, t_MutableValueFloat_init_, 0, 0, t_MutableValueFloat__fields_, 0, 0);

          void t_MutableValueFloat::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueFloat), module, "MutableValueFloat", 0);
          }

          void t_MutableValueFloat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueFloat).tp_dict, "class_", make_descriptor(MutableValueFloat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueFloat).tp_dict, "wrapfn_", make_descriptor(t_MutableValueFloat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueFloat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueFloat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueFloat::initializeClass, 1)))
              return NULL;
            return t_MutableValueFloat::wrap_Object(MutableValueFloat(((t_MutableValueFloat *) arg)->object.this$));
          }
          static PyObject *t_MutableValueFloat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueFloat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueFloat_init_(t_MutableValueFloat *self, PyObject *args, PyObject *kwds)
          {
            MutableValueFloat object((jobject) NULL);

            INT_CALL(object = MutableValueFloat());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueFloat_compareSameType(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueFloat_copy(t_MutableValueFloat *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueFloat_duplicate(t_MutableValueFloat *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueFloat_equalsSameType(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueFloat_hashCode(t_MutableValueFloat *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueFloat_toObject(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueFloat_get__value(t_MutableValueFloat *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_value());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MutableValueFloat_set__value(t_MutableValueFloat *self, PyObject *arg, void *data)
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermFirstPassGroupingCollector::class$ = NULL;
            jmethodID *TermFirstPassGroupingCollector::mids$ = NULL;
            bool TermFirstPassGroupingCollector::live$ = false;

            jclass TermFirstPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_a296710a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/Sort;I)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_getDocGroupValue_b57e9c3f] = env->getMethodID(cls, "getDocGroupValue", "(I)Lorg/apache/lucene/util/BytesRef;");
                mids$[mid_copyDocGroupValue_0991fadd] = env->getMethodID(cls, "copyDocGroupValue", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermFirstPassGroupingCollector::TermFirstPassGroupingCollector(const ::java::lang::String & a0, const ::org::apache::lucene::search::Sort & a1, jint a2) : ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_a296710a, a0.this$, a1.this$, a2)) {}

            void TermFirstPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermFirstPassGroupingCollector_of_(t_TermFirstPassGroupingCollector *self, PyObject *args);
            static int t_TermFirstPassGroupingCollector_init_(t_TermFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermFirstPassGroupingCollector_setNextReader(t_TermFirstPassGroupingCollector *self, PyObject *args);
            static int t_TermFirstPassGroupingCollector_set__nextReader(t_TermFirstPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermFirstPassGroupingCollector_get__parameters_(t_TermFirstPassGroupingCollector *self, void *data);
            static PyGetSetDef t_TermFirstPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_TermFirstPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_TermFirstPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermFirstPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermFirstPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermFirstPassGroupingCollector, t_TermFirstPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector, TermFirstPassGroupingCollector, t_TermFirstPassGroupingCollector_init_, 0, 0, t_TermFirstPassGroupingCollector__fields_, 0, 0);
            PyObject *t_TermFirstPassGroupingCollector::wrap_Object(const TermFirstPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermFirstPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermFirstPassGroupingCollector *self = (t_TermFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermFirstPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermFirstPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermFirstPassGroupingCollector *self = (t_TermFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermFirstPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermFirstPassGroupingCollector), module, "TermFirstPassGroupingCollector", 0);
            }

            void t_TermFirstPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermFirstPassGroupingCollector).tp_dict, "class_", make_descriptor(TermFirstPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermFirstPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_TermFirstPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermFirstPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermFirstPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_TermFirstPassGroupingCollector::wrap_Object(TermFirstPassGroupingCollector(((t_TermFirstPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_TermFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermFirstPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermFirstPassGroupingCollector_of_(t_TermFirstPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermFirstPassGroupingCollector_init_(t_TermFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::Sort a1((jobject) NULL);
              jint a2;
              TermFirstPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "skI", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = TermFirstPassGroupingCollector(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermFirstPassGroupingCollector_setNextReader(t_TermFirstPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermFirstPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermFirstPassGroupingCollector_get__parameters_(t_TermFirstPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_TermFirstPassGroupingCollector_set__nextReader(t_TermFirstPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelP.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelP::class$ = NULL;
          jmethodID *BasicModelP::mids$ = NULL;
          bool BasicModelP::live$ = false;

          jclass BasicModelP::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelP");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelP::BasicModelP() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelP::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelP::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelP_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelP_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelP_init_(t_BasicModelP *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelP_score(t_BasicModelP *self, PyObject *args);
          static PyObject *t_BasicModelP_toString(t_BasicModelP *self, PyObject *args);

          static PyMethodDef t_BasicModelP__methods_[] = {
            DECLARE_METHOD(t_BasicModelP, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelP, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelP, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelP, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelP, t_BasicModelP, ::org::apache::lucene::search::similarities::BasicModel, BasicModelP, t_BasicModelP_init_, 0, 0, 0, 0, 0);

          void t_BasicModelP::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelP), module, "BasicModelP", 0);
          }

          void t_BasicModelP::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelP).tp_dict, "class_", make_descriptor(BasicModelP::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelP).tp_dict, "wrapfn_", make_descriptor(t_BasicModelP::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelP).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelP_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelP::initializeClass, 1)))
              return NULL;
            return t_BasicModelP::wrap_Object(BasicModelP(((t_BasicModelP *) arg)->object.this$));
          }
          static PyObject *t_BasicModelP_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelP::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelP_init_(t_BasicModelP *self, PyObject *args, PyObject *kwds)
          {
            BasicModelP object((jobject) NULL);

            INT_CALL(object = BasicModelP());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelP_score(t_BasicModelP *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelP), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelP_toString(t_BasicModelP *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelP), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Field$TermVector.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Field$TermVector::class$ = NULL;
        jmethodID *Field$TermVector::mids$ = NULL;
        bool Field$TermVector::live$ = false;
        Field$TermVector *Field$TermVector::NO = NULL;
        Field$TermVector *Field$TermVector::WITH_OFFSETS = NULL;
        Field$TermVector *Field$TermVector::WITH_POSITIONS = NULL;
        Field$TermVector *Field$TermVector::WITH_POSITIONS_OFFSETS = NULL;
        Field$TermVector *Field$TermVector::YES = NULL;

        jclass Field$TermVector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Field$TermVector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_isStored_54c6a16a] = env->getMethodID(cls, "isStored", "()Z");
            mids$[mid_toTermVector_e3e77410] = env->getStaticMethodID(cls, "toTermVector", "(ZZZ)Lorg/apache/lucene/document/Field$TermVector;");
            mids$[mid_valueOf_dd40625d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/document/Field$TermVector;");
            mids$[mid_values_3d8f8203] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/document/Field$TermVector;");
            mids$[mid_withOffsets_54c6a16a] = env->getMethodID(cls, "withOffsets", "()Z");
            mids$[mid_withPositions_54c6a16a] = env->getMethodID(cls, "withPositions", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = new Field$TermVector(env->getStaticObjectField(cls, "NO", "Lorg/apache/lucene/document/Field$TermVector;"));
            WITH_OFFSETS = new Field$TermVector(env->getStaticObjectField(cls, "WITH_OFFSETS", "Lorg/apache/lucene/document/Field$TermVector;"));
            WITH_POSITIONS = new Field$TermVector(env->getStaticObjectField(cls, "WITH_POSITIONS", "Lorg/apache/lucene/document/Field$TermVector;"));
            WITH_POSITIONS_OFFSETS = new Field$TermVector(env->getStaticObjectField(cls, "WITH_POSITIONS_OFFSETS", "Lorg/apache/lucene/document/Field$TermVector;"));
            YES = new Field$TermVector(env->getStaticObjectField(cls, "YES", "Lorg/apache/lucene/document/Field$TermVector;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean Field$TermVector::isStored() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isStored_54c6a16a]);
        }

        Field$TermVector Field$TermVector::toTermVector(jboolean a0, jboolean a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$TermVector(env->callStaticObjectMethod(cls, mids$[mid_toTermVector_e3e77410], a0, a1, a2));
        }

        Field$TermVector Field$TermVector::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Field$TermVector(env->callStaticObjectMethod(cls, mids$[mid_valueOf_dd40625d], a0.this$));
        }

        JArray< Field$TermVector > Field$TermVector::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< Field$TermVector >(env->callStaticObjectMethod(cls, mids$[mid_values_3d8f8203]));
        }

        jboolean Field$TermVector::withOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_withOffsets_54c6a16a]);
        }

        jboolean Field$TermVector::withPositions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_withPositions_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Field$TermVector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$TermVector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Field$TermVector_of_(t_Field$TermVector *self, PyObject *args);
        static PyObject *t_Field$TermVector_isStored(t_Field$TermVector *self);
        static PyObject *t_Field$TermVector_toTermVector(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$TermVector_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Field$TermVector_values(PyTypeObject *type);
        static PyObject *t_Field$TermVector_withOffsets(t_Field$TermVector *self);
        static PyObject *t_Field$TermVector_withPositions(t_Field$TermVector *self);
        static PyObject *t_Field$TermVector_get__stored(t_Field$TermVector *self, void *data);
        static PyObject *t_Field$TermVector_get__parameters_(t_Field$TermVector *self, void *data);
        static PyGetSetDef t_Field$TermVector__fields_[] = {
          DECLARE_GET_FIELD(t_Field$TermVector, stored),
          DECLARE_GET_FIELD(t_Field$TermVector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Field$TermVector__methods_[] = {
          DECLARE_METHOD(t_Field$TermVector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, of_, METH_VARARGS),
          DECLARE_METHOD(t_Field$TermVector, isStored, METH_NOARGS),
          DECLARE_METHOD(t_Field$TermVector, toTermVector, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, values, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_Field$TermVector, withOffsets, METH_NOARGS),
          DECLARE_METHOD(t_Field$TermVector, withPositions, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Field$TermVector, t_Field$TermVector, ::java::lang::Enum, Field$TermVector, abstract_init, 0, 0, t_Field$TermVector__fields_, 0, 0);
        PyObject *t_Field$TermVector::wrap_Object(const Field$TermVector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$TermVector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$TermVector *self = (t_Field$TermVector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_Field$TermVector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_Field$TermVector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_Field$TermVector *self = (t_Field$TermVector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_Field$TermVector::install(PyObject *module)
        {
          installType(&PY_TYPE(Field$TermVector), module, "Field$TermVector", 0);
        }

        void t_Field$TermVector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "class_", make_descriptor(Field$TermVector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "wrapfn_", make_descriptor(t_Field$TermVector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(Field$TermVector::initializeClass);
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "NO", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::NO)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "WITH_OFFSETS", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::WITH_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "WITH_POSITIONS", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::WITH_POSITIONS)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "WITH_POSITIONS_OFFSETS", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::WITH_POSITIONS_OFFSETS)));
          PyDict_SetItemString(PY_TYPE(Field$TermVector).tp_dict, "YES", make_descriptor(t_Field$TermVector::wrap_Object(*Field$TermVector::YES)));
        }

        static PyObject *t_Field$TermVector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Field$TermVector::initializeClass, 1)))
            return NULL;
          return t_Field$TermVector::wrap_Object(Field$TermVector(((t_Field$TermVector *) arg)->object.this$));
        }
        static PyObject *t_Field$TermVector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Field$TermVector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Field$TermVector_of_(t_Field$TermVector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Field$TermVector_isStored(t_Field$TermVector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isStored());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$TermVector_toTermVector(PyTypeObject *type, PyObject *args)
        {
          jboolean a0;
          jboolean a1;
          jboolean a2;
          Field$TermVector result((jobject) NULL);

          if (!parseArgs(args, "ZZZ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$TermVector::toTermVector(a0, a1, a2));
            return t_Field$TermVector::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "toTermVector", args);
          return NULL;
        }

        static PyObject *t_Field$TermVector_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          Field$TermVector result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::Field$TermVector::valueOf(a0));
            return t_Field$TermVector::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_Field$TermVector_values(PyTypeObject *type)
        {
          JArray< Field$TermVector > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::document::Field$TermVector::values());
          return JArray<jobject>(result.this$).wrap(t_Field$TermVector::wrap_jobject);
        }

        static PyObject *t_Field$TermVector_withOffsets(t_Field$TermVector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.withOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Field$TermVector_withPositions(t_Field$TermVector *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.withPositions());
          Py_RETURN_BOOL(result);
        }
        static PyObject *t_Field$TermVector_get__parameters_(t_Field$TermVector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Field$TermVector_get__stored(t_Field$TermVector *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isStored());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TokenTypeSinkFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TokenTypeSinkFilter::class$ = NULL;
          jmethodID *TokenTypeSinkFilter::mids$ = NULL;
          bool TokenTypeSinkFilter::live$ = false;

          jclass TokenTypeSinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TokenTypeSinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenTypeSinkFilter::TokenTypeSinkFilter(const ::java::lang::String & a0) : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          jboolean TokenTypeSinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TokenTypeSinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenTypeSinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenTypeSinkFilter_init_(t_TokenTypeSinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenTypeSinkFilter_accept(t_TokenTypeSinkFilter *self, PyObject *args);

          static PyMethodDef t_TokenTypeSinkFilter__methods_[] = {
            DECLARE_METHOD(t_TokenTypeSinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenTypeSinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenTypeSinkFilter, accept, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenTypeSinkFilter, t_TokenTypeSinkFilter, ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter, TokenTypeSinkFilter, t_TokenTypeSinkFilter_init_, 0, 0, 0, 0, 0);

          void t_TokenTypeSinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenTypeSinkFilter), module, "TokenTypeSinkFilter", 0);
          }

          void t_TokenTypeSinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenTypeSinkFilter).tp_dict, "class_", make_descriptor(TokenTypeSinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenTypeSinkFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenTypeSinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenTypeSinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenTypeSinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenTypeSinkFilter::initializeClass, 1)))
              return NULL;
            return t_TokenTypeSinkFilter::wrap_Object(TokenTypeSinkFilter(((t_TokenTypeSinkFilter *) arg)->object.this$));
          }
          static PyObject *t_TokenTypeSinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenTypeSinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenTypeSinkFilter_init_(t_TokenTypeSinkFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            TokenTypeSinkFilter object((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              INT_CALL(object = TokenTypeSinkFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenTypeSinkFilter_accept(t_TokenTypeSinkFilter *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenTypeSinkFilter), (PyObject *) self, "accept", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIne.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIne::class$ = NULL;
          jmethodID *BasicModelIne::mids$ = NULL;
          bool BasicModelIne::live$ = false;

          jclass BasicModelIne::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIne");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIne::BasicModelIne() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat BasicModelIne::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelIne::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIne_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIne_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIne_init_(t_BasicModelIne *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIne_score(t_BasicModelIne *self, PyObject *args);
          static PyObject *t_BasicModelIne_toString(t_BasicModelIne *self, PyObject *args);

          static PyMethodDef t_BasicModelIne__methods_[] = {
            DECLARE_METHOD(t_BasicModelIne, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIne, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIne, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIne, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelIne, t_BasicModelIne, ::org::apache::lucene::search::similarities::BasicModel, BasicModelIne, t_BasicModelIne_init_, 0, 0, 0, 0, 0);

          void t_BasicModelIne::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIne), module, "BasicModelIne", 0);
          }

          void t_BasicModelIne::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelIne).tp_dict, "class_", make_descriptor(BasicModelIne::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelIne).tp_dict, "wrapfn_", make_descriptor(t_BasicModelIne::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelIne).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIne_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIne::initializeClass, 1)))
              return NULL;
            return t_BasicModelIne::wrap_Object(BasicModelIne(((t_BasicModelIne *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIne_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIne::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIne_init_(t_BasicModelIne *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIne object((jobject) NULL);

            INT_CALL(object = BasicModelIne());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIne_score(t_BasicModelIne *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelIne), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIne_toString(t_BasicModelIne *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelIne), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMFile::class$ = NULL;
        jmethodID *RAMFile::mids$ = NULL;
        bool RAMFile::live$ = false;

        jclass RAMFile::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMFile");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getLength_54c6a17a] = env->getMethodID(cls, "getLength", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_getBuffer_b4292e98] = env->getMethodID(cls, "getBuffer", "(I)[B");
            mids$[mid_setLength_0ee6df2f] = env->getMethodID(cls, "setLength", "(J)V");
            mids$[mid_newBuffer_b4292e98] = env->getMethodID(cls, "newBuffer", "(I)[B");
            mids$[mid_numBuffers_54c6a179] = env->getMethodID(cls, "numBuffers", "()I");
            mids$[mid_addBuffer_b4292e98] = env->getMethodID(cls, "addBuffer", "(I)[B");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMFile::RAMFile() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong RAMFile::getLength() const
        {
          return env->callLongMethod(this$, mids$[mid_getLength_54c6a17a]);
        }

        jlong RAMFile::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMFile_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMFile_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMFile_init_(t_RAMFile *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMFile_getLength(t_RAMFile *self);
        static PyObject *t_RAMFile_ramBytesUsed(t_RAMFile *self);
        static PyObject *t_RAMFile_get__length(t_RAMFile *self, void *data);
        static PyGetSetDef t_RAMFile__fields_[] = {
          DECLARE_GET_FIELD(t_RAMFile, length),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMFile__methods_[] = {
          DECLARE_METHOD(t_RAMFile, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMFile, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMFile, getLength, METH_NOARGS),
          DECLARE_METHOD(t_RAMFile, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMFile, t_RAMFile, ::java::lang::Object, RAMFile, t_RAMFile_init_, 0, 0, t_RAMFile__fields_, 0, 0);

        void t_RAMFile::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMFile), module, "RAMFile", 0);
        }

        void t_RAMFile::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMFile).tp_dict, "class_", make_descriptor(RAMFile::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMFile).tp_dict, "wrapfn_", make_descriptor(t_RAMFile::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMFile).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMFile_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMFile::initializeClass, 1)))
            return NULL;
          return t_RAMFile::wrap_Object(RAMFile(((t_RAMFile *) arg)->object.this$));
        }
        static PyObject *t_RAMFile_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMFile::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMFile_init_(t_RAMFile *self, PyObject *args, PyObject *kwds)
        {
          RAMFile object((jobject) NULL);

          INT_CALL(object = RAMFile());
          self->object = object;

          return 0;
        }

        static PyObject *t_RAMFile_getLength(t_RAMFile *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getLength());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMFile_ramBytesUsed(t_RAMFile *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMFile_get__length(t_RAMFile *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getLength());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceAnalyzer::class$ = NULL;
          jmethodID *WhitespaceAnalyzer::mids$ = NULL;
          bool WhitespaceAnalyzer::live$ = false;

          jclass WhitespaceAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceAnalyzer::WhitespaceAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceAnalyzer_init_(t_WhitespaceAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_WhitespaceAnalyzer__methods_[] = {
            DECLARE_METHOD(t_WhitespaceAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WhitespaceAnalyzer, t_WhitespaceAnalyzer, ::org::apache::lucene::analysis::Analyzer, WhitespaceAnalyzer, t_WhitespaceAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_WhitespaceAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceAnalyzer), module, "WhitespaceAnalyzer", 0);
          }

          void t_WhitespaceAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WhitespaceAnalyzer).tp_dict, "class_", make_descriptor(WhitespaceAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WhitespaceAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_WhitespaceAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WhitespaceAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WhitespaceAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceAnalyzer::initializeClass, 1)))
              return NULL;
            return t_WhitespaceAnalyzer::wrap_Object(WhitespaceAnalyzer(((t_WhitespaceAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceAnalyzer_init_(t_WhitespaceAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            WhitespaceAnalyzer object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
            {
              INT_CALL(object = WhitespaceAnalyzer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/BlockGroupingCollector.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/grouping/TopGroups.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *BlockGroupingCollector::class$ = NULL;
          jmethodID *BlockGroupingCollector::mids$ = NULL;
          bool BlockGroupingCollector::live$ = false;

          jclass BlockGroupingCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/BlockGroupingCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_418a7963] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;IZLorg/apache/lucene/search/Filter;)V");
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_getTopGroups_79cd6253] = env->getMethodID(cls, "getTopGroups", "(Lorg/apache/lucene/search/Sort;IIIZ)Lorg/apache/lucene/search/grouping/TopGroups;");
              mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
              mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockGroupingCollector::BlockGroupingCollector(const ::org::apache::lucene::search::Sort & a0, jint a1, jboolean a2, const ::org::apache::lucene::search::Filter & a3) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_418a7963, a0.this$, a1, a2, a3.this$)) {}

          jboolean BlockGroupingCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void BlockGroupingCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          ::org::apache::lucene::search::grouping::TopGroups BlockGroupingCollector::getTopGroups(const ::org::apache::lucene::search::Sort & a0, jint a1, jint a2, jint a3, jboolean a4) const
          {
            return ::org::apache::lucene::search::grouping::TopGroups(env->callObjectMethod(this$, mids$[mid_getTopGroups_79cd6253], a0.this$, a1, a2, a3, a4));
          }

          void BlockGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
          }

          void BlockGroupingCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_BlockGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockGroupingCollector_init_(t_BlockGroupingCollector *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockGroupingCollector_acceptsDocsOutOfOrder(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_collect(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_getTopGroups(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_setNextReader(t_BlockGroupingCollector *self, PyObject *args);
          static PyObject *t_BlockGroupingCollector_setScorer(t_BlockGroupingCollector *self, PyObject *args);
          static int t_BlockGroupingCollector_set__nextReader(t_BlockGroupingCollector *self, PyObject *arg, void *data);
          static int t_BlockGroupingCollector_set__scorer(t_BlockGroupingCollector *self, PyObject *arg, void *data);
          static PyGetSetDef t_BlockGroupingCollector__fields_[] = {
            DECLARE_SET_FIELD(t_BlockGroupingCollector, nextReader),
            DECLARE_SET_FIELD(t_BlockGroupingCollector, scorer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BlockGroupingCollector__methods_[] = {
            DECLARE_METHOD(t_BlockGroupingCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockGroupingCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockGroupingCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, getTopGroups, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, setNextReader, METH_VARARGS),
            DECLARE_METHOD(t_BlockGroupingCollector, setScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockGroupingCollector, t_BlockGroupingCollector, ::org::apache::lucene::search::Collector, BlockGroupingCollector, t_BlockGroupingCollector_init_, 0, 0, t_BlockGroupingCollector__fields_, 0, 0);

          void t_BlockGroupingCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockGroupingCollector), module, "BlockGroupingCollector", 0);
          }

          void t_BlockGroupingCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockGroupingCollector).tp_dict, "class_", make_descriptor(BlockGroupingCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_BlockGroupingCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockGroupingCollector::initializeClass, 1)))
              return NULL;
            return t_BlockGroupingCollector::wrap_Object(BlockGroupingCollector(((t_BlockGroupingCollector *) arg)->object.this$));
          }
          static PyObject *t_BlockGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockGroupingCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockGroupingCollector_init_(t_BlockGroupingCollector *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            jboolean a2;
            ::org::apache::lucene::search::Filter a3((jobject) NULL);
            BlockGroupingCollector object((jobject) NULL);

            if (!parseArgs(args, "kIZk", ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = BlockGroupingCollector(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockGroupingCollector_acceptsDocsOutOfOrder(t_BlockGroupingCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_BlockGroupingCollector_collect(t_BlockGroupingCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_BlockGroupingCollector_getTopGroups(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Sort a0((jobject) NULL);
            jint a1;
            jint a2;
            jint a3;
            jboolean a4;
            ::org::apache::lucene::search::grouping::TopGroups result((jobject) NULL);

            if (!parseArgs(args, "kIIIZ", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.getTopGroups(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::search::grouping::t_TopGroups::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTopGroups", args);
            return NULL;
          }

          static PyObject *t_BlockGroupingCollector_setNextReader(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setNextReader(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
          }

          static PyObject *t_BlockGroupingCollector_setScorer(t_BlockGroupingCollector *self, PyObject *args)
          {
            ::org::apache::lucene::search::Scorer a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setScorer(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockGroupingCollector), (PyObject *) self, "setScorer", args, 2);
          }

          static int t_BlockGroupingCollector_set__nextReader(t_BlockGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
              {
                INT_CALL(self->object.setNextReader(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
            return -1;
          }

          static int t_BlockGroupingCollector_set__scorer(t_BlockGroupingCollector *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "scorer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *CompoundWordTokenFilterBase::class$ = NULL;
          jmethodID *CompoundWordTokenFilterBase::mids$ = NULL;
          bool CompoundWordTokenFilterBase::live$ = false;
          jint CompoundWordTokenFilterBase::DEFAULT_MAX_SUBWORD_SIZE = (jint) 0;
          jint CompoundWordTokenFilterBase::DEFAULT_MIN_SUBWORD_SIZE = (jint) 0;
          jint CompoundWordTokenFilterBase::DEFAULT_MIN_WORD_SIZE = (jint) 0;

          jclass CompoundWordTokenFilterBase::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase");

              mids$ = new jmethodID[max_mid];
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_SUBWORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_SUBWORD_SIZE");
              DEFAULT_MIN_SUBWORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_SUBWORD_SIZE");
              DEFAULT_MIN_WORD_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_WORD_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean CompoundWordTokenFilterBase::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CompoundWordTokenFilterBase::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_CompoundWordTokenFilterBase_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompoundWordTokenFilterBase_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompoundWordTokenFilterBase_incrementToken(t_CompoundWordTokenFilterBase *self, PyObject *args);
          static PyObject *t_CompoundWordTokenFilterBase_reset(t_CompoundWordTokenFilterBase *self, PyObject *args);

          static PyMethodDef t_CompoundWordTokenFilterBase__methods_[] = {
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CompoundWordTokenFilterBase, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompoundWordTokenFilterBase, t_CompoundWordTokenFilterBase, ::org::apache::lucene::analysis::TokenFilter, CompoundWordTokenFilterBase, abstract_init, 0, 0, 0, 0, 0);

          void t_CompoundWordTokenFilterBase::install(PyObject *module)
          {
            installType(&PY_TYPE(CompoundWordTokenFilterBase), module, "CompoundWordTokenFilterBase", 0);
          }

          void t_CompoundWordTokenFilterBase::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "class_", make_descriptor(CompoundWordTokenFilterBase::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "wrapfn_", make_descriptor(t_CompoundWordTokenFilterBase::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CompoundWordTokenFilterBase::initializeClass);
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MAX_SUBWORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MAX_SUBWORD_SIZE));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MIN_SUBWORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MIN_SUBWORD_SIZE));
            PyDict_SetItemString(PY_TYPE(CompoundWordTokenFilterBase).tp_dict, "DEFAULT_MIN_WORD_SIZE", make_descriptor(CompoundWordTokenFilterBase::DEFAULT_MIN_WORD_SIZE));
          }

          static PyObject *t_CompoundWordTokenFilterBase_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompoundWordTokenFilterBase::initializeClass, 1)))
              return NULL;
            return t_CompoundWordTokenFilterBase::wrap_Object(CompoundWordTokenFilterBase(((t_CompoundWordTokenFilterBase *) arg)->object.this$));
          }
          static PyObject *t_CompoundWordTokenFilterBase_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompoundWordTokenFilterBase::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompoundWordTokenFilterBase_incrementToken(t_CompoundWordTokenFilterBase *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CompoundWordTokenFilterBase), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CompoundWordTokenFilterBase_reset(t_CompoundWordTokenFilterBase *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompoundWordTokenFilterBase), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *HyphenationCompoundWordTokenFilterFactory::class$ = NULL;
          jmethodID *HyphenationCompoundWordTokenFilterFactory::mids$ = NULL;
          bool HyphenationCompoundWordTokenFilterFactory::live$ = false;

          jclass HyphenationCompoundWordTokenFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_bdbb32a7] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenationCompoundWordTokenFilterFactory::HyphenationCompoundWordTokenFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter HyphenationCompoundWordTokenFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter(env->callObjectMethod(this$, mids$[mid_create_bdbb32a7], a0.this$));
          }

          void HyphenationCompoundWordTokenFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenationCompoundWordTokenFilterFactory_init_(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_create(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args);
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_inform(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *arg);

          static PyMethodDef t_HyphenationCompoundWordTokenFilterFactory__methods_[] = {
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenationCompoundWordTokenFilterFactory, t_HyphenationCompoundWordTokenFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, HyphenationCompoundWordTokenFilterFactory, t_HyphenationCompoundWordTokenFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_HyphenationCompoundWordTokenFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenationCompoundWordTokenFilterFactory), module, "HyphenationCompoundWordTokenFilterFactory", 0);
          }

          void t_HyphenationCompoundWordTokenFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilterFactory).tp_dict, "class_", make_descriptor(HyphenationCompoundWordTokenFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_HyphenationCompoundWordTokenFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenationCompoundWordTokenFilterFactory::initializeClass, 1)))
              return NULL;
            return t_HyphenationCompoundWordTokenFilterFactory::wrap_Object(HyphenationCompoundWordTokenFilterFactory(((t_HyphenationCompoundWordTokenFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenationCompoundWordTokenFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenationCompoundWordTokenFilterFactory_init_(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            HyphenationCompoundWordTokenFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = HyphenationCompoundWordTokenFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_create(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::compound::t_HyphenationCompoundWordTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(HyphenationCompoundWordTokenFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_HyphenationCompoundWordTokenFilterFactory_inform(t_HyphenationCompoundWordTokenFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40StoredFieldsReader::class$ = NULL;
          jmethodID *Lucene40StoredFieldsReader::mids$ = NULL;
          bool Lucene40StoredFieldsReader::live$ = false;

          jclass Lucene40StoredFieldsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3589180f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_2f3580b7] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_rawDocs_1a4b1309] = env->getMethodID(cls, "rawDocs", "([III)Lorg/apache/lucene/store/IndexInput;");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_visitDocument_a2ea3ebe] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40StoredFieldsReader::Lucene40StoredFieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) : ::org::apache::lucene::codecs::StoredFieldsReader(env->newObject(initializeClass, &mids$, mid_init$_3589180f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          void Lucene40StoredFieldsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          Lucene40StoredFieldsReader Lucene40StoredFieldsReader::clone() const
          {
            return Lucene40StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_2f3580b7]));
          }

          void Lucene40StoredFieldsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jlong Lucene40StoredFieldsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          ::org::apache::lucene::store::IndexInput Lucene40StoredFieldsReader::rawDocs(const JArray< jint > & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_rawDocs_1a4b1309], a0.this$, a1, a2));
          }

          jint Lucene40StoredFieldsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          void Lucene40StoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_visitDocument_a2ea3ebe], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40StoredFieldsReader_init_(t_Lucene40StoredFieldsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40StoredFieldsReader_checkIntegrity(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_clone(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_close(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_ramBytesUsed(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_rawDocs(t_Lucene40StoredFieldsReader *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsReader_size(t_Lucene40StoredFieldsReader *self);
          static PyObject *t_Lucene40StoredFieldsReader_visitDocument(t_Lucene40StoredFieldsReader *self, PyObject *args);

          static PyMethodDef t_Lucene40StoredFieldsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, rawDocs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, size, METH_NOARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsReader, visitDocument, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40StoredFieldsReader, t_Lucene40StoredFieldsReader, ::org::apache::lucene::codecs::StoredFieldsReader, Lucene40StoredFieldsReader, t_Lucene40StoredFieldsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40StoredFieldsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40StoredFieldsReader), module, "Lucene40StoredFieldsReader", 0);
          }

          void t_Lucene40StoredFieldsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsReader).tp_dict, "class_", make_descriptor(Lucene40StoredFieldsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40StoredFieldsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40StoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40StoredFieldsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40StoredFieldsReader::wrap_Object(Lucene40StoredFieldsReader(((t_Lucene40StoredFieldsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40StoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40StoredFieldsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40StoredFieldsReader_init_(t_Lucene40StoredFieldsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            Lucene40StoredFieldsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = Lucene40StoredFieldsReader(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40StoredFieldsReader_checkIntegrity(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_clone(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            Lucene40StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_Lucene40StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_close(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_ramBytesUsed(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsReader_rawDocs(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            JArray< jint > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::store::IndexInput result((jobject) NULL);

            if (!parseArgs(args, "[III", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.rawDocs(a0, a1, a2));
              return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "rawDocs", args);
            return NULL;
          }

          static PyObject *t_Lucene40StoredFieldsReader_size(t_Lucene40StoredFieldsReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Lucene40StoredFieldsReader_visitDocument(t_Lucene40StoredFieldsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.visitDocument(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsReader), (PyObject *) self, "visitDocument", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermRangeFilter.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermRangeFilter::class$ = NULL;
        jmethodID *TermRangeFilter::mids$ = NULL;
        bool TermRangeFilter::live$ = false;

        jclass TermRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3423b66] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)V");
            mids$[mid_Less_b14e87bd] = env->getStaticMethodID(cls, "Less", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/search/TermRangeFilter;");
            mids$[mid_More_b14e87bd] = env->getStaticMethodID(cls, "More", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/search/TermRangeFilter;");
            mids$[mid_getLowerTerm_4ae19461] = env->getMethodID(cls, "getLowerTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getUpperTerm_4ae19461] = env->getMethodID(cls, "getUpperTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newStringRange_f9802b7d] = env->getStaticMethodID(cls, "newStringRange", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/TermRangeFilter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermRangeFilter::TermRangeFilter(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::search::MultiTermQueryWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_d3423b66, a0.this$, a1.this$, a2.this$, a3, a4)) {}

        TermRangeFilter TermRangeFilter::Less(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_Less_b14e87bd], a0.this$, a1.this$));
        }

        TermRangeFilter TermRangeFilter::More(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_More_b14e87bd], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::BytesRef TermRangeFilter::getLowerTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getLowerTerm_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef TermRangeFilter::getUpperTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getUpperTerm_4ae19461]));
        }

        jboolean TermRangeFilter::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean TermRangeFilter::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        TermRangeFilter TermRangeFilter::newStringRange(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newStringRange_f9802b7d], a0.this$, a1.this$, a2.this$, a3, a4));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeFilter_of_(t_TermRangeFilter *self, PyObject *args);
        static int t_TermRangeFilter_init_(t_TermRangeFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermRangeFilter_Less(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeFilter_More(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeFilter_getLowerTerm(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_getUpperTerm(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_includesLower(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_includesUpper(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_newStringRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeFilter_get__lowerTerm(t_TermRangeFilter *self, void *data);
        static PyObject *t_TermRangeFilter_get__upperTerm(t_TermRangeFilter *self, void *data);
        static PyObject *t_TermRangeFilter_get__parameters_(t_TermRangeFilter *self, void *data);
        static PyGetSetDef t_TermRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_TermRangeFilter, lowerTerm),
          DECLARE_GET_FIELD(t_TermRangeFilter, upperTerm),
          DECLARE_GET_FIELD(t_TermRangeFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermRangeFilter__methods_[] = {
          DECLARE_METHOD(t_TermRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_TermRangeFilter, Less, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, More, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, getLowerTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, getUpperTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, newStringRange, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermRangeFilter, t_TermRangeFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, TermRangeFilter, t_TermRangeFilter_init_, 0, 0, t_TermRangeFilter__fields_, 0, 0);
        PyObject *t_TermRangeFilter::wrap_Object(const TermRangeFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermRangeFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermRangeFilter *self = (t_TermRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TermRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermRangeFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermRangeFilter *self = (t_TermRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TermRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermRangeFilter), module, "TermRangeFilter", 0);
        }

        void t_TermRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermRangeFilter).tp_dict, "class_", make_descriptor(TermRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_TermRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermRangeFilter::initializeClass, 1)))
            return NULL;
          return t_TermRangeFilter::wrap_Object(TermRangeFilter(((t_TermRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_TermRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermRangeFilter_of_(t_TermRangeFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TermRangeFilter_init_(t_TermRangeFilter *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeFilter object((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = TermRangeFilter(a0, a1, a2, a3, a4));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(TermRangeQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermRangeFilter_Less(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          TermRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeFilter::Less(a0, a1));
            return t_TermRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "Less", args);
          return NULL;
        }

        static PyObject *t_TermRangeFilter_More(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          TermRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeFilter::More(a0, a1));
            return t_TermRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "More", args);
          return NULL;
        }

        static PyObject *t_TermRangeFilter_getLowerTerm(t_TermRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeFilter_getUpperTerm(t_TermRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeFilter_includesLower(t_TermRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeFilter_includesUpper(t_TermRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeFilter_newStringRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeFilter::newStringRange(a0, a1, a2, a3, a4));
            return t_TermRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newStringRange", args);
          return NULL;
        }
        static PyObject *t_TermRangeFilter_get__parameters_(t_TermRangeFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TermRangeFilter_get__lowerTerm(t_TermRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_TermRangeFilter_get__upperTerm(t_TermRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs.h"
#include "org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector.h"
#include "org/apache/lucene/search/TopDocsCollector.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractSecondPassGroupingCollector$SearchGroupDocs::class$ = NULL;
          jmethodID *AbstractSecondPassGroupingCollector$SearchGroupDocs::mids$ = NULL;
          jfieldID *AbstractSecondPassGroupingCollector$SearchGroupDocs::fids$ = NULL;
          bool AbstractSecondPassGroupingCollector$SearchGroupDocs::live$ = false;

          jclass AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector$SearchGroupDocs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b73e617c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector;Ljava/lang/Object;Lorg/apache/lucene/search/TopDocsCollector;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_collector] = env->getFieldID(cls, "collector", "Lorg/apache/lucene/search/TopDocsCollector;");
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractSecondPassGroupingCollector$SearchGroupDocs::AbstractSecondPassGroupingCollector$SearchGroupDocs(const ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector & a0, const ::java::lang::Object & a1, const ::org::apache::lucene::search::TopDocsCollector & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b73e617c, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::TopDocsCollector AbstractSecondPassGroupingCollector$SearchGroupDocs::_get_collector() const
          {
            return ::org::apache::lucene::search::TopDocsCollector(env->getObjectField(this$, fids$[fid_collector]));
          }

          ::java::lang::Object AbstractSecondPassGroupingCollector$SearchGroupDocs::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_of_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args);
          static int t_AbstractSecondPassGroupingCollector$SearchGroupDocs_init_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__collector(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data);
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__groupValue(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data);

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__parameters_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data);
          static PyGetSetDef t_AbstractSecondPassGroupingCollector$SearchGroupDocs__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, collector),
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, groupValue),
            DECLARE_GET_FIELD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractSecondPassGroupingCollector$SearchGroupDocs__methods_[] = {
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSecondPassGroupingCollector$SearchGroupDocs, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs, t_AbstractSecondPassGroupingCollector$SearchGroupDocs, ::java::lang::Object, AbstractSecondPassGroupingCollector$SearchGroupDocs, t_AbstractSecondPassGroupingCollector$SearchGroupDocs_init_, 0, 0, t_AbstractSecondPassGroupingCollector$SearchGroupDocs__fields_, 0, 0);
          PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_Object(const AbstractSecondPassGroupingCollector$SearchGroupDocs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self = (t_AbstractSecondPassGroupingCollector$SearchGroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self = (t_AbstractSecondPassGroupingCollector$SearchGroupDocs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractSecondPassGroupingCollector$SearchGroupDocs::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs), module, "AbstractSecondPassGroupingCollector$SearchGroupDocs", 0);
          }

          void t_AbstractSecondPassGroupingCollector$SearchGroupDocs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs).tp_dict, "class_", make_descriptor(AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs).tp_dict, "wrapfn_", make_descriptor(t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractSecondPassGroupingCollector$SearchGroupDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass, 1)))
              return NULL;
            return t_AbstractSecondPassGroupingCollector$SearchGroupDocs::wrap_Object(AbstractSecondPassGroupingCollector$SearchGroupDocs(((t_AbstractSecondPassGroupingCollector$SearchGroupDocs *) arg)->object.this$));
          }
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractSecondPassGroupingCollector$SearchGroupDocs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_of_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractSecondPassGroupingCollector$SearchGroupDocs_init_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::Object a1((jobject) NULL);
            ::org::apache::lucene::search::TopDocsCollector a2((jobject) NULL);
            PyTypeObject **p2;
            AbstractSecondPassGroupingCollector$SearchGroupDocs object((jobject) NULL);

            if (!parseArgs(args, "KoK", ::org::apache::lucene::search::grouping::AbstractSecondPassGroupingCollector::initializeClass, ::org::apache::lucene::search::TopDocsCollector::initializeClass, &a0, &p0, ::org::apache::lucene::search::grouping::t_AbstractSecondPassGroupingCollector::parameters_, &a1, &a2, &p2, ::org::apache::lucene::search::t_TopDocsCollector::parameters_))
            {
              INT_CALL(object = AbstractSecondPassGroupingCollector$SearchGroupDocs(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__parameters_(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__collector(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data)
          {
            ::org::apache::lucene::search::TopDocsCollector value((jobject) NULL);
            OBJ_CALL(value = self->object._get_collector());
            return ::org::apache::lucene::search::t_TopDocsCollector::wrap_Object(value);
          }

          static PyObject *t_AbstractSecondPassGroupingCollector$SearchGroupDocs_get__groupValue(t_AbstractSecondPassGroupingCollector$SearchGroupDocs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Ints.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Ints::class$ = NULL;
        jmethodID *FieldCache$Ints::mids$ = NULL;
        bool FieldCache$Ints::live$ = false;
        FieldCache$Ints *FieldCache$Ints::EMPTY = NULL;

        jclass FieldCache$Ints::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Ints");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd23] = env->getMethodID(cls, "get", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Ints(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Ints;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Ints::FieldCache$Ints() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint FieldCache$Ints::get(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_get_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Ints_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Ints_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Ints_init_(t_FieldCache$Ints *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Ints_get(t_FieldCache$Ints *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Ints__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Ints, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Ints, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Ints, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Ints, t_FieldCache$Ints, ::java::lang::Object, FieldCache$Ints, t_FieldCache$Ints_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Ints::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Ints), module, "FieldCache$Ints", 0);
        }

        void t_FieldCache$Ints::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "class_", make_descriptor(FieldCache$Ints::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Ints::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Ints::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Ints::wrap_Object(*FieldCache$Ints::EMPTY)));
        }

        static PyObject *t_FieldCache$Ints_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Ints::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Ints::wrap_Object(FieldCache$Ints(((t_FieldCache$Ints *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Ints_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Ints::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Ints_init_(t_FieldCache$Ints *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Ints object((jobject) NULL);

          INT_CALL(object = FieldCache$Ints());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Ints_get(t_FieldCache$Ints *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FilterCodec.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FilterCodec::class$ = NULL;
        jmethodID *FilterCodec::mids$ = NULL;
        bool FilterCodec::live$ = false;

        jclass FilterCodec::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FilterCodec");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
            mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
            mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
            mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
            mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
            mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::DocValuesFormat FilterCodec::docValuesFormat() const
        {
          return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
        }

        ::org::apache::lucene::codecs::FieldInfosFormat FilterCodec::fieldInfosFormat() const
        {
          return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
        }

        ::org::apache::lucene::codecs::LiveDocsFormat FilterCodec::liveDocsFormat() const
        {
          return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
        }

        ::org::apache::lucene::codecs::NormsFormat FilterCodec::normsFormat() const
        {
          return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
        }

        ::org::apache::lucene::codecs::PostingsFormat FilterCodec::postingsFormat() const
        {
          return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
        }

        ::org::apache::lucene::codecs::SegmentInfoFormat FilterCodec::segmentInfoFormat() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
        }

        ::org::apache::lucene::codecs::StoredFieldsFormat FilterCodec::storedFieldsFormat() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
        }

        ::org::apache::lucene::codecs::TermVectorsFormat FilterCodec::termVectorsFormat() const
        {
          return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FilterCodec_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterCodec_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterCodec_docValuesFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_fieldInfosFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_liveDocsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_normsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_postingsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_segmentInfoFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_storedFieldsFormat(t_FilterCodec *self, PyObject *args);
        static PyObject *t_FilterCodec_termVectorsFormat(t_FilterCodec *self, PyObject *args);

        static PyMethodDef t_FilterCodec__methods_[] = {
          DECLARE_METHOD(t_FilterCodec, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterCodec, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterCodec, docValuesFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, fieldInfosFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, liveDocsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, normsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, postingsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, segmentInfoFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, storedFieldsFormat, METH_VARARGS),
          DECLARE_METHOD(t_FilterCodec, termVectorsFormat, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterCodec, t_FilterCodec, ::org::apache::lucene::codecs::Codec, FilterCodec, abstract_init, 0, 0, 0, 0, 0);

        void t_FilterCodec::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterCodec), module, "FilterCodec", 0);
        }

        void t_FilterCodec::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterCodec).tp_dict, "class_", make_descriptor(FilterCodec::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterCodec).tp_dict, "wrapfn_", make_descriptor(t_FilterCodec::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterCodec).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterCodec_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterCodec::initializeClass, 1)))
            return NULL;
          return t_FilterCodec::wrap_Object(FilterCodec(((t_FilterCodec *) arg)->object.this$));
        }
        static PyObject *t_FilterCodec_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterCodec::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FilterCodec_docValuesFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docValuesFormat());
            return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "docValuesFormat", args, 2);
        }

        static PyObject *t_FilterCodec_fieldInfosFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fieldInfosFormat());
            return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "fieldInfosFormat", args, 2);
        }

        static PyObject *t_FilterCodec_liveDocsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.liveDocsFormat());
            return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "liveDocsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_normsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.normsFormat());
            return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "normsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_postingsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.postingsFormat());
            return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "postingsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_segmentInfoFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.segmentInfoFormat());
            return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "segmentInfoFormat", args, 2);
        }

        static PyObject *t_FilterCodec_storedFieldsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.storedFieldsFormat());
            return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "storedFieldsFormat", args, 2);
        }

        static PyObject *t_FilterCodec_termVectorsFormat(t_FilterCodec *self, PyObject *args)
        {
          ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.termVectorsFormat());
            return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterCodec), (PyObject *) self, "termVectorsFormat", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene3x/Lucene3xCodec.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/Class.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {

          ::java::lang::Class *Lucene3xCodec::class$ = NULL;
          jmethodID *Lucene3xCodec::mids$ = NULL;
          bool Lucene3xCodec::live$ = false;

          jclass Lucene3xCodec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene3x/Lucene3xCodec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocStoreFiles_e7e0a956] = env->getStaticMethodID(cls, "getDocStoreFiles", "(Lorg/apache/lucene/index/SegmentInfo;)Ljava/util/Set;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene3xCodec::Lucene3xCodec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene3xCodec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene3xCodec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::java::util::Set Lucene3xCodec::getDocStoreFiles(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_getDocStoreFiles_e7e0a956], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene3xCodec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene3xCodec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene3xCodec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene3xCodec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene3xCodec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene3xCodec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {
          static PyObject *t_Lucene3xCodec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xCodec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene3xCodec_init_(t_Lucene3xCodec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene3xCodec_docValuesFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_fieldInfosFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_getDocStoreFiles(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xCodec_liveDocsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_normsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_postingsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_segmentInfoFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_storedFieldsFormat(t_Lucene3xCodec *self, PyObject *args);
          static PyObject *t_Lucene3xCodec_termVectorsFormat(t_Lucene3xCodec *self, PyObject *args);

          static PyMethodDef t_Lucene3xCodec__methods_[] = {
            DECLARE_METHOD(t_Lucene3xCodec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xCodec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xCodec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, getDocStoreFiles, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xCodec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xCodec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene3xCodec, t_Lucene3xCodec, ::org::apache::lucene::codecs::Codec, Lucene3xCodec, t_Lucene3xCodec_init_, 0, 0, 0, 0, 0);

          void t_Lucene3xCodec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene3xCodec), module, "Lucene3xCodec", 0);
          }

          void t_Lucene3xCodec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene3xCodec).tp_dict, "class_", make_descriptor(Lucene3xCodec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene3xCodec).tp_dict, "wrapfn_", make_descriptor(t_Lucene3xCodec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene3xCodec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene3xCodec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene3xCodec::initializeClass, 1)))
              return NULL;
            return t_Lucene3xCodec::wrap_Object(Lucene3xCodec(((t_Lucene3xCodec *) arg)->object.this$));
          }
          static PyObject *t_Lucene3xCodec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene3xCodec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene3xCodec_init_(t_Lucene3xCodec *self, PyObject *args, PyObject *kwds)
          {
            Lucene3xCodec object((jobject) NULL);

            INT_CALL(object = Lucene3xCodec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene3xCodec_docValuesFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_fieldInfosFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_getDocStoreFiles(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            ::java::util::Set result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xCodec::getDocStoreFiles(a0));
              return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError(type, "getDocStoreFiles", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xCodec_liveDocsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_normsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_postingsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_segmentInfoFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_storedFieldsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene3xCodec_termVectorsFormat(t_Lucene3xCodec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xCodec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergePolicy$MergeAbortedException::class$ = NULL;
        jmethodID *MergePolicy$MergeAbortedException::mids$ = NULL;
        bool MergePolicy$MergeAbortedException::live$ = false;

        jclass MergePolicy$MergeAbortedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergePolicy$MergeAbortedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergePolicy$MergeAbortedException::MergePolicy$MergeAbortedException() : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        MergePolicy$MergeAbortedException::MergePolicy$MergeAbortedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergePolicy$MergeAbortedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergePolicy$MergeAbortedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergePolicy$MergeAbortedException_init_(t_MergePolicy$MergeAbortedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_MergePolicy$MergeAbortedException__methods_[] = {
          DECLARE_METHOD(t_MergePolicy$MergeAbortedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergePolicy$MergeAbortedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergePolicy$MergeAbortedException, t_MergePolicy$MergeAbortedException, ::java::io::IOException, MergePolicy$MergeAbortedException, t_MergePolicy$MergeAbortedException_init_, 0, 0, 0, 0, 0);

        void t_MergePolicy$MergeAbortedException::install(PyObject *module)
        {
          installType(&PY_TYPE(MergePolicy$MergeAbortedException), module, "MergePolicy$MergeAbortedException", 0);
        }

        void t_MergePolicy$MergeAbortedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeAbortedException).tp_dict, "class_", make_descriptor(MergePolicy$MergeAbortedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeAbortedException).tp_dict, "wrapfn_", make_descriptor(t_MergePolicy$MergeAbortedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergePolicy$MergeAbortedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergePolicy$MergeAbortedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergePolicy$MergeAbortedException::initializeClass, 1)))
            return NULL;
          return t_MergePolicy$MergeAbortedException::wrap_Object(MergePolicy$MergeAbortedException(((t_MergePolicy$MergeAbortedException *) arg)->object.this$));
        }
        static PyObject *t_MergePolicy$MergeAbortedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergePolicy$MergeAbortedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergePolicy$MergeAbortedException_init_(t_MergePolicy$MergeAbortedException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              MergePolicy$MergeAbortedException object((jobject) NULL);

              INT_CALL(object = MergePolicy$MergeAbortedException());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              MergePolicy$MergeAbortedException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = MergePolicy$MergeAbortedException(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/LongDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *LongDocValues::class$ = NULL;
            jmethodID *LongDocValues::mids$ = NULL;
            bool LongDocValues::live$ = false;

            jclass LongDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/LongDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_externalToLong_5fdc3f54] = env->getMethodID(cls, "externalToLong", "(Ljava/lang/String;)J");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LongDocValues::LongDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jboolean LongDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jbyte LongDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble LongDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat LongDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer LongDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller LongDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint LongDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong LongDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object LongDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort LongDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String LongDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String LongDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_LongDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LongDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LongDocValues_init_(t_LongDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LongDocValues_boolVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_byteVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_doubleVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_floatVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_getRangeScorer(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_getValueFiller(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_intVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_longVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_objectVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_shortVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_strVal(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_toString(t_LongDocValues *self, PyObject *args);
            static PyObject *t_LongDocValues_get__valueFiller(t_LongDocValues *self, void *data);
            static PyGetSetDef t_LongDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_LongDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LongDocValues__methods_[] = {
              DECLARE_METHOD(t_LongDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_LongDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LongDocValues, t_LongDocValues, ::org::apache::lucene::queries::function::FunctionValues, LongDocValues, t_LongDocValues_init_, 0, 0, t_LongDocValues__fields_, 0, 0);

            void t_LongDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(LongDocValues), module, "LongDocValues", 0);
            }

            void t_LongDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LongDocValues).tp_dict, "class_", make_descriptor(LongDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LongDocValues).tp_dict, "wrapfn_", make_descriptor(t_LongDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LongDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LongDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LongDocValues::initializeClass, 1)))
                return NULL;
              return t_LongDocValues::wrap_Object(LongDocValues(((t_LongDocValues *) arg)->object.this$));
            }
            static PyObject *t_LongDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LongDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LongDocValues_init_(t_LongDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              LongDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = LongDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LongDocValues_boolVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_LongDocValues_byteVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_LongDocValues_doubleVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_LongDocValues_floatVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_LongDocValues_getRangeScorer(t_LongDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_LongDocValues_getValueFiller(t_LongDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_LongDocValues_intVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_LongDocValues_longVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_LongDocValues_objectVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_LongDocValues_shortVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_LongDocValues_strVal(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_LongDocValues_toString(t_LongDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LongDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_LongDocValues_get__valueFiller(t_LongDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/GrowableByteArrayDataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *GrowableByteArrayDataOutput::class$ = NULL;
        jmethodID *GrowableByteArrayDataOutput::mids$ = NULL;
        jfieldID *GrowableByteArrayDataOutput::fids$ = NULL;
        bool GrowableByteArrayDataOutput::live$ = false;

        jclass GrowableByteArrayDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/GrowableByteArrayDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_bytes] = env->getFieldID(cls, "bytes", "[B");
            fids$[fid_length] = env->getFieldID(cls, "length", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        GrowableByteArrayDataOutput::GrowableByteArrayDataOutput(jint a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        void GrowableByteArrayDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void GrowableByteArrayDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }

        JArray< jbyte > GrowableByteArrayDataOutput::_get_bytes() const
        {
          return JArray< jbyte >(env->getObjectField(this$, fids$[fid_bytes]));
        }

        void GrowableByteArrayDataOutput::_set_bytes(const JArray< jbyte > & a0) const
        {
          env->setObjectField(this$, fids$[fid_bytes], a0.this$);
        }

        jint GrowableByteArrayDataOutput::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void GrowableByteArrayDataOutput::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_GrowableByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_GrowableByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_GrowableByteArrayDataOutput_init_(t_GrowableByteArrayDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_GrowableByteArrayDataOutput_writeByte(t_GrowableByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_GrowableByteArrayDataOutput_writeBytes(t_GrowableByteArrayDataOutput *self, PyObject *args);
        static PyObject *t_GrowableByteArrayDataOutput_get__bytes(t_GrowableByteArrayDataOutput *self, void *data);
        static int t_GrowableByteArrayDataOutput_set__bytes(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data);
        static PyObject *t_GrowableByteArrayDataOutput_get__length(t_GrowableByteArrayDataOutput *self, void *data);
        static int t_GrowableByteArrayDataOutput_set__length(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data);

        static PyGetSetDef t_GrowableByteArrayDataOutput__fields_[] = {
          DECLARE_GETSET_FIELD(t_GrowableByteArrayDataOutput, bytes),
          DECLARE_GETSET_FIELD(t_GrowableByteArrayDataOutput, length),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_GrowableByteArrayDataOutput__methods_[] = {
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_GrowableByteArrayDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(GrowableByteArrayDataOutput, t_GrowableByteArrayDataOutput, ::org::apache::lucene::store::DataOutput, GrowableByteArrayDataOutput, t_GrowableByteArrayDataOutput_init_, 0, 0, t_GrowableByteArrayDataOutput__fields_, 0, 0);

        void t_GrowableByteArrayDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(GrowableByteArrayDataOutput), module, "GrowableByteArrayDataOutput", 0);
        }

        void t_GrowableByteArrayDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(GrowableByteArrayDataOutput).tp_dict, "class_", make_descriptor(GrowableByteArrayDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(GrowableByteArrayDataOutput).tp_dict, "wrapfn_", make_descriptor(t_GrowableByteArrayDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(GrowableByteArrayDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_GrowableByteArrayDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, GrowableByteArrayDataOutput::initializeClass, 1)))
            return NULL;
          return t_GrowableByteArrayDataOutput::wrap_Object(GrowableByteArrayDataOutput(((t_GrowableByteArrayDataOutput *) arg)->object.this$));
        }
        static PyObject *t_GrowableByteArrayDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, GrowableByteArrayDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_GrowableByteArrayDataOutput_init_(t_GrowableByteArrayDataOutput *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          GrowableByteArrayDataOutput object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = GrowableByteArrayDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_GrowableByteArrayDataOutput_writeByte(t_GrowableByteArrayDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(GrowableByteArrayDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_GrowableByteArrayDataOutput_writeBytes(t_GrowableByteArrayDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(GrowableByteArrayDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }

        static PyObject *t_GrowableByteArrayDataOutput_get__bytes(t_GrowableByteArrayDataOutput *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_bytes());
          return value.wrap();
        }
        static int t_GrowableByteArrayDataOutput_set__bytes(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          if (!parseArg(arg, "[B", &value))
          {
            INT_CALL(self->object._set_bytes(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "bytes", arg);
          return -1;
        }

        static PyObject *t_GrowableByteArrayDataOutput_get__length(t_GrowableByteArrayDataOutput *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_GrowableByteArrayDataOutput_set__length(t_GrowableByteArrayDataOutput *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/BytesRefHash.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap::class$ = NULL;
          jmethodID *SynonymMap::mids$ = NULL;
          jfieldID *SynonymMap::fids$ = NULL;
          bool SynonymMap::live$ = false;
          jchar SynonymMap::WORD_SEPARATOR = (jchar) 0;

          jclass SynonymMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4abf6d88] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;Lorg/apache/lucene/util/BytesRefHash;I)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_fst] = env->getFieldID(cls, "fst", "Lorg/apache/lucene/util/fst/FST;");
              fids$[fid_maxHorizontalContext] = env->getFieldID(cls, "maxHorizontalContext", "I");
              fids$[fid_words] = env->getFieldID(cls, "words", "Lorg/apache/lucene/util/BytesRefHash;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              WORD_SEPARATOR = env->getStaticCharField(cls, "WORD_SEPARATOR");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap::SynonymMap(const ::org::apache::lucene::util::fst::FST & a0, const ::org::apache::lucene::util::BytesRefHash & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4abf6d88, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::util::fst::FST SynonymMap::_get_fst() const
          {
            return ::org::apache::lucene::util::fst::FST(env->getObjectField(this$, fids$[fid_fst]));
          }

          jint SynonymMap::_get_maxHorizontalContext() const
          {
            return env->getIntField(this$, fids$[fid_maxHorizontalContext]);
          }

          ::org::apache::lucene::util::BytesRefHash SynonymMap::_get_words() const
          {
            return ::org::apache::lucene::util::BytesRefHash(env->getObjectField(this$, fids$[fid_words]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Parser.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap_init_(t_SynonymMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap_get__fst(t_SynonymMap *self, void *data);
          static PyObject *t_SynonymMap_get__maxHorizontalContext(t_SynonymMap *self, void *data);
          static PyObject *t_SynonymMap_get__words(t_SynonymMap *self, void *data);

          static PyGetSetDef t_SynonymMap__fields_[] = {
            DECLARE_GET_FIELD(t_SynonymMap, fst),
            DECLARE_GET_FIELD(t_SynonymMap, maxHorizontalContext),
            DECLARE_GET_FIELD(t_SynonymMap, words),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SynonymMap__methods_[] = {
            DECLARE_METHOD(t_SynonymMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymMap, t_SynonymMap, ::java::lang::Object, SynonymMap, t_SynonymMap_init_, 0, 0, t_SynonymMap__fields_, 0, 0);

          void t_SynonymMap::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap), module, "SynonymMap", 0);
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "Parser", make_descriptor(&PY_TYPE(SynonymMap$Parser)));
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "Builder", make_descriptor(&PY_TYPE(SynonymMap$Builder)));
          }

          void t_SynonymMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "class_", make_descriptor(SynonymMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "wrapfn_", make_descriptor(t_SynonymMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SynonymMap::initializeClass);
            PyDict_SetItemString(PY_TYPE(SynonymMap).tp_dict, "WORD_SEPARATOR", make_descriptor(SynonymMap::WORD_SEPARATOR));
          }

          static PyObject *t_SynonymMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap::initializeClass, 1)))
              return NULL;
            return t_SynonymMap::wrap_Object(SynonymMap(((t_SynonymMap *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap_init_(t_SynonymMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::BytesRefHash a1((jobject) NULL);
            jint a2;
            SynonymMap object((jobject) NULL);

            if (!parseArgs(args, "KkI", ::org::apache::lucene::util::fst::FST::initializeClass, ::org::apache::lucene::util::BytesRefHash::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2))
            {
              INT_CALL(object = SynonymMap(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap_get__fst(t_SynonymMap *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST value((jobject) NULL);
            OBJ_CALL(value = self->object._get_fst());
            return ::org::apache::lucene::util::fst::t_FST::wrap_Object(value);
          }

          static PyObject *t_SynonymMap_get__maxHorizontalContext(t_SynonymMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_maxHorizontalContext());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SynonymMap_get__words(t_SynonymMap *self, void *data)
          {
            ::org::apache::lucene::util::BytesRefHash value((jobject) NULL);
            OBJ_CALL(value = self->object._get_words());
            return ::org::apache::lucene::util::t_BytesRefHash::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *SegmentInfoReader::class$ = NULL;
        jmethodID *SegmentInfoReader::mids$ = NULL;
        bool SegmentInfoReader::live$ = false;

        jclass SegmentInfoReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/SegmentInfoReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::SegmentInfo SegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoReader_read(t_SegmentInfoReader *self, PyObject *args);

        static PyMethodDef t_SegmentInfoReader__methods_[] = {
          DECLARE_METHOD(t_SegmentInfoReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoReader, read, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfoReader, t_SegmentInfoReader, ::java::lang::Object, SegmentInfoReader, abstract_init, 0, 0, 0, 0, 0);

        void t_SegmentInfoReader::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfoReader), module, "SegmentInfoReader", 0);
        }

        void t_SegmentInfoReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfoReader).tp_dict, "class_", make_descriptor(SegmentInfoReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfoReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfoReader::initializeClass, 1)))
            return NULL;
          return t_SegmentInfoReader::wrap_Object(SegmentInfoReader(((t_SegmentInfoReader *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfoReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentInfoReader_read(t_SegmentInfoReader *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "read", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueDate.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueDate::class$ = NULL;
          jmethodID *MutableValueDate::mids$ = NULL;
          bool MutableValueDate::live$ = false;

          jclass MutableValueDate::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueDate");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueDate::MutableValueDate() : ::org::apache::lucene::util::mutable$::MutableValueLong(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueDate::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          ::java::lang::Object MutableValueDate::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueDate_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueDate_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueDate_init_(t_MutableValueDate *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueDate_duplicate(t_MutableValueDate *self, PyObject *args);
          static PyObject *t_MutableValueDate_toObject(t_MutableValueDate *self, PyObject *args);

          static PyMethodDef t_MutableValueDate__methods_[] = {
            DECLARE_METHOD(t_MutableValueDate, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDate, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueDate, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueDate, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueDate, t_MutableValueDate, ::org::apache::lucene::util::mutable$::MutableValueLong, MutableValueDate, t_MutableValueDate_init_, 0, 0, 0, 0, 0);

          void t_MutableValueDate::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueDate), module, "MutableValueDate", 0);
          }

          void t_MutableValueDate::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueDate).tp_dict, "class_", make_descriptor(MutableValueDate::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueDate).tp_dict, "wrapfn_", make_descriptor(t_MutableValueDate::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueDate).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueDate_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueDate::initializeClass, 1)))
              return NULL;
            return t_MutableValueDate::wrap_Object(MutableValueDate(((t_MutableValueDate *) arg)->object.this$));
          }
          static PyObject *t_MutableValueDate_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueDate::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueDate_init_(t_MutableValueDate *self, PyObject *args, PyObject *kwds)
          {
            MutableValueDate object((jobject) NULL);

            INT_CALL(object = MutableValueDate());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueDate_duplicate(t_MutableValueDate *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDate), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueDate_toObject(t_MutableValueDate *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueDate), (PyObject *) self, "toObject", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/SimpleAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *SimpleAnalyzer::class$ = NULL;
          jmethodID *SimpleAnalyzer::mids$ = NULL;
          bool SimpleAnalyzer::live$ = false;

          jclass SimpleAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/SimpleAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleAnalyzer::SimpleAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_SimpleAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleAnalyzer_init_(t_SimpleAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SimpleAnalyzer__methods_[] = {
            DECLARE_METHOD(t_SimpleAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleAnalyzer, t_SimpleAnalyzer, ::org::apache::lucene::analysis::Analyzer, SimpleAnalyzer, t_SimpleAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_SimpleAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleAnalyzer), module, "SimpleAnalyzer", 0);
          }

          void t_SimpleAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleAnalyzer).tp_dict, "class_", make_descriptor(SimpleAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_SimpleAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleAnalyzer::initializeClass, 1)))
              return NULL;
            return t_SimpleAnalyzer::wrap_Object(SimpleAnalyzer(((t_SimpleAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_SimpleAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleAnalyzer_init_(t_SimpleAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            SimpleAnalyzer object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
            {
              INT_CALL(object = SimpleAnalyzer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/util/Map.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *StemmerOverrideFilterFactory::class$ = NULL;
          jmethodID *StemmerOverrideFilterFactory::mids$ = NULL;
          bool StemmerOverrideFilterFactory::live$ = false;

          jclass StemmerOverrideFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/StemmerOverrideFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StemmerOverrideFilterFactory::StemmerOverrideFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream StemmerOverrideFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          void StemmerOverrideFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean StemmerOverrideFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_StemmerOverrideFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StemmerOverrideFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StemmerOverrideFilterFactory_init_(t_StemmerOverrideFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StemmerOverrideFilterFactory_create(t_StemmerOverrideFilterFactory *self, PyObject *args);
          static PyObject *t_StemmerOverrideFilterFactory_inform(t_StemmerOverrideFilterFactory *self, PyObject *arg);
          static PyObject *t_StemmerOverrideFilterFactory_isIgnoreCase(t_StemmerOverrideFilterFactory *self);
          static PyObject *t_StemmerOverrideFilterFactory_get__ignoreCase(t_StemmerOverrideFilterFactory *self, void *data);
          static PyGetSetDef t_StemmerOverrideFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_StemmerOverrideFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StemmerOverrideFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_StemmerOverrideFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StemmerOverrideFilterFactory, t_StemmerOverrideFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StemmerOverrideFilterFactory, t_StemmerOverrideFilterFactory_init_, 0, 0, t_StemmerOverrideFilterFactory__fields_, 0, 0);

          void t_StemmerOverrideFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StemmerOverrideFilterFactory), module, "StemmerOverrideFilterFactory", 0);
          }

          void t_StemmerOverrideFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilterFactory).tp_dict, "class_", make_descriptor(StemmerOverrideFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StemmerOverrideFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StemmerOverrideFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StemmerOverrideFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StemmerOverrideFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StemmerOverrideFilterFactory::wrap_Object(StemmerOverrideFilterFactory(((t_StemmerOverrideFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StemmerOverrideFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StemmerOverrideFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StemmerOverrideFilterFactory_init_(t_StemmerOverrideFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StemmerOverrideFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StemmerOverrideFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StemmerOverrideFilterFactory_create(t_StemmerOverrideFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StemmerOverrideFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_StemmerOverrideFilterFactory_inform(t_StemmerOverrideFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_StemmerOverrideFilterFactory_isIgnoreCase(t_StemmerOverrideFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_StemmerOverrideFilterFactory_get__ignoreCase(t_StemmerOverrideFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/range/RangeFacetCounts.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {

          ::java::lang::Class *RangeFacetCounts::class$ = NULL;
          jmethodID *RangeFacetCounts::mids$ = NULL;
          bool RangeFacetCounts::live$ = false;

          jclass RangeFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/range/RangeFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getAllDims_cdc2a528] = env->getMethodID(cls, "getAllDims", "(I)Ljava/util/List;");
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::List RangeFacetCounts::getAllDims(jint a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getAllDims_cdc2a528], a0));
          }

          ::java::lang::Number RangeFacetCounts::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult RangeFacetCounts::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace range {
          static PyObject *t_RangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RangeFacetCounts_getAllDims(t_RangeFacetCounts *self, PyObject *args);
          static PyObject *t_RangeFacetCounts_getSpecificValue(t_RangeFacetCounts *self, PyObject *args);
          static PyObject *t_RangeFacetCounts_getTopChildren(t_RangeFacetCounts *self, PyObject *args);

          static PyMethodDef t_RangeFacetCounts__methods_[] = {
            DECLARE_METHOD(t_RangeFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RangeFacetCounts, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RangeFacetCounts, getAllDims, METH_VARARGS),
            DECLARE_METHOD(t_RangeFacetCounts, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_RangeFacetCounts, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RangeFacetCounts, t_RangeFacetCounts, ::org::apache::lucene::facet::Facets, RangeFacetCounts, abstract_init, 0, 0, 0, 0, 0);

          void t_RangeFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(RangeFacetCounts), module, "RangeFacetCounts", 0);
          }

          void t_RangeFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RangeFacetCounts).tp_dict, "class_", make_descriptor(RangeFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RangeFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_RangeFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RangeFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_RangeFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RangeFacetCounts::initializeClass, 1)))
              return NULL;
            return t_RangeFacetCounts::wrap_Object(RangeFacetCounts(((t_RangeFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_RangeFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RangeFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_RangeFacetCounts_getAllDims(t_RangeFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.getAllDims(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetResult));
            }

            return callSuper(&PY_TYPE(RangeFacetCounts), (PyObject *) self, "getAllDims", args, 2);
          }

          static PyObject *t_RangeFacetCounts_getSpecificValue(t_RangeFacetCounts *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RangeFacetCounts), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_RangeFacetCounts_getTopChildren(t_RangeFacetCounts *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(RangeFacetCounts), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/QueryParserUtil.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {

            ::java::lang::Class *QueryParserUtil::class$ = NULL;
            jmethodID *QueryParserUtil::mids$ = NULL;
            bool QueryParserUtil::live$ = false;

            jclass QueryParserUtil::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/QueryParserUtil");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_escape_97a5258f] = env->getStaticMethodID(cls, "escape", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_parse_79a3f5c4] = env->getStaticMethodID(cls, "parse", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
                mids$[mid_parse_084a531a] = env->getStaticMethodID(cls, "parse", "([Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
                mids$[mid_parse_046ef74e] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserUtil::QueryParserUtil() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ::java::lang::String QueryParserUtil::escape(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_escape_97a5258f], a0.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_79a3f5c4], a0.this$, a1.this$, a2.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_084a531a], a0.this$, a1.this$, a2.this$, a3.this$));
            }

            ::org::apache::lucene::search::Query QueryParserUtil::parse(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_046ef74e], a0.this$, a1.this$, a2.this$, a3.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            static PyObject *t_QueryParserUtil_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserUtil_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserUtil_init_(t_QueryParserUtil *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserUtil_escape(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserUtil_parse(PyTypeObject *type, PyObject *args);

            static PyMethodDef t_QueryParserUtil__methods_[] = {
              DECLARE_METHOD(t_QueryParserUtil, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, escape, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserUtil, parse, METH_VARARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserUtil, t_QueryParserUtil, ::java::lang::Object, QueryParserUtil, t_QueryParserUtil_init_, 0, 0, 0, 0, 0);

            void t_QueryParserUtil::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserUtil), module, "QueryParserUtil", 0);
            }

            void t_QueryParserUtil::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserUtil).tp_dict, "class_", make_descriptor(QueryParserUtil::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserUtil).tp_dict, "wrapfn_", make_descriptor(t_QueryParserUtil::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParserUtil_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserUtil::initializeClass, 1)))
                return NULL;
              return t_QueryParserUtil::wrap_Object(QueryParserUtil(((t_QueryParserUtil *) arg)->object.this$));
            }
            static PyObject *t_QueryParserUtil_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserUtil::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserUtil_init_(t_QueryParserUtil *self, PyObject *args, PyObject *kwds)
            {
              QueryParserUtil object((jobject) NULL);

              INT_CALL(object = QueryParserUtil());
              self->object = object;

              return 0;
            }

            static PyObject *t_QueryParserUtil_escape(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::escape(a0));
                return j2p(result);
              }

              PyErr_SetArgsError(type, "escape", arg);
              return NULL;
            }

            static PyObject *t_QueryParserUtil_parse(PyTypeObject *type, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 3:
                {
                  JArray< ::java::lang::String > a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "[s[sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
                break;
               case 4:
                {
                  JArray< ::java::lang::String > a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  JArray< ::org::apache::lucene::search::BooleanClause$Occur > a2((jobject) NULL);
                  PyTypeObject **p2;
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "[s[s[Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2, a3));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::String > a1((jobject) NULL);
                  JArray< ::org::apache::lucene::search::BooleanClause$Occur > a2((jobject) NULL);
                  PyTypeObject **p2;
                  ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                  ::org::apache::lucene::search::Query result((jobject) NULL);

                  if (!parseArgs(args, "s[s[Kk", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a3))
                  {
                    OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::QueryParserUtil::parse(a0, a1, a2, a3));
                    return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                  }
                }
              }

              PyErr_SetArgsError(type, "parse", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexFormatTooOldException.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexFormatTooOldException::class$ = NULL;
        jmethodID *IndexFormatTooOldException::mids$ = NULL;
        bool IndexFormatTooOldException::live$ = false;

        jclass IndexFormatTooOldException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexFormatTooOldException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e6fb04e3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Ljava/lang/String;)V");
            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_9c112331] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;III)V");
            mids$[mid_init$_b8e753a2] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexFormatTooOldException::IndexFormatTooOldException(const ::org::apache::lucene::store::DataInput & a0, const ::java::lang::String & a1) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_e6fb04e3, a0.this$, a1.this$)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::org::apache::lucene::store::DataInput & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_9c112331, a0.this$, a1, a2, a3)) {}

        IndexFormatTooOldException::IndexFormatTooOldException(const ::java::lang::String & a0, jint a1, jint a2, jint a3) : ::org::apache::lucene::index::CorruptIndexException(env->newObject(initializeClass, &mids$, mid_init$_b8e753a2, a0.this$, a1, a2, a3)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexFormatTooOldException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexFormatTooOldException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexFormatTooOldException_init_(t_IndexFormatTooOldException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IndexFormatTooOldException__methods_[] = {
          DECLARE_METHOD(t_IndexFormatTooOldException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexFormatTooOldException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexFormatTooOldException, t_IndexFormatTooOldException, ::org::apache::lucene::index::CorruptIndexException, IndexFormatTooOldException, t_IndexFormatTooOldException_init_, 0, 0, 0, 0, 0);

        void t_IndexFormatTooOldException::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexFormatTooOldException), module, "IndexFormatTooOldException", 0);
        }

        void t_IndexFormatTooOldException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexFormatTooOldException).tp_dict, "class_", make_descriptor(IndexFormatTooOldException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooOldException).tp_dict, "wrapfn_", make_descriptor(t_IndexFormatTooOldException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexFormatTooOldException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexFormatTooOldException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexFormatTooOldException::initializeClass, 1)))
            return NULL;
          return t_IndexFormatTooOldException::wrap_Object(IndexFormatTooOldException(((t_IndexFormatTooOldException *) arg)->object.this$));
        }
        static PyObject *t_IndexFormatTooOldException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexFormatTooOldException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexFormatTooOldException_init_(t_IndexFormatTooOldException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "kIII", ::org::apache::lucene::store::DataInput::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              jint a2;
              jint a3;
              IndexFormatTooOldException object((jobject) NULL);

              if (!parseArgs(args, "sIII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IndexFormatTooOldException(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ModifierQueryNode$Modifier::class$ = NULL;
              jmethodID *ModifierQueryNode$Modifier::mids$ = NULL;
              bool ModifierQueryNode$Modifier::live$ = false;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_NONE = NULL;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_NOT = NULL;
              ModifierQueryNode$Modifier *ModifierQueryNode$Modifier::MOD_REQ = NULL;

              jclass ModifierQueryNode$Modifier::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_toDigitString_14c7b5c5] = env->getMethodID(cls, "toDigitString", "()Ljava/lang/String;");
                  mids$[mid_toLargeString_14c7b5c5] = env->getMethodID(cls, "toLargeString", "()Ljava/lang/String;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_valueOf_ceb5f083] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");
                  mids$[mid_values_05c3b6a9] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  MOD_NONE = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_NONE", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  MOD_NOT = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_NOT", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  MOD_REQ = new ModifierQueryNode$Modifier(env->getStaticObjectField(cls, "MOD_REQ", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::String ModifierQueryNode$Modifier::toDigitString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDigitString_14c7b5c5]));
              }

              ::java::lang::String ModifierQueryNode$Modifier::toLargeString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLargeString_14c7b5c5]));
              }

              ::java::lang::String ModifierQueryNode$Modifier::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              ModifierQueryNode$Modifier ModifierQueryNode$Modifier::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ModifierQueryNode$Modifier(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ceb5f083], a0.this$));
              }

              JArray< ModifierQueryNode$Modifier > ModifierQueryNode$Modifier::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< ModifierQueryNode$Modifier >(env->callStaticObjectMethod(cls, mids$[mid_values_05c3b6a9]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ModifierQueryNode$Modifier_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode$Modifier_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNode$Modifier_of_(t_ModifierQueryNode$Modifier *self, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_toDigitString(t_ModifierQueryNode$Modifier *self);
              static PyObject *t_ModifierQueryNode$Modifier_toLargeString(t_ModifierQueryNode$Modifier *self);
              static PyObject *t_ModifierQueryNode$Modifier_toString(t_ModifierQueryNode$Modifier *self, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_ModifierQueryNode$Modifier_values(PyTypeObject *type);
              static PyObject *t_ModifierQueryNode$Modifier_get__parameters_(t_ModifierQueryNode$Modifier *self, void *data);
              static PyGetSetDef t_ModifierQueryNode$Modifier__fields_[] = {
                DECLARE_GET_FIELD(t_ModifierQueryNode$Modifier, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ModifierQueryNode$Modifier__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, of_, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toDigitString, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toLargeString, METH_NOARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, toString, METH_VARARGS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNode$Modifier, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ModifierQueryNode$Modifier, t_ModifierQueryNode$Modifier, ::java::lang::Enum, ModifierQueryNode$Modifier, abstract_init, 0, 0, t_ModifierQueryNode$Modifier__fields_, 0, 0);
              PyObject *t_ModifierQueryNode$Modifier::wrap_Object(const ModifierQueryNode$Modifier& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ModifierQueryNode$Modifier::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ModifierQueryNode$Modifier *self = (t_ModifierQueryNode$Modifier *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ModifierQueryNode$Modifier::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ModifierQueryNode$Modifier::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ModifierQueryNode$Modifier *self = (t_ModifierQueryNode$Modifier *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ModifierQueryNode$Modifier::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNode$Modifier), module, "ModifierQueryNode$Modifier", 0);
              }

              void t_ModifierQueryNode$Modifier::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "class_", make_descriptor(ModifierQueryNode$Modifier::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "wrapfn_", make_descriptor(t_ModifierQueryNode$Modifier::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(ModifierQueryNode$Modifier::initializeClass);
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "MOD_NONE", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_NONE)));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "MOD_NOT", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_NOT)));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNode$Modifier).tp_dict, "MOD_REQ", make_descriptor(t_ModifierQueryNode$Modifier::wrap_Object(*ModifierQueryNode$Modifier::MOD_REQ)));
              }

              static PyObject *t_ModifierQueryNode$Modifier_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNode$Modifier::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNode$Modifier::wrap_Object(ModifierQueryNode$Modifier(((t_ModifierQueryNode$Modifier *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNode$Modifier_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNode$Modifier::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ModifierQueryNode$Modifier_of_(t_ModifierQueryNode$Modifier *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toDigitString(t_ModifierQueryNode$Modifier *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.toDigitString());
                return j2p(result);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toLargeString(t_ModifierQueryNode$Modifier *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.toLargeString());
                return j2p(result);
              }

              static PyObject *t_ModifierQueryNode$Modifier_toString(t_ModifierQueryNode$Modifier *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(ModifierQueryNode$Modifier), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_ModifierQueryNode$Modifier_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ModifierQueryNode$Modifier result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::valueOf(a0));
                  return t_ModifierQueryNode$Modifier::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_ModifierQueryNode$Modifier_values(PyTypeObject *type)
              {
                JArray< ModifierQueryNode$Modifier > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::values());
                return JArray<jobject>(result.this$).wrap(t_ModifierQueryNode$Modifier::wrap_jobject);
              }
              static PyObject *t_ModifierQueryNode$Modifier_get__parameters_(t_ModifierQueryNode$Modifier *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BytesRefArray.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Counter.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BytesRefArray::class$ = NULL;
        jmethodID *BytesRefArray::mids$ = NULL;
        bool BytesRefArray::live$ = false;

        jclass BytesRefArray::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BytesRefArray");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4ae88947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_append_7bc03ddb] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_get_708d2c55] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/util/BytesRef;I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");
            mids$[mid_iterator_8d21877c] = env->getMethodID(cls, "iterator", "(Ljava/util/Comparator;)Lorg/apache/lucene/util/BytesRefIterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BytesRefArray::BytesRefArray(const ::org::apache::lucene::util::Counter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4ae88947, a0.this$)) {}

        jint BytesRefArray::append(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_append_7bc03ddb], a0.this$);
        }

        void BytesRefArray::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        ::org::apache::lucene::util::BytesRef BytesRefArray::get(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_708d2c55], a0.this$, a1));
        }

        ::org::apache::lucene::util::BytesRefIterator BytesRefArray::iterator() const
        {
          return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
        }

        ::org::apache::lucene::util::BytesRefIterator BytesRefArray::iterator(const ::java::util::Comparator & a0) const
        {
          return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_8d21877c], a0.this$));
        }

        jint BytesRefArray::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BytesRefArray_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BytesRefArray_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BytesRefArray_init_(t_BytesRefArray *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BytesRefArray_append(t_BytesRefArray *self, PyObject *arg);
        static PyObject *t_BytesRefArray_clear(t_BytesRefArray *self);
        static PyObject *t_BytesRefArray_get(t_BytesRefArray *self, PyObject *args);
        static PyObject *t_BytesRefArray_iterator(t_BytesRefArray *self, PyObject *args);
        static PyObject *t_BytesRefArray_size(t_BytesRefArray *self);

        static PyMethodDef t_BytesRefArray__methods_[] = {
          DECLARE_METHOD(t_BytesRefArray, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefArray, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BytesRefArray, append, METH_O),
          DECLARE_METHOD(t_BytesRefArray, clear, METH_NOARGS),
          DECLARE_METHOD(t_BytesRefArray, get, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefArray, iterator, METH_VARARGS),
          DECLARE_METHOD(t_BytesRefArray, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BytesRefArray, t_BytesRefArray, ::java::lang::Object, BytesRefArray, t_BytesRefArray_init_, 0, 0, 0, 0, 0);

        void t_BytesRefArray::install(PyObject *module)
        {
          installType(&PY_TYPE(BytesRefArray), module, "BytesRefArray", 0);
        }

        void t_BytesRefArray::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BytesRefArray).tp_dict, "class_", make_descriptor(BytesRefArray::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BytesRefArray).tp_dict, "wrapfn_", make_descriptor(t_BytesRefArray::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BytesRefArray).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BytesRefArray_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BytesRefArray::initializeClass, 1)))
            return NULL;
          return t_BytesRefArray::wrap_Object(BytesRefArray(((t_BytesRefArray *) arg)->object.this$));
        }
        static PyObject *t_BytesRefArray_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BytesRefArray::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BytesRefArray_init_(t_BytesRefArray *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Counter a0((jobject) NULL);
          BytesRefArray object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
          {
            INT_CALL(object = BytesRefArray(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BytesRefArray_append(t_BytesRefArray *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_BytesRefArray_clear(t_BytesRefArray *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_BytesRefArray_get(t_BytesRefArray *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.get(a0, a1));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", args);
          return NULL;
        }

        static PyObject *t_BytesRefArray_iterator(t_BytesRefArray *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::java::util::Comparator a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
              {
                OBJ_CALL(result = self->object.iterator(a0));
                return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "iterator", args);
          return NULL;
        }

        static PyObject *t_BytesRefArray_size(t_BytesRefArray *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicLetterTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ar/ArabicLetterTokenizer.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicLetterTokenizerFactory::class$ = NULL;
          jmethodID *ArabicLetterTokenizerFactory::mids$ = NULL;
          bool ArabicLetterTokenizerFactory::live$ = false;

          jclass ArabicLetterTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicLetterTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ee4a774c] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/ar/ArabicLetterTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicLetterTokenizerFactory::ArabicLetterTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ar::ArabicLetterTokenizer ArabicLetterTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::ar::ArabicLetterTokenizer(env->callObjectMethod(this$, mids$[mid_create_ee4a774c], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicLetterTokenizerFactory_init_(t_ArabicLetterTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicLetterTokenizerFactory_create(t_ArabicLetterTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ArabicLetterTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ArabicLetterTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicLetterTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicLetterTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicLetterTokenizerFactory, t_ArabicLetterTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ArabicLetterTokenizerFactory, t_ArabicLetterTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ArabicLetterTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicLetterTokenizerFactory), module, "ArabicLetterTokenizerFactory", 0);
          }

          void t_ArabicLetterTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizerFactory).tp_dict, "class_", make_descriptor(ArabicLetterTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ArabicLetterTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicLetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicLetterTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ArabicLetterTokenizerFactory::wrap_Object(ArabicLetterTokenizerFactory(((t_ArabicLetterTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ArabicLetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicLetterTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicLetterTokenizerFactory_init_(t_ArabicLetterTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ArabicLetterTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ArabicLetterTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicLetterTokenizerFactory_create(t_ArabicLetterTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::ar::ArabicLetterTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::ar::t_ArabicLetterTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ArabicLetterTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionLengthAttribute::class$ = NULL;
          jmethodID *PositionLengthAttribute::mids$ = NULL;
          bool PositionLengthAttribute::live$ = false;

          jclass PositionLengthAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPositionLength_54c6a179] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_setPositionLength_39c7bd3c] = env->getMethodID(cls, "setPositionLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PositionLengthAttribute::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_54c6a179]);
          }

          void PositionLengthAttribute::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionLengthAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_getPositionLength(t_PositionLengthAttribute *self);
          static PyObject *t_PositionLengthAttribute_setPositionLength(t_PositionLengthAttribute *self, PyObject *arg);
          static PyObject *t_PositionLengthAttribute_get__positionLength(t_PositionLengthAttribute *self, void *data);
          static int t_PositionLengthAttribute_set__positionLength(t_PositionLengthAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionLengthAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionLengthAttribute, positionLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionLengthAttribute__methods_[] = {
            DECLARE_METHOD(t_PositionLengthAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionLengthAttribute, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PositionLengthAttribute, setPositionLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionLengthAttribute, t_PositionLengthAttribute, ::org::apache::lucene::util::Attribute, PositionLengthAttribute, abstract_init, 0, 0, t_PositionLengthAttribute__fields_, 0, 0);

          void t_PositionLengthAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionLengthAttribute), module, "PositionLengthAttribute", 0);
          }

          void t_PositionLengthAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionLengthAttribute).tp_dict, "class_", make_descriptor(PositionLengthAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttribute).tp_dict, "wrapfn_", make_descriptor(t_PositionLengthAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionLengthAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionLengthAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionLengthAttribute::initializeClass, 1)))
              return NULL;
            return t_PositionLengthAttribute::wrap_Object(PositionLengthAttribute(((t_PositionLengthAttribute *) arg)->object.this$));
          }
          static PyObject *t_PositionLengthAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionLengthAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositionLengthAttribute_getPositionLength(t_PositionLengthAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionLengthAttribute_setPositionLength(t_PositionLengthAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PositionLengthAttribute_get__positionLength(t_PositionLengthAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionLengthAttribute_set__positionLength(t_PositionLengthAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *TextableQueryNode::class$ = NULL;
              jmethodID *TextableQueryNode::mids$ = NULL;
              bool TextableQueryNode::live$ = false;

              jclass TextableQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getText_e0adba2f] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_setText_a8afc64a] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence TextableQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_e0adba2f]));
              }

              void TextableQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_a8afc64a], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_TextableQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TextableQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TextableQueryNode_getText(t_TextableQueryNode *self);
              static PyObject *t_TextableQueryNode_setText(t_TextableQueryNode *self, PyObject *arg);
              static PyObject *t_TextableQueryNode_get__text(t_TextableQueryNode *self, void *data);
              static int t_TextableQueryNode_set__text(t_TextableQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_TextableQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_TextableQueryNode, text),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TextableQueryNode__methods_[] = {
                DECLARE_METHOD(t_TextableQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TextableQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TextableQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_TextableQueryNode, setText, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TextableQueryNode, t_TextableQueryNode, ::java::lang::Object, TextableQueryNode, abstract_init, 0, 0, t_TextableQueryNode__fields_, 0, 0);

              void t_TextableQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TextableQueryNode), module, "TextableQueryNode", 0);
              }

              void t_TextableQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TextableQueryNode).tp_dict, "class_", make_descriptor(TextableQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TextableQueryNode).tp_dict, "wrapfn_", make_descriptor(t_TextableQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TextableQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TextableQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TextableQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TextableQueryNode::wrap_Object(TextableQueryNode(((t_TextableQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TextableQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TextableQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_TextableQueryNode_getText(t_TextableQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_TextableQueryNode_setText(t_TextableQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_TextableQueryNode_get__text(t_TextableQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_TextableQueryNode_set__text(t_TextableQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedDataOutput.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedDataOutput::class$ = NULL;
          jmethodID *PackedDataOutput::mids$ = NULL;
          bool PackedDataOutput::live$ = false;

          jclass PackedDataOutput::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedDataOutput");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_27875f57] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
              mids$[mid_writeLong_25d05c8f] = env->getMethodID(cls, "writeLong", "(JI)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedDataOutput::PackedDataOutput(const ::org::apache::lucene::store::DataOutput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_27875f57, a0.this$)) {}

          void PackedDataOutput::flush() const
          {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
          }

          void PackedDataOutput::writeLong(jlong a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeLong_25d05c8f], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedDataOutput_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedDataOutput_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedDataOutput_init_(t_PackedDataOutput *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedDataOutput_flush(t_PackedDataOutput *self);
          static PyObject *t_PackedDataOutput_writeLong(t_PackedDataOutput *self, PyObject *args);

          static PyMethodDef t_PackedDataOutput__methods_[] = {
            DECLARE_METHOD(t_PackedDataOutput, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataOutput, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedDataOutput, flush, METH_NOARGS),
            DECLARE_METHOD(t_PackedDataOutput, writeLong, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedDataOutput, t_PackedDataOutput, ::java::lang::Object, PackedDataOutput, t_PackedDataOutput_init_, 0, 0, 0, 0, 0);

          void t_PackedDataOutput::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedDataOutput), module, "PackedDataOutput", 0);
          }

          void t_PackedDataOutput::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedDataOutput).tp_dict, "class_", make_descriptor(PackedDataOutput::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedDataOutput).tp_dict, "wrapfn_", make_descriptor(t_PackedDataOutput::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedDataOutput_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedDataOutput::initializeClass, 1)))
              return NULL;
            return t_PackedDataOutput::wrap_Object(PackedDataOutput(((t_PackedDataOutput *) arg)->object.this$));
          }
          static PyObject *t_PackedDataOutput_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedDataOutput::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedDataOutput_init_(t_PackedDataOutput *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            PackedDataOutput object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              INT_CALL(object = PackedDataOutput(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedDataOutput_flush(t_PackedDataOutput *self)
          {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedDataOutput_writeLong(t_PackedDataOutput *self, PyObject *args)
          {
            jlong a0;
            jint a1;

            if (!parseArgs(args, "JI", &a0, &a1))
            {
              OBJ_CALL(self->object.writeLong(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeLong", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ResourceLoader::class$ = NULL;
          jmethodID *ResourceLoader::mids$ = NULL;
          bool ResourceLoader::live$ = false;

          jclass ResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_findClass_4aee1c89] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_61899367] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_222e59eb] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Class ResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_4aee1c89], a0.this$, a1.this$));
          }

          ::java::lang::Object ResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_61899367], a0.this$, a1.this$));
          }

          ::java::io::InputStream ResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_222e59eb], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoader_findClass(t_ResourceLoader *self, PyObject *args);
          static PyObject *t_ResourceLoader_newInstance(t_ResourceLoader *self, PyObject *args);
          static PyObject *t_ResourceLoader_openResource(t_ResourceLoader *self, PyObject *arg);

          static PyMethodDef t_ResourceLoader__methods_[] = {
            DECLARE_METHOD(t_ResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_ResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_ResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ResourceLoader, t_ResourceLoader, ::java::lang::Object, ResourceLoader, abstract_init, 0, 0, 0, 0, 0);

          void t_ResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(ResourceLoader), module, "ResourceLoader", 0);
          }

          void t_ResourceLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ResourceLoader).tp_dict, "class_", make_descriptor(ResourceLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ResourceLoader).tp_dict, "wrapfn_", make_descriptor(t_ResourceLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ResourceLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ResourceLoader::initializeClass, 1)))
              return NULL;
            return t_ResourceLoader::wrap_Object(ResourceLoader(((t_ResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_ResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ResourceLoader_findClass(t_ResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_ResourceLoader_newInstance(t_ResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_ResourceLoader_openResource(t_ResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/NormValueSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *NormValueSource::class$ = NULL;
            jmethodID *NormValueSource::mids$ = NULL;
            bool NormValueSource::live$ = false;

            jclass NormValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/NormValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NormValueSource::NormValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            void NormValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String NormValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean NormValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues NormValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint NormValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String NormValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_NormValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NormValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NormValueSource_init_(t_NormValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NormValueSource_createWeight(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_description(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_equals(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_getValues(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_hashCode(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_name(t_NormValueSource *self);

            static PyMethodDef t_NormValueSource__methods_[] = {
              DECLARE_METHOD(t_NormValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NormValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NormValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NormValueSource, t_NormValueSource, ::org::apache::lucene::queries::function::ValueSource, NormValueSource, t_NormValueSource_init_, 0, 0, 0, 0, 0);

            void t_NormValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(NormValueSource), module, "NormValueSource", 0);
            }

            void t_NormValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NormValueSource).tp_dict, "class_", make_descriptor(NormValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NormValueSource).tp_dict, "wrapfn_", make_descriptor(t_NormValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NormValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NormValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NormValueSource::initializeClass, 1)))
                return NULL;
              return t_NormValueSource::wrap_Object(NormValueSource(((t_NormValueSource *) arg)->object.this$));
            }
            static PyObject *t_NormValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NormValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NormValueSource_init_(t_NormValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              NormValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = NormValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_NormValueSource_createWeight(t_NormValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_NormValueSource_description(t_NormValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_NormValueSource_equals(t_NormValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_NormValueSource_getValues(t_NormValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_NormValueSource_hashCode(t_NormValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_NormValueSource_name(t_NormValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$DoubleComparator.h"
#include "java/lang/Class.h"
#include "java/lang/Double.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$DoubleComparator::class$ = NULL;
        jmethodID *FieldComparator$DoubleComparator::mids$ = NULL;
        bool FieldComparator$DoubleComparator::live$ = false;

        jclass FieldComparator$DoubleComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$DoubleComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_bf59efcc] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Double;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_8baed06c] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Double;)V");
            mids$[mid_value_a0bf0c9f] = env->getMethodID(cls, "value", "(I)Ljava/lang/Double;");
            mids$[mid_getDoubleValues_9f6b3702] = env->getMethodID(cls, "getDoubleValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Doubles;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$DoubleComparator::FieldComparator$DoubleComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Double & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_bf59efcc, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$DoubleComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$DoubleComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$DoubleComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$DoubleComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$DoubleComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$DoubleComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$DoubleComparator::setTopValue(const ::java::lang::Double & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_8baed06c], a0.this$);
        }

        ::java::lang::Double FieldComparator$DoubleComparator::value(jint a0) const
        {
          return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_value_a0bf0c9f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$DoubleComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DoubleComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DoubleComparator_of_(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static int t_FieldComparator$DoubleComparator_init_(t_FieldComparator$DoubleComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$DoubleComparator_compare(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_compareBottom(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_compareTop(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_copy(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_setBottom(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_setNextReader(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_setTopValue(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_value(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static int t_FieldComparator$DoubleComparator_set__bottom(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DoubleComparator_set__nextReader(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DoubleComparator_set__topValue(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$DoubleComparator_get__parameters_(t_FieldComparator$DoubleComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$DoubleComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$DoubleComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$DoubleComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$DoubleComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$DoubleComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$DoubleComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$DoubleComparator, t_FieldComparator$DoubleComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$DoubleComparator, t_FieldComparator$DoubleComparator_init_, 0, 0, t_FieldComparator$DoubleComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$DoubleComparator::wrap_Object(const FieldComparator$DoubleComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DoubleComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DoubleComparator *self = (t_FieldComparator$DoubleComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$DoubleComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DoubleComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DoubleComparator *self = (t_FieldComparator$DoubleComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$DoubleComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$DoubleComparator), module, "FieldComparator$DoubleComparator", 0);
        }

        void t_FieldComparator$DoubleComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$DoubleComparator).tp_dict, "class_", make_descriptor(FieldComparator$DoubleComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DoubleComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$DoubleComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DoubleComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$DoubleComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$DoubleComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$DoubleComparator::wrap_Object(FieldComparator$DoubleComparator(((t_FieldComparator$DoubleComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$DoubleComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$DoubleComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$DoubleComparator_of_(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$DoubleComparator_init_(t_FieldComparator$DoubleComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Double a3((jobject) NULL);
          FieldComparator$DoubleComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$DoubleComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Double);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$DoubleComparator_compare(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_compareBottom(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_compareTop(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_copy(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_setBottom(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_setNextReader(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Double));
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_setTopValue(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          ::java::lang::Double a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Double), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_value(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Double result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Double::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$DoubleComparator_get__parameters_(t_FieldComparator$DoubleComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$DoubleComparator_set__bottom(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$DoubleComparator_set__nextReader(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$DoubleComparator_set__topValue(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Double value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Double), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractDistinctValuesCollector$GroupCount.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractDistinctValuesCollector$GroupCount::class$ = NULL;
          jmethodID *AbstractDistinctValuesCollector$GroupCount::mids$ = NULL;
          jfieldID *AbstractDistinctValuesCollector$GroupCount::fids$ = NULL;
          bool AbstractDistinctValuesCollector$GroupCount::live$ = false;

          jclass AbstractDistinctValuesCollector$GroupCount::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractDistinctValuesCollector$GroupCount");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_290588ee] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_uniqueValues] = env->getFieldID(cls, "uniqueValues", "Ljava/util/Set;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractDistinctValuesCollector$GroupCount::AbstractDistinctValuesCollector$GroupCount(const ::java::lang::Object & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_290588ee, a0.this$)) {}

          ::java::lang::Object AbstractDistinctValuesCollector$GroupCount::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          ::java::util::Set AbstractDistinctValuesCollector$GroupCount::_get_uniqueValues() const
          {
            return ::java::util::Set(env->getObjectField(this$, fids$[fid_uniqueValues]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_of_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args);
          static int t_AbstractDistinctValuesCollector$GroupCount_init_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__groupValue(t_AbstractDistinctValuesCollector$GroupCount *self, void *data);
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__uniqueValues(t_AbstractDistinctValuesCollector$GroupCount *self, void *data);

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__parameters_(t_AbstractDistinctValuesCollector$GroupCount *self, void *data);
          static PyGetSetDef t_AbstractDistinctValuesCollector$GroupCount__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector$GroupCount, groupValue),
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector$GroupCount, uniqueValues),
            DECLARE_GET_FIELD(t_AbstractDistinctValuesCollector$GroupCount, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractDistinctValuesCollector$GroupCount__methods_[] = {
            DECLARE_METHOD(t_AbstractDistinctValuesCollector$GroupCount, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector$GroupCount, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractDistinctValuesCollector$GroupCount, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractDistinctValuesCollector$GroupCount, t_AbstractDistinctValuesCollector$GroupCount, ::java::lang::Object, AbstractDistinctValuesCollector$GroupCount, t_AbstractDistinctValuesCollector$GroupCount_init_, 0, 0, t_AbstractDistinctValuesCollector$GroupCount__fields_, 0, 0);
          PyObject *t_AbstractDistinctValuesCollector$GroupCount::wrap_Object(const AbstractDistinctValuesCollector$GroupCount& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector$GroupCount::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector$GroupCount *self = (t_AbstractDistinctValuesCollector$GroupCount *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractDistinctValuesCollector$GroupCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractDistinctValuesCollector$GroupCount::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractDistinctValuesCollector$GroupCount *self = (t_AbstractDistinctValuesCollector$GroupCount *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractDistinctValuesCollector$GroupCount::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractDistinctValuesCollector$GroupCount), module, "AbstractDistinctValuesCollector$GroupCount", 0);
          }

          void t_AbstractDistinctValuesCollector$GroupCount::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector$GroupCount).tp_dict, "class_", make_descriptor(AbstractDistinctValuesCollector$GroupCount::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector$GroupCount).tp_dict, "wrapfn_", make_descriptor(t_AbstractDistinctValuesCollector$GroupCount::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractDistinctValuesCollector$GroupCount).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractDistinctValuesCollector$GroupCount::initializeClass, 1)))
              return NULL;
            return t_AbstractDistinctValuesCollector$GroupCount::wrap_Object(AbstractDistinctValuesCollector$GroupCount(((t_AbstractDistinctValuesCollector$GroupCount *) arg)->object.this$));
          }
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractDistinctValuesCollector$GroupCount::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_of_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_AbstractDistinctValuesCollector$GroupCount_init_(t_AbstractDistinctValuesCollector$GroupCount *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::Object a0((jobject) NULL);
            AbstractDistinctValuesCollector$GroupCount object((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              INT_CALL(object = AbstractDistinctValuesCollector$GroupCount(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__parameters_(t_AbstractDistinctValuesCollector$GroupCount *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__groupValue(t_AbstractDistinctValuesCollector$GroupCount *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_AbstractDistinctValuesCollector$GroupCount_get__uniqueValues(t_AbstractDistinctValuesCollector$GroupCount *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object._get_uniqueValues());
            return ::java::util::t_Set::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/HighFrequencyDictionary.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *HighFrequencyDictionary::class$ = NULL;
          jmethodID *HighFrequencyDictionary::mids$ = NULL;
          bool HighFrequencyDictionary::live$ = false;

          jclass HighFrequencyDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/HighFrequencyDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7d517188] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;F)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HighFrequencyDictionary::HighFrequencyDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7d517188, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::search::suggest::InputIterator HighFrequencyDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_HighFrequencyDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HighFrequencyDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HighFrequencyDictionary_init_(t_HighFrequencyDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HighFrequencyDictionary_getEntryIterator(t_HighFrequencyDictionary *self);
          static PyObject *t_HighFrequencyDictionary_get__entryIterator(t_HighFrequencyDictionary *self, void *data);
          static PyGetSetDef t_HighFrequencyDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_HighFrequencyDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HighFrequencyDictionary__methods_[] = {
            DECLARE_METHOD(t_HighFrequencyDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HighFrequencyDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HighFrequencyDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HighFrequencyDictionary, t_HighFrequencyDictionary, ::java::lang::Object, HighFrequencyDictionary, t_HighFrequencyDictionary_init_, 0, 0, t_HighFrequencyDictionary__fields_, 0, 0);

          void t_HighFrequencyDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(HighFrequencyDictionary), module, "HighFrequencyDictionary", 0);
          }

          void t_HighFrequencyDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HighFrequencyDictionary).tp_dict, "class_", make_descriptor(HighFrequencyDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HighFrequencyDictionary).tp_dict, "wrapfn_", make_descriptor(t_HighFrequencyDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HighFrequencyDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HighFrequencyDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HighFrequencyDictionary::initializeClass, 1)))
              return NULL;
            return t_HighFrequencyDictionary::wrap_Object(HighFrequencyDictionary(((t_HighFrequencyDictionary *) arg)->object.this$));
          }
          static PyObject *t_HighFrequencyDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HighFrequencyDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HighFrequencyDictionary_init_(t_HighFrequencyDictionary *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat a2;
            HighFrequencyDictionary object((jobject) NULL);

            if (!parseArgs(args, "ksF", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = HighFrequencyDictionary(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HighFrequencyDictionary_getEntryIterator(t_HighFrequencyDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_HighFrequencyDictionary_get__entryIterator(t_HighFrequencyDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldCache$Shorts.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "org/apache/lucene/search/FieldCache$Floats.h"
#include "org/apache/lucene/search/FieldCache$Longs.h"
#include "org/apache/lucene/search/FieldCache$Ints.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache$Bytes.h"
#include "org/apache/lucene/search/FieldCache$Doubles.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache::class$ = NULL;
        jmethodID *FieldCache::mids$ = NULL;
        bool FieldCache::live$ = false;
        FieldCache *FieldCache::DEFAULT = NULL;
        ::org::apache::lucene::search::FieldCache$ByteParser *FieldCache::DEFAULT_BYTE_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$DoubleParser *FieldCache::DEFAULT_DOUBLE_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$FloatParser *FieldCache::DEFAULT_FLOAT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$IntParser *FieldCache::DEFAULT_INT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$LongParser *FieldCache::DEFAULT_LONG_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$ShortParser *FieldCache::DEFAULT_SHORT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$DoubleParser *FieldCache::NUMERIC_UTILS_DOUBLE_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$FloatParser *FieldCache::NUMERIC_UTILS_FLOAT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$IntParser *FieldCache::NUMERIC_UTILS_INT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$LongParser *FieldCache::NUMERIC_UTILS_LONG_PARSER = NULL;

        jclass FieldCache::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBytes_5b2430b0] = env->getMethodID(cls, "getBytes", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Bytes;");
            mids$[mid_getBytes_63e2679a] = env->getMethodID(cls, "getBytes", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ByteParser;Z)Lorg/apache/lucene/search/FieldCache$Bytes;");
            mids$[mid_getCacheEntries_2bd7104e] = env->getMethodID(cls, "getCacheEntries", "()[Lorg/apache/lucene/search/FieldCache$CacheEntry;");
            mids$[mid_getDocTermOrds_1498712e] = env->getMethodID(cls, "getDocTermOrds", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getDocsWithField_b8ffc438] = env->getMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getDoubles_1da3b06b] = env->getMethodID(cls, "getDoubles", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Doubles;");
            mids$[mid_getDoubles_081c1232] = env->getMethodID(cls, "getDoubles", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$DoubleParser;Z)Lorg/apache/lucene/search/FieldCache$Doubles;");
            mids$[mid_getFloats_d56c7f61] = env->getMethodID(cls, "getFloats", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Floats;");
            mids$[mid_getFloats_16f5ff86] = env->getMethodID(cls, "getFloats", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$FloatParser;Z)Lorg/apache/lucene/search/FieldCache$Floats;");
            mids$[mid_getInfoStream_00215d9e] = env->getMethodID(cls, "getInfoStream", "()Ljava/io/PrintStream;");
            mids$[mid_getInts_09885a02] = env->getMethodID(cls, "getInts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Ints;");
            mids$[mid_getInts_428a6914] = env->getMethodID(cls, "getInts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;Z)Lorg/apache/lucene/search/FieldCache$Ints;");
            mids$[mid_getLongs_4d412004] = env->getMethodID(cls, "getLongs", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Longs;");
            mids$[mid_getLongs_ef1b546a] = env->getMethodID(cls, "getLongs", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$LongParser;Z)Lorg/apache/lucene/search/FieldCache$Longs;");
            mids$[mid_getShorts_2d8fda45] = env->getMethodID(cls, "getShorts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Shorts;");
            mids$[mid_getShorts_cf5b3ec2] = env->getMethodID(cls, "getShorts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ShortParser;Z)Lorg/apache/lucene/search/FieldCache$Shorts;");
            mids$[mid_getTerms_d17729c6] = env->getMethodID(cls, "getTerms", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getTerms_4f27b8ab] = env->getMethodID(cls, "getTerms", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;ZF)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getTermsIndex_e27a1341] = env->getMethodID(cls, "getTermsIndex", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getTermsIndex_774ad832] = env->getMethodID(cls, "getTermsIndex", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;F)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_purgeAllCaches_54c6a166] = env->getMethodID(cls, "purgeAllCaches", "()V");
            mids$[mid_purgeByCacheKey_290588ee] = env->getMethodID(cls, "purgeByCacheKey", "(Ljava/lang/Object;)V");
            mids$[mid_setInfoStream_1b7c898b] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT = new FieldCache(env->getStaticObjectField(cls, "DEFAULT", "Lorg/apache/lucene/search/FieldCache;"));
            DEFAULT_BYTE_PARSER = new ::org::apache::lucene::search::FieldCache$ByteParser(env->getStaticObjectField(cls, "DEFAULT_BYTE_PARSER", "Lorg/apache/lucene/search/FieldCache$ByteParser;"));
            DEFAULT_DOUBLE_PARSER = new ::org::apache::lucene::search::FieldCache$DoubleParser(env->getStaticObjectField(cls, "DEFAULT_DOUBLE_PARSER", "Lorg/apache/lucene/search/FieldCache$DoubleParser;"));
            DEFAULT_FLOAT_PARSER = new ::org::apache::lucene::search::FieldCache$FloatParser(env->getStaticObjectField(cls, "DEFAULT_FLOAT_PARSER", "Lorg/apache/lucene/search/FieldCache$FloatParser;"));
            DEFAULT_INT_PARSER = new ::org::apache::lucene::search::FieldCache$IntParser(env->getStaticObjectField(cls, "DEFAULT_INT_PARSER", "Lorg/apache/lucene/search/FieldCache$IntParser;"));
            DEFAULT_LONG_PARSER = new ::org::apache::lucene::search::FieldCache$LongParser(env->getStaticObjectField(cls, "DEFAULT_LONG_PARSER", "Lorg/apache/lucene/search/FieldCache$LongParser;"));
            DEFAULT_SHORT_PARSER = new ::org::apache::lucene::search::FieldCache$ShortParser(env->getStaticObjectField(cls, "DEFAULT_SHORT_PARSER", "Lorg/apache/lucene/search/FieldCache$ShortParser;"));
            NUMERIC_UTILS_DOUBLE_PARSER = new ::org::apache::lucene::search::FieldCache$DoubleParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_DOUBLE_PARSER", "Lorg/apache/lucene/search/FieldCache$DoubleParser;"));
            NUMERIC_UTILS_FLOAT_PARSER = new ::org::apache::lucene::search::FieldCache$FloatParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_FLOAT_PARSER", "Lorg/apache/lucene/search/FieldCache$FloatParser;"));
            NUMERIC_UTILS_INT_PARSER = new ::org::apache::lucene::search::FieldCache$IntParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_INT_PARSER", "Lorg/apache/lucene/search/FieldCache$IntParser;"));
            NUMERIC_UTILS_LONG_PARSER = new ::org::apache::lucene::search::FieldCache$LongParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_LONG_PARSER", "Lorg/apache/lucene/search/FieldCache$LongParser;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::FieldCache$Bytes FieldCache::getBytes(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Bytes(env->callObjectMethod(this$, mids$[mid_getBytes_5b2430b0], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Bytes FieldCache::getBytes(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$ByteParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Bytes(env->callObjectMethod(this$, mids$[mid_getBytes_63e2679a], a0.this$, a1.this$, a2.this$, a3));
        }

        JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > FieldCache::getCacheEntries() const
        {
          return JArray< ::org::apache::lucene::search::FieldCache$CacheEntry >(env->callObjectMethod(this$, mids$[mid_getCacheEntries_2bd7104e]));
        }

        ::org::apache::lucene::index::SortedSetDocValues FieldCache::getDocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getDocTermOrds_1498712e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::Bits FieldCache::getDocsWithField(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_b8ffc438], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::FieldCache$Doubles FieldCache::getDoubles(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Doubles(env->callObjectMethod(this$, mids$[mid_getDoubles_1da3b06b], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Doubles FieldCache::getDoubles(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$DoubleParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Doubles(env->callObjectMethod(this$, mids$[mid_getDoubles_081c1232], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::FieldCache$Floats FieldCache::getFloats(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Floats(env->callObjectMethod(this$, mids$[mid_getFloats_d56c7f61], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Floats FieldCache::getFloats(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$FloatParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Floats(env->callObjectMethod(this$, mids$[mid_getFloats_16f5ff86], a0.this$, a1.this$, a2.this$, a3));
        }

        ::java::io::PrintStream FieldCache::getInfoStream() const
        {
          return ::java::io::PrintStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_00215d9e]));
        }

        ::org::apache::lucene::search::FieldCache$Ints FieldCache::getInts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Ints(env->callObjectMethod(this$, mids$[mid_getInts_09885a02], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Ints FieldCache::getInts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$IntParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Ints(env->callObjectMethod(this$, mids$[mid_getInts_428a6914], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::FieldCache$Longs FieldCache::getLongs(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Longs(env->callObjectMethod(this$, mids$[mid_getLongs_4d412004], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Longs FieldCache::getLongs(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$LongParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Longs(env->callObjectMethod(this$, mids$[mid_getLongs_ef1b546a], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::FieldCache$Shorts FieldCache::getShorts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Shorts(env->callObjectMethod(this$, mids$[mid_getShorts_2d8fda45], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Shorts FieldCache::getShorts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$ShortParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Shorts(env->callObjectMethod(this$, mids$[mid_getShorts_cf5b3ec2], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::index::BinaryDocValues FieldCache::getTerms(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getTerms_d17729c6], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::BinaryDocValues FieldCache::getTerms(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2, jfloat a3) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getTerms_4f27b8ab], a0.this$, a1.this$, a2, a3));
        }

        ::org::apache::lucene::index::SortedDocValues FieldCache::getTermsIndex(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getTermsIndex_e27a1341], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues FieldCache::getTermsIndex(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jfloat a2) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getTermsIndex_774ad832], a0.this$, a1.this$, a2));
        }

        void FieldCache::purgeAllCaches() const
        {
          env->callVoidMethod(this$, mids$[mid_purgeAllCaches_54c6a166]);
        }

        void FieldCache::purgeByCacheKey(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_purgeByCacheKey_290588ee], a0.this$);
        }

        void FieldCache::setInfoStream(const ::java::io::PrintStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfoStream_1b7c898b], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "org/apache/lucene/search/FieldCache$CreationPlaceholder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache_getBytes(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getCacheEntries(t_FieldCache *self);
        static PyObject *t_FieldCache_getDocTermOrds(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getDocsWithField(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getDoubles(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getFloats(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getInfoStream(t_FieldCache *self);
        static PyObject *t_FieldCache_getInts(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getLongs(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getShorts(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getTerms(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getTermsIndex(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_purgeAllCaches(t_FieldCache *self);
        static PyObject *t_FieldCache_purgeByCacheKey(t_FieldCache *self, PyObject *arg);
        static PyObject *t_FieldCache_setInfoStream(t_FieldCache *self, PyObject *arg);
        static PyObject *t_FieldCache_get__cacheEntries(t_FieldCache *self, void *data);
        static PyObject *t_FieldCache_get__infoStream(t_FieldCache *self, void *data);
        static int t_FieldCache_set__infoStream(t_FieldCache *self, PyObject *arg, void *data);
        static PyGetSetDef t_FieldCache__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCache, cacheEntries),
          DECLARE_GETSET_FIELD(t_FieldCache, infoStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCache__methods_[] = {
          DECLARE_METHOD(t_FieldCache, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache, getBytes, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getCacheEntries, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache, getDocTermOrds, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getDoubles, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getFloats, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getInfoStream, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache, getInts, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getLongs, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getShorts, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getTerms, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getTermsIndex, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, purgeAllCaches, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache, purgeByCacheKey, METH_O),
          DECLARE_METHOD(t_FieldCache, setInfoStream, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache, t_FieldCache, ::java::lang::Object, FieldCache, abstract_init, 0, 0, t_FieldCache__fields_, 0, 0);

        void t_FieldCache::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache), module, "FieldCache", 0);
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "CacheEntry", make_descriptor(&PY_TYPE(FieldCache$CacheEntry)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DoubleParser", make_descriptor(&PY_TYPE(FieldCache$DoubleParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "LongParser", make_descriptor(&PY_TYPE(FieldCache$LongParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "FloatParser", make_descriptor(&PY_TYPE(FieldCache$FloatParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "IntParser", make_descriptor(&PY_TYPE(FieldCache$IntParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "ShortParser", make_descriptor(&PY_TYPE(FieldCache$ShortParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "ByteParser", make_descriptor(&PY_TYPE(FieldCache$ByteParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Parser", make_descriptor(&PY_TYPE(FieldCache$Parser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "CreationPlaceholder", make_descriptor(&PY_TYPE(FieldCache$CreationPlaceholder)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Doubles", make_descriptor(&PY_TYPE(FieldCache$Doubles)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Floats", make_descriptor(&PY_TYPE(FieldCache$Floats)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Longs", make_descriptor(&PY_TYPE(FieldCache$Longs)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Ints", make_descriptor(&PY_TYPE(FieldCache$Ints)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Shorts", make_descriptor(&PY_TYPE(FieldCache$Shorts)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Bytes", make_descriptor(&PY_TYPE(FieldCache$Bytes)));
        }

        void t_FieldCache::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "class_", make_descriptor(FieldCache::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "wrapfn_", make_descriptor(t_FieldCache::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT", make_descriptor(t_FieldCache::wrap_Object(*FieldCache::DEFAULT)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_BYTE_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$ByteParser::wrap_Object(*FieldCache::DEFAULT_BYTE_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_DOUBLE_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$DoubleParser::wrap_Object(*FieldCache::DEFAULT_DOUBLE_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_FLOAT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$FloatParser::wrap_Object(*FieldCache::DEFAULT_FLOAT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_INT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$IntParser::wrap_Object(*FieldCache::DEFAULT_INT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_LONG_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$LongParser::wrap_Object(*FieldCache::DEFAULT_LONG_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_SHORT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$ShortParser::wrap_Object(*FieldCache::DEFAULT_SHORT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_DOUBLE_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$DoubleParser::wrap_Object(*FieldCache::NUMERIC_UTILS_DOUBLE_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_FLOAT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$FloatParser::wrap_Object(*FieldCache::NUMERIC_UTILS_FLOAT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_INT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$IntParser::wrap_Object(*FieldCache::NUMERIC_UTILS_INT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_LONG_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$LongParser::wrap_Object(*FieldCache::NUMERIC_UTILS_LONG_PARSER)));
        }

        static PyObject *t_FieldCache_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache::initializeClass, 1)))
            return NULL;
          return t_FieldCache::wrap_Object(FieldCache(((t_FieldCache *) arg)->object.this$));
        }
        static PyObject *t_FieldCache_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache_getBytes(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Bytes result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getBytes(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Bytes::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ByteParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Bytes result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$ByteParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getBytes(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Bytes::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getBytes", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getCacheEntries(t_FieldCache *self)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > result((jobject) NULL);
          OBJ_CALL(result = self->object.getCacheEntries());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCache_getDocTermOrds(t_FieldCache *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocTermOrds(a0, a1));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocTermOrds", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getDocsWithField(t_FieldCache *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0, a1));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocsWithField", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getDoubles(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Doubles result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getDoubles(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Doubles::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$DoubleParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Doubles result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$DoubleParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getDoubles(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Doubles::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getDoubles", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getFloats(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Floats result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getFloats(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Floats::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$FloatParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Floats result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$FloatParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getFloats(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Floats::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getFloats", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getInfoStream(t_FieldCache *self)
        {
          ::java::io::PrintStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(result);
        }

        static PyObject *t_FieldCache_getInts(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Ints result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getInts(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Ints::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$IntParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Ints result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getInts(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Ints::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getInts", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getLongs(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Longs result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getLongs(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Longs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$LongParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Longs result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$LongParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getLongs(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Longs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getLongs", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getShorts(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Shorts result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getShorts(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Shorts::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ShortParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Shorts result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$ShortParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getShorts(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Shorts::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getShorts", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getTerms(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getTerms(a0, a1, a2));
                return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              jfloat a3;
              ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

              if (!parseArgs(args, "ksZF", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getTerms(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getTerms", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getTermsIndex(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.getTermsIndex(a0, a1));
                return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jfloat a2;
              ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

              if (!parseArgs(args, "ksF", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getTermsIndex(a0, a1, a2));
                return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getTermsIndex", args);
          return NULL;
        }

        static PyObject *t_FieldCache_purgeAllCaches(t_FieldCache *self)
        {
          OBJ_CALL(self->object.purgeAllCaches());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldCache_purgeByCacheKey(t_FieldCache *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.purgeByCacheKey(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "purgeByCacheKey", arg);
          return NULL;
        }

        static PyObject *t_FieldCache_setInfoStream(t_FieldCache *self, PyObject *arg)
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setInfoStream(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setInfoStream", arg);
          return NULL;
        }

        static PyObject *t_FieldCache_get__cacheEntries(t_FieldCache *self, void *data)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > value((jobject) NULL);
          OBJ_CALL(value = self->object.getCacheEntries());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCache_get__infoStream(t_FieldCache *self, void *data)
        {
          ::java::io::PrintStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(value);
        }
        static int t_FieldCache_set__infoStream(t_FieldCache *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter$OrdinalMap::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter$OrdinalMap::mids$ = NULL;
            bool DirectoryTaxonomyWriter$OrdinalMap::live$ = false;

            jclass DirectoryTaxonomyWriter$OrdinalMap::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap");

                mids$ = new jmethodID[max_mid];
                mids$[mid_addDone_54c6a166] = env->getMethodID(cls, "addDone", "()V");
                mids$[mid_addMapping_d8d154a6] = env->getMethodID(cls, "addMapping", "(II)V");
                mids$[mid_getMap_dab10e75] = env->getMethodID(cls, "getMap", "()[I");
                mids$[mid_setSize_39c7bd3c] = env->getMethodID(cls, "setSize", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void DirectoryTaxonomyWriter$OrdinalMap::addDone() const
            {
              env->callVoidMethod(this$, mids$[mid_addDone_54c6a166]);
            }

            void DirectoryTaxonomyWriter$OrdinalMap::addMapping(jint a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addMapping_d8d154a6], a0, a1);
            }

            JArray< jint > DirectoryTaxonomyWriter$OrdinalMap::getMap() const
            {
              return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getMap_dab10e75]));
            }

            void DirectoryTaxonomyWriter$OrdinalMap::setSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSize_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addDone(t_DirectoryTaxonomyWriter$OrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addMapping(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_getMap(t_DirectoryTaxonomyWriter$OrdinalMap *self);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_setSize(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_get__map(t_DirectoryTaxonomyWriter$OrdinalMap *self, void *data);
            static int t_DirectoryTaxonomyWriter$OrdinalMap_set__size(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter$OrdinalMap__fields_[] = {
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter$OrdinalMap, map),
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter$OrdinalMap, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter$OrdinalMap__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, addDone, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, addMapping, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, getMap, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter$OrdinalMap, setSize, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter$OrdinalMap, t_DirectoryTaxonomyWriter$OrdinalMap, ::java::lang::Object, DirectoryTaxonomyWriter$OrdinalMap, abstract_init, 0, 0, t_DirectoryTaxonomyWriter$OrdinalMap__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter$OrdinalMap::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap), module, "DirectoryTaxonomyWriter$OrdinalMap", 0);
            }

            void t_DirectoryTaxonomyWriter$OrdinalMap::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter$OrdinalMap::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter$OrdinalMap::wrap_Object(DirectoryTaxonomyWriter$OrdinalMap(((t_DirectoryTaxonomyWriter$OrdinalMap *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter$OrdinalMap::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addDone(t_DirectoryTaxonomyWriter$OrdinalMap *self)
            {
              OBJ_CALL(self->object.addDone());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_addMapping(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *args)
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.addMapping(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addMapping", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_getMap(t_DirectoryTaxonomyWriter$OrdinalMap *self)
            {
              JArray< jint > result((jobject) NULL);
              OBJ_CALL(result = self->object.getMap());
              return result.wrap();
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_setSize(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter$OrdinalMap_get__map(t_DirectoryTaxonomyWriter$OrdinalMap *self, void *data)
            {
              JArray< jint > value((jobject) NULL);
              OBJ_CALL(value = self->object.getMap());
              return value.wrap();
            }

            static int t_DirectoryTaxonomyWriter$OrdinalMap_set__size(t_DirectoryTaxonomyWriter$OrdinalMap *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "size", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SingleTermsEnum.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SingleTermsEnum::class$ = NULL;
        jmethodID *SingleTermsEnum::mids$ = NULL;
        bool SingleTermsEnum::live$ = false;

        jclass SingleTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SingleTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_acc8615c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SingleTermsEnum::SingleTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_acc8615c, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SingleTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SingleTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SingleTermsEnum_init_(t_SingleTermsEnum *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SingleTermsEnum__methods_[] = {
          DECLARE_METHOD(t_SingleTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleTermsEnum, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SingleTermsEnum, t_SingleTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, SingleTermsEnum, t_SingleTermsEnum_init_, 0, 0, 0, 0, 0);

        void t_SingleTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(SingleTermsEnum), module, "SingleTermsEnum", 0);
        }

        void t_SingleTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SingleTermsEnum).tp_dict, "class_", make_descriptor(SingleTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SingleTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_SingleTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SingleTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SingleTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SingleTermsEnum::initializeClass, 1)))
            return NULL;
          return t_SingleTermsEnum::wrap_Object(SingleTermsEnum(((t_SingleTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_SingleTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SingleTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SingleTermsEnum_init_(t_SingleTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SingleTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SingleTermsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Date.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *SimpleDateFormat::class$ = NULL;
    jmethodID *SimpleDateFormat::mids$ = NULL;
    bool SimpleDateFormat::live$ = false;

    jclass SimpleDateFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/SimpleDateFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_f32a91b9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/Locale;)V");
        mids$[mid_applyLocalizedPattern_5fdc3f48] = env->getMethodID(cls, "applyLocalizedPattern", "(Ljava/lang/String;)V");
        mids$[mid_applyPattern_5fdc3f48] = env->getMethodID(cls, "applyPattern", "(Ljava/lang/String;)V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_get2DigitYearStart_6e14513a] = env->getMethodID(cls, "get2DigitYearStart", "()Ljava/util/Date;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_set2DigitYearStart_aa83a4b3] = env->getMethodID(cls, "set2DigitYearStart", "(Ljava/util/Date;)V");
        mids$[mid_toLocalizedPattern_14c7b5c5] = env->getMethodID(cls, "toLocalizedPattern", "()Ljava/lang/String;");
        mids$[mid_toPattern_14c7b5c5] = env->getMethodID(cls, "toPattern", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    SimpleDateFormat::SimpleDateFormat() : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    SimpleDateFormat::SimpleDateFormat(const ::java::lang::String & a0) : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    SimpleDateFormat::SimpleDateFormat(const ::java::lang::String & a0, const ::java::util::Locale & a1) : ::java::text::DateFormat(env->newObject(initializeClass, &mids$, mid_init$_f32a91b9, a0.this$, a1.this$)) {}

    void SimpleDateFormat::applyLocalizedPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyLocalizedPattern_5fdc3f48], a0.this$);
    }

    void SimpleDateFormat::applyPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyPattern_5fdc3f48], a0.this$);
    }

    ::java::lang::Object SimpleDateFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean SimpleDateFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::util::Date SimpleDateFormat::get2DigitYearStart() const
    {
      return ::java::util::Date(env->callObjectMethod(this$, mids$[mid_get2DigitYearStart_6e14513a]));
    }

    jint SimpleDateFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    void SimpleDateFormat::set2DigitYearStart(const ::java::util::Date & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_set2DigitYearStart_aa83a4b3], a0.this$);
    }

    ::java::lang::String SimpleDateFormat::toLocalizedPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLocalizedPattern_14c7b5c5]));
    }

    ::java::lang::String SimpleDateFormat::toPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toPattern_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_SimpleDateFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_SimpleDateFormat_instance_(PyTypeObject *type, PyObject *arg);
    static int t_SimpleDateFormat_init_(t_SimpleDateFormat *self, PyObject *args, PyObject *kwds);
    static PyObject *t_SimpleDateFormat_applyLocalizedPattern(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_applyPattern(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_clone(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_equals(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_get2DigitYearStart(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_hashCode(t_SimpleDateFormat *self, PyObject *args);
    static PyObject *t_SimpleDateFormat_set2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg);
    static PyObject *t_SimpleDateFormat_toLocalizedPattern(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_toPattern(t_SimpleDateFormat *self);
    static PyObject *t_SimpleDateFormat_get__2DigitYearStart(t_SimpleDateFormat *self, void *data);
    static int t_SimpleDateFormat_set__2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_SimpleDateFormat__fields_[] = {
      DECLARE_GETSET_FIELD(t_SimpleDateFormat, 2DigitYearStart),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_SimpleDateFormat__methods_[] = {
      DECLARE_METHOD(t_SimpleDateFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_SimpleDateFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_SimpleDateFormat, applyLocalizedPattern, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, applyPattern, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, get2DigitYearStart, METH_NOARGS),
      DECLARE_METHOD(t_SimpleDateFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_SimpleDateFormat, set2DigitYearStart, METH_O),
      DECLARE_METHOD(t_SimpleDateFormat, toLocalizedPattern, METH_NOARGS),
      DECLARE_METHOD(t_SimpleDateFormat, toPattern, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(SimpleDateFormat, t_SimpleDateFormat, ::java::text::DateFormat, SimpleDateFormat, t_SimpleDateFormat_init_, 0, 0, t_SimpleDateFormat__fields_, 0, 0);

    void t_SimpleDateFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(SimpleDateFormat), module, "SimpleDateFormat", 0);
    }

    void t_SimpleDateFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(SimpleDateFormat).tp_dict, "class_", make_descriptor(SimpleDateFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(SimpleDateFormat).tp_dict, "wrapfn_", make_descriptor(t_SimpleDateFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(SimpleDateFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_SimpleDateFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, SimpleDateFormat::initializeClass, 1)))
        return NULL;
      return t_SimpleDateFormat::wrap_Object(SimpleDateFormat(((t_SimpleDateFormat *) arg)->object.this$));
    }
    static PyObject *t_SimpleDateFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, SimpleDateFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_SimpleDateFormat_init_(t_SimpleDateFormat *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          SimpleDateFormat object((jobject) NULL);

          INT_CALL(object = SimpleDateFormat());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          SimpleDateFormat object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = SimpleDateFormat(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::util::Locale a1((jobject) NULL);
          SimpleDateFormat object((jobject) NULL);

          if (!parseArgs(args, "sk", ::java::util::Locale::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SimpleDateFormat(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_SimpleDateFormat_applyLocalizedPattern(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyLocalizedPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyLocalizedPattern", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_applyPattern(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyPattern", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_clone(t_SimpleDateFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(SimpleDateFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_SimpleDateFormat_equals(t_SimpleDateFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(SimpleDateFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_SimpleDateFormat_get2DigitYearStart(t_SimpleDateFormat *self)
    {
      ::java::util::Date result((jobject) NULL);
      OBJ_CALL(result = self->object.get2DigitYearStart());
      return ::java::util::t_Date::wrap_Object(result);
    }

    static PyObject *t_SimpleDateFormat_hashCode(t_SimpleDateFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(SimpleDateFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_SimpleDateFormat_set2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg)
    {
      ::java::util::Date a0((jobject) NULL);

      if (!parseArg(arg, "k", ::java::util::Date::initializeClass, &a0))
      {
        OBJ_CALL(self->object.set2DigitYearStart(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "set2DigitYearStart", arg);
      return NULL;
    }

    static PyObject *t_SimpleDateFormat_toLocalizedPattern(t_SimpleDateFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toLocalizedPattern());
      return j2p(result);
    }

    static PyObject *t_SimpleDateFormat_toPattern(t_SimpleDateFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toPattern());
      return j2p(result);
    }

    static PyObject *t_SimpleDateFormat_get__2DigitYearStart(t_SimpleDateFormat *self, void *data)
    {
      ::java::util::Date value((jobject) NULL);
      OBJ_CALL(value = self->object.get2DigitYearStart());
      return ::java::util::t_Date::wrap_Object(value);
    }
    static int t_SimpleDateFormat_set__2DigitYearStart(t_SimpleDateFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Date value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Date::initializeClass, &value))
        {
          INT_CALL(self->object.set2DigitYearStart(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "2DigitYearStart", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/miscellaneous/LengthFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LengthFilterFactory::class$ = NULL;
          jmethodID *LengthFilterFactory::mids$ = NULL;
          bool LengthFilterFactory::live$ = false;
          ::java::lang::String *LengthFilterFactory::MAX_KEY = NULL;
          ::java::lang::String *LengthFilterFactory::MIN_KEY = NULL;

          jclass LengthFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LengthFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_c5f48534] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/LengthFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_KEY", "Ljava/lang/String;"));
              MIN_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LengthFilterFactory::LengthFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::LengthFilter LengthFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::LengthFilter(env->callObjectMethod(this$, mids$[mid_create_c5f48534], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LengthFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LengthFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LengthFilterFactory_init_(t_LengthFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LengthFilterFactory_create(t_LengthFilterFactory *self, PyObject *args);

          static PyMethodDef t_LengthFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LengthFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LengthFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LengthFilterFactory, t_LengthFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LengthFilterFactory, t_LengthFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LengthFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LengthFilterFactory), module, "LengthFilterFactory", 0);
          }

          void t_LengthFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "class_", make_descriptor(LengthFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LengthFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(LengthFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "MAX_KEY", make_descriptor(j2p(*LengthFilterFactory::MAX_KEY)));
            PyDict_SetItemString(PY_TYPE(LengthFilterFactory).tp_dict, "MIN_KEY", make_descriptor(j2p(*LengthFilterFactory::MIN_KEY)));
          }

          static PyObject *t_LengthFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LengthFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LengthFilterFactory::wrap_Object(LengthFilterFactory(((t_LengthFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LengthFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LengthFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LengthFilterFactory_init_(t_LengthFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LengthFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LengthFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LengthFilterFactory_create(t_LengthFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::LengthFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_LengthFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LengthFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanPositionRangeQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanPositionRangeQuery::class$ = NULL;
          jmethodID *SpanPositionRangeQuery::mids$ = NULL;
          bool SpanPositionRangeQuery::live$ = false;

          jclass SpanPositionRangeQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanPositionRangeQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d606f0cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;II)V");
              mids$[mid_clone_718ddad5] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanPositionRangeQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getEnd_54c6a179] = env->getMethodID(cls, "getEnd", "()I");
              mids$[mid_getStart_54c6a179] = env->getMethodID(cls, "getStart", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_acceptPosition_5342f73f] = env->getMethodID(cls, "acceptPosition", "(Lorg/apache/lucene/search/spans/Spans;)Lorg/apache/lucene/search/spans/SpanPositionCheckQuery$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanPositionRangeQuery::SpanPositionRangeQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, jint a1, jint a2) : ::org::apache::lucene::search::spans::SpanPositionCheckQuery(env->newObject(initializeClass, &mids$, mid_init$_d606f0cb, a0.this$, a1, a2)) {}

          SpanPositionRangeQuery SpanPositionRangeQuery::clone() const
          {
            return SpanPositionRangeQuery(env->callObjectMethod(this$, mids$[mid_clone_718ddad5]));
          }

          jboolean SpanPositionRangeQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SpanPositionRangeQuery::getEnd() const
          {
            return env->callIntMethod(this$, mids$[mid_getEnd_54c6a179]);
          }

          jint SpanPositionRangeQuery::getStart() const
          {
            return env->callIntMethod(this$, mids$[mid_getStart_54c6a179]);
          }

          jint SpanPositionRangeQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SpanPositionRangeQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanPositionRangeQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanPositionRangeQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanPositionRangeQuery_init_(t_SpanPositionRangeQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanPositionRangeQuery_clone(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_equals(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_getEnd(t_SpanPositionRangeQuery *self);
          static PyObject *t_SpanPositionRangeQuery_getStart(t_SpanPositionRangeQuery *self);
          static PyObject *t_SpanPositionRangeQuery_hashCode(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_toString(t_SpanPositionRangeQuery *self, PyObject *args);
          static PyObject *t_SpanPositionRangeQuery_get__end(t_SpanPositionRangeQuery *self, void *data);
          static PyObject *t_SpanPositionRangeQuery_get__start(t_SpanPositionRangeQuery *self, void *data);
          static PyGetSetDef t_SpanPositionRangeQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanPositionRangeQuery, end),
            DECLARE_GET_FIELD(t_SpanPositionRangeQuery, start),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanPositionRangeQuery__methods_[] = {
            DECLARE_METHOD(t_SpanPositionRangeQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, getEnd, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, getStart, METH_NOARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanPositionRangeQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanPositionRangeQuery, t_SpanPositionRangeQuery, ::org::apache::lucene::search::spans::SpanPositionCheckQuery, SpanPositionRangeQuery, t_SpanPositionRangeQuery_init_, 0, 0, t_SpanPositionRangeQuery__fields_, 0, 0);

          void t_SpanPositionRangeQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanPositionRangeQuery), module, "SpanPositionRangeQuery", 0);
          }

          void t_SpanPositionRangeQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanPositionRangeQuery).tp_dict, "class_", make_descriptor(SpanPositionRangeQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanPositionRangeQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanPositionRangeQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanPositionRangeQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanPositionRangeQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanPositionRangeQuery::initializeClass, 1)))
              return NULL;
            return t_SpanPositionRangeQuery::wrap_Object(SpanPositionRangeQuery(((t_SpanPositionRangeQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanPositionRangeQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanPositionRangeQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanPositionRangeQuery_init_(t_SpanPositionRangeQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
            jint a1;
            jint a2;
            SpanPositionRangeQuery object((jobject) NULL);

            if (!parseArgs(args, "kII", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = SpanPositionRangeQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanPositionRangeQuery_clone(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            SpanPositionRangeQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanPositionRangeQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_equals(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_getEnd(t_SpanPositionRangeQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEnd());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanPositionRangeQuery_getStart(t_SpanPositionRangeQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStart());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanPositionRangeQuery_hashCode(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_toString(t_SpanPositionRangeQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanPositionRangeQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanPositionRangeQuery_get__end(t_SpanPositionRangeQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEnd());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SpanPositionRangeQuery_get__start(t_SpanPositionRangeQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStart());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectAllocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$DirectAllocator::class$ = NULL;
        jmethodID *ByteBlockPool$DirectAllocator::mids$ = NULL;
        bool ByteBlockPool$DirectAllocator::live$ = false;

        jclass ByteBlockPool$DirectAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$DirectAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$DirectAllocator::ByteBlockPool$DirectAllocator() : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ByteBlockPool$DirectAllocator::ByteBlockPool$DirectAllocator(jint a0) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        void ByteBlockPool$DirectAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$DirectAllocator_init_(t_ByteBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$DirectAllocator_recycleByteBlocks(t_ByteBlockPool$DirectAllocator *self, PyObject *args);

        static PyMethodDef t_ByteBlockPool$DirectAllocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool$DirectAllocator, t_ByteBlockPool$DirectAllocator, ::org::apache::lucene::util::ByteBlockPool$Allocator, ByteBlockPool$DirectAllocator, t_ByteBlockPool$DirectAllocator_init_, 0, 0, 0, 0, 0);

        void t_ByteBlockPool$DirectAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$DirectAllocator), module, "ByteBlockPool$DirectAllocator", 0);
        }

        void t_ByteBlockPool$DirectAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectAllocator).tp_dict, "class_", make_descriptor(ByteBlockPool$DirectAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectAllocator).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool$DirectAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$DirectAllocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$DirectAllocator::wrap_Object(ByteBlockPool$DirectAllocator(((t_ByteBlockPool$DirectAllocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$DirectAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$DirectAllocator_init_(t_ByteBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ByteBlockPool$DirectAllocator object((jobject) NULL);

              INT_CALL(object = ByteBlockPool$DirectAllocator());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              ByteBlockPool$DirectAllocator object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = ByteBlockPool$DirectAllocator(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$DirectAllocator_recycleByteBlocks(t_ByteBlockPool$DirectAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteBlockPool$DirectAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/TermQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *TermQueryBuilder::class$ = NULL;
            jmethodID *TermQueryBuilder::mids$ = NULL;
            bool TermQueryBuilder::live$ = false;

            jclass TermQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/TermQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermQueryBuilder::TermQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_TermQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TermQueryBuilder_init_(t_TermQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TermQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_TermQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermQueryBuilder, t_TermQueryBuilder, ::java::lang::Object, TermQueryBuilder, t_TermQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_TermQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(TermQueryBuilder), module, "TermQueryBuilder", 0);
            }

            void t_TermQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermQueryBuilder).tp_dict, "class_", make_descriptor(TermQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_TermQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_TermQueryBuilder::wrap_Object(TermQueryBuilder(((t_TermQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_TermQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TermQueryBuilder_init_(t_TermQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              TermQueryBuilder object((jobject) NULL);

              INT_CALL(object = TermQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40TermVectorsReader::class$ = NULL;
          jmethodID *Lucene40TermVectorsReader::mids$ = NULL;
          bool Lucene40TermVectorsReader::live$ = false;

          jclass Lucene40TermVectorsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_3589180f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_475a2624] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_get_ef1c9c73] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/index/Fields;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40TermVectorsReader::Lucene40TermVectorsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) : ::org::apache::lucene::codecs::TermVectorsReader(env->newObject(initializeClass, &mids$, mid_init$_3589180f, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          void Lucene40TermVectorsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          ::org::apache::lucene::codecs::TermVectorsReader Lucene40TermVectorsReader::clone() const
          {
            return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_clone_475a2624]));
          }

          void Lucene40TermVectorsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          ::org::apache::lucene::index::Fields Lucene40TermVectorsReader::get(jint a0) const
          {
            return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_get_ef1c9c73], a0));
          }

          jlong Lucene40TermVectorsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40TermVectorsReader_init_(t_Lucene40TermVectorsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40TermVectorsReader_checkIntegrity(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_clone(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_close(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_get(t_Lucene40TermVectorsReader *self, PyObject *args);
          static PyObject *t_Lucene40TermVectorsReader_ramBytesUsed(t_Lucene40TermVectorsReader *self, PyObject *args);

          static PyMethodDef t_Lucene40TermVectorsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40TermVectorsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, get, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40TermVectorsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40TermVectorsReader, t_Lucene40TermVectorsReader, ::org::apache::lucene::codecs::TermVectorsReader, Lucene40TermVectorsReader, t_Lucene40TermVectorsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40TermVectorsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40TermVectorsReader), module, "Lucene40TermVectorsReader", 0);
          }

          void t_Lucene40TermVectorsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsReader).tp_dict, "class_", make_descriptor(Lucene40TermVectorsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40TermVectorsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40TermVectorsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40TermVectorsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40TermVectorsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40TermVectorsReader::wrap_Object(Lucene40TermVectorsReader(((t_Lucene40TermVectorsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40TermVectorsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40TermVectorsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40TermVectorsReader_init_(t_Lucene40TermVectorsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            Lucene40TermVectorsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = Lucene40TermVectorsReader(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene40TermVectorsReader_checkIntegrity(t_Lucene40TermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_clone(t_Lucene40TermVectorsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_close(t_Lucene40TermVectorsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_get(t_Lucene40TermVectorsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::Fields result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_Lucene40TermVectorsReader_ramBytesUsed(t_Lucene40TermVectorsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene40TermVectorsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$DoubleParser::class$ = NULL;
        jmethodID *FieldCache$DoubleParser::mids$ = NULL;
        bool FieldCache$DoubleParser::live$ = false;

        jclass FieldCache$DoubleParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$DoubleParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseDouble_7bc03dd6] = env->getMethodID(cls, "parseDouble", "(Lorg/apache/lucene/util/BytesRef;)D");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble FieldCache$DoubleParser::parseDouble(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callDoubleMethod(this$, mids$[mid_parseDouble_7bc03dd6], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$DoubleParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$DoubleParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$DoubleParser_parseDouble(t_FieldCache$DoubleParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$DoubleParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$DoubleParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$DoubleParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$DoubleParser, parseDouble, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$DoubleParser, t_FieldCache$DoubleParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$DoubleParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$DoubleParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$DoubleParser), module, "FieldCache$DoubleParser", 0);
        }

        void t_FieldCache$DoubleParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$DoubleParser).tp_dict, "class_", make_descriptor(FieldCache$DoubleParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$DoubleParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$DoubleParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$DoubleParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$DoubleParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$DoubleParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$DoubleParser::wrap_Object(FieldCache$DoubleParser(((t_FieldCache$DoubleParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$DoubleParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$DoubleParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$DoubleParser_parseDouble(t_FieldCache$DoubleParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jdouble result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseDouble(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseDouble", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemFilter::class$ = NULL;
          jmethodID *IndonesianStemFilter::mids$ = NULL;
          bool IndonesianStemFilter::live$ = false;

          jclass IndonesianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_a19d9eb9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemFilter::IndonesianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          IndonesianStemFilter::IndonesianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_a19d9eb9, a0.this$, a1)) {}

          jboolean IndonesianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemFilter_init_(t_IndonesianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemFilter_incrementToken(t_IndonesianStemFilter *self, PyObject *args);

          static PyMethodDef t_IndonesianStemFilter__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianStemFilter, t_IndonesianStemFilter, ::org::apache::lucene::analysis::TokenFilter, IndonesianStemFilter, t_IndonesianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_IndonesianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemFilter), module, "IndonesianStemFilter", 0);
          }

          void t_IndonesianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilter).tp_dict, "class_", make_descriptor(IndonesianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_IndonesianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndonesianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemFilter::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemFilter::wrap_Object(IndonesianStemFilter(((t_IndonesianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemFilter_init_(t_IndonesianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                IndonesianStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = IndonesianStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jboolean a1;
                IndonesianStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = IndonesianStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianStemFilter_incrementToken(t_IndonesianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(IndonesianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/mlt/MoreLikeThisQuery.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {

          ::java::lang::Class *MoreLikeThisQuery::class$ = NULL;
          jmethodID *MoreLikeThisQuery::mids$ = NULL;
          bool MoreLikeThisQuery::live$ = false;

          jclass MoreLikeThisQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queries/mlt/MoreLikeThisQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e36f88de] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getAnalyzer_347f60a9] = env->getMethodID(cls, "getAnalyzer", "()Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getLikeText_14c7b5c5] = env->getMethodID(cls, "getLikeText", "()Ljava/lang/String;");
              mids$[mid_getMaxQueryTerms_54c6a179] = env->getMethodID(cls, "getMaxQueryTerms", "()I");
              mids$[mid_getMinDocFreq_54c6a179] = env->getMethodID(cls, "getMinDocFreq", "()I");
              mids$[mid_getMinTermFrequency_54c6a179] = env->getMethodID(cls, "getMinTermFrequency", "()I");
              mids$[mid_getMoreLikeFields_2e6d5245] = env->getMethodID(cls, "getMoreLikeFields", "()[Ljava/lang/String;");
              mids$[mid_getPercentTermsToMatch_54c6a176] = env->getMethodID(cls, "getPercentTermsToMatch", "()F");
              mids$[mid_getStopWords_03e99967] = env->getMethodID(cls, "getStopWords", "()Ljava/util/Set;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_setAnalyzer_31619410] = env->getMethodID(cls, "setAnalyzer", "(Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_setLikeText_5fdc3f48] = env->getMethodID(cls, "setLikeText", "(Ljava/lang/String;)V");
              mids$[mid_setMaxQueryTerms_39c7bd3c] = env->getMethodID(cls, "setMaxQueryTerms", "(I)V");
              mids$[mid_setMinDocFreq_39c7bd3c] = env->getMethodID(cls, "setMinDocFreq", "(I)V");
              mids$[mid_setMinTermFrequency_39c7bd3c] = env->getMethodID(cls, "setMinTermFrequency", "(I)V");
              mids$[mid_setMoreLikeFields_4dd4540c] = env->getMethodID(cls, "setMoreLikeFields", "([Ljava/lang/String;)V");
              mids$[mid_setPercentTermsToMatch_06298cab] = env->getMethodID(cls, "setPercentTermsToMatch", "(F)V");
              mids$[mid_setStopWords_fb4f2b26] = env->getMethodID(cls, "setStopWords", "(Ljava/util/Set;)V");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MoreLikeThisQuery::MoreLikeThisQuery(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::java::lang::String & a3) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_e36f88de, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jboolean MoreLikeThisQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::analysis::Analyzer MoreLikeThisQuery::getAnalyzer() const
          {
            return ::org::apache::lucene::analysis::Analyzer(env->callObjectMethod(this$, mids$[mid_getAnalyzer_347f60a9]));
          }

          ::java::lang::String MoreLikeThisQuery::getLikeText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLikeText_14c7b5c5]));
          }

          jint MoreLikeThisQuery::getMaxQueryTerms() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxQueryTerms_54c6a179]);
          }

          jint MoreLikeThisQuery::getMinDocFreq() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinDocFreq_54c6a179]);
          }

          jint MoreLikeThisQuery::getMinTermFrequency() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinTermFrequency_54c6a179]);
          }

          JArray< ::java::lang::String > MoreLikeThisQuery::getMoreLikeFields() const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getMoreLikeFields_2e6d5245]));
          }

          jfloat MoreLikeThisQuery::getPercentTermsToMatch() const
          {
            return env->callFloatMethod(this$, mids$[mid_getPercentTermsToMatch_54c6a176]);
          }

          ::java::util::Set MoreLikeThisQuery::getStopWords() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getStopWords_03e99967]));
          }

          jint MoreLikeThisQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query MoreLikeThisQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          void MoreLikeThisQuery::setAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAnalyzer_31619410], a0.this$);
          }

          void MoreLikeThisQuery::setLikeText(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setLikeText_5fdc3f48], a0.this$);
          }

          void MoreLikeThisQuery::setMaxQueryTerms(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxQueryTerms_39c7bd3c], a0);
          }

          void MoreLikeThisQuery::setMinDocFreq(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinDocFreq_39c7bd3c], a0);
          }

          void MoreLikeThisQuery::setMinTermFrequency(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinTermFrequency_39c7bd3c], a0);
          }

          void MoreLikeThisQuery::setMoreLikeFields(const JArray< ::java::lang::String > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMoreLikeFields_4dd4540c], a0.this$);
          }

          void MoreLikeThisQuery::setPercentTermsToMatch(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPercentTermsToMatch_06298cab], a0);
          }

          void MoreLikeThisQuery::setStopWords(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStopWords_fb4f2b26], a0.this$);
          }

          ::java::lang::String MoreLikeThisQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace mlt {
          static PyObject *t_MoreLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MoreLikeThisQuery_init_(t_MoreLikeThisQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MoreLikeThisQuery_equals(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_getAnalyzer(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getLikeText(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMaxQueryTerms(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMinDocFreq(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMinTermFrequency(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getMoreLikeFields(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getPercentTermsToMatch(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_getStopWords(t_MoreLikeThisQuery *self);
          static PyObject *t_MoreLikeThisQuery_hashCode(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_rewrite(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_setAnalyzer(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setLikeText(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMaxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMinDocFreq(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMinTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setMoreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setPercentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_setStopWords(t_MoreLikeThisQuery *self, PyObject *arg);
          static PyObject *t_MoreLikeThisQuery_toString(t_MoreLikeThisQuery *self, PyObject *args);
          static PyObject *t_MoreLikeThisQuery_get__analyzer(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__analyzer(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__likeText(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__likeText(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__maxQueryTerms(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__maxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__minDocFreq(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__minDocFreq(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__minTermFrequency(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__minTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__moreLikeFields(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__moreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__percentTermsToMatch(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__percentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyObject *t_MoreLikeThisQuery_get__stopWords(t_MoreLikeThisQuery *self, void *data);
          static int t_MoreLikeThisQuery_set__stopWords(t_MoreLikeThisQuery *self, PyObject *arg, void *data);
          static PyGetSetDef t_MoreLikeThisQuery__fields_[] = {
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, analyzer),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, likeText),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, maxQueryTerms),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, minDocFreq),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, minTermFrequency),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, moreLikeFields),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, percentTermsToMatch),
            DECLARE_GETSET_FIELD(t_MoreLikeThisQuery, stopWords),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MoreLikeThisQuery__methods_[] = {
            DECLARE_METHOD(t_MoreLikeThisQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThisQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MoreLikeThisQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getAnalyzer, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getLikeText, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMaxQueryTerms, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMinDocFreq, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMinTermFrequency, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getMoreLikeFields, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getPercentTermsToMatch, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, getStopWords, METH_NOARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_MoreLikeThisQuery, setAnalyzer, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setLikeText, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMaxQueryTerms, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMinDocFreq, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMinTermFrequency, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setMoreLikeFields, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setPercentTermsToMatch, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, setStopWords, METH_O),
            DECLARE_METHOD(t_MoreLikeThisQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MoreLikeThisQuery, t_MoreLikeThisQuery, ::org::apache::lucene::search::Query, MoreLikeThisQuery, t_MoreLikeThisQuery_init_, 0, 0, t_MoreLikeThisQuery__fields_, 0, 0);

          void t_MoreLikeThisQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(MoreLikeThisQuery), module, "MoreLikeThisQuery", 0);
          }

          void t_MoreLikeThisQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MoreLikeThisQuery).tp_dict, "class_", make_descriptor(MoreLikeThisQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MoreLikeThisQuery).tp_dict, "wrapfn_", make_descriptor(t_MoreLikeThisQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MoreLikeThisQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MoreLikeThisQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MoreLikeThisQuery::initializeClass, 1)))
              return NULL;
            return t_MoreLikeThisQuery::wrap_Object(MoreLikeThisQuery(((t_MoreLikeThisQuery *) arg)->object.this$));
          }
          static PyObject *t_MoreLikeThisQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MoreLikeThisQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MoreLikeThisQuery_init_(t_MoreLikeThisQuery *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            ::java::lang::String a3((jobject) NULL);
            MoreLikeThisQuery object((jobject) NULL);

            if (!parseArgs(args, "s[sks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
            {
              INT_CALL(object = MoreLikeThisQuery(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MoreLikeThisQuery_equals(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_getAnalyzer(t_MoreLikeThisQuery *self)
          {
            ::org::apache::lucene::analysis::Analyzer result((jobject) NULL);
            OBJ_CALL(result = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThisQuery_getLikeText(t_MoreLikeThisQuery *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLikeText());
            return j2p(result);
          }

          static PyObject *t_MoreLikeThisQuery_getMaxQueryTerms(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMinDocFreq(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinDocFreq());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMinTermFrequency(t_MoreLikeThisQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinTermFrequency());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_MoreLikeThisQuery_getMoreLikeFields(t_MoreLikeThisQuery *self)
          {
            JArray< ::java::lang::String > result((jobject) NULL);
            OBJ_CALL(result = self->object.getMoreLikeFields());
            return JArray<jstring>(result.this$).wrap();
          }

          static PyObject *t_MoreLikeThisQuery_getPercentTermsToMatch(t_MoreLikeThisQuery *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getPercentTermsToMatch());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_MoreLikeThisQuery_getStopWords(t_MoreLikeThisQuery *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(result);
          }

          static PyObject *t_MoreLikeThisQuery_hashCode(t_MoreLikeThisQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_rewrite(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_setAnalyzer(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setAnalyzer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAnalyzer", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setLikeText(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setLikeText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLikeText", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMaxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxQueryTerms(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxQueryTerms", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMinDocFreq(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinDocFreq(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinDocFreq", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMinTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinTermFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinTermFrequency", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setMoreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(self->object.setMoreLikeFields(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMoreLikeFields", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setPercentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setPercentTermsToMatch(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPercentTermsToMatch", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_setStopWords(t_MoreLikeThisQuery *self, PyObject *arg)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.setStopWords(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStopWords", arg);
            return NULL;
          }

          static PyObject *t_MoreLikeThisQuery_toString(t_MoreLikeThisQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(MoreLikeThisQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_MoreLikeThisQuery_get__analyzer(t_MoreLikeThisQuery *self, void *data)
          {
            ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
            OBJ_CALL(value = self->object.getAnalyzer());
            return ::org::apache::lucene::analysis::t_Analyzer::wrap_Object(value);
          }
          static int t_MoreLikeThisQuery_set__analyzer(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::Analyzer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::Analyzer::initializeClass, &value))
              {
                INT_CALL(self->object.setAnalyzer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "analyzer", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__likeText(t_MoreLikeThisQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLikeText());
            return j2p(value);
          }
          static int t_MoreLikeThisQuery_set__likeText(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setLikeText(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "likeText", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__maxQueryTerms(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxQueryTerms());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__maxQueryTerms(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxQueryTerms(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxQueryTerms", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__minDocFreq(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinDocFreq());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__minDocFreq(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinDocFreq(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minDocFreq", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__minTermFrequency(t_MoreLikeThisQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinTermFrequency());
            return PyInt_FromLong((long) value);
          }
          static int t_MoreLikeThisQuery_set__minTermFrequency(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinTermFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minTermFrequency", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__moreLikeFields(t_MoreLikeThisQuery *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object.getMoreLikeFields());
            return JArray<jstring>(value.this$).wrap();
          }
          static int t_MoreLikeThisQuery_set__moreLikeFields(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object.setMoreLikeFields(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "moreLikeFields", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__percentTermsToMatch(t_MoreLikeThisQuery *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getPercentTermsToMatch());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MoreLikeThisQuery_set__percentTermsToMatch(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setPercentTermsToMatch(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "percentTermsToMatch", arg);
            return -1;
          }

          static PyObject *t_MoreLikeThisQuery_get__stopWords(t_MoreLikeThisQuery *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object.getStopWords());
            return ::java::util::t_Set::wrap_Object(value);
          }
          static int t_MoreLikeThisQuery_set__stopWords(t_MoreLikeThisQuery *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Set value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Set::initializeClass, &value))
              {
                INT_CALL(self->object.setStopWords(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stopWords", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortField$Type::class$ = NULL;
        jmethodID *SortField$Type::mids$ = NULL;
        bool SortField$Type::live$ = false;
        SortField$Type *SortField$Type::BYTE = NULL;
        SortField$Type *SortField$Type::BYTES = NULL;
        SortField$Type *SortField$Type::CUSTOM = NULL;
        SortField$Type *SortField$Type::DOC = NULL;
        SortField$Type *SortField$Type::DOUBLE = NULL;
        SortField$Type *SortField$Type::FLOAT = NULL;
        SortField$Type *SortField$Type::INT = NULL;
        SortField$Type *SortField$Type::LONG = NULL;
        SortField$Type *SortField$Type::REWRITEABLE = NULL;
        SortField$Type *SortField$Type::SCORE = NULL;
        SortField$Type *SortField$Type::SHORT = NULL;
        SortField$Type *SortField$Type::STRING = NULL;
        SortField$Type *SortField$Type::STRING_VAL = NULL;

        jclass SortField$Type::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortField$Type");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_3d40a53b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/SortField$Type;");
            mids$[mid_values_05ae94bd] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/SortField$Type;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BYTE = new SortField$Type(env->getStaticObjectField(cls, "BYTE", "Lorg/apache/lucene/search/SortField$Type;"));
            BYTES = new SortField$Type(env->getStaticObjectField(cls, "BYTES", "Lorg/apache/lucene/search/SortField$Type;"));
            CUSTOM = new SortField$Type(env->getStaticObjectField(cls, "CUSTOM", "Lorg/apache/lucene/search/SortField$Type;"));
            DOC = new SortField$Type(env->getStaticObjectField(cls, "DOC", "Lorg/apache/lucene/search/SortField$Type;"));
            DOUBLE = new SortField$Type(env->getStaticObjectField(cls, "DOUBLE", "Lorg/apache/lucene/search/SortField$Type;"));
            FLOAT = new SortField$Type(env->getStaticObjectField(cls, "FLOAT", "Lorg/apache/lucene/search/SortField$Type;"));
            INT = new SortField$Type(env->getStaticObjectField(cls, "INT", "Lorg/apache/lucene/search/SortField$Type;"));
            LONG = new SortField$Type(env->getStaticObjectField(cls, "LONG", "Lorg/apache/lucene/search/SortField$Type;"));
            REWRITEABLE = new SortField$Type(env->getStaticObjectField(cls, "REWRITEABLE", "Lorg/apache/lucene/search/SortField$Type;"));
            SCORE = new SortField$Type(env->getStaticObjectField(cls, "SCORE", "Lorg/apache/lucene/search/SortField$Type;"));
            SHORT = new SortField$Type(env->getStaticObjectField(cls, "SHORT", "Lorg/apache/lucene/search/SortField$Type;"));
            STRING = new SortField$Type(env->getStaticObjectField(cls, "STRING", "Lorg/apache/lucene/search/SortField$Type;"));
            STRING_VAL = new SortField$Type(env->getStaticObjectField(cls, "STRING_VAL", "Lorg/apache/lucene/search/SortField$Type;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortField$Type SortField$Type::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SortField$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_3d40a53b], a0.this$));
        }

        JArray< SortField$Type > SortField$Type::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< SortField$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_05ae94bd]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortField$Type_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField$Type_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField$Type_of_(t_SortField$Type *self, PyObject *args);
        static PyObject *t_SortField$Type_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortField$Type_values(PyTypeObject *type);
        static PyObject *t_SortField$Type_get__parameters_(t_SortField$Type *self, void *data);
        static PyGetSetDef t_SortField$Type__fields_[] = {
          DECLARE_GET_FIELD(t_SortField$Type, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortField$Type__methods_[] = {
          DECLARE_METHOD(t_SortField$Type, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, of_, METH_VARARGS),
          DECLARE_METHOD(t_SortField$Type, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortField$Type, t_SortField$Type, ::java::lang::Enum, SortField$Type, abstract_init, 0, 0, t_SortField$Type__fields_, 0, 0);
        PyObject *t_SortField$Type::wrap_Object(const SortField$Type& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortField$Type::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortField$Type *self = (t_SortField$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SortField$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortField$Type::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortField$Type *self = (t_SortField$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SortField$Type::install(PyObject *module)
        {
          installType(&PY_TYPE(SortField$Type), module, "SortField$Type", 0);
        }

        void t_SortField$Type::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "class_", make_descriptor(SortField$Type::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "wrapfn_", make_descriptor(t_SortField$Type::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortField$Type::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "BYTE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::BYTE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "BYTES", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::BYTES)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "CUSTOM", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::CUSTOM)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "DOC", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::DOC)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "DOUBLE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::DOUBLE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "FLOAT", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::FLOAT)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "INT", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::INT)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "LONG", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::LONG)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "REWRITEABLE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::REWRITEABLE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "SCORE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::SCORE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "SHORT", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::SHORT)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "STRING", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::STRING)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "STRING_VAL", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::STRING_VAL)));
        }

        static PyObject *t_SortField$Type_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortField$Type::initializeClass, 1)))
            return NULL;
          return t_SortField$Type::wrap_Object(SortField$Type(((t_SortField$Type *) arg)->object.this$));
        }
        static PyObject *t_SortField$Type_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortField$Type::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortField$Type_of_(t_SortField$Type *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SortField$Type_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          SortField$Type result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortField$Type::valueOf(a0));
            return t_SortField$Type::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_SortField$Type_values(PyTypeObject *type)
        {
          JArray< SortField$Type > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::SortField$Type::values());
          return JArray<jobject>(result.this$).wrap(t_SortField$Type::wrap_jobject);
        }
        static PyObject *t_SortField$Type_get__parameters_(t_SortField$Type *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenizerFactory::class$ = NULL;
          jmethodID *EdgeNGramTokenizerFactory::mids$ = NULL;
          bool EdgeNGramTokenizerFactory::live$ = false;

          jclass EdgeNGramTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenizerFactory::EdgeNGramTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer EdgeNGramTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenizerFactory_init_(t_EdgeNGramTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramTokenizerFactory_create(t_EdgeNGramTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_EdgeNGramTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenizerFactory, t_EdgeNGramTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, EdgeNGramTokenizerFactory, t_EdgeNGramTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenizerFactory), module, "EdgeNGramTokenizerFactory", 0);
          }

          void t_EdgeNGramTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizerFactory).tp_dict, "class_", make_descriptor(EdgeNGramTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EdgeNGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenizerFactory::wrap_Object(EdgeNGramTokenizerFactory(((t_EdgeNGramTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenizerFactory_init_(t_EdgeNGramTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EdgeNGramTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EdgeNGramTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramTokenizerFactory_create(t_EdgeNGramTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EdgeNGramTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestMode::class$ = NULL;
          jmethodID *SuggestMode::mids$ = NULL;
          bool SuggestMode::live$ = false;
          SuggestMode *SuggestMode::SUGGEST_ALWAYS = NULL;
          SuggestMode *SuggestMode::SUGGEST_MORE_POPULAR = NULL;
          SuggestMode *SuggestMode::SUGGEST_WHEN_NOT_IN_INDEX = NULL;

          jclass SuggestMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_ca4a62d8] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/spell/SuggestMode;");
              mids$[mid_values_1d9d8b36] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/spell/SuggestMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SUGGEST_ALWAYS = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_ALWAYS", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              SUGGEST_MORE_POPULAR = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_MORE_POPULAR", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              SUGGEST_WHEN_NOT_IN_INDEX = new SuggestMode(env->getStaticObjectField(cls, "SUGGEST_WHEN_NOT_IN_INDEX", "Lorg/apache/lucene/search/spell/SuggestMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestMode SuggestMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return SuggestMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ca4a62d8], a0.this$));
          }

          JArray< SuggestMode > SuggestMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< SuggestMode >(env->callStaticObjectMethod(cls, mids$[mid_values_1d9d8b36]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestMode_of_(t_SuggestMode *self, PyObject *args);
          static PyObject *t_SuggestMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_SuggestMode_values(PyTypeObject *type);
          static PyObject *t_SuggestMode_get__parameters_(t_SuggestMode *self, void *data);
          static PyGetSetDef t_SuggestMode__fields_[] = {
            DECLARE_GET_FIELD(t_SuggestMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestMode__methods_[] = {
            DECLARE_METHOD(t_SuggestMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_SuggestMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SuggestMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestMode, t_SuggestMode, ::java::lang::Enum, SuggestMode, abstract_init, 0, 0, t_SuggestMode__fields_, 0, 0);
          PyObject *t_SuggestMode::wrap_Object(const SuggestMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestMode *self = (t_SuggestMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SuggestMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestMode *self = (t_SuggestMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SuggestMode::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestMode), module, "SuggestMode", 0);
          }

          void t_SuggestMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "class_", make_descriptor(SuggestMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "wrapfn_", make_descriptor(t_SuggestMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SuggestMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "SUGGEST_ALWAYS", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_ALWAYS)));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "SUGGEST_MORE_POPULAR", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_MORE_POPULAR)));
            PyDict_SetItemString(PY_TYPE(SuggestMode).tp_dict, "SUGGEST_WHEN_NOT_IN_INDEX", make_descriptor(t_SuggestMode::wrap_Object(*SuggestMode::SUGGEST_WHEN_NOT_IN_INDEX)));
          }

          static PyObject *t_SuggestMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestMode::initializeClass, 1)))
              return NULL;
            return t_SuggestMode::wrap_Object(SuggestMode(((t_SuggestMode *) arg)->object.this$));
          }
          static PyObject *t_SuggestMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SuggestMode_of_(t_SuggestMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_SuggestMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            SuggestMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::spell::SuggestMode::valueOf(a0));
              return t_SuggestMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_SuggestMode_values(PyTypeObject *type)
          {
            JArray< SuggestMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::spell::SuggestMode::values());
            return JArray<jobject>(result.this$).wrap(t_SuggestMode::wrap_jobject);
          }
          static PyObject *t_SuggestMode_get__parameters_(t_SuggestMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfo$DocValuesType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfo$DocValuesType::class$ = NULL;
        jmethodID *FieldInfo$DocValuesType::mids$ = NULL;
        bool FieldInfo$DocValuesType::live$ = false;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::BINARY = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::NUMERIC = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::SORTED = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::SORTED_NUMERIC = NULL;
        FieldInfo$DocValuesType *FieldInfo$DocValuesType::SORTED_SET = NULL;

        jclass FieldInfo$DocValuesType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfo$DocValuesType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_df70c72d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/FieldInfo$DocValuesType;");
            mids$[mid_values_3d388c3f] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/FieldInfo$DocValuesType;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BINARY = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "BINARY", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            NUMERIC = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "NUMERIC", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            SORTED = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "SORTED", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            SORTED_NUMERIC = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "SORTED_NUMERIC", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            SORTED_SET = new FieldInfo$DocValuesType(env->getStaticObjectField(cls, "SORTED_SET", "Lorg/apache/lucene/index/FieldInfo$DocValuesType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfo$DocValuesType FieldInfo$DocValuesType::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldInfo$DocValuesType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_df70c72d], a0.this$));
        }

        JArray< FieldInfo$DocValuesType > FieldInfo$DocValuesType::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< FieldInfo$DocValuesType >(env->callStaticObjectMethod(cls, mids$[mid_values_3d388c3f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfo$DocValuesType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$DocValuesType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfo$DocValuesType_of_(t_FieldInfo$DocValuesType *self, PyObject *args);
        static PyObject *t_FieldInfo$DocValuesType_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldInfo$DocValuesType_values(PyTypeObject *type);
        static PyObject *t_FieldInfo$DocValuesType_get__parameters_(t_FieldInfo$DocValuesType *self, void *data);
        static PyGetSetDef t_FieldInfo$DocValuesType__fields_[] = {
          DECLARE_GET_FIELD(t_FieldInfo$DocValuesType, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldInfo$DocValuesType__methods_[] = {
          DECLARE_METHOD(t_FieldInfo$DocValuesType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldInfo$DocValuesType, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfo$DocValuesType, t_FieldInfo$DocValuesType, ::java::lang::Enum, FieldInfo$DocValuesType, abstract_init, 0, 0, t_FieldInfo$DocValuesType__fields_, 0, 0);
        PyObject *t_FieldInfo$DocValuesType::wrap_Object(const FieldInfo$DocValuesType& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$DocValuesType::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$DocValuesType *self = (t_FieldInfo$DocValuesType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldInfo$DocValuesType::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldInfo$DocValuesType::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldInfo$DocValuesType *self = (t_FieldInfo$DocValuesType *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldInfo$DocValuesType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfo$DocValuesType), module, "FieldInfo$DocValuesType", 0);
        }

        void t_FieldInfo$DocValuesType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "class_", make_descriptor(FieldInfo$DocValuesType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "wrapfn_", make_descriptor(t_FieldInfo$DocValuesType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldInfo$DocValuesType::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "BINARY", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::BINARY)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "NUMERIC", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::NUMERIC)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "SORTED", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::SORTED)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "SORTED_NUMERIC", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::SORTED_NUMERIC)));
          PyDict_SetItemString(PY_TYPE(FieldInfo$DocValuesType).tp_dict, "SORTED_SET", make_descriptor(t_FieldInfo$DocValuesType::wrap_Object(*FieldInfo$DocValuesType::SORTED_SET)));
        }

        static PyObject *t_FieldInfo$DocValuesType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfo$DocValuesType::initializeClass, 1)))
            return NULL;
          return t_FieldInfo$DocValuesType::wrap_Object(FieldInfo$DocValuesType(((t_FieldInfo$DocValuesType *) arg)->object.this$));
        }
        static PyObject *t_FieldInfo$DocValuesType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfo$DocValuesType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfo$DocValuesType_of_(t_FieldInfo$DocValuesType *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldInfo$DocValuesType_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          FieldInfo$DocValuesType result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$DocValuesType::valueOf(a0));
            return t_FieldInfo$DocValuesType::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_FieldInfo$DocValuesType_values(PyTypeObject *type)
        {
          JArray< FieldInfo$DocValuesType > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::FieldInfo$DocValuesType::values());
          return JArray<jobject>(result.this$).wrap(t_FieldInfo$DocValuesType::wrap_jobject);
        }
        static PyObject *t_FieldInfo$DocValuesType_get__parameters_(t_FieldInfo$DocValuesType *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/BooleanModifierNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *BooleanModifierNode::class$ = NULL;
              jmethodID *BooleanModifierNode::mids$ = NULL;
              bool BooleanModifierNode::live$ = false;

              jclass BooleanModifierNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/BooleanModifierNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_6bd34b3d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanModifierNode::BooleanModifierNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode(env->newObject(initializeClass, &mids$, mid_init$_6bd34b3d, a0.this$, a1.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_BooleanModifierNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanModifierNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanModifierNode_init_(t_BooleanModifierNode *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BooleanModifierNode__methods_[] = {
                DECLARE_METHOD(t_BooleanModifierNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifierNode, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanModifierNode, t_BooleanModifierNode, ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode, BooleanModifierNode, t_BooleanModifierNode_init_, 0, 0, 0, 0, 0);

              void t_BooleanModifierNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanModifierNode), module, "BooleanModifierNode", 0);
              }

              void t_BooleanModifierNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanModifierNode).tp_dict, "class_", make_descriptor(BooleanModifierNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanModifierNode).tp_dict, "wrapfn_", make_descriptor(t_BooleanModifierNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanModifierNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanModifierNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanModifierNode::initializeClass, 1)))
                  return NULL;
                return t_BooleanModifierNode::wrap_Object(BooleanModifierNode(((t_BooleanModifierNode *) arg)->object.this$));
              }
              static PyObject *t_BooleanModifierNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanModifierNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanModifierNode_init_(t_BooleanModifierNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier a1((jobject) NULL);
                PyTypeObject **p1;
                BooleanModifierNode object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::parameters_))
                {
                  INT_CALL(object = BooleanModifierNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToChildBlockJoinQuery.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToChildBlockJoinQuery::class$ = NULL;
          jmethodID *ToChildBlockJoinQuery::mids$ = NULL;
          bool ToChildBlockJoinQuery::live$ = false;

          jclass ToChildBlockJoinQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToChildBlockJoinQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4a597592] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Z)V");
              mids$[mid_clone_c3569be0] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/join/ToChildBlockJoinQuery;");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToChildBlockJoinQuery::ToChildBlockJoinQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, jboolean a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_4a597592, a0.this$, a1.this$, a2)) {}

          ToChildBlockJoinQuery ToChildBlockJoinQuery::clone() const
          {
            return ToChildBlockJoinQuery(env->callObjectMethod(this$, mids$[mid_clone_c3569be0]));
          }

          ::org::apache::lucene::search::Weight ToChildBlockJoinQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean ToChildBlockJoinQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void ToChildBlockJoinQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          jint ToChildBlockJoinQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query ToChildBlockJoinQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String ToChildBlockJoinQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToChildBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToChildBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToChildBlockJoinQuery_init_(t_ToChildBlockJoinQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToChildBlockJoinQuery_clone(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_createWeight(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_equals(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_extractTerms(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_hashCode(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_rewrite(t_ToChildBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToChildBlockJoinQuery_toString(t_ToChildBlockJoinQuery *self, PyObject *args);

          static PyMethodDef t_ToChildBlockJoinQuery__methods_[] = {
            DECLARE_METHOD(t_ToChildBlockJoinQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_ToChildBlockJoinQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToChildBlockJoinQuery, t_ToChildBlockJoinQuery, ::org::apache::lucene::search::Query, ToChildBlockJoinQuery, t_ToChildBlockJoinQuery_init_, 0, 0, 0, 0, 0);

          void t_ToChildBlockJoinQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ToChildBlockJoinQuery), module, "ToChildBlockJoinQuery", 0);
          }

          void t_ToChildBlockJoinQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToChildBlockJoinQuery).tp_dict, "class_", make_descriptor(ToChildBlockJoinQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToChildBlockJoinQuery).tp_dict, "wrapfn_", make_descriptor(t_ToChildBlockJoinQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToChildBlockJoinQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToChildBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToChildBlockJoinQuery::initializeClass, 1)))
              return NULL;
            return t_ToChildBlockJoinQuery::wrap_Object(ToChildBlockJoinQuery(((t_ToChildBlockJoinQuery *) arg)->object.this$));
          }
          static PyObject *t_ToChildBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToChildBlockJoinQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToChildBlockJoinQuery_init_(t_ToChildBlockJoinQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            jboolean a2;
            ToChildBlockJoinQuery object((jobject) NULL);

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = ToChildBlockJoinQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToChildBlockJoinQuery_clone(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ToChildBlockJoinQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_ToChildBlockJoinQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_createWeight(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_equals(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_extractTerms(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_hashCode(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_rewrite(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_ToChildBlockJoinQuery_toString(t_ToChildBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ToChildBlockJoinQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
