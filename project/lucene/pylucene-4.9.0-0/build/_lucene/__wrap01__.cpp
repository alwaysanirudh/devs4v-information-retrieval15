#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "java/lang/Class.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsFormat::class$ = NULL;
        jmethodID *PostingsFormat::mids$ = NULL;
        bool PostingsFormat::live$ = false;
        JArray< PostingsFormat > *PostingsFormat::EMPTY = NULL;

        jclass PostingsFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availablePostingsFormats_03e99967] = env->getStaticMethodID(cls, "availablePostingsFormats", "()Ljava/util/Set;");
            mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
            mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
            mids$[mid_forName_19d2f1c6] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_reloadPostingsFormats_9110048d] = env->getStaticMethodID(cls, "reloadPostingsFormats", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new JArray< PostingsFormat >(env->getStaticObjectField(cls, "EMPTY", "[Lorg/apache/lucene/codecs/PostingsFormat;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set PostingsFormat::availablePostingsFormats()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availablePostingsFormats_03e99967]));
        }

        ::org::apache::lucene::codecs::FieldsConsumer PostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
        }

        ::org::apache::lucene::codecs::FieldsProducer PostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
        }

        PostingsFormat PostingsFormat::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return PostingsFormat(env->callStaticObjectMethod(cls, mids$[mid_forName_19d2f1c6], a0.this$));
        }

        ::java::lang::String PostingsFormat::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        void PostingsFormat::reloadPostingsFormats(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadPostingsFormats_9110048d], a0.this$);
        }

        ::java::lang::String PostingsFormat::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_availablePostingsFormats(PyTypeObject *type);
        static PyObject *t_PostingsFormat_fieldsConsumer(t_PostingsFormat *self, PyObject *arg);
        static PyObject *t_PostingsFormat_fieldsProducer(t_PostingsFormat *self, PyObject *arg);
        static PyObject *t_PostingsFormat_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_getName(t_PostingsFormat *self);
        static PyObject *t_PostingsFormat_reloadPostingsFormats(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsFormat_toString(t_PostingsFormat *self, PyObject *args);
        static PyObject *t_PostingsFormat_get__name(t_PostingsFormat *self, void *data);
        static PyGetSetDef t_PostingsFormat__fields_[] = {
          DECLARE_GET_FIELD(t_PostingsFormat, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsFormat__methods_[] = {
          DECLARE_METHOD(t_PostingsFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, availablePostingsFormats, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, fieldsConsumer, METH_O),
          DECLARE_METHOD(t_PostingsFormat, fieldsProducer, METH_O),
          DECLARE_METHOD(t_PostingsFormat, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, getName, METH_NOARGS),
          DECLARE_METHOD(t_PostingsFormat, reloadPostingsFormats, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsFormat, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsFormat, t_PostingsFormat, ::java::lang::Object, PostingsFormat, abstract_init, 0, 0, t_PostingsFormat__fields_, 0, 0);

        void t_PostingsFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsFormat), module, "PostingsFormat", 0);
        }

        void t_PostingsFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "class_", make_descriptor(PostingsFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_PostingsFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(PostingsFormat::initializeClass);
          PyDict_SetItemString(PY_TYPE(PostingsFormat).tp_dict, "EMPTY", make_descriptor(JArray<jobject>(PostingsFormat::EMPTY->this$).wrap(t_PostingsFormat::wrap_jobject)));
        }

        static PyObject *t_PostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsFormat::initializeClass, 1)))
            return NULL;
          return t_PostingsFormat::wrap_Object(PostingsFormat(((t_PostingsFormat *) arg)->object.this$));
        }
        static PyObject *t_PostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsFormat_availablePostingsFormats(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::PostingsFormat::availablePostingsFormats());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_PostingsFormat_fieldsConsumer(t_PostingsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsConsumer(a0));
            return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsConsumer", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_fieldsProducer(t_PostingsFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsProducer(a0));
            return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsProducer", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          PostingsFormat result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::PostingsFormat::forName(a0));
            return t_PostingsFormat::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_getName(t_PostingsFormat *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_PostingsFormat_reloadPostingsFormats(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::PostingsFormat::reloadPostingsFormats(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadPostingsFormats", arg);
          return NULL;
        }

        static PyObject *t_PostingsFormat_toString(t_PostingsFormat *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PostingsFormat), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PostingsFormat_get__name(t_PostingsFormat *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonCharTokenizer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonCharTokenizer::class$ = NULL;
        jmethodID *PythonCharTokenizer::mids$ = NULL;
        bool PythonCharTokenizer::live$ = false;

        jclass PythonCharTokenizer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonCharTokenizer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");
            mids$[mid_normalize_39c7bd23] = env->getMethodID(cls, "normalize", "(I)I");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonCharTokenizer::PythonCharTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

        void PythonCharTokenizer::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jint PythonCharTokenizer::normalize(jint a0) const
        {
          return env->callNonvirtualIntMethod(this$, (jclass) ::org::apache::lucene::analysis::util::CharTokenizer::class$->this$, ::org::apache::lucene::analysis::util::CharTokenizer::mids$[::org::apache::lucene::analysis::util::CharTokenizer::mid_normalize_39c7bd23], a0);
        }

        jlong PythonCharTokenizer::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonCharTokenizer::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonCharTokenizer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonCharTokenizer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonCharTokenizer_init_(t_PythonCharTokenizer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonCharTokenizer_finalize(t_PythonCharTokenizer *self);
        static PyObject *t_PythonCharTokenizer_normalize(t_PythonCharTokenizer *self, PyObject *arg);
        static PyObject *t_PythonCharTokenizer_pythonExtension(t_PythonCharTokenizer *self, PyObject *args);
        static jboolean JNICALL t_PythonCharTokenizer_isTokenChar0(JNIEnv *jenv, jobject jobj, jint a0);
        static jint JNICALL t_PythonCharTokenizer_normalize1(JNIEnv *jenv, jobject jobj, jint a0);
        static void JNICALL t_PythonCharTokenizer_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonCharTokenizer_get__self(t_PythonCharTokenizer *self, void *data);
        static PyGetSetDef t_PythonCharTokenizer__fields_[] = {
          DECLARE_GET_FIELD(t_PythonCharTokenizer, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonCharTokenizer__methods_[] = {
          DECLARE_METHOD(t_PythonCharTokenizer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCharTokenizer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCharTokenizer, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonCharTokenizer, normalize, METH_O),
          DECLARE_METHOD(t_PythonCharTokenizer, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonCharTokenizer, t_PythonCharTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, PythonCharTokenizer, t_PythonCharTokenizer_init_, 0, 0, t_PythonCharTokenizer__fields_, 0, 0);

        void t_PythonCharTokenizer::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonCharTokenizer), module, "PythonCharTokenizer", 1);
        }

        void t_PythonCharTokenizer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonCharTokenizer).tp_dict, "class_", make_descriptor(PythonCharTokenizer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonCharTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PythonCharTokenizer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonCharTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonCharTokenizer::initializeClass);
          JNINativeMethod methods[] = {
            { "isTokenChar", "(I)Z", (void *) t_PythonCharTokenizer_isTokenChar0 },
            { "normalize", "(I)I", (void *) t_PythonCharTokenizer_normalize1 },
            { "pythonDecRef", "()V", (void *) t_PythonCharTokenizer_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonCharTokenizer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonCharTokenizer::initializeClass, 1)))
            return NULL;
          return t_PythonCharTokenizer::wrap_Object(PythonCharTokenizer(((t_PythonCharTokenizer *) arg)->object.this$));
        }
        static PyObject *t_PythonCharTokenizer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonCharTokenizer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonCharTokenizer_init_(t_PythonCharTokenizer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::io::Reader a1((jobject) NULL);
          PythonCharTokenizer object((jobject) NULL);

          if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
          {
            INT_CALL(object = PythonCharTokenizer(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonCharTokenizer_finalize(t_PythonCharTokenizer *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonCharTokenizer_normalize(t_PythonCharTokenizer *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.normalize(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "normalize", arg);
          return NULL;
        }

        static PyObject *t_PythonCharTokenizer_pythonExtension(t_PythonCharTokenizer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonCharTokenizer_isTokenChar0(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isTokenChar", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isTokenChar", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jint JNICALL t_PythonCharTokenizer_normalize1(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "normalize", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("normalize", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonCharTokenizer_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonCharTokenizer_get__self(t_PythonCharTokenizer *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishPossessiveFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishPossessiveFilter::class$ = NULL;
          jmethodID *EnglishPossessiveFilter::mids$ = NULL;
          bool EnglishPossessiveFilter::live$ = false;

          jclass EnglishPossessiveFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishPossessiveFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishPossessiveFilter::EnglishPossessiveFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          EnglishPossessiveFilter::EnglishPossessiveFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean EnglishPossessiveFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishPossessiveFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishPossessiveFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishPossessiveFilter_init_(t_EnglishPossessiveFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishPossessiveFilter_incrementToken(t_EnglishPossessiveFilter *self, PyObject *args);

          static PyMethodDef t_EnglishPossessiveFilter__methods_[] = {
            DECLARE_METHOD(t_EnglishPossessiveFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishPossessiveFilter, t_EnglishPossessiveFilter, ::org::apache::lucene::analysis::TokenFilter, EnglishPossessiveFilter, t_EnglishPossessiveFilter_init_, 0, 0, 0, 0, 0);

          void t_EnglishPossessiveFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishPossessiveFilter), module, "EnglishPossessiveFilter", 0);
          }

          void t_EnglishPossessiveFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilter).tp_dict, "class_", make_descriptor(EnglishPossessiveFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilter).tp_dict, "wrapfn_", make_descriptor(t_EnglishPossessiveFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishPossessiveFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishPossessiveFilter::initializeClass, 1)))
              return NULL;
            return t_EnglishPossessiveFilter::wrap_Object(EnglishPossessiveFilter(((t_EnglishPossessiveFilter *) arg)->object.this$));
          }
          static PyObject *t_EnglishPossessiveFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishPossessiveFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishPossessiveFilter_init_(t_EnglishPossessiveFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                EnglishPossessiveFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = EnglishPossessiveFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                EnglishPossessiveFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = EnglishPossessiveFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishPossessiveFilter_incrementToken(t_EnglishPossessiveFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EnglishPossessiveFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/store/Directory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentWriteState::class$ = NULL;
        jmethodID *SegmentWriteState::mids$ = NULL;
        jfieldID *SegmentWriteState::fids$ = NULL;
        bool SegmentWriteState::live$ = false;

        jclass SegmentWriteState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentWriteState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_bde10a1b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext;");
            fids$[fid_delCountOnFlush] = env->getFieldID(cls, "delCountOnFlush", "I");
            fids$[fid_directory] = env->getFieldID(cls, "directory", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_infoStream] = env->getFieldID(cls, "infoStream", "Lorg/apache/lucene/util/InfoStream;");
            fids$[fid_liveDocs] = env->getFieldID(cls, "liveDocs", "Lorg/apache/lucene/util/MutableBits;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");
            fids$[fid_segmentSuffix] = env->getFieldID(cls, "segmentSuffix", "Ljava/lang/String;");
            fids$[fid_termIndexInterval] = env->getFieldID(cls, "termIndexInterval", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentWriteState::SegmentWriteState(const SegmentWriteState & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bde10a1b, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IOContext SegmentWriteState::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext(env->getObjectField(this$, fids$[fid_context]));
        }

        jint SegmentWriteState::_get_delCountOnFlush() const
        {
          return env->getIntField(this$, fids$[fid_delCountOnFlush]);
        }

        void SegmentWriteState::_set_delCountOnFlush(jint a0) const
        {
          env->setIntField(this$, fids$[fid_delCountOnFlush], a0);
        }

        ::org::apache::lucene::store::Directory SegmentWriteState::_get_directory() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_directory]));
        }

        ::org::apache::lucene::index::FieldInfos SegmentWriteState::_get_fieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        ::org::apache::lucene::util::InfoStream SegmentWriteState::_get_infoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->getObjectField(this$, fids$[fid_infoStream]));
        }

        ::org::apache::lucene::util::MutableBits SegmentWriteState::_get_liveDocs() const
        {
          return ::org::apache::lucene::util::MutableBits(env->getObjectField(this$, fids$[fid_liveDocs]));
        }

        void SegmentWriteState::_set_liveDocs(const ::org::apache::lucene::util::MutableBits & a0) const
        {
          env->setObjectField(this$, fids$[fid_liveDocs], a0.this$);
        }

        ::org::apache::lucene::index::SegmentInfo SegmentWriteState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }

        ::java::lang::String SegmentWriteState::_get_segmentSuffix() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentSuffix]));
        }

        jint SegmentWriteState::_get_termIndexInterval() const
        {
          return env->getIntField(this$, fids$[fid_termIndexInterval]);
        }

        void SegmentWriteState::_set_termIndexInterval(jint a0) const
        {
          env->setIntField(this$, fids$[fid_termIndexInterval], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentWriteState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentWriteState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentWriteState_init_(t_SegmentWriteState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentWriteState_get__context(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__delCountOnFlush(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__delCountOnFlush(t_SegmentWriteState *self, PyObject *arg, void *data);
        static PyObject *t_SegmentWriteState_get__directory(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__fieldInfos(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__infoStream(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__liveDocs(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__liveDocs(t_SegmentWriteState *self, PyObject *arg, void *data);
        static PyObject *t_SegmentWriteState_get__segmentInfo(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__segmentSuffix(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__termIndexInterval(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__termIndexInterval(t_SegmentWriteState *self, PyObject *arg, void *data);

        static PyGetSetDef t_SegmentWriteState__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentWriteState, context),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, delCountOnFlush),
          DECLARE_GET_FIELD(t_SegmentWriteState, directory),
          DECLARE_GET_FIELD(t_SegmentWriteState, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentWriteState, infoStream),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, liveDocs),
          DECLARE_GET_FIELD(t_SegmentWriteState, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentWriteState, segmentSuffix),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, termIndexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentWriteState__methods_[] = {
          DECLARE_METHOD(t_SegmentWriteState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentWriteState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentWriteState, t_SegmentWriteState, ::java::lang::Object, SegmentWriteState, t_SegmentWriteState_init_, 0, 0, t_SegmentWriteState__fields_, 0, 0);

        void t_SegmentWriteState::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentWriteState), module, "SegmentWriteState", 0);
        }

        void t_SegmentWriteState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentWriteState).tp_dict, "class_", make_descriptor(SegmentWriteState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentWriteState).tp_dict, "wrapfn_", make_descriptor(t_SegmentWriteState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentWriteState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentWriteState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentWriteState::initializeClass, 1)))
            return NULL;
          return t_SegmentWriteState::wrap_Object(SegmentWriteState(((t_SegmentWriteState *) arg)->object.this$));
        }
        static PyObject *t_SegmentWriteState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentWriteState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentWriteState_init_(t_SegmentWriteState *self, PyObject *args, PyObject *kwds)
        {
          SegmentWriteState a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          SegmentWriteState object((jobject) NULL);

          if (!parseArgs(args, "ks", SegmentWriteState::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SegmentWriteState(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentWriteState_get__context(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::store::IOContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__delCountOnFlush(t_SegmentWriteState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_delCountOnFlush());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentWriteState_set__delCountOnFlush(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_delCountOnFlush(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "delCountOnFlush", arg);
          return -1;
        }

        static PyObject *t_SegmentWriteState_get__directory(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__fieldInfos(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__infoStream(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object._get_infoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__liveDocs(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::util::MutableBits value((jobject) NULL);
          OBJ_CALL(value = self->object._get_liveDocs());
          return ::org::apache::lucene::util::t_MutableBits::wrap_Object(value);
        }
        static int t_SegmentWriteState_set__liveDocs(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::util::MutableBits value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::util::MutableBits::initializeClass, &value))
          {
            INT_CALL(self->object._set_liveDocs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "liveDocs", arg);
          return -1;
        }

        static PyObject *t_SegmentWriteState_get__segmentInfo(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__segmentSuffix(t_SegmentWriteState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentSuffix());
          return j2p(value);
        }

        static PyObject *t_SegmentWriteState_get__termIndexInterval(t_SegmentWriteState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_termIndexInterval());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentWriteState_set__termIndexInterval(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_termIndexInterval(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizerImpl40.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl40::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl40::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl40::live$ = false;
            jint UAX29URLEmailTokenizerImpl40::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl40::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizerImpl40");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl40::UAX29URLEmailTokenizerImpl40(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl40::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl40::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl40::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl40::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl40::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl40::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl40::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl40::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl40::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl40::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl40::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {
            static PyObject *t_UAX29URLEmailTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl40_init_(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_getNextToken(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_getText(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yybegin(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yychar(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yycharat(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyclose(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yylength(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yypushback(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyreset(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yystate(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yytext(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_get__nextToken(t_UAX29URLEmailTokenizerImpl40 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl40__fields_[] = {
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl40, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl40__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl40, t_UAX29URLEmailTokenizerImpl40, ::java::lang::Object, UAX29URLEmailTokenizerImpl40, t_UAX29URLEmailTokenizerImpl40_init_, 0, 0, t_UAX29URLEmailTokenizerImpl40__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl40::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl40), module, "UAX29URLEmailTokenizerImpl40", 0);
            }

            void t_UAX29URLEmailTokenizerImpl40::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl40::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl40::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl40::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl40::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl40::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl40::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl40::wrap_Object(UAX29URLEmailTokenizerImpl40(((t_UAX29URLEmailTokenizerImpl40 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl40::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl40_init_(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl40 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl40(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_getNextToken(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_getText(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yybegin(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yychar(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yycharat(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyclose(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yylength(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yypushback(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyreset(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yystate(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yytext(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_get__nextToken(t_UAX29URLEmailTokenizerImpl40 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilderFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *ConstantScoreQueryBuilder::class$ = NULL;
            jmethodID *ConstantScoreQueryBuilder::mids$ = NULL;
            bool ConstantScoreQueryBuilder::live$ = false;

            jclass ConstantScoreQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_08e51f07] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/FilterBuilderFactory;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstantScoreQueryBuilder::ConstantScoreQueryBuilder(const ::org::apache::lucene::queryparser::xml::FilterBuilderFactory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_08e51f07, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_ConstantScoreQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstantScoreQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstantScoreQueryBuilder_init_(t_ConstantScoreQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_ConstantScoreQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_ConstantScoreQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstantScoreQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ConstantScoreQueryBuilder, t_ConstantScoreQueryBuilder, ::java::lang::Object, ConstantScoreQueryBuilder, t_ConstantScoreQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_ConstantScoreQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstantScoreQueryBuilder), module, "ConstantScoreQueryBuilder", 0);
            }

            void t_ConstantScoreQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ConstantScoreQueryBuilder).tp_dict, "class_", make_descriptor(ConstantScoreQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ConstantScoreQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_ConstantScoreQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ConstantScoreQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstantScoreQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstantScoreQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_ConstantScoreQueryBuilder::wrap_Object(ConstantScoreQueryBuilder(((t_ConstantScoreQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_ConstantScoreQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstantScoreQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstantScoreQueryBuilder_init_(t_ConstantScoreQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::FilterBuilderFactory a0((jobject) NULL);
              ConstantScoreQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::FilterBuilderFactory::initializeClass, &a0))
              {
                INT_CALL(object = ConstantScoreQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/BlockPackedReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *BlockPackedReader::class$ = NULL;
          jmethodID *BlockPackedReader::mids$ = NULL;
          bool BlockPackedReader::live$ = false;

          jclass BlockPackedReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/BlockPackedReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f9e6aacc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/IndexInput;IIJZ)V");
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockPackedReader::BlockPackedReader(const ::org::apache::lucene::store::IndexInput & a0, jint a1, jint a2, jlong a3, jboolean a4) : ::org::apache::lucene::util::LongValues(env->newObject(initializeClass, &mids$, mid_init$_f9e6aacc, a0.this$, a1, a2, a3, a4)) {}

          jlong BlockPackedReader::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          jlong BlockPackedReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_BlockPackedReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockPackedReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockPackedReader_init_(t_BlockPackedReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockPackedReader_get(t_BlockPackedReader *self, PyObject *args);
          static PyObject *t_BlockPackedReader_ramBytesUsed(t_BlockPackedReader *self);

          static PyMethodDef t_BlockPackedReader__methods_[] = {
            DECLARE_METHOD(t_BlockPackedReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockPackedReader, get, METH_VARARGS),
            DECLARE_METHOD(t_BlockPackedReader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockPackedReader, t_BlockPackedReader, ::org::apache::lucene::util::LongValues, BlockPackedReader, t_BlockPackedReader_init_, 0, 0, 0, 0, 0);

          void t_BlockPackedReader::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockPackedReader), module, "BlockPackedReader", 0);
          }

          void t_BlockPackedReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockPackedReader).tp_dict, "class_", make_descriptor(BlockPackedReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockPackedReader).tp_dict, "wrapfn_", make_descriptor(t_BlockPackedReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockPackedReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockPackedReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockPackedReader::initializeClass, 1)))
              return NULL;
            return t_BlockPackedReader::wrap_Object(BlockPackedReader(((t_BlockPackedReader *) arg)->object.this$));
          }
          static PyObject *t_BlockPackedReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockPackedReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockPackedReader_init_(t_BlockPackedReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
            jint a1;
            jint a2;
            jlong a3;
            jboolean a4;
            BlockPackedReader object((jobject) NULL);

            if (!parseArgs(args, "kIIJZ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = BlockPackedReader(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockPackedReader_get(t_BlockPackedReader *self, PyObject *args)
          {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
              OBJ_CALL(result = self->object.get(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(BlockPackedReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_BlockPackedReader_ramBytesUsed(t_BlockPackedReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$CacheEntry::class$ = NULL;
        jmethodID *FieldCache$CacheEntry::mids$ = NULL;
        bool FieldCache$CacheEntry::live$ = false;

        jclass FieldCache$CacheEntry::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$CacheEntry");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6f799b58] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Object;Lorg/apache/lucene/util/Accountable;)V");
            mids$[mid_getCacheType_44a5f2c9] = env->getMethodID(cls, "getCacheType", "()Ljava/lang/Class;");
            mids$[mid_getCustom_846352c3] = env->getMethodID(cls, "getCustom", "()Ljava/lang/Object;");
            mids$[mid_getEstimatedSize_14c7b5c5] = env->getMethodID(cls, "getEstimatedSize", "()Ljava/lang/String;");
            mids$[mid_getFieldName_14c7b5c5] = env->getMethodID(cls, "getFieldName", "()Ljava/lang/String;");
            mids$[mid_getReaderKey_846352c3] = env->getMethodID(cls, "getReaderKey", "()Ljava/lang/Object;");
            mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$CacheEntry::FieldCache$CacheEntry(const ::java::lang::Object & a0, const ::java::lang::String & a1, const ::java::lang::Class & a2, const ::java::lang::Object & a3, const ::org::apache::lucene::util::Accountable & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f799b58, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

        ::java::lang::Class FieldCache$CacheEntry::getCacheType() const
        {
          return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getCacheType_44a5f2c9]));
        }

        ::java::lang::Object FieldCache$CacheEntry::getCustom() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCustom_846352c3]));
        }

        ::java::lang::String FieldCache$CacheEntry::getEstimatedSize() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getEstimatedSize_14c7b5c5]));
        }

        ::java::lang::String FieldCache$CacheEntry::getFieldName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldName_14c7b5c5]));
        }

        ::java::lang::Object FieldCache$CacheEntry::getReaderKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getReaderKey_846352c3]));
        }

        ::java::lang::Object FieldCache$CacheEntry::getValue() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
        }

        ::java::lang::String FieldCache$CacheEntry::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$CacheEntry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$CacheEntry_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$CacheEntry_init_(t_FieldCache$CacheEntry *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$CacheEntry_getCacheType(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getCustom(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getEstimatedSize(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getFieldName(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getReaderKey(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_getValue(t_FieldCache$CacheEntry *self);
        static PyObject *t_FieldCache$CacheEntry_toString(t_FieldCache$CacheEntry *self, PyObject *args);
        static PyObject *t_FieldCache$CacheEntry_get__cacheType(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__custom(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__estimatedSize(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__fieldName(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__readerKey(t_FieldCache$CacheEntry *self, void *data);
        static PyObject *t_FieldCache$CacheEntry_get__value(t_FieldCache$CacheEntry *self, void *data);
        static PyGetSetDef t_FieldCache$CacheEntry__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, cacheType),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, custom),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, estimatedSize),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, fieldName),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, readerKey),
          DECLARE_GET_FIELD(t_FieldCache$CacheEntry, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCache$CacheEntry__methods_[] = {
          DECLARE_METHOD(t_FieldCache$CacheEntry, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getCacheType, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getCustom, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getEstimatedSize, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getFieldName, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getReaderKey, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, getValue, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache$CacheEntry, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$CacheEntry, t_FieldCache$CacheEntry, ::java::lang::Object, FieldCache$CacheEntry, t_FieldCache$CacheEntry_init_, 0, 0, t_FieldCache$CacheEntry__fields_, 0, 0);

        void t_FieldCache$CacheEntry::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$CacheEntry), module, "FieldCache$CacheEntry", 0);
        }

        void t_FieldCache$CacheEntry::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$CacheEntry).tp_dict, "class_", make_descriptor(FieldCache$CacheEntry::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$CacheEntry).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$CacheEntry::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$CacheEntry).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$CacheEntry_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$CacheEntry::initializeClass, 1)))
            return NULL;
          return t_FieldCache$CacheEntry::wrap_Object(FieldCache$CacheEntry(((t_FieldCache$CacheEntry *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$CacheEntry_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$CacheEntry::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$CacheEntry_init_(t_FieldCache$CacheEntry *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::Class a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::lang::Object a3((jobject) NULL);
          ::org::apache::lucene::util::Accountable a4((jobject) NULL);
          FieldCache$CacheEntry object((jobject) NULL);

          if (!parseArgs(args, "osKok", ::java::lang::Class::initializeClass, ::org::apache::lucene::util::Accountable::initializeClass, &a0, &a1, &a2, &p2, ::java::lang::t_Class::parameters_, &a3, &a4))
          {
            INT_CALL(object = FieldCache$CacheEntry(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCache$CacheEntry_getCacheType(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Class result((jobject) NULL);
          OBJ_CALL(result = self->object.getCacheType());
          return ::java::lang::t_Class::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getCustom(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getCustom());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getEstimatedSize(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getEstimatedSize());
          return j2p(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getFieldName(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldName());
          return j2p(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getReaderKey(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getReaderKey());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_getValue(t_FieldCache$CacheEntry *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getValue());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_FieldCache$CacheEntry_toString(t_FieldCache$CacheEntry *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCache$CacheEntry), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FieldCache$CacheEntry_get__cacheType(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Class value((jobject) NULL);
          OBJ_CALL(value = self->object.getCacheType());
          return ::java::lang::t_Class::wrap_Object(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__custom(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCustom());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__estimatedSize(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getEstimatedSize());
          return j2p(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__fieldName(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldName());
          return j2p(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__readerKey(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getReaderKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_FieldCache$CacheEntry_get__value(t_FieldCache$CacheEntry *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getValue());
          return ::java::lang::t_Object::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IOContext$Context::class$ = NULL;
        jmethodID *IOContext$Context::mids$ = NULL;
        bool IOContext$Context::live$ = false;
        IOContext$Context *IOContext$Context::DEFAULT = NULL;
        IOContext$Context *IOContext$Context::FLUSH = NULL;
        IOContext$Context *IOContext$Context::MERGE = NULL;
        IOContext$Context *IOContext$Context::READ = NULL;

        jclass IOContext$Context::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IOContext$Context");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_6cdc8b82] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/store/IOContext$Context;");
            mids$[mid_values_8c68e654] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/store/IOContext$Context;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT = new IOContext$Context(env->getStaticObjectField(cls, "DEFAULT", "Lorg/apache/lucene/store/IOContext$Context;"));
            FLUSH = new IOContext$Context(env->getStaticObjectField(cls, "FLUSH", "Lorg/apache/lucene/store/IOContext$Context;"));
            MERGE = new IOContext$Context(env->getStaticObjectField(cls, "MERGE", "Lorg/apache/lucene/store/IOContext$Context;"));
            READ = new IOContext$Context(env->getStaticObjectField(cls, "READ", "Lorg/apache/lucene/store/IOContext$Context;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IOContext$Context IOContext$Context::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IOContext$Context(env->callStaticObjectMethod(cls, mids$[mid_valueOf_6cdc8b82], a0.this$));
        }

        JArray< IOContext$Context > IOContext$Context::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< IOContext$Context >(env->callStaticObjectMethod(cls, mids$[mid_values_8c68e654]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IOContext$Context_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext$Context_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext$Context_of_(t_IOContext$Context *self, PyObject *args);
        static PyObject *t_IOContext$Context_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOContext$Context_values(PyTypeObject *type);
        static PyObject *t_IOContext$Context_get__parameters_(t_IOContext$Context *self, void *data);
        static PyGetSetDef t_IOContext$Context__fields_[] = {
          DECLARE_GET_FIELD(t_IOContext$Context, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IOContext$Context__methods_[] = {
          DECLARE_METHOD(t_IOContext$Context, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, of_, METH_VARARGS),
          DECLARE_METHOD(t_IOContext$Context, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IOContext$Context, t_IOContext$Context, ::java::lang::Enum, IOContext$Context, abstract_init, 0, 0, t_IOContext$Context__fields_, 0, 0);
        PyObject *t_IOContext$Context::wrap_Object(const IOContext$Context& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IOContext$Context::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOContext$Context *self = (t_IOContext$Context *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_IOContext$Context::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IOContext$Context::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOContext$Context *self = (t_IOContext$Context *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_IOContext$Context::install(PyObject *module)
        {
          installType(&PY_TYPE(IOContext$Context), module, "IOContext$Context", 0);
        }

        void t_IOContext$Context::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "class_", make_descriptor(IOContext$Context::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "wrapfn_", make_descriptor(t_IOContext$Context::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IOContext$Context::initializeClass);
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "DEFAULT", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::DEFAULT)));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "FLUSH", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::FLUSH)));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "MERGE", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::MERGE)));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "READ", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::READ)));
        }

        static PyObject *t_IOContext$Context_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOContext$Context::initializeClass, 1)))
            return NULL;
          return t_IOContext$Context::wrap_Object(IOContext$Context(((t_IOContext$Context *) arg)->object.this$));
        }
        static PyObject *t_IOContext$Context_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOContext$Context::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IOContext$Context_of_(t_IOContext$Context *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_IOContext$Context_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          IOContext$Context result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::IOContext$Context::valueOf(a0));
            return t_IOContext$Context::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_IOContext$Context_values(PyTypeObject *type)
        {
          JArray< IOContext$Context > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::store::IOContext$Context::values());
          return JArray<jobject>(result.this$).wrap(t_IOContext$Context::wrap_jobject);
        }
        static PyObject *t_IOContext$Context_get__parameters_(t_IOContext$Context *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/de/GermanStemFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemFilterFactory::class$ = NULL;
          jmethodID *GermanStemFilterFactory::mids$ = NULL;
          bool GermanStemFilterFactory::live$ = false;

          jclass GermanStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_66272dff] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/de/GermanStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemFilterFactory::GermanStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::de::GermanStemFilter GermanStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::de::GermanStemFilter(env->callObjectMethod(this$, mids$[mid_create_66272dff], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemFilterFactory_init_(t_GermanStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanStemFilterFactory_create(t_GermanStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanStemFilterFactory, t_GermanStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanStemFilterFactory, t_GermanStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GermanStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemFilterFactory), module, "GermanStemFilterFactory", 0);
          }

          void t_GermanStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanStemFilterFactory).tp_dict, "class_", make_descriptor(GermanStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanStemFilterFactory::wrap_Object(GermanStemFilterFactory(((t_GermanStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemFilterFactory_init_(t_GermanStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanStemFilterFactory_create(t_GermanStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::de::GermanStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::de::t_GermanStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanQueryBuilderFactory::class$ = NULL;
            jmethodID *SpanQueryBuilderFactory::mids$ = NULL;
            bool SpanQueryBuilderFactory::live$ = false;

            jclass SpanQueryBuilderFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanQueryBuilderFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_addBuilder_0aaa7d83] = env->getMethodID(cls, "addBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanQueryBuilderFactory::SpanQueryBuilderFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void SpanQueryBuilderFactory::addBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addBuilder_0aaa7d83], a0.this$, a1.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanQueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanQueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanQueryBuilderFactory_init_(t_SpanQueryBuilderFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SpanQueryBuilderFactory_addBuilder(t_SpanQueryBuilderFactory *self, PyObject *args);

            static PyMethodDef t_SpanQueryBuilderFactory__methods_[] = {
              DECLARE_METHOD(t_SpanQueryBuilderFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilderFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilderFactory, addBuilder, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanQueryBuilderFactory, t_SpanQueryBuilderFactory, ::java::lang::Object, SpanQueryBuilderFactory, t_SpanQueryBuilderFactory_init_, 0, 0, 0, 0, 0);

            void t_SpanQueryBuilderFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanQueryBuilderFactory), module, "SpanQueryBuilderFactory", 0);
            }

            void t_SpanQueryBuilderFactory::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilderFactory).tp_dict, "class_", make_descriptor(SpanQueryBuilderFactory::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilderFactory).tp_dict, "wrapfn_", make_descriptor(t_SpanQueryBuilderFactory::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilderFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanQueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanQueryBuilderFactory::initializeClass, 1)))
                return NULL;
              return t_SpanQueryBuilderFactory::wrap_Object(SpanQueryBuilderFactory(((t_SpanQueryBuilderFactory *) arg)->object.this$));
            }
            static PyObject *t_SpanQueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanQueryBuilderFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanQueryBuilderFactory_init_(t_SpanQueryBuilderFactory *self, PyObject *args, PyObject *kwds)
            {
              SpanQueryBuilderFactory object((jobject) NULL);

              INT_CALL(object = SpanQueryBuilderFactory());
              self->object = object;

              return 0;
            }

            static PyObject *t_SpanQueryBuilderFactory_addBuilder(t_SpanQueryBuilderFactory *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addBuilder(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addBuilder", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/jaspell/JaspellLookup.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {

            ::java::lang::Class *JaspellLookup::class$ = NULL;
            jmethodID *JaspellLookup::mids$ = NULL;
            bool JaspellLookup::live$ = false;

            jclass JaspellLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/jaspell/JaspellLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_add_cb8bea96] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Z");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JaspellLookup::JaspellLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jboolean JaspellLookup::add(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_add_cb8bea96], a0.this$, a1.this$);
            }

            void JaspellLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object JaspellLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong JaspellLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean JaspellLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List JaspellLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong JaspellLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean JaspellLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {
            static PyObject *t_JaspellLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JaspellLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JaspellLookup_init_(t_JaspellLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JaspellLookup_add(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_build(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_get(t_JaspellLookup *self, PyObject *arg);
            static PyObject *t_JaspellLookup_getCount(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_load(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_lookup(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_ramBytesUsed(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_store(t_JaspellLookup *self, PyObject *args);
            static PyObject *t_JaspellLookup_get__count(t_JaspellLookup *self, void *data);
            static PyGetSetDef t_JaspellLookup__fields_[] = {
              DECLARE_GET_FIELD(t_JaspellLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_JaspellLookup__methods_[] = {
              DECLARE_METHOD(t_JaspellLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellLookup, add, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, get, METH_O),
              DECLARE_METHOD(t_JaspellLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_JaspellLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JaspellLookup, t_JaspellLookup, ::org::apache::lucene::search::suggest::Lookup, JaspellLookup, t_JaspellLookup_init_, 0, 0, t_JaspellLookup__fields_, 0, 0);

            void t_JaspellLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(JaspellLookup), module, "JaspellLookup", 0);
            }

            void t_JaspellLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JaspellLookup).tp_dict, "class_", make_descriptor(JaspellLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JaspellLookup).tp_dict, "wrapfn_", make_descriptor(t_JaspellLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JaspellLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_JaspellLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JaspellLookup::initializeClass, 1)))
                return NULL;
              return t_JaspellLookup::wrap_Object(JaspellLookup(((t_JaspellLookup *) arg)->object.this$));
            }
            static PyObject *t_JaspellLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JaspellLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JaspellLookup_init_(t_JaspellLookup *self, PyObject *args, PyObject *kwds)
            {
              JaspellLookup object((jobject) NULL);

              INT_CALL(object = JaspellLookup());
              self->object = object;

              return 0;
            }

            static PyObject *t_JaspellLookup_add(t_JaspellLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Oo", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_JaspellLookup_build(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_JaspellLookup_get(t_JaspellLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_JaspellLookup_getCount(t_JaspellLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_JaspellLookup_load(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_JaspellLookup_lookup(t_JaspellLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_JaspellLookup_ramBytesUsed(t_JaspellLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_JaspellLookup_store(t_JaspellLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JaspellLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_JaspellLookup_get__count(t_JaspellLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/Float.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *RangeMapFloatFunction::class$ = NULL;
            jmethodID *RangeMapFloatFunction::mids$ = NULL;
            bool RangeMapFloatFunction::live$ = false;

            jclass RangeMapFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/RangeMapFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6ddf6b07] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFFLjava/lang/Float;)V");
                mids$[mid_init$_e1b244a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFLorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RangeMapFloatFunction::RangeMapFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, jfloat a3, const ::java::lang::Float & a4) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_6ddf6b07, a0.this$, a1, a2, a3, a4.this$)) {}

            RangeMapFloatFunction::RangeMapFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, const ::org::apache::lucene::queries::function::ValueSource & a3, const ::org::apache::lucene::queries::function::ValueSource & a4) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_e1b244a8, a0.this$, a1, a2, a3.this$, a4.this$)) {}

            void RangeMapFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String RangeMapFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean RangeMapFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues RangeMapFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint RangeMapFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_RangeMapFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RangeMapFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RangeMapFloatFunction_init_(t_RangeMapFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_RangeMapFloatFunction_createWeight(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_description(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_equals(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_getValues(t_RangeMapFloatFunction *self, PyObject *args);
            static PyObject *t_RangeMapFloatFunction_hashCode(t_RangeMapFloatFunction *self, PyObject *args);

            static PyMethodDef t_RangeMapFloatFunction__methods_[] = {
              DECLARE_METHOD(t_RangeMapFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeMapFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeMapFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_RangeMapFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RangeMapFloatFunction, t_RangeMapFloatFunction, ::org::apache::lucene::queries::function::ValueSource, RangeMapFloatFunction, t_RangeMapFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_RangeMapFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(RangeMapFloatFunction), module, "RangeMapFloatFunction", 0);
            }

            void t_RangeMapFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RangeMapFloatFunction).tp_dict, "class_", make_descriptor(RangeMapFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RangeMapFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_RangeMapFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RangeMapFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RangeMapFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RangeMapFloatFunction::initializeClass, 1)))
                return NULL;
              return t_RangeMapFloatFunction::wrap_Object(RangeMapFloatFunction(((t_RangeMapFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_RangeMapFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RangeMapFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RangeMapFloatFunction_init_(t_RangeMapFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 5:
                {
                  ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                  jfloat a1;
                  jfloat a2;
                  jfloat a3;
                  ::java::lang::Float a4((jobject) NULL);
                  RangeMapFloatFunction object((jobject) NULL);

                  if (!parseArgs(args, "kFFFO", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &::java::lang::PY_TYPE(Float), &a0, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = RangeMapFloatFunction(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
                  jfloat a1;
                  jfloat a2;
                  ::org::apache::lucene::queries::function::ValueSource a3((jobject) NULL);
                  ::org::apache::lucene::queries::function::ValueSource a4((jobject) NULL);
                  RangeMapFloatFunction object((jobject) NULL);

                  if (!parseArgs(args, "kFFkk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                  {
                    INT_CALL(object = RangeMapFloatFunction(a0, a1, a2, a3, a4));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_RangeMapFloatFunction_createWeight(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_description(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_equals(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_getValues(t_RangeMapFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_RangeMapFloatFunction_hashCode(t_RangeMapFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(RangeMapFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/hyphenation/CharVector.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {

            ::java::lang::Class *CharVector::class$ = NULL;
            jmethodID *CharVector::mids$ = NULL;
            bool CharVector::live$ = false;

            jclass CharVector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/hyphenation/CharVector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_700e23d6] = env->getMethodID(cls, "<init>", "([C)V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_ec6430f4] = env->getMethodID(cls, "<init>", "([CI)V");
                mids$[mid_alloc_39c7bd23] = env->getMethodID(cls, "alloc", "(I)I");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_clone_023cce63] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/compound/hyphenation/CharVector;");
                mids$[mid_get_39c7bd29] = env->getMethodID(cls, "get", "(I)C");
                mids$[mid_getArray_dab10e7f] = env->getMethodID(cls, "getArray", "()[C");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                mids$[mid_put_83eec158] = env->getMethodID(cls, "put", "(IC)V");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CharVector::CharVector() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            CharVector::CharVector(const JArray< jchar > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_700e23d6, a0.this$)) {}

            CharVector::CharVector(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            CharVector::CharVector(const JArray< jchar > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ec6430f4, a0.this$, a1)) {}

            jint CharVector::alloc(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_alloc_39c7bd23], a0);
            }

            jint CharVector::capacity() const
            {
              return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
            }

            void CharVector::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            CharVector CharVector::clone() const
            {
              return CharVector(env->callObjectMethod(this$, mids$[mid_clone_023cce63]));
            }

            jchar CharVector::get(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_get_39c7bd29], a0);
            }

            JArray< jchar > CharVector::getArray() const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getArray_dab10e7f]));
            }

            jint CharVector::length() const
            {
              return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
            }

            void CharVector::put(jint a0, jchar a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_83eec158], a0, a1);
            }

            void CharVector::trimToSize() const
            {
              env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          namespace hyphenation {
            static PyObject *t_CharVector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharVector_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CharVector_init_(t_CharVector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_CharVector_alloc(t_CharVector *self, PyObject *arg);
            static PyObject *t_CharVector_capacity(t_CharVector *self);
            static PyObject *t_CharVector_clear(t_CharVector *self);
            static PyObject *t_CharVector_clone(t_CharVector *self);
            static PyObject *t_CharVector_get(t_CharVector *self, PyObject *arg);
            static PyObject *t_CharVector_getArray(t_CharVector *self);
            static PyObject *t_CharVector_length(t_CharVector *self);
            static PyObject *t_CharVector_put(t_CharVector *self, PyObject *args);
            static PyObject *t_CharVector_trimToSize(t_CharVector *self);
            static PyObject *t_CharVector_get__array(t_CharVector *self, void *data);
            static PyGetSetDef t_CharVector__fields_[] = {
              DECLARE_GET_FIELD(t_CharVector, array),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CharVector__methods_[] = {
              DECLARE_METHOD(t_CharVector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharVector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharVector, alloc, METH_O),
              DECLARE_METHOD(t_CharVector, capacity, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, clear, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, clone, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, get, METH_O),
              DECLARE_METHOD(t_CharVector, getArray, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, length, METH_NOARGS),
              DECLARE_METHOD(t_CharVector, put, METH_VARARGS),
              DECLARE_METHOD(t_CharVector, trimToSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CharVector, t_CharVector, ::java::lang::Object, CharVector, t_CharVector_init_, 0, 0, t_CharVector__fields_, 0, 0);

            void t_CharVector::install(PyObject *module)
            {
              installType(&PY_TYPE(CharVector), module, "CharVector", 0);
            }

            void t_CharVector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CharVector).tp_dict, "class_", make_descriptor(CharVector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CharVector).tp_dict, "wrapfn_", make_descriptor(t_CharVector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CharVector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CharVector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CharVector::initializeClass, 1)))
                return NULL;
              return t_CharVector::wrap_Object(CharVector(((t_CharVector *) arg)->object.this$));
            }
            static PyObject *t_CharVector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CharVector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CharVector_init_(t_CharVector *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  CharVector object((jobject) NULL);

                  INT_CALL(object = CharVector());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  JArray< jchar > a0((jobject) NULL);
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "[C", &a0))
                  {
                    INT_CALL(object = CharVector(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  jint a0;
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = CharVector(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  JArray< jchar > a0((jobject) NULL);
                  jint a1;
                  CharVector object((jobject) NULL);

                  if (!parseArgs(args, "[CI", &a0, &a1))
                  {
                    INT_CALL(object = CharVector(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_CharVector_alloc(t_CharVector *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.alloc(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "alloc", arg);
              return NULL;
            }

            static PyObject *t_CharVector_capacity(t_CharVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.capacity());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharVector_clear(t_CharVector *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharVector_clone(t_CharVector *self)
            {
              CharVector result((jobject) NULL);
              OBJ_CALL(result = self->object.clone());
              return t_CharVector::wrap_Object(result);
            }

            static PyObject *t_CharVector_get(t_CharVector *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_CharVector_getArray(t_CharVector *self)
            {
              JArray< jchar > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArray());
              return result.wrap();
            }

            static PyObject *t_CharVector_length(t_CharVector *self)
            {
              jint result;
              OBJ_CALL(result = self->object.length());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharVector_put(t_CharVector *self, PyObject *args)
            {
              jint a0;
              jchar a1;

              if (!parseArgs(args, "IC", &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_CharVector_trimToSize(t_CharVector *self)
            {
              OBJ_CALL(self->object.trimToSize());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharVector_get__array(t_CharVector *self, void *data)
            {
              JArray< jchar > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArray());
              return value.wrap();
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletionBuilder.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletionBuilder::class$ = NULL;
            jmethodID *FSTCompletionBuilder::mids$ = NULL;
            bool FSTCompletionBuilder::live$ = false;
            jint FSTCompletionBuilder::DEFAULT_BUCKETS = (jint) 0;

            jclass FSTCompletionBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletionBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_4a786a26] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/search/suggest/fst/BytesRefSorter;I)V");
                mids$[mid_add_738fc2ce] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;I)V");
                mids$[mid_build_18e9287a] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/search/suggest/fst/FSTCompletion;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_BUCKETS = env->getStaticIntField(cls, "DEFAULT_BUCKETS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletionBuilder::FSTCompletionBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            FSTCompletionBuilder::FSTCompletionBuilder(jint a0, const ::org::apache::lucene::search::suggest::fst::BytesRefSorter & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a786a26, a0, a1.this$, a2)) {}

            void FSTCompletionBuilder::add(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_add_738fc2ce], a0.this$, a1);
            }

            ::org::apache::lucene::search::suggest::fst::FSTCompletion FSTCompletionBuilder::build() const
            {
              return ::org::apache::lucene::search::suggest::fst::FSTCompletion(env->callObjectMethod(this$, mids$[mid_build_18e9287a]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletionBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletionBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletionBuilder_init_(t_FSTCompletionBuilder *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletionBuilder_add(t_FSTCompletionBuilder *self, PyObject *args);
            static PyObject *t_FSTCompletionBuilder_build(t_FSTCompletionBuilder *self);

            static PyMethodDef t_FSTCompletionBuilder__methods_[] = {
              DECLARE_METHOD(t_FSTCompletionBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionBuilder, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionBuilder, add, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionBuilder, build, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletionBuilder, t_FSTCompletionBuilder, ::java::lang::Object, FSTCompletionBuilder, t_FSTCompletionBuilder_init_, 0, 0, 0, 0, 0);

            void t_FSTCompletionBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletionBuilder), module, "FSTCompletionBuilder", 0);
            }

            void t_FSTCompletionBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "class_", make_descriptor(FSTCompletionBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletionBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FSTCompletionBuilder::initializeClass);
              PyDict_SetItemString(PY_TYPE(FSTCompletionBuilder).tp_dict, "DEFAULT_BUCKETS", make_descriptor(FSTCompletionBuilder::DEFAULT_BUCKETS));
            }

            static PyObject *t_FSTCompletionBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletionBuilder::initializeClass, 1)))
                return NULL;
              return t_FSTCompletionBuilder::wrap_Object(FSTCompletionBuilder(((t_FSTCompletionBuilder *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletionBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletionBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletionBuilder_init_(t_FSTCompletionBuilder *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  FSTCompletionBuilder object((jobject) NULL);

                  INT_CALL(object = FSTCompletionBuilder());
                  self->object = object;
                  break;
                }
                goto err;
               case 3:
                {
                  jint a0;
                  ::org::apache::lucene::search::suggest::fst::BytesRefSorter a1((jobject) NULL);
                  jint a2;
                  FSTCompletionBuilder object((jobject) NULL);

                  if (!parseArgs(args, "IkI", ::org::apache::lucene::search::suggest::fst::BytesRefSorter::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = FSTCompletionBuilder(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletionBuilder_add(t_FSTCompletionBuilder *self, PyObject *args)
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_FSTCompletionBuilder_build(t_FSTCompletionBuilder *self)
            {
              ::org::apache::lucene::search::suggest::fst::FSTCompletion result((jobject) NULL);
              OBJ_CALL(result = self->object.build());
              return ::org::apache::lucene::search::suggest::fst::t_FSTCompletion::wrap_Object(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "java/util/Set.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *Codec::class$ = NULL;
        jmethodID *Codec::mids$ = NULL;
        bool Codec::live$ = false;

        jclass Codec::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/Codec");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availableCodecs_03e99967] = env->getStaticMethodID(cls, "availableCodecs", "()Ljava/util/Set;");
            mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
            mids$[mid_forName_e21a4685] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getDefault_27f0a02b] = env->getStaticMethodID(cls, "getDefault", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
            mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
            mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
            mids$[mid_reloadCodecs_9110048d] = env->getStaticMethodID(cls, "reloadCodecs", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
            mids$[mid_setDefault_848f310e] = env->getStaticMethodID(cls, "setDefault", "(Lorg/apache/lucene/codecs/Codec;)V");
            mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
            mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set Codec::availableCodecs()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableCodecs_03e99967]));
        }

        ::org::apache::lucene::codecs::DocValuesFormat Codec::docValuesFormat() const
        {
          return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
        }

        ::org::apache::lucene::codecs::FieldInfosFormat Codec::fieldInfosFormat() const
        {
          return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
        }

        Codec Codec::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return Codec(env->callStaticObjectMethod(cls, mids$[mid_forName_e21a4685], a0.this$));
        }

        Codec Codec::getDefault()
        {
          jclass cls = env->getClass(initializeClass);
          return Codec(env->callStaticObjectMethod(cls, mids$[mid_getDefault_27f0a02b]));
        }

        ::java::lang::String Codec::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        ::org::apache::lucene::codecs::LiveDocsFormat Codec::liveDocsFormat() const
        {
          return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
        }

        ::org::apache::lucene::codecs::NormsFormat Codec::normsFormat() const
        {
          return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
        }

        ::org::apache::lucene::codecs::PostingsFormat Codec::postingsFormat() const
        {
          return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
        }

        void Codec::reloadCodecs(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadCodecs_9110048d], a0.this$);
        }

        ::org::apache::lucene::codecs::SegmentInfoFormat Codec::segmentInfoFormat() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
        }

        void Codec::setDefault(const Codec & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_setDefault_848f310e], a0.this$);
        }

        ::org::apache::lucene::codecs::StoredFieldsFormat Codec::storedFieldsFormat() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
        }

        ::org::apache::lucene::codecs::TermVectorsFormat Codec::termVectorsFormat() const
        {
          return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
        }

        ::java::lang::String Codec::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_Codec_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_availableCodecs(PyTypeObject *type);
        static PyObject *t_Codec_docValuesFormat(t_Codec *self);
        static PyObject *t_Codec_fieldInfosFormat(t_Codec *self);
        static PyObject *t_Codec_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_getDefault(PyTypeObject *type);
        static PyObject *t_Codec_getName(t_Codec *self);
        static PyObject *t_Codec_liveDocsFormat(t_Codec *self);
        static PyObject *t_Codec_normsFormat(t_Codec *self);
        static PyObject *t_Codec_postingsFormat(t_Codec *self);
        static PyObject *t_Codec_reloadCodecs(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_segmentInfoFormat(t_Codec *self);
        static PyObject *t_Codec_setDefault(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Codec_storedFieldsFormat(t_Codec *self);
        static PyObject *t_Codec_termVectorsFormat(t_Codec *self);
        static PyObject *t_Codec_toString(t_Codec *self, PyObject *args);
        static PyObject *t_Codec_get__default(t_Codec *self, void *data);
        static int t_Codec_set__default(t_Codec *self, PyObject *arg, void *data);
        static PyObject *t_Codec_get__name(t_Codec *self, void *data);
        static PyGetSetDef t_Codec__fields_[] = {
          DECLARE_GETSET_FIELD(t_Codec, default),
          DECLARE_GET_FIELD(t_Codec, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Codec__methods_[] = {
          DECLARE_METHOD(t_Codec, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, availableCodecs, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_Codec, docValuesFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, fieldInfosFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, getDefault, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_Codec, getName, METH_NOARGS),
          DECLARE_METHOD(t_Codec, liveDocsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, normsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, postingsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, reloadCodecs, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, segmentInfoFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, setDefault, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Codec, storedFieldsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, termVectorsFormat, METH_NOARGS),
          DECLARE_METHOD(t_Codec, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Codec, t_Codec, ::java::lang::Object, Codec, abstract_init, 0, 0, t_Codec__fields_, 0, 0);

        void t_Codec::install(PyObject *module)
        {
          installType(&PY_TYPE(Codec), module, "Codec", 0);
        }

        void t_Codec::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Codec).tp_dict, "class_", make_descriptor(Codec::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Codec).tp_dict, "wrapfn_", make_descriptor(t_Codec::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Codec_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Codec::initializeClass, 1)))
            return NULL;
          return t_Codec::wrap_Object(Codec(((t_Codec *) arg)->object.this$));
        }
        static PyObject *t_Codec_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Codec::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Codec_availableCodecs(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::availableCodecs());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_Codec_docValuesFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.docValuesFormat());
          return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_fieldInfosFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.fieldInfosFormat());
          return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          Codec result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::forName(a0));
            return t_Codec::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_Codec_getDefault(PyTypeObject *type)
        {
          Codec result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::Codec::getDefault());
          return t_Codec::wrap_Object(result);
        }

        static PyObject *t_Codec_getName(t_Codec *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_Codec_liveDocsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.liveDocsFormat());
          return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_normsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.normsFormat());
          return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_postingsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.postingsFormat());
          return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_reloadCodecs(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::Codec::reloadCodecs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadCodecs", arg);
          return NULL;
        }

        static PyObject *t_Codec_segmentInfoFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.segmentInfoFormat());
          return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_setDefault(PyTypeObject *type, PyObject *arg)
        {
          Codec a0((jobject) NULL);

          if (!parseArg(arg, "k", Codec::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::Codec::setDefault(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "setDefault", arg);
          return NULL;
        }

        static PyObject *t_Codec_storedFieldsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.storedFieldsFormat());
          return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_termVectorsFormat(t_Codec *self)
        {
          ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);
          OBJ_CALL(result = self->object.termVectorsFormat());
          return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
        }

        static PyObject *t_Codec_toString(t_Codec *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Codec), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Codec_get__default(t_Codec *self, void *data)
        {
          Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getDefault());
          return t_Codec::wrap_Object(value);
        }
        static int t_Codec_set__default(t_Codec *self, PyObject *arg, void *data)
        {
          {
            Codec value((jobject) NULL);
            if (!parseArg(arg, "k", Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setDefault(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "default", arg);
          return -1;
        }

        static PyObject *t_Codec_get__name(t_Codec *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/io/PrintStream.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "java/io/DataInput.h"
#include "org/egothor/stemmer/Reduce.h"
#include "java/io/DataOutput.h"
#include "org/egothor/stemmer/Row.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Trie::class$ = NULL;
      jmethodID *Trie::mids$ = NULL;
      bool Trie::live$ = false;

      jclass Trie::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Trie");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_e051d6a6] = env->getMethodID(cls, "<init>", "(Ljava/io/DataInput;)V");
          mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
          mids$[mid_init$_ed85fe83] = env->getMethodID(cls, "<init>", "(ZILjava/util/List;Ljava/util/List;)V");
          mids$[mid_getAll_2fa560b3] = env->getMethodID(cls, "getAll", "(Ljava/lang/CharSequence;)[Ljava/lang/CharSequence;");
          mids$[mid_getCells_54c6a179] = env->getMethodID(cls, "getCells", "()I");
          mids$[mid_getCellsPnt_54c6a179] = env->getMethodID(cls, "getCellsPnt", "()I");
          mids$[mid_getCellsVal_54c6a179] = env->getMethodID(cls, "getCellsVal", "()I");
          mids$[mid_getFully_856f5013] = env->getMethodID(cls, "getFully", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_getLastOnPath_856f5013] = env->getMethodID(cls, "getLastOnPath", "(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;");
          mids$[mid_printInfo_bd6af9ff] = env->getMethodID(cls, "printInfo", "(Ljava/io/PrintStream;Ljava/lang/CharSequence;)V");
          mids$[mid_reduce_6ee87cd1] = env->getMethodID(cls, "reduce", "(Lorg/egothor/stemmer/Reduce;)Lorg/egothor/stemmer/Trie;");
          mids$[mid_store_cfb051e6] = env->getMethodID(cls, "store", "(Ljava/io/DataOutput;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Trie::Trie(const ::java::io::DataInput & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e051d6a6, a0.this$)) {}

      Trie::Trie(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

      Trie::Trie(jboolean a0, jint a1, const ::java::util::List & a2, const ::java::util::List & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ed85fe83, a0, a1, a2.this$, a3.this$)) {}

      JArray< ::java::lang::CharSequence > Trie::getAll(const ::java::lang::CharSequence & a0) const
      {
        return JArray< ::java::lang::CharSequence >(env->callObjectMethod(this$, mids$[mid_getAll_2fa560b3], a0.this$));
      }

      jint Trie::getCells() const
      {
        return env->callIntMethod(this$, mids$[mid_getCells_54c6a179]);
      }

      jint Trie::getCellsPnt() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsPnt_54c6a179]);
      }

      jint Trie::getCellsVal() const
      {
        return env->callIntMethod(this$, mids$[mid_getCellsVal_54c6a179]);
      }

      ::java::lang::CharSequence Trie::getFully(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getFully_856f5013], a0.this$));
      }

      ::java::lang::CharSequence Trie::getLastOnPath(const ::java::lang::CharSequence & a0) const
      {
        return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getLastOnPath_856f5013], a0.this$));
      }

      void Trie::printInfo(const ::java::io::PrintStream & a0, const ::java::lang::CharSequence & a1) const
      {
        env->callVoidMethod(this$, mids$[mid_printInfo_bd6af9ff], a0.this$, a1.this$);
      }

      Trie Trie::reduce(const ::org::egothor::stemmer::Reduce & a0) const
      {
        return Trie(env->callObjectMethod(this$, mids$[mid_reduce_6ee87cd1], a0.this$));
      }

      void Trie::store(const ::java::io::DataOutput & a0) const
      {
        env->callVoidMethod(this$, mids$[mid_store_cfb051e6], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Trie_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Trie_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Trie_init_(t_Trie *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Trie_getAll(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_getCells(t_Trie *self);
      static PyObject *t_Trie_getCellsPnt(t_Trie *self);
      static PyObject *t_Trie_getCellsVal(t_Trie *self);
      static PyObject *t_Trie_getFully(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_getLastOnPath(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_printInfo(t_Trie *self, PyObject *args);
      static PyObject *t_Trie_reduce(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_store(t_Trie *self, PyObject *arg);
      static PyObject *t_Trie_get__cells(t_Trie *self, void *data);
      static PyObject *t_Trie_get__cellsPnt(t_Trie *self, void *data);
      static PyObject *t_Trie_get__cellsVal(t_Trie *self, void *data);
      static PyGetSetDef t_Trie__fields_[] = {
        DECLARE_GET_FIELD(t_Trie, cells),
        DECLARE_GET_FIELD(t_Trie, cellsPnt),
        DECLARE_GET_FIELD(t_Trie, cellsVal),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Trie__methods_[] = {
        DECLARE_METHOD(t_Trie, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Trie, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Trie, getAll, METH_O),
        DECLARE_METHOD(t_Trie, getCells, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getCellsPnt, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getCellsVal, METH_NOARGS),
        DECLARE_METHOD(t_Trie, getFully, METH_O),
        DECLARE_METHOD(t_Trie, getLastOnPath, METH_O),
        DECLARE_METHOD(t_Trie, printInfo, METH_VARARGS),
        DECLARE_METHOD(t_Trie, reduce, METH_O),
        DECLARE_METHOD(t_Trie, store, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Trie, t_Trie, ::java::lang::Object, Trie, t_Trie_init_, 0, 0, t_Trie__fields_, 0, 0);

      void t_Trie::install(PyObject *module)
      {
        installType(&PY_TYPE(Trie), module, "Trie", 0);
      }

      void t_Trie::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "class_", make_descriptor(Trie::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "wrapfn_", make_descriptor(t_Trie::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Trie_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Trie::initializeClass, 1)))
          return NULL;
        return t_Trie::wrap_Object(Trie(((t_Trie *) arg)->object.this$));
      }
      static PyObject *t_Trie_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Trie::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Trie_init_(t_Trie *self, PyObject *args, PyObject *kwds)
      {
        switch (PyTuple_GET_SIZE(args)) {
         case 1:
          {
            ::java::io::DataInput a0((jobject) NULL);
            Trie object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::DataInput::initializeClass, &a0))
            {
              INT_CALL(object = Trie(a0));
              self->object = object;
              break;
            }
          }
          {
            jboolean a0;
            Trie object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = Trie(a0));
              self->object = object;
              break;
            }
          }
          goto err;
         case 4:
          {
            jboolean a0;
            jint a1;
            ::java::util::List a2((jobject) NULL);
            PyTypeObject **p2;
            ::java::util::List a3((jobject) NULL);
            PyTypeObject **p3;
            Trie object((jobject) NULL);

            if (!parseArgs(args, "ZIKK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3, &p3, ::java::util::t_List::parameters_))
            {
              INT_CALL(object = Trie(a0, a1, a2, a3));
              self->object = object;
              break;
            }
          }
         default:
         err:
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Trie_getAll(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        JArray< ::java::lang::CharSequence > result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getAll(a0));
          return JArray<jobject>(result.this$).wrap(::java::lang::t_CharSequence::wrap_jobject);
        }

        PyErr_SetArgsError((PyObject *) self, "getAll", arg);
        return NULL;
      }

      static PyObject *t_Trie_getCells(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCells());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Trie_getCellsPnt(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsPnt());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Trie_getCellsVal(t_Trie *self)
      {
        jint result;
        OBJ_CALL(result = self->object.getCellsVal());
        return PyInt_FromLong((long) result);
      }

      static PyObject *t_Trie_getFully(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getFully(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getFully", arg);
        return NULL;
      }

      static PyObject *t_Trie_getLastOnPath(t_Trie *self, PyObject *arg)
      {
        ::java::lang::CharSequence a0((jobject) NULL);
        ::java::lang::CharSequence result((jobject) NULL);

        if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
        {
          OBJ_CALL(result = self->object.getLastOnPath(a0));
          return ::java::lang::t_CharSequence::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "getLastOnPath", arg);
        return NULL;
      }

      static PyObject *t_Trie_printInfo(t_Trie *self, PyObject *args)
      {
        ::java::io::PrintStream a0((jobject) NULL);
        ::java::lang::CharSequence a1((jobject) NULL);

        if (!parseArgs(args, "kO", ::java::io::PrintStream::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
        {
          OBJ_CALL(self->object.printInfo(a0, a1));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "printInfo", args);
        return NULL;
      }

      static PyObject *t_Trie_reduce(t_Trie *self, PyObject *arg)
      {
        ::org::egothor::stemmer::Reduce a0((jobject) NULL);
        Trie result((jobject) NULL);

        if (!parseArg(arg, "k", ::org::egothor::stemmer::Reduce::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.reduce(a0));
          return t_Trie::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "reduce", arg);
        return NULL;
      }

      static PyObject *t_Trie_store(t_Trie *self, PyObject *arg)
      {
        ::java::io::DataOutput a0((jobject) NULL);

        if (!parseArg(arg, "k", ::java::io::DataOutput::initializeClass, &a0))
        {
          OBJ_CALL(self->object.store(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError((PyObject *) self, "store", arg);
        return NULL;
      }

      static PyObject *t_Trie_get__cells(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCells());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Trie_get__cellsPnt(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsPnt());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Trie_get__cellsVal(t_Trie *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object.getCellsVal());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *StandardQueryBuilder::class$ = NULL;
              jmethodID *StandardQueryBuilder::mids$ = NULL;
              bool StandardQueryBuilder::live$ = false;

              jclass StandardQueryBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::search::Query StandardQueryBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_StandardQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryBuilder_build(t_StandardQueryBuilder *self, PyObject *args);

              static PyMethodDef t_StandardQueryBuilder__methods_[] = {
                DECLARE_METHOD(t_StandardQueryBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryBuilder, build, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryBuilder, t_StandardQueryBuilder, ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder, StandardQueryBuilder, abstract_init, 0, 0, 0, 0, 0);

              void t_StandardQueryBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryBuilder), module, "StandardQueryBuilder", 0);
              }

              void t_StandardQueryBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryBuilder).tp_dict, "class_", make_descriptor(StandardQueryBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryBuilder::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryBuilder::wrap_Object(StandardQueryBuilder(((t_StandardQueryBuilder *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_StandardQueryBuilder_build(t_StandardQueryBuilder *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(StandardQueryBuilder), (PyObject *) self, "build", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchStemmer::class$ = NULL;
          jmethodID *FrenchStemmer::mids$ = NULL;
          bool FrenchStemmer::live$ = false;

          jclass FrenchStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchStemmer::FrenchStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_FrenchStemmer__methods_[] = {
            DECLARE_METHOD(t_FrenchStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchStemmer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchStemmer, t_FrenchStemmer, ::java::lang::Object, FrenchStemmer, t_FrenchStemmer_init_, 0, 0, 0, 0, 0);

          void t_FrenchStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchStemmer), module, "FrenchStemmer", 0);
          }

          void t_FrenchStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "class_", make_descriptor(FrenchStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchStemmer::initializeClass, 1)))
              return NULL;
            return t_FrenchStemmer::wrap_Object(FrenchStemmer(((t_FrenchStemmer *) arg)->object.this$));
          }
          static PyObject *t_FrenchStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchStemmer_init_(t_FrenchStemmer *self, PyObject *args, PyObject *kwds)
          {
            FrenchStemmer object((jobject) NULL);

            INT_CALL(object = FrenchStemmer());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemFilter::class$ = NULL;
          jmethodID *SwedishLightStemFilter::mids$ = NULL;
          bool SwedishLightStemFilter::live$ = false;

          jclass SwedishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemFilter::SwedishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SwedishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemFilter_init_(t_SwedishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemFilter_incrementToken(t_SwedishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishLightStemFilter, t_SwedishLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, SwedishLightStemFilter, t_SwedishLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_SwedishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemFilter), module, "SwedishLightStemFilter", 0);
          }

          void t_SwedishLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilter).tp_dict, "class_", make_descriptor(SwedishLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_SwedishLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SwedishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemFilter::wrap_Object(SwedishLightStemFilter(((t_SwedishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemFilter_init_(t_SwedishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SwedishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SwedishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SwedishLightStemFilter_incrementToken(t_SwedishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SwedishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {

          ::java::lang::Class *Lucene3xSegmentInfoReader::class$ = NULL;
          jmethodID *Lucene3xSegmentInfoReader::mids$ = NULL;
          bool Lucene3xSegmentInfoReader::live$ = false;

          jclass Lucene3xSegmentInfoReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");
              mids$[mid_readLegacyInfos_1ebc3dab] = env->getStaticMethodID(cls, "readLegacyInfos", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/store/IndexInput;I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene3xSegmentInfoReader::Lucene3xSegmentInfoReader() : ::org::apache::lucene::codecs::SegmentInfoReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::index::SegmentInfo Lucene3xSegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
          }

          void Lucene3xSegmentInfoReader::readLegacyInfos(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::store::IndexInput & a2, jint a3)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_readLegacyInfos_1ebc3dab], a0.this$, a1.this$, a2.this$, a3);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {
          static PyObject *t_Lucene3xSegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene3xSegmentInfoReader_init_(t_Lucene3xSegmentInfoReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene3xSegmentInfoReader_read(t_Lucene3xSegmentInfoReader *self, PyObject *args);
          static PyObject *t_Lucene3xSegmentInfoReader_readLegacyInfos(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_Lucene3xSegmentInfoReader__methods_[] = {
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, read, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoReader, readLegacyInfos, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene3xSegmentInfoReader, t_Lucene3xSegmentInfoReader, ::org::apache::lucene::codecs::SegmentInfoReader, Lucene3xSegmentInfoReader, t_Lucene3xSegmentInfoReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene3xSegmentInfoReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene3xSegmentInfoReader), module, "Lucene3xSegmentInfoReader", 0);
          }

          void t_Lucene3xSegmentInfoReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoReader).tp_dict, "class_", make_descriptor(Lucene3xSegmentInfoReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene3xSegmentInfoReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene3xSegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene3xSegmentInfoReader::initializeClass, 1)))
              return NULL;
            return t_Lucene3xSegmentInfoReader::wrap_Object(Lucene3xSegmentInfoReader(((t_Lucene3xSegmentInfoReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene3xSegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene3xSegmentInfoReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene3xSegmentInfoReader_init_(t_Lucene3xSegmentInfoReader *self, PyObject *args, PyObject *kwds)
          {
            Lucene3xSegmentInfoReader object((jobject) NULL);

            INT_CALL(object = Lucene3xSegmentInfoReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene3xSegmentInfoReader_read(t_Lucene3xSegmentInfoReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xSegmentInfoReader), (PyObject *) self, "read", args, 2);
          }

          static PyObject *t_Lucene3xSegmentInfoReader_readLegacyInfos(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
            ::org::apache::lucene::store::Directory a1((jobject) NULL);
            ::org::apache::lucene::store::IndexInput a2((jobject) NULL);
            jint a3;

            if (!parseArgs(args, "kkkI", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoReader::readLegacyInfos(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "readLegacyInfos", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonComparable.h"
#include "java/lang/Comparable.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonComparable::class$ = NULL;
        jmethodID *PythonComparable::mids$ = NULL;
        bool PythonComparable::live$ = false;

        jclass PythonComparable::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonComparable");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonComparable::PythonComparable() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonComparable::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonComparable::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonComparable::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonComparable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonComparable_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonComparable_init_(t_PythonComparable *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonComparable_finalize(t_PythonComparable *self);
        static PyObject *t_PythonComparable_pythonExtension(t_PythonComparable *self, PyObject *args);
        static jint JNICALL t_PythonComparable_compareTo0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonComparable_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonComparable_get__self(t_PythonComparable *self, void *data);
        static PyGetSetDef t_PythonComparable__fields_[] = {
          DECLARE_GET_FIELD(t_PythonComparable, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonComparable__methods_[] = {
          DECLARE_METHOD(t_PythonComparable, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonComparable, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonComparable, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonComparable, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonComparable, t_PythonComparable, ::java::lang::Object, PythonComparable, t_PythonComparable_init_, 0, 0, t_PythonComparable__fields_, 0, 0);

        void t_PythonComparable::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonComparable), module, "PythonComparable", 1);
        }

        void t_PythonComparable::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonComparable).tp_dict, "class_", make_descriptor(PythonComparable::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonComparable).tp_dict, "wrapfn_", make_descriptor(t_PythonComparable::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonComparable).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonComparable::initializeClass);
          JNINativeMethod methods[] = {
            { "compareTo", "(Ljava/lang/Object;)I", (void *) t_PythonComparable_compareTo0 },
            { "pythonDecRef", "()V", (void *) t_PythonComparable_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonComparable_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonComparable::initializeClass, 1)))
            return NULL;
          return t_PythonComparable::wrap_Object(PythonComparable(((t_PythonComparable *) arg)->object.this$));
        }
        static PyObject *t_PythonComparable_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonComparable::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonComparable_init_(t_PythonComparable *self, PyObject *args, PyObject *kwds)
        {
          PythonComparable object((jobject) NULL);

          INT_CALL(object = PythonComparable());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonComparable_finalize(t_PythonComparable *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonComparable_pythonExtension(t_PythonComparable *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jint JNICALL t_PythonComparable_compareTo0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "compareTo", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareTo", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonComparable_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonComparable::mids$[PythonComparable::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonComparable_get__self(t_PythonComparable *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanScorer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanScorer::class$ = NULL;
          jmethodID *SpanScorer::mids$ = NULL;
          bool SpanScorer::live$ = false;

          jclass SpanScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
              mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
              mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
              mids$[mid_score_54c6a176] = env->getMethodID(cls, "score", "()F");
              mids$[mid_sloppyFreq_54c6a176] = env->getMethodID(cls, "sloppyFreq", "()F");
              mids$[mid_setFreqCurrentDoc_54c6a16a] = env->getMethodID(cls, "setFreqCurrentDoc", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint SpanScorer::advance(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
          }

          jlong SpanScorer::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint SpanScorer::docID() const
          {
            return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
          }

          jint SpanScorer::freq() const
          {
            return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
          }

          jint SpanScorer::nextDoc() const
          {
            return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
          }

          jfloat SpanScorer::score() const
          {
            return env->callFloatMethod(this$, mids$[mid_score_54c6a176]);
          }

          jfloat SpanScorer::sloppyFreq() const
          {
            return env->callFloatMethod(this$, mids$[mid_sloppyFreq_54c6a176]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanScorer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanScorer_advance(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_cost(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_docID(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_freq(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_nextDoc(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_score(t_SpanScorer *self, PyObject *args);
          static PyObject *t_SpanScorer_sloppyFreq(t_SpanScorer *self);

          static PyMethodDef t_SpanScorer__methods_[] = {
            DECLARE_METHOD(t_SpanScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanScorer, advance, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, cost, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, docID, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, freq, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, nextDoc, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, score, METH_VARARGS),
            DECLARE_METHOD(t_SpanScorer, sloppyFreq, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanScorer, t_SpanScorer, ::org::apache::lucene::search::Scorer, SpanScorer, abstract_init, 0, 0, 0, 0, 0);

          void t_SpanScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanScorer), module, "SpanScorer", 0);
          }

          void t_SpanScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanScorer).tp_dict, "class_", make_descriptor(SpanScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanScorer).tp_dict, "wrapfn_", make_descriptor(t_SpanScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanScorer::initializeClass, 1)))
              return NULL;
            return t_SpanScorer::wrap_Object(SpanScorer(((t_SpanScorer *) arg)->object.this$));
          }
          static PyObject *t_SpanScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanScorer_advance(t_SpanScorer *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.advance(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "advance", args, 2);
          }

          static PyObject *t_SpanScorer_cost(t_SpanScorer *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.cost());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "cost", args, 2);
          }

          static PyObject *t_SpanScorer_docID(t_SpanScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docID());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "docID", args, 2);
          }

          static PyObject *t_SpanScorer_freq(t_SpanScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.freq());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "freq", args, 2);
          }

          static PyObject *t_SpanScorer_nextDoc(t_SpanScorer *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.nextDoc());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "nextDoc", args, 2);
          }

          static PyObject *t_SpanScorer_score(t_SpanScorer *self, PyObject *args)
          {
            jfloat result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.score());
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(SpanScorer), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_SpanScorer_sloppyFreq(t_SpanScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.sloppyFreq());
            return PyFloat_FromDouble((double) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TypeAttributeImpl::class$ = NULL;
          jmethodID *TypeAttributeImpl::mids$ = NULL;
          bool TypeAttributeImpl::live$ = false;

          jclass TypeAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TypeAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setType_5fdc3f48] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_type_14c7b5c5] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAttributeImpl::TypeAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          TypeAttributeImpl::TypeAttributeImpl(const ::java::lang::String & a0) : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          void TypeAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void TypeAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean TypeAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint TypeAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void TypeAttributeImpl::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_5fdc3f48], a0.this$);
          }

          ::java::lang::String TypeAttributeImpl::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TypeAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAttributeImpl_init_(t_TypeAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAttributeImpl_clear(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_copyTo(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_equals(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_hashCode(t_TypeAttributeImpl *self, PyObject *args);
          static PyObject *t_TypeAttributeImpl_setType(t_TypeAttributeImpl *self, PyObject *arg);
          static PyObject *t_TypeAttributeImpl_type(t_TypeAttributeImpl *self);

          static PyMethodDef t_TypeAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_TypeAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_TypeAttributeImpl, setType, METH_O),
            DECLARE_METHOD(t_TypeAttributeImpl, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAttributeImpl, t_TypeAttributeImpl, ::org::apache::lucene::util::AttributeImpl, TypeAttributeImpl, t_TypeAttributeImpl_init_, 0, 0, 0, 0, 0);

          void t_TypeAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAttributeImpl), module, "TypeAttributeImpl", 0);
          }

          void t_TypeAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAttributeImpl).tp_dict, "class_", make_descriptor(TypeAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_TypeAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_TypeAttributeImpl::wrap_Object(TypeAttributeImpl(((t_TypeAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_TypeAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAttributeImpl_init_(t_TypeAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                TypeAttributeImpl object((jobject) NULL);

                INT_CALL(object = TypeAttributeImpl());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                TypeAttributeImpl object((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  INT_CALL(object = TypeAttributeImpl(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAttributeImpl_clear(t_TypeAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_copyTo(t_TypeAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_equals(t_TypeAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_hashCode(t_TypeAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(TypeAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_TypeAttributeImpl_setType(t_TypeAttributeImpl *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_TypeAttributeImpl_type(t_TypeAttributeImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramFilterFactory::class$ = NULL;
          jmethodID *EdgeNGramFilterFactory::mids$ = NULL;
          bool EdgeNGramFilterFactory::live$ = false;

          jclass EdgeNGramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ad8ef474] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramFilterFactory::EdgeNGramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter EdgeNGramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter(env->callObjectMethod(this$, mids$[mid_create_ad8ef474], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramFilterFactory_init_(t_EdgeNGramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramFilterFactory_create(t_EdgeNGramFilterFactory *self, PyObject *args);

          static PyMethodDef t_EdgeNGramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramFilterFactory, t_EdgeNGramFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, EdgeNGramFilterFactory, t_EdgeNGramFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramFilterFactory), module, "EdgeNGramFilterFactory", 0);
          }

          void t_EdgeNGramFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramFilterFactory).tp_dict, "class_", make_descriptor(EdgeNGramFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EdgeNGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramFilterFactory::wrap_Object(EdgeNGramFilterFactory(((t_EdgeNGramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramFilterFactory_init_(t_EdgeNGramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EdgeNGramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EdgeNGramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramFilterFactory_create(t_EdgeNGramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ngram::t_EdgeNGramTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EdgeNGramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/RussianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *RussianStemmer::class$ = NULL;
        jmethodID *RussianStemmer::mids$ = NULL;
        bool RussianStemmer::live$ = false;

        jclass RussianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/RussianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RussianStemmer::RussianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean RussianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint RussianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean RussianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_RussianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RussianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RussianStemmer_init_(t_RussianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RussianStemmer_equals(t_RussianStemmer *self, PyObject *args);
        static PyObject *t_RussianStemmer_hashCode(t_RussianStemmer *self, PyObject *args);
        static PyObject *t_RussianStemmer_stem(t_RussianStemmer *self, PyObject *args);

        static PyMethodDef t_RussianStemmer__methods_[] = {
          DECLARE_METHOD(t_RussianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RussianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RussianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_RussianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_RussianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RussianStemmer, t_RussianStemmer, ::org::tartarus::snowball::SnowballProgram, RussianStemmer, t_RussianStemmer_init_, 0, 0, 0, 0, 0);

        void t_RussianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(RussianStemmer), module, "RussianStemmer", 0);
        }

        void t_RussianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RussianStemmer).tp_dict, "class_", make_descriptor(RussianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RussianStemmer).tp_dict, "wrapfn_", make_descriptor(t_RussianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RussianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RussianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RussianStemmer::initializeClass, 1)))
            return NULL;
          return t_RussianStemmer::wrap_Object(RussianStemmer(((t_RussianStemmer *) arg)->object.this$));
        }
        static PyObject *t_RussianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RussianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RussianStemmer_init_(t_RussianStemmer *self, PyObject *args, PyObject *kwds)
        {
          RussianStemmer object((jobject) NULL);

          INT_CALL(object = RussianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RussianStemmer_equals(t_RussianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RussianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_RussianStemmer_hashCode(t_RussianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(RussianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_RussianStemmer_stem(t_RussianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RussianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/EnglishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *EnglishStemmer::class$ = NULL;
        jmethodID *EnglishStemmer::mids$ = NULL;
        bool EnglishStemmer::live$ = false;

        jclass EnglishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/EnglishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        EnglishStemmer::EnglishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean EnglishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint EnglishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean EnglishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_EnglishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_EnglishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_EnglishStemmer_init_(t_EnglishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_EnglishStemmer_equals(t_EnglishStemmer *self, PyObject *args);
        static PyObject *t_EnglishStemmer_hashCode(t_EnglishStemmer *self, PyObject *args);
        static PyObject *t_EnglishStemmer_stem(t_EnglishStemmer *self, PyObject *args);

        static PyMethodDef t_EnglishStemmer__methods_[] = {
          DECLARE_METHOD(t_EnglishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_EnglishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_EnglishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_EnglishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_EnglishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(EnglishStemmer, t_EnglishStemmer, ::org::tartarus::snowball::SnowballProgram, EnglishStemmer, t_EnglishStemmer_init_, 0, 0, 0, 0, 0);

        void t_EnglishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(EnglishStemmer), module, "EnglishStemmer", 0);
        }

        void t_EnglishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(EnglishStemmer).tp_dict, "class_", make_descriptor(EnglishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(EnglishStemmer).tp_dict, "wrapfn_", make_descriptor(t_EnglishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(EnglishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_EnglishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, EnglishStemmer::initializeClass, 1)))
            return NULL;
          return t_EnglishStemmer::wrap_Object(EnglishStemmer(((t_EnglishStemmer *) arg)->object.this$));
        }
        static PyObject *t_EnglishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, EnglishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_EnglishStemmer_init_(t_EnglishStemmer *self, PyObject *args, PyObject *kwds)
        {
          EnglishStemmer object((jobject) NULL);

          INT_CALL(object = EnglishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_EnglishStemmer_equals(t_EnglishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(EnglishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_EnglishStemmer_hashCode(t_EnglishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(EnglishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_EnglishStemmer_stem(t_EnglishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(EnglishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ControlledRealTimeReopenThread.h"
#include "java/io/Closeable.h"
#include "java/lang/InterruptedException.h"
#include "org/apache/lucene/index/TrackingIndexWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ControlledRealTimeReopenThread::class$ = NULL;
        jmethodID *ControlledRealTimeReopenThread::mids$ = NULL;
        bool ControlledRealTimeReopenThread::live$ = false;

        jclass ControlledRealTimeReopenThread::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ControlledRealTimeReopenThread");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a0c538a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TrackingIndexWriter;Lorg/apache/lucene/search/ReferenceManager;DD)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_run_54c6a166] = env->getMethodID(cls, "run", "()V");
            mids$[mid_waitForGeneration_0ee6df2f] = env->getMethodID(cls, "waitForGeneration", "(J)V");
            mids$[mid_waitForGeneration_25d05c83] = env->getMethodID(cls, "waitForGeneration", "(JI)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ControlledRealTimeReopenThread::ControlledRealTimeReopenThread(const ::org::apache::lucene::index::TrackingIndexWriter & a0, const ::org::apache::lucene::search::ReferenceManager & a1, jdouble a2, jdouble a3) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_a0c538a8, a0.this$, a1.this$, a2, a3)) {}

        void ControlledRealTimeReopenThread::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void ControlledRealTimeReopenThread::run() const
        {
          env->callVoidMethod(this$, mids$[mid_run_54c6a166]);
        }

        void ControlledRealTimeReopenThread::waitForGeneration(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_waitForGeneration_0ee6df2f], a0);
        }

        jboolean ControlledRealTimeReopenThread::waitForGeneration(jlong a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_waitForGeneration_25d05c83], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ControlledRealTimeReopenThread_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ControlledRealTimeReopenThread_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ControlledRealTimeReopenThread_of_(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static int t_ControlledRealTimeReopenThread_init_(t_ControlledRealTimeReopenThread *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ControlledRealTimeReopenThread_close(t_ControlledRealTimeReopenThread *self);
        static PyObject *t_ControlledRealTimeReopenThread_run(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static PyObject *t_ControlledRealTimeReopenThread_waitForGeneration(t_ControlledRealTimeReopenThread *self, PyObject *args);
        static PyObject *t_ControlledRealTimeReopenThread_get__parameters_(t_ControlledRealTimeReopenThread *self, void *data);
        static PyGetSetDef t_ControlledRealTimeReopenThread__fields_[] = {
          DECLARE_GET_FIELD(t_ControlledRealTimeReopenThread, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ControlledRealTimeReopenThread__methods_[] = {
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, of_, METH_VARARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, close, METH_NOARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, run, METH_VARARGS),
          DECLARE_METHOD(t_ControlledRealTimeReopenThread, waitForGeneration, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ControlledRealTimeReopenThread, t_ControlledRealTimeReopenThread, ::java::lang::Thread, ControlledRealTimeReopenThread, t_ControlledRealTimeReopenThread_init_, 0, 0, t_ControlledRealTimeReopenThread__fields_, 0, 0);
        PyObject *t_ControlledRealTimeReopenThread::wrap_Object(const ControlledRealTimeReopenThread& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ControlledRealTimeReopenThread::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ControlledRealTimeReopenThread *self = (t_ControlledRealTimeReopenThread *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ControlledRealTimeReopenThread::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ControlledRealTimeReopenThread::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ControlledRealTimeReopenThread *self = (t_ControlledRealTimeReopenThread *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ControlledRealTimeReopenThread::install(PyObject *module)
        {
          installType(&PY_TYPE(ControlledRealTimeReopenThread), module, "ControlledRealTimeReopenThread", 0);
        }

        void t_ControlledRealTimeReopenThread::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ControlledRealTimeReopenThread).tp_dict, "class_", make_descriptor(ControlledRealTimeReopenThread::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ControlledRealTimeReopenThread).tp_dict, "wrapfn_", make_descriptor(t_ControlledRealTimeReopenThread::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ControlledRealTimeReopenThread).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ControlledRealTimeReopenThread_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ControlledRealTimeReopenThread::initializeClass, 1)))
            return NULL;
          return t_ControlledRealTimeReopenThread::wrap_Object(ControlledRealTimeReopenThread(((t_ControlledRealTimeReopenThread *) arg)->object.this$));
        }
        static PyObject *t_ControlledRealTimeReopenThread_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ControlledRealTimeReopenThread::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ControlledRealTimeReopenThread_of_(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ControlledRealTimeReopenThread_init_(t_ControlledRealTimeReopenThread *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::TrackingIndexWriter a0((jobject) NULL);
          ::org::apache::lucene::search::ReferenceManager a1((jobject) NULL);
          PyTypeObject **p1;
          jdouble a2;
          jdouble a3;
          ControlledRealTimeReopenThread object((jobject) NULL);

          if (!parseArgs(args, "kKDD", ::org::apache::lucene::index::TrackingIndexWriter::initializeClass, ::org::apache::lucene::search::ReferenceManager::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_ReferenceManager::parameters_, &a2, &a3))
          {
            INT_CALL(object = ControlledRealTimeReopenThread(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ControlledRealTimeReopenThread_close(t_ControlledRealTimeReopenThread *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_ControlledRealTimeReopenThread_run(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.run());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ControlledRealTimeReopenThread), (PyObject *) self, "run", args, 2);
        }

        static PyObject *t_ControlledRealTimeReopenThread_waitForGeneration(t_ControlledRealTimeReopenThread *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.waitForGeneration(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jint a1;
              jboolean result;

              if (!parseArgs(args, "JI", &a0, &a1))
              {
                OBJ_CALL(result = self->object.waitForGeneration(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "waitForGeneration", args);
          return NULL;
        }
        static PyObject *t_ControlledRealTimeReopenThread_get__parameters_(t_ControlledRealTimeReopenThread *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *NumericRangeFilterBuilder::class$ = NULL;
            jmethodID *NumericRangeFilterBuilder::mids$ = NULL;
            bool NumericRangeFilterBuilder::live$ = false;

            jclass NumericRangeFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_setStrictMode_bb0c767f] = env->getMethodID(cls, "setStrictMode", "(Z)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NumericRangeFilterBuilder::NumericRangeFilterBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            void NumericRangeFilterBuilder::setStrictMode(jboolean a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setStrictMode_bb0c767f], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_NumericRangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NumericRangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NumericRangeFilterBuilder_init_(t_NumericRangeFilterBuilder *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NumericRangeFilterBuilder_setStrictMode(t_NumericRangeFilterBuilder *self, PyObject *arg);
            static int t_NumericRangeFilterBuilder_set__strictMode(t_NumericRangeFilterBuilder *self, PyObject *arg, void *data);
            static PyGetSetDef t_NumericRangeFilterBuilder__fields_[] = {
              DECLARE_SET_FIELD(t_NumericRangeFilterBuilder, strictMode),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NumericRangeFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_NumericRangeFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumericRangeFilterBuilder, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumericRangeFilterBuilder, setStrictMode, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NumericRangeFilterBuilder, t_NumericRangeFilterBuilder, ::java::lang::Object, NumericRangeFilterBuilder, t_NumericRangeFilterBuilder_init_, 0, 0, t_NumericRangeFilterBuilder__fields_, 0, 0);

            void t_NumericRangeFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(NumericRangeFilterBuilder), module, "NumericRangeFilterBuilder", 0);
            }

            void t_NumericRangeFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NumericRangeFilterBuilder).tp_dict, "class_", make_descriptor(NumericRangeFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NumericRangeFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NumericRangeFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NumericRangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NumericRangeFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_NumericRangeFilterBuilder::wrap_Object(NumericRangeFilterBuilder(((t_NumericRangeFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_NumericRangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NumericRangeFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NumericRangeFilterBuilder_init_(t_NumericRangeFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              NumericRangeFilterBuilder object((jobject) NULL);

              INT_CALL(object = NumericRangeFilterBuilder());
              self->object = object;

              return 0;
            }

            static PyObject *t_NumericRangeFilterBuilder_setStrictMode(t_NumericRangeFilterBuilder *self, PyObject *arg)
            {
              jboolean a0;

              if (!parseArg(arg, "Z", &a0))
              {
                OBJ_CALL(self->object.setStrictMode(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setStrictMode", arg);
              return NULL;
            }

            static int t_NumericRangeFilterBuilder_set__strictMode(t_NumericRangeFilterBuilder *self, PyObject *arg, void *data)
            {
              {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                  INT_CALL(self->object.setStrictMode(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "strictMode", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemFilterFactory::class$ = NULL;
          jmethodID *GalicianMinimalStemFilterFactory::mids$ = NULL;
          bool GalicianMinimalStemFilterFactory::live$ = false;

          jclass GalicianMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemFilterFactory::GalicianMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GalicianMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemFilterFactory_init_(t_GalicianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemFilterFactory_create(t_GalicianMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianMinimalStemFilterFactory, t_GalicianMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GalicianMinimalStemFilterFactory, t_GalicianMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GalicianMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemFilterFactory), module, "GalicianMinimalStemFilterFactory", 0);
          }

          void t_GalicianMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(GalicianMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GalicianMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemFilterFactory::wrap_Object(GalicianMinimalStemFilterFactory(((t_GalicianMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemFilterFactory_init_(t_GalicianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GalicianMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GalicianMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianMinimalStemFilterFactory_create(t_GalicianMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GalicianMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Appendable.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *CharTermAttribute::class$ = NULL;
          jmethodID *CharTermAttribute::mids$ = NULL;
          bool CharTermAttribute::live$ = false;

          jclass CharTermAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/CharTermAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_append_8fff6b0d] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_ec8fc27b] = env->getMethodID(cls, "append", "(C)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_950755e3] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_727d3f8d] = env->getMethodID(cls, "append", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_2b3c6943] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_6505d5ab] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_buffer_dab10e7f] = env->getMethodID(cls, "buffer", "()[C");
              mids$[mid_copyBuffer_6f0bb356] = env->getMethodID(cls, "copyBuffer", "([CII)V");
              mids$[mid_resizeBuffer_b4292e99] = env->getMethodID(cls, "resizeBuffer", "(I)[C");
              mids$[mid_setEmpty_211a9257] = env->getMethodID(cls, "setEmpty", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_setLength_da4913e5] = env->getMethodID(cls, "setLength", "(I)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::StringBuilder & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_8fff6b0d], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(jchar a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_ec8fc27b], a0));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::CharSequence & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_950755e3], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::String & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_727d3f8d], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const CharTermAttribute & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_2b3c6943], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_6505d5ab], a0.this$, a1, a2));
          }

          JArray< jchar > CharTermAttribute::buffer() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_buffer_dab10e7f]));
          }

          void CharTermAttribute::copyBuffer(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_copyBuffer_6f0bb356], a0.this$, a1, a2);
          }

          JArray< jchar > CharTermAttribute::resizeBuffer(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_resizeBuffer_b4292e99], a0));
          }

          CharTermAttribute CharTermAttribute::setEmpty() const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setEmpty_211a9257]));
          }

          CharTermAttribute CharTermAttribute::setLength(jint a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setLength_da4913e5], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_CharTermAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttribute_append(t_CharTermAttribute *self, PyObject *args);
          static PyObject *t_CharTermAttribute_buffer(t_CharTermAttribute *self);
          static PyObject *t_CharTermAttribute_copyBuffer(t_CharTermAttribute *self, PyObject *args);
          static PyObject *t_CharTermAttribute_resizeBuffer(t_CharTermAttribute *self, PyObject *arg);
          static PyObject *t_CharTermAttribute_setEmpty(t_CharTermAttribute *self);
          static PyObject *t_CharTermAttribute_setLength(t_CharTermAttribute *self, PyObject *arg);
          static int t_CharTermAttribute_set__length(t_CharTermAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_CharTermAttribute__fields_[] = {
            DECLARE_SET_FIELD(t_CharTermAttribute, length),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharTermAttribute__methods_[] = {
            DECLARE_METHOD(t_CharTermAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttribute, append, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttribute, buffer, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttribute, copyBuffer, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttribute, resizeBuffer, METH_O),
            DECLARE_METHOD(t_CharTermAttribute, setEmpty, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttribute, setLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharTermAttribute, t_CharTermAttribute, ::org::apache::lucene::util::Attribute, CharTermAttribute, abstract_init, 0, 0, t_CharTermAttribute__fields_, 0, 0);

          void t_CharTermAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTermAttribute), module, "CharTermAttribute", 0);
          }

          void t_CharTermAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharTermAttribute).tp_dict, "class_", make_descriptor(CharTermAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharTermAttribute).tp_dict, "wrapfn_", make_descriptor(t_CharTermAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharTermAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharTermAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTermAttribute::initializeClass, 1)))
              return NULL;
            return t_CharTermAttribute::wrap_Object(CharTermAttribute(((t_CharTermAttribute *) arg)->object.this$));
          }
          static PyObject *t_CharTermAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTermAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharTermAttribute_append(t_CharTermAttribute *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::StringBuilder a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                jchar a0;
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                CharTermAttribute a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", CharTermAttribute::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_buffer(t_CharTermAttribute *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.buffer());
            return result.wrap();
          }

          static PyObject *t_CharTermAttribute_copyBuffer(t_CharTermAttribute *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.copyBuffer(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copyBuffer", args);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_resizeBuffer(t_CharTermAttribute *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resizeBuffer(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "resizeBuffer", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_setEmpty(t_CharTermAttribute *self)
          {
            CharTermAttribute result((jobject) NULL);
            OBJ_CALL(result = self->object.setEmpty());
            return t_CharTermAttribute::wrap_Object(result);
          }

          static PyObject *t_CharTermAttribute_setLength(t_CharTermAttribute *self, PyObject *arg)
          {
            jint a0;
            CharTermAttribute result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setLength(a0));
              return t_CharTermAttribute::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static int t_CharTermAttribute_set__length(t_CharTermAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "length", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/TermContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermQuery::class$ = NULL;
        jmethodID *TermQuery::mids$ = NULL;
        bool TermQuery::live$ = false;

        jclass TermQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_init$_ec3f6ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;)V");
            mids$[mid_init$_05555589] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermQuery::TermQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        TermQuery::TermQuery(const ::org::apache::lucene::index::Term & a0, const ::org::apache::lucene::index::TermContext & a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_ec3f6ef2, a0.this$, a1.this$)) {}

        TermQuery::TermQuery(const ::org::apache::lucene::index::Term & a0, jint a1) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_05555589, a0.this$, a1)) {}

        ::org::apache::lucene::search::Weight TermQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean TermQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void TermQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::org::apache::lucene::index::Term TermQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        jint TermQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String TermQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TermQuery_init_(t_TermQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermQuery_createWeight(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_equals(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_extractTerms(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_getTerm(t_TermQuery *self);
        static PyObject *t_TermQuery_hashCode(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_toString(t_TermQuery *self, PyObject *args);
        static PyObject *t_TermQuery_get__term(t_TermQuery *self, void *data);
        static PyGetSetDef t_TermQuery__fields_[] = {
          DECLARE_GET_FIELD(t_TermQuery, term),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermQuery__methods_[] = {
          DECLARE_METHOD(t_TermQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TermQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermQuery, t_TermQuery, ::org::apache::lucene::search::Query, TermQuery, t_TermQuery_init_, 0, 0, t_TermQuery__fields_, 0, 0);

        void t_TermQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(TermQuery), module, "TermQuery", 0);
        }

        void t_TermQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermQuery).tp_dict, "class_", make_descriptor(TermQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermQuery).tp_dict, "wrapfn_", make_descriptor(t_TermQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermQuery::initializeClass, 1)))
            return NULL;
          return t_TermQuery::wrap_Object(TermQuery(((t_TermQuery *) arg)->object.this$));
        }
        static PyObject *t_TermQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TermQuery_init_(t_TermQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              TermQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                INT_CALL(object = TermQuery(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::index::TermContext a1((jobject) NULL);
              TermQuery object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::TermContext::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TermQuery(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;
              TermQuery object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TermQuery(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermQuery_createWeight(t_TermQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_TermQuery_equals(t_TermQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TermQuery_extractTerms(t_TermQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_TermQuery_getTerm(t_TermQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_TermQuery_hashCode(t_TermQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TermQuery_toString(t_TermQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TermQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TermQuery_get__term(t_TermQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/collation/CollationKeyAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {

        ::java::lang::Class *CollationKeyAnalyzer::class$ = NULL;
        jmethodID *CollationKeyAnalyzer::mids$ = NULL;
        bool CollationKeyAnalyzer::live$ = false;

        jclass CollationKeyAnalyzer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/collation/CollationKeyAnalyzer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c5e10a9c] = env->getMethodID(cls, "<init>", "(Ljava/text/Collator;)V");
            mids$[mid_init$_09eedbb5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/text/Collator;)V");
            mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollationKeyAnalyzer::CollationKeyAnalyzer(const ::java::text::Collator & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_c5e10a9c, a0.this$)) {}

        CollationKeyAnalyzer::CollationKeyAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::java::text::Collator & a1) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_09eedbb5, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace collation {
        static PyObject *t_CollationKeyAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollationKeyAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollationKeyAnalyzer_init_(t_CollationKeyAnalyzer *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CollationKeyAnalyzer__methods_[] = {
          DECLARE_METHOD(t_CollationKeyAnalyzer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollationKeyAnalyzer, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollationKeyAnalyzer, t_CollationKeyAnalyzer, ::org::apache::lucene::analysis::Analyzer, CollationKeyAnalyzer, t_CollationKeyAnalyzer_init_, 0, 0, 0, 0, 0);

        void t_CollationKeyAnalyzer::install(PyObject *module)
        {
          installType(&PY_TYPE(CollationKeyAnalyzer), module, "CollationKeyAnalyzer", 0);
        }

        void t_CollationKeyAnalyzer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollationKeyAnalyzer).tp_dict, "class_", make_descriptor(CollationKeyAnalyzer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollationKeyAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_CollationKeyAnalyzer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollationKeyAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollationKeyAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollationKeyAnalyzer::initializeClass, 1)))
            return NULL;
          return t_CollationKeyAnalyzer::wrap_Object(CollationKeyAnalyzer(((t_CollationKeyAnalyzer *) arg)->object.this$));
        }
        static PyObject *t_CollationKeyAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollationKeyAnalyzer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollationKeyAnalyzer_init_(t_CollationKeyAnalyzer *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::text::Collator a0((jobject) NULL);
              CollationKeyAnalyzer object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::text::Collator::initializeClass, &a0))
              {
                INT_CALL(object = CollationKeyAnalyzer(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::util::Version a0((jobject) NULL);
              PyTypeObject **p0;
              ::java::text::Collator a1((jobject) NULL);
              CollationKeyAnalyzer object((jobject) NULL);

              if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::text::Collator::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
              {
                INT_CALL(object = CollationKeyAnalyzer(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InputIterator::class$ = NULL;
          jmethodID *InputIterator::mids$ = NULL;
          bool InputIterator::live$ = false;
          InputIterator *InputIterator::EMPTY = NULL;

          jclass InputIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InputIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_contexts_03e99967] = env->getMethodID(cls, "contexts", "()Ljava/util/Set;");
              mids$[mid_hasContexts_54c6a16a] = env->getMethodID(cls, "hasContexts", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_payload_4ae19461] = env->getMethodID(cls, "payload", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY = new InputIterator(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/suggest/InputIterator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set InputIterator::contexts() const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_contexts_03e99967]));
          }

          jboolean InputIterator::hasContexts() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasContexts_54c6a16a]);
          }

          jboolean InputIterator::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          ::org::apache::lucene::util::BytesRef InputIterator::payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_payload_4ae19461]));
          }

          jlong InputIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/suggest/InputIterator$InputIteratorWrapper.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InputIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InputIterator_contexts(t_InputIterator *self);
          static PyObject *t_InputIterator_hasContexts(t_InputIterator *self);
          static PyObject *t_InputIterator_hasPayloads(t_InputIterator *self);
          static PyObject *t_InputIterator_payload(t_InputIterator *self);
          static PyObject *t_InputIterator_weight(t_InputIterator *self);

          static PyMethodDef t_InputIterator__methods_[] = {
            DECLARE_METHOD(t_InputIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputIterator, contexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, hasContexts, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, hasPayloads, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, payload, METH_NOARGS),
            DECLARE_METHOD(t_InputIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InputIterator, t_InputIterator, ::org::apache::lucene::util::BytesRefIterator, InputIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_InputIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(InputIterator), module, "InputIterator", 0);
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "InputIteratorWrapper", make_descriptor(&PY_TYPE(InputIterator$InputIteratorWrapper)));
          }

          void t_InputIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "class_", make_descriptor(InputIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "wrapfn_", make_descriptor(t_InputIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(InputIterator::initializeClass);
            PyDict_SetItemString(PY_TYPE(InputIterator).tp_dict, "EMPTY", make_descriptor(t_InputIterator::wrap_Object(*InputIterator::EMPTY)));
          }

          static PyObject *t_InputIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InputIterator::initializeClass, 1)))
              return NULL;
            return t_InputIterator::wrap_Object(InputIterator(((t_InputIterator *) arg)->object.this$));
          }
          static PyObject *t_InputIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InputIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_InputIterator_contexts(t_InputIterator *self)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.contexts());
            return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InputIterator_hasContexts(t_InputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasContexts());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator_hasPayloads(t_InputIterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasPayloads());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_InputIterator_payload(t_InputIterator *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_InputIterator_weight(t_InputIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/NumericQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *NumericQueryNodeProcessor::class$ = NULL;
              jmethodID *NumericQueryNodeProcessor::mids$ = NULL;
              bool NumericQueryNodeProcessor::live$ = false;

              jclass NumericQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/NumericQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericQueryNodeProcessor::NumericQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_NumericQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericQueryNodeProcessor_init_(t_NumericQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NumericQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_NumericQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericQueryNodeProcessor, t_NumericQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, NumericQueryNodeProcessor, t_NumericQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_NumericQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericQueryNodeProcessor), module, "NumericQueryNodeProcessor", 0);
              }

              void t_NumericQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericQueryNodeProcessor).tp_dict, "class_", make_descriptor(NumericQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_NumericQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_NumericQueryNodeProcessor::wrap_Object(NumericQueryNodeProcessor(((t_NumericQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_NumericQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericQueryNodeProcessor_init_(t_NumericQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                NumericQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = NumericQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *SearcherTaxonomyManager$SearcherAndTaxonomy::class$ = NULL;
          jmethodID *SearcherTaxonomyManager$SearcherAndTaxonomy::mids$ = NULL;
          jfieldID *SearcherTaxonomyManager$SearcherAndTaxonomy::fids$ = NULL;
          bool SearcherTaxonomyManager$SearcherAndTaxonomy::live$ = false;

          jclass SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/SearcherTaxonomyManager$SearcherAndTaxonomy");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8978d829] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_searcher] = env->getFieldID(cls, "searcher", "Lorg/apache/lucene/search/IndexSearcher;");
              fids$[fid_taxonomyReader] = env->getFieldID(cls, "taxonomyReader", "Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearcherTaxonomyManager$SearcherAndTaxonomy::SearcherTaxonomyManager$SearcherAndTaxonomy(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8978d829, a0.this$, a1.this$)) {}

          ::org::apache::lucene::search::IndexSearcher SearcherTaxonomyManager$SearcherAndTaxonomy::_get_searcher() const
          {
            return ::org::apache::lucene::search::IndexSearcher(env->getObjectField(this$, fids$[fid_searcher]));
          }

          ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader SearcherTaxonomyManager$SearcherAndTaxonomy::_get_taxonomyReader() const
          {
            return ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader(env->getObjectField(this$, fids$[fid_taxonomyReader]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_of_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args);
          static int t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__searcher(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__taxonomyReader(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__parameters_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data);
          static PyGetSetDef t_SearcherTaxonomyManager$SearcherAndTaxonomy__fields_[] = {
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, searcher),
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, taxonomyReader),
            DECLARE_GET_FIELD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearcherTaxonomyManager$SearcherAndTaxonomy__methods_[] = {
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearcherTaxonomyManager$SearcherAndTaxonomy, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy, t_SearcherTaxonomyManager$SearcherAndTaxonomy, ::java::lang::Object, SearcherTaxonomyManager$SearcherAndTaxonomy, t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_, 0, 0, t_SearcherTaxonomyManager$SearcherAndTaxonomy__fields_, 0, 0);
          PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(const SearcherTaxonomyManager$SearcherAndTaxonomy& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager$SearcherAndTaxonomy *self = (t_SearcherTaxonomyManager$SearcherAndTaxonomy *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearcherTaxonomyManager$SearcherAndTaxonomy *self = (t_SearcherTaxonomyManager$SearcherAndTaxonomy *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearcherTaxonomyManager$SearcherAndTaxonomy::install(PyObject *module)
          {
            installType(&PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy), module, "SearcherTaxonomyManager$SearcherAndTaxonomy", 0);
          }

          void t_SearcherTaxonomyManager$SearcherAndTaxonomy::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy).tp_dict, "class_", make_descriptor(SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy).tp_dict, "wrapfn_", make_descriptor(t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 1)))
              return NULL;
            return t_SearcherTaxonomyManager$SearcherAndTaxonomy::wrap_Object(SearcherTaxonomyManager$SearcherAndTaxonomy(((t_SearcherTaxonomyManager$SearcherAndTaxonomy *) arg)->object.this$));
          }
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearcherTaxonomyManager$SearcherAndTaxonomy::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_of_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearcherTaxonomyManager$SearcherAndTaxonomy_init_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader a1((jobject) NULL);
            SearcherTaxonomyManager$SearcherAndTaxonomy object((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader::initializeClass, &a0, &a1))
            {
              INT_CALL(object = SearcherTaxonomyManager$SearcherAndTaxonomy(a0, a1));
              self->object = object;
              self->parameters[0] = &::org::apache::lucene::facet::taxonomy::PY_TYPE(SearcherTaxonomyManager$SearcherAndTaxonomy);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__parameters_(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__searcher(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            ::org::apache::lucene::search::IndexSearcher value((jobject) NULL);
            OBJ_CALL(value = self->object._get_searcher());
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(value);
          }

          static PyObject *t_SearcherTaxonomyManager$SearcherAndTaxonomy_get__taxonomyReader(t_SearcherTaxonomyManager$SearcherAndTaxonomy *self, void *data)
          {
            ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyReader value((jobject) NULL);
            OBJ_CALL(value = self->object._get_taxonomyReader());
            return ::org::apache::lucene::facet::taxonomy::directory::t_DirectoryTaxonomyReader::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/MatchNoDocsQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *MatchNoDocsQueryNode::class$ = NULL;
              jmethodID *MatchNoDocsQueryNode::mids$ = NULL;
              bool MatchNoDocsQueryNode::live$ = false;

              jclass MatchNoDocsQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/MatchNoDocsQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchNoDocsQueryNode::MatchNoDocsQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::java::lang::String MatchNoDocsQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_MatchNoDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchNoDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchNoDocsQueryNode_init_(t_MatchNoDocsQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchNoDocsQueryNode_toString(t_MatchNoDocsQueryNode *self, PyObject *args);

              static PyMethodDef t_MatchNoDocsQueryNode__methods_[] = {
                DECLARE_METHOD(t_MatchNoDocsQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchNoDocsQueryNode, t_MatchNoDocsQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::DeletedQueryNode, MatchNoDocsQueryNode, t_MatchNoDocsQueryNode_init_, 0, 0, 0, 0, 0);

              void t_MatchNoDocsQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchNoDocsQueryNode), module, "MatchNoDocsQueryNode", 0);
              }

              void t_MatchNoDocsQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNode).tp_dict, "class_", make_descriptor(MatchNoDocsQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNode).tp_dict, "wrapfn_", make_descriptor(t_MatchNoDocsQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchNoDocsQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchNoDocsQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MatchNoDocsQueryNode::wrap_Object(MatchNoDocsQueryNode(((t_MatchNoDocsQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MatchNoDocsQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchNoDocsQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchNoDocsQueryNode_init_(t_MatchNoDocsQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MatchNoDocsQueryNode object((jobject) NULL);

                INT_CALL(object = MatchNoDocsQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchNoDocsQueryNode_toString(t_MatchNoDocsQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(MatchNoDocsQueryNode), (PyObject *) self, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexDeletionPolicy::class$ = NULL;
        jmethodID *IndexDeletionPolicy::mids$ = NULL;
        bool IndexDeletionPolicy::live$ = false;

        jclass IndexDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void IndexDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_onCommit(t_IndexDeletionPolicy *self, PyObject *arg);
        static PyObject *t_IndexDeletionPolicy_onInit(t_IndexDeletionPolicy *self, PyObject *arg);

        static PyMethodDef t_IndexDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_IndexDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexDeletionPolicy, onCommit, METH_O),
          DECLARE_METHOD(t_IndexDeletionPolicy, onInit, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexDeletionPolicy, t_IndexDeletionPolicy, ::java::lang::Object, IndexDeletionPolicy, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexDeletionPolicy), module, "IndexDeletionPolicy", 0);
        }

        void t_IndexDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexDeletionPolicy).tp_dict, "class_", make_descriptor(IndexDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_IndexDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_IndexDeletionPolicy::wrap_Object(IndexDeletionPolicy(((t_IndexDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_IndexDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexDeletionPolicy_onCommit(t_IndexDeletionPolicy *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onCommit", arg);
          return NULL;
        }

        static PyObject *t_IndexDeletionPolicy_onInit(t_IndexDeletionPolicy *self, PyObject *arg)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "onInit", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IDFValueSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IDFValueSource::class$ = NULL;
            jmethodID *IDFValueSource::mids$ = NULL;
            bool IDFValueSource::live$ = false;

            jclass IDFValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IDFValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IDFValueSource::IDFValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues IDFValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            ::java::lang::String IDFValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IDFValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IDFValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IDFValueSource_init_(t_IDFValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IDFValueSource_getValues(t_IDFValueSource *self, PyObject *args);
            static PyObject *t_IDFValueSource_name(t_IDFValueSource *self, PyObject *args);

            static PyMethodDef t_IDFValueSource__methods_[] = {
              DECLARE_METHOD(t_IDFValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IDFValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IDFValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IDFValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IDFValueSource, t_IDFValueSource, ::org::apache::lucene::queries::function::valuesource::DocFreqValueSource, IDFValueSource, t_IDFValueSource_init_, 0, 0, 0, 0, 0);

            void t_IDFValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(IDFValueSource), module, "IDFValueSource", 0);
            }

            void t_IDFValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IDFValueSource).tp_dict, "class_", make_descriptor(IDFValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IDFValueSource).tp_dict, "wrapfn_", make_descriptor(t_IDFValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IDFValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IDFValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IDFValueSource::initializeClass, 1)))
                return NULL;
              return t_IDFValueSource::wrap_Object(IDFValueSource(((t_IDFValueSource *) arg)->object.this$));
            }
            static PyObject *t_IDFValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IDFValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IDFValueSource_init_(t_IDFValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              IDFValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = IDFValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IDFValueSource_getValues(t_IDFValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IDFValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IDFValueSource_name(t_IDFValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IDFValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FastTaxonomyFacetCounts.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FastTaxonomyFacetCounts::class$ = NULL;
          jmethodID *FastTaxonomyFacetCounts::mids$ = NULL;
          bool FastTaxonomyFacetCounts::live$ = false;

          jclass FastTaxonomyFacetCounts::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FastTaxonomyFacetCounts");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_33dd1605] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");
              mids$[mid_init$_9888e06b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastTaxonomyFacetCounts::FastTaxonomyFacetCounts(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_33dd1605, a0.this$, a1.this$, a2.this$)) {}

          FastTaxonomyFacetCounts::FastTaxonomyFacetCounts(const ::java::lang::String & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3) : ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_9888e06b, a0.this$, a1.this$, a2.this$, a3.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FastTaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastTaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastTaxonomyFacetCounts_init_(t_FastTaxonomyFacetCounts *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_FastTaxonomyFacetCounts__methods_[] = {
            DECLARE_METHOD(t_FastTaxonomyFacetCounts, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastTaxonomyFacetCounts, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FastTaxonomyFacetCounts, t_FastTaxonomyFacetCounts, ::org::apache::lucene::facet::taxonomy::IntTaxonomyFacets, FastTaxonomyFacetCounts, t_FastTaxonomyFacetCounts_init_, 0, 0, 0, 0, 0);

          void t_FastTaxonomyFacetCounts::install(PyObject *module)
          {
            installType(&PY_TYPE(FastTaxonomyFacetCounts), module, "FastTaxonomyFacetCounts", 0);
          }

          void t_FastTaxonomyFacetCounts::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FastTaxonomyFacetCounts).tp_dict, "class_", make_descriptor(FastTaxonomyFacetCounts::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FastTaxonomyFacetCounts).tp_dict, "wrapfn_", make_descriptor(t_FastTaxonomyFacetCounts::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FastTaxonomyFacetCounts).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FastTaxonomyFacetCounts_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastTaxonomyFacetCounts::initializeClass, 1)))
              return NULL;
            return t_FastTaxonomyFacetCounts::wrap_Object(FastTaxonomyFacetCounts(((t_FastTaxonomyFacetCounts *) arg)->object.this$));
          }
          static PyObject *t_FastTaxonomyFacetCounts_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastTaxonomyFacetCounts::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastTaxonomyFacetCounts_init_(t_FastTaxonomyFacetCounts *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                FastTaxonomyFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = FastTaxonomyFacetCounts(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                FastTaxonomyFacetCounts object((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FastTaxonomyFacetCounts(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hy/ArmenianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hy {

          ::java::lang::Class *ArmenianAnalyzer::class$ = NULL;
          jmethodID *ArmenianAnalyzer::mids$ = NULL;
          bool ArmenianAnalyzer::live$ = false;
          ::java::lang::String *ArmenianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass ArmenianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hy/ArmenianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          ArmenianAnalyzer::ArmenianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet ArmenianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hy {
          static PyObject *t_ArmenianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArmenianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArmenianAnalyzer_init_(t_ArmenianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArmenianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_ArmenianAnalyzer_get__defaultStopSet(t_ArmenianAnalyzer *self, void *data);
          static PyGetSetDef t_ArmenianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_ArmenianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ArmenianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_ArmenianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArmenianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArmenianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArmenianAnalyzer, t_ArmenianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, ArmenianAnalyzer, t_ArmenianAnalyzer_init_, 0, 0, t_ArmenianAnalyzer__fields_, 0, 0);

          void t_ArmenianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArmenianAnalyzer), module, "ArmenianAnalyzer", 0);
          }

          void t_ArmenianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "class_", make_descriptor(ArmenianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_ArmenianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArmenianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArmenianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*ArmenianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_ArmenianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArmenianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_ArmenianAnalyzer::wrap_Object(ArmenianAnalyzer(((t_ArmenianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_ArmenianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArmenianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArmenianAnalyzer_init_(t_ArmenianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                ArmenianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = ArmenianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArmenianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hy::ArmenianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_ArmenianAnalyzer_get__defaultStopSet(t_ArmenianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/Compressor.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *Compressor::class$ = NULL;
          jmethodID *Compressor::mids$ = NULL;
          bool Compressor::live$ = false;

          jclass Compressor::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/Compressor");

              mids$ = new jmethodID[max_mid];
              mids$[mid_compress_13c9f1ba] = env->getMethodID(cls, "compress", "([BIILorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void Compressor::compress(const JArray< jbyte > & a0, jint a1, jint a2, const ::org::apache::lucene::store::DataOutput & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_compress_13c9f1ba], a0.this$, a1, a2, a3.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_Compressor_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Compressor_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Compressor_compress(t_Compressor *self, PyObject *args);

          static PyMethodDef t_Compressor__methods_[] = {
            DECLARE_METHOD(t_Compressor, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Compressor, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Compressor, compress, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Compressor, t_Compressor, ::java::lang::Object, Compressor, abstract_init, 0, 0, 0, 0, 0);

          void t_Compressor::install(PyObject *module)
          {
            installType(&PY_TYPE(Compressor), module, "Compressor", 0);
          }

          void t_Compressor::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Compressor).tp_dict, "class_", make_descriptor(Compressor::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Compressor).tp_dict, "wrapfn_", make_descriptor(t_Compressor::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Compressor).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Compressor_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Compressor::initializeClass, 1)))
              return NULL;
            return t_Compressor::wrap_Object(Compressor(((t_Compressor *) arg)->object.this$));
          }
          static PyObject *t_Compressor_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Compressor::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Compressor_compress(t_Compressor *self, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint a2;
            ::org::apache::lucene::store::DataOutput a3((jobject) NULL);

            if (!parseArgs(args, "[BIIk", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.compress(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "compress", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongsRef.h"
#include "java/lang/Comparable.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongsRef::class$ = NULL;
        jmethodID *LongsRef::mids$ = NULL;
        jfieldID *LongsRef::fids$ = NULL;
        bool LongsRef::live$ = false;
        JArray< jlong > *LongsRef::EMPTY_LONGS = NULL;

        jclass LongsRef::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongsRef");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_6ae021e7] = env->getMethodID(cls, "<init>", "([JII)V");
            mids$[mid_clone_3dcbb725] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/LongsRef;");
            mids$[mid_compareTo_ec8421f7] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/LongsRef;)I");
            mids$[mid_copyLongs_ec8421e8] = env->getMethodID(cls, "copyLongs", "(Lorg/apache/lucene/util/LongsRef;)V");
            mids$[mid_deepCopyOf_2075e53f] = env->getStaticMethodID(cls, "deepCopyOf", "(Lorg/apache/lucene/util/LongsRef;)Lorg/apache/lucene/util/LongsRef;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_grow_39c7bd3c] = env->getMethodID(cls, "grow", "(I)V");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
            mids$[mid_longsEquals_ec8421e4] = env->getMethodID(cls, "longsEquals", "(Lorg/apache/lucene/util/LongsRef;)Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_longs] = env->getFieldID(cls, "longs", "[J");
            fids$[fid_offset] = env->getFieldID(cls, "offset", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_LONGS = new JArray< jlong >(env->getStaticObjectField(cls, "EMPTY_LONGS", "[J"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongsRef::LongsRef() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        LongsRef::LongsRef(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        LongsRef::LongsRef(const JArray< jlong > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6ae021e7, a0.this$, a1, a2)) {}

        LongsRef LongsRef::clone() const
        {
          return LongsRef(env->callObjectMethod(this$, mids$[mid_clone_3dcbb725]));
        }

        jint LongsRef::compareTo(const LongsRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_ec8421f7], a0.this$);
        }

        void LongsRef::copyLongs(const LongsRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyLongs_ec8421e8], a0.this$);
        }

        LongsRef LongsRef::deepCopyOf(const LongsRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return LongsRef(env->callStaticObjectMethod(cls, mids$[mid_deepCopyOf_2075e53f], a0.this$));
        }

        jboolean LongsRef::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void LongsRef::grow(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_grow_39c7bd3c], a0);
        }

        jint LongsRef::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean LongsRef::isValid() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
        }

        jboolean LongsRef::longsEquals(const LongsRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_longsEquals_ec8421e4], a0.this$);
        }

        ::java::lang::String LongsRef::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint LongsRef::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        void LongsRef::_set_length(jint a0) const
        {
          env->setIntField(this$, fids$[fid_length], a0);
        }

        JArray< jlong > LongsRef::_get_longs() const
        {
          return JArray< jlong >(env->getObjectField(this$, fids$[fid_longs]));
        }

        void LongsRef::_set_longs(const JArray< jlong > & a0) const
        {
          env->setObjectField(this$, fids$[fid_longs], a0.this$);
        }

        jint LongsRef::_get_offset() const
        {
          return env->getIntField(this$, fids$[fid_offset]);
        }

        void LongsRef::_set_offset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_offset], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongsRef_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongsRef_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongsRef_init_(t_LongsRef *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongsRef_clone(t_LongsRef *self);
        static PyObject *t_LongsRef_compareTo(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_copyLongs(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_deepCopyOf(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongsRef_equals(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_grow(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_hashCode(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_isValid(t_LongsRef *self);
        static PyObject *t_LongsRef_longsEquals(t_LongsRef *self, PyObject *arg);
        static PyObject *t_LongsRef_toString(t_LongsRef *self, PyObject *args);
        static PyObject *t_LongsRef_get__length(t_LongsRef *self, void *data);
        static int t_LongsRef_set__length(t_LongsRef *self, PyObject *arg, void *data);
        static PyObject *t_LongsRef_get__longs(t_LongsRef *self, void *data);
        static int t_LongsRef_set__longs(t_LongsRef *self, PyObject *arg, void *data);
        static PyObject *t_LongsRef_get__offset(t_LongsRef *self, void *data);
        static int t_LongsRef_set__offset(t_LongsRef *self, PyObject *arg, void *data);

        static PyObject *t_LongsRef_get__valid(t_LongsRef *self, void *data);
        static PyGetSetDef t_LongsRef__fields_[] = {
          DECLARE_GETSET_FIELD(t_LongsRef, length),
          DECLARE_GETSET_FIELD(t_LongsRef, longs),
          DECLARE_GETSET_FIELD(t_LongsRef, offset),
          DECLARE_GET_FIELD(t_LongsRef, valid),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LongsRef__methods_[] = {
          DECLARE_METHOD(t_LongsRef, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, clone, METH_NOARGS),
          DECLARE_METHOD(t_LongsRef, compareTo, METH_O),
          DECLARE_METHOD(t_LongsRef, copyLongs, METH_O),
          DECLARE_METHOD(t_LongsRef, deepCopyOf, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongsRef, equals, METH_VARARGS),
          DECLARE_METHOD(t_LongsRef, grow, METH_O),
          DECLARE_METHOD(t_LongsRef, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LongsRef, isValid, METH_NOARGS),
          DECLARE_METHOD(t_LongsRef, longsEquals, METH_O),
          DECLARE_METHOD(t_LongsRef, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongsRef, t_LongsRef, ::java::lang::Object, LongsRef, t_LongsRef_init_, 0, 0, t_LongsRef__fields_, 0, 0);

        void t_LongsRef::install(PyObject *module)
        {
          installType(&PY_TYPE(LongsRef), module, "LongsRef", 0);
        }

        void t_LongsRef::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "class_", make_descriptor(LongsRef::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "wrapfn_", make_descriptor(t_LongsRef::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LongsRef::initializeClass);
          PyDict_SetItemString(PY_TYPE(LongsRef).tp_dict, "EMPTY_LONGS", make_descriptor(LongsRef::EMPTY_LONGS->wrap()));
        }

        static PyObject *t_LongsRef_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongsRef::initializeClass, 1)))
            return NULL;
          return t_LongsRef::wrap_Object(LongsRef(((t_LongsRef *) arg)->object.this$));
        }
        static PyObject *t_LongsRef_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongsRef::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongsRef_init_(t_LongsRef *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              LongsRef object((jobject) NULL);

              INT_CALL(object = LongsRef());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jint a0;
              LongsRef object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = LongsRef(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              jint a2;
              LongsRef object((jobject) NULL);

              if (!parseArgs(args, "[JII", &a0, &a1, &a2))
              {
                INT_CALL(object = LongsRef(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongsRef_clone(t_LongsRef *self)
        {
          LongsRef result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_LongsRef::wrap_Object(result);
        }

        static PyObject *t_LongsRef_compareTo(t_LongsRef *self, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_copyLongs(t_LongsRef *self, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyLongs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyLongs", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_deepCopyOf(PyTypeObject *type, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          LongsRef result((jobject) NULL);

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongsRef::deepCopyOf(a0));
            return t_LongsRef::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "deepCopyOf", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_equals(t_LongsRef *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LongsRef), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LongsRef_grow(t_LongsRef *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.grow(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "grow", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_hashCode(t_LongsRef *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LongsRef), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LongsRef_isValid(t_LongsRef *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isValid());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_LongsRef_longsEquals(t_LongsRef *self, PyObject *arg)
        {
          LongsRef a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", LongsRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.longsEquals(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "longsEquals", arg);
          return NULL;
        }

        static PyObject *t_LongsRef_toString(t_LongsRef *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(LongsRef), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_LongsRef_get__length(t_LongsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }
        static int t_LongsRef_set__length(t_LongsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_length(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "length", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__longs(t_LongsRef *self, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_longs());
          return value.wrap();
        }
        static int t_LongsRef_set__longs(t_LongsRef *self, PyObject *arg, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          if (!parseArg(arg, "[J", &value))
          {
            INT_CALL(self->object._set_longs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "longs", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__offset(t_LongsRef *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_offset());
          return PyInt_FromLong((long) value);
        }
        static int t_LongsRef_set__offset(t_LongsRef *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_offset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "offset", arg);
          return -1;
        }

        static PyObject *t_LongsRef_get__valid(t_LongsRef *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isValid());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractBlockPackedWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractBlockPackedWriter::class$ = NULL;
          jmethodID *AbstractBlockPackedWriter::mids$ = NULL;
          bool AbstractBlockPackedWriter::live$ = false;

          jclass AbstractBlockPackedWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractBlockPackedWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f4663c33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataOutput;I)V");
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_finish_54c6a166] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
              mids$[mid_reset_27875f57] = env->getMethodID(cls, "reset", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
              mids$[mid_writeValues_39c7bd3c] = env->getMethodID(cls, "writeValues", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractBlockPackedWriter::AbstractBlockPackedWriter(const ::org::apache::lucene::store::DataOutput & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f4663c33, a0.this$, a1)) {}

          void AbstractBlockPackedWriter::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          void AbstractBlockPackedWriter::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_54c6a166]);
          }

          jlong AbstractBlockPackedWriter::ord() const
          {
            return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
          }

          void AbstractBlockPackedWriter::reset(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reset_27875f57], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractBlockPackedWriter_init_(t_AbstractBlockPackedWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractBlockPackedWriter_add(t_AbstractBlockPackedWriter *self, PyObject *arg);
          static PyObject *t_AbstractBlockPackedWriter_finish(t_AbstractBlockPackedWriter *self);
          static PyObject *t_AbstractBlockPackedWriter_ord(t_AbstractBlockPackedWriter *self);
          static PyObject *t_AbstractBlockPackedWriter_reset(t_AbstractBlockPackedWriter *self, PyObject *arg);

          static PyMethodDef t_AbstractBlockPackedWriter__methods_[] = {
            DECLARE_METHOD(t_AbstractBlockPackedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, add, METH_O),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, finish, METH_NOARGS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, ord, METH_NOARGS),
            DECLARE_METHOD(t_AbstractBlockPackedWriter, reset, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractBlockPackedWriter, t_AbstractBlockPackedWriter, ::java::lang::Object, AbstractBlockPackedWriter, t_AbstractBlockPackedWriter_init_, 0, 0, 0, 0, 0);

          void t_AbstractBlockPackedWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractBlockPackedWriter), module, "AbstractBlockPackedWriter", 0);
          }

          void t_AbstractBlockPackedWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractBlockPackedWriter).tp_dict, "class_", make_descriptor(AbstractBlockPackedWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractBlockPackedWriter).tp_dict, "wrapfn_", make_descriptor(t_AbstractBlockPackedWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractBlockPackedWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractBlockPackedWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractBlockPackedWriter::initializeClass, 1)))
              return NULL;
            return t_AbstractBlockPackedWriter::wrap_Object(AbstractBlockPackedWriter(((t_AbstractBlockPackedWriter *) arg)->object.this$));
          }
          static PyObject *t_AbstractBlockPackedWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractBlockPackedWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractBlockPackedWriter_init_(t_AbstractBlockPackedWriter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
            jint a1;
            AbstractBlockPackedWriter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              INT_CALL(object = AbstractBlockPackedWriter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractBlockPackedWriter_add(t_AbstractBlockPackedWriter *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_AbstractBlockPackedWriter_finish(t_AbstractBlockPackedWriter *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_AbstractBlockPackedWriter_ord(t_AbstractBlockPackedWriter *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractBlockPackedWriter_reset(t_AbstractBlockPackedWriter *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "reset", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Reduce.h"
#include "org/egothor/stemmer/Trie.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Reduce::class$ = NULL;
      jmethodID *Reduce::mids$ = NULL;
      bool Reduce::live$ = false;

      jclass Reduce::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Reduce");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
          mids$[mid_optimize_c26c0475] = env->getMethodID(cls, "optimize", "(Lorg/egothor/stemmer/Trie;)Lorg/egothor/stemmer/Trie;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Reduce::Reduce() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

      ::org::egothor::stemmer::Trie Reduce::optimize(const ::org::egothor::stemmer::Trie & a0) const
      {
        return ::org::egothor::stemmer::Trie(env->callObjectMethod(this$, mids$[mid_optimize_c26c0475], a0.this$));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Reduce_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Reduce_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Reduce_init_(t_Reduce *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Reduce_optimize(t_Reduce *self, PyObject *arg);

      static PyMethodDef t_Reduce__methods_[] = {
        DECLARE_METHOD(t_Reduce, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Reduce, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Reduce, optimize, METH_O),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Reduce, t_Reduce, ::java::lang::Object, Reduce, t_Reduce_init_, 0, 0, 0, 0, 0);

      void t_Reduce::install(PyObject *module)
      {
        installType(&PY_TYPE(Reduce), module, "Reduce", 0);
      }

      void t_Reduce::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Reduce).tp_dict, "class_", make_descriptor(Reduce::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Reduce).tp_dict, "wrapfn_", make_descriptor(t_Reduce::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Reduce).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Reduce_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Reduce::initializeClass, 1)))
          return NULL;
        return t_Reduce::wrap_Object(Reduce(((t_Reduce *) arg)->object.this$));
      }
      static PyObject *t_Reduce_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Reduce::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Reduce_init_(t_Reduce *self, PyObject *args, PyObject *kwds)
      {
        Reduce object((jobject) NULL);

        INT_CALL(object = Reduce());
        self->object = object;

        return 0;
      }

      static PyObject *t_Reduce_optimize(t_Reduce *self, PyObject *arg)
      {
        ::org::egothor::stemmer::Trie a0((jobject) NULL);
        ::org::egothor::stemmer::Trie result((jobject) NULL);

        if (!parseArg(arg, "k", ::org::egothor::stemmer::Trie::initializeClass, &a0))
        {
          OBJ_CALL(result = self->object.optimize(a0));
          return ::org::egothor::stemmer::t_Trie::wrap_Object(result);
        }

        PyErr_SetArgsError((PyObject *) self, "optimize", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *ByteRunAutomaton::class$ = NULL;
          jmethodID *ByteRunAutomaton::mids$ = NULL;
          bool ByteRunAutomaton::live$ = false;

          jclass ByteRunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/ByteRunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fc7cf394] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_465e1031] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;Z)V");
              mids$[mid_run_86f44353] = env->getMethodID(cls, "run", "([BII)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ByteRunAutomaton::ByteRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_fc7cf394, a0.this$)) {}

          ByteRunAutomaton::ByteRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, jboolean a1) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_465e1031, a0.this$, a1)) {}

          jboolean ByteRunAutomaton::run(const JArray< jbyte > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_86f44353], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_ByteRunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ByteRunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ByteRunAutomaton_init_(t_ByteRunAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ByteRunAutomaton_run(t_ByteRunAutomaton *self, PyObject *args);

          static PyMethodDef t_ByteRunAutomaton__methods_[] = {
            DECLARE_METHOD(t_ByteRunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteRunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ByteRunAutomaton, run, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ByteRunAutomaton, t_ByteRunAutomaton, ::org::apache::lucene::util::automaton::RunAutomaton, ByteRunAutomaton, t_ByteRunAutomaton_init_, 0, 0, 0, 0, 0);

          void t_ByteRunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(ByteRunAutomaton), module, "ByteRunAutomaton", 0);
          }

          void t_ByteRunAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ByteRunAutomaton).tp_dict, "class_", make_descriptor(ByteRunAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ByteRunAutomaton).tp_dict, "wrapfn_", make_descriptor(t_ByteRunAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ByteRunAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ByteRunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ByteRunAutomaton::initializeClass, 1)))
              return NULL;
            return t_ByteRunAutomaton::wrap_Object(ByteRunAutomaton(((t_ByteRunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_ByteRunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ByteRunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ByteRunAutomaton_init_(t_ByteRunAutomaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ByteRunAutomaton object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  INT_CALL(object = ByteRunAutomaton(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                jboolean a1;
                ByteRunAutomaton object((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ByteRunAutomaton(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ByteRunAutomaton_run(t_ByteRunAutomaton *self, PyObject *args)
          {
            JArray< jbyte > a0((jobject) NULL);
            jint a1;
            jint a2;
            jboolean result;

            if (!parseArgs(args, "[BII", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.run(a0, a1, a2));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "run", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/TrackingDirectoryWrapper.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *TrackingDirectoryWrapper::class$ = NULL;
        jmethodID *TrackingDirectoryWrapper::mids$ = NULL;
        bool TrackingDirectoryWrapper::live$ = false;

        jclass TrackingDirectoryWrapper::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/TrackingDirectoryWrapper");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_copy_146bec62] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_getCreatedFiles_03e99967] = env->getMethodID(cls, "getCreatedFiles", "()Ljava/util/Set;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TrackingDirectoryWrapper::TrackingDirectoryWrapper(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::store::FilterDirectory(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        void TrackingDirectoryWrapper::copy(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_146bec62], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        ::org::apache::lucene::store::IndexOutput TrackingDirectoryWrapper::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void TrackingDirectoryWrapper::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        ::java::util::Set TrackingDirectoryWrapper::getCreatedFiles() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getCreatedFiles_03e99967]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_TrackingDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TrackingDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TrackingDirectoryWrapper_init_(t_TrackingDirectoryWrapper *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TrackingDirectoryWrapper_copy(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_createOutput(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_deleteFile(t_TrackingDirectoryWrapper *self, PyObject *args);
        static PyObject *t_TrackingDirectoryWrapper_getCreatedFiles(t_TrackingDirectoryWrapper *self);
        static PyObject *t_TrackingDirectoryWrapper_get__createdFiles(t_TrackingDirectoryWrapper *self, void *data);
        static PyGetSetDef t_TrackingDirectoryWrapper__fields_[] = {
          DECLARE_GET_FIELD(t_TrackingDirectoryWrapper, createdFiles),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TrackingDirectoryWrapper__methods_[] = {
          DECLARE_METHOD(t_TrackingDirectoryWrapper, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, copy, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_TrackingDirectoryWrapper, getCreatedFiles, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TrackingDirectoryWrapper, t_TrackingDirectoryWrapper, ::org::apache::lucene::store::FilterDirectory, TrackingDirectoryWrapper, t_TrackingDirectoryWrapper_init_, 0, 0, t_TrackingDirectoryWrapper__fields_, 0, 0);

        void t_TrackingDirectoryWrapper::install(PyObject *module)
        {
          installType(&PY_TYPE(TrackingDirectoryWrapper), module, "TrackingDirectoryWrapper", 0);
        }

        void t_TrackingDirectoryWrapper::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TrackingDirectoryWrapper).tp_dict, "class_", make_descriptor(TrackingDirectoryWrapper::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TrackingDirectoryWrapper).tp_dict, "wrapfn_", make_descriptor(t_TrackingDirectoryWrapper::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TrackingDirectoryWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TrackingDirectoryWrapper_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TrackingDirectoryWrapper::initializeClass, 1)))
            return NULL;
          return t_TrackingDirectoryWrapper::wrap_Object(TrackingDirectoryWrapper(((t_TrackingDirectoryWrapper *) arg)->object.this$));
        }
        static PyObject *t_TrackingDirectoryWrapper_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TrackingDirectoryWrapper::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TrackingDirectoryWrapper_init_(t_TrackingDirectoryWrapper *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          TrackingDirectoryWrapper object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = TrackingDirectoryWrapper(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TrackingDirectoryWrapper_copy(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kssk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.copy(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_createOutput(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_deleteFile(t_TrackingDirectoryWrapper *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TrackingDirectoryWrapper), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_TrackingDirectoryWrapper_getCreatedFiles(t_TrackingDirectoryWrapper *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.getCreatedFiles());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_TrackingDirectoryWrapper_get__createdFiles(t_TrackingDirectoryWrapper *self, void *data)
        {
          ::java::util::Set value((jobject) NULL);
          OBJ_CALL(value = self->object.getCreatedFiles());
          return ::java::util::t_Set::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMFile::class$ = NULL;
        jmethodID *RAMFile::mids$ = NULL;
        bool RAMFile::live$ = false;

        jclass RAMFile::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMFile");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getLength_54c6a17a] = env->getMethodID(cls, "getLength", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_setLength_0ee6df2f] = env->getMethodID(cls, "setLength", "(J)V");
            mids$[mid_getBuffer_b4292e98] = env->getMethodID(cls, "getBuffer", "(I)[B");
            mids$[mid_newBuffer_b4292e98] = env->getMethodID(cls, "newBuffer", "(I)[B");
            mids$[mid_numBuffers_54c6a179] = env->getMethodID(cls, "numBuffers", "()I");
            mids$[mid_addBuffer_b4292e98] = env->getMethodID(cls, "addBuffer", "(I)[B");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMFile::RAMFile() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jlong RAMFile::getLength() const
        {
          return env->callLongMethod(this$, mids$[mid_getLength_54c6a17a]);
        }

        jlong RAMFile::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMFile_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMFile_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMFile_init_(t_RAMFile *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMFile_getLength(t_RAMFile *self);
        static PyObject *t_RAMFile_ramBytesUsed(t_RAMFile *self);
        static PyObject *t_RAMFile_get__length(t_RAMFile *self, void *data);
        static PyGetSetDef t_RAMFile__fields_[] = {
          DECLARE_GET_FIELD(t_RAMFile, length),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMFile__methods_[] = {
          DECLARE_METHOD(t_RAMFile, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMFile, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMFile, getLength, METH_NOARGS),
          DECLARE_METHOD(t_RAMFile, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMFile, t_RAMFile, ::java::lang::Object, RAMFile, t_RAMFile_init_, 0, 0, t_RAMFile__fields_, 0, 0);

        void t_RAMFile::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMFile), module, "RAMFile", 0);
        }

        void t_RAMFile::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMFile).tp_dict, "class_", make_descriptor(RAMFile::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMFile).tp_dict, "wrapfn_", make_descriptor(t_RAMFile::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMFile).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMFile_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMFile::initializeClass, 1)))
            return NULL;
          return t_RAMFile::wrap_Object(RAMFile(((t_RAMFile *) arg)->object.this$));
        }
        static PyObject *t_RAMFile_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMFile::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMFile_init_(t_RAMFile *self, PyObject *args, PyObject *kwds)
        {
          RAMFile object((jobject) NULL);

          INT_CALL(object = RAMFile());
          self->object = object;

          return 0;
        }

        static PyObject *t_RAMFile_getLength(t_RAMFile *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getLength());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMFile_ramBytesUsed(t_RAMFile *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RAMFile_get__length(t_RAMFile *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getLength());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder.h"
#include "org/apache/lucene/search/RegexpQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *RegexpQueryNodeBuilder::class$ = NULL;
              jmethodID *RegexpQueryNodeBuilder::mids$ = NULL;
              bool RegexpQueryNodeBuilder::live$ = false;

              jclass RegexpQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_261cecb0] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/RegexpQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RegexpQueryNodeBuilder::RegexpQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::RegexpQuery RegexpQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::RegexpQuery(env->callObjectMethod(this$, mids$[mid_build_261cecb0], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_RegexpQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RegexpQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RegexpQueryNodeBuilder_init_(t_RegexpQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RegexpQueryNodeBuilder_build(t_RegexpQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_RegexpQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RegexpQueryNodeBuilder, t_RegexpQueryNodeBuilder, ::java::lang::Object, RegexpQueryNodeBuilder, t_RegexpQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_RegexpQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(RegexpQueryNodeBuilder), module, "RegexpQueryNodeBuilder", 0);
              }

              void t_RegexpQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RegexpQueryNodeBuilder).tp_dict, "class_", make_descriptor(RegexpQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_RegexpQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RegexpQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RegexpQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_RegexpQueryNodeBuilder::wrap_Object(RegexpQueryNodeBuilder(((t_RegexpQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_RegexpQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RegexpQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RegexpQueryNodeBuilder_init_(t_RegexpQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                RegexpQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = RegexpQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_RegexpQueryNodeBuilder_build(t_RegexpQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::RegexpQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_RegexpQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Throwable.h"
#include "java/io/PrintStream.h"
#include "java/lang/StackTraceElement.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Class.h"
#include "java/io/Serializable.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Throwable::class$ = NULL;
    jmethodID *Throwable::mids$ = NULL;
    bool Throwable::live$ = false;

    jclass Throwable::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Throwable");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");
        mids$[mid_addSuppressed_c5ec8ca4] = env->getMethodID(cls, "addSuppressed", "(Ljava/lang/Throwable;)V");
        mids$[mid_fillInStackTrace_9a29189d] = env->getMethodID(cls, "fillInStackTrace", "()Ljava/lang/Throwable;");
        mids$[mid_getCause_9a29189d] = env->getMethodID(cls, "getCause", "()Ljava/lang/Throwable;");
        mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
        mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
        mids$[mid_getStackTrace_25f1f6aa] = env->getMethodID(cls, "getStackTrace", "()[Ljava/lang/StackTraceElement;");
        mids$[mid_getSuppressed_f4efa455] = env->getMethodID(cls, "getSuppressed", "()[Ljava/lang/Throwable;");
        mids$[mid_initCause_dabad90f] = env->getMethodID(cls, "initCause", "(Ljava/lang/Throwable;)Ljava/lang/Throwable;");
        mids$[mid_printStackTrace_54c6a166] = env->getMethodID(cls, "printStackTrace", "()V");
        mids$[mid_printStackTrace_1b7c898b] = env->getMethodID(cls, "printStackTrace", "(Ljava/io/PrintStream;)V");
        mids$[mid_printStackTrace_82fffd94] = env->getMethodID(cls, "printStackTrace", "(Ljava/io/PrintWriter;)V");
        mids$[mid_setStackTrace_3d8798bf] = env->getMethodID(cls, "setStackTrace", "([Ljava/lang/StackTraceElement;)V");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Throwable::Throwable() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    Throwable::Throwable(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    Throwable::Throwable(const ::java::lang::String & a0, const Throwable & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}

    void Throwable::addSuppressed(const Throwable & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_addSuppressed_c5ec8ca4], a0.this$);
    }

    Throwable Throwable::fillInStackTrace() const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_fillInStackTrace_9a29189d]));
    }

    Throwable Throwable::getCause() const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_getCause_9a29189d]));
    }

    ::java::lang::String Throwable::getLocalizedMessage() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
    }

    ::java::lang::String Throwable::getMessage() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
    }

    JArray< ::java::lang::StackTraceElement > Throwable::getStackTrace() const
    {
      return JArray< ::java::lang::StackTraceElement >(env->callObjectMethod(this$, mids$[mid_getStackTrace_25f1f6aa]));
    }

    JArray< Throwable > Throwable::getSuppressed() const
    {
      return JArray< Throwable >(env->callObjectMethod(this$, mids$[mid_getSuppressed_f4efa455]));
    }

    Throwable Throwable::initCause(const Throwable & a0) const
    {
      return Throwable(env->callObjectMethod(this$, mids$[mid_initCause_dabad90f], a0.this$));
    }

    void Throwable::printStackTrace() const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_54c6a166]);
    }

    void Throwable::printStackTrace(const ::java::io::PrintStream & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_1b7c898b], a0.this$);
    }

    void Throwable::printStackTrace(const ::java::io::PrintWriter & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_printStackTrace_82fffd94], a0.this$);
    }

    void Throwable::setStackTrace(const JArray< ::java::lang::StackTraceElement > & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setStackTrace_3d8798bf], a0.this$);
    }

    ::java::lang::String Throwable::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Throwable_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Throwable_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Throwable_init_(t_Throwable *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Throwable_addSuppressed(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_fillInStackTrace(t_Throwable *self);
    static PyObject *t_Throwable_getCause(t_Throwable *self);
    static PyObject *t_Throwable_getLocalizedMessage(t_Throwable *self);
    static PyObject *t_Throwable_getMessage(t_Throwable *self);
    static PyObject *t_Throwable_getStackTrace(t_Throwable *self);
    static PyObject *t_Throwable_getSuppressed(t_Throwable *self);
    static PyObject *t_Throwable_initCause(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_printStackTrace(t_Throwable *self, PyObject *args);
    static PyObject *t_Throwable_setStackTrace(t_Throwable *self, PyObject *arg);
    static PyObject *t_Throwable_toString(t_Throwable *self, PyObject *args);
    static PyObject *t_Throwable_get__cause(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__localizedMessage(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__message(t_Throwable *self, void *data);
    static PyObject *t_Throwable_get__stackTrace(t_Throwable *self, void *data);
    static int t_Throwable_set__stackTrace(t_Throwable *self, PyObject *arg, void *data);
    static PyObject *t_Throwable_get__suppressed(t_Throwable *self, void *data);
    static PyGetSetDef t_Throwable__fields_[] = {
      DECLARE_GET_FIELD(t_Throwable, cause),
      DECLARE_GET_FIELD(t_Throwable, localizedMessage),
      DECLARE_GET_FIELD(t_Throwable, message),
      DECLARE_GETSET_FIELD(t_Throwable, stackTrace),
      DECLARE_GET_FIELD(t_Throwable, suppressed),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Throwable__methods_[] = {
      DECLARE_METHOD(t_Throwable, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Throwable, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Throwable, addSuppressed, METH_O),
      DECLARE_METHOD(t_Throwable, fillInStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getCause, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getLocalizedMessage, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getMessage, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getStackTrace, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, getSuppressed, METH_NOARGS),
      DECLARE_METHOD(t_Throwable, initCause, METH_O),
      DECLARE_METHOD(t_Throwable, printStackTrace, METH_VARARGS),
      DECLARE_METHOD(t_Throwable, setStackTrace, METH_O),
      DECLARE_METHOD(t_Throwable, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Throwable, t_Throwable, ::java::lang::Object, Throwable, t_Throwable_init_, 0, 0, t_Throwable__fields_, 0, 0);

    void t_Throwable::install(PyObject *module)
    {
      installType(&PY_TYPE(Throwable), module, "Throwable", 0);
    }

    void t_Throwable::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "class_", make_descriptor(Throwable::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "wrapfn_", make_descriptor(t_Throwable::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Throwable_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Throwable::initializeClass, 1)))
        return NULL;
      return t_Throwable::wrap_Object(Throwable(((t_Throwable *) arg)->object.this$));
    }
    static PyObject *t_Throwable_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Throwable::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Throwable_init_(t_Throwable *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          Throwable object((jobject) NULL);

          INT_CALL(object = Throwable());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Throwable object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Throwable(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          Throwable a1((jobject) NULL);
          Throwable object((jobject) NULL);

          if (!parseArgs(args, "sk", Throwable::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Throwable(a0, a1));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Throwable_addSuppressed(t_Throwable *self, PyObject *arg)
    {
      Throwable a0((jobject) NULL);

      if (!parseArg(arg, "k", Throwable::initializeClass, &a0))
      {
        OBJ_CALL(self->object.addSuppressed(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "addSuppressed", arg);
      return NULL;
    }

    static PyObject *t_Throwable_fillInStackTrace(t_Throwable *self)
    {
      Throwable result((jobject) NULL);
      OBJ_CALL(result = self->object.fillInStackTrace());
      return t_Throwable::wrap_Object(result);
    }

    static PyObject *t_Throwable_getCause(t_Throwable *self)
    {
      Throwable result((jobject) NULL);
      OBJ_CALL(result = self->object.getCause());
      return t_Throwable::wrap_Object(result);
    }

    static PyObject *t_Throwable_getLocalizedMessage(t_Throwable *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getLocalizedMessage());
      return j2p(result);
    }

    static PyObject *t_Throwable_getMessage(t_Throwable *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getMessage());
      return j2p(result);
    }

    static PyObject *t_Throwable_getStackTrace(t_Throwable *self)
    {
      JArray< ::java::lang::StackTraceElement > result((jobject) NULL);
      OBJ_CALL(result = self->object.getStackTrace());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }

    static PyObject *t_Throwable_getSuppressed(t_Throwable *self)
    {
      JArray< Throwable > result((jobject) NULL);
      OBJ_CALL(result = self->object.getSuppressed());
      return JArray<jobject>(result.this$).wrap(t_Throwable::wrap_jobject);
    }

    static PyObject *t_Throwable_initCause(t_Throwable *self, PyObject *arg)
    {
      Throwable a0((jobject) NULL);
      Throwable result((jobject) NULL);

      if (!parseArg(arg, "k", Throwable::initializeClass, &a0))
      {
        OBJ_CALL(result = self->object.initCause(a0));
        return t_Throwable::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "initCause", arg);
      return NULL;
    }

    static PyObject *t_Throwable_printStackTrace(t_Throwable *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          OBJ_CALL(self->object.printStackTrace());
          Py_RETURN_NONE;
        }
        break;
       case 1:
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.printStackTrace(a0));
            Py_RETURN_NONE;
          }
        }
        {
          ::java::io::PrintWriter a0((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::PrintWriter::initializeClass, &a0))
          {
            OBJ_CALL(self->object.printStackTrace(a0));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "printStackTrace", args);
      return NULL;
    }

    static PyObject *t_Throwable_setStackTrace(t_Throwable *self, PyObject *arg)
    {
      JArray< ::java::lang::StackTraceElement > a0((jobject) NULL);

      if (!parseArg(arg, "[k", ::java::lang::StackTraceElement::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setStackTrace(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setStackTrace", arg);
      return NULL;
    }

    static PyObject *t_Throwable_toString(t_Throwable *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Throwable), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Throwable_get__cause(t_Throwable *self, void *data)
    {
      Throwable value((jobject) NULL);
      OBJ_CALL(value = self->object.getCause());
      return t_Throwable::wrap_Object(value);
    }

    static PyObject *t_Throwable_get__localizedMessage(t_Throwable *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getLocalizedMessage());
      return j2p(value);
    }

    static PyObject *t_Throwable_get__message(t_Throwable *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getMessage());
      return j2p(value);
    }

    static PyObject *t_Throwable_get__stackTrace(t_Throwable *self, void *data)
    {
      JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
      OBJ_CALL(value = self->object.getStackTrace());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
    }
    static int t_Throwable_set__stackTrace(t_Throwable *self, PyObject *arg, void *data)
    {
      {
        JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
        if (!parseArg(arg, "[k", ::java::lang::StackTraceElement::initializeClass, &value))
        {
          INT_CALL(self->object.setStackTrace(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "stackTrace", arg);
      return -1;
    }

    static PyObject *t_Throwable_get__suppressed(t_Throwable *self, void *data)
    {
      JArray< Throwable > value((jobject) NULL);
      OBJ_CALL(value = self->object.getSuppressed());
      return JArray<jobject>(value.this$).wrap(t_Throwable::wrap_jobject);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *TopGroups$ScoreMergeMode::class$ = NULL;
          jmethodID *TopGroups$ScoreMergeMode::mids$ = NULL;
          bool TopGroups$ScoreMergeMode::live$ = false;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::Avg = NULL;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::None = NULL;
          TopGroups$ScoreMergeMode *TopGroups$ScoreMergeMode::Total = NULL;

          jclass TopGroups$ScoreMergeMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/TopGroups$ScoreMergeMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_10e490e6] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;");
              mids$[mid_values_88270724] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              Avg = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "Avg", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              None = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "None", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              Total = new TopGroups$ScoreMergeMode(env->getStaticObjectField(cls, "Total", "Lorg/apache/lucene/search/grouping/TopGroups$ScoreMergeMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TopGroups$ScoreMergeMode TopGroups$ScoreMergeMode::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return TopGroups$ScoreMergeMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_10e490e6], a0.this$));
          }

          JArray< TopGroups$ScoreMergeMode > TopGroups$ScoreMergeMode::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< TopGroups$ScoreMergeMode >(env->callStaticObjectMethod(cls, mids$[mid_values_88270724]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_TopGroups$ScoreMergeMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups$ScoreMergeMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TopGroups$ScoreMergeMode_of_(t_TopGroups$ScoreMergeMode *self, PyObject *args);
          static PyObject *t_TopGroups$ScoreMergeMode_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_TopGroups$ScoreMergeMode_values(PyTypeObject *type);
          static PyObject *t_TopGroups$ScoreMergeMode_get__parameters_(t_TopGroups$ScoreMergeMode *self, void *data);
          static PyGetSetDef t_TopGroups$ScoreMergeMode__fields_[] = {
            DECLARE_GET_FIELD(t_TopGroups$ScoreMergeMode, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TopGroups$ScoreMergeMode__methods_[] = {
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, of_, METH_VARARGS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TopGroups$ScoreMergeMode, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TopGroups$ScoreMergeMode, t_TopGroups$ScoreMergeMode, ::java::lang::Enum, TopGroups$ScoreMergeMode, abstract_init, 0, 0, t_TopGroups$ScoreMergeMode__fields_, 0, 0);
          PyObject *t_TopGroups$ScoreMergeMode::wrap_Object(const TopGroups$ScoreMergeMode& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups$ScoreMergeMode::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups$ScoreMergeMode *self = (t_TopGroups$ScoreMergeMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_TopGroups$ScoreMergeMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_TopGroups$ScoreMergeMode::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_TopGroups$ScoreMergeMode *self = (t_TopGroups$ScoreMergeMode *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_TopGroups$ScoreMergeMode::install(PyObject *module)
          {
            installType(&PY_TYPE(TopGroups$ScoreMergeMode), module, "TopGroups$ScoreMergeMode", 0);
          }

          void t_TopGroups$ScoreMergeMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "class_", make_descriptor(TopGroups$ScoreMergeMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "wrapfn_", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TopGroups$ScoreMergeMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "Avg", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::Avg)));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "None", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::None)));
            PyDict_SetItemString(PY_TYPE(TopGroups$ScoreMergeMode).tp_dict, "Total", make_descriptor(t_TopGroups$ScoreMergeMode::wrap_Object(*TopGroups$ScoreMergeMode::Total)));
          }

          static PyObject *t_TopGroups$ScoreMergeMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TopGroups$ScoreMergeMode::initializeClass, 1)))
              return NULL;
            return t_TopGroups$ScoreMergeMode::wrap_Object(TopGroups$ScoreMergeMode(((t_TopGroups$ScoreMergeMode *) arg)->object.this$));
          }
          static PyObject *t_TopGroups$ScoreMergeMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TopGroups$ScoreMergeMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TopGroups$ScoreMergeMode_of_(t_TopGroups$ScoreMergeMode *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_TopGroups$ScoreMergeMode_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            TopGroups$ScoreMergeMode result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::valueOf(a0));
              return t_TopGroups$ScoreMergeMode::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_TopGroups$ScoreMergeMode_values(PyTypeObject *type)
          {
            JArray< TopGroups$ScoreMergeMode > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::grouping::TopGroups$ScoreMergeMode::values());
            return JArray<jobject>(result.this$).wrap(t_TopGroups$ScoreMergeMode::wrap_jobject);
          }
          static PyObject *t_TopGroups$ScoreMergeMode_get__parameters_(t_TopGroups$ScoreMergeMode *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *MultiFieldQueryNodeProcessor::class$ = NULL;
              jmethodID *MultiFieldQueryNodeProcessor::mids$ = NULL;
              bool MultiFieldQueryNodeProcessor::live$ = false;

              jclass MultiFieldQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/MultiFieldQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiFieldQueryNodeProcessor::MultiFieldQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_MultiFieldQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiFieldQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiFieldQueryNodeProcessor_init_(t_MultiFieldQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_MultiFieldQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_MultiFieldQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiFieldQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiFieldQueryNodeProcessor, t_MultiFieldQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, MultiFieldQueryNodeProcessor, t_MultiFieldQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_MultiFieldQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiFieldQueryNodeProcessor), module, "MultiFieldQueryNodeProcessor", 0);
              }

              void t_MultiFieldQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiFieldQueryNodeProcessor).tp_dict, "class_", make_descriptor(MultiFieldQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiFieldQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_MultiFieldQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiFieldQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiFieldQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiFieldQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_MultiFieldQueryNodeProcessor::wrap_Object(MultiFieldQueryNodeProcessor(((t_MultiFieldQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_MultiFieldQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiFieldQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiFieldQueryNodeProcessor_init_(t_MultiFieldQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                MultiFieldQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = MultiFieldQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *Spans::class$ = NULL;
          jmethodID *Spans::mids$ = NULL;
          bool Spans::live$ = false;

          jclass Spans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/Spans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Spans::Spans() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong Spans::cost() const
          {
            return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
          }

          jint Spans::doc() const
          {
            return env->callIntMethod(this$, mids$[mid_doc_54c6a179]);
          }

          jint Spans::end() const
          {
            return env->callIntMethod(this$, mids$[mid_end_54c6a179]);
          }

          ::java::util::Collection Spans::getPayload() const
          {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getPayload_2d2d7de4]));
          }

          jboolean Spans::isPayloadAvailable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isPayloadAvailable_54c6a16a]);
          }

          jboolean Spans::next() const
          {
            return env->callBooleanMethod(this$, mids$[mid_next_54c6a16a]);
          }

          jboolean Spans::skipTo(jint a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_skipTo_39c7bd30], a0);
          }

          jint Spans::start() const
          {
            return env->callIntMethod(this$, mids$[mid_start_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_Spans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Spans_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Spans_init_(t_Spans *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Spans_cost(t_Spans *self);
          static PyObject *t_Spans_doc(t_Spans *self);
          static PyObject *t_Spans_end(t_Spans *self);
          static PyObject *t_Spans_getPayload(t_Spans *self);
          static PyObject *t_Spans_isPayloadAvailable(t_Spans *self);
          static PyObject *t_Spans_next(t_Spans *self);
          static PyObject *t_Spans_skipTo(t_Spans *self, PyObject *arg);
          static PyObject *t_Spans_start(t_Spans *self);
          static PyObject *t_Spans_get__payload(t_Spans *self, void *data);
          static PyObject *t_Spans_get__payloadAvailable(t_Spans *self, void *data);
          static PyGetSetDef t_Spans__fields_[] = {
            DECLARE_GET_FIELD(t_Spans, payload),
            DECLARE_GET_FIELD(t_Spans, payloadAvailable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Spans__methods_[] = {
            DECLARE_METHOD(t_Spans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Spans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Spans, cost, METH_NOARGS),
            DECLARE_METHOD(t_Spans, doc, METH_NOARGS),
            DECLARE_METHOD(t_Spans, end, METH_NOARGS),
            DECLARE_METHOD(t_Spans, getPayload, METH_NOARGS),
            DECLARE_METHOD(t_Spans, isPayloadAvailable, METH_NOARGS),
            DECLARE_METHOD(t_Spans, next, METH_NOARGS),
            DECLARE_METHOD(t_Spans, skipTo, METH_O),
            DECLARE_METHOD(t_Spans, start, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Spans, t_Spans, ::java::lang::Object, Spans, t_Spans_init_, 0, 0, t_Spans__fields_, 0, 0);

          void t_Spans::install(PyObject *module)
          {
            installType(&PY_TYPE(Spans), module, "Spans", 0);
          }

          void t_Spans::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Spans).tp_dict, "class_", make_descriptor(Spans::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Spans).tp_dict, "wrapfn_", make_descriptor(t_Spans::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Spans).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Spans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Spans::initializeClass, 1)))
              return NULL;
            return t_Spans::wrap_Object(Spans(((t_Spans *) arg)->object.this$));
          }
          static PyObject *t_Spans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Spans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Spans_init_(t_Spans *self, PyObject *args, PyObject *kwds)
          {
            Spans object((jobject) NULL);

            INT_CALL(object = Spans());
            self->object = object;

            return 0;
          }

          static PyObject *t_Spans_cost(t_Spans *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_Spans_doc(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.doc());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Spans_end(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.end());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Spans_getPayload(t_Spans *self)
          {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(Object));
          }

          static PyObject *t_Spans_isPayloadAvailable(t_Spans *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Spans_next(t_Spans *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.next());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_Spans_skipTo(t_Spans *self, PyObject *arg)
          {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.skipTo(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "skipTo", arg);
            return NULL;
          }

          static PyObject *t_Spans_start(t_Spans *self)
          {
            jint result;
            OBJ_CALL(result = self->object.start());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Spans_get__payload(t_Spans *self, void *data)
          {
            ::java::util::Collection value((jobject) NULL);
            OBJ_CALL(value = self->object.getPayload());
            return ::java::util::t_Collection::wrap_Object(value);
          }

          static PyObject *t_Spans_get__payloadAvailable(t_Spans *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isPayloadAvailable());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/Among.h"
#include "org/tartarus/snowball/SnowballProgram.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {

      ::java::lang::Class *Among::class$ = NULL;
      jmethodID *Among::mids$ = NULL;
      jfieldID *Among::fids$ = NULL;
      bool Among::live$ = false;

      jclass Among::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/tartarus/snowball/Among");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_c253f9f9] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IILjava/lang/String;Lorg/tartarus/snowball/SnowballProgram;)V");

          fids$ = new jfieldID[max_fid];
          fids$[fid_methodobject] = env->getFieldID(cls, "methodobject", "Lorg/tartarus/snowball/SnowballProgram;");
          fids$[fid_result] = env->getFieldID(cls, "result", "I");
          fids$[fid_s] = env->getFieldID(cls, "s", "[C");
          fids$[fid_s_size] = env->getFieldID(cls, "s_size", "I");
          fids$[fid_substring_i] = env->getFieldID(cls, "substring_i", "I");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Among::Among(const ::java::lang::String & a0, jint a1, jint a2, const ::java::lang::String & a3, const ::org::tartarus::snowball::SnowballProgram & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c253f9f9, a0.this$, a1, a2, a3.this$, a4.this$)) {}

      ::org::tartarus::snowball::SnowballProgram Among::_get_methodobject() const
      {
        return ::org::tartarus::snowball::SnowballProgram(env->getObjectField(this$, fids$[fid_methodobject]));
      }

      jint Among::_get_result() const
      {
        return env->getIntField(this$, fids$[fid_result]);
      }

      JArray< jchar > Among::_get_s() const
      {
        return JArray< jchar >(env->getObjectField(this$, fids$[fid_s]));
      }

      jint Among::_get_s_size() const
      {
        return env->getIntField(this$, fids$[fid_s_size]);
      }

      jint Among::_get_substring_i() const
      {
        return env->getIntField(this$, fids$[fid_substring_i]);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      static PyObject *t_Among_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Among_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Among_init_(t_Among *self, PyObject *args, PyObject *kwds);
      static PyObject *t_Among_get__methodobject(t_Among *self, void *data);
      static PyObject *t_Among_get__result(t_Among *self, void *data);
      static PyObject *t_Among_get__s(t_Among *self, void *data);
      static PyObject *t_Among_get__s_size(t_Among *self, void *data);
      static PyObject *t_Among_get__substring_i(t_Among *self, void *data);

      static PyGetSetDef t_Among__fields_[] = {
        DECLARE_GET_FIELD(t_Among, methodobject),
        DECLARE_GET_FIELD(t_Among, result),
        DECLARE_GET_FIELD(t_Among, s),
        DECLARE_GET_FIELD(t_Among, s_size),
        DECLARE_GET_FIELD(t_Among, substring_i),
        { NULL, NULL, NULL, NULL, NULL }
      };

      static PyMethodDef t_Among__methods_[] = {
        DECLARE_METHOD(t_Among, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Among, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Among, t_Among, ::java::lang::Object, Among, t_Among_init_, 0, 0, t_Among__fields_, 0, 0);

      void t_Among::install(PyObject *module)
      {
        installType(&PY_TYPE(Among), module, "Among", 0);
      }

      void t_Among::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Among).tp_dict, "class_", make_descriptor(Among::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Among).tp_dict, "wrapfn_", make_descriptor(t_Among::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Among).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Among_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Among::initializeClass, 1)))
          return NULL;
        return t_Among::wrap_Object(Among(((t_Among *) arg)->object.this$));
      }
      static PyObject *t_Among_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Among::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Among_init_(t_Among *self, PyObject *args, PyObject *kwds)
      {
        ::java::lang::String a0((jobject) NULL);
        jint a1;
        jint a2;
        ::java::lang::String a3((jobject) NULL);
        ::org::tartarus::snowball::SnowballProgram a4((jobject) NULL);
        Among object((jobject) NULL);

        if (!parseArgs(args, "sIIsk", ::org::tartarus::snowball::SnowballProgram::initializeClass, &a0, &a1, &a2, &a3, &a4))
        {
          INT_CALL(object = Among(a0, a1, a2, a3, a4));
          self->object = object;
        }
        else
        {
          PyErr_SetArgsError((PyObject *) self, "__init__", args);
          return -1;
        }

        return 0;
      }

      static PyObject *t_Among_get__methodobject(t_Among *self, void *data)
      {
        ::org::tartarus::snowball::SnowballProgram value((jobject) NULL);
        OBJ_CALL(value = self->object._get_methodobject());
        return ::org::tartarus::snowball::t_SnowballProgram::wrap_Object(value);
      }

      static PyObject *t_Among_get__result(t_Among *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object._get_result());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Among_get__s(t_Among *self, void *data)
      {
        JArray< jchar > value((jobject) NULL);
        OBJ_CALL(value = self->object._get_s());
        return value.wrap();
      }

      static PyObject *t_Among_get__s_size(t_Among *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object._get_s_size());
        return PyInt_FromLong((long) value);
      }

      static PyObject *t_Among_get__substring_i(t_Among *self, void *data)
      {
        jint value;
        OBJ_CALL(value = self->object._get_substring_i());
        return PyInt_FromLong((long) value);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ToStringUtils.h"
#include "java/lang/String.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ToStringUtils::class$ = NULL;
        jmethodID *ToStringUtils::mids$ = NULL;
        bool ToStringUtils::live$ = false;

        jclass ToStringUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ToStringUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_boost_5ded254a] = env->getStaticMethodID(cls, "boost", "(F)Ljava/lang/String;");
            mids$[mid_byteArray_982a0ced] = env->getStaticMethodID(cls, "byteArray", "(Ljava/lang/StringBuilder;[B)V");
            mids$[mid_longHex_3e02f30e] = env->getStaticMethodID(cls, "longHex", "(J)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String ToStringUtils::boost(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_boost_5ded254a], a0));
        }

        void ToStringUtils::byteArray(const ::java::lang::StringBuilder & a0, const JArray< jbyte > & a1)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_byteArray_982a0ced], a0.this$, a1.this$);
        }

        ::java::lang::String ToStringUtils::longHex(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_longHex_3e02f30e], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ToStringUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ToStringUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ToStringUtils_boost(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ToStringUtils_byteArray(PyTypeObject *type, PyObject *args);
        static PyObject *t_ToStringUtils_longHex(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_ToStringUtils__methods_[] = {
          DECLARE_METHOD(t_ToStringUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, boost, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, byteArray, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_ToStringUtils, longHex, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ToStringUtils, t_ToStringUtils, ::java::lang::Object, ToStringUtils, abstract_init, 0, 0, 0, 0, 0);

        void t_ToStringUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(ToStringUtils), module, "ToStringUtils", 0);
        }

        void t_ToStringUtils::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ToStringUtils).tp_dict, "class_", make_descriptor(ToStringUtils::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ToStringUtils).tp_dict, "wrapfn_", make_descriptor(t_ToStringUtils::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ToStringUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ToStringUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ToStringUtils::initializeClass, 1)))
            return NULL;
          return t_ToStringUtils::wrap_Object(ToStringUtils(((t_ToStringUtils *) arg)->object.this$));
        }
        static PyObject *t_ToStringUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ToStringUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ToStringUtils_boost(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ToStringUtils::boost(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "boost", arg);
          return NULL;
        }

        static PyObject *t_ToStringUtils_byteArray(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::StringBuilder a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::java::lang::StringBuilder::initializeClass, &a0, &a1))
          {
            OBJ_CALL(::org::apache::lucene::util::ToStringUtils::byteArray(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "byteArray", args);
          return NULL;
        }

        static PyObject *t_ToStringUtils_longHex(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::ToStringUtils::longHex(a0));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "longHex", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std31/UAX29URLEmailTokenizerImpl31.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl31::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl31::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl31::live$ = false;
            jint UAX29URLEmailTokenizerImpl31::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl31::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl31::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std31/UAX29URLEmailTokenizerImpl31");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl31::UAX29URLEmailTokenizerImpl31(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl31::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl31::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl31::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl31::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl31::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl31::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl31::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl31::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl31::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl31::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl31::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {
            static PyObject *t_UAX29URLEmailTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl31_init_(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_getNextToken(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_getText(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yybegin(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yychar(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yycharat(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyclose(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yylength(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yypushback(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyreset(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yystate(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_yytext(t_UAX29URLEmailTokenizerImpl31 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl31_get__nextToken(t_UAX29URLEmailTokenizerImpl31 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl31__fields_[] = {
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl31, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl31__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl31, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl31, t_UAX29URLEmailTokenizerImpl31, ::java::lang::Object, UAX29URLEmailTokenizerImpl31, t_UAX29URLEmailTokenizerImpl31_init_, 0, 0, t_UAX29URLEmailTokenizerImpl31__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl31::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl31), module, "UAX29URLEmailTokenizerImpl31", 0);
            }

            void t_UAX29URLEmailTokenizerImpl31::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl31::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl31::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl31::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl31::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl31::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl31).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl31::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl31::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl31::wrap_Object(UAX29URLEmailTokenizerImpl31(((t_UAX29URLEmailTokenizerImpl31 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl31::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl31_init_(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl31 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl31(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_getNextToken(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_getText(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yybegin(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yychar(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yycharat(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyclose(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yylength(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yypushback(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yyreset(t_UAX29URLEmailTokenizerImpl31 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yystate(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_yytext(t_UAX29URLEmailTokenizerImpl31 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl31_get__nextToken(t_UAX29URLEmailTokenizerImpl31 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum.h"
#include "java/lang/String.h"
#include "java/text/Collator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowCollatedTermRangeTermsEnum::class$ = NULL;
          jmethodID *SlowCollatedTermRangeTermsEnum::mids$ = NULL;
          bool SlowCollatedTermRangeTermsEnum::live$ = false;

          jclass SlowCollatedTermRangeTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowCollatedTermRangeTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b77b0cda] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/TermsEnum;Ljava/lang/String;Ljava/lang/String;ZZLjava/text/Collator;)V");
              mids$[mid_accept_30bc08e1] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/FilteredTermsEnum$AcceptStatus;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowCollatedTermRangeTermsEnum::SlowCollatedTermRangeTermsEnum(const ::org::apache::lucene::index::TermsEnum & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4, const ::java::text::Collator & a5) : ::org::apache::lucene::index::FilteredTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_b77b0cda, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowCollatedTermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowCollatedTermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowCollatedTermRangeTermsEnum_init_(t_SlowCollatedTermRangeTermsEnum *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SlowCollatedTermRangeTermsEnum__methods_[] = {
            DECLARE_METHOD(t_SlowCollatedTermRangeTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowCollatedTermRangeTermsEnum, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowCollatedTermRangeTermsEnum, t_SlowCollatedTermRangeTermsEnum, ::org::apache::lucene::index::FilteredTermsEnum, SlowCollatedTermRangeTermsEnum, t_SlowCollatedTermRangeTermsEnum_init_, 0, 0, 0, 0, 0);

          void t_SlowCollatedTermRangeTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowCollatedTermRangeTermsEnum), module, "SlowCollatedTermRangeTermsEnum", 0);
          }

          void t_SlowCollatedTermRangeTermsEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeTermsEnum).tp_dict, "class_", make_descriptor(SlowCollatedTermRangeTermsEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_SlowCollatedTermRangeTermsEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowCollatedTermRangeTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowCollatedTermRangeTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowCollatedTermRangeTermsEnum::initializeClass, 1)))
              return NULL;
            return t_SlowCollatedTermRangeTermsEnum::wrap_Object(SlowCollatedTermRangeTermsEnum(((t_SlowCollatedTermRangeTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_SlowCollatedTermRangeTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowCollatedTermRangeTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowCollatedTermRangeTermsEnum_init_(t_SlowCollatedTermRangeTermsEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jboolean a3;
            jboolean a4;
            ::java::text::Collator a5((jobject) NULL);
            SlowCollatedTermRangeTermsEnum object((jobject) NULL);

            if (!parseArgs(args, "kssZZk", ::org::apache::lucene::index::TermsEnum::initializeClass, ::java::text::Collator::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
            {
              INT_CALL(object = SlowCollatedTermRangeTermsEnum(a0, a1, a2, a3, a4, a5));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CollectionStatistics::class$ = NULL;
        jmethodID *CollectionStatistics::mids$ = NULL;
        bool CollectionStatistics::live$ = false;

        jclass CollectionStatistics::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CollectionStatistics");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2d72e40c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JJJJ)V");
            mids$[mid_docCount_54c6a17a] = env->getMethodID(cls, "docCount", "()J");
            mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_maxDoc_54c6a17a] = env->getMethodID(cls, "maxDoc", "()J");
            mids$[mid_sumDocFreq_54c6a17a] = env->getMethodID(cls, "sumDocFreq", "()J");
            mids$[mid_sumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "sumTotalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollectionStatistics::CollectionStatistics(const ::java::lang::String & a0, jlong a1, jlong a2, jlong a3, jlong a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2d72e40c, a0.this$, a1, a2, a3, a4)) {}

        jlong CollectionStatistics::docCount() const
        {
          return env->callLongMethod(this$, mids$[mid_docCount_54c6a17a]);
        }

        ::java::lang::String CollectionStatistics::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
        }

        jlong CollectionStatistics::maxDoc() const
        {
          return env->callLongMethod(this$, mids$[mid_maxDoc_54c6a17a]);
        }

        jlong CollectionStatistics::sumDocFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_sumDocFreq_54c6a17a]);
        }

        jlong CollectionStatistics::sumTotalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_sumTotalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CollectionStatistics_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionStatistics_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollectionStatistics_init_(t_CollectionStatistics *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CollectionStatistics_docCount(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_field(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_maxDoc(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_sumDocFreq(t_CollectionStatistics *self);
        static PyObject *t_CollectionStatistics_sumTotalTermFreq(t_CollectionStatistics *self);

        static PyMethodDef t_CollectionStatistics__methods_[] = {
          DECLARE_METHOD(t_CollectionStatistics, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionStatistics, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionStatistics, docCount, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, field, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, sumDocFreq, METH_NOARGS),
          DECLARE_METHOD(t_CollectionStatistics, sumTotalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollectionStatistics, t_CollectionStatistics, ::java::lang::Object, CollectionStatistics, t_CollectionStatistics_init_, 0, 0, 0, 0, 0);

        void t_CollectionStatistics::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionStatistics), module, "CollectionStatistics", 0);
        }

        void t_CollectionStatistics::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollectionStatistics).tp_dict, "class_", make_descriptor(CollectionStatistics::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollectionStatistics).tp_dict, "wrapfn_", make_descriptor(t_CollectionStatistics::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollectionStatistics).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionStatistics_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionStatistics::initializeClass, 1)))
            return NULL;
          return t_CollectionStatistics::wrap_Object(CollectionStatistics(((t_CollectionStatistics *) arg)->object.this$));
        }
        static PyObject *t_CollectionStatistics_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionStatistics::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollectionStatistics_init_(t_CollectionStatistics *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          jlong a3;
          jlong a4;
          CollectionStatistics object((jobject) NULL);

          if (!parseArgs(args, "sJJJJ", &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = CollectionStatistics(a0, a1, a2, a3, a4));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CollectionStatistics_docCount(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.docCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_field(t_CollectionStatistics *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_CollectionStatistics_maxDoc(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_sumDocFreq(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sumDocFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_CollectionStatistics_sumTotalTermFreq(t_CollectionStatistics *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.sumTotalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/SetOnce$AlreadySetException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *SetOnce$AlreadySetException::class$ = NULL;
        jmethodID *SetOnce$AlreadySetException::mids$ = NULL;
        bool SetOnce$AlreadySetException::live$ = false;

        jclass SetOnce$AlreadySetException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/SetOnce$AlreadySetException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SetOnce$AlreadySetException::SetOnce$AlreadySetException() : ::java::lang::IllegalStateException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_SetOnce$AlreadySetException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce$AlreadySetException_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SetOnce$AlreadySetException_of_(t_SetOnce$AlreadySetException *self, PyObject *args);
        static int t_SetOnce$AlreadySetException_init_(t_SetOnce$AlreadySetException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SetOnce$AlreadySetException_get__parameters_(t_SetOnce$AlreadySetException *self, void *data);
        static PyGetSetDef t_SetOnce$AlreadySetException__fields_[] = {
          DECLARE_GET_FIELD(t_SetOnce$AlreadySetException, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SetOnce$AlreadySetException__methods_[] = {
          DECLARE_METHOD(t_SetOnce$AlreadySetException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce$AlreadySetException, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SetOnce$AlreadySetException, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SetOnce$AlreadySetException, t_SetOnce$AlreadySetException, ::java::lang::IllegalStateException, SetOnce$AlreadySetException, t_SetOnce$AlreadySetException_init_, 0, 0, t_SetOnce$AlreadySetException__fields_, 0, 0);
        PyObject *t_SetOnce$AlreadySetException::wrap_Object(const SetOnce$AlreadySetException& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce$AlreadySetException::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce$AlreadySetException *self = (t_SetOnce$AlreadySetException *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SetOnce$AlreadySetException::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SetOnce$AlreadySetException::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SetOnce$AlreadySetException *self = (t_SetOnce$AlreadySetException *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SetOnce$AlreadySetException::install(PyObject *module)
        {
          installType(&PY_TYPE(SetOnce$AlreadySetException), module, "SetOnce$AlreadySetException", 0);
        }

        void t_SetOnce$AlreadySetException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SetOnce$AlreadySetException).tp_dict, "class_", make_descriptor(SetOnce$AlreadySetException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SetOnce$AlreadySetException).tp_dict, "wrapfn_", make_descriptor(t_SetOnce$AlreadySetException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SetOnce$AlreadySetException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SetOnce$AlreadySetException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SetOnce$AlreadySetException::initializeClass, 1)))
            return NULL;
          return t_SetOnce$AlreadySetException::wrap_Object(SetOnce$AlreadySetException(((t_SetOnce$AlreadySetException *) arg)->object.this$));
        }
        static PyObject *t_SetOnce$AlreadySetException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SetOnce$AlreadySetException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SetOnce$AlreadySetException_of_(t_SetOnce$AlreadySetException *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SetOnce$AlreadySetException_init_(t_SetOnce$AlreadySetException *self, PyObject *args, PyObject *kwds)
        {
          SetOnce$AlreadySetException object((jobject) NULL);

          INT_CALL(object = SetOnce$AlreadySetException());
          self->object = object;

          return 0;
        }
        static PyObject *t_SetOnce$AlreadySetException_get__parameters_(t_SetOnce$AlreadySetException *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/StoredFieldVisitor$Status.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *StoredFieldVisitor::class$ = NULL;
        jmethodID *StoredFieldVisitor::mids$ = NULL;
        bool StoredFieldVisitor::live$ = false;

        jclass StoredFieldVisitor::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/StoredFieldVisitor");

            mids$ = new jmethodID[max_mid];
            mids$[mid_binaryField_f0c94359] = env->getMethodID(cls, "binaryField", "(Lorg/apache/lucene/index/FieldInfo;[B)V");
            mids$[mid_doubleField_59cb8283] = env->getMethodID(cls, "doubleField", "(Lorg/apache/lucene/index/FieldInfo;D)V");
            mids$[mid_floatField_04c0e245] = env->getMethodID(cls, "floatField", "(Lorg/apache/lucene/index/FieldInfo;F)V");
            mids$[mid_intField_d8ebe062] = env->getMethodID(cls, "intField", "(Lorg/apache/lucene/index/FieldInfo;I)V");
            mids$[mid_longField_54f2c7e9] = env->getMethodID(cls, "longField", "(Lorg/apache/lucene/index/FieldInfo;J)V");
            mids$[mid_needsField_be88ccfe] = env->getMethodID(cls, "needsField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/index/StoredFieldVisitor$Status;");
            mids$[mid_stringField_20e02bfa] = env->getMethodID(cls, "stringField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldVisitor::binaryField(const ::org::apache::lucene::index::FieldInfo & a0, const JArray< jbyte > & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_binaryField_f0c94359], a0.this$, a1.this$);
        }

        void StoredFieldVisitor::doubleField(const ::org::apache::lucene::index::FieldInfo & a0, jdouble a1) const
        {
          env->callVoidMethod(this$, mids$[mid_doubleField_59cb8283], a0.this$, a1);
        }

        void StoredFieldVisitor::floatField(const ::org::apache::lucene::index::FieldInfo & a0, jfloat a1) const
        {
          env->callVoidMethod(this$, mids$[mid_floatField_04c0e245], a0.this$, a1);
        }

        void StoredFieldVisitor::intField(const ::org::apache::lucene::index::FieldInfo & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_intField_d8ebe062], a0.this$, a1);
        }

        void StoredFieldVisitor::longField(const ::org::apache::lucene::index::FieldInfo & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_longField_54f2c7e9], a0.this$, a1);
        }

        ::org::apache::lucene::index::StoredFieldVisitor$Status StoredFieldVisitor::needsField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::index::StoredFieldVisitor$Status(env->callObjectMethod(this$, mids$[mid_needsField_be88ccfe], a0.this$));
        }

        void StoredFieldVisitor::stringField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_stringField_20e02bfa], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_StoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_binaryField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_doubleField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_floatField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_intField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_longField(t_StoredFieldVisitor *self, PyObject *args);
        static PyObject *t_StoredFieldVisitor_needsField(t_StoredFieldVisitor *self, PyObject *arg);
        static PyObject *t_StoredFieldVisitor_stringField(t_StoredFieldVisitor *self, PyObject *args);

        static PyMethodDef t_StoredFieldVisitor__methods_[] = {
          DECLARE_METHOD(t_StoredFieldVisitor, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldVisitor, binaryField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, doubleField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, floatField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, intField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, longField, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldVisitor, needsField, METH_O),
          DECLARE_METHOD(t_StoredFieldVisitor, stringField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldVisitor, t_StoredFieldVisitor, ::java::lang::Object, StoredFieldVisitor, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldVisitor::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldVisitor), module, "StoredFieldVisitor", 0);
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "Status", make_descriptor(&PY_TYPE(StoredFieldVisitor$Status)));
        }

        void t_StoredFieldVisitor::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "class_", make_descriptor(StoredFieldVisitor::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldVisitor::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldVisitor).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldVisitor_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldVisitor::initializeClass, 1)))
            return NULL;
          return t_StoredFieldVisitor::wrap_Object(StoredFieldVisitor(((t_StoredFieldVisitor *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldVisitor_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldVisitor::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldVisitor_binaryField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          JArray< jbyte > a1((jobject) NULL);

          if (!parseArgs(args, "k[B", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.binaryField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "binaryField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_doubleField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jdouble a1;

          if (!parseArgs(args, "kD", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.doubleField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "doubleField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_floatField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jfloat a1;

          if (!parseArgs(args, "kF", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.floatField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "floatField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_intField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.intField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "intField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_longField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          jlong a1;

          if (!parseArgs(args, "kJ", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.longField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "longField", args);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_needsField(t_StoredFieldVisitor *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::StoredFieldVisitor$Status result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.needsField(a0));
            return ::org::apache::lucene::index::t_StoredFieldVisitor$Status::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "needsField", arg);
          return NULL;
        }

        static PyObject *t_StoredFieldVisitor_stringField(t_StoredFieldVisitor *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.stringField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "stringField", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCacheTermsFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCacheTermsFilter::class$ = NULL;
        jmethodID *FieldCacheTermsFilter::mids$ = NULL;
        bool FieldCacheTermsFilter::live$ = false;

        jclass FieldCacheTermsFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCacheTermsFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8fbc1a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_ba45d66a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/String;)V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getFieldCache_a7c1cc27] = env->getMethodID(cls, "getFieldCache", "()Lorg/apache/lucene/search/FieldCache;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheTermsFilter::FieldCacheTermsFilter(const ::java::lang::String & a0, const JArray< ::org::apache::lucene::util::BytesRef > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_8fbc1a2e, a0.this$, a1.this$)) {}

        FieldCacheTermsFilter::FieldCacheTermsFilter(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_ba45d66a, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::DocIdSet FieldCacheTermsFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::FieldCache FieldCacheTermsFilter::getFieldCache() const
        {
          return ::org::apache::lucene::search::FieldCache(env->callObjectMethod(this$, mids$[mid_getFieldCache_a7c1cc27]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCacheTermsFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheTermsFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheTermsFilter_init_(t_FieldCacheTermsFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheTermsFilter_getDocIdSet(t_FieldCacheTermsFilter *self, PyObject *args);
        static PyObject *t_FieldCacheTermsFilter_getFieldCache(t_FieldCacheTermsFilter *self);
        static PyObject *t_FieldCacheTermsFilter_get__fieldCache(t_FieldCacheTermsFilter *self, void *data);
        static PyGetSetDef t_FieldCacheTermsFilter__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCacheTermsFilter, fieldCache),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCacheTermsFilter__methods_[] = {
          DECLARE_METHOD(t_FieldCacheTermsFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheTermsFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheTermsFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_FieldCacheTermsFilter, getFieldCache, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheTermsFilter, t_FieldCacheTermsFilter, ::org::apache::lucene::search::Filter, FieldCacheTermsFilter, t_FieldCacheTermsFilter_init_, 0, 0, t_FieldCacheTermsFilter__fields_, 0, 0);

        void t_FieldCacheTermsFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheTermsFilter), module, "FieldCacheTermsFilter", 0);
        }

        void t_FieldCacheTermsFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheTermsFilter).tp_dict, "class_", make_descriptor(FieldCacheTermsFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheTermsFilter).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheTermsFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheTermsFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheTermsFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheTermsFilter::initializeClass, 1)))
            return NULL;
          return t_FieldCacheTermsFilter::wrap_Object(FieldCacheTermsFilter(((t_FieldCacheTermsFilter *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheTermsFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheTermsFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheTermsFilter_init_(t_FieldCacheTermsFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::BytesRef > a1((jobject) NULL);
              FieldCacheTermsFilter object((jobject) NULL);

              if (!parseArgs(args, "s[k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = FieldCacheTermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              FieldCacheTermsFilter object((jobject) NULL);

              if (!parseArgs(args, "s[s", &a0, &a1))
              {
                INT_CALL(object = FieldCacheTermsFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldCacheTermsFilter_getDocIdSet(t_FieldCacheTermsFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldCacheTermsFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_FieldCacheTermsFilter_getFieldCache(t_FieldCacheTermsFilter *self)
        {
          ::org::apache::lucene::search::FieldCache result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldCache());
          return ::org::apache::lucene::search::t_FieldCache::wrap_Object(result);
        }

        static PyObject *t_FieldCacheTermsFilter_get__fieldCache(t_FieldCacheTermsFilter *self, void *data)
        {
          ::org::apache::lucene::search::FieldCache value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldCache());
          return ::org::apache::lucene::search::t_FieldCache::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardFilterFactory.h"
#include "org/apache/lucene/analysis/standard/StandardFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardFilterFactory::class$ = NULL;
          jmethodID *StandardFilterFactory::mids$ = NULL;
          bool StandardFilterFactory::live$ = false;

          jclass StandardFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2a39d447] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/standard/StandardFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardFilterFactory::StandardFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::StandardFilter StandardFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::standard::StandardFilter(env->callObjectMethod(this$, mids$[mid_create_2a39d447], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardFilterFactory_init_(t_StandardFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardFilterFactory_create(t_StandardFilterFactory *self, PyObject *args);

          static PyMethodDef t_StandardFilterFactory__methods_[] = {
            DECLARE_METHOD(t_StandardFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardFilterFactory, t_StandardFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, StandardFilterFactory, t_StandardFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_StandardFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardFilterFactory), module, "StandardFilterFactory", 0);
          }

          void t_StandardFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardFilterFactory).tp_dict, "class_", make_descriptor(StandardFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_StandardFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_StandardFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardFilterFactory::initializeClass, 1)))
              return NULL;
            return t_StandardFilterFactory::wrap_Object(StandardFilterFactory(((t_StandardFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_StandardFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardFilterFactory_init_(t_StandardFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            StandardFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = StandardFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardFilterFactory_create(t_StandardFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::standard::StandardFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::standard::t_StandardFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StandardFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$GlobalReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$GlobalReuseStrategy::class$ = NULL;
        jmethodID *Analyzer$GlobalReuseStrategy::mids$ = NULL;
        bool Analyzer$GlobalReuseStrategy::live$ = false;

        jclass Analyzer$GlobalReuseStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$GlobalReuseStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getReusableComponents_19769f4a] = env->getMethodID(cls, "getReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_setReusableComponents_66577a3f] = env->getMethodID(cls, "setReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$GlobalReuseStrategy::Analyzer$GlobalReuseStrategy() : ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents Analyzer$GlobalReuseStrategy::getReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_getReusableComponents_19769f4a], a0.this$, a1.this$));
        }

        void Analyzer$GlobalReuseStrategy::setReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setReusableComponents_66577a3f], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$GlobalReuseStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$GlobalReuseStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$GlobalReuseStrategy_init_(t_Analyzer$GlobalReuseStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$GlobalReuseStrategy_getReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args);
        static PyObject *t_Analyzer$GlobalReuseStrategy_setReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args);

        static PyMethodDef t_Analyzer$GlobalReuseStrategy__methods_[] = {
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, getReusableComponents, METH_VARARGS),
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, setReusableComponents, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$GlobalReuseStrategy, t_Analyzer$GlobalReuseStrategy, ::org::apache::lucene::analysis::Analyzer$ReuseStrategy, Analyzer$GlobalReuseStrategy, t_Analyzer$GlobalReuseStrategy_init_, 0, 0, 0, 0, 0);

        void t_Analyzer$GlobalReuseStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$GlobalReuseStrategy), module, "Analyzer$GlobalReuseStrategy", 0);
        }

        void t_Analyzer$GlobalReuseStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$GlobalReuseStrategy).tp_dict, "class_", make_descriptor(Analyzer$GlobalReuseStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$GlobalReuseStrategy).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$GlobalReuseStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$GlobalReuseStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$GlobalReuseStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$GlobalReuseStrategy::initializeClass, 1)))
            return NULL;
          return t_Analyzer$GlobalReuseStrategy::wrap_Object(Analyzer$GlobalReuseStrategy(((t_Analyzer$GlobalReuseStrategy *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$GlobalReuseStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$GlobalReuseStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$GlobalReuseStrategy_init_(t_Analyzer$GlobalReuseStrategy *self, PyObject *args, PyObject *kwds)
        {
          Analyzer$GlobalReuseStrategy object((jobject) NULL);

          INT_CALL(object = Analyzer$GlobalReuseStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_Analyzer$GlobalReuseStrategy_getReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getReusableComponents(a0, a1));
            return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(Analyzer$GlobalReuseStrategy), (PyObject *) self, "getReusableComponents", args, 2);
        }

        static PyObject *t_Analyzer$GlobalReuseStrategy_setReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.setReusableComponents(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Analyzer$GlobalReuseStrategy), (PyObject *) self, "setReusableComponents", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/TextField.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/document/FieldType.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *TextField::class$ = NULL;
        jmethodID *TextField::mids$ = NULL;
        bool TextField::live$ = false;
        ::org::apache::lucene::document::FieldType *TextField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *TextField::TYPE_STORED = NULL;

        jclass TextField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/TextField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d0c5392] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_init$_23e5278e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;)V");
            mids$[mid_init$_064fa087] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TextField::TextField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_7d0c5392, a0.this$, a1.this$)) {}

        TextField::TextField(const ::java::lang::String & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_23e5278e, a0.this$, a1.this$)) {}

        TextField::TextField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_064fa087, a0.this$, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_TextField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TextField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TextField_init_(t_TextField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TextField__methods_[] = {
          DECLARE_METHOD(t_TextField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TextField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TextField, t_TextField, ::org::apache::lucene::document::Field, TextField, t_TextField_init_, 0, 0, 0, 0, 0);

        void t_TextField::install(PyObject *module)
        {
          installType(&PY_TYPE(TextField), module, "TextField", 0);
        }

        void t_TextField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "class_", make_descriptor(TextField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "wrapfn_", make_descriptor(t_TextField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TextField::initializeClass);
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*TextField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*TextField::TYPE_STORED)));
        }

        static PyObject *t_TextField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TextField::initializeClass, 1)))
            return NULL;
          return t_TextField::wrap_Object(TextField(((t_TextField *) arg)->object.this$));
        }
        static PyObject *t_TextField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TextField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TextField_init_(t_TextField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              TextField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TextField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              TextField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TextField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              TextField object((jobject) NULL);

              if (!parseArgs(args, "ssK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = TextField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/StringWriter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *StringWriter::class$ = NULL;
    jmethodID *StringWriter::mids$ = NULL;
    bool StringWriter::live$ = false;

    jclass StringWriter::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/StringWriter");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_append_3aee6342] = env->getMethodID(cls, "append", "(C)Ljava/io/StringWriter;");
        mids$[mid_append_e2d4acee] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/StringWriter;");
        mids$[mid_append_199526fa] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/StringWriter;");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
        mids$[mid_getBuffer_d54172a5] = env->getMethodID(cls, "getBuffer", "()Ljava/lang/StringBuffer;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
        mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
        mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");
        mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    StringWriter::StringWriter() : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    StringWriter::StringWriter(jint a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    StringWriter StringWriter::append(jchar a0) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_3aee6342], a0));
    }

    StringWriter StringWriter::append(const ::java::lang::CharSequence & a0) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_e2d4acee], a0.this$));
    }

    StringWriter StringWriter::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
    {
      return StringWriter(env->callObjectMethod(this$, mids$[mid_append_199526fa], a0.this$, a1, a2));
    }

    void StringWriter::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void StringWriter::flush() const
    {
      env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
    }

    ::java::lang::StringBuffer StringWriter::getBuffer() const
    {
      return ::java::lang::StringBuffer(env->callObjectMethod(this$, mids$[mid_getBuffer_d54172a5]));
    }

    ::java::lang::String StringWriter::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    void StringWriter::write(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
    }

    void StringWriter::write(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
    }

    void StringWriter::write(const ::java::lang::String & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
    }

    void StringWriter::write(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_StringWriter_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_StringWriter_instance_(PyTypeObject *type, PyObject *arg);
    static int t_StringWriter_init_(t_StringWriter *self, PyObject *args, PyObject *kwds);
    static PyObject *t_StringWriter_append(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_close(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_flush(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_getBuffer(t_StringWriter *self);
    static PyObject *t_StringWriter_toString(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_write(t_StringWriter *self, PyObject *args);
    static PyObject *t_StringWriter_get__buffer(t_StringWriter *self, void *data);
    static PyGetSetDef t_StringWriter__fields_[] = {
      DECLARE_GET_FIELD(t_StringWriter, buffer),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_StringWriter__methods_[] = {
      DECLARE_METHOD(t_StringWriter, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringWriter, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringWriter, append, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, close, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, flush, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, getBuffer, METH_NOARGS),
      DECLARE_METHOD(t_StringWriter, toString, METH_VARARGS),
      DECLARE_METHOD(t_StringWriter, write, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(StringWriter, t_StringWriter, ::java::io::Writer, StringWriter, t_StringWriter_init_, 0, 0, t_StringWriter__fields_, 0, 0);

    void t_StringWriter::install(PyObject *module)
    {
      installType(&PY_TYPE(StringWriter), module, "StringWriter", 0);
    }

    void t_StringWriter::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "class_", make_descriptor(StringWriter::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "wrapfn_", make_descriptor(t_StringWriter::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_StringWriter_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, StringWriter::initializeClass, 1)))
        return NULL;
      return t_StringWriter::wrap_Object(StringWriter(((t_StringWriter *) arg)->object.this$));
    }
    static PyObject *t_StringWriter_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, StringWriter::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_StringWriter_init_(t_StringWriter *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          StringWriter object((jobject) NULL);

          INT_CALL(object = StringWriter());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          jint a0;
          StringWriter object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = StringWriter(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_StringWriter_append(t_StringWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jchar a0;
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_StringWriter::wrap_Object(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.append(a0));
            return t_StringWriter::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jint a1;
          jint a2;
          StringWriter result((jobject) NULL);

          if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.append(a0, a1, a2));
            return t_StringWriter::wrap_Object(result);
          }
        }
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "append", args, 2);
    }

    static PyObject *t_StringWriter_close(t_StringWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_StringWriter_flush(t_StringWriter *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.flush());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "flush", args, 2);
    }

    static PyObject *t_StringWriter_getBuffer(t_StringWriter *self)
    {
      ::java::lang::StringBuffer result((jobject) NULL);
      OBJ_CALL(result = self->object.getBuffer());
      return ::java::lang::t_StringBuffer::wrap_Object(result);
    }

    static PyObject *t_StringWriter_toString(t_StringWriter *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_StringWriter_write(t_StringWriter *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.write(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 3:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "sII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.write(a0, a1, a2));
            Py_RETURN_NONE;
          }
        }
      }

      return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "write", args, 2);
    }

    static PyObject *t_StringWriter_get__buffer(t_StringWriter *self, void *data)
    {
      ::java::lang::StringBuffer value((jobject) NULL);
      OBJ_CALL(value = self->object.getBuffer());
      return ::java::lang::t_StringBuffer::wrap_Object(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *NumericRangeQueryNodeProcessor::class$ = NULL;
              jmethodID *NumericRangeQueryNodeProcessor::mids$ = NULL;
              bool NumericRangeQueryNodeProcessor::live$ = false;

              jclass NumericRangeQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/NumericRangeQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericRangeQueryNodeProcessor::NumericRangeQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_NumericRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericRangeQueryNodeProcessor_init_(t_NumericRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NumericRangeQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_NumericRangeQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericRangeQueryNodeProcessor, t_NumericRangeQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, NumericRangeQueryNodeProcessor, t_NumericRangeQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_NumericRangeQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericRangeQueryNodeProcessor), module, "NumericRangeQueryNodeProcessor", 0);
              }

              void t_NumericRangeQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeProcessor).tp_dict, "class_", make_descriptor(NumericRangeQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericRangeQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericRangeQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_NumericRangeQueryNodeProcessor::wrap_Object(NumericRangeQueryNodeProcessor(((t_NumericRangeQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_NumericRangeQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericRangeQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericRangeQueryNodeProcessor_init_(t_NumericRangeQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                NumericRangeQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = NumericRangeQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PathQueryNode$QueryText::class$ = NULL;
              jmethodID *PathQueryNode$QueryText::mids$ = NULL;
              bool PathQueryNode$QueryText::live$ = false;

              jclass PathQueryNode$QueryText::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_6cc8d7e2] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;II)V");
                  mids$[mid_clone_ec4055b6] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/PathQueryNode$QueryText;");
                  mids$[mid_getBegin_54c6a179] = env->getMethodID(cls, "getBegin", "()I");
                  mids$[mid_getEnd_54c6a179] = env->getMethodID(cls, "getEnd", "()I");
                  mids$[mid_getValue_e0adba2f] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PathQueryNode$QueryText::PathQueryNode$QueryText(const ::java::lang::CharSequence & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6cc8d7e2, a0.this$, a1, a2)) {}

              PathQueryNode$QueryText PathQueryNode$QueryText::clone() const
              {
                return PathQueryNode$QueryText(env->callObjectMethod(this$, mids$[mid_clone_ec4055b6]));
              }

              jint PathQueryNode$QueryText::getBegin() const
              {
                return env->callIntMethod(this$, mids$[mid_getBegin_54c6a179]);
              }

              jint PathQueryNode$QueryText::getEnd() const
              {
                return env->callIntMethod(this$, mids$[mid_getEnd_54c6a179]);
              }

              ::java::lang::CharSequence PathQueryNode$QueryText::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_e0adba2f]));
              }

              ::java::lang::String PathQueryNode$QueryText::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PathQueryNode$QueryText_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PathQueryNode$QueryText_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PathQueryNode$QueryText_init_(t_PathQueryNode$QueryText *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PathQueryNode$QueryText_clone(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getBegin(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getEnd(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_getValue(t_PathQueryNode$QueryText *self);
              static PyObject *t_PathQueryNode$QueryText_toString(t_PathQueryNode$QueryText *self, PyObject *args);
              static PyObject *t_PathQueryNode$QueryText_get__begin(t_PathQueryNode$QueryText *self, void *data);
              static PyObject *t_PathQueryNode$QueryText_get__end(t_PathQueryNode$QueryText *self, void *data);
              static PyObject *t_PathQueryNode$QueryText_get__value(t_PathQueryNode$QueryText *self, void *data);
              static PyGetSetDef t_PathQueryNode$QueryText__fields_[] = {
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, begin),
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, end),
                DECLARE_GET_FIELD(t_PathQueryNode$QueryText, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PathQueryNode$QueryText__methods_[] = {
                DECLARE_METHOD(t_PathQueryNode$QueryText, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, clone, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getBegin, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getEnd, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, getValue, METH_NOARGS),
                DECLARE_METHOD(t_PathQueryNode$QueryText, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PathQueryNode$QueryText, t_PathQueryNode$QueryText, ::java::lang::Object, PathQueryNode$QueryText, t_PathQueryNode$QueryText_init_, 0, 0, t_PathQueryNode$QueryText__fields_, 0, 0);

              void t_PathQueryNode$QueryText::install(PyObject *module)
              {
                installType(&PY_TYPE(PathQueryNode$QueryText), module, "PathQueryNode$QueryText", 0);
              }

              void t_PathQueryNode$QueryText::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PathQueryNode$QueryText).tp_dict, "class_", make_descriptor(PathQueryNode$QueryText::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PathQueryNode$QueryText).tp_dict, "wrapfn_", make_descriptor(t_PathQueryNode$QueryText::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PathQueryNode$QueryText).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PathQueryNode$QueryText_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PathQueryNode$QueryText::initializeClass, 1)))
                  return NULL;
                return t_PathQueryNode$QueryText::wrap_Object(PathQueryNode$QueryText(((t_PathQueryNode$QueryText *) arg)->object.this$));
              }
              static PyObject *t_PathQueryNode$QueryText_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PathQueryNode$QueryText::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PathQueryNode$QueryText_init_(t_PathQueryNode$QueryText *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                PathQueryNode$QueryText object((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  INT_CALL(object = PathQueryNode$QueryText(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PathQueryNode$QueryText_clone(t_PathQueryNode$QueryText *self)
              {
                PathQueryNode$QueryText result((jobject) NULL);
                OBJ_CALL(result = self->object.clone());
                return t_PathQueryNode$QueryText::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode$QueryText_getBegin(t_PathQueryNode$QueryText *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBegin());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_PathQueryNode$QueryText_getEnd(t_PathQueryNode$QueryText *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEnd());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_PathQueryNode$QueryText_getValue(t_PathQueryNode$QueryText *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PathQueryNode$QueryText_toString(t_PathQueryNode$QueryText *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PathQueryNode$QueryText), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PathQueryNode$QueryText_get__begin(t_PathQueryNode$QueryText *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBegin());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_PathQueryNode$QueryText_get__end(t_PathQueryNode$QueryText *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEnd());
                return PyInt_FromLong((long) value);
              }

              static PyObject *t_PathQueryNode$QueryText_get__value(t_PathQueryNode$QueryText *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/TokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/ClassLoader.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *TokenizerFactory::class$ = NULL;
          jmethodID *TokenizerFactory::mids$ = NULL;
          bool TokenizerFactory::live$ = false;

          jclass TokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/TokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_availableTokenizers_03e99967] = env->getStaticMethodID(cls, "availableTokenizers", "()Ljava/util/Set;");
              mids$[mid_create_02e4fecd] = env->getMethodID(cls, "create", "(Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");
              mids$[mid_forName_9ff0ca4e] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/TokenizerFactory;");
              mids$[mid_lookupClass_7d663d97] = env->getStaticMethodID(cls, "lookupClass", "(Ljava/lang/String;)Ljava/lang/Class;");
              mids$[mid_reloadTokenizers_9110048d] = env->getStaticMethodID(cls, "reloadTokenizers", "(Ljava/lang/ClassLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::util::Set TokenizerFactory::availableTokenizers()
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableTokenizers_03e99967]));
          }

          ::org::apache::lucene::analysis::Tokenizer TokenizerFactory::create(const ::java::io::Reader & a0) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_02e4fecd], a0.this$));
          }

          ::org::apache::lucene::analysis::Tokenizer TokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }

          TokenizerFactory TokenizerFactory::forName(const ::java::lang::String & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return TokenizerFactory(env->callStaticObjectMethod(cls, mids$[mid_forName_9ff0ca4e], a0.this$, a1.this$));
          }

          ::java::lang::Class TokenizerFactory::lookupClass(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::Class(env->callStaticObjectMethod(cls, mids$[mid_lookupClass_7d663d97], a0.this$));
          }

          void TokenizerFactory::reloadTokenizers(const ::java::lang::ClassLoader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_reloadTokenizers_9110048d], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_TokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_availableTokenizers(PyTypeObject *type);
          static PyObject *t_TokenizerFactory_create(t_TokenizerFactory *self, PyObject *args);
          static PyObject *t_TokenizerFactory_forName(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenizerFactory_lookupClass(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenizerFactory_reloadTokenizers(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_TokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_TokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, availableTokenizers, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_TokenizerFactory, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, lookupClass, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenizerFactory, reloadTokenizers, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenizerFactory, t_TokenizerFactory, ::org::apache::lucene::analysis::util::AbstractAnalysisFactory, TokenizerFactory, abstract_init, 0, 0, 0, 0, 0);

          void t_TokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenizerFactory), module, "TokenizerFactory", 0);
          }

          void t_TokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenizerFactory).tp_dict, "class_", make_descriptor(TokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_TokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_TokenizerFactory::wrap_Object(TokenizerFactory(((t_TokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_TokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TokenizerFactory_availableTokenizers(PyTypeObject *type)
          {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::availableTokenizers());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TokenizerFactory_create(t_TokenizerFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.create(a0));
                  return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.create(a0, a1));
                  return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "create", args);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_forName(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            TokenizerFactory result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::forName(a0, a1));
              return t_TokenizerFactory::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_lookupClass(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::TokenizerFactory::lookupClass(a0));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "lookupClass", arg);
            return NULL;
          }

          static PyObject *t_TokenizerFactory_reloadTokenizers(PyTypeObject *type, PyObject *arg)
          {
            ::java::lang::ClassLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::analysis::util::TokenizerFactory::reloadTokenizers(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "reloadTokenizers", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortField$Type::class$ = NULL;
        jmethodID *SortField$Type::mids$ = NULL;
        bool SortField$Type::live$ = false;
        SortField$Type *SortField$Type::BYTE = NULL;
        SortField$Type *SortField$Type::BYTES = NULL;
        SortField$Type *SortField$Type::CUSTOM = NULL;
        SortField$Type *SortField$Type::DOC = NULL;
        SortField$Type *SortField$Type::DOUBLE = NULL;
        SortField$Type *SortField$Type::FLOAT = NULL;
        SortField$Type *SortField$Type::INT = NULL;
        SortField$Type *SortField$Type::LONG = NULL;
        SortField$Type *SortField$Type::REWRITEABLE = NULL;
        SortField$Type *SortField$Type::SCORE = NULL;
        SortField$Type *SortField$Type::SHORT = NULL;
        SortField$Type *SortField$Type::STRING = NULL;
        SortField$Type *SortField$Type::STRING_VAL = NULL;

        jclass SortField$Type::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortField$Type");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_3d40a53b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/SortField$Type;");
            mids$[mid_values_05ae94bd] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/SortField$Type;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BYTE = new SortField$Type(env->getStaticObjectField(cls, "BYTE", "Lorg/apache/lucene/search/SortField$Type;"));
            BYTES = new SortField$Type(env->getStaticObjectField(cls, "BYTES", "Lorg/apache/lucene/search/SortField$Type;"));
            CUSTOM = new SortField$Type(env->getStaticObjectField(cls, "CUSTOM", "Lorg/apache/lucene/search/SortField$Type;"));
            DOC = new SortField$Type(env->getStaticObjectField(cls, "DOC", "Lorg/apache/lucene/search/SortField$Type;"));
            DOUBLE = new SortField$Type(env->getStaticObjectField(cls, "DOUBLE", "Lorg/apache/lucene/search/SortField$Type;"));
            FLOAT = new SortField$Type(env->getStaticObjectField(cls, "FLOAT", "Lorg/apache/lucene/search/SortField$Type;"));
            INT = new SortField$Type(env->getStaticObjectField(cls, "INT", "Lorg/apache/lucene/search/SortField$Type;"));
            LONG = new SortField$Type(env->getStaticObjectField(cls, "LONG", "Lorg/apache/lucene/search/SortField$Type;"));
            REWRITEABLE = new SortField$Type(env->getStaticObjectField(cls, "REWRITEABLE", "Lorg/apache/lucene/search/SortField$Type;"));
            SCORE = new SortField$Type(env->getStaticObjectField(cls, "SCORE", "Lorg/apache/lucene/search/SortField$Type;"));
            SHORT = new SortField$Type(env->getStaticObjectField(cls, "SHORT", "Lorg/apache/lucene/search/SortField$Type;"));
            STRING = new SortField$Type(env->getStaticObjectField(cls, "STRING", "Lorg/apache/lucene/search/SortField$Type;"));
            STRING_VAL = new SortField$Type(env->getStaticObjectField(cls, "STRING_VAL", "Lorg/apache/lucene/search/SortField$Type;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortField$Type SortField$Type::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return SortField$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_3d40a53b], a0.this$));
        }

        JArray< SortField$Type > SortField$Type::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< SortField$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_05ae94bd]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortField$Type_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField$Type_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField$Type_of_(t_SortField$Type *self, PyObject *args);
        static PyObject *t_SortField$Type_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_SortField$Type_values(PyTypeObject *type);
        static PyObject *t_SortField$Type_get__parameters_(t_SortField$Type *self, void *data);
        static PyGetSetDef t_SortField$Type__fields_[] = {
          DECLARE_GET_FIELD(t_SortField$Type, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortField$Type__methods_[] = {
          DECLARE_METHOD(t_SortField$Type, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, of_, METH_VARARGS),
          DECLARE_METHOD(t_SortField$Type, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SortField$Type, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortField$Type, t_SortField$Type, ::java::lang::Enum, SortField$Type, abstract_init, 0, 0, t_SortField$Type__fields_, 0, 0);
        PyObject *t_SortField$Type::wrap_Object(const SortField$Type& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortField$Type::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortField$Type *self = (t_SortField$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SortField$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SortField$Type::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SortField$Type *self = (t_SortField$Type *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SortField$Type::install(PyObject *module)
        {
          installType(&PY_TYPE(SortField$Type), module, "SortField$Type", 0);
        }

        void t_SortField$Type::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "class_", make_descriptor(SortField$Type::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "wrapfn_", make_descriptor(t_SortField$Type::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortField$Type::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "BYTE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::BYTE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "BYTES", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::BYTES)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "CUSTOM", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::CUSTOM)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "DOC", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::DOC)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "DOUBLE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::DOUBLE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "FLOAT", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::FLOAT)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "INT", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::INT)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "LONG", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::LONG)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "REWRITEABLE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::REWRITEABLE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "SCORE", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::SCORE)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "SHORT", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::SHORT)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "STRING", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::STRING)));
          PyDict_SetItemString(PY_TYPE(SortField$Type).tp_dict, "STRING_VAL", make_descriptor(t_SortField$Type::wrap_Object(*SortField$Type::STRING_VAL)));
        }

        static PyObject *t_SortField$Type_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortField$Type::initializeClass, 1)))
            return NULL;
          return t_SortField$Type::wrap_Object(SortField$Type(((t_SortField$Type *) arg)->object.this$));
        }
        static PyObject *t_SortField$Type_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortField$Type::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortField$Type_of_(t_SortField$Type *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_SortField$Type_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          SortField$Type result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SortField$Type::valueOf(a0));
            return t_SortField$Type::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_SortField$Type_values(PyTypeObject *type)
        {
          JArray< SortField$Type > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::SortField$Type::values());
          return JArray<jobject>(result.this$).wrap(t_SortField$Type::wrap_jobject);
        }
        static PyObject *t_SortField$Type_get__parameters_(t_SortField$Type *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenizer.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenizer::class$ = NULL;
        jmethodID *PythonTokenizer::mids$ = NULL;
        bool PythonTokenizer::live$ = false;

        jclass PythonTokenizer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenizer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenizer::PythonTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

        void PythonTokenizer::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonTokenizer::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonTokenizer::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenizer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenizer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenizer_init_(t_PythonTokenizer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenizer_finalize(t_PythonTokenizer *self);
        static PyObject *t_PythonTokenizer_pythonExtension(t_PythonTokenizer *self, PyObject *args);
        static jboolean JNICALL t_PythonTokenizer_incrementToken0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenizer_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenizer_get__self(t_PythonTokenizer *self, void *data);
        static PyGetSetDef t_PythonTokenizer__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenizer, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenizer__methods_[] = {
          DECLARE_METHOD(t_PythonTokenizer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenizer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenizer, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenizer, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonTokenizer, t_PythonTokenizer, ::org::apache::lucene::analysis::Tokenizer, PythonTokenizer, t_PythonTokenizer_init_, 0, 0, t_PythonTokenizer__fields_, 0, 0);

        void t_PythonTokenizer::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenizer), module, "PythonTokenizer", 1);
        }

        void t_PythonTokenizer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonTokenizer).tp_dict, "class_", make_descriptor(PythonTokenizer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PythonTokenizer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenizer::initializeClass);
          JNINativeMethod methods[] = {
            { "incrementToken", "()Z", (void *) t_PythonTokenizer_incrementToken0 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenizer_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonTokenizer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenizer::initializeClass, 1)))
            return NULL;
          return t_PythonTokenizer::wrap_Object(PythonTokenizer(((t_PythonTokenizer *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenizer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenizer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenizer_init_(t_PythonTokenizer *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::Reader a0((jobject) NULL);
          PythonTokenizer object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
          {
            INT_CALL(object = PythonTokenizer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenizer_finalize(t_PythonTokenizer *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenizer_pythonExtension(t_PythonTokenizer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonTokenizer_incrementToken0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenizer_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenizer::mids$[PythonTokenizer::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonTokenizer_get__self(t_PythonTokenizer *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/TokenSources.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/document/Document.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *TokenSources::class$ = NULL;
          jmethodID *TokenSources::mids$ = NULL;
          bool TokenSources::live$ = false;

          jclass TokenSources::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/TokenSources");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getAnyTokenStream_2593cc2a] = env->getStaticMethodID(cls, "getAnyTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getAnyTokenStream_326e373c] = env->getStaticMethodID(cls, "getAnyTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/document/Document;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_a3ddc01a] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_6006da77] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/Terms;Z)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_f436def7] = env->getStaticMethodID(cls, "getTokenStream", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_5d782325] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/document/Document;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStream_2593cc2a] = env->getStaticMethodID(cls, "getTokenStream", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getTokenStreamWithOffsets_1c01cdda] = env->getStaticMethodID(cls, "getTokenStreamWithOffsets", "(Lorg/apache/lucene/index/IndexReader;ILjava/lang/String;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenSources::TokenSources() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::analysis::TokenStream TokenSources::getAnyTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getAnyTokenStream_2593cc2a], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getAnyTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::document::Document & a3, const ::org::apache::lucene::analysis::Analyzer & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getAnyTokenStream_326e373c], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::Terms & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_a3ddc01a], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::Terms & a0, jboolean a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_6006da77], a0.this$, a1));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_f436def7], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::document::Document & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_5d782325], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStream(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStream_2593cc2a], a0.this$, a1, a2.this$, a3.this$));
          }

          ::org::apache::lucene::analysis::TokenStream TokenSources::getTokenStreamWithOffsets(const ::org::apache::lucene::index::IndexReader & a0, jint a1, const ::java::lang::String & a2)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::TokenStream(env->callStaticObjectMethod(cls, mids$[mid_getTokenStreamWithOffsets_1c01cdda], a0.this$, a1, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_TokenSources_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenSources_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenSources_init_(t_TokenSources *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenSources_getAnyTokenStream(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenSources_getTokenStream(PyTypeObject *type, PyObject *args);
          static PyObject *t_TokenSources_getTokenStreamWithOffsets(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_TokenSources__methods_[] = {
            DECLARE_METHOD(t_TokenSources, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getAnyTokenStream, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getTokenStream, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_TokenSources, getTokenStreamWithOffsets, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenSources, t_TokenSources, ::java::lang::Object, TokenSources, t_TokenSources_init_, 0, 0, 0, 0, 0);

          void t_TokenSources::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenSources), module, "TokenSources", 0);
          }

          void t_TokenSources::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenSources).tp_dict, "class_", make_descriptor(TokenSources::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenSources).tp_dict, "wrapfn_", make_descriptor(t_TokenSources::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenSources).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenSources_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenSources::initializeClass, 1)))
              return NULL;
            return t_TokenSources::wrap_Object(TokenSources(((t_TokenSources *) arg)->object.this$));
          }
          static PyObject *t_TokenSources_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenSources::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenSources_init_(t_TokenSources *self, PyObject *args, PyObject *kwds)
          {
            TokenSources object((jobject) NULL);

            INT_CALL(object = TokenSources());
            self->object = object;

            return 0;
          }

          static PyObject *t_TokenSources_getAnyTokenStream(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getAnyTokenStream(a0, a1, a2, a3));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::document::Document a3((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a4((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIskk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::document::Document::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getAnyTokenStream(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getAnyTokenStream", args);
            return NULL;
          }

          static PyObject *t_TokenSources_getTokenStream(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::Terms a0((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                ::org::apache::lucene::index::Terms a0((jobject) NULL);
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kZ", ::org::apache::lucene::index::Terms::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "ssk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::document::Document a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "ksk", ::org::apache::lucene::document::Document::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                jint a1;
                ::java::lang::String a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

                if (!parseArgs(args, "kIsk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStream(a0, a1, a2, a3));
                  return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getTokenStream", args);
            return NULL;
          }

          static PyObject *t_TokenSources_getTokenStreamWithOffsets(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "kIs", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::highlight::TokenSources::getTokenStreamWithOffsets(a0, a1, a2));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getTokenStreamWithOffsets", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/util/automaton/ByteRunAutomaton.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Boolean.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CompiledAutomaton::class$ = NULL;
          jmethodID *CompiledAutomaton::mids$ = NULL;
          jfieldID *CompiledAutomaton::fids$ = NULL;
          bool CompiledAutomaton::live$ = false;

          jclass CompiledAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CompiledAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fc7cf394] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_init$_3d57924d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;Ljava/lang/Boolean;Z)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_floor_0991fadd] = env->getMethodID(cls, "floor", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getTermsEnum_fb3ac14e] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toDot_14c7b5c5] = env->getMethodID(cls, "toDot", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_commonSuffixRef] = env->getFieldID(cls, "commonSuffixRef", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_finite] = env->getFieldID(cls, "finite", "Ljava/lang/Boolean;");
              fids$[fid_runAutomaton] = env->getFieldID(cls, "runAutomaton", "Lorg/apache/lucene/util/automaton/ByteRunAutomaton;");
              fids$[fid_sortedTransitions] = env->getFieldID(cls, "sortedTransitions", "[[Lorg/apache/lucene/util/automaton/Transition;");
              fids$[fid_term] = env->getFieldID(cls, "term", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_type] = env->getFieldID(cls, "type", "Lorg/apache/lucene/util/automaton/CompiledAutomaton$AUTOMATON_TYPE;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompiledAutomaton::CompiledAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fc7cf394, a0.this$)) {}

          CompiledAutomaton::CompiledAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0, const ::java::lang::Boolean & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3d57924d, a0.this$, a1.this$, a2)) {}

          jboolean CompiledAutomaton::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::floor(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_floor_0991fadd], a0.this$, a1.this$));
          }

          ::org::apache::lucene::index::TermsEnum CompiledAutomaton::getTermsEnum(const ::org::apache::lucene::index::Terms & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_getTermsEnum_fb3ac14e], a0.this$));
          }

          jint CompiledAutomaton::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String CompiledAutomaton::toDot() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toDot_14c7b5c5]));
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::_get_commonSuffixRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_commonSuffixRef]));
          }

          ::java::lang::Boolean CompiledAutomaton::_get_finite() const
          {
            return ::java::lang::Boolean(env->getObjectField(this$, fids$[fid_finite]));
          }

          ::org::apache::lucene::util::automaton::ByteRunAutomaton CompiledAutomaton::_get_runAutomaton() const
          {
            return ::org::apache::lucene::util::automaton::ByteRunAutomaton(env->getObjectField(this$, fids$[fid_runAutomaton]));
          }

          JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > CompiledAutomaton::_get_sortedTransitions() const
          {
            return JArray< JArray< ::org::apache::lucene::util::automaton::Transition > >(env->getObjectField(this$, fids$[fid_sortedTransitions]));
          }

          ::org::apache::lucene::util::BytesRef CompiledAutomaton::_get_term() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_term]));
          }

          ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE CompiledAutomaton::_get_type() const
          {
            return ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE(env->getObjectField(this$, fids$[fid_type]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CompiledAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompiledAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompiledAutomaton_init_(t_CompiledAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompiledAutomaton_equals(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_floor(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_getTermsEnum(t_CompiledAutomaton *self, PyObject *arg);
          static PyObject *t_CompiledAutomaton_hashCode(t_CompiledAutomaton *self, PyObject *args);
          static PyObject *t_CompiledAutomaton_toDot(t_CompiledAutomaton *self);
          static PyObject *t_CompiledAutomaton_get__commonSuffixRef(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__finite(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__runAutomaton(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__sortedTransitions(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__term(t_CompiledAutomaton *self, void *data);
          static PyObject *t_CompiledAutomaton_get__type(t_CompiledAutomaton *self, void *data);

          static PyGetSetDef t_CompiledAutomaton__fields_[] = {
            DECLARE_GET_FIELD(t_CompiledAutomaton, commonSuffixRef),
            DECLARE_GET_FIELD(t_CompiledAutomaton, finite),
            DECLARE_GET_FIELD(t_CompiledAutomaton, runAutomaton),
            DECLARE_GET_FIELD(t_CompiledAutomaton, sortedTransitions),
            DECLARE_GET_FIELD(t_CompiledAutomaton, term),
            DECLARE_GET_FIELD(t_CompiledAutomaton, type),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CompiledAutomaton__methods_[] = {
            DECLARE_METHOD(t_CompiledAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompiledAutomaton, equals, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton, floor, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton, getTermsEnum, METH_O),
            DECLARE_METHOD(t_CompiledAutomaton, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_CompiledAutomaton, toDot, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompiledAutomaton, t_CompiledAutomaton, ::java::lang::Object, CompiledAutomaton, t_CompiledAutomaton_init_, 0, 0, t_CompiledAutomaton__fields_, 0, 0);

          void t_CompiledAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(CompiledAutomaton), module, "CompiledAutomaton", 0);
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "AUTOMATON_TYPE", make_descriptor(&PY_TYPE(CompiledAutomaton$AUTOMATON_TYPE)));
          }

          void t_CompiledAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "class_", make_descriptor(CompiledAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "wrapfn_", make_descriptor(t_CompiledAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompiledAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompiledAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompiledAutomaton::initializeClass, 1)))
              return NULL;
            return t_CompiledAutomaton::wrap_Object(CompiledAutomaton(((t_CompiledAutomaton *) arg)->object.this$));
          }
          static PyObject *t_CompiledAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompiledAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompiledAutomaton_init_(t_CompiledAutomaton *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                CompiledAutomaton object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
                {
                  INT_CALL(object = CompiledAutomaton(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
                ::java::lang::Boolean a1((jobject) NULL);
                jboolean a2;
                CompiledAutomaton object((jobject) NULL);

                if (!parseArgs(args, "kOZ", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &::java::lang::PY_TYPE(Boolean), &a0, &a1, &a2))
                {
                  INT_CALL(object = CompiledAutomaton(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompiledAutomaton_equals(t_CompiledAutomaton *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CompiledAutomaton), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_CompiledAutomaton_floor(t_CompiledAutomaton *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.floor(a0, a1));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "floor", args);
            return NULL;
          }

          static PyObject *t_CompiledAutomaton_getTermsEnum(t_CompiledAutomaton *self, PyObject *arg)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getTermsEnum(a0));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTermsEnum", arg);
            return NULL;
          }

          static PyObject *t_CompiledAutomaton_hashCode(t_CompiledAutomaton *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CompiledAutomaton), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_CompiledAutomaton_toDot(t_CompiledAutomaton *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.toDot());
            return j2p(result);
          }

          static PyObject *t_CompiledAutomaton_get__commonSuffixRef(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_commonSuffixRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__finite(t_CompiledAutomaton *self, void *data)
          {
            ::java::lang::Boolean value((jobject) NULL);
            OBJ_CALL(value = self->object._get_finite());
            return ::java::lang::t_Boolean::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__runAutomaton(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::ByteRunAutomaton value((jobject) NULL);
            OBJ_CALL(value = self->object._get_runAutomaton());
            return ::org::apache::lucene::util::automaton::t_ByteRunAutomaton::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__sortedTransitions(t_CompiledAutomaton *self, void *data)
          {
            JArray< JArray< ::org::apache::lucene::util::automaton::Transition > > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_sortedTransitions());
            return JArray<jobject>(value.this$).wrap(NULL);
          }

          static PyObject *t_CompiledAutomaton_get__term(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_CompiledAutomaton_get__type(t_CompiledAutomaton *self, void *data)
          {
            ::org::apache::lucene::util::automaton::CompiledAutomaton$AUTOMATON_TYPE value((jobject) NULL);
            OBJ_CALL(value = self->object._get_type());
            return ::org::apache::lucene::util::automaton::t_CompiledAutomaton$AUTOMATON_TYPE::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldsProducer::class$ = NULL;
        jmethodID *FieldsProducer::mids$ = NULL;
        bool FieldsProducer::live$ = false;

        jclass FieldsProducer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldsProducer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FieldsProducer::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void FieldsProducer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldsProducer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsProducer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsProducer_checkIntegrity(t_FieldsProducer *self);
        static PyObject *t_FieldsProducer_close(t_FieldsProducer *self);

        static PyMethodDef t_FieldsProducer__methods_[] = {
          DECLARE_METHOD(t_FieldsProducer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsProducer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsProducer, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_FieldsProducer, close, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldsProducer, t_FieldsProducer, ::org::apache::lucene::index::Fields, FieldsProducer, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldsProducer::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldsProducer), module, "FieldsProducer", 0);
        }

        void t_FieldsProducer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldsProducer).tp_dict, "class_", make_descriptor(FieldsProducer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldsProducer).tp_dict, "wrapfn_", make_descriptor(t_FieldsProducer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldsProducer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldsProducer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldsProducer::initializeClass, 1)))
            return NULL;
          return t_FieldsProducer::wrap_Object(FieldsProducer(((t_FieldsProducer *) arg)->object.this$));
        }
        static PyObject *t_FieldsProducer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldsProducer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldsProducer_checkIntegrity(t_FieldsProducer *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldsProducer_close(t_FieldsProducer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/OrdFieldSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *OrdFieldSource::class$ = NULL;
            jmethodID *OrdFieldSource::mids$ = NULL;
            bool OrdFieldSource::live$ = false;

            jclass OrdFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/OrdFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            OrdFieldSource::OrdFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String OrdFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean OrdFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues OrdFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint OrdFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_OrdFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_OrdFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_OrdFieldSource_init_(t_OrdFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_OrdFieldSource_description(t_OrdFieldSource *self, PyObject *args);
            static PyObject *t_OrdFieldSource_equals(t_OrdFieldSource *self, PyObject *args);
            static PyObject *t_OrdFieldSource_getValues(t_OrdFieldSource *self, PyObject *args);
            static PyObject *t_OrdFieldSource_hashCode(t_OrdFieldSource *self, PyObject *args);

            static PyMethodDef t_OrdFieldSource__methods_[] = {
              DECLARE_METHOD(t_OrdFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrdFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_OrdFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_OrdFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_OrdFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_OrdFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(OrdFieldSource, t_OrdFieldSource, ::org::apache::lucene::queries::function::ValueSource, OrdFieldSource, t_OrdFieldSource_init_, 0, 0, 0, 0, 0);

            void t_OrdFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(OrdFieldSource), module, "OrdFieldSource", 0);
            }

            void t_OrdFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(OrdFieldSource).tp_dict, "class_", make_descriptor(OrdFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(OrdFieldSource).tp_dict, "wrapfn_", make_descriptor(t_OrdFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(OrdFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_OrdFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, OrdFieldSource::initializeClass, 1)))
                return NULL;
              return t_OrdFieldSource::wrap_Object(OrdFieldSource(((t_OrdFieldSource *) arg)->object.this$));
            }
            static PyObject *t_OrdFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, OrdFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_OrdFieldSource_init_(t_OrdFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              OrdFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = OrdFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_OrdFieldSource_description(t_OrdFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_OrdFieldSource_equals(t_OrdFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_OrdFieldSource_getValues(t_OrdFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_OrdFieldSource_hashCode(t_OrdFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(OrdFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ConcurrentMergeScheduler.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ConcurrentMergeScheduler::class$ = NULL;
        jmethodID *ConcurrentMergeScheduler::mids$ = NULL;
        bool ConcurrentMergeScheduler::live$ = false;
        jint ConcurrentMergeScheduler::DEFAULT_MAX_MERGE_COUNT = (jint) 0;
        jint ConcurrentMergeScheduler::DEFAULT_MAX_THREAD_COUNT = (jint) 0;

        jclass ConcurrentMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ConcurrentMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getMaxMergeCount_54c6a179] = env->getMethodID(cls, "getMaxMergeCount", "()I");
            mids$[mid_getMaxThreadCount_54c6a179] = env->getMethodID(cls, "getMaxThreadCount", "()I");
            mids$[mid_getMergeThreadPriority_54c6a179] = env->getMethodID(cls, "getMergeThreadPriority", "()I");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");
            mids$[mid_setMaxMergesAndThreads_d8d154a6] = env->getMethodID(cls, "setMaxMergesAndThreads", "(II)V");
            mids$[mid_setMergeThreadPriority_39c7bd3c] = env->getMethodID(cls, "setMergeThreadPriority", "(I)V");
            mids$[mid_sync_54c6a166] = env->getMethodID(cls, "sync", "()V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_message_5fdc3f48] = env->getMethodID(cls, "message", "(Ljava/lang/String;)V");
            mids$[mid_verbose_54c6a16a] = env->getMethodID(cls, "verbose", "()Z");
            mids$[mid_handleMergeException_c5ec8ca4] = env->getMethodID(cls, "handleMergeException", "(Ljava/lang/Throwable;)V");
            mids$[mid_mergeThreadCount_54c6a179] = env->getMethodID(cls, "mergeThreadCount", "()I");
            mids$[mid_updateMergeThreads_54c6a166] = env->getMethodID(cls, "updateMergeThreads", "()V");
            mids$[mid_doMerge_54badd95] = env->getMethodID(cls, "doMerge", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;)V");
            mids$[mid_getMergeThread_a2024ae6] = env->getMethodID(cls, "getMergeThread", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergePolicy$OneMerge;)Lorg/apache/lucene/index/ConcurrentMergeScheduler$MergeThread;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_MERGE_COUNT = env->getStaticIntField(cls, "DEFAULT_MAX_MERGE_COUNT");
            DEFAULT_MAX_THREAD_COUNT = env->getStaticIntField(cls, "DEFAULT_MAX_THREAD_COUNT");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ConcurrentMergeScheduler::ConcurrentMergeScheduler() : ::org::apache::lucene::index::MergeScheduler(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void ConcurrentMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint ConcurrentMergeScheduler::getMaxMergeCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeCount_54c6a179]);
        }

        jint ConcurrentMergeScheduler::getMaxThreadCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxThreadCount_54c6a179]);
        }

        jint ConcurrentMergeScheduler::getMergeThreadPriority() const
        {
          return env->callIntMethod(this$, mids$[mid_getMergeThreadPriority_54c6a179]);
        }

        void ConcurrentMergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }

        void ConcurrentMergeScheduler::setMaxMergesAndThreads(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxMergesAndThreads_d8d154a6], a0, a1);
        }

        void ConcurrentMergeScheduler::setMergeThreadPriority(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeThreadPriority_39c7bd3c], a0);
        }

        void ConcurrentMergeScheduler::sync() const
        {
          env->callVoidMethod(this$, mids$[mid_sync_54c6a166]);
        }

        ::java::lang::String ConcurrentMergeScheduler::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ConcurrentMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConcurrentMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ConcurrentMergeScheduler_init_(t_ConcurrentMergeScheduler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ConcurrentMergeScheduler_close(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_getMaxMergeCount(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_getMaxThreadCount(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_getMergeThreadPriority(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_merge(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_setMaxMergesAndThreads(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_setMergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg);
        static PyObject *t_ConcurrentMergeScheduler_sync(t_ConcurrentMergeScheduler *self);
        static PyObject *t_ConcurrentMergeScheduler_toString(t_ConcurrentMergeScheduler *self, PyObject *args);
        static PyObject *t_ConcurrentMergeScheduler_get__maxMergeCount(t_ConcurrentMergeScheduler *self, void *data);
        static PyObject *t_ConcurrentMergeScheduler_get__maxThreadCount(t_ConcurrentMergeScheduler *self, void *data);
        static PyObject *t_ConcurrentMergeScheduler_get__mergeThreadPriority(t_ConcurrentMergeScheduler *self, void *data);
        static int t_ConcurrentMergeScheduler_set__mergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg, void *data);
        static PyGetSetDef t_ConcurrentMergeScheduler__fields_[] = {
          DECLARE_GET_FIELD(t_ConcurrentMergeScheduler, maxMergeCount),
          DECLARE_GET_FIELD(t_ConcurrentMergeScheduler, maxThreadCount),
          DECLARE_GETSET_FIELD(t_ConcurrentMergeScheduler, mergeThreadPriority),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConcurrentMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_ConcurrentMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getMaxMergeCount, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getMaxThreadCount, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, getMergeThreadPriority, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, merge, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, setMaxMergesAndThreads, METH_VARARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, setMergeThreadPriority, METH_O),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, sync, METH_NOARGS),
          DECLARE_METHOD(t_ConcurrentMergeScheduler, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ConcurrentMergeScheduler, t_ConcurrentMergeScheduler, ::org::apache::lucene::index::MergeScheduler, ConcurrentMergeScheduler, t_ConcurrentMergeScheduler_init_, 0, 0, t_ConcurrentMergeScheduler__fields_, 0, 0);

        void t_ConcurrentMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(ConcurrentMergeScheduler), module, "ConcurrentMergeScheduler", 0);
        }

        void t_ConcurrentMergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "class_", make_descriptor(ConcurrentMergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_ConcurrentMergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ConcurrentMergeScheduler::initializeClass);
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "DEFAULT_MAX_MERGE_COUNT", make_descriptor(ConcurrentMergeScheduler::DEFAULT_MAX_MERGE_COUNT));
          PyDict_SetItemString(PY_TYPE(ConcurrentMergeScheduler).tp_dict, "DEFAULT_MAX_THREAD_COUNT", make_descriptor(ConcurrentMergeScheduler::DEFAULT_MAX_THREAD_COUNT));
        }

        static PyObject *t_ConcurrentMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConcurrentMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_ConcurrentMergeScheduler::wrap_Object(ConcurrentMergeScheduler(((t_ConcurrentMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_ConcurrentMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConcurrentMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ConcurrentMergeScheduler_init_(t_ConcurrentMergeScheduler *self, PyObject *args, PyObject *kwds)
        {
          ConcurrentMergeScheduler object((jobject) NULL);

          INT_CALL(object = ConcurrentMergeScheduler());
          self->object = object;

          return 0;
        }

        static PyObject *t_ConcurrentMergeScheduler_close(t_ConcurrentMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_getMaxMergeCount(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_getMaxThreadCount(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxThreadCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_getMergeThreadPriority(t_ConcurrentMergeScheduler *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMergeThreadPriority());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConcurrentMergeScheduler_merge(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "merge", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_setMaxMergesAndThreads(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.setMaxMergesAndThreads(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergesAndThreads", args);
          return NULL;
        }

        static PyObject *t_ConcurrentMergeScheduler_setMergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMergeThreadPriority(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeThreadPriority", arg);
          return NULL;
        }

        static PyObject *t_ConcurrentMergeScheduler_sync(t_ConcurrentMergeScheduler *self)
        {
          OBJ_CALL(self->object.sync());
          Py_RETURN_NONE;
        }

        static PyObject *t_ConcurrentMergeScheduler_toString(t_ConcurrentMergeScheduler *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ConcurrentMergeScheduler), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__maxMergeCount(t_ConcurrentMergeScheduler *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__maxThreadCount(t_ConcurrentMergeScheduler *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxThreadCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ConcurrentMergeScheduler_get__mergeThreadPriority(t_ConcurrentMergeScheduler *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMergeThreadPriority());
          return PyInt_FromLong((long) value);
        }
        static int t_ConcurrentMergeScheduler_set__mergeThreadPriority(t_ConcurrentMergeScheduler *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMergeThreadPriority(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeThreadPriority", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *TypeAttribute::class$ = NULL;
          jmethodID *TypeAttribute::mids$ = NULL;
          bool TypeAttribute::live$ = false;
          ::java::lang::String *TypeAttribute::DEFAULT_TYPE = NULL;

          jclass TypeAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/TypeAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_setType_5fdc3f48] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_type_14c7b5c5] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void TypeAttribute::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_5fdc3f48], a0.this$);
          }

          ::java::lang::String TypeAttribute::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_TypeAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAttribute_setType(t_TypeAttribute *self, PyObject *arg);
          static PyObject *t_TypeAttribute_type(t_TypeAttribute *self);

          static PyMethodDef t_TypeAttribute__methods_[] = {
            DECLARE_METHOD(t_TypeAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAttribute, setType, METH_O),
            DECLARE_METHOD(t_TypeAttribute, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAttribute, t_TypeAttribute, ::org::apache::lucene::util::Attribute, TypeAttribute, abstract_init, 0, 0, 0, 0, 0);

          void t_TypeAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAttribute), module, "TypeAttribute", 0);
          }

          void t_TypeAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "class_", make_descriptor(TypeAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "wrapfn_", make_descriptor(t_TypeAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TypeAttribute::initializeClass);
            PyDict_SetItemString(PY_TYPE(TypeAttribute).tp_dict, "DEFAULT_TYPE", make_descriptor(j2p(*TypeAttribute::DEFAULT_TYPE)));
          }

          static PyObject *t_TypeAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAttribute::initializeClass, 1)))
              return NULL;
            return t_TypeAttribute::wrap_Object(TypeAttribute(((t_TypeAttribute *) arg)->object.this$));
          }
          static PyObject *t_TypeAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TypeAttribute_setType(t_TypeAttribute *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_TypeAttribute_type(t_TypeAttribute *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/util/Locale.h"
#include "java/lang/Throwable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeException::class$ = NULL;
            jmethodID *QueryNodeException::mids$ = NULL;
            bool QueryNodeException::live$ = false;

            jclass QueryNodeException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_41dcc0ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c0fb304e] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                mids$[mid_getMessageObject_1bceed44] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeException::QueryNodeException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

            QueryNodeException::QueryNodeException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

            QueryNodeException::QueryNodeException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_41dcc0ed, a0.this$, a1.this$)) {}

            ::java::lang::String QueryNodeException::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
            }

            ::java::lang::String QueryNodeException::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_c0fb304e], a0.this$));
            }

            ::java::lang::String QueryNodeException::getMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
            }

            ::org::apache::lucene::queryparser::flexible::messages::Message QueryNodeException::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_1bceed44]));
            }

            ::java::lang::String QueryNodeException::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeException_init_(t_QueryNodeException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeException_getLocalizedMessage(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_getMessage(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_getMessageObject(t_QueryNodeException *self);
            static PyObject *t_QueryNodeException_toString(t_QueryNodeException *self, PyObject *args);
            static PyObject *t_QueryNodeException_get__localizedMessage(t_QueryNodeException *self, void *data);
            static PyObject *t_QueryNodeException_get__message(t_QueryNodeException *self, void *data);
            static PyObject *t_QueryNodeException_get__messageObject(t_QueryNodeException *self, void *data);
            static PyGetSetDef t_QueryNodeException__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeException, localizedMessage),
              DECLARE_GET_FIELD(t_QueryNodeException, message),
              DECLARE_GET_FIELD(t_QueryNodeException, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeException__methods_[] = {
              DECLARE_METHOD(t_QueryNodeException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeException, getLocalizedMessage, METH_VARARGS),
              DECLARE_METHOD(t_QueryNodeException, getMessage, METH_VARARGS),
              DECLARE_METHOD(t_QueryNodeException, getMessageObject, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeException, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryNodeException, t_QueryNodeException, ::java::lang::Exception, QueryNodeException, t_QueryNodeException_init_, 0, 0, t_QueryNodeException__fields_, 0, 0);

            void t_QueryNodeException::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeException), module, "QueryNodeException", 0);
            }

            void t_QueryNodeException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryNodeException).tp_dict, "class_", make_descriptor(QueryNodeException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryNodeException).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryNodeException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeException::initializeClass, 1)))
                return NULL;
              return t_QueryNodeException::wrap_Object(QueryNodeException(((t_QueryNodeException *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeException_init_(t_QueryNodeException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeException(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeException object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeException(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeException_getLocalizedMessage(t_QueryNodeException *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              return callSuper(&PY_TYPE(QueryNodeException), (PyObject *) self, "getLocalizedMessage", args, 2);
            }

            static PyObject *t_QueryNodeException_getMessage(t_QueryNodeException *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getMessage());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(QueryNodeException), (PyObject *) self, "getMessage", args, 2);
            }

            static PyObject *t_QueryNodeException_getMessageObject(t_QueryNodeException *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_QueryNodeException_toString(t_QueryNodeException *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(QueryNodeException), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_QueryNodeException_get__localizedMessage(t_QueryNodeException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }

            static PyObject *t_QueryNodeException_get__message(t_QueryNodeException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessage());
              return j2p(value);
            }

            static PyObject *t_QueryNodeException_get__messageObject(t_QueryNodeException *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/NoChildOptimizationQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *NoChildOptimizationQueryNodeProcessor::class$ = NULL;
              jmethodID *NoChildOptimizationQueryNodeProcessor::mids$ = NULL;
              bool NoChildOptimizationQueryNodeProcessor::live$ = false;

              jclass NoChildOptimizationQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/NoChildOptimizationQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NoChildOptimizationQueryNodeProcessor::NoChildOptimizationQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NoChildOptimizationQueryNodeProcessor_init_(t_NoChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_NoChildOptimizationQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_NoChildOptimizationQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NoChildOptimizationQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NoChildOptimizationQueryNodeProcessor, t_NoChildOptimizationQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, NoChildOptimizationQueryNodeProcessor, t_NoChildOptimizationQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_NoChildOptimizationQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(NoChildOptimizationQueryNodeProcessor), module, "NoChildOptimizationQueryNodeProcessor", 0);
              }

              void t_NoChildOptimizationQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NoChildOptimizationQueryNodeProcessor).tp_dict, "class_", make_descriptor(NoChildOptimizationQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NoChildOptimizationQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_NoChildOptimizationQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NoChildOptimizationQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NoChildOptimizationQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NoChildOptimizationQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_NoChildOptimizationQueryNodeProcessor::wrap_Object(NoChildOptimizationQueryNodeProcessor(((t_NoChildOptimizationQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_NoChildOptimizationQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NoChildOptimizationQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NoChildOptimizationQueryNodeProcessor_init_(t_NoChildOptimizationQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                NoChildOptimizationQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = NoChildOptimizationQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *MatchAllDocsQueryBuilder::class$ = NULL;
            jmethodID *MatchAllDocsQueryBuilder::mids$ = NULL;
            bool MatchAllDocsQueryBuilder::live$ = false;

            jclass MatchAllDocsQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/MatchAllDocsQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MatchAllDocsQueryBuilder::MatchAllDocsQueryBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_MatchAllDocsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MatchAllDocsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MatchAllDocsQueryBuilder_init_(t_MatchAllDocsQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MatchAllDocsQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_MatchAllDocsQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MatchAllDocsQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MatchAllDocsQueryBuilder, t_MatchAllDocsQueryBuilder, ::java::lang::Object, MatchAllDocsQueryBuilder, t_MatchAllDocsQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_MatchAllDocsQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(MatchAllDocsQueryBuilder), module, "MatchAllDocsQueryBuilder", 0);
            }

            void t_MatchAllDocsQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryBuilder).tp_dict, "class_", make_descriptor(MatchAllDocsQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_MatchAllDocsQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MatchAllDocsQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MatchAllDocsQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MatchAllDocsQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_MatchAllDocsQueryBuilder::wrap_Object(MatchAllDocsQueryBuilder(((t_MatchAllDocsQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_MatchAllDocsQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MatchAllDocsQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MatchAllDocsQueryBuilder_init_(t_MatchAllDocsQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              MatchAllDocsQueryBuilder object((jobject) NULL);

              INT_CALL(object = MatchAllDocsQueryBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ProductFloatFunction.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ProductFloatFunction::class$ = NULL;
            jmethodID *ProductFloatFunction::mids$ = NULL;
            bool ProductFloatFunction::live$ = false;

            jclass ProductFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ProductFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ProductFloatFunction::ProductFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ProductFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ProductFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ProductFloatFunction_init_(t_ProductFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_ProductFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ProductFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ProductFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ProductFloatFunction, t_ProductFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, ProductFloatFunction, t_ProductFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_ProductFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ProductFloatFunction), module, "ProductFloatFunction", 0);
            }

            void t_ProductFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ProductFloatFunction).tp_dict, "class_", make_descriptor(ProductFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ProductFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_ProductFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ProductFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ProductFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ProductFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ProductFloatFunction::wrap_Object(ProductFloatFunction(((t_ProductFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ProductFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ProductFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ProductFloatFunction_init_(t_ProductFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              ProductFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = ProductFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TrimFilterFactory.h"
#include "org/apache/lucene/analysis/miscellaneous/TrimFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TrimFilterFactory::class$ = NULL;
          jmethodID *TrimFilterFactory::mids$ = NULL;
          bool TrimFilterFactory::live$ = false;

          jclass TrimFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TrimFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_59450f3a] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/TrimFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TrimFilterFactory::TrimFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::TrimFilter TrimFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::TrimFilter(env->callObjectMethod(this$, mids$[mid_create_59450f3a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TrimFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TrimFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TrimFilterFactory_init_(t_TrimFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TrimFilterFactory_create(t_TrimFilterFactory *self, PyObject *args);

          static PyMethodDef t_TrimFilterFactory__methods_[] = {
            DECLARE_METHOD(t_TrimFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TrimFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TrimFilterFactory, t_TrimFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, TrimFilterFactory, t_TrimFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_TrimFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(TrimFilterFactory), module, "TrimFilterFactory", 0);
          }

          void t_TrimFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TrimFilterFactory).tp_dict, "class_", make_descriptor(TrimFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TrimFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_TrimFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TrimFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TrimFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TrimFilterFactory::initializeClass, 1)))
              return NULL;
            return t_TrimFilterFactory::wrap_Object(TrimFilterFactory(((t_TrimFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_TrimFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TrimFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TrimFilterFactory_init_(t_TrimFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            TrimFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = TrimFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TrimFilterFactory_create(t_TrimFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::TrimFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_TrimFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(TrimFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Formatter::class$ = NULL;
          jmethodID *Formatter::mids$ = NULL;
          bool Formatter::live$ = false;

          jclass Formatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Formatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String Formatter::highlightTerm(const ::java::lang::String & a0, const ::org::apache::lucene::search::highlight::TokenGroup & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_highlightTerm_8838cc58], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Formatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Formatter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Formatter_highlightTerm(t_Formatter *self, PyObject *args);

          static PyMethodDef t_Formatter__methods_[] = {
            DECLARE_METHOD(t_Formatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Formatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Formatter, highlightTerm, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Formatter, t_Formatter, ::java::lang::Object, Formatter, abstract_init, 0, 0, 0, 0, 0);

          void t_Formatter::install(PyObject *module)
          {
            installType(&PY_TYPE(Formatter), module, "Formatter", 0);
          }

          void t_Formatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Formatter).tp_dict, "class_", make_descriptor(Formatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Formatter).tp_dict, "wrapfn_", make_descriptor(t_Formatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Formatter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Formatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Formatter::initializeClass, 1)))
              return NULL;
            return t_Formatter::wrap_Object(Formatter(((t_Formatter *) arg)->object.this$));
          }
          static PyObject *t_Formatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Formatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Formatter_highlightTerm(t_Formatter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::TokenGroup a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::search::highlight::TokenGroup::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.highlightTerm(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "highlightTerm", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemFilterFactory::class$ = NULL;
          jmethodID *LatvianStemFilterFactory::mids$ = NULL;
          bool LatvianStemFilterFactory::live$ = false;

          jclass LatvianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemFilterFactory::LatvianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LatvianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemFilterFactory_init_(t_LatvianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemFilterFactory_create(t_LatvianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_LatvianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LatvianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianStemFilterFactory, t_LatvianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LatvianStemFilterFactory, t_LatvianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LatvianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemFilterFactory), module, "LatvianStemFilterFactory", 0);
          }

          void t_LatvianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianStemFilterFactory).tp_dict, "class_", make_descriptor(LatvianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LatvianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatvianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LatvianStemFilterFactory::wrap_Object(LatvianStemFilterFactory(((t_LatvianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemFilterFactory_init_(t_LatvianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LatvianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LatvianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianStemFilterFactory_create(t_LatvianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LatvianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletionLookup.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/util/Set.h"
#include "java/lang/Object.h"
#include "java/util/List.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletionLookup::class$ = NULL;
            jmethodID *FSTCompletionLookup::mids$ = NULL;
            bool FSTCompletionLookup::live$ = false;

            jclass FSTCompletionLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletionLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_7fee6a80] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/suggest/fst/FSTCompletion;Z)V");
                mids$[mid_init$_b3a85a05] = env->getMethodID(cls, "<init>", "(IZ)V");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletionLookup::FSTCompletionLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            FSTCompletionLookup::FSTCompletionLookup(const ::org::apache::lucene::search::suggest::fst::FSTCompletion & a0, jboolean a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_7fee6a80, a0.this$, a1)) {}

            FSTCompletionLookup::FSTCompletionLookup(jint a0, jboolean a1) : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_b3a85a05, a0, a1)) {}

            void FSTCompletionLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object FSTCompletionLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong FSTCompletionLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean FSTCompletionLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List FSTCompletionLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong FSTCompletionLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean FSTCompletionLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletionLookup_init_(t_FSTCompletionLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletionLookup_build(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_get(t_FSTCompletionLookup *self, PyObject *arg);
            static PyObject *t_FSTCompletionLookup_getCount(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_load(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_lookup(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_ramBytesUsed(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_store(t_FSTCompletionLookup *self, PyObject *args);
            static PyObject *t_FSTCompletionLookup_get__count(t_FSTCompletionLookup *self, void *data);
            static PyGetSetDef t_FSTCompletionLookup__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletionLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletionLookup__methods_[] = {
              DECLARE_METHOD(t_FSTCompletionLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletionLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, get, METH_O),
              DECLARE_METHOD(t_FSTCompletionLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_FSTCompletionLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletionLookup, t_FSTCompletionLookup, ::org::apache::lucene::search::suggest::Lookup, FSTCompletionLookup, t_FSTCompletionLookup_init_, 0, 0, t_FSTCompletionLookup__fields_, 0, 0);

            void t_FSTCompletionLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletionLookup), module, "FSTCompletionLookup", 0);
            }

            void t_FSTCompletionLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletionLookup).tp_dict, "class_", make_descriptor(FSTCompletionLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletionLookup).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletionLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletionLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FSTCompletionLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletionLookup::initializeClass, 1)))
                return NULL;
              return t_FSTCompletionLookup::wrap_Object(FSTCompletionLookup(((t_FSTCompletionLookup *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletionLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletionLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletionLookup_init_(t_FSTCompletionLookup *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  FSTCompletionLookup object((jobject) NULL);

                  INT_CALL(object = FSTCompletionLookup());
                  self->object = object;
                  break;
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::search::suggest::fst::FSTCompletion a0((jobject) NULL);
                  jboolean a1;
                  FSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "kZ", ::org::apache::lucene::search::suggest::fst::FSTCompletion::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = FSTCompletionLookup(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                {
                  jint a0;
                  jboolean a1;
                  FSTCompletionLookup object((jobject) NULL);

                  if (!parseArgs(args, "IZ", &a0, &a1))
                  {
                    INT_CALL(object = FSTCompletionLookup(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletionLookup_build(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_get(t_FSTCompletionLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletionLookup_getCount(t_FSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_load(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_lookup(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_ramBytesUsed(t_FSTCompletionLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_store(t_FSTCompletionLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FSTCompletionLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_FSTCompletionLookup_get__count(t_FSTCompletionLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/AndQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *AndQuery::class$ = NULL;
            jmethodID *AndQuery::mids$ = NULL;
            bool AndQuery::live$ = false;

            jclass AndQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/AndQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_4136185e] = env->getMethodID(cls, "<init>", "(Ljava/util/List;ZLjava/lang/String;)V");
                mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30] = env->getMethodID(cls, "makeLuceneQueryFieldNoBoost", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/BasicQueryFactory;)Lorg/apache/lucene/search/Query;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            AndQuery::AndQuery(const ::java::util::List & a0, jboolean a1, const ::java::lang::String & a2) : ::org::apache::lucene::queryparser::surround::query::ComposedQuery(env->newObject(initializeClass, &mids$, mid_init$_4136185e, a0.this$, a1, a2.this$)) {}

            ::org::apache::lucene::search::Query AndQuery::makeLuceneQueryFieldNoBoost(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory & a1) const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_makeLuceneQueryFieldNoBoost_1aaeee30], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_AndQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_AndQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_AndQuery_init_(t_AndQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_AndQuery_makeLuceneQueryFieldNoBoost(t_AndQuery *self, PyObject *args);

            static PyMethodDef t_AndQuery__methods_[] = {
              DECLARE_METHOD(t_AndQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AndQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_AndQuery, makeLuceneQueryFieldNoBoost, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(AndQuery, t_AndQuery, ::org::apache::lucene::queryparser::surround::query::ComposedQuery, AndQuery, t_AndQuery_init_, 0, 0, 0, 0, 0);

            void t_AndQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(AndQuery), module, "AndQuery", 0);
            }

            void t_AndQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(AndQuery).tp_dict, "class_", make_descriptor(AndQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(AndQuery).tp_dict, "wrapfn_", make_descriptor(t_AndQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(AndQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_AndQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, AndQuery::initializeClass, 1)))
                return NULL;
              return t_AndQuery::wrap_Object(AndQuery(((t_AndQuery *) arg)->object.this$));
            }
            static PyObject *t_AndQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, AndQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_AndQuery_init_(t_AndQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              jboolean a1;
              ::java::lang::String a2((jobject) NULL);
              AndQuery object((jobject) NULL);

              if (!parseArgs(args, "KZs", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
              {
                INT_CALL(object = AndQuery(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_AndQuery_makeLuceneQueryFieldNoBoost(t_AndQuery *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory a1((jobject) NULL);
              ::org::apache::lucene::search::Query result((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::surround::query::BasicQueryFactory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.makeLuceneQueryFieldNoBoost(a0, a1));
                return ::org::apache::lucene::search::t_Query::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(AndQuery), (PyObject *) self, "makeLuceneQueryFieldNoBoost", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractAppendingLongBuffer.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/packed/AbstractAppendingLongBuffer$Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractAppendingLongBuffer::class$ = NULL;
          jmethodID *AbstractAppendingLongBuffer::mids$ = NULL;
          bool AbstractAppendingLongBuffer::live$ = false;

          jclass AbstractAppendingLongBuffer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractAppendingLongBuffer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_freeze_54c6a166] = env->getMethodID(cls, "freeze", "()V");
              mids$[mid_get_0ee6df33] = env->getMethodID(cls, "get", "(J)J");
              mids$[mid_get_f0f66bc1] = env->getMethodID(cls, "get", "(J[JII)I");
              mids$[mid_iterator_583a9cb3] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/packed/AbstractAppendingLongBuffer$Iterator;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void AbstractAppendingLongBuffer::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          void AbstractAppendingLongBuffer::freeze() const
          {
            env->callVoidMethod(this$, mids$[mid_freeze_54c6a166]);
          }

          jlong AbstractAppendingLongBuffer::get(jlong a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_0ee6df33], a0);
          }

          jint AbstractAppendingLongBuffer::get(jlong a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_f0f66bc1], a0, a1.this$, a2, a3);
          }

          ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer$Iterator AbstractAppendingLongBuffer::iterator() const
          {
            return ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer$Iterator(env->callObjectMethod(this$, mids$[mid_iterator_583a9cb3]));
          }

          jlong AbstractAppendingLongBuffer::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jlong AbstractAppendingLongBuffer::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractAppendingLongBuffer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer_add(t_AbstractAppendingLongBuffer *self, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer_freeze(t_AbstractAppendingLongBuffer *self);
          static PyObject *t_AbstractAppendingLongBuffer_get(t_AbstractAppendingLongBuffer *self, PyObject *args);
          static PyObject *t_AbstractAppendingLongBuffer_iterator(t_AbstractAppendingLongBuffer *self);
          static PyObject *t_AbstractAppendingLongBuffer_ramBytesUsed(t_AbstractAppendingLongBuffer *self);
          static PyObject *t_AbstractAppendingLongBuffer_size(t_AbstractAppendingLongBuffer *self);

          static PyMethodDef t_AbstractAppendingLongBuffer__methods_[] = {
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, add, METH_O),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, freeze, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, get, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, iterator, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAppendingLongBuffer, t_AbstractAppendingLongBuffer, ::org::apache::lucene::util::LongValues, AbstractAppendingLongBuffer, abstract_init, 0, 0, 0, 0, 0);

          void t_AbstractAppendingLongBuffer::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAppendingLongBuffer), module, "AbstractAppendingLongBuffer", 0);
          }

          void t_AbstractAppendingLongBuffer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer).tp_dict, "class_", make_descriptor(AbstractAppendingLongBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer).tp_dict, "wrapfn_", make_descriptor(t_AbstractAppendingLongBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAppendingLongBuffer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAppendingLongBuffer::initializeClass, 1)))
              return NULL;
            return t_AbstractAppendingLongBuffer::wrap_Object(AbstractAppendingLongBuffer(((t_AbstractAppendingLongBuffer *) arg)->object.this$));
          }
          static PyObject *t_AbstractAppendingLongBuffer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAppendingLongBuffer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAppendingLongBuffer_add(t_AbstractAppendingLongBuffer *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_AbstractAppendingLongBuffer_freeze(t_AbstractAppendingLongBuffer *self)
          {
            OBJ_CALL(self->object.freeze());
            Py_RETURN_NONE;
          }

          static PyObject *t_AbstractAppendingLongBuffer_get(t_AbstractAppendingLongBuffer *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jlong a0;
                jlong result;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 4:
              {
                jlong a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "J[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(AbstractAppendingLongBuffer), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_AbstractAppendingLongBuffer_iterator(t_AbstractAppendingLongBuffer *self)
          {
            ::org::apache::lucene::util::packed::AbstractAppendingLongBuffer$Iterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::util::packed::t_AbstractAppendingLongBuffer$Iterator::wrap_Object(result);
          }

          static PyObject *t_AbstractAppendingLongBuffer_ramBytesUsed(t_AbstractAppendingLongBuffer *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_AbstractAppendingLongBuffer_size(t_AbstractAppendingLongBuffer *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.size());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsFormat.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40StoredFieldsFormat::class$ = NULL;
          jmethodID *Lucene40StoredFieldsFormat::mids$ = NULL;
          bool Lucene40StoredFieldsFormat::live$ = false;

          jclass Lucene40StoredFieldsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsReader_bbe26ec4] = env->getMethodID(cls, "fieldsReader", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_fieldsWriter_c73cceda] = env->getMethodID(cls, "fieldsWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/codecs/StoredFieldsWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40StoredFieldsFormat::Lucene40StoredFieldsFormat() : ::org::apache::lucene::codecs::StoredFieldsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::StoredFieldsReader Lucene40StoredFieldsFormat::fieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_fieldsReader_bbe26ec4], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::codecs::StoredFieldsWriter Lucene40StoredFieldsFormat::fieldsWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::codecs::StoredFieldsWriter(env->callObjectMethod(this$, mids$[mid_fieldsWriter_c73cceda], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40StoredFieldsFormat_init_(t_Lucene40StoredFieldsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40StoredFieldsFormat_fieldsReader(t_Lucene40StoredFieldsFormat *self, PyObject *args);
          static PyObject *t_Lucene40StoredFieldsFormat_fieldsWriter(t_Lucene40StoredFieldsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40StoredFieldsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, fieldsReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40StoredFieldsFormat, fieldsWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40StoredFieldsFormat, t_Lucene40StoredFieldsFormat, ::org::apache::lucene::codecs::StoredFieldsFormat, Lucene40StoredFieldsFormat, t_Lucene40StoredFieldsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40StoredFieldsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40StoredFieldsFormat), module, "Lucene40StoredFieldsFormat", 0);
          }

          void t_Lucene40StoredFieldsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsFormat).tp_dict, "class_", make_descriptor(Lucene40StoredFieldsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40StoredFieldsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40StoredFieldsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40StoredFieldsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40StoredFieldsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40StoredFieldsFormat::wrap_Object(Lucene40StoredFieldsFormat(((t_Lucene40StoredFieldsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40StoredFieldsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40StoredFieldsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40StoredFieldsFormat_init_(t_Lucene40StoredFieldsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40StoredFieldsFormat object((jobject) NULL);

            INT_CALL(object = Lucene40StoredFieldsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40StoredFieldsFormat_fieldsReader(t_Lucene40StoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.fieldsReader(a0, a1, a2, a3));
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsFormat), (PyObject *) self, "fieldsReader", args, 2);
          }

          static PyObject *t_Lucene40StoredFieldsFormat_fieldsWriter(t_Lucene40StoredFieldsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::codecs::StoredFieldsWriter result((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.fieldsWriter(a0, a1, a2));
              return ::org::apache::lucene::codecs::t_StoredFieldsWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40StoredFieldsFormat), (PyObject *) self, "fieldsWriter", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemFilterFactory::class$ = NULL;
          jmethodID *IndonesianStemFilterFactory::mids$ = NULL;
          bool IndonesianStemFilterFactory::live$ = false;

          jclass IndonesianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemFilterFactory::IndonesianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IndonesianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemFilterFactory_init_(t_IndonesianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemFilterFactory_create(t_IndonesianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_IndonesianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianStemFilterFactory, t_IndonesianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, IndonesianStemFilterFactory, t_IndonesianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_IndonesianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemFilterFactory), module, "IndonesianStemFilterFactory", 0);
          }

          void t_IndonesianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilterFactory).tp_dict, "class_", make_descriptor(IndonesianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_IndonesianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndonesianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemFilterFactory::wrap_Object(IndonesianStemFilterFactory(((t_IndonesianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemFilterFactory_init_(t_IndonesianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IndonesianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IndonesianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianStemFilterFactory_create(t_IndonesianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IndonesianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordFrequencyComparator.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordFrequencyComparator::class$ = NULL;
          jmethodID *SuggestWordFrequencyComparator::mids$ = NULL;
          bool SuggestWordFrequencyComparator::live$ = false;

          jclass SuggestWordFrequencyComparator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordFrequencyComparator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compare_2e903bf1] = env->getMethodID(cls, "compare", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordFrequencyComparator::SuggestWordFrequencyComparator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SuggestWordFrequencyComparator::compare(const ::org::apache::lucene::search::spell::SuggestWord & a0, const ::org::apache::lucene::search::spell::SuggestWord & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_compare_2e903bf1], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordFrequencyComparator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordFrequencyComparator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SuggestWordFrequencyComparator_init_(t_SuggestWordFrequencyComparator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordFrequencyComparator_compare(t_SuggestWordFrequencyComparator *self, PyObject *args);

          static PyMethodDef t_SuggestWordFrequencyComparator__methods_[] = {
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordFrequencyComparator, compare, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWordFrequencyComparator, t_SuggestWordFrequencyComparator, ::java::lang::Object, SuggestWordFrequencyComparator, t_SuggestWordFrequencyComparator_init_, 0, 0, 0, 0, 0);

          void t_SuggestWordFrequencyComparator::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordFrequencyComparator), module, "SuggestWordFrequencyComparator", 0);
          }

          void t_SuggestWordFrequencyComparator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWordFrequencyComparator).tp_dict, "class_", make_descriptor(SuggestWordFrequencyComparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWordFrequencyComparator).tp_dict, "wrapfn_", make_descriptor(t_SuggestWordFrequencyComparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWordFrequencyComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SuggestWordFrequencyComparator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordFrequencyComparator::initializeClass, 1)))
              return NULL;
            return t_SuggestWordFrequencyComparator::wrap_Object(SuggestWordFrequencyComparator(((t_SuggestWordFrequencyComparator *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordFrequencyComparator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordFrequencyComparator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SuggestWordFrequencyComparator_init_(t_SuggestWordFrequencyComparator *self, PyObject *args, PyObject *kwds)
          {
            SuggestWordFrequencyComparator object((jobject) NULL);

            INT_CALL(object = SuggestWordFrequencyComparator());
            self->object = object;

            return 0;
          }

          static PyObject *t_SuggestWordFrequencyComparator_compare(t_SuggestWordFrequencyComparator *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestWord a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.compare(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParserTokenManager::class$ = NULL;
            jmethodID *QueryParserTokenManager::mids$ = NULL;
            jfieldID *QueryParserTokenManager::fids$ = NULL;
            bool QueryParserTokenManager::live$ = false;
            JArray< jint > *QueryParserTokenManager::jjnewLexState = NULL;
            JArray< ::java::lang::String > *QueryParserTokenManager::jjstrLiteralImages = NULL;
            JArray< ::java::lang::String > *QueryParserTokenManager::lexStateNames = NULL;

            jclass QueryParserTokenManager::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5bfa6473] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_init$_5ba65d1b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;I)V");
                mids$[mid_ReInit_5bfa6473] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_ReInit_5ba65d1b] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;I)V");
                mids$[mid_SwitchTo_39c7bd3c] = env->getMethodID(cls, "SwitchTo", "(I)V");
                mids$[mid_getNextToken_353aefd6] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_setDebugStream_1b7c898b] = env->getMethodID(cls, "setDebugStream", "(Ljava/io/PrintStream;)V");
                mids$[mid_jjFillToken_353aefd6] = env->getMethodID(cls, "jjFillToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_debugStream] = env->getFieldID(cls, "debugStream", "Ljava/io/PrintStream;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                jjnewLexState = new JArray< jint >(env->getStaticObjectField(cls, "jjnewLexState", "[I"));
                jjstrLiteralImages = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "jjstrLiteralImages", "[Ljava/lang/String;"));
                lexStateNames = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "lexStateNames", "[Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5bfa6473, a0.this$)) {}

            QueryParserTokenManager::QueryParserTokenManager(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5ba65d1b, a0.this$, a1)) {}

            void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_5bfa6473], a0.this$);
            }

            void QueryParserTokenManager::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0, jint a1) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_5ba65d1b], a0.this$, a1);
            }

            void QueryParserTokenManager::SwitchTo(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_SwitchTo_39c7bd3c], a0);
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParserTokenManager::getNextToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_353aefd6]));
            }

            void QueryParserTokenManager::setDebugStream(const ::java::io::PrintStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setDebugStream_1b7c898b], a0.this$);
            }

            ::java::io::PrintStream QueryParserTokenManager::_get_debugStream() const
            {
              return ::java::io::PrintStream(env->getObjectField(this$, fids$[fid_debugStream]));
            }

            void QueryParserTokenManager::_set_debugStream(const ::java::io::PrintStream & a0) const
            {
              env->setObjectField(this$, fids$[fid_debugStream], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args);
            static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg);
            static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self);
            static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg);

            static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data);
            static PyGetSetDef t_QueryParserTokenManager__fields_[] = {
              DECLARE_SET_FIELD(t_QueryParserTokenManager, debugStream),
              DECLARE_GET_FIELD(t_QueryParserTokenManager, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParserTokenManager__methods_[] = {
              DECLARE_METHOD(t_QueryParserTokenManager, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserTokenManager, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserTokenManager, ReInit, METH_VARARGS),
              DECLARE_METHOD(t_QueryParserTokenManager, SwitchTo, METH_O),
              DECLARE_METHOD(t_QueryParserTokenManager, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserTokenManager, setDebugStream, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserTokenManager, t_QueryParserTokenManager, ::java::lang::Object, QueryParserTokenManager, t_QueryParserTokenManager_init_, 0, 0, t_QueryParserTokenManager__fields_, 0, 0);

            void t_QueryParserTokenManager::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserTokenManager), module, "QueryParserTokenManager", 0);
            }

            void t_QueryParserTokenManager::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "class_", make_descriptor(QueryParserTokenManager::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "wrapfn_", make_descriptor(t_QueryParserTokenManager::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(QueryParserTokenManager::initializeClass);
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjnewLexState", make_descriptor(QueryParserTokenManager::jjnewLexState->wrap()));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "jjstrLiteralImages", make_descriptor(JArray<jstring>(QueryParserTokenManager::jjstrLiteralImages->this$).wrap()));
              PyDict_SetItemString(PY_TYPE(QueryParserTokenManager).tp_dict, "lexStateNames", make_descriptor(JArray<jstring>(QueryParserTokenManager::lexStateNames->this$).wrap()));
            }

            static PyObject *t_QueryParserTokenManager_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserTokenManager::initializeClass, 1)))
                return NULL;
              return t_QueryParserTokenManager::wrap_Object(QueryParserTokenManager(((t_QueryParserTokenManager *) arg)->object.this$));
            }
            static PyObject *t_QueryParserTokenManager_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserTokenManager::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserTokenManager_init_(t_QueryParserTokenManager *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  QueryParserTokenManager object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParserTokenManager(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  jint a1;
                  QueryParserTokenManager object((jobject) NULL);

                  if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryParserTokenManager(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParserTokenManager_ReInit(t_QueryParserTokenManager *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
                break;
               case 2:
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  jint a1;

                  if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0, &a1))
                  {
                    OBJ_CALL(self->object.ReInit(a0, a1));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "ReInit", args);
              return NULL;
            }

            static PyObject *t_QueryParserTokenManager_SwitchTo(t_QueryParserTokenManager *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.SwitchTo(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "SwitchTo", arg);
              return NULL;
            }

            static PyObject *t_QueryParserTokenManager_getNextToken(t_QueryParserTokenManager *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);
              OBJ_CALL(result = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
            }

            static PyObject *t_QueryParserTokenManager_setDebugStream(t_QueryParserTokenManager *self, PyObject *arg)
            {
              ::java::io::PrintStream a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setDebugStream(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setDebugStream", arg);
              return NULL;
            }

            static int t_QueryParserTokenManager_set__debugStream(t_QueryParserTokenManager *self, PyObject *arg, void *data)
            {
              {
                ::java::io::PrintStream value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
                {
                  INT_CALL(self->object.setDebugStream(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "debugStream", arg);
              return -1;
            }

            static PyObject *t_QueryParserTokenManager_get__nextToken(t_QueryParserTokenManager *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/CommonTermsQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "org/apache/lucene/index/TermContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *CommonTermsQuery::class$ = NULL;
        jmethodID *CommonTermsQuery::mids$ = NULL;
        bool CommonTermsQuery::live$ = false;

        jclass CommonTermsQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/CommonTermsQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_689325ef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/search/BooleanClause$Occur;F)V");
            mids$[mid_init$_5975764c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/search/BooleanClause$Occur;FZ)V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_collectTermContext_ca4f0fd0] = env->getMethodID(cls, "collectTermContext", "(Lorg/apache/lucene/index/IndexReader;Ljava/util/List;[Lorg/apache/lucene/index/TermContext;[Lorg/apache/lucene/index/Term;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getHighFreqMinimumNumberShouldMatch_54c6a176] = env->getMethodID(cls, "getHighFreqMinimumNumberShouldMatch", "()F");
            mids$[mid_getLowFreqMinimumNumberShouldMatch_54c6a176] = env->getMethodID(cls, "getLowFreqMinimumNumberShouldMatch", "()F");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isCoordDisabled_54c6a16a] = env->getMethodID(cls, "isCoordDisabled", "()Z");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setHighFreqMinimumNumberShouldMatch_06298cab] = env->getMethodID(cls, "setHighFreqMinimumNumberShouldMatch", "(F)V");
            mids$[mid_setLowFreqMinimumNumberShouldMatch_06298cab] = env->getMethodID(cls, "setLowFreqMinimumNumberShouldMatch", "(F)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_newTermQuery_516e731e] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;)Lorg/apache/lucene/search/Query;");
            mids$[mid_calcLowFreqMinimumNumberShouldMatch_39c7bd23] = env->getMethodID(cls, "calcLowFreqMinimumNumberShouldMatch", "(I)I");
            mids$[mid_calcHighFreqMinimumNumberShouldMatch_39c7bd23] = env->getMethodID(cls, "calcHighFreqMinimumNumberShouldMatch", "(I)I");
            mids$[mid_buildQuery_4123263c] = env->getMethodID(cls, "buildQuery", "(I[Lorg/apache/lucene/index/TermContext;[Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CommonTermsQuery::CommonTermsQuery(const ::org::apache::lucene::search::BooleanClause$Occur & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1, jfloat a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_689325ef, a0.this$, a1.this$, a2)) {}

        CommonTermsQuery::CommonTermsQuery(const ::org::apache::lucene::search::BooleanClause$Occur & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1, jfloat a2, jboolean a3) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_5975764c, a0.this$, a1.this$, a2, a3)) {}

        void CommonTermsQuery::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }

        void CommonTermsQuery::collectTermContext(const ::org::apache::lucene::index::IndexReader & a0, const ::java::util::List & a1, const JArray< ::org::apache::lucene::index::TermContext > & a2, const JArray< ::org::apache::lucene::index::Term > & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_collectTermContext_ca4f0fd0], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        jboolean CommonTermsQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void CommonTermsQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        jfloat CommonTermsQuery::getHighFreqMinimumNumberShouldMatch() const
        {
          return env->callFloatMethod(this$, mids$[mid_getHighFreqMinimumNumberShouldMatch_54c6a176]);
        }

        jfloat CommonTermsQuery::getLowFreqMinimumNumberShouldMatch() const
        {
          return env->callFloatMethod(this$, mids$[mid_getLowFreqMinimumNumberShouldMatch_54c6a176]);
        }

        jint CommonTermsQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CommonTermsQuery::isCoordDisabled() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCoordDisabled_54c6a16a]);
        }

        ::org::apache::lucene::search::Query CommonTermsQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void CommonTermsQuery::setHighFreqMinimumNumberShouldMatch(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setHighFreqMinimumNumberShouldMatch_06298cab], a0);
        }

        void CommonTermsQuery::setLowFreqMinimumNumberShouldMatch(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLowFreqMinimumNumberShouldMatch_06298cab], a0);
        }

        ::java::lang::String CommonTermsQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_CommonTermsQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommonTermsQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CommonTermsQuery_init_(t_CommonTermsQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CommonTermsQuery_add(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_collectTermContext(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_equals(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_extractTerms(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_getHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_getLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_hashCode(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_isCoordDisabled(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_rewrite(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_setHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_setLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_toString(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_get__coordDisabled(t_CommonTermsQuery *self, void *data);
        static PyObject *t_CommonTermsQuery_get__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data);
        static int t_CommonTermsQuery_set__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data);
        static PyObject *t_CommonTermsQuery_get__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data);
        static int t_CommonTermsQuery_set__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_CommonTermsQuery__fields_[] = {
          DECLARE_GET_FIELD(t_CommonTermsQuery, coordDisabled),
          DECLARE_GETSET_FIELD(t_CommonTermsQuery, highFreqMinimumNumberShouldMatch),
          DECLARE_GETSET_FIELD(t_CommonTermsQuery, lowFreqMinimumNumberShouldMatch),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CommonTermsQuery__methods_[] = {
          DECLARE_METHOD(t_CommonTermsQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommonTermsQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommonTermsQuery, add, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, collectTermContext, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getHighFreqMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getLowFreqMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, isCoordDisabled, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, setHighFreqMinimumNumberShouldMatch, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, setLowFreqMinimumNumberShouldMatch, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CommonTermsQuery, t_CommonTermsQuery, ::org::apache::lucene::search::Query, CommonTermsQuery, t_CommonTermsQuery_init_, 0, 0, t_CommonTermsQuery__fields_, 0, 0);

        void t_CommonTermsQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(CommonTermsQuery), module, "CommonTermsQuery", 0);
        }

        void t_CommonTermsQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CommonTermsQuery).tp_dict, "class_", make_descriptor(CommonTermsQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CommonTermsQuery).tp_dict, "wrapfn_", make_descriptor(t_CommonTermsQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CommonTermsQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CommonTermsQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CommonTermsQuery::initializeClass, 1)))
            return NULL;
          return t_CommonTermsQuery::wrap_Object(CommonTermsQuery(((t_CommonTermsQuery *) arg)->object.this$));
        }
        static PyObject *t_CommonTermsQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CommonTermsQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CommonTermsQuery_init_(t_CommonTermsQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;
              jfloat a2;
              CommonTermsQuery object((jobject) NULL);

              if (!parseArgs(args, "KKF", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a2))
              {
                INT_CALL(object = CommonTermsQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;
              jfloat a2;
              jboolean a3;
              CommonTermsQuery object((jobject) NULL);

              if (!parseArgs(args, "KKFZ", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a2, &a3))
              {
                INT_CALL(object = CommonTermsQuery(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CommonTermsQuery_add(t_CommonTermsQuery *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_collectTermContext(t_CommonTermsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::util::List a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::index::TermContext > a2((jobject) NULL);
          JArray< ::org::apache::lucene::index::Term > a3((jobject) NULL);

          if (!parseArgs(args, "kK[k[k", ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::List::initializeClass, ::org::apache::lucene::index::TermContext::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &a3))
          {
            OBJ_CALL(self->object.collectTermContext(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "collectTermContext", args);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_equals(t_CommonTermsQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CommonTermsQuery_extractTerms(t_CommonTermsQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_CommonTermsQuery_getHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getHighFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_CommonTermsQuery_getLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getLowFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_CommonTermsQuery_hashCode(t_CommonTermsQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CommonTermsQuery_isCoordDisabled(t_CommonTermsQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCoordDisabled());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CommonTermsQuery_rewrite(t_CommonTermsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_CommonTermsQuery_setHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setHighFreqMinimumNumberShouldMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setHighFreqMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_setLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setLowFreqMinimumNumberShouldMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLowFreqMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_toString(t_CommonTermsQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CommonTermsQuery_get__coordDisabled(t_CommonTermsQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCoordDisabled());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_CommonTermsQuery_get__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getHighFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CommonTermsQuery_set__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setHighFreqMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "highFreqMinimumNumberShouldMatch", arg);
          return -1;
        }

        static PyObject *t_CommonTermsQuery_get__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getLowFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CommonTermsQuery_set__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setLowFreqMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lowFreqMinimumNumberShouldMatch", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexCommit::class$ = NULL;
        jmethodID *IndexCommit::mids$ = NULL;
        bool IndexCommit::live$ = false;

        jclass IndexCommit::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexCommit");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compareTo_fecc65cc] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/index/IndexCommit;)I");
            mids$[mid_delete_54c6a166] = env->getMethodID(cls, "delete", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getFileNames_2d2d7de4] = env->getMethodID(cls, "getFileNames", "()Ljava/util/Collection;");
            mids$[mid_getGeneration_54c6a17a] = env->getMethodID(cls, "getGeneration", "()J");
            mids$[mid_getSegmentCount_54c6a179] = env->getMethodID(cls, "getSegmentCount", "()I");
            mids$[mid_getSegmentsFileName_14c7b5c5] = env->getMethodID(cls, "getSegmentsFileName", "()Ljava/lang/String;");
            mids$[mid_getUserData_db60befd] = env->getMethodID(cls, "getUserData", "()Ljava/util/Map;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isDeleted_54c6a16a] = env->getMethodID(cls, "isDeleted", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint IndexCommit::compareTo(const IndexCommit & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_fecc65cc], a0.this$);
        }

        void IndexCommit::delete$() const
        {
          env->callVoidMethod(this$, mids$[mid_delete_54c6a166]);
        }

        jboolean IndexCommit::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::store::Directory IndexCommit::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }

        ::java::util::Collection IndexCommit::getFileNames() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getFileNames_2d2d7de4]));
        }

        jlong IndexCommit::getGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getGeneration_54c6a17a]);
        }

        jint IndexCommit::getSegmentCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getSegmentCount_54c6a179]);
        }

        ::java::lang::String IndexCommit::getSegmentsFileName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentsFileName_14c7b5c5]));
        }

        ::java::util::Map IndexCommit::getUserData() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getUserData_db60befd]));
        }

        jint IndexCommit::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean IndexCommit::isDeleted() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isDeleted_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexCommit_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexCommit_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexCommit_compareTo(t_IndexCommit *self, PyObject *arg);
        static PyObject *t_IndexCommit_delete(t_IndexCommit *self);
        static PyObject *t_IndexCommit_equals(t_IndexCommit *self, PyObject *args);
        static PyObject *t_IndexCommit_getDirectory(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getFileNames(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getGeneration(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getSegmentCount(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getSegmentsFileName(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getUserData(t_IndexCommit *self);
        static PyObject *t_IndexCommit_hashCode(t_IndexCommit *self, PyObject *args);
        static PyObject *t_IndexCommit_isDeleted(t_IndexCommit *self);
        static PyObject *t_IndexCommit_get__deleted(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__directory(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__fileNames(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__generation(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__segmentCount(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__segmentsFileName(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__userData(t_IndexCommit *self, void *data);
        static PyGetSetDef t_IndexCommit__fields_[] = {
          DECLARE_GET_FIELD(t_IndexCommit, deleted),
          DECLARE_GET_FIELD(t_IndexCommit, directory),
          DECLARE_GET_FIELD(t_IndexCommit, fileNames),
          DECLARE_GET_FIELD(t_IndexCommit, generation),
          DECLARE_GET_FIELD(t_IndexCommit, segmentCount),
          DECLARE_GET_FIELD(t_IndexCommit, segmentsFileName),
          DECLARE_GET_FIELD(t_IndexCommit, userData),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexCommit__methods_[] = {
          DECLARE_METHOD(t_IndexCommit, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexCommit, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexCommit, compareTo, METH_O),
          DECLARE_METHOD(t_IndexCommit, delete, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, equals, METH_VARARGS),
          DECLARE_METHOD(t_IndexCommit, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getFileNames, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getGeneration, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getSegmentCount, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getSegmentsFileName, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getUserData, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IndexCommit, isDeleted, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexCommit, t_IndexCommit, ::java::lang::Object, IndexCommit, abstract_init, 0, 0, t_IndexCommit__fields_, 0, 0);

        void t_IndexCommit::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexCommit), module, "IndexCommit", 0);
        }

        void t_IndexCommit::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexCommit).tp_dict, "class_", make_descriptor(IndexCommit::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexCommit).tp_dict, "wrapfn_", make_descriptor(t_IndexCommit::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexCommit).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexCommit_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexCommit::initializeClass, 1)))
            return NULL;
          return t_IndexCommit::wrap_Object(IndexCommit(((t_IndexCommit *) arg)->object.this$));
        }
        static PyObject *t_IndexCommit_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexCommit::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexCommit_compareTo(t_IndexCommit *self, PyObject *arg)
        {
          IndexCommit a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_IndexCommit_delete(t_IndexCommit *self)
        {
          OBJ_CALL(self->object.delete$());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexCommit_equals(t_IndexCommit *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IndexCommit), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IndexCommit_getDirectory(t_IndexCommit *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_IndexCommit_getFileNames(t_IndexCommit *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getFileNames());
          return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexCommit_getGeneration(t_IndexCommit *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexCommit_getSegmentCount(t_IndexCommit *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSegmentCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexCommit_getSegmentsFileName(t_IndexCommit *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentsFileName());
          return j2p(result);
        }

        static PyObject *t_IndexCommit_getUserData(t_IndexCommit *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexCommit_hashCode(t_IndexCommit *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexCommit), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IndexCommit_isDeleted(t_IndexCommit *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isDeleted());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexCommit_get__deleted(t_IndexCommit *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isDeleted());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_IndexCommit_get__directory(t_IndexCommit *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_IndexCommit_get__fileNames(t_IndexCommit *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getFileNames());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_IndexCommit_get__generation(t_IndexCommit *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_IndexCommit_get__segmentCount(t_IndexCommit *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSegmentCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_IndexCommit_get__segmentsFileName(t_IndexCommit *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentsFileName());
          return j2p(value);
        }

        static PyObject *t_IndexCommit_get__userData(t_IndexCommit *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanAnalyzer::class$ = NULL;
          jmethodID *GermanAnalyzer::mids$ = NULL;
          bool GermanAnalyzer::live$ = false;
          ::java::lang::String *GermanAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass GermanAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          GermanAnalyzer::GermanAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet GermanAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanAnalyzer_init_(t_GermanAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_GermanAnalyzer_get__defaultStopSet(t_GermanAnalyzer *self, void *data);
          static PyGetSetDef t_GermanAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_GermanAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GermanAnalyzer__methods_[] = {
            DECLARE_METHOD(t_GermanAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanAnalyzer, t_GermanAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, GermanAnalyzer, t_GermanAnalyzer_init_, 0, 0, t_GermanAnalyzer__fields_, 0, 0);

          void t_GermanAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanAnalyzer), module, "GermanAnalyzer", 0);
          }

          void t_GermanAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "class_", make_descriptor(GermanAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_GermanAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(GermanAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(GermanAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*GermanAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_GermanAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanAnalyzer::initializeClass, 1)))
              return NULL;
            return t_GermanAnalyzer::wrap_Object(GermanAnalyzer(((t_GermanAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_GermanAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanAnalyzer_init_(t_GermanAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                GermanAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = GermanAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::de::GermanAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_GermanAnalyzer_get__defaultStopSet(t_GermanAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/AtomicReader$CoreClosedListener.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/codecs/TermVectorsReader.h"
#include "org/apache/lucene/codecs/StoredFieldsReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentReader::class$ = NULL;
        jmethodID *SegmentReader::mids$ = NULL;
        bool SegmentReader::live$ = false;

        jclass SegmentReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_20f5bc6a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentCommitInfo;ILorg/apache/lucene/store/IOContext;)V");
            mids$[mid_addCoreClosedListener_cbc2818f] = env->getMethodID(cls, "addCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_directory_1f3934bb] = env->getMethodID(cls, "directory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_fields_77db581d] = env->getMethodID(cls, "fields", "()Lorg/apache/lucene/index/Fields;");
            mids$[mid_getBinaryDocValues_ecab96be] = env->getMethodID(cls, "getBinaryDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getCombinedCoreAndDeletesKey_846352c3] = env->getMethodID(cls, "getCombinedCoreAndDeletesKey", "()Ljava/lang/Object;");
            mids$[mid_getCoreCacheKey_846352c3] = env->getMethodID(cls, "getCoreCacheKey", "()Ljava/lang/Object;");
            mids$[mid_getDocsWithField_e1c6a7db] = env->getMethodID(cls, "getDocsWithField", "(Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getFieldInfos_9ba20825] = env->getMethodID(cls, "getFieldInfos", "()Lorg/apache/lucene/index/FieldInfos;");
            mids$[mid_getFieldsReader_ef585f0d] = env->getMethodID(cls, "getFieldsReader", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
            mids$[mid_getLiveDocs_03c2457d] = env->getMethodID(cls, "getLiveDocs", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNormValues_d2b19f49] = env->getMethodID(cls, "getNormValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getNumericDocValues_d2b19f49] = env->getMethodID(cls, "getNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSegmentInfo_5df298a9] = env->getMethodID(cls, "getSegmentInfo", "()Lorg/apache/lucene/index/SegmentCommitInfo;");
            mids$[mid_getSegmentName_14c7b5c5] = env->getMethodID(cls, "getSegmentName", "()Ljava/lang/String;");
            mids$[mid_getSortedDocValues_7b8b1a0a] = env->getMethodID(cls, "getSortedDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumericDocValues_37cd1812] = env->getMethodID(cls, "getSortedNumericDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSetDocValues_43e0e807] = env->getMethodID(cls, "getSortedSetDocValues", "(Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getTermInfosIndexDivisor_54c6a179] = env->getMethodID(cls, "getTermInfosIndexDivisor", "()I");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_getTermVectorsReader_475a2624] = env->getMethodID(cls, "getTermVectorsReader", "()Lorg/apache/lucene/codecs/TermVectorsReader;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_removeCoreClosedListener_cbc2818f] = env->getMethodID(cls, "removeCoreClosedListener", "(Lorg/apache/lucene/index/AtomicReader$CoreClosedListener;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentReader::SegmentReader(const ::org::apache::lucene::index::SegmentCommitInfo & a0, jint a1, const ::org::apache::lucene::store::IOContext & a2) : ::org::apache::lucene::index::AtomicReader(env->newObject(initializeClass, &mids$, mid_init$_20f5bc6a, a0.this$, a1, a2.this$)) {}

        void SegmentReader::addCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addCoreClosedListener_cbc2818f], a0.this$);
        }

        void SegmentReader::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        ::org::apache::lucene::store::Directory SegmentReader::directory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_directory_1f3934bb]));
        }

        void SegmentReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        ::org::apache::lucene::index::Fields SegmentReader::fields() const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_fields_77db581d]));
        }

        ::org::apache::lucene::index::BinaryDocValues SegmentReader::getBinaryDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getBinaryDocValues_ecab96be], a0.this$));
        }

        ::java::lang::Object SegmentReader::getCombinedCoreAndDeletesKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCombinedCoreAndDeletesKey_846352c3]));
        }

        ::java::lang::Object SegmentReader::getCoreCacheKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCoreCacheKey_846352c3]));
        }

        ::org::apache::lucene::util::Bits SegmentReader::getDocsWithField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_e1c6a7db], a0.this$));
        }

        ::org::apache::lucene::index::FieldInfos SegmentReader::getFieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->callObjectMethod(this$, mids$[mid_getFieldInfos_9ba20825]));
        }

        ::org::apache::lucene::codecs::StoredFieldsReader SegmentReader::getFieldsReader() const
        {
          return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_getFieldsReader_ef585f0d]));
        }

        ::org::apache::lucene::util::Bits SegmentReader::getLiveDocs() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getLiveDocs_03c2457d]));
        }

        ::org::apache::lucene::index::NumericDocValues SegmentReader::getNormValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNormValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues SegmentReader::getNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::NumericDocValues(env->callObjectMethod(this$, mids$[mid_getNumericDocValues_d2b19f49], a0.this$));
        }

        ::org::apache::lucene::index::SegmentCommitInfo SegmentReader::getSegmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentCommitInfo(env->callObjectMethod(this$, mids$[mid_getSegmentInfo_5df298a9]));
        }

        ::java::lang::String SegmentReader::getSegmentName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentName_14c7b5c5]));
        }

        ::org::apache::lucene::index::SortedDocValues SegmentReader::getSortedDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getSortedDocValues_7b8b1a0a], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues SegmentReader::getSortedNumericDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callObjectMethod(this$, mids$[mid_getSortedNumericDocValues_37cd1812], a0.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues SegmentReader::getSortedSetDocValues(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getSortedSetDocValues_43e0e807], a0.this$));
        }

        jint SegmentReader::getTermInfosIndexDivisor() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermInfosIndexDivisor_54c6a179]);
        }

        ::org::apache::lucene::index::Fields SegmentReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        ::org::apache::lucene::codecs::TermVectorsReader SegmentReader::getTermVectorsReader() const
        {
          return ::org::apache::lucene::codecs::TermVectorsReader(env->callObjectMethod(this$, mids$[mid_getTermVectorsReader_475a2624]));
        }

        jint SegmentReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint SegmentReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        jlong SegmentReader::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void SegmentReader::removeCoreClosedListener(const ::org::apache::lucene::index::AtomicReader$CoreClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeCoreClosedListener_cbc2818f], a0.this$);
        }

        ::java::lang::String SegmentReader::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentReader_init_(t_SegmentReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentReader_addCoreClosedListener(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_checkIntegrity(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_directory(t_SegmentReader *self);
        static PyObject *t_SegmentReader_document(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_fields(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getBinaryDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getCombinedCoreAndDeletesKey(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getCoreCacheKey(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getDocsWithField(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getFieldInfos(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getFieldsReader(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getLiveDocs(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getNormValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getNumericDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getSegmentInfo(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getSegmentName(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getSortedDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getSortedNumericDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getSortedSetDocValues(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getTermInfosIndexDivisor(t_SegmentReader *self);
        static PyObject *t_SegmentReader_getTermVectors(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_getTermVectorsReader(t_SegmentReader *self);
        static PyObject *t_SegmentReader_maxDoc(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_numDocs(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_ramBytesUsed(t_SegmentReader *self);
        static PyObject *t_SegmentReader_removeCoreClosedListener(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_toString(t_SegmentReader *self, PyObject *args);
        static PyObject *t_SegmentReader_get__combinedCoreAndDeletesKey(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__coreCacheKey(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__fieldInfos(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__fieldsReader(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__liveDocs(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__segmentInfo(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__segmentName(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__termInfosIndexDivisor(t_SegmentReader *self, void *data);
        static PyObject *t_SegmentReader_get__termVectorsReader(t_SegmentReader *self, void *data);
        static PyGetSetDef t_SegmentReader__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentReader, combinedCoreAndDeletesKey),
          DECLARE_GET_FIELD(t_SegmentReader, coreCacheKey),
          DECLARE_GET_FIELD(t_SegmentReader, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentReader, fieldsReader),
          DECLARE_GET_FIELD(t_SegmentReader, liveDocs),
          DECLARE_GET_FIELD(t_SegmentReader, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentReader, segmentName),
          DECLARE_GET_FIELD(t_SegmentReader, termInfosIndexDivisor),
          DECLARE_GET_FIELD(t_SegmentReader, termVectorsReader),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentReader__methods_[] = {
          DECLARE_METHOD(t_SegmentReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReader, addCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, checkIntegrity, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, directory, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, document, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, fields, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getBinaryDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getCombinedCoreAndDeletesKey, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getCoreCacheKey, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getFieldInfos, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getFieldsReader, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getLiveDocs, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getNormValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getSegmentInfo, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getSegmentName, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getSortedDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getSortedNumericDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getSortedSetDocValues, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getTermInfosIndexDivisor, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, getTermVectors, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, getTermVectorsReader, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, maxDoc, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, numDocs, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, ramBytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_SegmentReader, removeCoreClosedListener, METH_VARARGS),
          DECLARE_METHOD(t_SegmentReader, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentReader, t_SegmentReader, ::org::apache::lucene::index::AtomicReader, SegmentReader, t_SegmentReader_init_, 0, 0, t_SegmentReader__fields_, 0, 0);

        void t_SegmentReader::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentReader), module, "SegmentReader", 0);
        }

        void t_SegmentReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentReader).tp_dict, "class_", make_descriptor(SegmentReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentReader).tp_dict, "wrapfn_", make_descriptor(t_SegmentReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentReader::initializeClass, 1)))
            return NULL;
          return t_SegmentReader::wrap_Object(SegmentReader(((t_SegmentReader *) arg)->object.this$));
        }
        static PyObject *t_SegmentReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentReader_init_(t_SegmentReader *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::SegmentCommitInfo a0((jobject) NULL);
          jint a1;
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          SegmentReader object((jobject) NULL);

          if (!parseArgs(args, "kIk", ::org::apache::lucene::index::SegmentCommitInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = SegmentReader(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentReader_addCoreClosedListener(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "addCoreClosedListener", args, 2);
        }

        static PyObject *t_SegmentReader_checkIntegrity(t_SegmentReader *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.checkIntegrity());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "checkIntegrity", args, 2);
        }

        static PyObject *t_SegmentReader_directory(t_SegmentReader *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_document(t_SegmentReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

          if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.document(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "document", args, 2);
        }

        static PyObject *t_SegmentReader_fields(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.fields());
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "fields", args, 2);
        }

        static PyObject *t_SegmentReader_getBinaryDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryDocValues(a0));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getBinaryDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getCombinedCoreAndDeletesKey(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCombinedCoreAndDeletesKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getCombinedCoreAndDeletesKey", args, 2);
        }

        static PyObject *t_SegmentReader_getCoreCacheKey(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getCoreCacheKey());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getCoreCacheKey", args, 2);
        }

        static PyObject *t_SegmentReader_getDocsWithField(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getDocsWithField", args, 2);
        }

        static PyObject *t_SegmentReader_getFieldInfos(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFieldInfos());
            return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getFieldInfos", args, 2);
        }

        static PyObject *t_SegmentReader_getFieldsReader(t_SegmentReader *self)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getFieldsReader());
          return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_getLiveDocs(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getLiveDocs());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getLiveDocs", args, 2);
        }

        static PyObject *t_SegmentReader_getNormValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNormValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getNormValues", args, 2);
        }

        static PyObject *t_SegmentReader_getNumericDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getNumericDocValues(a0));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getNumericDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getSegmentInfo(t_SegmentReader *self)
        {
          ::org::apache::lucene::index::SegmentCommitInfo result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentInfo());
          return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_getSegmentName(t_SegmentReader *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentName());
          return j2p(result);
        }

        static PyObject *t_SegmentReader_getSortedDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedDocValues(a0));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getSortedDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getSortedNumericDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedNumericDocValues(a0));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getSortedNumericDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getSortedSetDocValues(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSortedSetDocValues(a0));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getSortedSetDocValues", args, 2);
        }

        static PyObject *t_SegmentReader_getTermInfosIndexDivisor(t_SegmentReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTermInfosIndexDivisor());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentReader_getTermVectors(t_SegmentReader *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "getTermVectors", args, 2);
        }

        static PyObject *t_SegmentReader_getTermVectorsReader(t_SegmentReader *self)
        {
          ::org::apache::lucene::codecs::TermVectorsReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getTermVectorsReader());
          return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(result);
        }

        static PyObject *t_SegmentReader_maxDoc(t_SegmentReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.maxDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "maxDoc", args, 2);
        }

        static PyObject *t_SegmentReader_numDocs(t_SegmentReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.numDocs());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "numDocs", args, 2);
        }

        static PyObject *t_SegmentReader_ramBytesUsed(t_SegmentReader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_SegmentReader_removeCoreClosedListener(t_SegmentReader *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader$CoreClosedListener a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader$CoreClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeCoreClosedListener(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "removeCoreClosedListener", args, 2);
        }

        static PyObject *t_SegmentReader_toString(t_SegmentReader *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SegmentReader), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentReader_get__combinedCoreAndDeletesKey(t_SegmentReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__coreCacheKey(t_SegmentReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__fieldInfos(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__fieldsReader(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::codecs::StoredFieldsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getFieldsReader());
          return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__liveDocs(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::util::Bits value((jobject) NULL);
          OBJ_CALL(value = self->object.getLiveDocs());
          return ::org::apache::lucene::util::t_Bits::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__segmentInfo(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::index::SegmentCommitInfo value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentInfo());
          return ::org::apache::lucene::index::t_SegmentCommitInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentReader_get__segmentName(t_SegmentReader *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentName());
          return j2p(value);
        }

        static PyObject *t_SegmentReader_get__termInfosIndexDivisor(t_SegmentReader *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermInfosIndexDivisor());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentReader_get__termVectorsReader(t_SegmentReader *self, void *data)
        {
          ::org::apache::lucene::codecs::TermVectorsReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getTermVectorsReader());
          return ::org::apache::lucene::codecs::t_TermVectorsReader::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DualFloatFunction.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DualFloatFunction::class$ = NULL;
            jmethodID *DualFloatFunction::mids$ = NULL;
            bool DualFloatFunction::live$ = false;

            jclass DualFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DualFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_74aa307e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_3711414a] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DualFloatFunction::DualFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_74aa307e, a0.this$, a1.this$)) {}

            void DualFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String DualFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DualFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues DualFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DualFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DualFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DualFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DualFloatFunction_init_(t_DualFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DualFloatFunction_createWeight(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_description(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_equals(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_getValues(t_DualFloatFunction *self, PyObject *args);
            static PyObject *t_DualFloatFunction_hashCode(t_DualFloatFunction *self, PyObject *args);

            static PyMethodDef t_DualFloatFunction__methods_[] = {
              DECLARE_METHOD(t_DualFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DualFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DualFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DualFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DualFloatFunction, t_DualFloatFunction, ::org::apache::lucene::queries::function::ValueSource, DualFloatFunction, t_DualFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_DualFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(DualFloatFunction), module, "DualFloatFunction", 0);
            }

            void t_DualFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DualFloatFunction).tp_dict, "class_", make_descriptor(DualFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DualFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_DualFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DualFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DualFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DualFloatFunction::initializeClass, 1)))
                return NULL;
              return t_DualFloatFunction::wrap_Object(DualFloatFunction(((t_DualFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_DualFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DualFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DualFloatFunction_init_(t_DualFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              DualFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = DualFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DualFloatFunction_createWeight(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_DualFloatFunction_description(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DualFloatFunction_equals(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DualFloatFunction_getValues(t_DualFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DualFloatFunction_hashCode(t_DualFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DualFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MapOfSets.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MapOfSets::class$ = NULL;
        jmethodID *MapOfSets::mids$ = NULL;
        bool MapOfSets::live$ = false;

        jclass MapOfSets::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MapOfSets");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
            mids$[mid_getMap_db60befd] = env->getMethodID(cls, "getMap", "()Ljava/util/Map;");
            mids$[mid_put_466982ed] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)I");
            mids$[mid_putAll_bdc4f4b6] = env->getMethodID(cls, "putAll", "(Ljava/lang/Object;Ljava/util/Collection;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MapOfSets::MapOfSets(const ::java::util::Map & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

        ::java::util::Map MapOfSets::getMap() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getMap_db60befd]));
        }

        jint MapOfSets::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_put_466982ed], a0.this$, a1.this$);
        }

        jint MapOfSets::putAll(const ::java::lang::Object & a0, const ::java::util::Collection & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_putAll_bdc4f4b6], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MapOfSets_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MapOfSets_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MapOfSets_of_(t_MapOfSets *self, PyObject *args);
        static int t_MapOfSets_init_(t_MapOfSets *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MapOfSets_getMap(t_MapOfSets *self);
        static PyObject *t_MapOfSets_put(t_MapOfSets *self, PyObject *args);
        static PyObject *t_MapOfSets_putAll(t_MapOfSets *self, PyObject *args);
        static PyObject *t_MapOfSets_get__map(t_MapOfSets *self, void *data);
        static PyObject *t_MapOfSets_get__parameters_(t_MapOfSets *self, void *data);
        static PyGetSetDef t_MapOfSets__fields_[] = {
          DECLARE_GET_FIELD(t_MapOfSets, map),
          DECLARE_GET_FIELD(t_MapOfSets, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MapOfSets__methods_[] = {
          DECLARE_METHOD(t_MapOfSets, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MapOfSets, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MapOfSets, of_, METH_VARARGS),
          DECLARE_METHOD(t_MapOfSets, getMap, METH_NOARGS),
          DECLARE_METHOD(t_MapOfSets, put, METH_VARARGS),
          DECLARE_METHOD(t_MapOfSets, putAll, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MapOfSets, t_MapOfSets, ::java::lang::Object, MapOfSets, t_MapOfSets_init_, 0, 0, t_MapOfSets__fields_, 0, 0);
        PyObject *t_MapOfSets::wrap_Object(const MapOfSets& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_MapOfSets::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MapOfSets *self = (t_MapOfSets *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_MapOfSets::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_MapOfSets::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MapOfSets *self = (t_MapOfSets *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_MapOfSets::install(PyObject *module)
        {
          installType(&PY_TYPE(MapOfSets), module, "MapOfSets", 0);
        }

        void t_MapOfSets::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MapOfSets).tp_dict, "class_", make_descriptor(MapOfSets::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MapOfSets).tp_dict, "wrapfn_", make_descriptor(t_MapOfSets::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MapOfSets).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MapOfSets_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MapOfSets::initializeClass, 1)))
            return NULL;
          return t_MapOfSets::wrap_Object(MapOfSets(((t_MapOfSets *) arg)->object.this$));
        }
        static PyObject *t_MapOfSets_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MapOfSets::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MapOfSets_of_(t_MapOfSets *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_MapOfSets_init_(t_MapOfSets *self, PyObject *args, PyObject *kwds)
        {
          ::java::util::Map a0((jobject) NULL);
          PyTypeObject **p0;
          MapOfSets object((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
          {
            INT_CALL(object = MapOfSets(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MapOfSets_getMap(t_MapOfSets *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getMap());
          return ::java::util::t_Map::wrap_Object(result);
        }

        static PyObject *t_MapOfSets_put(t_MapOfSets *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(result = self->object.put(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "put", args);
          return NULL;
        }

        static PyObject *t_MapOfSets_putAll(t_MapOfSets *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          ::java::util::Collection a1((jobject) NULL);
          PyTypeObject **p1;
          jint result;

          if (!parseArgs(args, "OK", self->parameters[0], ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = self->object.putAll(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAll", args);
          return NULL;
        }
        static PyObject *t_MapOfSets_get__parameters_(t_MapOfSets *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_MapOfSets_get__map(t_MapOfSets *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getMap());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$shift_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$shift_return::class$ = NULL;
          jmethodID *JavascriptParser$shift_return::mids$ = NULL;
          bool JavascriptParser$shift_return::live$ = false;

          jclass JavascriptParser$shift_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$shift_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$shift_return::JavascriptParser$shift_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$shift_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$shift_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$shift_return_init_(t_JavascriptParser$shift_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$shift_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$shift_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$shift_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$shift_return, t_JavascriptParser$shift_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$shift_return, t_JavascriptParser$shift_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$shift_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$shift_return), module, "JavascriptParser$shift_return", 0);
          }

          void t_JavascriptParser$shift_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$shift_return).tp_dict, "class_", make_descriptor(JavascriptParser$shift_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$shift_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$shift_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$shift_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$shift_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$shift_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$shift_return::wrap_Object(JavascriptParser$shift_return(((t_JavascriptParser$shift_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$shift_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$shift_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$shift_return_init_(t_JavascriptParser$shift_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$shift_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$shift_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/String.h"
#include "java/util/Comparator.h"
#include "java/lang/Comparable.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Class.h"
#include "java/io/Serializable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Locale.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *String::class$ = NULL;
    jmethodID *String::mids$ = NULL;
    bool String::live$ = false;
    ::java::util::Comparator *String::CASE_INSENSITIVE_ORDER = NULL;

    jclass String::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/String");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
        mids$[mid_init$_9f94ae34] = env->getMethodID(cls, "<init>", "(Ljava/lang/StringBuilder;)V");
        mids$[mid_init$_44634788] = env->getMethodID(cls, "<init>", "(Ljava/lang/StringBuffer;)V");
        mids$[mid_init$_700e23d6] = env->getMethodID(cls, "<init>", "([C)V");
        mids$[mid_init$_1a0c6fd5] = env->getMethodID(cls, "<init>", "([BLjava/lang/String;)V");
        mids$[mid_init$_b8354c43] = env->getMethodID(cls, "<init>", "([BI)V");
        mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
        mids$[mid_init$_3e1ea22c] = env->getMethodID(cls, "<init>", "([III)V");
        mids$[mid_init$_6f0bb356] = env->getMethodID(cls, "<init>", "([CII)V");
        mids$[mid_init$_5ab96441] = env->getMethodID(cls, "<init>", "([BIILjava/lang/String;)V");
        mids$[mid_init$_96a25f0b] = env->getMethodID(cls, "<init>", "([BIII)V");
        mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
        mids$[mid_codePointAt_39c7bd23] = env->getMethodID(cls, "codePointAt", "(I)I");
        mids$[mid_codePointBefore_39c7bd23] = env->getMethodID(cls, "codePointBefore", "(I)I");
        mids$[mid_codePointCount_d8d154b9] = env->getMethodID(cls, "codePointCount", "(II)I");
        mids$[mid_compareTo_5fdc3f57] = env->getMethodID(cls, "compareTo", "(Ljava/lang/String;)I");
        mids$[mid_compareToIgnoreCase_5fdc3f57] = env->getMethodID(cls, "compareToIgnoreCase", "(Ljava/lang/String;)I");
        mids$[mid_concat_97a5258f] = env->getMethodID(cls, "concat", "(Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_contains_a8afc646] = env->getMethodID(cls, "contains", "(Ljava/lang/CharSequence;)Z");
        mids$[mid_contentEquals_a8afc646] = env->getMethodID(cls, "contentEquals", "(Ljava/lang/CharSequence;)Z");
        mids$[mid_contentEquals_44634784] = env->getMethodID(cls, "contentEquals", "(Ljava/lang/StringBuffer;)Z");
        mids$[mid_copyValueOf_c783d655] = env->getStaticMethodID(cls, "copyValueOf", "([C)Ljava/lang/String;");
        mids$[mid_copyValueOf_ddb60785] = env->getStaticMethodID(cls, "copyValueOf", "([CII)Ljava/lang/String;");
        mids$[mid_endsWith_5fdc3f44] = env->getMethodID(cls, "endsWith", "(Ljava/lang/String;)Z");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_equalsIgnoreCase_5fdc3f44] = env->getMethodID(cls, "equalsIgnoreCase", "(Ljava/lang/String;)Z");
        mids$[mid_format_0fb26e3b] = env->getStaticMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_format_84ed7d06] = env->getStaticMethodID(cls, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_getBytes_dab10e7e] = env->getMethodID(cls, "getBytes", "()[B");
        mids$[mid_getBytes_94a731a4] = env->getMethodID(cls, "getBytes", "(Ljava/lang/String;)[B");
        mids$[mid_getBytes_fdf97d27] = env->getMethodID(cls, "getBytes", "(II[BI)V");
        mids$[mid_getChars_06518f84] = env->getMethodID(cls, "getChars", "(II[CI)V");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_indexOf_39c7bd23] = env->getMethodID(cls, "indexOf", "(I)I");
        mids$[mid_indexOf_5fdc3f57] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;)I");
        mids$[mid_indexOf_6e53ccd9] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;I)I");
        mids$[mid_indexOf_d8d154b9] = env->getMethodID(cls, "indexOf", "(II)I");
        mids$[mid_intern_14c7b5c5] = env->getMethodID(cls, "intern", "()Ljava/lang/String;");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_lastIndexOf_39c7bd23] = env->getMethodID(cls, "lastIndexOf", "(I)I");
        mids$[mid_lastIndexOf_5fdc3f57] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;)I");
        mids$[mid_lastIndexOf_d8d154b9] = env->getMethodID(cls, "lastIndexOf", "(II)I");
        mids$[mid_lastIndexOf_6e53ccd9] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;I)I");
        mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
        mids$[mid_matches_5fdc3f44] = env->getMethodID(cls, "matches", "(Ljava/lang/String;)Z");
        mids$[mid_offsetByCodePoints_d8d154b9] = env->getMethodID(cls, "offsetByCodePoints", "(II)I");
        mids$[mid_regionMatches_344d8cb6] = env->getMethodID(cls, "regionMatches", "(ILjava/lang/String;II)Z");
        mids$[mid_regionMatches_35f2560d] = env->getMethodID(cls, "regionMatches", "(ZILjava/lang/String;II)Z");
        mids$[mid_replace_f1c62e0d] = env->getMethodID(cls, "replace", "(CC)Ljava/lang/String;");
        mids$[mid_replace_103b702d] = env->getMethodID(cls, "replace", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;");
        mids$[mid_replaceAll_aacea7e9] = env->getMethodID(cls, "replaceAll", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_replaceFirst_aacea7e9] = env->getMethodID(cls, "replaceFirst", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
        mids$[mid_split_1f6a174f] = env->getMethodID(cls, "split", "(Ljava/lang/String;)[Ljava/lang/String;");
        mids$[mid_split_3384fe85] = env->getMethodID(cls, "split", "(Ljava/lang/String;I)[Ljava/lang/String;");
        mids$[mid_startsWith_5fdc3f44] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;)Z");
        mids$[mid_startsWith_6e53ccca] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;I)Z");
        mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
        mids$[mid_substring_141401b3] = env->getMethodID(cls, "substring", "(I)Ljava/lang/String;");
        mids$[mid_substring_f9118fe5] = env->getMethodID(cls, "substring", "(II)Ljava/lang/String;");
        mids$[mid_toCharArray_dab10e7f] = env->getMethodID(cls, "toCharArray", "()[C");
        mids$[mid_toLowerCase_14c7b5c5] = env->getMethodID(cls, "toLowerCase", "()Ljava/lang/String;");
        mids$[mid_toLowerCase_c0fb304e] = env->getMethodID(cls, "toLowerCase", "(Ljava/util/Locale;)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toUpperCase_14c7b5c5] = env->getMethodID(cls, "toUpperCase", "()Ljava/lang/String;");
        mids$[mid_toUpperCase_c0fb304e] = env->getMethodID(cls, "toUpperCase", "(Ljava/util/Locale;)Ljava/lang/String;");
        mids$[mid_trim_14c7b5c5] = env->getMethodID(cls, "trim", "()Ljava/lang/String;");
        mids$[mid_valueOf_445a175e] = env->getStaticMethodID(cls, "valueOf", "(Z)Ljava/lang/String;");
        mids$[mid_valueOf_c9db4eed] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;");
        mids$[mid_valueOf_5ded254a] = env->getStaticMethodID(cls, "valueOf", "(F)Ljava/lang/String;");
        mids$[mid_valueOf_1b4624f8] = env->getStaticMethodID(cls, "valueOf", "(D)Ljava/lang/String;");
        mids$[mid_valueOf_141401b3] = env->getStaticMethodID(cls, "valueOf", "(I)Ljava/lang/String;");
        mids$[mid_valueOf_c783d655] = env->getStaticMethodID(cls, "valueOf", "([C)Ljava/lang/String;");
        mids$[mid_valueOf_7611a535] = env->getStaticMethodID(cls, "valueOf", "(C)Ljava/lang/String;");
        mids$[mid_valueOf_3e02f30e] = env->getStaticMethodID(cls, "valueOf", "(J)Ljava/lang/String;");
        mids$[mid_valueOf_ddb60785] = env->getStaticMethodID(cls, "valueOf", "([CII)Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        CASE_INSENSITIVE_ORDER = new ::java::util::Comparator(env->getStaticObjectField(cls, "CASE_INSENSITIVE_ORDER", "Ljava/util/Comparator;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    String::String() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    String::String(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

    String::String(const ::java::lang::StringBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9f94ae34, a0.this$)) {}

    String::String(const ::java::lang::StringBuffer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_44634788, a0.this$)) {}

    String::String(const JArray< jchar > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_700e23d6, a0.this$)) {}

    String::String(const JArray< jbyte > & a0, const String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1a0c6fd5, a0.this$, a1.this$)) {}

    String::String(const JArray< jbyte > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b8354c43, a0.this$, a1)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

    String::String(const JArray< jint > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e1ea22c, a0.this$, a1, a2)) {}

    String::String(const JArray< jchar > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f0bb356, a0.this$, a1, a2)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2, const String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5ab96441, a0.this$, a1, a2, a3.this$)) {}

    String::String(const JArray< jbyte > & a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_96a25f0b, a0.this$, a1, a2, a3)) {}

    jchar String::charAt(jint a0) const
    {
      return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
    }

    jint String::codePointAt(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointAt_39c7bd23], a0);
    }

    jint String::codePointBefore(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointBefore_39c7bd23], a0);
    }

    jint String::codePointCount(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_codePointCount_d8d154b9], a0, a1);
    }

    jint String::compareTo(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_5fdc3f57], a0.this$);
    }

    jint String::compareToIgnoreCase(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareToIgnoreCase_5fdc3f57], a0.this$);
    }

    String String::concat(const String & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_concat_97a5258f], a0.this$));
    }

    jboolean String::contains(const ::java::lang::CharSequence & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contains_a8afc646], a0.this$);
    }

    jboolean String::contentEquals(const ::java::lang::CharSequence & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contentEquals_a8afc646], a0.this$);
    }

    jboolean String::contentEquals(const ::java::lang::StringBuffer & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_contentEquals_44634784], a0.this$);
    }

    String String::copyValueOf(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_copyValueOf_c783d655], a0.this$));
    }

    String String::copyValueOf(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_copyValueOf_ddb60785], a0.this$, a1, a2));
    }

    jboolean String::endsWith(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_endsWith_5fdc3f44], a0.this$);
    }

    jboolean String::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jboolean String::equalsIgnoreCase(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equalsIgnoreCase_5fdc3f44], a0.this$);
    }

    String String::format(const String & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_format_0fb26e3b], a0.this$, a1.this$));
    }

    String String::format(const ::java::util::Locale & a0, const String & a1, const JArray< ::java::lang::Object > & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_format_84ed7d06], a0.this$, a1.this$, a2.this$));
    }

    JArray< jbyte > String::getBytes() const
    {
      return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_dab10e7e]));
    }

    JArray< jbyte > String::getBytes(const String & a0) const
    {
      return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_94a731a4], a0.this$));
    }

    void String::getBytes(jint a0, jint a1, const JArray< jbyte > & a2, jint a3) const
    {
      env->callVoidMethod(this$, mids$[mid_getBytes_fdf97d27], a0, a1, a2.this$, a3);
    }

    void String::getChars(jint a0, jint a1, const JArray< jchar > & a2, jint a3) const
    {
      env->callVoidMethod(this$, mids$[mid_getChars_06518f84], a0, a1, a2.this$, a3);
    }

    jint String::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint String::indexOf(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_39c7bd23], a0);
    }

    jint String::indexOf(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_5fdc3f57], a0.this$);
    }

    jint String::indexOf(const String & a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_6e53ccd9], a0.this$, a1);
    }

    jint String::indexOf(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_indexOf_d8d154b9], a0, a1);
    }

    String String::intern() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_intern_14c7b5c5]));
    }

    jboolean String::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    jint String::lastIndexOf(jint a0) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_39c7bd23], a0);
    }

    jint String::lastIndexOf(const String & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_5fdc3f57], a0.this$);
    }

    jint String::lastIndexOf(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_d8d154b9], a0, a1);
    }

    jint String::lastIndexOf(const String & a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_lastIndexOf_6e53ccd9], a0.this$, a1);
    }

    jint String::length() const
    {
      return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
    }

    jboolean String::matches(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_matches_5fdc3f44], a0.this$);
    }

    jint String::offsetByCodePoints(jint a0, jint a1) const
    {
      return env->callIntMethod(this$, mids$[mid_offsetByCodePoints_d8d154b9], a0, a1);
    }

    jboolean String::regionMatches(jint a0, const String & a1, jint a2, jint a3) const
    {
      return env->callBooleanMethod(this$, mids$[mid_regionMatches_344d8cb6], a0, a1.this$, a2, a3);
    }

    jboolean String::regionMatches(jboolean a0, jint a1, const String & a2, jint a3, jint a4) const
    {
      return env->callBooleanMethod(this$, mids$[mid_regionMatches_35f2560d], a0, a1, a2.this$, a3, a4);
    }

    String String::replace(jchar a0, jchar a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replace_f1c62e0d], a0, a1));
    }

    String String::replace(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replace_103b702d], a0.this$, a1.this$));
    }

    String String::replaceAll(const String & a0, const String & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replaceAll_aacea7e9], a0.this$, a1.this$));
    }

    String String::replaceFirst(const String & a0, const String & a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_replaceFirst_aacea7e9], a0.this$, a1.this$));
    }

    JArray< String > String::split(const String & a0) const
    {
      return JArray< String >(env->callObjectMethod(this$, mids$[mid_split_1f6a174f], a0.this$));
    }

    JArray< String > String::split(const String & a0, jint a1) const
    {
      return JArray< String >(env->callObjectMethod(this$, mids$[mid_split_3384fe85], a0.this$, a1));
    }

    jboolean String::startsWith(const String & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_startsWith_5fdc3f44], a0.this$);
    }

    jboolean String::startsWith(const String & a0, jint a1) const
    {
      return env->callBooleanMethod(this$, mids$[mid_startsWith_6e53ccca], a0.this$, a1);
    }

    ::java::lang::CharSequence String::subSequence(jint a0, jint a1) const
    {
      return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
    }

    String String::substring(jint a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_substring_141401b3], a0));
    }

    String String::substring(jint a0, jint a1) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_substring_f9118fe5], a0, a1));
    }

    JArray< jchar > String::toCharArray() const
    {
      return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_toCharArray_dab10e7f]));
    }

    String String::toLowerCase() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toLowerCase_14c7b5c5]));
    }

    String String::toLowerCase(const ::java::util::Locale & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toLowerCase_c0fb304e], a0.this$));
    }

    String String::toString() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    String String::toUpperCase() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toUpperCase_14c7b5c5]));
    }

    String String::toUpperCase(const ::java::util::Locale & a0) const
    {
      return String(env->callObjectMethod(this$, mids$[mid_toUpperCase_c0fb304e], a0.this$));
    }

    String String::trim() const
    {
      return String(env->callObjectMethod(this$, mids$[mid_trim_14c7b5c5]));
    }

    String String::valueOf(jboolean a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_445a175e], a0));
    }

    String String::valueOf(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c9db4eed], a0.this$));
    }

    String String::valueOf(jfloat a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5ded254a], a0));
    }

    String String::valueOf(jdouble a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_1b4624f8], a0));
    }

    String String::valueOf(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_141401b3], a0));
    }

    String String::valueOf(const JArray< jchar > & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c783d655], a0.this$));
    }

    String String::valueOf(jchar a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7611a535], a0));
    }

    String String::valueOf(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_3e02f30e], a0));
    }

    String String::valueOf(const JArray< jchar > & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ddb60785], a0.this$, a1, a2));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_String_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_String_instance_(PyTypeObject *type, PyObject *arg);
    static int t_String_init_(t_String *self, PyObject *args, PyObject *kwds);
    static PyObject *t_String_charAt(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointAt(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointBefore(t_String *self, PyObject *arg);
    static PyObject *t_String_codePointCount(t_String *self, PyObject *args);
    static PyObject *t_String_compareTo(t_String *self, PyObject *arg);
    static PyObject *t_String_compareToIgnoreCase(t_String *self, PyObject *arg);
    static PyObject *t_String_concat(t_String *self, PyObject *arg);
    static PyObject *t_String_contains(t_String *self, PyObject *arg);
    static PyObject *t_String_contentEquals(t_String *self, PyObject *args);
    static PyObject *t_String_copyValueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_endsWith(t_String *self, PyObject *arg);
    static PyObject *t_String_equals(t_String *self, PyObject *args);
    static PyObject *t_String_equalsIgnoreCase(t_String *self, PyObject *arg);
    static PyObject *t_String_format(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_getBytes(t_String *self, PyObject *args);
    static PyObject *t_String_getChars(t_String *self, PyObject *args);
    static PyObject *t_String_hashCode(t_String *self, PyObject *args);
    static PyObject *t_String_indexOf(t_String *self, PyObject *args);
    static PyObject *t_String_intern(t_String *self);
    static PyObject *t_String_isEmpty(t_String *self);
    static PyObject *t_String_lastIndexOf(t_String *self, PyObject *args);
    static PyObject *t_String_length(t_String *self);
    static PyObject *t_String_matches(t_String *self, PyObject *arg);
    static PyObject *t_String_offsetByCodePoints(t_String *self, PyObject *args);
    static PyObject *t_String_regionMatches(t_String *self, PyObject *args);
    static PyObject *t_String_replace(t_String *self, PyObject *args);
    static PyObject *t_String_replaceAll(t_String *self, PyObject *args);
    static PyObject *t_String_replaceFirst(t_String *self, PyObject *args);
    static PyObject *t_String_split(t_String *self, PyObject *args);
    static PyObject *t_String_startsWith(t_String *self, PyObject *args);
    static PyObject *t_String_subSequence(t_String *self, PyObject *args);
    static PyObject *t_String_substring(t_String *self, PyObject *args);
    static PyObject *t_String_toCharArray(t_String *self);
    static PyObject *t_String_toLowerCase(t_String *self, PyObject *args);
    static PyObject *t_String_toString(t_String *self, PyObject *args);
    static PyObject *t_String_toUpperCase(t_String *self, PyObject *args);
    static PyObject *t_String_trim(t_String *self);
    static PyObject *t_String_valueOf(PyTypeObject *type, PyObject *args);
    static PyObject *t_String_get__bytes(t_String *self, void *data);
    static PyObject *t_String_get__empty(t_String *self, void *data);
    static PyGetSetDef t_String__fields_[] = {
      DECLARE_GET_FIELD(t_String, bytes),
      DECLARE_GET_FIELD(t_String, empty),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_String__methods_[] = {
      DECLARE_METHOD(t_String, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_String, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_String, charAt, METH_O),
      DECLARE_METHOD(t_String, codePointAt, METH_O),
      DECLARE_METHOD(t_String, codePointBefore, METH_O),
      DECLARE_METHOD(t_String, codePointCount, METH_VARARGS),
      DECLARE_METHOD(t_String, compareTo, METH_O),
      DECLARE_METHOD(t_String, compareToIgnoreCase, METH_O),
      DECLARE_METHOD(t_String, concat, METH_O),
      DECLARE_METHOD(t_String, contains, METH_O),
      DECLARE_METHOD(t_String, contentEquals, METH_VARARGS),
      DECLARE_METHOD(t_String, copyValueOf, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, endsWith, METH_O),
      DECLARE_METHOD(t_String, equals, METH_VARARGS),
      DECLARE_METHOD(t_String, equalsIgnoreCase, METH_O),
      DECLARE_METHOD(t_String, format, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_String, getBytes, METH_VARARGS),
      DECLARE_METHOD(t_String, getChars, METH_VARARGS),
      DECLARE_METHOD(t_String, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_String, indexOf, METH_VARARGS),
      DECLARE_METHOD(t_String, intern, METH_NOARGS),
      DECLARE_METHOD(t_String, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_String, lastIndexOf, METH_VARARGS),
      DECLARE_METHOD(t_String, length, METH_NOARGS),
      DECLARE_METHOD(t_String, matches, METH_O),
      DECLARE_METHOD(t_String, offsetByCodePoints, METH_VARARGS),
      DECLARE_METHOD(t_String, regionMatches, METH_VARARGS),
      DECLARE_METHOD(t_String, replace, METH_VARARGS),
      DECLARE_METHOD(t_String, replaceAll, METH_VARARGS),
      DECLARE_METHOD(t_String, replaceFirst, METH_VARARGS),
      DECLARE_METHOD(t_String, split, METH_VARARGS),
      DECLARE_METHOD(t_String, startsWith, METH_VARARGS),
      DECLARE_METHOD(t_String, subSequence, METH_VARARGS),
      DECLARE_METHOD(t_String, substring, METH_VARARGS),
      DECLARE_METHOD(t_String, toCharArray, METH_NOARGS),
      DECLARE_METHOD(t_String, toLowerCase, METH_VARARGS),
      DECLARE_METHOD(t_String, toString, METH_VARARGS),
      DECLARE_METHOD(t_String, toUpperCase, METH_VARARGS),
      DECLARE_METHOD(t_String, trim, METH_NOARGS),
      DECLARE_METHOD(t_String, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(String, t_String, ::java::lang::Object, String, t_String_init_, 0, 0, t_String__fields_, 0, 0);

    void t_String::install(PyObject *module)
    {
      installType(&PY_TYPE(String), module, "String", 0);
    }

    void t_String::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "class_", make_descriptor(String::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "wrapfn_", make_descriptor(unboxString));
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "boxfn_", make_descriptor(boxString));
      env->getClass(String::initializeClass);
      PyDict_SetItemString(PY_TYPE(String).tp_dict, "CASE_INSENSITIVE_ORDER", make_descriptor(::java::util::t_Comparator::wrap_Object(*String::CASE_INSENSITIVE_ORDER)));
    }

    static PyObject *t_String_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, String::initializeClass, 1)))
        return NULL;
      return t_String::wrap_Object(String(((t_String *) arg)->object.this$));
    }
    static PyObject *t_String_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, String::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_String_init_(t_String *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String object((jobject) NULL);

          INT_CALL(object = String());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          JArray< jbyte > a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[B", &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::StringBuilder a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::StringBuffer a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            INT_CALL(object = String(a0));
            self->object = object;
            break;
          }
        }
        goto err;
       case 2:
        {
          JArray< jbyte > a0((jobject) NULL);
          String a1((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[Bs", &a0, &a1))
          {
            INT_CALL(object = String(a0, a1));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            INT_CALL(object = String(a0, a1));
            self->object = object;
            break;
          }
        }
        goto err;
       case 3:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        {
          JArray< jint > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[III", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String object((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            INT_CALL(object = String(a0, a1, a2));
            self->object = object;
            break;
          }
        }
        goto err;
       case 4:
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          String a3((jobject) NULL);
          String object((jobject) NULL);

          if (!parseArgs(args, "[BIIs", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = String(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;
          String object((jobject) NULL);

          if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = String(a0, a1, a2, a3));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_String_charAt(t_String *self, PyObject *arg)
    {
      jint a0;
      jchar result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.charAt(a0));
        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
      }

      PyErr_SetArgsError((PyObject *) self, "charAt", arg);
      return NULL;
    }

    static PyObject *t_String_codePointAt(t_String *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.codePointAt(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointAt", arg);
      return NULL;
    }

    static PyObject *t_String_codePointBefore(t_String *self, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = self->object.codePointBefore(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointBefore", arg);
      return NULL;
    }

    static PyObject *t_String_codePointCount(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.codePointCount(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "codePointCount", args);
      return NULL;
    }

    static PyObject *t_String_compareTo(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_String_compareToIgnoreCase(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.compareToIgnoreCase(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareToIgnoreCase", arg);
      return NULL;
    }

    static PyObject *t_String_concat(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.concat(a0));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "concat", arg);
      return NULL;
    }

    static PyObject *t_String_contains(t_String *self, PyObject *arg)
    {
      ::java::lang::CharSequence a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
      {
        OBJ_CALL(result = self->object.contains(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "contains", arg);
      return NULL;
    }

    static PyObject *t_String_contentEquals(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
          {
            OBJ_CALL(result = self->object.contentEquals(a0));
            Py_RETURN_BOOL(result);
          }
        }
        {
          ::java::lang::StringBuffer a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.contentEquals(a0));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "contentEquals", args);
      return NULL;
    }

    static PyObject *t_String_copyValueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::copyValueOf(a0));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::copyValueOf(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "copyValueOf", args);
      return NULL;
    }

    static PyObject *t_String_endsWith(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.endsWith(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "endsWith", arg);
      return NULL;
    }

    static PyObject *t_String_equals(t_String *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_String_equalsIgnoreCase(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.equalsIgnoreCase(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "equalsIgnoreCase", arg);
      return NULL;
    }

    static PyObject *t_String_format(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          String a0((jobject) NULL);
          JArray< ::java::lang::Object > a1((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "s[o", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::String::format(a0, a1));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          ::java::util::Locale a0((jobject) NULL);
          String a1((jobject) NULL);
          JArray< ::java::lang::Object > a2((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::format(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "format", args);
      return NULL;
    }

    static PyObject *t_String_getBytes(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          JArray< jbyte > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytes());
          return result.wrap();
        }
        break;
       case 1:
        {
          String a0((jobject) NULL);
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBytes(a0));
            return result.wrap();
          }
        }
        break;
       case 4:
        {
          jint a0;
          jint a1;
          JArray< jbyte > a2((jobject) NULL);
          jint a3;

          if (!parseArgs(args, "II[BI", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.getBytes(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "getBytes", args);
      return NULL;
    }

    static PyObject *t_String_getChars(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      JArray< jchar > a2((jobject) NULL);
      jint a3;

      if (!parseArgs(args, "II[CI", &a0, &a1, &a2, &a3))
      {
        OBJ_CALL(self->object.getChars(a0, a1, a2, a3));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "getChars", args);
      return NULL;
    }

    static PyObject *t_String_hashCode(t_String *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_String_indexOf(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.indexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.indexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.indexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.indexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "indexOf", args);
      return NULL;
    }

    static PyObject *t_String_intern(t_String *self)
    {
      String result((jobject) NULL);
      OBJ_CALL(result = self->object.intern());
      return j2p(result);
    }

    static PyObject *t_String_isEmpty(t_String *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_String_lastIndexOf(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        {
          String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "lastIndexOf", args);
      return NULL;
    }

    static PyObject *t_String_length(t_String *self)
    {
      jint result;
      OBJ_CALL(result = self->object.length());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_String_matches(t_String *self, PyObject *arg)
    {
      String a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.matches(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "matches", arg);
      return NULL;
    }

    static PyObject *t_String_offsetByCodePoints(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.offsetByCodePoints(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "offsetByCodePoints", args);
      return NULL;
    }

    static PyObject *t_String_regionMatches(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 4:
        {
          jint a0;
          String a1((jobject) NULL);
          jint a2;
          jint a3;
          jboolean result;

          if (!parseArgs(args, "IsII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = self->object.regionMatches(a0, a1, a2, a3));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 5:
        {
          jboolean a0;
          jint a1;
          String a2((jobject) NULL);
          jint a3;
          jint a4;
          jboolean result;

          if (!parseArgs(args, "ZIsII", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.regionMatches(a0, a1, a2, a3, a4));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "regionMatches", args);
      return NULL;
    }

    static PyObject *t_String_replace(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          jchar a0;
          jchar a1;
          String result((jobject) NULL);

          if (!parseArgs(args, "CC", &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return j2p(result);
          }
        }
        {
          ::java::lang::CharSequence a0((jobject) NULL);
          ::java::lang::CharSequence a1((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
          {
            OBJ_CALL(result = self->object.replace(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "replace", args);
      return NULL;
    }

    static PyObject *t_String_replaceAll(t_String *self, PyObject *args)
    {
      String a0((jobject) NULL);
      String a1((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = self->object.replaceAll(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "replaceAll", args);
      return NULL;
    }

    static PyObject *t_String_replaceFirst(t_String *self, PyObject *args)
    {
      String a0((jobject) NULL);
      String a1((jobject) NULL);
      String result((jobject) NULL);

      if (!parseArgs(args, "ss", &a0, &a1))
      {
        OBJ_CALL(result = self->object.replaceFirst(a0, a1));
        return j2p(result);
      }

      PyErr_SetArgsError((PyObject *) self, "replaceFirst", args);
      return NULL;
    }

    static PyObject *t_String_split(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          String a0((jobject) NULL);
          JArray< String > result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.split(a0));
            return JArray<jstring>(result.this$).wrap();
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          JArray< String > result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.split(a0, a1));
            return JArray<jstring>(result.this$).wrap();
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "split", args);
      return NULL;
    }

    static PyObject *t_String_startsWith(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.startsWith(a0));
            Py_RETURN_BOOL(result);
          }
        }
        break;
       case 2:
        {
          String a0((jobject) NULL);
          jint a1;
          jboolean result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.startsWith(a0, a1));
            Py_RETURN_BOOL(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "startsWith", args);
      return NULL;
    }

    static PyObject *t_String_subSequence(t_String *self, PyObject *args)
    {
      jint a0;
      jint a1;
      ::java::lang::CharSequence result((jobject) NULL);

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = self->object.subSequence(a0, a1));
        return ::java::lang::t_CharSequence::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "subSequence", args);
      return NULL;
    }

    static PyObject *t_String_substring(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.substring(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          String result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.substring(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "substring", args);
      return NULL;
    }

    static PyObject *t_String_toCharArray(t_String *self)
    {
      JArray< jchar > result((jobject) NULL);
      OBJ_CALL(result = self->object.toCharArray());
      return result.wrap();
    }

    static PyObject *t_String_toLowerCase(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String result((jobject) NULL);
          OBJ_CALL(result = self->object.toLowerCase());
          return j2p(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toLowerCase(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toLowerCase", args);
      return NULL;
    }

    static PyObject *t_String_toString(t_String *self, PyObject *args)
    {
      String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(String), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_String_toUpperCase(t_String *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          String result((jobject) NULL);
          OBJ_CALL(result = self->object.toUpperCase());
          return j2p(result);
        }
        break;
       case 1:
        {
          ::java::util::Locale a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.toUpperCase(a0));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "toUpperCase", args);
      return NULL;
    }

    static PyObject *t_String_trim(t_String *self)
    {
      String result((jobject) NULL);
      OBJ_CALL(result = self->object.trim());
      return j2p(result);
    }

    static PyObject *t_String_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jboolean a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "Z", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          ::java::lang::Object a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jfloat a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "F", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jdouble a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "D", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jint a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          JArray< jchar > a0((jobject) NULL);
          String result((jobject) NULL);

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jchar a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "C", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        {
          jlong a0;
          String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0));
            return j2p(result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          String result((jobject) NULL);

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::String::valueOf(a0, a1, a2));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }

    static PyObject *t_String_get__bytes(t_String *self, void *data)
    {
      JArray< jbyte > value((jobject) NULL);
      OBJ_CALL(value = self->object.getBytes());
      return value.wrap();
    }

    static PyObject *t_String_get__empty(t_String *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PhraseQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PhraseQuery::class$ = NULL;
        jmethodID *PhraseQuery::mids$ = NULL;
        bool PhraseQuery::live$ = false;

        jclass PhraseQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PhraseQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_add_05555589] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;I)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getPositions_dab10e75] = env->getMethodID(cls, "getPositions", "()[I");
            mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
            mids$[mid_getTerms_2b86e588] = env->getMethodID(cls, "getTerms", "()[Lorg/apache/lucene/index/Term;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setSlop_39c7bd3c] = env->getMethodID(cls, "setSlop", "(I)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PhraseQuery::PhraseQuery() : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PhraseQuery::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }

        void PhraseQuery::add(const ::org::apache::lucene::index::Term & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_05555589], a0.this$, a1);
        }

        ::org::apache::lucene::search::Weight PhraseQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean PhraseQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void PhraseQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        JArray< jint > PhraseQuery::getPositions() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getPositions_dab10e75]));
        }

        jint PhraseQuery::getSlop() const
        {
          return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
        }

        JArray< ::org::apache::lucene::index::Term > PhraseQuery::getTerms() const
        {
          return JArray< ::org::apache::lucene::index::Term >(env->callObjectMethod(this$, mids$[mid_getTerms_2b86e588]));
        }

        jint PhraseQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query PhraseQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void PhraseQuery::setSlop(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setSlop_39c7bd3c], a0);
        }

        ::java::lang::String PhraseQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PhraseQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PhraseQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PhraseQuery_init_(t_PhraseQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PhraseQuery_add(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_createWeight(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_equals(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_extractTerms(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_getPositions(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_getSlop(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_getTerms(t_PhraseQuery *self);
        static PyObject *t_PhraseQuery_hashCode(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_rewrite(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_setSlop(t_PhraseQuery *self, PyObject *arg);
        static PyObject *t_PhraseQuery_toString(t_PhraseQuery *self, PyObject *args);
        static PyObject *t_PhraseQuery_get__positions(t_PhraseQuery *self, void *data);
        static PyObject *t_PhraseQuery_get__slop(t_PhraseQuery *self, void *data);
        static int t_PhraseQuery_set__slop(t_PhraseQuery *self, PyObject *arg, void *data);
        static PyObject *t_PhraseQuery_get__terms(t_PhraseQuery *self, void *data);
        static PyGetSetDef t_PhraseQuery__fields_[] = {
          DECLARE_GET_FIELD(t_PhraseQuery, positions),
          DECLARE_GETSET_FIELD(t_PhraseQuery, slop),
          DECLARE_GET_FIELD(t_PhraseQuery, terms),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PhraseQuery__methods_[] = {
          DECLARE_METHOD(t_PhraseQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PhraseQuery, add, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, getPositions, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, getSlop, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, getTerms, METH_NOARGS),
          DECLARE_METHOD(t_PhraseQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_PhraseQuery, setSlop, METH_O),
          DECLARE_METHOD(t_PhraseQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PhraseQuery, t_PhraseQuery, ::org::apache::lucene::search::Query, PhraseQuery, t_PhraseQuery_init_, 0, 0, t_PhraseQuery__fields_, 0, 0);

        void t_PhraseQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(PhraseQuery), module, "PhraseQuery", 0);
        }

        void t_PhraseQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PhraseQuery).tp_dict, "class_", make_descriptor(PhraseQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PhraseQuery).tp_dict, "wrapfn_", make_descriptor(t_PhraseQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PhraseQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PhraseQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PhraseQuery::initializeClass, 1)))
            return NULL;
          return t_PhraseQuery::wrap_Object(PhraseQuery(((t_PhraseQuery *) arg)->object.this$));
        }
        static PyObject *t_PhraseQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PhraseQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PhraseQuery_init_(t_PhraseQuery *self, PyObject *args, PyObject *kwds)
        {
          PhraseQuery object((jobject) NULL);

          INT_CALL(object = PhraseQuery());
          self->object = object;

          return 0;
        }

        static PyObject *t_PhraseQuery_add(t_PhraseQuery *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jint a1;

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_PhraseQuery_createWeight(t_PhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_PhraseQuery_equals(t_PhraseQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PhraseQuery_extractTerms(t_PhraseQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_PhraseQuery_getPositions(t_PhraseQuery *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getPositions());
          return result.wrap();
        }

        static PyObject *t_PhraseQuery_getSlop(t_PhraseQuery *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSlop());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_PhraseQuery_getTerms(t_PhraseQuery *self)
        {
          JArray< ::org::apache::lucene::index::Term > result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerms());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
        }

        static PyObject *t_PhraseQuery_hashCode(t_PhraseQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PhraseQuery_rewrite(t_PhraseQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_PhraseQuery_setSlop(t_PhraseQuery *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setSlop(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setSlop", arg);
          return NULL;
        }

        static PyObject *t_PhraseQuery_toString(t_PhraseQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(PhraseQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_PhraseQuery_get__positions(t_PhraseQuery *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getPositions());
          return value.wrap();
        }

        static PyObject *t_PhraseQuery_get__slop(t_PhraseQuery *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSlop());
          return PyInt_FromLong((long) value);
        }
        static int t_PhraseQuery_set__slop(t_PhraseQuery *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setSlop(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "slop", arg);
          return -1;
        }

        static PyObject *t_PhraseQuery_get__terms(t_PhraseQuery *self, void *data)
        {
          JArray< ::org::apache::lucene::index::Term > value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerms());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_Term::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TwoPhaseCommit.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TwoPhaseCommit::class$ = NULL;
        jmethodID *TwoPhaseCommit::mids$ = NULL;
        bool TwoPhaseCommit::live$ = false;

        jclass TwoPhaseCommit::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TwoPhaseCommit");

            mids$ = new jmethodID[max_mid];
            mids$[mid_commit_54c6a166] = env->getMethodID(cls, "commit", "()V");
            mids$[mid_prepareCommit_54c6a166] = env->getMethodID(cls, "prepareCommit", "()V");
            mids$[mid_rollback_54c6a166] = env->getMethodID(cls, "rollback", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TwoPhaseCommit::commit() const
        {
          env->callVoidMethod(this$, mids$[mid_commit_54c6a166]);
        }

        void TwoPhaseCommit::prepareCommit() const
        {
          env->callVoidMethod(this$, mids$[mid_prepareCommit_54c6a166]);
        }

        void TwoPhaseCommit::rollback() const
        {
          env->callVoidMethod(this$, mids$[mid_rollback_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TwoPhaseCommit_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommit_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TwoPhaseCommit_commit(t_TwoPhaseCommit *self);
        static PyObject *t_TwoPhaseCommit_prepareCommit(t_TwoPhaseCommit *self);
        static PyObject *t_TwoPhaseCommit_rollback(t_TwoPhaseCommit *self);

        static PyMethodDef t_TwoPhaseCommit__methods_[] = {
          DECLARE_METHOD(t_TwoPhaseCommit, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommit, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TwoPhaseCommit, commit, METH_NOARGS),
          DECLARE_METHOD(t_TwoPhaseCommit, prepareCommit, METH_NOARGS),
          DECLARE_METHOD(t_TwoPhaseCommit, rollback, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TwoPhaseCommit, t_TwoPhaseCommit, ::java::lang::Object, TwoPhaseCommit, abstract_init, 0, 0, 0, 0, 0);

        void t_TwoPhaseCommit::install(PyObject *module)
        {
          installType(&PY_TYPE(TwoPhaseCommit), module, "TwoPhaseCommit", 0);
        }

        void t_TwoPhaseCommit::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommit).tp_dict, "class_", make_descriptor(TwoPhaseCommit::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommit).tp_dict, "wrapfn_", make_descriptor(t_TwoPhaseCommit::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TwoPhaseCommit).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TwoPhaseCommit_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TwoPhaseCommit::initializeClass, 1)))
            return NULL;
          return t_TwoPhaseCommit::wrap_Object(TwoPhaseCommit(((t_TwoPhaseCommit *) arg)->object.this$));
        }
        static PyObject *t_TwoPhaseCommit_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TwoPhaseCommit::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TwoPhaseCommit_commit(t_TwoPhaseCommit *self)
        {
          OBJ_CALL(self->object.commit());
          Py_RETURN_NONE;
        }

        static PyObject *t_TwoPhaseCommit_prepareCommit(t_TwoPhaseCommit *self)
        {
          OBJ_CALL(self->object.prepareCommit());
          Py_RETURN_NONE;
        }

        static PyObject *t_TwoPhaseCommit_rollback(t_TwoPhaseCommit *self)
        {
          OBJ_CALL(self->object.rollback());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BooleanClause$Occur::class$ = NULL;
        jmethodID *BooleanClause$Occur::mids$ = NULL;
        bool BooleanClause$Occur::live$ = false;
        BooleanClause$Occur *BooleanClause$Occur::MUST = NULL;
        BooleanClause$Occur *BooleanClause$Occur::MUST_NOT = NULL;
        BooleanClause$Occur *BooleanClause$Occur::SHOULD = NULL;

        jclass BooleanClause$Occur::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BooleanClause$Occur");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_af513d37] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/BooleanClause$Occur;");
            mids$[mid_values_e84c4b69] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/BooleanClause$Occur;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            MUST = new BooleanClause$Occur(env->getStaticObjectField(cls, "MUST", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            MUST_NOT = new BooleanClause$Occur(env->getStaticObjectField(cls, "MUST_NOT", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            SHOULD = new BooleanClause$Occur(env->getStaticObjectField(cls, "SHOULD", "Lorg/apache/lucene/search/BooleanClause$Occur;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanClause$Occur BooleanClause$Occur::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return BooleanClause$Occur(env->callStaticObjectMethod(cls, mids$[mid_valueOf_af513d37], a0.this$));
        }

        JArray< BooleanClause$Occur > BooleanClause$Occur::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< BooleanClause$Occur >(env->callStaticObjectMethod(cls, mids$[mid_values_e84c4b69]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BooleanClause$Occur_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause$Occur_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanClause$Occur_of_(t_BooleanClause$Occur *self, PyObject *args);
        static PyObject *t_BooleanClause$Occur_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_BooleanClause$Occur_values(PyTypeObject *type);
        static PyObject *t_BooleanClause$Occur_get__parameters_(t_BooleanClause$Occur *self, void *data);
        static PyGetSetDef t_BooleanClause$Occur__fields_[] = {
          DECLARE_GET_FIELD(t_BooleanClause$Occur, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BooleanClause$Occur__methods_[] = {
          DECLARE_METHOD(t_BooleanClause$Occur, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, of_, METH_VARARGS),
          DECLARE_METHOD(t_BooleanClause$Occur, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BooleanClause$Occur, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanClause$Occur, t_BooleanClause$Occur, ::java::lang::Enum, BooleanClause$Occur, abstract_init, 0, 0, t_BooleanClause$Occur__fields_, 0, 0);
        PyObject *t_BooleanClause$Occur::wrap_Object(const BooleanClause$Occur& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BooleanClause$Occur::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BooleanClause$Occur *self = (t_BooleanClause$Occur *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_BooleanClause$Occur::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_BooleanClause$Occur::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_BooleanClause$Occur *self = (t_BooleanClause$Occur *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_BooleanClause$Occur::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanClause$Occur), module, "BooleanClause$Occur", 0);
        }

        void t_BooleanClause$Occur::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "class_", make_descriptor(BooleanClause$Occur::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "wrapfn_", make_descriptor(t_BooleanClause$Occur::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BooleanClause$Occur::initializeClass);
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "MUST", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::MUST)));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "MUST_NOT", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::MUST_NOT)));
          PyDict_SetItemString(PY_TYPE(BooleanClause$Occur).tp_dict, "SHOULD", make_descriptor(t_BooleanClause$Occur::wrap_Object(*BooleanClause$Occur::SHOULD)));
        }

        static PyObject *t_BooleanClause$Occur_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanClause$Occur::initializeClass, 1)))
            return NULL;
          return t_BooleanClause$Occur::wrap_Object(BooleanClause$Occur(((t_BooleanClause$Occur *) arg)->object.this$));
        }
        static PyObject *t_BooleanClause$Occur_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanClause$Occur::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BooleanClause$Occur_of_(t_BooleanClause$Occur *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_BooleanClause$Occur_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          BooleanClause$Occur result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::BooleanClause$Occur::valueOf(a0));
            return t_BooleanClause$Occur::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_BooleanClause$Occur_values(PyTypeObject *type)
        {
          JArray< BooleanClause$Occur > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::search::BooleanClause$Occur::values());
          return JArray<jobject>(result.this$).wrap(t_BooleanClause$Occur::wrap_jobject);
        }
        static PyObject *t_BooleanClause$Occur_get__parameters_(t_BooleanClause$Occur *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SearcherManager.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/search/SearcherFactory.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SearcherManager::class$ = NULL;
        jmethodID *SearcherManager::mids$ = NULL;
        bool SearcherManager::live$ = false;

        jclass SearcherManager::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SearcherManager");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8abe804e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/SearcherFactory;)V");
            mids$[mid_init$_1c94e792] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;ZLorg/apache/lucene/search/SearcherFactory;)V");
            mids$[mid_getSearcher_00082010] = env->getStaticMethodID(cls, "getSearcher", "(Lorg/apache/lucene/search/SearcherFactory;Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/IndexSearcher;");
            mids$[mid_isSearcherCurrent_54c6a16a] = env->getMethodID(cls, "isSearcherCurrent", "()Z");
            mids$[mid_decRef_474fe51c] = env->getMethodID(cls, "decRef", "(Lorg/apache/lucene/search/IndexSearcher;)V");
            mids$[mid_getRefCount_474fe503] = env->getMethodID(cls, "getRefCount", "(Lorg/apache/lucene/search/IndexSearcher;)I");
            mids$[mid_tryIncRef_474fe510] = env->getMethodID(cls, "tryIncRef", "(Lorg/apache/lucene/search/IndexSearcher;)Z");
            mids$[mid_refreshIfNeeded_8f3bcadb] = env->getMethodID(cls, "refreshIfNeeded", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/IndexSearcher;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SearcherManager::SearcherManager(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::SearcherFactory & a1) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_8abe804e, a0.this$, a1.this$)) {}

        SearcherManager::SearcherManager(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1, const ::org::apache::lucene::search::SearcherFactory & a2) : ::org::apache::lucene::search::ReferenceManager(env->newObject(initializeClass, &mids$, mid_init$_1c94e792, a0.this$, a1, a2.this$)) {}

        ::org::apache::lucene::search::IndexSearcher SearcherManager::getSearcher(const ::org::apache::lucene::search::SearcherFactory & a0, const ::org::apache::lucene::index::IndexReader & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::IndexSearcher(env->callStaticObjectMethod(cls, mids$[mid_getSearcher_00082010], a0.this$, a1.this$));
        }

        jboolean SearcherManager::isSearcherCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isSearcherCurrent_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SearcherManager_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherManager_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SearcherManager_of_(t_SearcherManager *self, PyObject *args);
        static int t_SearcherManager_init_(t_SearcherManager *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SearcherManager_getSearcher(PyTypeObject *type, PyObject *args);
        static PyObject *t_SearcherManager_isSearcherCurrent(t_SearcherManager *self);
        static PyObject *t_SearcherManager_get__searcherCurrent(t_SearcherManager *self, void *data);
        static PyObject *t_SearcherManager_get__parameters_(t_SearcherManager *self, void *data);
        static PyGetSetDef t_SearcherManager__fields_[] = {
          DECLARE_GET_FIELD(t_SearcherManager, searcherCurrent),
          DECLARE_GET_FIELD(t_SearcherManager, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SearcherManager__methods_[] = {
          DECLARE_METHOD(t_SearcherManager, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, of_, METH_VARARGS),
          DECLARE_METHOD(t_SearcherManager, getSearcher, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_SearcherManager, isSearcherCurrent, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SearcherManager, t_SearcherManager, ::org::apache::lucene::search::ReferenceManager, SearcherManager, t_SearcherManager_init_, 0, 0, t_SearcherManager__fields_, 0, 0);
        PyObject *t_SearcherManager::wrap_Object(const SearcherManager& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SearcherManager::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SearcherManager *self = (t_SearcherManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_SearcherManager::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_SearcherManager::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_SearcherManager *self = (t_SearcherManager *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_SearcherManager::install(PyObject *module)
        {
          installType(&PY_TYPE(SearcherManager), module, "SearcherManager", 0);
        }

        void t_SearcherManager::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SearcherManager).tp_dict, "class_", make_descriptor(SearcherManager::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SearcherManager).tp_dict, "wrapfn_", make_descriptor(t_SearcherManager::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SearcherManager).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SearcherManager_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SearcherManager::initializeClass, 1)))
            return NULL;
          return t_SearcherManager::wrap_Object(SearcherManager(((t_SearcherManager *) arg)->object.this$));
        }
        static PyObject *t_SearcherManager_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SearcherManager::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SearcherManager_of_(t_SearcherManager *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_SearcherManager_init_(t_SearcherManager *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::search::SearcherFactory a1((jobject) NULL);
              SearcherManager object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SearcherManager(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(IndexSearcher);
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              ::org::apache::lucene::search::SearcherFactory a2((jobject) NULL);
              SearcherManager object((jobject) NULL);

              if (!parseArgs(args, "kZk", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::search::SearcherFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SearcherManager(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(IndexSearcher);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SearcherManager_getSearcher(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::SearcherFactory a0((jobject) NULL);
          ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::SearcherFactory::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::SearcherManager::getSearcher(a0, a1));
            return ::org::apache::lucene::search::t_IndexSearcher::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSearcher", args);
          return NULL;
        }

        static PyObject *t_SearcherManager_isSearcherCurrent(t_SearcherManager *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isSearcherCurrent());
          Py_RETURN_BOOL(result);
        }
        static PyObject *t_SearcherManager_get__parameters_(t_SearcherManager *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_SearcherManager_get__searcherCurrent(t_SearcherManager *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isSearcherCurrent());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ByteFieldSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ByteFieldSource::class$ = NULL;
            jmethodID *ByteFieldSource::mids$ = NULL;
            bool ByteFieldSource::live$ = false;

            jclass ByteFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ByteFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_03909c56] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ByteParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ByteFieldSource::ByteFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ByteFieldSource::ByteFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$ByteParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_03909c56, a0.this$, a1.this$)) {}

            ::java::lang::String ByteFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ByteFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ByteFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ByteFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ByteFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ByteFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ByteFieldSource_init_(t_ByteFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ByteFieldSource_description(t_ByteFieldSource *self, PyObject *args);
            static PyObject *t_ByteFieldSource_equals(t_ByteFieldSource *self, PyObject *args);
            static PyObject *t_ByteFieldSource_getValues(t_ByteFieldSource *self, PyObject *args);
            static PyObject *t_ByteFieldSource_hashCode(t_ByteFieldSource *self, PyObject *args);

            static PyMethodDef t_ByteFieldSource__methods_[] = {
              DECLARE_METHOD(t_ByteFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ByteFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_ByteFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_ByteFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ByteFieldSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ByteFieldSource, t_ByteFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, ByteFieldSource, t_ByteFieldSource_init_, 0, 0, 0, 0, 0);

            void t_ByteFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(ByteFieldSource), module, "ByteFieldSource", 0);
            }

            void t_ByteFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ByteFieldSource).tp_dict, "class_", make_descriptor(ByteFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ByteFieldSource).tp_dict, "wrapfn_", make_descriptor(t_ByteFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ByteFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ByteFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ByteFieldSource::initializeClass, 1)))
                return NULL;
              return t_ByteFieldSource::wrap_Object(ByteFieldSource(((t_ByteFieldSource *) arg)->object.this$));
            }
            static PyObject *t_ByteFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ByteFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ByteFieldSource_init_(t_ByteFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ByteFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = ByteFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$ByteParser a1((jobject) NULL);
                  ByteFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$ByteParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = ByteFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ByteFieldSource_description(t_ByteFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ByteFieldSource_equals(t_ByteFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ByteFieldSource_getValues(t_ByteFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ByteFieldSource_hashCode(t_ByteFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ByteFieldSource), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilderFactory.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *QueryBuilderFactory::class$ = NULL;
          jmethodID *QueryBuilderFactory::mids$ = NULL;
          bool QueryBuilderFactory::live$ = false;

          jclass QueryBuilderFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/QueryBuilderFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_addBuilder_155f2547] = env->getMethodID(cls, "addBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");
              mids$[mid_getQueryBuilder_c1a99e2e] = env->getMethodID(cls, "getQueryBuilder", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/xml/QueryBuilder;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryBuilderFactory::QueryBuilderFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void QueryBuilderFactory::addBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::QueryBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addBuilder_155f2547], a0.this$, a1.this$);
          }

          ::org::apache::lucene::queryparser::xml::QueryBuilder QueryBuilderFactory::getQueryBuilder(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::queryparser::xml::QueryBuilder(env->callObjectMethod(this$, mids$[mid_getQueryBuilder_c1a99e2e], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_QueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryBuilderFactory_init_(t_QueryBuilderFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryBuilderFactory_addBuilder(t_QueryBuilderFactory *self, PyObject *args);
          static PyObject *t_QueryBuilderFactory_getQueryBuilder(t_QueryBuilderFactory *self, PyObject *arg);

          static PyMethodDef t_QueryBuilderFactory__methods_[] = {
            DECLARE_METHOD(t_QueryBuilderFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilderFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryBuilderFactory, addBuilder, METH_VARARGS),
            DECLARE_METHOD(t_QueryBuilderFactory, getQueryBuilder, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryBuilderFactory, t_QueryBuilderFactory, ::java::lang::Object, QueryBuilderFactory, t_QueryBuilderFactory_init_, 0, 0, 0, 0, 0);

          void t_QueryBuilderFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryBuilderFactory), module, "QueryBuilderFactory", 0);
          }

          void t_QueryBuilderFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryBuilderFactory).tp_dict, "class_", make_descriptor(QueryBuilderFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryBuilderFactory).tp_dict, "wrapfn_", make_descriptor(t_QueryBuilderFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryBuilderFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryBuilderFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryBuilderFactory::initializeClass, 1)))
              return NULL;
            return t_QueryBuilderFactory::wrap_Object(QueryBuilderFactory(((t_QueryBuilderFactory *) arg)->object.this$));
          }
          static PyObject *t_QueryBuilderFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryBuilderFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryBuilderFactory_init_(t_QueryBuilderFactory *self, PyObject *args, PyObject *kwds)
          {
            QueryBuilderFactory object((jobject) NULL);

            INT_CALL(object = QueryBuilderFactory());
            self->object = object;

            return 0;
          }

          static PyObject *t_QueryBuilderFactory_addBuilder(t_QueryBuilderFactory *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addBuilder", args);
            return NULL;
          }

          static PyObject *t_QueryBuilderFactory_getQueryBuilder(t_QueryBuilderFactory *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getQueryBuilder(a0));
              return ::org::apache::lucene::queryparser::xml::t_QueryBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getQueryBuilder", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/PhraseSlopQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *PhraseSlopQueryNodeProcessor::class$ = NULL;
              jmethodID *PhraseSlopQueryNodeProcessor::mids$ = NULL;
              bool PhraseSlopQueryNodeProcessor::live$ = false;

              jclass PhraseSlopQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/PhraseSlopQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseSlopQueryNodeProcessor::PhraseSlopQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_PhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseSlopQueryNodeProcessor_init_(t_PhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_PhraseSlopQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_PhraseSlopQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PhraseSlopQueryNodeProcessor, t_PhraseSlopQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, PhraseSlopQueryNodeProcessor, t_PhraseSlopQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_PhraseSlopQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseSlopQueryNodeProcessor), module, "PhraseSlopQueryNodeProcessor", 0);
              }

              void t_PhraseSlopQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNodeProcessor).tp_dict, "class_", make_descriptor(PhraseSlopQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_PhraseSlopQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseSlopQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_PhraseSlopQueryNodeProcessor::wrap_Object(PhraseSlopQueryNodeProcessor(((t_PhraseSlopQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_PhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseSlopQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseSlopQueryNodeProcessor_init_(t_PhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                PhraseSlopQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = PhraseSlopQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BoostAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BoostAttribute::class$ = NULL;
        jmethodID *BoostAttribute::mids$ = NULL;
        bool BoostAttribute::live$ = false;

        jclass BoostAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BoostAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
            mids$[mid_setBoost_06298cab] = env->getMethodID(cls, "setBoost", "(F)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jfloat BoostAttribute::getBoost() const
        {
          return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
        }

        void BoostAttribute::setBoost(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBoost_06298cab], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BoostAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BoostAttribute_getBoost(t_BoostAttribute *self);
        static PyObject *t_BoostAttribute_setBoost(t_BoostAttribute *self, PyObject *arg);
        static PyObject *t_BoostAttribute_get__boost(t_BoostAttribute *self, void *data);
        static int t_BoostAttribute_set__boost(t_BoostAttribute *self, PyObject *arg, void *data);
        static PyGetSetDef t_BoostAttribute__fields_[] = {
          DECLARE_GETSET_FIELD(t_BoostAttribute, boost),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BoostAttribute__methods_[] = {
          DECLARE_METHOD(t_BoostAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BoostAttribute, getBoost, METH_NOARGS),
          DECLARE_METHOD(t_BoostAttribute, setBoost, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BoostAttribute, t_BoostAttribute, ::org::apache::lucene::util::Attribute, BoostAttribute, abstract_init, 0, 0, t_BoostAttribute__fields_, 0, 0);

        void t_BoostAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(BoostAttribute), module, "BoostAttribute", 0);
        }

        void t_BoostAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BoostAttribute).tp_dict, "class_", make_descriptor(BoostAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BoostAttribute).tp_dict, "wrapfn_", make_descriptor(t_BoostAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BoostAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BoostAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BoostAttribute::initializeClass, 1)))
            return NULL;
          return t_BoostAttribute::wrap_Object(BoostAttribute(((t_BoostAttribute *) arg)->object.this$));
        }
        static PyObject *t_BoostAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BoostAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BoostAttribute_getBoost(t_BoostAttribute *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getBoost());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_BoostAttribute_setBoost(t_BoostAttribute *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setBoost(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBoost", arg);
          return NULL;
        }

        static PyObject *t_BoostAttribute_get__boost(t_BoostAttribute *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getBoost());
          return PyFloat_FromDouble((double) value);
        }
        static int t_BoostAttribute_set__boost(t_BoostAttribute *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setBoost(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "boost", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiTermsEnum::class$ = NULL;
        jmethodID *MultiTermsEnum::mids$ = NULL;
        bool MultiTermsEnum::live$ = false;

        jclass MultiTermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiTermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a8f03305] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/ReaderSlice;)V");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_getMatchCount_54c6a179] = env->getMethodID(cls, "getMatchCount", "()I");
            mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiTermsEnum::MultiTermsEnum(const JArray< ::org::apache::lucene::index::ReaderSlice > & a0) : ::org::apache::lucene::index::TermsEnum(env->newObject(initializeClass, &mids$, mid_init$_a8f03305, a0.this$)) {}

        jint MultiTermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum MultiTermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum MultiTermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        ::java::util::Comparator MultiTermsEnum::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        jint MultiTermsEnum::getMatchCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getMatchCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiTermsEnum::next() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
        }

        jlong MultiTermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus MultiTermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean MultiTermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void MultiTermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        ::org::apache::lucene::util::BytesRef MultiTermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::java::lang::String MultiTermsEnum::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong MultiTermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiTermsEnum_init_(t_MultiTermsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiTermsEnum_docFreq(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_docs(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_docsAndPositions(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_getComparator(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_getMatchCount(t_MultiTermsEnum *self);
        static PyObject *t_MultiTermsEnum_next(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_ord(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_seekCeil(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_seekExact(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_term(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_toString(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_totalTermFreq(t_MultiTermsEnum *self, PyObject *args);
        static PyObject *t_MultiTermsEnum_get__comparator(t_MultiTermsEnum *self, void *data);
        static PyObject *t_MultiTermsEnum_get__matchCount(t_MultiTermsEnum *self, void *data);
        static PyGetSetDef t_MultiTermsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermsEnum, comparator),
          DECLARE_GET_FIELD(t_MultiTermsEnum, matchCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermsEnum__methods_[] = {
          DECLARE_METHOD(t_MultiTermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermsEnum, docFreq, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, getMatchCount, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermsEnum, next, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, ord, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, seekCeil, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, term, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, toString, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermsEnum, totalTermFreq, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermsEnum, t_MultiTermsEnum, ::org::apache::lucene::index::TermsEnum, MultiTermsEnum, t_MultiTermsEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_MultiTermsEnum *)) get_next< t_MultiTermsEnum,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_MultiTermsEnum__fields_, 0, 0);

        void t_MultiTermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermsEnum), module, "MultiTermsEnum", 0);
        }

        void t_MultiTermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermsEnum).tp_dict, "class_", make_descriptor(MultiTermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_MultiTermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermsEnum::initializeClass, 1)))
            return NULL;
          return t_MultiTermsEnum::wrap_Object(MultiTermsEnum(((t_MultiTermsEnum *) arg)->object.this$));
        }
        static PyObject *t_MultiTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiTermsEnum_init_(t_MultiTermsEnum *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::ReaderSlice > a0((jobject) NULL);
          MultiTermsEnum object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::ReaderSlice::initializeClass, &a0))
          {
            INT_CALL(object = MultiTermsEnum(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiTermsEnum_docFreq(t_MultiTermsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docFreq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "docFreq", args, 2);
        }

        static PyObject *t_MultiTermsEnum_docs(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "docs", args, 2);
        }

        static PyObject *t_MultiTermsEnum_docsAndPositions(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits a0((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "docsAndPositions", args, 2);
        }

        static PyObject *t_MultiTermsEnum_getComparator(t_MultiTermsEnum *self, PyObject *args)
        {
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_MultiTermsEnum_getMatchCount(t_MultiTermsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMatchCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiTermsEnum_next(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_MultiTermsEnum_ord(t_MultiTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ord());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "ord", args, 2);
        }

        static PyObject *t_MultiTermsEnum_seekCeil(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "seekCeil", args, 2);
        }

        static PyObject *t_MultiTermsEnum_seekExact(t_MultiTermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "seekExact", args, 2);
        }

        static PyObject *t_MultiTermsEnum_term(t_MultiTermsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.term());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "term", args, 2);
        }

        static PyObject *t_MultiTermsEnum_toString(t_MultiTermsEnum *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiTermsEnum_totalTermFreq(t_MultiTermsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.totalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiTermsEnum), (PyObject *) self, "totalTermFreq", args, 2);
        }

        static PyObject *t_MultiTermsEnum_get__comparator(t_MultiTermsEnum *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }

        static PyObject *t_MultiTermsEnum_get__matchCount(t_MultiTermsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMatchCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractAllGroupHeadsCollector::class$ = NULL;
          jmethodID *AbstractAllGroupHeadsCollector::mids$ = NULL;
          bool AbstractAllGroupHeadsCollector::live$ = false;

          jclass AbstractAllGroupHeadsCollector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
              mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
              mids$[mid_groupHeadsSize_54c6a179] = env->getMethodID(cls, "groupHeadsSize", "()I");
              mids$[mid_retrieveGroupHeads_dab10e75] = env->getMethodID(cls, "retrieveGroupHeads", "()[I");
              mids$[mid_retrieveGroupHeads_e64a66db] = env->getMethodID(cls, "retrieveGroupHeads", "(I)Lorg/apache/lucene/util/FixedBitSet;");
              mids$[mid_retrieveGroupHeadAndAddIfNotExist_39c7bd3c] = env->getMethodID(cls, "retrieveGroupHeadAndAddIfNotExist", "(I)V");
              mids$[mid_getCollectedGroupHeads_2d2d7de4] = env->getMethodID(cls, "getCollectedGroupHeads", "()Ljava/util/Collection;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean AbstractAllGroupHeadsCollector::acceptsDocsOutOfOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
          }

          void AbstractAllGroupHeadsCollector::collect(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
          }

          jint AbstractAllGroupHeadsCollector::groupHeadsSize() const
          {
            return env->callIntMethod(this$, mids$[mid_groupHeadsSize_54c6a179]);
          }

          JArray< jint > AbstractAllGroupHeadsCollector::retrieveGroupHeads() const
          {
            return JArray< jint >(env->callObjectMethod(this$, mids$[mid_retrieveGroupHeads_dab10e75]));
          }

          ::org::apache::lucene::util::FixedBitSet AbstractAllGroupHeadsCollector::retrieveGroupHeads(jint a0) const
          {
            return ::org::apache::lucene::util::FixedBitSet(env->callObjectMethod(this$, mids$[mid_retrieveGroupHeads_e64a66db], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/grouping/AbstractAllGroupHeadsCollector$GroupHead.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAllGroupHeadsCollector_of_(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_collect(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_groupHeadsSize(t_AbstractAllGroupHeadsCollector *self);
          static PyObject *t_AbstractAllGroupHeadsCollector_retrieveGroupHeads(t_AbstractAllGroupHeadsCollector *self, PyObject *args);
          static PyObject *t_AbstractAllGroupHeadsCollector_get__parameters_(t_AbstractAllGroupHeadsCollector *self, void *data);
          static PyGetSetDef t_AbstractAllGroupHeadsCollector__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractAllGroupHeadsCollector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAllGroupHeadsCollector__methods_[] = {
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, acceptsDocsOutOfOrder, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, collect, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, groupHeadsSize, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAllGroupHeadsCollector, retrieveGroupHeads, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAllGroupHeadsCollector, t_AbstractAllGroupHeadsCollector, ::org::apache::lucene::search::Collector, AbstractAllGroupHeadsCollector, abstract_init, 0, 0, t_AbstractAllGroupHeadsCollector__fields_, 0, 0);
          PyObject *t_AbstractAllGroupHeadsCollector::wrap_Object(const AbstractAllGroupHeadsCollector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector *self = (t_AbstractAllGroupHeadsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_AbstractAllGroupHeadsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_AbstractAllGroupHeadsCollector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_AbstractAllGroupHeadsCollector *self = (t_AbstractAllGroupHeadsCollector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_AbstractAllGroupHeadsCollector::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAllGroupHeadsCollector), module, "AbstractAllGroupHeadsCollector", 0);
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "GroupHead", make_descriptor(&PY_TYPE(AbstractAllGroupHeadsCollector$GroupHead)));
          }

          void t_AbstractAllGroupHeadsCollector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "class_", make_descriptor(AbstractAllGroupHeadsCollector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "wrapfn_", make_descriptor(t_AbstractAllGroupHeadsCollector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAllGroupHeadsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAllGroupHeadsCollector::initializeClass, 1)))
              return NULL;
            return t_AbstractAllGroupHeadsCollector::wrap_Object(AbstractAllGroupHeadsCollector(((t_AbstractAllGroupHeadsCollector *) arg)->object.this$));
          }
          static PyObject *t_AbstractAllGroupHeadsCollector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAllGroupHeadsCollector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_of_(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_acceptsDocsOutOfOrder(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractAllGroupHeadsCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_collect(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(self->object.collect(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractAllGroupHeadsCollector), (PyObject *) self, "collect", args, 2);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_groupHeadsSize(t_AbstractAllGroupHeadsCollector *self)
          {
            jint result;
            OBJ_CALL(result = self->object.groupHeadsSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractAllGroupHeadsCollector_retrieveGroupHeads(t_AbstractAllGroupHeadsCollector *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                JArray< jint > result((jobject) NULL);
                OBJ_CALL(result = self->object.retrieveGroupHeads());
                return result.wrap();
              }
              break;
             case 1:
              {
                jint a0;
                ::org::apache::lucene::util::FixedBitSet result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.retrieveGroupHeads(a0));
                  return ::org::apache::lucene::util::t_FixedBitSet::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "retrieveGroupHeads", args);
            return NULL;
          }
          static PyObject *t_AbstractAllGroupHeadsCollector_get__parameters_(t_AbstractAllGroupHeadsCollector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicNormalizationFilter::class$ = NULL;
          jmethodID *ArabicNormalizationFilter::mids$ = NULL;
          bool ArabicNormalizationFilter::live$ = false;

          jclass ArabicNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicNormalizationFilter::ArabicNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ArabicNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicNormalizationFilter_init_(t_ArabicNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicNormalizationFilter_incrementToken(t_ArabicNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_ArabicNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_ArabicNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicNormalizationFilter, t_ArabicNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, ArabicNormalizationFilter, t_ArabicNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_ArabicNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicNormalizationFilter), module, "ArabicNormalizationFilter", 0);
          }

          void t_ArabicNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilter).tp_dict, "class_", make_descriptor(ArabicNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_ArabicNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_ArabicNormalizationFilter::wrap_Object(ArabicNormalizationFilter(((t_ArabicNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_ArabicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicNormalizationFilter_init_(t_ArabicNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ArabicNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ArabicNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicNormalizationFilter_incrementToken(t_ArabicNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ArabicNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BoostingTermBuilder::class$ = NULL;
            jmethodID *BoostingTermBuilder::mids$ = NULL;
            bool BoostingTermBuilder::live$ = false;

            jclass BoostingTermBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoostingTermBuilder::BoostingTermBuilder() : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BoostingTermBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoostingTermBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoostingTermBuilder_init_(t_BoostingTermBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BoostingTermBuilder__methods_[] = {
              DECLARE_METHOD(t_BoostingTermBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoostingTermBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoostingTermBuilder, t_BoostingTermBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, BoostingTermBuilder, t_BoostingTermBuilder_init_, 0, 0, 0, 0, 0);

            void t_BoostingTermBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BoostingTermBuilder), module, "BoostingTermBuilder", 0);
            }

            void t_BoostingTermBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoostingTermBuilder).tp_dict, "class_", make_descriptor(BoostingTermBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoostingTermBuilder).tp_dict, "wrapfn_", make_descriptor(t_BoostingTermBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoostingTermBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoostingTermBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoostingTermBuilder::initializeClass, 1)))
                return NULL;
              return t_BoostingTermBuilder::wrap_Object(BoostingTermBuilder(((t_BoostingTermBuilder *) arg)->object.this$));
            }
            static PyObject *t_BoostingTermBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoostingTermBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoostingTermBuilder_init_(t_BoostingTermBuilder *self, PyObject *args, PyObject *kwds)
            {
              BoostingTermBuilder object((jobject) NULL);

              INT_CALL(object = BoostingTermBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/StoredFieldsWriter.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *StoredFieldsWriter::class$ = NULL;
        jmethodID *StoredFieldsWriter::mids$ = NULL;
        bool StoredFieldsWriter::live$ = false;

        jclass StoredFieldsWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/StoredFieldsWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_abort_54c6a166] = env->getMethodID(cls, "abort", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finish_48f050c2] = env->getMethodID(cls, "finish", "(Lorg/apache/lucene/index/FieldInfos;I)V");
            mids$[mid_finishDocument_54c6a166] = env->getMethodID(cls, "finishDocument", "()V");
            mids$[mid_merge_fd0cfdeb] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;)I");
            mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
            mids$[mid_writeField_0de3c993] = env->getMethodID(cls, "writeField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/IndexableField;)V");
            mids$[mid_addDocument_2c3bf2c7] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/index/FieldInfos;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void StoredFieldsWriter::abort() const
        {
          env->callVoidMethod(this$, mids$[mid_abort_54c6a166]);
        }

        void StoredFieldsWriter::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void StoredFieldsWriter::finish(const ::org::apache::lucene::index::FieldInfos & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_finish_48f050c2], a0.this$, a1);
        }

        void StoredFieldsWriter::finishDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDocument_54c6a166]);
        }

        jint StoredFieldsWriter::merge(const ::org::apache::lucene::index::MergeState & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_merge_fd0cfdeb], a0.this$);
        }

        void StoredFieldsWriter::startDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
        }

        void StoredFieldsWriter::writeField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::IndexableField & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_writeField_0de3c993], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_abort(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_close(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_finish(t_StoredFieldsWriter *self, PyObject *args);
        static PyObject *t_StoredFieldsWriter_finishDocument(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_merge(t_StoredFieldsWriter *self, PyObject *arg);
        static PyObject *t_StoredFieldsWriter_startDocument(t_StoredFieldsWriter *self);
        static PyObject *t_StoredFieldsWriter_writeField(t_StoredFieldsWriter *self, PyObject *args);

        static PyMethodDef t_StoredFieldsWriter__methods_[] = {
          DECLARE_METHOD(t_StoredFieldsWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredFieldsWriter, abort, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, close, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, finish, METH_VARARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, finishDocument, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, merge, METH_O),
          DECLARE_METHOD(t_StoredFieldsWriter, startDocument, METH_NOARGS),
          DECLARE_METHOD(t_StoredFieldsWriter, writeField, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredFieldsWriter, t_StoredFieldsWriter, ::java::lang::Object, StoredFieldsWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_StoredFieldsWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredFieldsWriter), module, "StoredFieldsWriter", 0);
        }

        void t_StoredFieldsWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredFieldsWriter).tp_dict, "class_", make_descriptor(StoredFieldsWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredFieldsWriter).tp_dict, "wrapfn_", make_descriptor(t_StoredFieldsWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredFieldsWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StoredFieldsWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredFieldsWriter::initializeClass, 1)))
            return NULL;
          return t_StoredFieldsWriter::wrap_Object(StoredFieldsWriter(((t_StoredFieldsWriter *) arg)->object.this$));
        }
        static PyObject *t_StoredFieldsWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredFieldsWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_StoredFieldsWriter_abort(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.abort());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_close(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_finish(t_StoredFieldsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfos a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::FieldInfos::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.finish(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "finish", args);
          return NULL;
        }

        static PyObject *t_StoredFieldsWriter_finishDocument(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.finishDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_merge(t_StoredFieldsWriter *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.merge(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "merge", arg);
          return NULL;
        }

        static PyObject *t_StoredFieldsWriter_startDocument(t_StoredFieldsWriter *self)
        {
          OBJ_CALL(self->object.startDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_StoredFieldsWriter_writeField(t_StoredFieldsWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::IndexableField a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::IndexableField::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.writeField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "writeField", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap.h"
#include "org/apache/lucene/search/vectorhighlight/FieldQuery.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldQuery$QueryPhraseMap::class$ = NULL;
          jmethodID *FieldQuery$QueryPhraseMap::mids$ = NULL;
          bool FieldQuery$QueryPhraseMap::live$ = false;

          jclass FieldQuery$QueryPhraseMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d4060136] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/FieldQuery;)V");
              mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
              mids$[mid_getTermMap_1ad656ab] = env->getMethodID(cls, "getTermMap", "(Ljava/lang/String;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");
              mids$[mid_getTermOrPhraseNumber_54c6a179] = env->getMethodID(cls, "getTermOrPhraseNumber", "()I");
              mids$[mid_isTerminal_54c6a16a] = env->getMethodID(cls, "isTerminal", "()Z");
              mids$[mid_isValidTermOrPhrase_1fde8fcf] = env->getMethodID(cls, "isValidTermOrPhrase", "(Ljava/util/List;)Z");
              mids$[mid_searchPhrase_94f40592] = env->getMethodID(cls, "searchPhrase", "(Ljava/util/List;)Lorg/apache/lucene/search/vectorhighlight/FieldQuery$QueryPhraseMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldQuery$QueryPhraseMap::FieldQuery$QueryPhraseMap(const ::org::apache::lucene::search::vectorhighlight::FieldQuery & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d4060136, a0.this$)) {}

          jfloat FieldQuery$QueryPhraseMap::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
          }

          jint FieldQuery$QueryPhraseMap::getSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
          }

          FieldQuery$QueryPhraseMap FieldQuery$QueryPhraseMap::getTermMap(const ::java::lang::String & a0) const
          {
            return FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_getTermMap_1ad656ab], a0.this$));
          }

          jint FieldQuery$QueryPhraseMap::getTermOrPhraseNumber() const
          {
            return env->callIntMethod(this$, mids$[mid_getTermOrPhraseNumber_54c6a179]);
          }

          jboolean FieldQuery$QueryPhraseMap::isTerminal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isTerminal_54c6a16a]);
          }

          jboolean FieldQuery$QueryPhraseMap::isValidTermOrPhrase(const ::java::util::List & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isValidTermOrPhrase_1fde8fcf], a0.this$);
          }

          FieldQuery$QueryPhraseMap FieldQuery$QueryPhraseMap::searchPhrase(const ::java::util::List & a0) const
          {
            return FieldQuery$QueryPhraseMap(env->callObjectMethod(this$, mids$[mid_searchPhrase_94f40592], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldQuery$QueryPhraseMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldQuery$QueryPhraseMap_init_(t_FieldQuery$QueryPhraseMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldQuery$QueryPhraseMap_getBoost(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_getSlop(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_getTermMap(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_getTermOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_isTerminal(t_FieldQuery$QueryPhraseMap *self);
          static PyObject *t_FieldQuery$QueryPhraseMap_isValidTermOrPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_searchPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__boost(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__slop(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__termOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyObject *t_FieldQuery$QueryPhraseMap_get__terminal(t_FieldQuery$QueryPhraseMap *self, void *data);
          static PyGetSetDef t_FieldQuery$QueryPhraseMap__fields_[] = {
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, boost),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, slop),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, termOrPhraseNumber),
            DECLARE_GET_FIELD(t_FieldQuery$QueryPhraseMap, terminal),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldQuery$QueryPhraseMap__methods_[] = {
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getSlop, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getTermMap, METH_O),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, getTermOrPhraseNumber, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, isTerminal, METH_NOARGS),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, isValidTermOrPhrase, METH_O),
            DECLARE_METHOD(t_FieldQuery$QueryPhraseMap, searchPhrase, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldQuery$QueryPhraseMap, t_FieldQuery$QueryPhraseMap, ::java::lang::Object, FieldQuery$QueryPhraseMap, t_FieldQuery$QueryPhraseMap_init_, 0, 0, t_FieldQuery$QueryPhraseMap__fields_, 0, 0);

          void t_FieldQuery$QueryPhraseMap::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldQuery$QueryPhraseMap), module, "FieldQuery$QueryPhraseMap", 0);
          }

          void t_FieldQuery$QueryPhraseMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldQuery$QueryPhraseMap).tp_dict, "class_", make_descriptor(FieldQuery$QueryPhraseMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldQuery$QueryPhraseMap).tp_dict, "wrapfn_", make_descriptor(t_FieldQuery$QueryPhraseMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldQuery$QueryPhraseMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldQuery$QueryPhraseMap::initializeClass, 1)))
              return NULL;
            return t_FieldQuery$QueryPhraseMap::wrap_Object(FieldQuery$QueryPhraseMap(((t_FieldQuery$QueryPhraseMap *) arg)->object.this$));
          }
          static PyObject *t_FieldQuery$QueryPhraseMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldQuery$QueryPhraseMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldQuery$QueryPhraseMap_init_(t_FieldQuery$QueryPhraseMap *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldQuery a0((jobject) NULL);
            FieldQuery$QueryPhraseMap object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::FieldQuery::initializeClass, &a0))
            {
              INT_CALL(object = FieldQuery$QueryPhraseMap(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getBoost(t_FieldQuery$QueryPhraseMap *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getSlop(t_FieldQuery$QueryPhraseMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSlop());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getTermMap(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getTermMap(a0));
              return t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getTermMap", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_getTermOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getTermOrPhraseNumber());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_isTerminal(t_FieldQuery$QueryPhraseMap *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isTerminal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_isValidTermOrPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.isValidTermOrPhrase(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isValidTermOrPhrase", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_searchPhrase(t_FieldQuery$QueryPhraseMap *self, PyObject *arg)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            FieldQuery$QueryPhraseMap result((jobject) NULL);

            if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.searchPhrase(a0));
              return t_FieldQuery$QueryPhraseMap::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "searchPhrase", arg);
            return NULL;
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__boost(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__slop(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSlop());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__termOrPhraseNumber(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getTermOrPhraseNumber());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldQuery$QueryPhraseMap_get__terminal(t_FieldQuery$QueryPhraseMap *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isTerminal());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NIOFSDirectory.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NIOFSDirectory::class$ = NULL;
        jmethodID *NIOFSDirectory::mids$ = NULL;
        bool NIOFSDirectory::live$ = false;

        jclass NIOFSDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NIOFSDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5f9cf6ef] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NIOFSDirectory::NIOFSDirectory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        NIOFSDirectory::NIOFSDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_5f9cf6ef, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IndexInput NIOFSDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NIOFSDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NIOFSDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NIOFSDirectory_init_(t_NIOFSDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NIOFSDirectory_openInput(t_NIOFSDirectory *self, PyObject *args);

        static PyMethodDef t_NIOFSDirectory__methods_[] = {
          DECLARE_METHOD(t_NIOFSDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NIOFSDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NIOFSDirectory, openInput, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NIOFSDirectory, t_NIOFSDirectory, ::org::apache::lucene::store::FSDirectory, NIOFSDirectory, t_NIOFSDirectory_init_, 0, 0, 0, 0, 0);

        void t_NIOFSDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(NIOFSDirectory), module, "NIOFSDirectory", 0);
        }

        void t_NIOFSDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NIOFSDirectory).tp_dict, "class_", make_descriptor(NIOFSDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NIOFSDirectory).tp_dict, "wrapfn_", make_descriptor(t_NIOFSDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NIOFSDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NIOFSDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NIOFSDirectory::initializeClass, 1)))
            return NULL;
          return t_NIOFSDirectory::wrap_Object(NIOFSDirectory(((t_NIOFSDirectory *) arg)->object.this$));
        }
        static PyObject *t_NIOFSDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NIOFSDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NIOFSDirectory_init_(t_NIOFSDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              NIOFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = NIOFSDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              NIOFSDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = NIOFSDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NIOFSDirectory_openInput(t_NIOFSDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NIOFSDirectory), (PyObject *) self, "openInput", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/miscellaneous/CapitalizationFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CapitalizationFilterFactory::class$ = NULL;
          jmethodID *CapitalizationFilterFactory::mids$ = NULL;
          bool CapitalizationFilterFactory::live$ = false;
          ::java::lang::String *CapitalizationFilterFactory::FORCE_FIRST_LETTER = NULL;
          ::java::lang::String *CapitalizationFilterFactory::KEEP = NULL;
          ::java::lang::String *CapitalizationFilterFactory::KEEP_IGNORE_CASE = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MAX_TOKEN_LENGTH = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MAX_WORD_COUNT = NULL;
          ::java::lang::String *CapitalizationFilterFactory::MIN_WORD_LENGTH = NULL;
          ::java::lang::String *CapitalizationFilterFactory::OK_PREFIX = NULL;
          ::java::lang::String *CapitalizationFilterFactory::ONLY_FIRST_WORD = NULL;

          jclass CapitalizationFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_9cf532c8] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/CapitalizationFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FORCE_FIRST_LETTER = new ::java::lang::String(env->getStaticObjectField(cls, "FORCE_FIRST_LETTER", "Ljava/lang/String;"));
              KEEP = new ::java::lang::String(env->getStaticObjectField(cls, "KEEP", "Ljava/lang/String;"));
              KEEP_IGNORE_CASE = new ::java::lang::String(env->getStaticObjectField(cls, "KEEP_IGNORE_CASE", "Ljava/lang/String;"));
              MAX_TOKEN_LENGTH = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_TOKEN_LENGTH", "Ljava/lang/String;"));
              MAX_WORD_COUNT = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_WORD_COUNT", "Ljava/lang/String;"));
              MIN_WORD_LENGTH = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_WORD_LENGTH", "Ljava/lang/String;"));
              OK_PREFIX = new ::java::lang::String(env->getStaticObjectField(cls, "OK_PREFIX", "Ljava/lang/String;"));
              ONLY_FIRST_WORD = new ::java::lang::String(env->getStaticObjectField(cls, "ONLY_FIRST_WORD", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CapitalizationFilterFactory::CapitalizationFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter CapitalizationFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter(env->callObjectMethod(this$, mids$[mid_create_9cf532c8], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CapitalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CapitalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CapitalizationFilterFactory_init_(t_CapitalizationFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CapitalizationFilterFactory_create(t_CapitalizationFilterFactory *self, PyObject *args);

          static PyMethodDef t_CapitalizationFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CapitalizationFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CapitalizationFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CapitalizationFilterFactory, t_CapitalizationFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CapitalizationFilterFactory, t_CapitalizationFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CapitalizationFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CapitalizationFilterFactory), module, "CapitalizationFilterFactory", 0);
          }

          void t_CapitalizationFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "class_", make_descriptor(CapitalizationFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CapitalizationFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CapitalizationFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "FORCE_FIRST_LETTER", make_descriptor(j2p(*CapitalizationFilterFactory::FORCE_FIRST_LETTER)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "KEEP", make_descriptor(j2p(*CapitalizationFilterFactory::KEEP)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "KEEP_IGNORE_CASE", make_descriptor(j2p(*CapitalizationFilterFactory::KEEP_IGNORE_CASE)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "MAX_TOKEN_LENGTH", make_descriptor(j2p(*CapitalizationFilterFactory::MAX_TOKEN_LENGTH)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "MAX_WORD_COUNT", make_descriptor(j2p(*CapitalizationFilterFactory::MAX_WORD_COUNT)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "MIN_WORD_LENGTH", make_descriptor(j2p(*CapitalizationFilterFactory::MIN_WORD_LENGTH)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "OK_PREFIX", make_descriptor(j2p(*CapitalizationFilterFactory::OK_PREFIX)));
            PyDict_SetItemString(PY_TYPE(CapitalizationFilterFactory).tp_dict, "ONLY_FIRST_WORD", make_descriptor(j2p(*CapitalizationFilterFactory::ONLY_FIRST_WORD)));
          }

          static PyObject *t_CapitalizationFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CapitalizationFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CapitalizationFilterFactory::wrap_Object(CapitalizationFilterFactory(((t_CapitalizationFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CapitalizationFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CapitalizationFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CapitalizationFilterFactory_init_(t_CapitalizationFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CapitalizationFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CapitalizationFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CapitalizationFilterFactory_create(t_CapitalizationFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::CapitalizationFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_CapitalizationFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CapitalizationFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {

          ::java::lang::Class *SortedSetDocValuesReaderState::class$ = NULL;
          jmethodID *SortedSetDocValuesReaderState::mids$ = NULL;
          bool SortedSetDocValuesReaderState::live$ = false;

          jclass SortedSetDocValuesReaderState::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getDocValues_4bead171] = env->getMethodID(cls, "getDocValues", "()Lorg/apache/lucene/index/SortedSetDocValues;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getOrdRange_73e2ee38] = env->getMethodID(cls, "getOrdRange", "(Ljava/lang/String;)Lorg/apache/lucene/facet/sortedset/SortedSetDocValuesReaderState$OrdRange;");
              mids$[mid_getOrigReader_94bbd010] = env->getMethodID(cls, "getOrigReader", "()Lorg/apache/lucene/index/IndexReader;");
              mids$[mid_getPrefixToOrdRange_db60befd] = env->getMethodID(cls, "getPrefixToOrdRange", "()Ljava/util/Map;");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::index::SortedSetDocValues SortedSetDocValuesReaderState::getDocValues() const
          {
            return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getDocValues_4bead171]));
          }

          ::java::lang::String SortedSetDocValuesReaderState::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange SortedSetDocValuesReaderState::getOrdRange(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange(env->callObjectMethod(this$, mids$[mid_getOrdRange_73e2ee38], a0.this$));
          }

          ::org::apache::lucene::index::IndexReader SortedSetDocValuesReaderState::getOrigReader() const
          {
            return ::org::apache::lucene::index::IndexReader(env->callObjectMethod(this$, mids$[mid_getOrigReader_94bbd010]));
          }

          ::java::util::Map SortedSetDocValuesReaderState::getPrefixToOrdRange() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getPrefixToOrdRange_db60befd]));
          }

          jint SortedSetDocValuesReaderState::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace sortedset {
          static PyObject *t_SortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_getDocValues(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getField(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getOrdRange(t_SortedSetDocValuesReaderState *self, PyObject *arg);
          static PyObject *t_SortedSetDocValuesReaderState_getOrigReader(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getPrefixToOrdRange(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_getSize(t_SortedSetDocValuesReaderState *self);
          static PyObject *t_SortedSetDocValuesReaderState_get__docValues(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__field(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__origReader(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__prefixToOrdRange(t_SortedSetDocValuesReaderState *self, void *data);
          static PyObject *t_SortedSetDocValuesReaderState_get__size(t_SortedSetDocValuesReaderState *self, void *data);
          static PyGetSetDef t_SortedSetDocValuesReaderState__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, docValues),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, field),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, origReader),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, prefixToOrdRange),
            DECLARE_GET_FIELD(t_SortedSetDocValuesReaderState, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetDocValuesReaderState__methods_[] = {
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getDocValues, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getField, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getOrdRange, METH_O),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getOrigReader, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getPrefixToOrdRange, METH_NOARGS),
            DECLARE_METHOD(t_SortedSetDocValuesReaderState, getSize, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetDocValuesReaderState, t_SortedSetDocValuesReaderState, ::java::lang::Object, SortedSetDocValuesReaderState, abstract_init, 0, 0, t_SortedSetDocValuesReaderState__fields_, 0, 0);

          void t_SortedSetDocValuesReaderState::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetDocValuesReaderState), module, "SortedSetDocValuesReaderState", 0);
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "OrdRange", make_descriptor(&PY_TYPE(SortedSetDocValuesReaderState$OrdRange)));
          }

          void t_SortedSetDocValuesReaderState::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "class_", make_descriptor(SortedSetDocValuesReaderState::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesReaderState::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetDocValuesReaderState).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedSetDocValuesReaderState_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetDocValuesReaderState::initializeClass, 1)))
              return NULL;
            return t_SortedSetDocValuesReaderState::wrap_Object(SortedSetDocValuesReaderState(((t_SortedSetDocValuesReaderState *) arg)->object.this$));
          }
          static PyObject *t_SortedSetDocValuesReaderState_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetDocValuesReaderState::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SortedSetDocValuesReaderState_getDocValues(t_SortedSetDocValuesReaderState *self)
          {
            ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);
            OBJ_CALL(result = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getField(t_SortedSetDocValuesReaderState *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getField());
            return j2p(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getOrdRange(t_SortedSetDocValuesReaderState *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::facet::sortedset::SortedSetDocValuesReaderState$OrdRange result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getOrdRange(a0));
              return ::org::apache::lucene::facet::sortedset::t_SortedSetDocValuesReaderState$OrdRange::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getOrdRange", arg);
            return NULL;
          }

          static PyObject *t_SortedSetDocValuesReaderState_getOrigReader(t_SortedSetDocValuesReaderState *self)
          {
            ::org::apache::lucene::index::IndexReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getOrigReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_getPrefixToOrdRange(t_SortedSetDocValuesReaderState *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::org::apache::lucene::facet::sortedset::PY_TYPE(SortedSetDocValuesReaderState$OrdRange));
          }

          static PyObject *t_SortedSetDocValuesReaderState_getSize(t_SortedSetDocValuesReaderState *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__docValues(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::SortedSetDocValues value((jobject) NULL);
            OBJ_CALL(value = self->object.getDocValues());
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__field(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__origReader(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::org::apache::lucene::index::IndexReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getOrigReader());
            return ::org::apache::lucene::index::t_IndexReader::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__prefixToOrdRange(t_SortedSetDocValuesReaderState *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getPrefixToOrdRange());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_SortedSetDocValuesReaderState_get__size(t_SortedSetDocValuesReaderState *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/TermRangeQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *TermRangeQueryNode::class$ = NULL;
              jmethodID *TermRangeQueryNode::mids$ = NULL;
              bool TermRangeQueryNode::live$ = false;

              jclass TermRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/TermRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_b4afba80] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;ZZ)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              TermRangeQueryNode::TermRangeQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode & a1, jboolean a2, jboolean a3) : ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode(env->newObject(initializeClass, &mids$, mid_init$_b4afba80, a0.this$, a1.this$, a2, a3)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_TermRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_TermRangeQueryNode_of_(t_TermRangeQueryNode *self, PyObject *args);
              static int t_TermRangeQueryNode_init_(t_TermRangeQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_TermRangeQueryNode_get__parameters_(t_TermRangeQueryNode *self, void *data);
              static PyGetSetDef t_TermRangeQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_TermRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_TermRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_TermRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_TermRangeQueryNode, of_, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(TermRangeQueryNode, t_TermRangeQueryNode, ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode, TermRangeQueryNode, t_TermRangeQueryNode_init_, 0, 0, t_TermRangeQueryNode__fields_, 0, 0);
              PyObject *t_TermRangeQueryNode::wrap_Object(const TermRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_TermRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_TermRangeQueryNode *self = (t_TermRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_TermRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_TermRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_TermRangeQueryNode *self = (t_TermRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_TermRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(TermRangeQueryNode), module, "TermRangeQueryNode", 0);
              }

              void t_TermRangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNode).tp_dict, "class_", make_descriptor(TermRangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_TermRangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(TermRangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_TermRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, TermRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_TermRangeQueryNode::wrap_Object(TermRangeQueryNode(((t_TermRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_TermRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, TermRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_TermRangeQueryNode_of_(t_TermRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static int t_TermRangeQueryNode_init_(t_TermRangeQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                TermRangeQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kkZZ", ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TermRangeQueryNode(a0, a1, a2, a3));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::queryparser::flexible::core::nodes::PY_TYPE(FieldQueryNode);
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
              static PyObject *t_TermRangeQueryNode_get__parameters_(t_TermRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *MultiPhraseQueryNode::class$ = NULL;
              jmethodID *MultiPhraseQueryNode::mids$ = NULL;
              bool MultiPhraseQueryNode::live$ = false;

              jclass MultiPhraseQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/MultiPhraseQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MultiPhraseQueryNode::MultiPhraseQueryNode() : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode MultiPhraseQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence MultiPhraseQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              void MultiPhraseQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence MultiPhraseQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String MultiPhraseQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_MultiPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MultiPhraseQueryNode_init_(t_MultiPhraseQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MultiPhraseQueryNode_cloneTree(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_getField(t_MultiPhraseQueryNode *self);
              static PyObject *t_MultiPhraseQueryNode_setField(t_MultiPhraseQueryNode *self, PyObject *arg);
              static PyObject *t_MultiPhraseQueryNode_toQueryString(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_toString(t_MultiPhraseQueryNode *self, PyObject *args);
              static PyObject *t_MultiPhraseQueryNode_get__field(t_MultiPhraseQueryNode *self, void *data);
              static int t_MultiPhraseQueryNode_set__field(t_MultiPhraseQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_MultiPhraseQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_MultiPhraseQueryNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_MultiPhraseQueryNode__methods_[] = {
                DECLARE_METHOD(t_MultiPhraseQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, setField, METH_O),
                DECLARE_METHOD(t_MultiPhraseQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_MultiPhraseQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MultiPhraseQueryNode, t_MultiPhraseQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, MultiPhraseQueryNode, t_MultiPhraseQueryNode_init_, 0, 0, t_MultiPhraseQueryNode__fields_, 0, 0);

              void t_MultiPhraseQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(MultiPhraseQueryNode), module, "MultiPhraseQueryNode", 0);
              }

              void t_MultiPhraseQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNode).tp_dict, "class_", make_descriptor(MultiPhraseQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNode).tp_dict, "wrapfn_", make_descriptor(t_MultiPhraseQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MultiPhraseQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MultiPhraseQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MultiPhraseQueryNode::initializeClass, 1)))
                  return NULL;
                return t_MultiPhraseQueryNode::wrap_Object(MultiPhraseQueryNode(((t_MultiPhraseQueryNode *) arg)->object.this$));
              }
              static PyObject *t_MultiPhraseQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MultiPhraseQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MultiPhraseQueryNode_init_(t_MultiPhraseQueryNode *self, PyObject *args, PyObject *kwds)
              {
                MultiPhraseQueryNode object((jobject) NULL);

                INT_CALL(object = MultiPhraseQueryNode());
                self->object = object;

                return 0;
              }

              static PyObject *t_MultiPhraseQueryNode_cloneTree(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_getField(t_MultiPhraseQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_MultiPhraseQueryNode_setField(t_MultiPhraseQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_MultiPhraseQueryNode_toQueryString(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_toString(t_MultiPhraseQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(MultiPhraseQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_MultiPhraseQueryNode_get__field(t_MultiPhraseQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_MultiPhraseQueryNode_set__field(t_MultiPhraseQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/stempel/StempelStemmer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelFilter::class$ = NULL;
          jmethodID *StempelFilter::mids$ = NULL;
          bool StempelFilter::live$ = false;
          jint StempelFilter::DEFAULT_MIN_LENGTH = (jint) 0;

          jclass StempelFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2cfd7ca0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/stempel/StempelStemmer;)V");
              mids$[mid_init$_0fe419aa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/stempel/StempelStemmer;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MIN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelFilter::StempelFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::stempel::StempelStemmer & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_2cfd7ca0, a0.this$, a1.this$)) {}

          StempelFilter::StempelFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::stempel::StempelStemmer & a1, jint a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_0fe419aa, a0.this$, a1.this$, a2)) {}

          jboolean StempelFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelFilter_init_(t_StempelFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelFilter_incrementToken(t_StempelFilter *self, PyObject *args);

          static PyMethodDef t_StempelFilter__methods_[] = {
            DECLARE_METHOD(t_StempelFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StempelFilter, t_StempelFilter, ::org::apache::lucene::analysis::TokenFilter, StempelFilter, t_StempelFilter_init_, 0, 0, 0, 0, 0);

          void t_StempelFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelFilter), module, "StempelFilter", 0);
          }

          void t_StempelFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "class_", make_descriptor(StempelFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "wrapfn_", make_descriptor(t_StempelFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StempelFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "DEFAULT_MIN_LENGTH", make_descriptor(StempelFilter::DEFAULT_MIN_LENGTH));
          }

          static PyObject *t_StempelFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelFilter::initializeClass, 1)))
              return NULL;
            return t_StempelFilter::wrap_Object(StempelFilter(((t_StempelFilter *) arg)->object.this$));
          }
          static PyObject *t_StempelFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelFilter_init_(t_StempelFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::stempel::StempelStemmer a1((jobject) NULL);
                StempelFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::stempel::StempelStemmer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = StempelFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::stempel::StempelStemmer a1((jobject) NULL);
                jint a2;
                StempelFilter object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::stempel::StempelStemmer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = StempelFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelFilter_incrementToken(t_StempelFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StempelFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *BytesRefFSTEnum::class$ = NULL;
          jmethodID *BytesRefFSTEnum::mids$ = NULL;
          bool BytesRefFSTEnum::live$ = false;

          jclass BytesRefFSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/BytesRefFSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d454d65c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
              mids$[mid_current_6016cb55] = env->getMethodID(cls, "current", "()Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_next_6016cb55] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekCeil_ec56792b] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekExact_ec56792b] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_seekFloor_ec56792b] = env->getMethodID(cls, "seekFloor", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/util/fst/BytesRefFSTEnum$InputOutput;");
              mids$[mid_grow_54c6a166] = env->getMethodID(cls, "grow", "()V");
              mids$[mid_getTargetLabel_54c6a179] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_getCurrentLabel_54c6a179] = env->getMethodID(cls, "getCurrentLabel", "()I");
              mids$[mid_setCurrentLabel_39c7bd3c] = env->getMethodID(cls, "setCurrentLabel", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BytesRefFSTEnum::BytesRefFSTEnum(const ::org::apache::lucene::util::fst::FST & a0) : ::org::apache::lucene::util::fst::FSTEnum(env->newObject(initializeClass, &mids$, mid_init$_d454d65c, a0.this$)) {}

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::current() const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_current_6016cb55]));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::next() const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_next_6016cb55]));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekCeil_ec56792b], a0.this$));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekExact_ec56792b], a0.this$));
          }

          ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput BytesRefFSTEnum::seekFloor(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            return ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekFloor_ec56792b], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_BytesRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_of_(t_BytesRefFSTEnum *self, PyObject *args);
          static int t_BytesRefFSTEnum_init_(t_BytesRefFSTEnum *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BytesRefFSTEnum_current(t_BytesRefFSTEnum *self);
          static PyObject *t_BytesRefFSTEnum_next(t_BytesRefFSTEnum *self);
          static PyObject *t_BytesRefFSTEnum_seekCeil(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_seekExact(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_seekFloor(t_BytesRefFSTEnum *self, PyObject *arg);
          static PyObject *t_BytesRefFSTEnum_get__parameters_(t_BytesRefFSTEnum *self, void *data);
          static PyGetSetDef t_BytesRefFSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_BytesRefFSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BytesRefFSTEnum__methods_[] = {
            DECLARE_METHOD(t_BytesRefFSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BytesRefFSTEnum, of_, METH_VARARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, current, METH_NOARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, next, METH_NOARGS),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekCeil, METH_O),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekExact, METH_O),
            DECLARE_METHOD(t_BytesRefFSTEnum, seekFloor, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BytesRefFSTEnum, t_BytesRefFSTEnum, ::org::apache::lucene::util::fst::FSTEnum, BytesRefFSTEnum, t_BytesRefFSTEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_BytesRefFSTEnum *)) get_generic_next< t_BytesRefFSTEnum,::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput,::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput >), t_BytesRefFSTEnum__fields_, 0, 0);
          PyObject *t_BytesRefFSTEnum::wrap_Object(const BytesRefFSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum *self = (t_BytesRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_BytesRefFSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_BytesRefFSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_BytesRefFSTEnum *self = (t_BytesRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_BytesRefFSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(BytesRefFSTEnum), module, "BytesRefFSTEnum", 0);
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "InputOutput", make_descriptor(&PY_TYPE(BytesRefFSTEnum$InputOutput)));
          }

          void t_BytesRefFSTEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "class_", make_descriptor(BytesRefFSTEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "wrapfn_", make_descriptor(t_BytesRefFSTEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BytesRefFSTEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BytesRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BytesRefFSTEnum::initializeClass, 1)))
              return NULL;
            return t_BytesRefFSTEnum::wrap_Object(BytesRefFSTEnum(((t_BytesRefFSTEnum *) arg)->object.this$));
          }
          static PyObject *t_BytesRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BytesRefFSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_BytesRefFSTEnum_of_(t_BytesRefFSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_BytesRefFSTEnum_init_(t_BytesRefFSTEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            BytesRefFSTEnum object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
            {
              INT_CALL(object = BytesRefFSTEnum(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BytesRefFSTEnum_current(t_BytesRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.current());
            return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_BytesRefFSTEnum_next(t_BytesRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_BytesRefFSTEnum_seekCeil(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
            return NULL;
          }

          static PyObject *t_BytesRefFSTEnum_seekExact(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekExact(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekExact", arg);
            return NULL;
          }

          static PyObject *t_BytesRefFSTEnum_seekFloor(t_BytesRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::BytesRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekFloor(a0));
              return ::org::apache::lucene::util::fst::t_BytesRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekFloor", arg);
            return NULL;
          }
          static PyObject *t_BytesRefFSTEnum_get__parameters_(t_BytesRefFSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/SpecialOperations.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *SpecialOperations::class$ = NULL;
          jmethodID *SpecialOperations::mids$ = NULL;
          bool SpecialOperations::live$ = false;

          jclass SpecialOperations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/SpecialOperations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getCommonPrefix_c2342f4b] = env->getStaticMethodID(cls, "getCommonPrefix", "(Lorg/apache/lucene/util/automaton/Automaton;)Ljava/lang/String;");
              mids$[mid_getCommonPrefixBytesRef_b889220f] = env->getStaticMethodID(cls, "getCommonPrefixBytesRef", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getCommonSuffix_c2342f4b] = env->getStaticMethodID(cls, "getCommonSuffix", "(Lorg/apache/lucene/util/automaton/Automaton;)Ljava/lang/String;");
              mids$[mid_getCommonSuffixBytesRef_b889220f] = env->getStaticMethodID(cls, "getCommonSuffixBytesRef", "(Lorg/apache/lucene/util/automaton/Automaton;)Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getFiniteStrings_4e50ce8f] = env->getStaticMethodID(cls, "getFiniteStrings", "(Lorg/apache/lucene/util/automaton/Automaton;I)Ljava/util/Set;");
              mids$[mid_isFinite_fc7cf398] = env->getStaticMethodID(cls, "isFinite", "(Lorg/apache/lucene/util/automaton/Automaton;)Z");
              mids$[mid_reverse_f8f6971d] = env->getStaticMethodID(cls, "reverse", "(Lorg/apache/lucene/util/automaton/Automaton;)Ljava/util/Set;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String SpecialOperations::getCommonPrefix(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getCommonPrefix_c2342f4b], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef SpecialOperations::getCommonPrefixBytesRef(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_getCommonPrefixBytesRef_b889220f], a0.this$));
          }

          ::java::lang::String SpecialOperations::getCommonSuffix(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getCommonSuffix_c2342f4b], a0.this$));
          }

          ::org::apache::lucene::util::BytesRef SpecialOperations::getCommonSuffixBytesRef(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::BytesRef(env->callStaticObjectMethod(cls, mids$[mid_getCommonSuffixBytesRef_b889220f], a0.this$));
          }

          ::java::util::Set SpecialOperations::getFiniteStrings(const ::org::apache::lucene::util::automaton::Automaton & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_getFiniteStrings_4e50ce8f], a0.this$, a1));
          }

          jboolean SpecialOperations::isFinite(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_isFinite_fc7cf398], a0.this$);
          }

          ::java::util::Set SpecialOperations::reverse(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_reverse_f8f6971d], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_SpecialOperations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getCommonPrefix(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getCommonPrefixBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getCommonSuffix(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getCommonSuffixBytesRef(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_getFiniteStrings(PyTypeObject *type, PyObject *args);
          static PyObject *t_SpecialOperations_isFinite(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpecialOperations_reverse(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_SpecialOperations__methods_[] = {
            DECLARE_METHOD(t_SpecialOperations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getCommonPrefix, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getCommonPrefixBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getCommonSuffix, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getCommonSuffixBytesRef, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, getFiniteStrings, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, isFinite, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpecialOperations, reverse, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpecialOperations, t_SpecialOperations, ::java::lang::Object, SpecialOperations, abstract_init, 0, 0, 0, 0, 0);

          void t_SpecialOperations::install(PyObject *module)
          {
            installType(&PY_TYPE(SpecialOperations), module, "SpecialOperations", 0);
          }

          void t_SpecialOperations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpecialOperations).tp_dict, "class_", make_descriptor(SpecialOperations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpecialOperations).tp_dict, "wrapfn_", make_descriptor(t_SpecialOperations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpecialOperations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpecialOperations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpecialOperations::initializeClass, 1)))
              return NULL;
            return t_SpecialOperations::wrap_Object(SpecialOperations(((t_SpecialOperations *) arg)->object.this$));
          }
          static PyObject *t_SpecialOperations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpecialOperations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpecialOperations_getCommonPrefix(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getCommonPrefix(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getCommonPrefix", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_getCommonPrefixBytesRef(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getCommonPrefixBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getCommonPrefixBytesRef", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_getCommonSuffix(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getCommonSuffix(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getCommonSuffix", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_getCommonSuffixBytesRef(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getCommonSuffixBytesRef(a0));
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getCommonSuffixBytesRef", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_getFiniteStrings(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jint a1;
            ::java::util::Set result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::getFiniteStrings(a0, a1));
              return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(IntsRef));
            }

            PyErr_SetArgsError(type, "getFiniteStrings", args);
            return NULL;
          }

          static PyObject *t_SpecialOperations_isFinite(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::isFinite(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isFinite", arg);
            return NULL;
          }

          static PyObject *t_SpecialOperations_reverse(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            ::java::util::Set result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::automaton::SpecialOperations::reverse(a0));
              return ::java::util::t_Set::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(State));
            }

            PyErr_SetArgsError(type, "reverse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/QueryTemplateManager.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/util/Properties.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *QueryTemplateManager::class$ = NULL;
          jmethodID *QueryTemplateManager::mids$ = NULL;
          bool QueryTemplateManager::live$ = false;

          jclass QueryTemplateManager::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/QueryTemplateManager");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_addDefaultQueryTemplate_be2e4f90] = env->getMethodID(cls, "addDefaultQueryTemplate", "(Ljava/io/InputStream;)V");
              mids$[mid_addQueryTemplate_fc5ef09a] = env->getMethodID(cls, "addQueryTemplate", "(Ljava/lang/String;Ljava/io/InputStream;)V");
              mids$[mid_getQueryAsXmlString_8b0ed65b] = env->getMethodID(cls, "getQueryAsXmlString", "(Ljava/util/Properties;)Ljava/lang/String;");
              mids$[mid_getQueryAsXmlString_cf43ccf5] = env->getMethodID(cls, "getQueryAsXmlString", "(Ljava/util/Properties;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getQueryAsXmlString_02821f09] = env->getStaticMethodID(cls, "getQueryAsXmlString", "(Ljava/util/Properties;Ljava/io/InputStream;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryTemplateManager::QueryTemplateManager() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          QueryTemplateManager::QueryTemplateManager(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          void QueryTemplateManager::addDefaultQueryTemplate(const ::java::io::InputStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_addDefaultQueryTemplate_be2e4f90], a0.this$);
          }

          void QueryTemplateManager::addQueryTemplate(const ::java::lang::String & a0, const ::java::io::InputStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addQueryTemplate_fc5ef09a], a0.this$, a1.this$);
          }

          ::java::lang::String QueryTemplateManager::getQueryAsXmlString(const ::java::util::Properties & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getQueryAsXmlString_8b0ed65b], a0.this$));
          }

          ::java::lang::String QueryTemplateManager::getQueryAsXmlString(const ::java::util::Properties & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getQueryAsXmlString_cf43ccf5], a0.this$, a1.this$));
          }

          ::java::lang::String QueryTemplateManager::getQueryAsXmlString(const ::java::util::Properties & a0, const ::java::io::InputStream & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getQueryAsXmlString_02821f09], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_QueryTemplateManager_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryTemplateManager_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryTemplateManager_init_(t_QueryTemplateManager *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryTemplateManager_addDefaultQueryTemplate(t_QueryTemplateManager *self, PyObject *arg);
          static PyObject *t_QueryTemplateManager_addQueryTemplate(t_QueryTemplateManager *self, PyObject *args);
          static PyObject *t_QueryTemplateManager_getQueryAsXmlString(t_QueryTemplateManager *self, PyObject *args);
          static PyObject *t_QueryTemplateManager_getQueryAsXmlString_(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_QueryTemplateManager__methods_[] = {
            DECLARE_METHOD(t_QueryTemplateManager, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTemplateManager, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTemplateManager, addDefaultQueryTemplate, METH_O),
            DECLARE_METHOD(t_QueryTemplateManager, addQueryTemplate, METH_VARARGS),
            DECLARE_METHOD(t_QueryTemplateManager, getQueryAsXmlString, METH_VARARGS),
            DECLARE_METHOD(t_QueryTemplateManager, getQueryAsXmlString_, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryTemplateManager, t_QueryTemplateManager, ::java::lang::Object, QueryTemplateManager, t_QueryTemplateManager_init_, 0, 0, 0, 0, 0);

          void t_QueryTemplateManager::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryTemplateManager), module, "QueryTemplateManager", 0);
          }

          void t_QueryTemplateManager::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryTemplateManager).tp_dict, "class_", make_descriptor(QueryTemplateManager::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryTemplateManager).tp_dict, "wrapfn_", make_descriptor(t_QueryTemplateManager::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryTemplateManager).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryTemplateManager_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryTemplateManager::initializeClass, 1)))
              return NULL;
            return t_QueryTemplateManager::wrap_Object(QueryTemplateManager(((t_QueryTemplateManager *) arg)->object.this$));
          }
          static PyObject *t_QueryTemplateManager_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryTemplateManager::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryTemplateManager_init_(t_QueryTemplateManager *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                QueryTemplateManager object((jobject) NULL);

                INT_CALL(object = QueryTemplateManager());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::io::InputStream a0((jobject) NULL);
                QueryTemplateManager object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = QueryTemplateManager(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryTemplateManager_addDefaultQueryTemplate(t_QueryTemplateManager *self, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(self->object.addDefaultQueryTemplate(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addDefaultQueryTemplate", arg);
            return NULL;
          }

          static PyObject *t_QueryTemplateManager_addQueryTemplate(t_QueryTemplateManager *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::java::io::InputStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addQueryTemplate(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addQueryTemplate", args);
            return NULL;
          }

          static PyObject *t_QueryTemplateManager_getQueryAsXmlString(t_QueryTemplateManager *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Properties a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Properties::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_))
                {
                  OBJ_CALL(result = self->object.getQueryAsXmlString(a0));
                  return j2p(result);
                }
              }
              break;
             case 2:
              {
                ::java::util::Properties a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::java::util::Properties::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.getQueryAsXmlString(a0, a1));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getQueryAsXmlString", args);
            return NULL;
          }

          static PyObject *t_QueryTemplateManager_getQueryAsXmlString_(PyTypeObject *type, PyObject *args)
          {
            ::java::util::Properties a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::io::InputStream a1((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "Kk", ::java::util::Properties::initializeClass, ::java::io::InputStream::initializeClass, &a0, &p0, ::java::util::t_Properties::parameters_, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::queryparser::xml::QueryTemplateManager::getQueryAsXmlString(a0, a1));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getQueryAsXmlString_", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/NumDocsValueSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *NumDocsValueSource::class$ = NULL;
            jmethodID *NumDocsValueSource::mids$ = NULL;
            bool NumDocsValueSource::live$ = false;

            jclass NumDocsValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/NumDocsValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NumDocsValueSource::NumDocsValueSource() : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ::java::lang::String NumDocsValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean NumDocsValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues NumDocsValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint NumDocsValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String NumDocsValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_NumDocsValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NumDocsValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NumDocsValueSource_init_(t_NumDocsValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NumDocsValueSource_description(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_equals(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_getValues(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_hashCode(t_NumDocsValueSource *self, PyObject *args);
            static PyObject *t_NumDocsValueSource_name(t_NumDocsValueSource *self);

            static PyMethodDef t_NumDocsValueSource__methods_[] = {
              DECLARE_METHOD(t_NumDocsValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumDocsValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NumDocsValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_NumDocsValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NumDocsValueSource, t_NumDocsValueSource, ::org::apache::lucene::queries::function::ValueSource, NumDocsValueSource, t_NumDocsValueSource_init_, 0, 0, 0, 0, 0);

            void t_NumDocsValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(NumDocsValueSource), module, "NumDocsValueSource", 0);
            }

            void t_NumDocsValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NumDocsValueSource).tp_dict, "class_", make_descriptor(NumDocsValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NumDocsValueSource).tp_dict, "wrapfn_", make_descriptor(t_NumDocsValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NumDocsValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NumDocsValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NumDocsValueSource::initializeClass, 1)))
                return NULL;
              return t_NumDocsValueSource::wrap_Object(NumDocsValueSource(((t_NumDocsValueSource *) arg)->object.this$));
            }
            static PyObject *t_NumDocsValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NumDocsValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NumDocsValueSource_init_(t_NumDocsValueSource *self, PyObject *args, PyObject *kwds)
            {
              NumDocsValueSource object((jobject) NULL);

              INT_CALL(object = NumDocsValueSource());
              self->object = object;

              return 0;
            }

            static PyObject *t_NumDocsValueSource_description(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_NumDocsValueSource_equals(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_NumDocsValueSource_getValues(t_NumDocsValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_NumDocsValueSource_hashCode(t_NumDocsValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(NumDocsValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_NumDocsValueSource_name(t_NumDocsValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *SegmentInfoFormat::class$ = NULL;
        jmethodID *SegmentInfoFormat::mids$ = NULL;
        bool SegmentInfoFormat::live$ = false;

        jclass SegmentInfoFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/SegmentInfoFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
            mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::SegmentInfoReader SegmentInfoFormat::getSegmentInfoReader() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
        }

        ::org::apache::lucene::codecs::SegmentInfoWriter SegmentInfoFormat::getSegmentInfoWriter() const
        {
          return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoFormat_getSegmentInfoReader(t_SegmentInfoFormat *self);
        static PyObject *t_SegmentInfoFormat_getSegmentInfoWriter(t_SegmentInfoFormat *self);
        static PyObject *t_SegmentInfoFormat_get__segmentInfoReader(t_SegmentInfoFormat *self, void *data);
        static PyObject *t_SegmentInfoFormat_get__segmentInfoWriter(t_SegmentInfoFormat *self, void *data);
        static PyGetSetDef t_SegmentInfoFormat__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentInfoFormat, segmentInfoReader),
          DECLARE_GET_FIELD(t_SegmentInfoFormat, segmentInfoWriter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfoFormat__methods_[] = {
          DECLARE_METHOD(t_SegmentInfoFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoFormat, getSegmentInfoReader, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfoFormat, getSegmentInfoWriter, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfoFormat, t_SegmentInfoFormat, ::java::lang::Object, SegmentInfoFormat, abstract_init, 0, 0, t_SegmentInfoFormat__fields_, 0, 0);

        void t_SegmentInfoFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfoFormat), module, "SegmentInfoFormat", 0);
        }

        void t_SegmentInfoFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfoFormat).tp_dict, "class_", make_descriptor(SegmentInfoFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfoFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfoFormat::initializeClass, 1)))
            return NULL;
          return t_SegmentInfoFormat::wrap_Object(SegmentInfoFormat(((t_SegmentInfoFormat *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfoFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentInfoFormat_getSegmentInfoReader(t_SegmentInfoFormat *self)
        {
          ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentInfoReader());
          return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
        }

        static PyObject *t_SegmentInfoFormat_getSegmentInfoWriter(t_SegmentInfoFormat *self)
        {
          ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentInfoWriter());
          return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
        }

        static PyObject *t_SegmentInfoFormat_get__segmentInfoReader(t_SegmentInfoFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentInfoReader());
          return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
        }

        static PyObject *t_SegmentInfoFormat_get__segmentInfoWriter(t_SegmentInfoFormat *self, void *data)
        {
          ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentInfoWriter());
          return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$Arc::class$ = NULL;
          jmethodID *FST$Arc::mids$ = NULL;
          jfieldID *FST$Arc::fids$ = NULL;
          bool FST$Arc::live$ = false;

          jclass FST$Arc::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$Arc");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_copyFrom_8c07e6cb] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/util/fst/FST$Arc;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_isFinal_54c6a16a] = env->getMethodID(cls, "isFinal", "()Z");
              mids$[mid_isLast_54c6a16a] = env->getMethodID(cls, "isLast", "()Z");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_label] = env->getFieldID(cls, "label", "I");
              fids$[fid_nextFinalOutput] = env->getFieldID(cls, "nextFinalOutput", "Ljava/lang/Object;");
              fids$[fid_output] = env->getFieldID(cls, "output", "Ljava/lang/Object;");
              fids$[fid_target] = env->getFieldID(cls, "target", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$Arc::FST$Arc() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          FST$Arc FST$Arc::copyFrom(const FST$Arc & a0) const
          {
            return FST$Arc(env->callObjectMethod(this$, mids$[mid_copyFrom_8c07e6cb], a0.this$));
          }

          jboolean FST$Arc::isFinal() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isFinal_54c6a16a]);
          }

          jboolean FST$Arc::isLast() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isLast_54c6a16a]);
          }

          ::java::lang::String FST$Arc::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jint FST$Arc::_get_label() const
          {
            return env->getIntField(this$, fids$[fid_label]);
          }

          void FST$Arc::_set_label(jint a0) const
          {
            env->setIntField(this$, fids$[fid_label], a0);
          }

          ::java::lang::Object FST$Arc::_get_nextFinalOutput() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_nextFinalOutput]));
          }

          void FST$Arc::_set_nextFinalOutput(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_nextFinalOutput], a0.this$);
          }

          ::java::lang::Object FST$Arc::_get_output() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_output]));
          }

          void FST$Arc::_set_output(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_output], a0.this$);
          }

          jlong FST$Arc::_get_target() const
          {
            return env->getLongField(this$, fids$[fid_target]);
          }

          void FST$Arc::_set_target(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_target], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$Arc_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$Arc_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$Arc_of_(t_FST$Arc *self, PyObject *args);
          static int t_FST$Arc_init_(t_FST$Arc *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST$Arc_copyFrom(t_FST$Arc *self, PyObject *arg);
          static PyObject *t_FST$Arc_isFinal(t_FST$Arc *self);
          static PyObject *t_FST$Arc_isLast(t_FST$Arc *self);
          static PyObject *t_FST$Arc_toString(t_FST$Arc *self, PyObject *args);
          static PyObject *t_FST$Arc_get__label(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__label(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__nextFinalOutput(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__nextFinalOutput(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__output(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__output(t_FST$Arc *self, PyObject *arg, void *data);
          static PyObject *t_FST$Arc_get__target(t_FST$Arc *self, void *data);
          static int t_FST$Arc_set__target(t_FST$Arc *self, PyObject *arg, void *data);

          static PyObject *t_FST$Arc_get__final(t_FST$Arc *self, void *data);
          static PyObject *t_FST$Arc_get__last(t_FST$Arc *self, void *data);
          static PyObject *t_FST$Arc_get__parameters_(t_FST$Arc *self, void *data);
          static PyGetSetDef t_FST$Arc__fields_[] = {
            DECLARE_GETSET_FIELD(t_FST$Arc, label),
            DECLARE_GETSET_FIELD(t_FST$Arc, nextFinalOutput),
            DECLARE_GETSET_FIELD(t_FST$Arc, output),
            DECLARE_GETSET_FIELD(t_FST$Arc, target),
            DECLARE_GET_FIELD(t_FST$Arc, final),
            DECLARE_GET_FIELD(t_FST$Arc, last),
            DECLARE_GET_FIELD(t_FST$Arc, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$Arc__methods_[] = {
            DECLARE_METHOD(t_FST$Arc, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$Arc, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$Arc, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$Arc, copyFrom, METH_O),
            DECLARE_METHOD(t_FST$Arc, isFinal, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, isLast, METH_NOARGS),
            DECLARE_METHOD(t_FST$Arc, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST$Arc, t_FST$Arc, ::java::lang::Object, FST$Arc, t_FST$Arc_init_, 0, 0, t_FST$Arc__fields_, 0, 0);
          PyObject *t_FST$Arc::wrap_Object(const FST$Arc& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$Arc::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$Arc *self = (t_FST$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$Arc::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$Arc::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$Arc *self = (t_FST$Arc *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$Arc::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$Arc), module, "FST$Arc", 0);
          }

          void t_FST$Arc::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST$Arc).tp_dict, "class_", make_descriptor(FST$Arc::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST$Arc).tp_dict, "wrapfn_", make_descriptor(t_FST$Arc::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST$Arc).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FST$Arc_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$Arc::initializeClass, 1)))
              return NULL;
            return t_FST$Arc::wrap_Object(FST$Arc(((t_FST$Arc *) arg)->object.this$));
          }
          static PyObject *t_FST$Arc_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$Arc::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$Arc_of_(t_FST$Arc *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST$Arc_init_(t_FST$Arc *self, PyObject *args, PyObject *kwds)
          {
            FST$Arc object((jobject) NULL);

            INT_CALL(object = FST$Arc());
            self->object = object;

            return 0;
          }

          static PyObject *t_FST$Arc_copyFrom(t_FST$Arc *self, PyObject *arg)
          {
            FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            FST$Arc result((jobject) NULL);

            if (!parseArg(arg, "K", FST$Arc::initializeClass, &a0, &p0, t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = self->object.copyFrom(a0));
              return t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "copyFrom", arg);
            return NULL;
          }

          static PyObject *t_FST$Arc_isFinal(t_FST$Arc *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isFinal());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$Arc_isLast(t_FST$Arc *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isLast());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_FST$Arc_toString(t_FST$Arc *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FST$Arc), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_FST$Arc_get__parameters_(t_FST$Arc *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST$Arc_get__label(t_FST$Arc *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_label());
            return PyInt_FromLong((long) value);
          }
          static int t_FST$Arc_set__label(t_FST$Arc *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_label(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "label", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__nextFinalOutput(t_FST$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_nextFinalOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_FST$Arc_set__nextFinalOutput(t_FST$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_nextFinalOutput(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "nextFinalOutput", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__output(t_FST$Arc *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_output());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_FST$Arc_set__output(t_FST$Arc *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_output(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "output", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__target(t_FST$Arc *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_target());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
          static int t_FST$Arc_set__target(t_FST$Arc *self, PyObject *arg, void *data)
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object._set_target(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "target", arg);
            return -1;
          }

          static PyObject *t_FST$Arc_get__final(t_FST$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isFinal());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_FST$Arc_get__last(t_FST$Arc *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isLast());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/nl/DutchStemmer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {

          ::java::lang::Class *DutchStemmer::class$ = NULL;
          jmethodID *DutchStemmer::mids$ = NULL;
          bool DutchStemmer::live$ = false;

          jclass DutchStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/nl/DutchStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_97a5258f] = env->getMethodID(cls, "stem", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DutchStemmer::DutchStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String DutchStemmer::stem(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_stem_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace nl {
          static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *arg);

          static PyMethodDef t_DutchStemmer__methods_[] = {
            DECLARE_METHOD(t_DutchStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DutchStemmer, stem, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DutchStemmer, t_DutchStemmer, ::java::lang::Object, DutchStemmer, t_DutchStemmer_init_, 0, 0, 0, 0, 0);

          void t_DutchStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(DutchStemmer), module, "DutchStemmer", 0);
          }

          void t_DutchStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "class_", make_descriptor(DutchStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "wrapfn_", make_descriptor(t_DutchStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DutchStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DutchStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DutchStemmer::initializeClass, 1)))
              return NULL;
            return t_DutchStemmer::wrap_Object(DutchStemmer(((t_DutchStemmer *) arg)->object.this$));
          }
          static PyObject *t_DutchStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DutchStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DutchStemmer_init_(t_DutchStemmer *self, PyObject *args, PyObject *kwds)
          {
            DutchStemmer object((jobject) NULL);

            INT_CALL(object = DutchStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_DutchStemmer_stem(t_DutchStemmer *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.stem(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/FieldCacheSource.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *FieldCacheSource::class$ = NULL;
            jmethodID *FieldCacheSource::mids$ = NULL;
            bool FieldCacheSource::live$ = false;

            jclass FieldCacheSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/FieldCacheSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
                mids$[mid_getFieldCache_a7c1cc27] = env->getMethodID(cls, "getFieldCache", "()Lorg/apache/lucene/search/FieldCache;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FieldCacheSource::FieldCacheSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::java::lang::String FieldCacheSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean FieldCacheSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::java::lang::String FieldCacheSource::getField() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
            }

            ::org::apache::lucene::search::FieldCache FieldCacheSource::getFieldCache() const
            {
              return ::org::apache::lucene::search::FieldCache(env->callObjectMethod(this$, mids$[mid_getFieldCache_a7c1cc27]));
            }

            jint FieldCacheSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_FieldCacheSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FieldCacheSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FieldCacheSource_init_(t_FieldCacheSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FieldCacheSource_description(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_equals(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_getField(t_FieldCacheSource *self);
            static PyObject *t_FieldCacheSource_getFieldCache(t_FieldCacheSource *self);
            static PyObject *t_FieldCacheSource_hashCode(t_FieldCacheSource *self, PyObject *args);
            static PyObject *t_FieldCacheSource_get__field(t_FieldCacheSource *self, void *data);
            static PyObject *t_FieldCacheSource_get__fieldCache(t_FieldCacheSource *self, void *data);
            static PyGetSetDef t_FieldCacheSource__fields_[] = {
              DECLARE_GET_FIELD(t_FieldCacheSource, field),
              DECLARE_GET_FIELD(t_FieldCacheSource, fieldCache),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FieldCacheSource__methods_[] = {
              DECLARE_METHOD(t_FieldCacheSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldCacheSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FieldCacheSource, description, METH_VARARGS),
              DECLARE_METHOD(t_FieldCacheSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_FieldCacheSource, getField, METH_NOARGS),
              DECLARE_METHOD(t_FieldCacheSource, getFieldCache, METH_NOARGS),
              DECLARE_METHOD(t_FieldCacheSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FieldCacheSource, t_FieldCacheSource, ::org::apache::lucene::queries::function::ValueSource, FieldCacheSource, t_FieldCacheSource_init_, 0, 0, t_FieldCacheSource__fields_, 0, 0);

            void t_FieldCacheSource::install(PyObject *module)
            {
              installType(&PY_TYPE(FieldCacheSource), module, "FieldCacheSource", 0);
            }

            void t_FieldCacheSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FieldCacheSource).tp_dict, "class_", make_descriptor(FieldCacheSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FieldCacheSource).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FieldCacheSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FieldCacheSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FieldCacheSource::initializeClass, 1)))
                return NULL;
              return t_FieldCacheSource::wrap_Object(FieldCacheSource(((t_FieldCacheSource *) arg)->object.this$));
            }
            static PyObject *t_FieldCacheSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FieldCacheSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FieldCacheSource_init_(t_FieldCacheSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              FieldCacheSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = FieldCacheSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FieldCacheSource_description(t_FieldCacheSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FieldCacheSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_FieldCacheSource_equals(t_FieldCacheSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(FieldCacheSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_FieldCacheSource_getField(t_FieldCacheSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            static PyObject *t_FieldCacheSource_getFieldCache(t_FieldCacheSource *self)
            {
              ::org::apache::lucene::search::FieldCache result((jobject) NULL);
              OBJ_CALL(result = self->object.getFieldCache());
              return ::org::apache::lucene::search::t_FieldCache::wrap_Object(result);
            }

            static PyObject *t_FieldCacheSource_hashCode(t_FieldCacheSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FieldCacheSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_FieldCacheSource_get__field(t_FieldCacheSource *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getField());
              return j2p(value);
            }

            static PyObject *t_FieldCacheSource_get__fieldCache(t_FieldCacheSource *self, void *data)
            {
              ::org::apache::lucene::search::FieldCache value((jobject) NULL);
              OBJ_CALL(value = self->object.getFieldCache());
              return ::org::apache::lucene::search::t_FieldCache::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Optimizer2.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Optimizer2::class$ = NULL;
      jmethodID *Optimizer2::mids$ = NULL;
      bool Optimizer2::live$ = false;

      jclass Optimizer2::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Optimizer2");

          mids$ = new jmethodID[max_mid];
          mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      Optimizer2::Optimizer2() : ::org::egothor::stemmer::Optimizer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Optimizer2_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Optimizer2_instance_(PyTypeObject *type, PyObject *arg);
      static int t_Optimizer2_init_(t_Optimizer2 *self, PyObject *args, PyObject *kwds);

      static PyMethodDef t_Optimizer2__methods_[] = {
        DECLARE_METHOD(t_Optimizer2, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Optimizer2, instance_, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Optimizer2, t_Optimizer2, ::org::egothor::stemmer::Optimizer, Optimizer2, t_Optimizer2_init_, 0, 0, 0, 0, 0);

      void t_Optimizer2::install(PyObject *module)
      {
        installType(&PY_TYPE(Optimizer2), module, "Optimizer2", 0);
      }

      void t_Optimizer2::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Optimizer2).tp_dict, "class_", make_descriptor(Optimizer2::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Optimizer2).tp_dict, "wrapfn_", make_descriptor(t_Optimizer2::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Optimizer2).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Optimizer2_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Optimizer2::initializeClass, 1)))
          return NULL;
        return t_Optimizer2::wrap_Object(Optimizer2(((t_Optimizer2 *) arg)->object.this$));
      }
      static PyObject *t_Optimizer2_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Optimizer2::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static int t_Optimizer2_init_(t_Optimizer2 *self, PyObject *args, PyObject *kwds)
      {
        Optimizer2 object((jobject) NULL);

        INT_CALL(object = Optimizer2());
        self->object = object;

        return 0;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizer::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizer::mids$ = NULL;
          bool UAX29URLEmailTokenizer::live$ = false;
          jint UAX29URLEmailTokenizer::ALPHANUM = (jint) 0;
          jint UAX29URLEmailTokenizer::EMAIL = (jint) 0;
          jint UAX29URLEmailTokenizer::HANGUL = (jint) 0;
          jint UAX29URLEmailTokenizer::HIRAGANA = (jint) 0;
          jint UAX29URLEmailTokenizer::IDEOGRAPHIC = (jint) 0;
          jint UAX29URLEmailTokenizer::KATAKANA = (jint) 0;
          jint UAX29URLEmailTokenizer::NUM = (jint) 0;
          jint UAX29URLEmailTokenizer::SOUTHEAST_ASIAN = (jint) 0;
          JArray< ::java::lang::String > *UAX29URLEmailTokenizer::TOKEN_TYPES = NULL;
          jint UAX29URLEmailTokenizer::URL = (jint) 0;

          jclass UAX29URLEmailTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              EMAIL = env->getStaticIntField(cls, "EMAIL");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              IDEOGRAPHIC = env->getStaticIntField(cls, "IDEOGRAPHIC");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              NUM = env->getStaticIntField(cls, "NUM");
              SOUTHEAST_ASIAN = env->getStaticIntField(cls, "SOUTHEAST_ASIAN");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              URL = env->getStaticIntField(cls, "URL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizer::UAX29URLEmailTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          UAX29URLEmailTokenizer::UAX29URLEmailTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void UAX29URLEmailTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void UAX29URLEmailTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jint UAX29URLEmailTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          jboolean UAX29URLEmailTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void UAX29URLEmailTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void UAX29URLEmailTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizer_init_(t_UAX29URLEmailTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizer_close(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_end(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_getMaxTokenLength(t_UAX29URLEmailTokenizer *self);
          static PyObject *t_UAX29URLEmailTokenizer_incrementToken(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_reset(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_setMaxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizer_get__maxTokenLength(t_UAX29URLEmailTokenizer *self, void *data);
          static int t_UAX29URLEmailTokenizer_set__maxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_UAX29URLEmailTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_UAX29URLEmailTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailTokenizer__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailTokenizer, t_UAX29URLEmailTokenizer, ::org::apache::lucene::analysis::Tokenizer, UAX29URLEmailTokenizer, t_UAX29URLEmailTokenizer_init_, 0, 0, t_UAX29URLEmailTokenizer__fields_, 0, 0);

          void t_UAX29URLEmailTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizer), module, "UAX29URLEmailTokenizer", 0);
          }

          void t_UAX29URLEmailTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "ALPHANUM", make_descriptor(UAX29URLEmailTokenizer::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "EMAIL", make_descriptor(UAX29URLEmailTokenizer::EMAIL));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "HANGUL", make_descriptor(UAX29URLEmailTokenizer::HANGUL));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "HIRAGANA", make_descriptor(UAX29URLEmailTokenizer::HIRAGANA));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "IDEOGRAPHIC", make_descriptor(UAX29URLEmailTokenizer::IDEOGRAPHIC));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "KATAKANA", make_descriptor(UAX29URLEmailTokenizer::KATAKANA));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "NUM", make_descriptor(UAX29URLEmailTokenizer::NUM));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "SOUTHEAST_ASIAN", make_descriptor(UAX29URLEmailTokenizer::SOUTHEAST_ASIAN));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(UAX29URLEmailTokenizer::TOKEN_TYPES->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "URL", make_descriptor(UAX29URLEmailTokenizer::URL));
          }

          static PyObject *t_UAX29URLEmailTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizer::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizer::wrap_Object(UAX29URLEmailTokenizer(((t_UAX29URLEmailTokenizer *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizer_init_(t_UAX29URLEmailTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                UAX29URLEmailTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = UAX29URLEmailTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                UAX29URLEmailTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = UAX29URLEmailTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizer_close(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_end(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_getMaxTokenLength(t_UAX29URLEmailTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizer_incrementToken(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_reset(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_setMaxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizer_get__maxTokenLength(t_UAX29URLEmailTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_UAX29URLEmailTokenizer_set__maxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$InsanityType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FieldCacheSanityChecker$InsanityType::class$ = NULL;
        jmethodID *FieldCacheSanityChecker$InsanityType::mids$ = NULL;
        bool FieldCacheSanityChecker$InsanityType::live$ = false;
        FieldCacheSanityChecker$InsanityType *FieldCacheSanityChecker$InsanityType::EXPECTED = NULL;
        FieldCacheSanityChecker$InsanityType *FieldCacheSanityChecker$InsanityType::SUBREADER = NULL;
        FieldCacheSanityChecker$InsanityType *FieldCacheSanityChecker$InsanityType::VALUEMISMATCH = NULL;

        jclass FieldCacheSanityChecker$InsanityType::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FieldCacheSanityChecker$InsanityType");

            mids$ = new jmethodID[max_mid];
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EXPECTED = new FieldCacheSanityChecker$InsanityType(env->getStaticObjectField(cls, "EXPECTED", "Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;"));
            SUBREADER = new FieldCacheSanityChecker$InsanityType(env->getStaticObjectField(cls, "SUBREADER", "Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;"));
            VALUEMISMATCH = new FieldCacheSanityChecker$InsanityType(env->getStaticObjectField(cls, "VALUEMISMATCH", "Lorg/apache/lucene/util/FieldCacheSanityChecker$InsanityType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String FieldCacheSanityChecker$InsanityType::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FieldCacheSanityChecker$InsanityType_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker$InsanityType_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker$InsanityType_toString(t_FieldCacheSanityChecker$InsanityType *self, PyObject *args);

        static PyMethodDef t_FieldCacheSanityChecker$InsanityType__methods_[] = {
          DECLARE_METHOD(t_FieldCacheSanityChecker$InsanityType, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$InsanityType, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker$InsanityType, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheSanityChecker$InsanityType, t_FieldCacheSanityChecker$InsanityType, ::java::lang::Object, FieldCacheSanityChecker$InsanityType, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCacheSanityChecker$InsanityType::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheSanityChecker$InsanityType), module, "FieldCacheSanityChecker$InsanityType", 0);
        }

        void t_FieldCacheSanityChecker$InsanityType::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "class_", make_descriptor(FieldCacheSanityChecker$InsanityType::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCacheSanityChecker$InsanityType::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "EXPECTED", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_Object(*FieldCacheSanityChecker$InsanityType::EXPECTED)));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "SUBREADER", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_Object(*FieldCacheSanityChecker$InsanityType::SUBREADER)));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker$InsanityType).tp_dict, "VALUEMISMATCH", make_descriptor(t_FieldCacheSanityChecker$InsanityType::wrap_Object(*FieldCacheSanityChecker$InsanityType::VALUEMISMATCH)));
        }

        static PyObject *t_FieldCacheSanityChecker$InsanityType_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheSanityChecker$InsanityType::initializeClass, 1)))
            return NULL;
          return t_FieldCacheSanityChecker$InsanityType::wrap_Object(FieldCacheSanityChecker$InsanityType(((t_FieldCacheSanityChecker$InsanityType *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheSanityChecker$InsanityType_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheSanityChecker$InsanityType::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCacheSanityChecker$InsanityType_toString(t_FieldCacheSanityChecker$InsanityType *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldCacheSanityChecker$InsanityType), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Integer.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Integer::class$ = NULL;
    jmethodID *Integer::mids$ = NULL;
    bool Integer::live$ = false;
    jint Integer::MAX_VALUE = (jint) 0;
    jint Integer::MIN_VALUE = (jint) 0;
    jint Integer::SIZE = (jint) 0;
    ::java::lang::Class *Integer::TYPE = NULL;

    jclass Integer::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Integer");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_bitCount_39c7bd23] = env->getStaticMethodID(cls, "bitCount", "(I)I");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_d8d154b9] = env->getStaticMethodID(cls, "compare", "(II)I");
        mids$[mid_compareTo_af7b73bb] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Integer;)I");
        mids$[mid_decode_da36ea2b] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_getInteger_da36ea2b] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_getInteger_fe9eddb1] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer;");
        mids$[mid_getInteger_39b2b79d] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;I)Ljava/lang/Integer;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_highestOneBit_39c7bd23] = env->getStaticMethodID(cls, "highestOneBit", "(I)I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_lowestOneBit_39c7bd23] = env->getStaticMethodID(cls, "lowestOneBit", "(I)I");
        mids$[mid_numberOfLeadingZeros_39c7bd23] = env->getStaticMethodID(cls, "numberOfLeadingZeros", "(I)I");
        mids$[mid_numberOfTrailingZeros_39c7bd23] = env->getStaticMethodID(cls, "numberOfTrailingZeros", "(I)I");
        mids$[mid_parseInt_5fdc3f57] = env->getStaticMethodID(cls, "parseInt", "(Ljava/lang/String;)I");
        mids$[mid_parseInt_6e53ccd9] = env->getStaticMethodID(cls, "parseInt", "(Ljava/lang/String;I)I");
        mids$[mid_reverse_39c7bd23] = env->getStaticMethodID(cls, "reverse", "(I)I");
        mids$[mid_reverseBytes_39c7bd23] = env->getStaticMethodID(cls, "reverseBytes", "(I)I");
        mids$[mid_rotateLeft_d8d154b9] = env->getStaticMethodID(cls, "rotateLeft", "(II)I");
        mids$[mid_rotateRight_d8d154b9] = env->getStaticMethodID(cls, "rotateRight", "(II)I");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_signum_39c7bd23] = env->getStaticMethodID(cls, "signum", "(I)I");
        mids$[mid_toBinaryString_141401b3] = env->getStaticMethodID(cls, "toBinaryString", "(I)Ljava/lang/String;");
        mids$[mid_toHexString_141401b3] = env->getStaticMethodID(cls, "toHexString", "(I)Ljava/lang/String;");
        mids$[mid_toOctalString_141401b3] = env->getStaticMethodID(cls, "toOctalString", "(I)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_141401b3] = env->getStaticMethodID(cls, "toString", "(I)Ljava/lang/String;");
        mids$[mid_toString_f9118fe5] = env->getStaticMethodID(cls, "toString", "(II)Ljava/lang/String;");
        mids$[mid_valueOf_7266dabb] = env->getStaticMethodID(cls, "valueOf", "(I)Ljava/lang/Integer;");
        mids$[mid_valueOf_da36ea2b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Integer;");
        mids$[mid_valueOf_39b2b79d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Integer;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_VALUE = env->getStaticIntField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticIntField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Integer::Integer(jint a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

    Integer::Integer(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jint Integer::bitCount(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_bitCount_39c7bd23], a0);
    }

    jbyte Integer::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Integer::compare(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_d8d154b9], a0, a1);
    }

    jint Integer::compareTo(const Integer & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_af7b73bb], a0.this$);
    }

    Integer Integer::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_decode_da36ea2b], a0.this$));
    }

    jdouble Integer::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Integer::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Integer::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    Integer Integer::getInteger(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_da36ea2b], a0.this$));
    }

    Integer Integer::getInteger(const ::java::lang::String & a0, const Integer & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_fe9eddb1], a0.this$, a1.this$));
    }

    Integer Integer::getInteger(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_39b2b79d], a0.this$, a1));
    }

    jint Integer::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Integer::highestOneBit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_highestOneBit_39c7bd23], a0);
    }

    jint Integer::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Integer::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jint Integer::lowestOneBit(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_lowestOneBit_39c7bd23], a0);
    }

    jint Integer::numberOfLeadingZeros(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfLeadingZeros_39c7bd23], a0);
    }

    jint Integer::numberOfTrailingZeros(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfTrailingZeros_39c7bd23], a0);
    }

    jint Integer::parseInt(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseInt_5fdc3f57], a0.this$);
    }

    jint Integer::parseInt(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_parseInt_6e53ccd9], a0.this$, a1);
    }

    jint Integer::reverse(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_reverse_39c7bd23], a0);
    }

    jint Integer::reverseBytes(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_reverseBytes_39c7bd23], a0);
    }

    jint Integer::rotateLeft(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_rotateLeft_d8d154b9], a0, a1);
    }

    jint Integer::rotateRight(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_rotateRight_d8d154b9], a0, a1);
    }

    jshort Integer::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    jint Integer::signum(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_signum_39c7bd23], a0);
    }

    ::java::lang::String Integer::toBinaryString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toBinaryString_141401b3], a0));
    }

    ::java::lang::String Integer::toHexString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_141401b3], a0));
    }

    ::java::lang::String Integer::toOctalString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toOctalString_141401b3], a0));
    }

    ::java::lang::String Integer::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Integer::toString(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_141401b3], a0));
    }

    ::java::lang::String Integer::toString(jint a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_f9118fe5], a0, a1));
    }

    Integer Integer::valueOf(jint a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7266dabb], a0));
    }

    Integer Integer::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_da36ea2b], a0.this$));
    }

    Integer Integer::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_39b2b79d], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Integer_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Integer_init_(t_Integer *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Integer_bitCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_byteValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_compareTo(t_Integer *self, PyObject *arg);
    static PyObject *t_Integer_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_doubleValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_equals(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_floatValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_getInteger(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_hashCode(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_highestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_intValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_longValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_lowestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_parseInt(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_rotateLeft(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_rotateRight(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_shortValue(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_signum(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toBinaryString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toOctalString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Integer_toString(t_Integer *self, PyObject *args);
    static PyObject *t_Integer_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Integer_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Integer__methods_[] = {
      DECLARE_METHOD(t_Integer, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, bitCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, compareTo, METH_O),
      DECLARE_METHOD(t_Integer, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, equals, METH_VARARGS),
      DECLARE_METHOD(t_Integer, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, getInteger, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Integer, highestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, lowestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, numberOfLeadingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, numberOfTrailingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, parseInt, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, rotateLeft, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, rotateRight, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Integer, signum, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toBinaryString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toOctalString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Integer, toString, METH_VARARGS),
      DECLARE_METHOD(t_Integer, toString_, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Integer, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Integer, t_Integer, ::java::lang::Number, Integer, t_Integer_init_, 0, 0, 0, 0, 0);

    void t_Integer::install(PyObject *module)
    {
      installType(&PY_TYPE(Integer), module, "Integer", 0);
    }

    void t_Integer::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "class_", make_descriptor(Integer::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "wrapfn_", make_descriptor(unboxInteger));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "boxfn_", make_descriptor(boxInteger));
      env->getClass(Integer::initializeClass);
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "MAX_VALUE", make_descriptor(Integer::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "MIN_VALUE", make_descriptor(Integer::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "SIZE", make_descriptor(Integer::SIZE));
      PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Integer::TYPE)));
    }

    static PyObject *t_Integer_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Integer::initializeClass, 1)))
        return NULL;
      return t_Integer::wrap_Object(Integer(((t_Integer *) arg)->object.this$));
    }
    static PyObject *t_Integer_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Integer::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Integer_init_(t_Integer *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          Integer object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Integer(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Integer object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Integer(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Integer_bitCount(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::bitCount(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "bitCount", arg);
      return NULL;
    }

    static PyObject *t_Integer_byteValue(t_Integer *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Integer_compare(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Integer_compareTo(t_Integer *self, PyObject *arg)
    {
      Integer a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Integer), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Integer_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Integer result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::decode(a0));
        return t_Integer::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Integer_doubleValue(t_Integer *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Integer_equals(t_Integer *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Integer_floatValue(t_Integer *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Integer_getInteger(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          Integer a1((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Integer), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::getInteger(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getInteger", args);
      return NULL;
    }

    static PyObject *t_Integer_hashCode(t_Integer *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Integer_highestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::highestOneBit(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "highestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Integer_intValue(t_Integer *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Integer_longValue(t_Integer *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Integer_lowestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::lowestOneBit(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "lowestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Integer_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::numberOfLeadingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfLeadingZeros", arg);
      return NULL;
    }

    static PyObject *t_Integer_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::numberOfTrailingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfTrailingZeros", arg);
      return NULL;
    }

    static PyObject *t_Integer_parseInt(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseInt(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::parseInt(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseInt", args);
      return NULL;
    }

    static PyObject *t_Integer_reverse(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::reverse(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Integer_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::reverseBytes(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Integer_rotateLeft(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::rotateLeft(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "rotateLeft", args);
      return NULL;
    }

    static PyObject *t_Integer_rotateRight(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      jint a1;
      jint result;

      if (!parseArgs(args, "II", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Integer::rotateRight(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "rotateRight", args);
      return NULL;
    }

    static PyObject *t_Integer_shortValue(t_Integer *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Integer_signum(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      jint result;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::signum(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "signum", arg);
      return NULL;
    }

    static PyObject *t_Integer_toBinaryString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toBinaryString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toBinaryString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toOctalString(PyTypeObject *type, PyObject *arg)
    {
      jint a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(result = ::java::lang::Integer::toOctalString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toOctalString", arg);
      return NULL;
    }

    static PyObject *t_Integer_toString(t_Integer *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Integer), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Integer_toString_(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::toString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jint a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::toString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Integer_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jint a0;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Integer result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0));
            return t_Integer::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Integer result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Integer::valueOf(a0, a1));
            return t_Integer::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LowerCaseTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/core/LowerCaseTokenizer.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LowerCaseTokenizerFactory::class$ = NULL;
          jmethodID *LowerCaseTokenizerFactory::mids$ = NULL;
          bool LowerCaseTokenizerFactory::live$ = false;

          jclass LowerCaseTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LowerCaseTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3b72128c] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/LowerCaseTokenizer;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LowerCaseTokenizerFactory::LowerCaseTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::LowerCaseTokenizer LowerCaseTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::LowerCaseTokenizer(env->callObjectMethod(this$, mids$[mid_create_3b72128c], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory LowerCaseTokenizerFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LowerCaseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LowerCaseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LowerCaseTokenizerFactory_init_(t_LowerCaseTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LowerCaseTokenizerFactory_create(t_LowerCaseTokenizerFactory *self, PyObject *args);
          static PyObject *t_LowerCaseTokenizerFactory_getMultiTermComponent(t_LowerCaseTokenizerFactory *self);
          static PyObject *t_LowerCaseTokenizerFactory_get__multiTermComponent(t_LowerCaseTokenizerFactory *self, void *data);
          static PyGetSetDef t_LowerCaseTokenizerFactory__fields_[] = {
            DECLARE_GET_FIELD(t_LowerCaseTokenizerFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LowerCaseTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_LowerCaseTokenizerFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LowerCaseTokenizerFactory, t_LowerCaseTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, LowerCaseTokenizerFactory, t_LowerCaseTokenizerFactory_init_, 0, 0, t_LowerCaseTokenizerFactory__fields_, 0, 0);

          void t_LowerCaseTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LowerCaseTokenizerFactory), module, "LowerCaseTokenizerFactory", 0);
          }

          void t_LowerCaseTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizerFactory).tp_dict, "class_", make_descriptor(LowerCaseTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_LowerCaseTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LowerCaseTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LowerCaseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LowerCaseTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_LowerCaseTokenizerFactory::wrap_Object(LowerCaseTokenizerFactory(((t_LowerCaseTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_LowerCaseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LowerCaseTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LowerCaseTokenizerFactory_init_(t_LowerCaseTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LowerCaseTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LowerCaseTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LowerCaseTokenizerFactory_create(t_LowerCaseTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::LowerCaseTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_LowerCaseTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LowerCaseTokenizerFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_LowerCaseTokenizerFactory_getMultiTermComponent(t_LowerCaseTokenizerFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_LowerCaseTokenizerFactory_get__multiTermComponent(t_LowerCaseTokenizerFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "java/util/Comparator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *SortedTermFreqIteratorWrapper::class$ = NULL;
          jmethodID *SortedTermFreqIteratorWrapper::mids$ = NULL;
          bool SortedTermFreqIteratorWrapper::live$ = false;

          jclass SortedTermFreqIteratorWrapper::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/SortedTermFreqIteratorWrapper");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b57afdd1] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/TermFreqIterator;)V");
              mids$[mid_init$_dbfb1d96] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/TermFreqIterator;Ljava/util/Comparator;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_next_4ae19461] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");
              mids$[mid_decode_b368866d] = env->getMethodID(cls, "decode", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/store/ByteArrayDataInput;)J");
              mids$[mid_encode_d3114f43] = env->getMethodID(cls, "encode", "(Lorg/apache/lucene/util/OfflineSorter$ByteSequencesWriter;Lorg/apache/lucene/store/ByteArrayDataOutput;[BLorg/apache/lucene/util/BytesRef;J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedTermFreqIteratorWrapper::SortedTermFreqIteratorWrapper(const ::org::apache::lucene::search::spell::TermFreqIterator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b57afdd1, a0.this$)) {}

          SortedTermFreqIteratorWrapper::SortedTermFreqIteratorWrapper(const ::org::apache::lucene::search::spell::TermFreqIterator & a0, const ::java::util::Comparator & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_dbfb1d96, a0.this$, a1.this$)) {}

          ::java::util::Comparator SortedTermFreqIteratorWrapper::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRef SortedTermFreqIteratorWrapper::next() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_next_4ae19461]));
          }

          jlong SortedTermFreqIteratorWrapper::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_SortedTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SortedTermFreqIteratorWrapper_init_(t_SortedTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SortedTermFreqIteratorWrapper_getComparator(t_SortedTermFreqIteratorWrapper *self);
          static PyObject *t_SortedTermFreqIteratorWrapper_next(t_SortedTermFreqIteratorWrapper *self);
          static PyObject *t_SortedTermFreqIteratorWrapper_weight(t_SortedTermFreqIteratorWrapper *self);
          static PyObject *t_SortedTermFreqIteratorWrapper_get__comparator(t_SortedTermFreqIteratorWrapper *self, void *data);
          static PyGetSetDef t_SortedTermFreqIteratorWrapper__fields_[] = {
            DECLARE_GET_FIELD(t_SortedTermFreqIteratorWrapper, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedTermFreqIteratorWrapper__methods_[] = {
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, next, METH_NOARGS),
            DECLARE_METHOD(t_SortedTermFreqIteratorWrapper, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedTermFreqIteratorWrapper, t_SortedTermFreqIteratorWrapper, ::java::lang::Object, SortedTermFreqIteratorWrapper, t_SortedTermFreqIteratorWrapper_init_, PyObject_SelfIter, ((PyObject *(*)(t_SortedTermFreqIteratorWrapper *)) get_next< t_SortedTermFreqIteratorWrapper,::org::apache::lucene::util::t_BytesRef,::org::apache::lucene::util::BytesRef >), t_SortedTermFreqIteratorWrapper__fields_, 0, 0);

          void t_SortedTermFreqIteratorWrapper::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedTermFreqIteratorWrapper), module, "SortedTermFreqIteratorWrapper", 0);
          }

          void t_SortedTermFreqIteratorWrapper::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedTermFreqIteratorWrapper).tp_dict, "class_", make_descriptor(SortedTermFreqIteratorWrapper::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedTermFreqIteratorWrapper).tp_dict, "wrapfn_", make_descriptor(t_SortedTermFreqIteratorWrapper::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedTermFreqIteratorWrapper).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedTermFreqIteratorWrapper::initializeClass, 1)))
              return NULL;
            return t_SortedTermFreqIteratorWrapper::wrap_Object(SortedTermFreqIteratorWrapper(((t_SortedTermFreqIteratorWrapper *) arg)->object.this$));
          }
          static PyObject *t_SortedTermFreqIteratorWrapper_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedTermFreqIteratorWrapper::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SortedTermFreqIteratorWrapper_init_(t_SortedTermFreqIteratorWrapper *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::spell::TermFreqIterator a0((jobject) NULL);
                SortedTermFreqIteratorWrapper object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::spell::TermFreqIterator::initializeClass, &a0))
                {
                  INT_CALL(object = SortedTermFreqIteratorWrapper(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::spell::TermFreqIterator a0((jobject) NULL);
                ::java::util::Comparator a1((jobject) NULL);
                PyTypeObject **p1;
                SortedTermFreqIteratorWrapper object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::search::spell::TermFreqIterator::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SortedTermFreqIteratorWrapper(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_getComparator(t_SortedTermFreqIteratorWrapper *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_next(t_SortedTermFreqIteratorWrapper *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_weight(t_SortedTermFreqIteratorWrapper *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_SortedTermFreqIteratorWrapper_get__comparator(t_SortedTermFreqIteratorWrapper *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Byte.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Byte::class$ = NULL;
    jmethodID *Byte::mids$ = NULL;
    bool Byte::live$ = false;
    jbyte Byte::MAX_VALUE = (jbyte) 0;
    jbyte Byte::MIN_VALUE = (jbyte) 0;
    jint Byte::SIZE = (jint) 0;
    ::java::lang::Class *Byte::TYPE = NULL;

    jclass Byte::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Byte");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_b2271687] = env->getMethodID(cls, "<init>", "(B)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_1648a7cb] = env->getStaticMethodID(cls, "compare", "(BB)I");
        mids$[mid_compareTo_c2b89a9a] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Byte;)I");
        mids$[mid_decode_4a53f64a] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Byte;");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_parseByte_5fdc3f5c] = env->getStaticMethodID(cls, "parseByte", "(Ljava/lang/String;)B");
        mids$[mid_parseByte_6e53ccd2] = env->getStaticMethodID(cls, "parseByte", "(Ljava/lang/String;I)B");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_fce80606] = env->getStaticMethodID(cls, "toString", "(B)Ljava/lang/String;");
        mids$[mid_valueOf_f1e1a5a7] = env->getStaticMethodID(cls, "valueOf", "(B)Ljava/lang/Byte;");
        mids$[mid_valueOf_4a53f64a] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Byte;");
        mids$[mid_valueOf_83e30bb0] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Byte;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_VALUE = env->getStaticByteField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticByteField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Byte::Byte(jbyte a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_b2271687, a0)) {}

    Byte::Byte(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jbyte Byte::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Byte::compare(jbyte a0, jbyte a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_1648a7cb], a0, a1);
    }

    jint Byte::compareTo(const Byte & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_c2b89a9a], a0.this$);
    }

    Byte Byte::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_decode_4a53f64a], a0.this$));
    }

    jdouble Byte::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Byte::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Byte::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Byte::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jint Byte::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Byte::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jbyte Byte::parseByte(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_parseByte_5fdc3f5c], a0.this$);
    }

    jbyte Byte::parseByte(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticByteMethod(cls, mids$[mid_parseByte_6e53ccd2], a0.this$, a1);
    }

    jshort Byte::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    ::java::lang::String Byte::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Byte::toString(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_fce80606], a0));
    }

    Byte Byte::valueOf(jbyte a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_f1e1a5a7], a0));
    }

    Byte Byte::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_4a53f64a], a0.this$));
    }

    Byte Byte::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_83e30bb0], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Byte_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Byte_init_(t_Byte *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Byte_byteValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_compareTo(t_Byte *self, PyObject *arg);
    static PyObject *t_Byte_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Byte_doubleValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_equals(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_floatValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_hashCode(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_intValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_longValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_parseByte(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_shortValue(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_toString(t_Byte *self, PyObject *args);
    static PyObject *t_Byte_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Byte_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Byte__methods_[] = {
      DECLARE_METHOD(t_Byte, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Byte, compareTo, METH_O),
      DECLARE_METHOD(t_Byte, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, equals, METH_VARARGS),
      DECLARE_METHOD(t_Byte, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Byte, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, parseByte, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Byte, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Byte, toString, METH_VARARGS),
      DECLARE_METHOD(t_Byte, toString_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Byte, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Byte, t_Byte, ::java::lang::Number, Byte, t_Byte_init_, 0, 0, 0, 0, 0);

    void t_Byte::install(PyObject *module)
    {
      installType(&PY_TYPE(Byte), module, "Byte", 0);
    }

    void t_Byte::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "class_", make_descriptor(Byte::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "wrapfn_", make_descriptor(unboxByte));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "boxfn_", make_descriptor(boxByte));
      env->getClass(Byte::initializeClass);
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "MAX_VALUE", make_descriptor(Byte::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "MIN_VALUE", make_descriptor(Byte::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "SIZE", make_descriptor(Byte::SIZE));
      PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Byte::TYPE)));
    }

    static PyObject *t_Byte_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Byte::initializeClass, 1)))
        return NULL;
      return t_Byte::wrap_Object(Byte(((t_Byte *) arg)->object.this$));
    }
    static PyObject *t_Byte_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Byte::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Byte_init_(t_Byte *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jbyte a0;
          Byte object((jobject) NULL);

          if (!parseArgs(args, "B", &a0))
          {
            INT_CALL(object = Byte(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Byte object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Byte(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Byte_byteValue(t_Byte *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Byte_compare(PyTypeObject *type, PyObject *args)
    {
      jbyte a0;
      jbyte a1;
      jint result;

      if (!parseArgs(args, "BB", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Byte::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Byte_compareTo(t_Byte *self, PyObject *arg)
    {
      Byte a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Byte), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Byte_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Byte result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::decode(a0));
        return t_Byte::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Byte_doubleValue(t_Byte *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Byte_equals(t_Byte *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Byte_floatValue(t_Byte *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Byte_hashCode(t_Byte *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Byte_intValue(t_Byte *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Byte_longValue(t_Byte *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Byte_parseByte(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jbyte result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::parseByte(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jbyte result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Byte::parseByte(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseByte", args);
      return NULL;
    }

    static PyObject *t_Byte_shortValue(t_Byte *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Byte_toString(t_Byte *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Byte), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Byte_toString_(PyTypeObject *type, PyObject *args)
    {
      jbyte a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, "B", &a0))
      {
        OBJ_CALL(result = ::java::lang::Byte::toString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Byte_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jbyte a0;
          Byte result((jobject) NULL);

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0));
            return t_Byte::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Byte result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0));
            return t_Byte::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Byte result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Byte::valueOf(a0, a1));
            return t_Byte::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/CoreParser.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/xml/ParserException.h"
#include "java/io/InputStream.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *CoreParser::class$ = NULL;
          jmethodID *CoreParser::mids$ = NULL;
          bool CoreParser::live$ = false;
          jint CoreParser::maxNumCachedFilters = (jint) 0;

          jclass CoreParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/CoreParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_64322899] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
              mids$[mid_addFilterBuilder_a961e918] = env->getMethodID(cls, "addFilterBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/FilterBuilder;)V");
              mids$[mid_addQueryBuilder_155f2547] = env->getMethodID(cls, "addQueryBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");
              mids$[mid_parse_2700f308] = env->getMethodID(cls, "parse", "(Ljava/io/InputStream;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              maxNumCachedFilters = env->getStaticIntField(cls, "maxNumCachedFilters");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CoreParser::CoreParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}

          CoreParser::CoreParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::queryparser::classic::QueryParser & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_64322899, a0.this$, a1.this$)) {}

          void CoreParser::addFilterBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::FilterBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addFilterBuilder_a961e918], a0.this$, a1.this$);
          }

          void CoreParser::addQueryBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::QueryBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addQueryBuilder_155f2547], a0.this$, a1.this$);
          }

          ::org::apache::lucene::search::Query CoreParser::parse(const ::java::io::InputStream & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_2700f308], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_CoreParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CoreParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CoreParser_init_(t_CoreParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CoreParser_addFilterBuilder(t_CoreParser *self, PyObject *args);
          static PyObject *t_CoreParser_addQueryBuilder(t_CoreParser *self, PyObject *args);
          static PyObject *t_CoreParser_parse(t_CoreParser *self, PyObject *arg);

          static PyMethodDef t_CoreParser__methods_[] = {
            DECLARE_METHOD(t_CoreParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CoreParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CoreParser, addFilterBuilder, METH_VARARGS),
            DECLARE_METHOD(t_CoreParser, addQueryBuilder, METH_VARARGS),
            DECLARE_METHOD(t_CoreParser, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CoreParser, t_CoreParser, ::java::lang::Object, CoreParser, t_CoreParser_init_, 0, 0, 0, 0, 0);

          void t_CoreParser::install(PyObject *module)
          {
            installType(&PY_TYPE(CoreParser), module, "CoreParser", 0);
          }

          void t_CoreParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "class_", make_descriptor(CoreParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "wrapfn_", make_descriptor(t_CoreParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CoreParser::initializeClass);
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "maxNumCachedFilters", make_descriptor(CoreParser::maxNumCachedFilters));
          }

          static PyObject *t_CoreParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CoreParser::initializeClass, 1)))
              return NULL;
            return t_CoreParser::wrap_Object(CoreParser(((t_CoreParser *) arg)->object.this$));
          }
          static PyObject *t_CoreParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CoreParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CoreParser_init_(t_CoreParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                CoreParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CoreParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::queryparser::classic::QueryParser a1((jobject) NULL);
                CoreParser object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CoreParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CoreParser_addFilterBuilder(t_CoreParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::FilterBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addFilterBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addFilterBuilder", args);
            return NULL;
          }

          static PyObject *t_CoreParser_addQueryBuilder(t_CoreParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addQueryBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addQueryBuilder", args);
            return NULL;
          }

          static PyObject *t_CoreParser_parse(t_CoreParser *self, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SimpleFSLockFactory.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Lock.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SimpleFSLockFactory::class$ = NULL;
        jmethodID *SimpleFSLockFactory::mids$ = NULL;
        bool SimpleFSLockFactory::live$ = false;

        jclass SimpleFSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SimpleFSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleFSLockFactory::SimpleFSLockFactory() : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        SimpleFSLockFactory::SimpleFSLockFactory(const ::java::lang::String & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        SimpleFSLockFactory::SimpleFSLockFactory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        void SimpleFSLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock SimpleFSLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SimpleFSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleFSLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleFSLockFactory_init_(t_SimpleFSLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleFSLockFactory_clearLock(t_SimpleFSLockFactory *self, PyObject *args);
        static PyObject *t_SimpleFSLockFactory_makeLock(t_SimpleFSLockFactory *self, PyObject *args);

        static PyMethodDef t_SimpleFSLockFactory__methods_[] = {
          DECLARE_METHOD(t_SimpleFSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleFSLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_SimpleFSLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleFSLockFactory, t_SimpleFSLockFactory, ::org::apache::lucene::store::FSLockFactory, SimpleFSLockFactory, t_SimpleFSLockFactory_init_, 0, 0, 0, 0, 0);

        void t_SimpleFSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleFSLockFactory), module, "SimpleFSLockFactory", 0);
        }

        void t_SimpleFSLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleFSLockFactory).tp_dict, "class_", make_descriptor(SimpleFSLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleFSLockFactory).tp_dict, "wrapfn_", make_descriptor(t_SimpleFSLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleFSLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleFSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleFSLockFactory::initializeClass, 1)))
            return NULL;
          return t_SimpleFSLockFactory::wrap_Object(SimpleFSLockFactory(((t_SimpleFSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_SimpleFSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleFSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleFSLockFactory_init_(t_SimpleFSLockFactory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              SimpleFSLockFactory object((jobject) NULL);

              INT_CALL(object = SimpleFSLockFactory());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              SimpleFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = SimpleFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::io::File a0((jobject) NULL);
              SimpleFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = SimpleFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleFSLockFactory_clearLock(t_SimpleFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SimpleFSLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_SimpleFSLockFactory_makeLock(t_SimpleFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SimpleFSLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Fields.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/TermsConsumer.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldsConsumer::class$ = NULL;
        jmethodID *FieldsConsumer::mids$ = NULL;
        bool FieldsConsumer::live$ = false;

        jclass FieldsConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldsConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addField_eb6fab90] = env->getMethodID(cls, "addField", "(Lorg/apache/lucene/index/FieldInfo;)Lorg/apache/lucene/codecs/TermsConsumer;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_f282c82a] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/index/Fields;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::TermsConsumer FieldsConsumer::addField(const ::org::apache::lucene::index::FieldInfo & a0) const
        {
          return ::org::apache::lucene::codecs::TermsConsumer(env->callObjectMethod(this$, mids$[mid_addField_eb6fab90], a0.this$));
        }

        void FieldsConsumer::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void FieldsConsumer::merge(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::index::Fields & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_f282c82a], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldsConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldsConsumer_addField(t_FieldsConsumer *self, PyObject *arg);
        static PyObject *t_FieldsConsumer_close(t_FieldsConsumer *self);
        static PyObject *t_FieldsConsumer_merge(t_FieldsConsumer *self, PyObject *args);

        static PyMethodDef t_FieldsConsumer__methods_[] = {
          DECLARE_METHOD(t_FieldsConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldsConsumer, addField, METH_O),
          DECLARE_METHOD(t_FieldsConsumer, close, METH_NOARGS),
          DECLARE_METHOD(t_FieldsConsumer, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldsConsumer, t_FieldsConsumer, ::java::lang::Object, FieldsConsumer, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldsConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldsConsumer), module, "FieldsConsumer", 0);
        }

        void t_FieldsConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldsConsumer).tp_dict, "class_", make_descriptor(FieldsConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldsConsumer).tp_dict, "wrapfn_", make_descriptor(t_FieldsConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldsConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldsConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldsConsumer::initializeClass, 1)))
            return NULL;
          return t_FieldsConsumer::wrap_Object(FieldsConsumer(((t_FieldsConsumer *) arg)->object.this$));
        }
        static PyObject *t_FieldsConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldsConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldsConsumer_addField(t_FieldsConsumer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::TermsConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.addField(a0));
            return ::org::apache::lucene::codecs::t_TermsConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "addField", arg);
          return NULL;
        }

        static PyObject *t_FieldsConsumer_close(t_FieldsConsumer *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldsConsumer_merge(t_FieldsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::Fields a1((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::index::Fields::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.merge(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNotQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/TermContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNotQuery::class$ = NULL;
          jmethodID *SpanNotQuery::mids$ = NULL;
          bool SpanNotQuery::live$ = false;

          jclass SpanNotQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNotQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c77562f2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_init$_2606b720] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;I)V");
              mids$[mid_init$_0c3ef6ba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;II)V");
              mids$[mid_clone_4b6f9500] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanNotQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getExclude_d3aa0332] = env->getMethodID(cls, "getExclude", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getInclude_d3aa0332] = env->getMethodID(cls, "getInclude", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_c77562f2, a0.this$, a1.this$)) {}

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1, jint a2) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_2606b720, a0.this$, a1.this$, a2)) {}

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1, jint a2, jint a3) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_0c3ef6ba, a0.this$, a1.this$, a2, a3)) {}

          SpanNotQuery SpanNotQuery::clone() const
          {
            return SpanNotQuery(env->callObjectMethod(this$, mids$[mid_clone_4b6f9500]));
          }

          jboolean SpanNotQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanNotQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanNotQuery::getExclude() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getExclude_d3aa0332]));
          }

          ::java::lang::String SpanNotQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanNotQuery::getInclude() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getInclude_d3aa0332]));
          }

          ::org::apache::lucene::search::spans::Spans SpanNotQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint SpanNotQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query SpanNotQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String SpanNotQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNotQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNotQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNotQuery_init_(t_SpanNotQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNotQuery_clone(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_equals(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_extractTerms(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_getExclude(t_SpanNotQuery *self);
          static PyObject *t_SpanNotQuery_getField(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_getInclude(t_SpanNotQuery *self);
          static PyObject *t_SpanNotQuery_getSpans(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_hashCode(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_rewrite(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_toString(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_get__exclude(t_SpanNotQuery *self, void *data);
          static PyObject *t_SpanNotQuery_get__field(t_SpanNotQuery *self, void *data);
          static PyObject *t_SpanNotQuery_get__include(t_SpanNotQuery *self, void *data);
          static PyGetSetDef t_SpanNotQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanNotQuery, exclude),
            DECLARE_GET_FIELD(t_SpanNotQuery, field),
            DECLARE_GET_FIELD(t_SpanNotQuery, include),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanNotQuery__methods_[] = {
            DECLARE_METHOD(t_SpanNotQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNotQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNotQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, getExclude, METH_NOARGS),
            DECLARE_METHOD(t_SpanNotQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, getInclude, METH_NOARGS),
            DECLARE_METHOD(t_SpanNotQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanNotQuery, t_SpanNotQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanNotQuery, t_SpanNotQuery_init_, 0, 0, t_SpanNotQuery__fields_, 0, 0);

          void t_SpanNotQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNotQuery), module, "SpanNotQuery", 0);
          }

          void t_SpanNotQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanNotQuery).tp_dict, "class_", make_descriptor(SpanNotQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanNotQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanNotQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanNotQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNotQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNotQuery::initializeClass, 1)))
              return NULL;
            return t_SpanNotQuery::wrap_Object(SpanNotQuery(((t_SpanNotQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanNotQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNotQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNotQuery_init_(t_SpanNotQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                jint a2;
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                jint a2;
                jint a3;
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNotQuery_clone(t_SpanNotQuery *self, PyObject *args)
          {
            SpanNotQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanNotQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanNotQuery_equals(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanNotQuery_extractTerms(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanNotQuery_getExclude(t_SpanNotQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getExclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanNotQuery_getField(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanNotQuery_getInclude(t_SpanNotQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getInclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanNotQuery_getSpans(t_SpanNotQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanNotQuery_hashCode(t_SpanNotQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanNotQuery_rewrite(t_SpanNotQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanNotQuery_toString(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanNotQuery_get__exclude(t_SpanNotQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getExclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }

          static PyObject *t_SpanNotQuery_get__field(t_SpanNotQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanNotQuery_get__include(t_SpanNotQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getInclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter.h"
#include "java/io/File.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/compound/hyphenation/HyphenationTree.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {

          ::java::lang::Class *HyphenationCompoundWordTokenFilter::class$ = NULL;
          jmethodID *HyphenationCompoundWordTokenFilter::mids$ = NULL;
          bool HyphenationCompoundWordTokenFilter::live$ = false;

          jclass HyphenationCompoundWordTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6851072a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;)V");
              mids$[mid_init$_213956f5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_9c907b94] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;III)V");
              mids$[mid_init$_46c08466] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;Lorg/apache/lucene/analysis/util/CharArraySet;IIIZ)V");
              mids$[mid_getHyphenationTree_5c26e2ec] = env->getStaticMethodID(cls, "getHyphenationTree", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;");
              mids$[mid_getHyphenationTree_70e8a373] = env->getStaticMethodID(cls, "getHyphenationTree", "(Ljava/io/File;)Lorg/apache/lucene/analysis/compound/hyphenation/HyphenationTree;");
              mids$[mid_decompose_54c6a166] = env->getMethodID(cls, "decompose", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_6851072a, a0.this$, a1.this$, a2.this$)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_213956f5, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2, jint a3, jint a4, jint a5) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_9c907b94, a0.this$, a1.this$, a2.this$, a3, a4, a5)) {}

          HyphenationCompoundWordTokenFilter::HyphenationCompoundWordTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree & a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3, jint a4, jint a5, jint a6, jboolean a7) : ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase(env->newObject(initializeClass, &mids$, mid_init$_46c08466, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5, a6, a7)) {}

          ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree HyphenationCompoundWordTokenFilter::getHyphenationTree(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree(env->callStaticObjectMethod(cls, mids$[mid_getHyphenationTree_5c26e2ec], a0.this$));
          }

          ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree HyphenationCompoundWordTokenFilter::getHyphenationTree(const ::java::io::File & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree(env->callStaticObjectMethod(cls, mids$[mid_getHyphenationTree_70e8a373], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace compound {
          static PyObject *t_HyphenationCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HyphenationCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HyphenationCompoundWordTokenFilter_init_(t_HyphenationCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HyphenationCompoundWordTokenFilter_getHyphenationTree(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_HyphenationCompoundWordTokenFilter__methods_[] = {
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HyphenationCompoundWordTokenFilter, getHyphenationTree, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HyphenationCompoundWordTokenFilter, t_HyphenationCompoundWordTokenFilter, ::org::apache::lucene::analysis::compound::CompoundWordTokenFilterBase, HyphenationCompoundWordTokenFilter, t_HyphenationCompoundWordTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_HyphenationCompoundWordTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HyphenationCompoundWordTokenFilter), module, "HyphenationCompoundWordTokenFilter", 0);
          }

          void t_HyphenationCompoundWordTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilter).tp_dict, "class_", make_descriptor(HyphenationCompoundWordTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_HyphenationCompoundWordTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HyphenationCompoundWordTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HyphenationCompoundWordTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HyphenationCompoundWordTokenFilter::initializeClass, 1)))
              return NULL;
            return t_HyphenationCompoundWordTokenFilter::wrap_Object(HyphenationCompoundWordTokenFilter(((t_HyphenationCompoundWordTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_HyphenationCompoundWordTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HyphenationCompoundWordTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HyphenationCompoundWordTokenFilter_init_(t_HyphenationCompoundWordTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                jint a3;
                jint a4;
                jint a5;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkkIII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 8:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree a2((jobject) NULL);
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                jint a4;
                jint a5;
                jint a6;
                jboolean a7;
                HyphenationCompoundWordTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkkKIIIZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a4, &a5, &a6, &a7))
                {
                  INT_CALL(object = HyphenationCompoundWordTokenFilter(a0, a1, a2, a3, a4, a5, a6, a7));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HyphenationCompoundWordTokenFilter_getHyphenationTree(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter::getHyphenationTree(a0));
                  return ::org::apache::lucene::analysis::compound::hyphenation::t_HyphenationTree::wrap_Object(result);
                }
              }
              {
                ::java::io::File a0((jobject) NULL);
                ::org::apache::lucene::analysis::compound::hyphenation::HyphenationTree result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::analysis::compound::HyphenationCompoundWordTokenFilter::getHyphenationTree(a0));
                  return ::org::apache::lucene::analysis::compound::hyphenation::t_HyphenationTree::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "getHyphenationTree", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues$MultiSortedSetDocValues::class$ = NULL;
        jmethodID *MultiDocValues$MultiSortedSetDocValues::mids$ = NULL;
        jfieldID *MultiDocValues$MultiSortedSetDocValues::fids$ = NULL;
        bool MultiDocValues$MultiSortedSetDocValues::live$ = false;

        jclass MultiDocValues$MultiSortedSetDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues$MultiSortedSetDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValueCount_54c6a17a] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_lookupOrd_9c59b7f4] = env->getMethodID(cls, "lookupOrd", "(J)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_nextOrd_54c6a17a] = env->getMethodID(cls, "nextOrd", "()J");
            mids$[mid_setDocument_39c7bd3c] = env->getMethodID(cls, "setDocument", "(I)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docStarts] = env->getFieldID(cls, "docStarts", "[I");
            fids$[fid_mapping] = env->getFieldID(cls, "mapping", "Lorg/apache/lucene/index/MultiDocValues$OrdinalMap;");
            fids$[fid_values] = env->getFieldID(cls, "values", "[Lorg/apache/lucene/index/SortedSetDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong MultiDocValues$MultiSortedSetDocValues::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_54c6a17a]);
        }

        ::org::apache::lucene::util::BytesRef MultiDocValues$MultiSortedSetDocValues::lookupOrd(jlong a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_9c59b7f4], a0));
        }

        jlong MultiDocValues$MultiSortedSetDocValues::nextOrd() const
        {
          return env->callLongMethod(this$, mids$[mid_nextOrd_54c6a17a]);
        }

        void MultiDocValues$MultiSortedSetDocValues::setDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocument_39c7bd3c], a0);
        }

        JArray< jint > MultiDocValues$MultiSortedSetDocValues::_get_docStarts() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_docStarts]));
        }

        ::org::apache::lucene::index::MultiDocValues$OrdinalMap MultiDocValues$MultiSortedSetDocValues::_get_mapping() const
        {
          return ::org::apache::lucene::index::MultiDocValues$OrdinalMap(env->getObjectField(this$, fids$[fid_mapping]));
        }

        JArray< ::org::apache::lucene::index::SortedSetDocValues > MultiDocValues$MultiSortedSetDocValues::_get_values() const
        {
          return JArray< ::org::apache::lucene::index::SortedSetDocValues >(env->getObjectField(this$, fids$[fid_values]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_getValueCount(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_lookupOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_nextOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_setDocument(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__docStarts(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__mapping(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__values(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);

        static int t_MultiDocValues$MultiSortedSetDocValues_set__document(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *arg, void *data);
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__valueCount(t_MultiDocValues$MultiSortedSetDocValues *self, void *data);
        static PyGetSetDef t_MultiDocValues$MultiSortedSetDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, docStarts),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, mapping),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, values),
          DECLARE_SET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, document),
          DECLARE_GET_FIELD(t_MultiDocValues$MultiSortedSetDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocValues$MultiSortedSetDocValues__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, getValueCount, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, lookupOrd, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, nextOrd, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocValues$MultiSortedSetDocValues, setDocument, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues$MultiSortedSetDocValues, t_MultiDocValues$MultiSortedSetDocValues, ::org::apache::lucene::index::SortedSetDocValues, MultiDocValues$MultiSortedSetDocValues, abstract_init, 0, 0, t_MultiDocValues$MultiSortedSetDocValues__fields_, 0, 0);

        void t_MultiDocValues$MultiSortedSetDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), module, "MultiDocValues$MultiSortedSetDocValues", 0);
        }

        void t_MultiDocValues$MultiSortedSetDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedSetDocValues).tp_dict, "class_", make_descriptor(MultiDocValues$MultiSortedSetDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedSetDocValues).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues$MultiSortedSetDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$MultiSortedSetDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues$MultiSortedSetDocValues::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues$MultiSortedSetDocValues::wrap_Object(MultiDocValues$MultiSortedSetDocValues(((t_MultiDocValues$MultiSortedSetDocValues *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues$MultiSortedSetDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_getValueCount(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getValueCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "getValueCount", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_lookupOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "lookupOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_nextOrd(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextOrd());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "nextOrd", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_setDocument(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setDocument(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(MultiDocValues$MultiSortedSetDocValues), (PyObject *) self, "setDocument", args, 2);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__docStarts(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docStarts());
          return value.wrap();
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__mapping(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          ::org::apache::lucene::index::MultiDocValues$OrdinalMap value((jobject) NULL);
          OBJ_CALL(value = self->object._get_mapping());
          return ::org::apache::lucene::index::t_MultiDocValues$OrdinalMap::wrap_Object(value);
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__values(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          JArray< ::org::apache::lucene::index::SortedSetDocValues > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_values());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_SortedSetDocValues::wrap_jobject);
        }

        static int t_MultiDocValues$MultiSortedSetDocValues_set__document(t_MultiDocValues$MultiSortedSetDocValues *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDocument(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "document", arg);
          return -1;
        }

        static PyObject *t_MultiDocValues$MultiSortedSetDocValues_get__valueCount(t_MultiDocValues$MultiSortedSetDocValues *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/CatalanStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *CatalanStemmer::class$ = NULL;
        jmethodID *CatalanStemmer::mids$ = NULL;
        bool CatalanStemmer::live$ = false;

        jclass CatalanStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/CatalanStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CatalanStemmer::CatalanStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean CatalanStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint CatalanStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CatalanStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_CatalanStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CatalanStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CatalanStemmer_init_(t_CatalanStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CatalanStemmer_equals(t_CatalanStemmer *self, PyObject *args);
        static PyObject *t_CatalanStemmer_hashCode(t_CatalanStemmer *self, PyObject *args);
        static PyObject *t_CatalanStemmer_stem(t_CatalanStemmer *self, PyObject *args);

        static PyMethodDef t_CatalanStemmer__methods_[] = {
          DECLARE_METHOD(t_CatalanStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CatalanStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CatalanStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_CatalanStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CatalanStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CatalanStemmer, t_CatalanStemmer, ::org::tartarus::snowball::SnowballProgram, CatalanStemmer, t_CatalanStemmer_init_, 0, 0, 0, 0, 0);

        void t_CatalanStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(CatalanStemmer), module, "CatalanStemmer", 0);
        }

        void t_CatalanStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CatalanStemmer).tp_dict, "class_", make_descriptor(CatalanStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CatalanStemmer).tp_dict, "wrapfn_", make_descriptor(t_CatalanStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CatalanStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CatalanStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CatalanStemmer::initializeClass, 1)))
            return NULL;
          return t_CatalanStemmer::wrap_Object(CatalanStemmer(((t_CatalanStemmer *) arg)->object.this$));
        }
        static PyObject *t_CatalanStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CatalanStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CatalanStemmer_init_(t_CatalanStemmer *self, PyObject *args, PyObject *kwds)
        {
          CatalanStemmer object((jobject) NULL);

          INT_CALL(object = CatalanStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_CatalanStemmer_equals(t_CatalanStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CatalanStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CatalanStemmer_hashCode(t_CatalanStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CatalanStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CatalanStemmer_stem(t_CatalanStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CatalanStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NumericUtils$IntRangeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NumericUtils$IntRangeBuilder::class$ = NULL;
        jmethodID *NumericUtils$IntRangeBuilder::mids$ = NULL;
        bool NumericUtils$IntRangeBuilder::live$ = false;

        jclass NumericUtils$IntRangeBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NumericUtils$IntRangeBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_addRange_594e5ee6] = env->getMethodID(cls, "addRange", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_addRange_d3236aa4] = env->getMethodID(cls, "addRange", "(III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericUtils$IntRangeBuilder::NumericUtils$IntRangeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void NumericUtils$IntRangeBuilder::addRange(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_594e5ee6], a0.this$, a1.this$);
        }

        void NumericUtils$IntRangeBuilder::addRange(jint a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_d3236aa4], a0, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NumericUtils$IntRangeBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils$IntRangeBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericUtils$IntRangeBuilder_init_(t_NumericUtils$IntRangeBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericUtils$IntRangeBuilder_addRange(t_NumericUtils$IntRangeBuilder *self, PyObject *args);

        static PyMethodDef t_NumericUtils$IntRangeBuilder__methods_[] = {
          DECLARE_METHOD(t_NumericUtils$IntRangeBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$IntRangeBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$IntRangeBuilder, addRange, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericUtils$IntRangeBuilder, t_NumericUtils$IntRangeBuilder, ::java::lang::Object, NumericUtils$IntRangeBuilder, t_NumericUtils$IntRangeBuilder_init_, 0, 0, 0, 0, 0);

        void t_NumericUtils$IntRangeBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericUtils$IntRangeBuilder), module, "NumericUtils$IntRangeBuilder", 0);
        }

        void t_NumericUtils$IntRangeBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericUtils$IntRangeBuilder).tp_dict, "class_", make_descriptor(NumericUtils$IntRangeBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericUtils$IntRangeBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericUtils$IntRangeBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericUtils$IntRangeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericUtils$IntRangeBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericUtils$IntRangeBuilder::initializeClass, 1)))
            return NULL;
          return t_NumericUtils$IntRangeBuilder::wrap_Object(NumericUtils$IntRangeBuilder(((t_NumericUtils$IntRangeBuilder *) arg)->object.this$));
        }
        static PyObject *t_NumericUtils$IntRangeBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericUtils$IntRangeBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericUtils$IntRangeBuilder_init_(t_NumericUtils$IntRangeBuilder *self, PyObject *args, PyObject *kwds)
        {
          NumericUtils$IntRangeBuilder object((jobject) NULL);

          INT_CALL(object = NumericUtils$IntRangeBuilder());
          self->object = object;

          return 0;
        }

        static PyObject *t_NumericUtils$IntRangeBuilder_addRange(t_NumericUtils$IntRangeBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addRange(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              jint a0;
              jint a1;
              jint a2;

              if (!parseArgs(args, "III", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addRange(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addRange", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ConstantScoreQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ConstantScoreQuery::class$ = NULL;
        jmethodID *ConstantScoreQuery::mids$ = NULL;
        bool ConstantScoreQuery::live$ = false;

        jclass ConstantScoreQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ConstantScoreQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
            mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getFilter_b40f961f] = env->getMethodID(cls, "getFilter", "()Lorg/apache/lucene/search/Filter;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ConstantScoreQuery::ConstantScoreQuery(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        ConstantScoreQuery::ConstantScoreQuery(const ::org::apache::lucene::search::Filter & a0) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}

        ::org::apache::lucene::search::Weight ConstantScoreQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
        }

        jboolean ConstantScoreQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void ConstantScoreQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        ::org::apache::lucene::search::Filter ConstantScoreQuery::getFilter() const
        {
          return ::org::apache::lucene::search::Filter(env->callObjectMethod(this$, mids$[mid_getFilter_b40f961f]));
        }

        ::org::apache::lucene::search::Query ConstantScoreQuery::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint ConstantScoreQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query ConstantScoreQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        ::java::lang::String ConstantScoreQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ConstantScoreQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ConstantScoreQuery_init_(t_ConstantScoreQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ConstantScoreQuery_createWeight(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_equals(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_extractTerms(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_getFilter(t_ConstantScoreQuery *self);
        static PyObject *t_ConstantScoreQuery_getQuery(t_ConstantScoreQuery *self);
        static PyObject *t_ConstantScoreQuery_hashCode(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_rewrite(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_toString(t_ConstantScoreQuery *self, PyObject *args);
        static PyObject *t_ConstantScoreQuery_get__filter(t_ConstantScoreQuery *self, void *data);
        static PyObject *t_ConstantScoreQuery_get__query(t_ConstantScoreQuery *self, void *data);
        static PyGetSetDef t_ConstantScoreQuery__fields_[] = {
          DECLARE_GET_FIELD(t_ConstantScoreQuery, filter),
          DECLARE_GET_FIELD(t_ConstantScoreQuery, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConstantScoreQuery__methods_[] = {
          DECLARE_METHOD(t_ConstantScoreQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreQuery, createWeight, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, getFilter, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ConstantScoreQuery, t_ConstantScoreQuery, ::org::apache::lucene::search::Query, ConstantScoreQuery, t_ConstantScoreQuery_init_, 0, 0, t_ConstantScoreQuery__fields_, 0, 0);

        void t_ConstantScoreQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(ConstantScoreQuery), module, "ConstantScoreQuery", 0);
        }

        void t_ConstantScoreQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ConstantScoreQuery).tp_dict, "class_", make_descriptor(ConstantScoreQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ConstantScoreQuery).tp_dict, "wrapfn_", make_descriptor(t_ConstantScoreQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ConstantScoreQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ConstantScoreQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConstantScoreQuery::initializeClass, 1)))
            return NULL;
          return t_ConstantScoreQuery::wrap_Object(ConstantScoreQuery(((t_ConstantScoreQuery *) arg)->object.this$));
        }
        static PyObject *t_ConstantScoreQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConstantScoreQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ConstantScoreQuery_init_(t_ConstantScoreQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              ConstantScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                INT_CALL(object = ConstantScoreQuery(a0));
                self->object = object;
                break;
              }
            }
            {
              ::org::apache::lucene::search::Filter a0((jobject) NULL);
              ConstantScoreQuery object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
              {
                INT_CALL(object = ConstantScoreQuery(a0));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ConstantScoreQuery_createWeight(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Weight result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.createWeight(a0));
            return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "createWeight", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_equals(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_extractTerms(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_getFilter(t_ConstantScoreQuery *self)
        {
          ::org::apache::lucene::search::Filter result((jobject) NULL);
          OBJ_CALL(result = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(result);
        }

        static PyObject *t_ConstantScoreQuery_getQuery(t_ConstantScoreQuery *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_ConstantScoreQuery_hashCode(t_ConstantScoreQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_rewrite(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_toString(t_ConstantScoreQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ConstantScoreQuery_get__filter(t_ConstantScoreQuery *self, void *data)
        {
          ::org::apache::lucene::search::Filter value((jobject) NULL);
          OBJ_CALL(value = self->object.getFilter());
          return ::org::apache::lucene::search::t_Filter::wrap_Object(value);
        }

        static PyObject *t_ConstantScoreQuery_get__query(t_ConstantScoreQuery *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonFieldComparator.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonFieldComparator::class$ = NULL;
        jmethodID *PythonFieldComparator::mids$ = NULL;
        bool PythonFieldComparator::live$ = false;

        jclass PythonFieldComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonFieldComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareDocToValue_f7cd74bb] = env->getMethodID(cls, "compareDocToValue", "(ILjava/lang/Object;)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_290588ee] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Object;)V");
            mids$[mid_value_29be6a55] = env->getMethodID(cls, "value", "(I)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFieldComparator::PythonFieldComparator() : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonFieldComparator::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFieldComparator::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFieldComparator::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonFieldComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFieldComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFieldComparator_of_(t_PythonFieldComparator *self, PyObject *args);
        static int t_PythonFieldComparator_init_(t_PythonFieldComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFieldComparator_finalize(t_PythonFieldComparator *self);
        static PyObject *t_PythonFieldComparator_pythonExtension(t_PythonFieldComparator *self, PyObject *args);
        static jint JNICALL t_PythonFieldComparator_compare0(JNIEnv *jenv, jobject jobj, jint a0, jint a1);
        static jint JNICALL t_PythonFieldComparator_compareBottom1(JNIEnv *jenv, jobject jobj, jint a0);
        static jint JNICALL t_PythonFieldComparator_compareDocToValue2(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static jint JNICALL t_PythonFieldComparator_compareTop3(JNIEnv *jenv, jobject jobj, jint a0);
        static void JNICALL t_PythonFieldComparator_copy4(JNIEnv *jenv, jobject jobj, jint a0, jint a1);
        static void JNICALL t_PythonFieldComparator_pythonDecRef5(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonFieldComparator_setBottom6(JNIEnv *jenv, jobject jobj, jint a0);
        static jobject JNICALL t_PythonFieldComparator_setNextReader7(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonFieldComparator_setTopValue8(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonFieldComparator_value9(JNIEnv *jenv, jobject jobj, jint a0);
        static PyObject *t_PythonFieldComparator_get__self(t_PythonFieldComparator *self, void *data);
        static PyObject *t_PythonFieldComparator_get__parameters_(t_PythonFieldComparator *self, void *data);
        static PyGetSetDef t_PythonFieldComparator__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFieldComparator, self),
          DECLARE_GET_FIELD(t_PythonFieldComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFieldComparator__methods_[] = {
          DECLARE_METHOD(t_PythonFieldComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFieldComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_PythonFieldComparator, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFieldComparator, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFieldComparator, t_PythonFieldComparator, ::org::apache::lucene::search::FieldComparator, PythonFieldComparator, t_PythonFieldComparator_init_, 0, 0, t_PythonFieldComparator__fields_, 0, 0);
        PyObject *t_PythonFieldComparator::wrap_Object(const PythonFieldComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PythonFieldComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PythonFieldComparator *self = (t_PythonFieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_PythonFieldComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_PythonFieldComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_PythonFieldComparator *self = (t_PythonFieldComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_PythonFieldComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFieldComparator), module, "PythonFieldComparator", 1);
        }

        void t_PythonFieldComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFieldComparator).tp_dict, "class_", make_descriptor(PythonFieldComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparator).tp_dict, "wrapfn_", make_descriptor(t_PythonFieldComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFieldComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFieldComparator::initializeClass);
          JNINativeMethod methods[] = {
            { "compare", "(II)I", (void *) t_PythonFieldComparator_compare0 },
            { "compareBottom", "(I)I", (void *) t_PythonFieldComparator_compareBottom1 },
            { "compareDocToValue", "(ILjava/lang/Object;)I", (void *) t_PythonFieldComparator_compareDocToValue2 },
            { "compareTop", "(I)I", (void *) t_PythonFieldComparator_compareTop3 },
            { "copy", "(II)V", (void *) t_PythonFieldComparator_copy4 },
            { "pythonDecRef", "()V", (void *) t_PythonFieldComparator_pythonDecRef5 },
            { "setBottom", "(I)V", (void *) t_PythonFieldComparator_setBottom6 },
            { "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;", (void *) t_PythonFieldComparator_setNextReader7 },
            { "setTopValue", "(Ljava/lang/Object;)V", (void *) t_PythonFieldComparator_setTopValue8 },
            { "value", "(I)Ljava/lang/Object;", (void *) t_PythonFieldComparator_value9 },
          };
          env->registerNatives(cls, methods, 10);
        }

        static PyObject *t_PythonFieldComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFieldComparator::initializeClass, 1)))
            return NULL;
          return t_PythonFieldComparator::wrap_Object(PythonFieldComparator(((t_PythonFieldComparator *) arg)->object.this$));
        }
        static PyObject *t_PythonFieldComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFieldComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PythonFieldComparator_of_(t_PythonFieldComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_PythonFieldComparator_init_(t_PythonFieldComparator *self, PyObject *args, PyObject *kwds)
        {
          PythonFieldComparator object((jobject) NULL);

          INT_CALL(object = PythonFieldComparator());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFieldComparator_finalize(t_PythonFieldComparator *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFieldComparator_pythonExtension(t_PythonFieldComparator *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jint JNICALL t_PythonFieldComparator_compare0(JNIEnv *jenv, jobject jobj, jint a0, jint a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "compare", "ii", (int) a0, (int) a1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compare", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jint JNICALL t_PythonFieldComparator_compareBottom1(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "compareBottom", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareBottom", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jint JNICALL t_PythonFieldComparator_compareDocToValue2(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o1 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a1));
          PyObject *result = PyObject_CallMethod(obj, "compareDocToValue", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareDocToValue", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jint JNICALL t_PythonFieldComparator_compareTop3(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "compareTop", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("compareTop", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonFieldComparator_copy4(JNIEnv *jenv, jobject jobj, jint a0, jint a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "copy", "ii", (int) a0, (int) a1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static void JNICALL t_PythonFieldComparator_pythonDecRef5(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonFieldComparator_setBottom6(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "setBottom", "i", (int) a0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonFieldComparator_setNextReader7(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::search::FieldComparator value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_AtomicReaderContext::wrap_Object(::org::apache::lucene::index::AtomicReaderContext(a0));
          PyObject *result = PyObject_CallMethod(obj, "setNextReader", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::search::FieldComparator::initializeClass, &value))
          {
            throwTypeError("setNextReader", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonFieldComparator_setTopValue8(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "setTopValue", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonFieldComparator_value9(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFieldComparator::mids$[PythonFieldComparator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "value", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("value", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonFieldComparator_get__self(t_PythonFieldComparator *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
        static PyObject *t_PythonFieldComparator_get__parameters_(t_PythonFieldComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH3.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH3::class$ = NULL;
          jmethodID *NormalizationH3::mids$ = NULL;
          bool NormalizationH3::live$ = false;

          jclass NormalizationH3::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH3");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getMu_54c6a176] = env->getMethodID(cls, "getMu", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH3::NormalizationH3() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationH3::NormalizationH3(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationH3::getMu() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMu_54c6a176]);
          }

          jfloat NormalizationH3::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH3::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH3_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH3_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH3_init_(t_NormalizationH3 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH3_getMu(t_NormalizationH3 *self);
          static PyObject *t_NormalizationH3_tfn(t_NormalizationH3 *self, PyObject *args);
          static PyObject *t_NormalizationH3_toString(t_NormalizationH3 *self, PyObject *args);
          static PyObject *t_NormalizationH3_get__mu(t_NormalizationH3 *self, void *data);
          static PyGetSetDef t_NormalizationH3__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH3, mu),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH3__methods_[] = {
            DECLARE_METHOD(t_NormalizationH3, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH3, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH3, getMu, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH3, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH3, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationH3, t_NormalizationH3, ::org::apache::lucene::search::similarities::Normalization, NormalizationH3, t_NormalizationH3_init_, 0, 0, t_NormalizationH3__fields_, 0, 0);

          void t_NormalizationH3::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH3), module, "NormalizationH3", 0);
          }

          void t_NormalizationH3::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationH3).tp_dict, "class_", make_descriptor(NormalizationH3::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationH3).tp_dict, "wrapfn_", make_descriptor(t_NormalizationH3::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationH3).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH3_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH3::initializeClass, 1)))
              return NULL;
            return t_NormalizationH3::wrap_Object(NormalizationH3(((t_NormalizationH3 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH3_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH3::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH3_init_(t_NormalizationH3 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH3 object((jobject) NULL);

                INT_CALL(object = NormalizationH3());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationH3 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH3(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH3_getMu(t_NormalizationH3 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMu());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH3_tfn(t_NormalizationH3 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationH3), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH3_toString(t_NormalizationH3 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationH3), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH3_get__mu(t_NormalizationH3 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMu());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/FSLockFactory.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *FSLockFactory::class$ = NULL;
        jmethodID *FSLockFactory::mids$ = NULL;
        bool FSLockFactory::live$ = false;

        jclass FSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/FSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getLockDir_a8eb7bbe] = env->getMethodID(cls, "getLockDir", "()Ljava/io/File;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_setLockDir_c3dacf57] = env->getMethodID(cls, "setLockDir", "(Ljava/io/File;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FSLockFactory::FSLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::io::File FSLockFactory::getLockDir() const
        {
          return ::java::io::File(env->callObjectMethod(this$, mids$[mid_getLockDir_a8eb7bbe]));
        }

        ::java::lang::String FSLockFactory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_FSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FSLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FSLockFactory_init_(t_FSLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FSLockFactory_getLockDir(t_FSLockFactory *self);
        static PyObject *t_FSLockFactory_toString(t_FSLockFactory *self, PyObject *args);
        static PyObject *t_FSLockFactory_get__lockDir(t_FSLockFactory *self, void *data);
        static PyGetSetDef t_FSLockFactory__fields_[] = {
          DECLARE_GET_FIELD(t_FSLockFactory, lockDir),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FSLockFactory__methods_[] = {
          DECLARE_METHOD(t_FSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FSLockFactory, getLockDir, METH_NOARGS),
          DECLARE_METHOD(t_FSLockFactory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FSLockFactory, t_FSLockFactory, ::org::apache::lucene::store::LockFactory, FSLockFactory, t_FSLockFactory_init_, 0, 0, t_FSLockFactory__fields_, 0, 0);

        void t_FSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(FSLockFactory), module, "FSLockFactory", 0);
        }

        void t_FSLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FSLockFactory).tp_dict, "class_", make_descriptor(FSLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FSLockFactory).tp_dict, "wrapfn_", make_descriptor(t_FSLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FSLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FSLockFactory::initializeClass, 1)))
            return NULL;
          return t_FSLockFactory::wrap_Object(FSLockFactory(((t_FSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_FSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FSLockFactory_init_(t_FSLockFactory *self, PyObject *args, PyObject *kwds)
        {
          FSLockFactory object((jobject) NULL);

          INT_CALL(object = FSLockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_FSLockFactory_getLockDir(t_FSLockFactory *self)
        {
          ::java::io::File result((jobject) NULL);
          OBJ_CALL(result = self->object.getLockDir());
          return ::java::io::t_File::wrap_Object(result);
        }

        static PyObject *t_FSLockFactory_toString(t_FSLockFactory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FSLockFactory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_FSLockFactory_get__lockDir(t_FSLockFactory *self, void *data)
        {
          ::java::io::File value((jobject) NULL);
          OBJ_CALL(value = self->object.getLockDir());
          return ::java::io::t_File::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/expressions/Bindings.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/search/SortField.h"
#include "org/apache/lucene/search/Rescorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *Expression::class$ = NULL;
        jmethodID *Expression::mids$ = NULL;
        jfieldID *Expression::fids$ = NULL;
        bool Expression::live$ = false;

        jclass Expression::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/Expression");

            mids$ = new jmethodID[max_mid];
            mids$[mid_evaluate_d2e34bbb] = env->getMethodID(cls, "evaluate", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)D");
            mids$[mid_getRescorer_2fab3242] = env->getMethodID(cls, "getRescorer", "(Lorg/apache/lucene/expressions/Bindings;)Lorg/apache/lucene/search/Rescorer;");
            mids$[mid_getSortField_5395b0cd] = env->getMethodID(cls, "getSortField", "(Lorg/apache/lucene/expressions/Bindings;Z)Lorg/apache/lucene/search/SortField;");
            mids$[mid_getValueSource_125265df] = env->getMethodID(cls, "getValueSource", "(Lorg/apache/lucene/expressions/Bindings;)Lorg/apache/lucene/queries/function/ValueSource;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_sourceText] = env->getFieldID(cls, "sourceText", "Ljava/lang/String;");
            fids$[fid_variables] = env->getFieldID(cls, "variables", "[Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble Expression::evaluate(jint a0, const JArray< ::org::apache::lucene::queries::function::FunctionValues > & a1) const
        {
          return env->callDoubleMethod(this$, mids$[mid_evaluate_d2e34bbb], a0, a1.this$);
        }

        ::org::apache::lucene::search::Rescorer Expression::getRescorer(const ::org::apache::lucene::expressions::Bindings & a0) const
        {
          return ::org::apache::lucene::search::Rescorer(env->callObjectMethod(this$, mids$[mid_getRescorer_2fab3242], a0.this$));
        }

        ::org::apache::lucene::search::SortField Expression::getSortField(const ::org::apache::lucene::expressions::Bindings & a0, jboolean a1) const
        {
          return ::org::apache::lucene::search::SortField(env->callObjectMethod(this$, mids$[mid_getSortField_5395b0cd], a0.this$, a1));
        }

        ::org::apache::lucene::queries::function::ValueSource Expression::getValueSource(const ::org::apache::lucene::expressions::Bindings & a0) const
        {
          return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_125265df], a0.this$));
        }

        ::java::lang::String Expression::_get_sourceText() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_sourceText]));
        }

        JArray< ::java::lang::String > Expression::_get_variables() const
        {
          return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_variables]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_Expression_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Expression_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Expression_evaluate(t_Expression *self, PyObject *args);
        static PyObject *t_Expression_getRescorer(t_Expression *self, PyObject *arg);
        static PyObject *t_Expression_getSortField(t_Expression *self, PyObject *args);
        static PyObject *t_Expression_getValueSource(t_Expression *self, PyObject *arg);
        static PyObject *t_Expression_get__sourceText(t_Expression *self, void *data);
        static PyObject *t_Expression_get__variables(t_Expression *self, void *data);

        static PyGetSetDef t_Expression__fields_[] = {
          DECLARE_GET_FIELD(t_Expression, sourceText),
          DECLARE_GET_FIELD(t_Expression, variables),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Expression__methods_[] = {
          DECLARE_METHOD(t_Expression, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Expression, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Expression, evaluate, METH_VARARGS),
          DECLARE_METHOD(t_Expression, getRescorer, METH_O),
          DECLARE_METHOD(t_Expression, getSortField, METH_VARARGS),
          DECLARE_METHOD(t_Expression, getValueSource, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Expression, t_Expression, ::java::lang::Object, Expression, abstract_init, 0, 0, t_Expression__fields_, 0, 0);

        void t_Expression::install(PyObject *module)
        {
          installType(&PY_TYPE(Expression), module, "Expression", 0);
        }

        void t_Expression::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Expression).tp_dict, "class_", make_descriptor(Expression::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Expression).tp_dict, "wrapfn_", make_descriptor(t_Expression::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Expression).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Expression_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Expression::initializeClass, 1)))
            return NULL;
          return t_Expression::wrap_Object(Expression(((t_Expression *) arg)->object.this$));
        }
        static PyObject *t_Expression_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Expression::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Expression_evaluate(t_Expression *self, PyObject *args)
        {
          jint a0;
          JArray< ::org::apache::lucene::queries::function::FunctionValues > a1((jobject) NULL);
          jdouble result;

          if (!parseArgs(args, "I[k", ::org::apache::lucene::queries::function::FunctionValues::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.evaluate(a0, a1));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError((PyObject *) self, "evaluate", args);
          return NULL;
        }

        static PyObject *t_Expression_getRescorer(t_Expression *self, PyObject *arg)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          ::org::apache::lucene::search::Rescorer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getRescorer(a0));
            return ::org::apache::lucene::search::t_Rescorer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getRescorer", arg);
          return NULL;
        }

        static PyObject *t_Expression_getSortField(t_Expression *self, PyObject *args)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          jboolean a1;
          ::org::apache::lucene::search::SortField result((jobject) NULL);

          if (!parseArgs(args, "kZ", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getSortField(a0, a1));
            return ::org::apache::lucene::search::t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSortField", args);
          return NULL;
        }

        static PyObject *t_Expression_getValueSource(t_Expression *self, PyObject *arg)
        {
          ::org::apache::lucene::expressions::Bindings a0((jobject) NULL);
          ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::expressions::Bindings::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.getValueSource(a0));
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getValueSource", arg);
          return NULL;
        }

        static PyObject *t_Expression_get__sourceText(t_Expression *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_sourceText());
          return j2p(value);
        }

        static PyObject *t_Expression_get__variables(t_Expression *self, void *data)
        {
          JArray< ::java::lang::String > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_variables());
          return JArray<jstring>(value.this$).wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicNormalizationFilter::class$ = NULL;
          jmethodID *IndicNormalizationFilter::mids$ = NULL;
          bool IndicNormalizationFilter::live$ = false;

          jclass IndicNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicNormalizationFilter::IndicNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean IndicNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicNormalizationFilter_init_(t_IndicNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndicNormalizationFilter_incrementToken(t_IndicNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_IndicNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_IndicNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicNormalizationFilter, t_IndicNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, IndicNormalizationFilter, t_IndicNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_IndicNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicNormalizationFilter), module, "IndicNormalizationFilter", 0);
          }

          void t_IndicNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilter).tp_dict, "class_", make_descriptor(IndicNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_IndicNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_IndicNormalizationFilter::wrap_Object(IndicNormalizationFilter(((t_IndicNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_IndicNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicNormalizationFilter_init_(t_IndicNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            IndicNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = IndicNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndicNormalizationFilter_incrementToken(t_IndicNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(IndicNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/ByteBlockPool$Allocator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool::class$ = NULL;
        jmethodID *ByteBlockPool::mids$ = NULL;
        jfieldID *ByteBlockPool::fids$ = NULL;
        bool ByteBlockPool::live$ = false;
        jint ByteBlockPool::BYTE_BLOCK_MASK = (jint) 0;
        jint ByteBlockPool::BYTE_BLOCK_SHIFT = (jint) 0;
        jint ByteBlockPool::BYTE_BLOCK_SIZE = (jint) 0;
        jint ByteBlockPool::FIRST_LEVEL_SIZE = (jint) 0;
        JArray< jint > *ByteBlockPool::LEVEL_SIZE_ARRAY = NULL;
        JArray< jint > *ByteBlockPool::NEXT_LEVEL_ARRAY = NULL;

        jclass ByteBlockPool::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5679a66b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/ByteBlockPool$Allocator;)V");
            mids$[mid_allocSlice_b8354c5c] = env->getMethodID(cls, "allocSlice", "([BI)I");
            mids$[mid_append_7bc03dc4] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_newSlice_39c7bd23] = env->getMethodID(cls, "newSlice", "(I)I");
            mids$[mid_nextBuffer_54c6a166] = env->getMethodID(cls, "nextBuffer", "()V");
            mids$[mid_readBytes_d6ca92d6] = env->getMethodID(cls, "readBytes", "(J[BII)V");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_reset_46f2e2c4] = env->getMethodID(cls, "reset", "(ZZ)V");
            mids$[mid_setBytesRef_738fc2ce] = env->getMethodID(cls, "setBytesRef", "(Lorg/apache/lucene/util/BytesRef;I)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_buffer] = env->getFieldID(cls, "buffer", "[B");
            fids$[fid_buffers] = env->getFieldID(cls, "buffers", "[[B");
            fids$[fid_byteOffset] = env->getFieldID(cls, "byteOffset", "I");
            fids$[fid_byteUpto] = env->getFieldID(cls, "byteUpto", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BYTE_BLOCK_MASK = env->getStaticIntField(cls, "BYTE_BLOCK_MASK");
            BYTE_BLOCK_SHIFT = env->getStaticIntField(cls, "BYTE_BLOCK_SHIFT");
            BYTE_BLOCK_SIZE = env->getStaticIntField(cls, "BYTE_BLOCK_SIZE");
            FIRST_LEVEL_SIZE = env->getStaticIntField(cls, "FIRST_LEVEL_SIZE");
            LEVEL_SIZE_ARRAY = new JArray< jint >(env->getStaticObjectField(cls, "LEVEL_SIZE_ARRAY", "[I"));
            NEXT_LEVEL_ARRAY = new JArray< jint >(env->getStaticObjectField(cls, "NEXT_LEVEL_ARRAY", "[I"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool::ByteBlockPool(const ::org::apache::lucene::util::ByteBlockPool$Allocator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5679a66b, a0.this$)) {}

        jint ByteBlockPool::allocSlice(const JArray< jbyte > & a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_allocSlice_b8354c5c], a0.this$, a1);
        }

        void ByteBlockPool::append(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_append_7bc03dc4], a0.this$);
        }

        jint ByteBlockPool::newSlice(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_newSlice_39c7bd23], a0);
        }

        void ByteBlockPool::nextBuffer() const
        {
          env->callVoidMethod(this$, mids$[mid_nextBuffer_54c6a166]);
        }

        void ByteBlockPool::readBytes(jlong a0, const JArray< jbyte > & a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_d6ca92d6], a0, a1.this$, a2, a3);
        }

        void ByteBlockPool::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        void ByteBlockPool::reset(jboolean a0, jboolean a1) const
        {
          env->callVoidMethod(this$, mids$[mid_reset_46f2e2c4], a0, a1);
        }

        void ByteBlockPool::setBytesRef(const ::org::apache::lucene::util::BytesRef & a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesRef_738fc2ce], a0.this$, a1);
        }

        JArray< jbyte > ByteBlockPool::_get_buffer() const
        {
          return JArray< jbyte >(env->getObjectField(this$, fids$[fid_buffer]));
        }

        void ByteBlockPool::_set_buffer(const JArray< jbyte > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffer], a0.this$);
        }

        JArray< JArray< jbyte > > ByteBlockPool::_get_buffers() const
        {
          return JArray< JArray< jbyte > >(env->getObjectField(this$, fids$[fid_buffers]));
        }

        void ByteBlockPool::_set_buffers(const JArray< JArray< jbyte > > & a0) const
        {
          env->setObjectField(this$, fids$[fid_buffers], a0.this$);
        }

        jint ByteBlockPool::_get_byteOffset() const
        {
          return env->getIntField(this$, fids$[fid_byteOffset]);
        }

        void ByteBlockPool::_set_byteOffset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_byteOffset], a0);
        }

        jint ByteBlockPool::_get_byteUpto() const
        {
          return env->getIntField(this$, fids$[fid_byteUpto]);
        }

        void ByteBlockPool::_set_byteUpto(jint a0) const
        {
          env->setIntField(this$, fids$[fid_byteUpto], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectAllocator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool_init_(t_ByteBlockPool *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool_allocSlice(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_append(t_ByteBlockPool *self, PyObject *arg);
        static PyObject *t_ByteBlockPool_newSlice(t_ByteBlockPool *self, PyObject *arg);
        static PyObject *t_ByteBlockPool_nextBuffer(t_ByteBlockPool *self);
        static PyObject *t_ByteBlockPool_readBytes(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_reset(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_setBytesRef(t_ByteBlockPool *self, PyObject *args);
        static PyObject *t_ByteBlockPool_get__buffer(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__buffer(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__buffers(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__buffers(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__byteOffset(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__byteOffset(t_ByteBlockPool *self, PyObject *arg, void *data);
        static PyObject *t_ByteBlockPool_get__byteUpto(t_ByteBlockPool *self, void *data);
        static int t_ByteBlockPool_set__byteUpto(t_ByteBlockPool *self, PyObject *arg, void *data);

        static PyGetSetDef t_ByteBlockPool__fields_[] = {
          DECLARE_GETSET_FIELD(t_ByteBlockPool, buffer),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, buffers),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, byteOffset),
          DECLARE_GETSET_FIELD(t_ByteBlockPool, byteUpto),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool, allocSlice, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, append, METH_O),
          DECLARE_METHOD(t_ByteBlockPool, newSlice, METH_O),
          DECLARE_METHOD(t_ByteBlockPool, nextBuffer, METH_NOARGS),
          DECLARE_METHOD(t_ByteBlockPool, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, reset, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool, setBytesRef, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool, t_ByteBlockPool, ::java::lang::Object, ByteBlockPool, t_ByteBlockPool_init_, 0, 0, t_ByteBlockPool__fields_, 0, 0);

        void t_ByteBlockPool::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool), module, "ByteBlockPool", 0);
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "DirectTrackingAllocator", make_descriptor(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator)));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "DirectAllocator", make_descriptor(&PY_TYPE(ByteBlockPool$DirectAllocator)));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "Allocator", make_descriptor(&PY_TYPE(ByteBlockPool$Allocator)));
        }

        void t_ByteBlockPool::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "class_", make_descriptor(ByteBlockPool::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ByteBlockPool::initializeClass);
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "BYTE_BLOCK_MASK", make_descriptor(ByteBlockPool::BYTE_BLOCK_MASK));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "BYTE_BLOCK_SHIFT", make_descriptor(ByteBlockPool::BYTE_BLOCK_SHIFT));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "BYTE_BLOCK_SIZE", make_descriptor(ByteBlockPool::BYTE_BLOCK_SIZE));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "FIRST_LEVEL_SIZE", make_descriptor(ByteBlockPool::FIRST_LEVEL_SIZE));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "LEVEL_SIZE_ARRAY", make_descriptor(ByteBlockPool::LEVEL_SIZE_ARRAY->wrap()));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool).tp_dict, "NEXT_LEVEL_ARRAY", make_descriptor(ByteBlockPool::NEXT_LEVEL_ARRAY->wrap()));
        }

        static PyObject *t_ByteBlockPool_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool::wrap_Object(ByteBlockPool(((t_ByteBlockPool *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool_init_(t_ByteBlockPool *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::ByteBlockPool$Allocator a0((jobject) NULL);
          ByteBlockPool object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::ByteBlockPool$Allocator::initializeClass, &a0))
          {
            INT_CALL(object = ByteBlockPool(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool_allocSlice(t_ByteBlockPool *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint result;

          if (!parseArgs(args, "[BI", &a0, &a1))
          {
            OBJ_CALL(result = self->object.allocSlice(a0, a1));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "allocSlice", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_append(t_ByteBlockPool *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.append(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "append", arg);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_newSlice(t_ByteBlockPool *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.newSlice(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "newSlice", arg);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_nextBuffer(t_ByteBlockPool *self)
        {
          OBJ_CALL(self->object.nextBuffer());
          Py_RETURN_NONE;
        }

        static PyObject *t_ByteBlockPool_readBytes(t_ByteBlockPool *self, PyObject *args)
        {
          jlong a0;
          JArray< jbyte > a1((jobject) NULL);
          jint a2;
          jint a3;

          if (!parseArgs(args, "J[BII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "readBytes", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_reset(t_ByteBlockPool *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }
            break;
           case 2:
            {
              jboolean a0;
              jboolean a1;

              if (!parseArgs(args, "ZZ", &a0, &a1))
              {
                OBJ_CALL(self->object.reset(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_setBytesRef(t_ByteBlockPool *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint a1;

          if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(self->object.setBytesRef(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesRef", args);
          return NULL;
        }

        static PyObject *t_ByteBlockPool_get__buffer(t_ByteBlockPool *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffer());
          return value.wrap();
        }
        static int t_ByteBlockPool_set__buffer(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          if (!parseArg(arg, "[B", &value))
          {
            INT_CALL(self->object._set_buffer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffer", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__buffers(t_ByteBlockPool *self, void *data)
        {
          JArray< JArray< jbyte > > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_buffers());
          return JArray<jobject>(value.this$).wrap(NULL);
        }
        static int t_ByteBlockPool_set__buffers(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          JArray< JArray< jbyte > > value((jobject) NULL);
          if (!parseArg(arg, "[[B", &value))
          {
            INT_CALL(self->object._set_buffers(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "buffers", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__byteOffset(t_ByteBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_byteOffset());
          return PyInt_FromLong((long) value);
        }
        static int t_ByteBlockPool_set__byteOffset(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_byteOffset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "byteOffset", arg);
          return -1;
        }

        static PyObject *t_ByteBlockPool_get__byteUpto(t_ByteBlockPool *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_byteUpto());
          return PyInt_FromLong((long) value);
        }
        static int t_ByteBlockPool_set__byteUpto(t_ByteBlockPool *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_byteUpto(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "byteUpto", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hunspell/HunspellStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/hunspell/Dictionary.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {

          ::java::lang::Class *HunspellStemFilter::class$ = NULL;
          jmethodID *HunspellStemFilter::mids$ = NULL;
          bool HunspellStemFilter::live$ = false;

          jclass HunspellStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hunspell/HunspellStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_05177913] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;)V");
              mids$[mid_init$_d3f3208c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;Z)V");
              mids$[mid_init$_6c7575a5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/hunspell/Dictionary;ZZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_05177913, a0.this$, a1.this$)) {}

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d3f3208c, a0.this$, a1.this$, a2)) {}

          HunspellStemFilter::HunspellStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::hunspell::Dictionary & a1, jboolean a2, jboolean a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_6c7575a5, a0.this$, a1.this$, a2, a3)) {}

          jboolean HunspellStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void HunspellStemFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hunspell {
          static PyObject *t_HunspellStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HunspellStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HunspellStemFilter_init_(t_HunspellStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HunspellStemFilter_incrementToken(t_HunspellStemFilter *self, PyObject *args);
          static PyObject *t_HunspellStemFilter_reset(t_HunspellStemFilter *self, PyObject *args);

          static PyMethodDef t_HunspellStemFilter__methods_[] = {
            DECLARE_METHOD(t_HunspellStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HunspellStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_HunspellStemFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HunspellStemFilter, t_HunspellStemFilter, ::org::apache::lucene::analysis::TokenFilter, HunspellStemFilter, t_HunspellStemFilter_init_, 0, 0, 0, 0, 0);

          void t_HunspellStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(HunspellStemFilter), module, "HunspellStemFilter", 0);
          }

          void t_HunspellStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HunspellStemFilter).tp_dict, "class_", make_descriptor(HunspellStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilter).tp_dict, "wrapfn_", make_descriptor(t_HunspellStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HunspellStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_HunspellStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HunspellStemFilter::initializeClass, 1)))
              return NULL;
            return t_HunspellStemFilter::wrap_Object(HunspellStemFilter(((t_HunspellStemFilter *) arg)->object.this$));
          }
          static PyObject *t_HunspellStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HunspellStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HunspellStemFilter_init_(t_HunspellStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                jboolean a2;
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kkZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::hunspell::Dictionary a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                HunspellStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kkZZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::hunspell::Dictionary::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = HunspellStemFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HunspellStemFilter_incrementToken(t_HunspellStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HunspellStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_HunspellStemFilter_reset(t_HunspellStemFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(HunspellStemFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/BasicQueryFactory.h"
#include "org/apache/lucene/search/spans/SpanTermQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.h"
#include "org/apache/lucene/search/TermQuery.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *BasicQueryFactory::class$ = NULL;
            jmethodID *BasicQueryFactory::mids$ = NULL;
            bool BasicQueryFactory::live$ = false;

            jclass BasicQueryFactory::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/BasicQueryFactory");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getMaxBasicQueries_54c6a179] = env->getMethodID(cls, "getMaxBasicQueries", "()I");
                mids$[mid_getNrQueriesMade_54c6a179] = env->getMethodID(cls, "getNrQueriesMade", "()I");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_newSpanTermQuery_538d14f1] = env->getMethodID(cls, "newSpanTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/spans/SpanTermQuery;");
                mids$[mid_newTermQuery_ab5e03f9] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/TermQuery;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_checkMax_54c6a166] = env->getMethodID(cls, "checkMax", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BasicQueryFactory::BasicQueryFactory() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            BasicQueryFactory::BasicQueryFactory(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            jboolean BasicQueryFactory::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint BasicQueryFactory::getMaxBasicQueries() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxBasicQueries_54c6a179]);
            }

            jint BasicQueryFactory::getNrQueriesMade() const
            {
              return env->callIntMethod(this$, mids$[mid_getNrQueriesMade_54c6a179]);
            }

            jint BasicQueryFactory::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::org::apache::lucene::search::spans::SpanTermQuery BasicQueryFactory::newSpanTermQuery(const ::org::apache::lucene::index::Term & a0) const
            {
              return ::org::apache::lucene::search::spans::SpanTermQuery(env->callObjectMethod(this$, mids$[mid_newSpanTermQuery_538d14f1], a0.this$));
            }

            ::org::apache::lucene::search::TermQuery BasicQueryFactory::newTermQuery(const ::org::apache::lucene::index::Term & a0) const
            {
              return ::org::apache::lucene::search::TermQuery(env->callObjectMethod(this$, mids$[mid_newTermQuery_ab5e03f9], a0.this$));
            }

            ::java::lang::String BasicQueryFactory::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_BasicQueryFactory_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BasicQueryFactory_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BasicQueryFactory_init_(t_BasicQueryFactory *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BasicQueryFactory_equals(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_getMaxBasicQueries(t_BasicQueryFactory *self);
            static PyObject *t_BasicQueryFactory_getNrQueriesMade(t_BasicQueryFactory *self);
            static PyObject *t_BasicQueryFactory_hashCode(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_newSpanTermQuery(t_BasicQueryFactory *self, PyObject *arg);
            static PyObject *t_BasicQueryFactory_newTermQuery(t_BasicQueryFactory *self, PyObject *arg);
            static PyObject *t_BasicQueryFactory_toString(t_BasicQueryFactory *self, PyObject *args);
            static PyObject *t_BasicQueryFactory_get__maxBasicQueries(t_BasicQueryFactory *self, void *data);
            static PyObject *t_BasicQueryFactory_get__nrQueriesMade(t_BasicQueryFactory *self, void *data);
            static PyGetSetDef t_BasicQueryFactory__fields_[] = {
              DECLARE_GET_FIELD(t_BasicQueryFactory, maxBasicQueries),
              DECLARE_GET_FIELD(t_BasicQueryFactory, nrQueriesMade),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_BasicQueryFactory__methods_[] = {
              DECLARE_METHOD(t_BasicQueryFactory, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BasicQueryFactory, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BasicQueryFactory, equals, METH_VARARGS),
              DECLARE_METHOD(t_BasicQueryFactory, getMaxBasicQueries, METH_NOARGS),
              DECLARE_METHOD(t_BasicQueryFactory, getNrQueriesMade, METH_NOARGS),
              DECLARE_METHOD(t_BasicQueryFactory, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_BasicQueryFactory, newSpanTermQuery, METH_O),
              DECLARE_METHOD(t_BasicQueryFactory, newTermQuery, METH_O),
              DECLARE_METHOD(t_BasicQueryFactory, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BasicQueryFactory, t_BasicQueryFactory, ::java::lang::Object, BasicQueryFactory, t_BasicQueryFactory_init_, 0, 0, t_BasicQueryFactory__fields_, 0, 0);

            void t_BasicQueryFactory::install(PyObject *module)
            {
              installType(&PY_TYPE(BasicQueryFactory), module, "BasicQueryFactory", 0);
            }

            void t_BasicQueryFactory::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BasicQueryFactory).tp_dict, "class_", make_descriptor(BasicQueryFactory::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BasicQueryFactory).tp_dict, "wrapfn_", make_descriptor(t_BasicQueryFactory::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BasicQueryFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BasicQueryFactory_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BasicQueryFactory::initializeClass, 1)))
                return NULL;
              return t_BasicQueryFactory::wrap_Object(BasicQueryFactory(((t_BasicQueryFactory *) arg)->object.this$));
            }
            static PyObject *t_BasicQueryFactory_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BasicQueryFactory::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BasicQueryFactory_init_(t_BasicQueryFactory *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  BasicQueryFactory object((jobject) NULL);

                  INT_CALL(object = BasicQueryFactory());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jint a0;
                  BasicQueryFactory object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = BasicQueryFactory(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BasicQueryFactory_equals(t_BasicQueryFactory *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(BasicQueryFactory), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_BasicQueryFactory_getMaxBasicQueries(t_BasicQueryFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxBasicQueries());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_BasicQueryFactory_getNrQueriesMade(t_BasicQueryFactory *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNrQueriesMade());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_BasicQueryFactory_hashCode(t_BasicQueryFactory *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(BasicQueryFactory), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_BasicQueryFactory_newSpanTermQuery(t_BasicQueryFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::search::spans::SpanTermQuery result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.newSpanTermQuery(a0));
                return ::org::apache::lucene::search::spans::t_SpanTermQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "newSpanTermQuery", arg);
              return NULL;
            }

            static PyObject *t_BasicQueryFactory_newTermQuery(t_BasicQueryFactory *self, PyObject *arg)
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::org::apache::lucene::search::TermQuery result((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.newTermQuery(a0));
                return ::org::apache::lucene::search::t_TermQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "newTermQuery", arg);
              return NULL;
            }

            static PyObject *t_BasicQueryFactory_toString(t_BasicQueryFactory *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(BasicQueryFactory), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_BasicQueryFactory_get__maxBasicQueries(t_BasicQueryFactory *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxBasicQueries());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_BasicQueryFactory_get__nrQueriesMade(t_BasicQueryFactory *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNrQueriesMade());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/SimpleBindings.h"
#include "java/lang/String.h"
#include "org/apache/lucene/expressions/Expression.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/search/SortField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *SimpleBindings::class$ = NULL;
        jmethodID *SimpleBindings::mids$ = NULL;
        bool SimpleBindings::live$ = false;

        jclass SimpleBindings::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/SimpleBindings");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_3578f7bf] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/SortField;)V");
            mids$[mid_add_bca05986] = env->getMethodID(cls, "add", "(Ljava/lang/String;Lorg/apache/lucene/expressions/Expression;)V");
            mids$[mid_getValueSource_3afe260d] = env->getMethodID(cls, "getValueSource", "(Ljava/lang/String;)Lorg/apache/lucene/queries/function/ValueSource;");
            mids$[mid_validate_54c6a166] = env->getMethodID(cls, "validate", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleBindings::SimpleBindings() : ::org::apache::lucene::expressions::Bindings(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SimpleBindings::add(const ::org::apache::lucene::search::SortField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_3578f7bf], a0.this$);
        }

        void SimpleBindings::add(const ::java::lang::String & a0, const ::org::apache::lucene::expressions::Expression & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_bca05986], a0.this$, a1.this$);
        }

        ::org::apache::lucene::queries::function::ValueSource SimpleBindings::getValueSource(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_3afe260d], a0.this$));
        }

        void SimpleBindings::validate() const
        {
          env->callVoidMethod(this$, mids$[mid_validate_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_SimpleBindings_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleBindings_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleBindings_init_(t_SimpleBindings *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleBindings_add(t_SimpleBindings *self, PyObject *args);
        static PyObject *t_SimpleBindings_getValueSource(t_SimpleBindings *self, PyObject *args);
        static PyObject *t_SimpleBindings_validate(t_SimpleBindings *self);

        static PyMethodDef t_SimpleBindings__methods_[] = {
          DECLARE_METHOD(t_SimpleBindings, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleBindings, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleBindings, add, METH_VARARGS),
          DECLARE_METHOD(t_SimpleBindings, getValueSource, METH_VARARGS),
          DECLARE_METHOD(t_SimpleBindings, validate, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleBindings, t_SimpleBindings, ::org::apache::lucene::expressions::Bindings, SimpleBindings, t_SimpleBindings_init_, 0, 0, 0, 0, 0);

        void t_SimpleBindings::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleBindings), module, "SimpleBindings", 0);
        }

        void t_SimpleBindings::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleBindings).tp_dict, "class_", make_descriptor(SimpleBindings::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleBindings).tp_dict, "wrapfn_", make_descriptor(t_SimpleBindings::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleBindings).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleBindings_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleBindings::initializeClass, 1)))
            return NULL;
          return t_SimpleBindings::wrap_Object(SimpleBindings(((t_SimpleBindings *) arg)->object.this$));
        }
        static PyObject *t_SimpleBindings_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleBindings::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleBindings_init_(t_SimpleBindings *self, PyObject *args, PyObject *kwds)
        {
          SimpleBindings object((jobject) NULL);

          INT_CALL(object = SimpleBindings());
          self->object = object;

          return 0;
        }

        static PyObject *t_SimpleBindings_add(t_SimpleBindings *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::SortField a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::SortField::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::expressions::Expression a1((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::expressions::Expression::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_SimpleBindings_getValueSource(t_SimpleBindings *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.getValueSource(a0));
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SimpleBindings), (PyObject *) self, "getValueSource", args, 2);
        }

        static PyObject *t_SimpleBindings_validate(t_SimpleBindings *self)
        {
          OBJ_CALL(self->object.validate());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList$WeightedFragInfo$SubInfo::class$ = NULL;
          jmethodID *FieldFragList$WeightedFragInfo$SubInfo::mids$ = NULL;
          bool FieldFragList$WeightedFragInfo$SubInfo::live$ = false;

          jclass FieldFragList$WeightedFragInfo$SubInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ca488422] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/List;IF)V");
              mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getSeqnum_54c6a179] = env->getMethodID(cls, "getSeqnum", "()I");
              mids$[mid_getTermsOffsets_87851566] = env->getMethodID(cls, "getTermsOffsets", "()Ljava/util/List;");
              mids$[mid_getText_14c7b5c5] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList$WeightedFragInfo$SubInfo::FieldFragList$WeightedFragInfo$SubInfo(const ::java::lang::String & a0, const ::java::util::List & a1, jint a2, jfloat a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ca488422, a0.this$, a1.this$, a2, a3)) {}

          jfloat FieldFragList$WeightedFragInfo$SubInfo::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
          }

          jint FieldFragList$WeightedFragInfo$SubInfo::getSeqnum() const
          {
            return env->callIntMethod(this$, mids$[mid_getSeqnum_54c6a179]);
          }

          ::java::util::List FieldFragList$WeightedFragInfo$SubInfo::getTermsOffsets() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsOffsets_87851566]));
          }

          ::java::lang::String FieldFragList$WeightedFragInfo$SubInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_14c7b5c5]));
          }

          ::java::lang::String FieldFragList$WeightedFragInfo$SubInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList$WeightedFragInfo$SubInfo_init_(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getBoost(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getSeqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getTermsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getText(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_toString(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__boost(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__seqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__termsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__text(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyGetSetDef t_FieldFragList$WeightedFragInfo$SubInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, boost),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, seqnum),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, termsOffsets),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList$WeightedFragInfo$SubInfo__methods_[] = {
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getSeqnum, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getTermsOffsets, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldFragList$WeightedFragInfo$SubInfo, t_FieldFragList$WeightedFragInfo$SubInfo, ::java::lang::Object, FieldFragList$WeightedFragInfo$SubInfo, t_FieldFragList$WeightedFragInfo$SubInfo_init_, 0, 0, t_FieldFragList$WeightedFragInfo$SubInfo__fields_, 0, 0);

          void t_FieldFragList$WeightedFragInfo$SubInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo), module, "FieldFragList$WeightedFragInfo$SubInfo", 0);
          }

          void t_FieldFragList$WeightedFragInfo$SubInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo).tp_dict, "class_", make_descriptor(FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldFragList$WeightedFragInfo$SubInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 1)))
              return NULL;
            return t_FieldFragList$WeightedFragInfo$SubInfo::wrap_Object(FieldFragList$WeightedFragInfo$SubInfo(((t_FieldFragList$WeightedFragInfo$SubInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList$WeightedFragInfo$SubInfo_init_(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jfloat a3;
            FieldFragList$WeightedFragInfo$SubInfo object((jobject) NULL);

            if (!parseArgs(args, "sKIF", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &a3))
            {
              INT_CALL(object = FieldFragList$WeightedFragInfo$SubInfo(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getBoost(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getSeqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSeqnum());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getTermsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getText(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_toString(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__boost(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__seqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSeqnum());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__termsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__text(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/BooleanFilter.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/queries/FilterClause.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *BooleanFilter::class$ = NULL;
        jmethodID *BooleanFilter::mids$ = NULL;
        bool BooleanFilter::live$ = false;

        jclass BooleanFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/BooleanFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_ef4f412a] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queries/FilterClause;)V");
            mids$[mid_add_7373f548] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/BooleanClause$Occur;)V");
            mids$[mid_clauses_87851566] = env->getMethodID(cls, "clauses", "()Ljava/util/List;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BooleanFilter::BooleanFilter() : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void BooleanFilter::add(const ::org::apache::lucene::queries::FilterClause & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_ef4f412a], a0.this$);
        }

        void BooleanFilter::add(const ::org::apache::lucene::search::Filter & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7373f548], a0.this$, a1.this$);
        }

        ::java::util::List BooleanFilter::clauses() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_clauses_87851566]));
        }

        jboolean BooleanFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet BooleanFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        jint BooleanFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::util::Iterator BooleanFilter::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        ::java::lang::String BooleanFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_BooleanFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BooleanFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BooleanFilter_init_(t_BooleanFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BooleanFilter_add(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_clauses(t_BooleanFilter *self);
        static PyObject *t_BooleanFilter_equals(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_getDocIdSet(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_hashCode(t_BooleanFilter *self, PyObject *args);
        static PyObject *t_BooleanFilter_iterator(t_BooleanFilter *self);
        static PyObject *t_BooleanFilter_toString(t_BooleanFilter *self, PyObject *args);

        static PyMethodDef t_BooleanFilter__methods_[] = {
          DECLARE_METHOD(t_BooleanFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BooleanFilter, add, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, clauses, METH_NOARGS),
          DECLARE_METHOD(t_BooleanFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_BooleanFilter, iterator, METH_NOARGS),
          DECLARE_METHOD(t_BooleanFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BooleanFilter, t_BooleanFilter, ::org::apache::lucene::search::Filter, BooleanFilter, t_BooleanFilter_init_, ((PyObject *(*)(t_BooleanFilter *)) get_iterator< t_BooleanFilter >), 0, 0, 0, 0);

        void t_BooleanFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(BooleanFilter), module, "BooleanFilter", 0);
        }

        void t_BooleanFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BooleanFilter).tp_dict, "class_", make_descriptor(BooleanFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BooleanFilter).tp_dict, "wrapfn_", make_descriptor(t_BooleanFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BooleanFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BooleanFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BooleanFilter::initializeClass, 1)))
            return NULL;
          return t_BooleanFilter::wrap_Object(BooleanFilter(((t_BooleanFilter *) arg)->object.this$));
        }
        static PyObject *t_BooleanFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BooleanFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BooleanFilter_init_(t_BooleanFilter *self, PyObject *args, PyObject *kwds)
        {
          BooleanFilter object((jobject) NULL);

          INT_CALL(object = BooleanFilter());
          self->object = object;

          return 0;
        }

        static PyObject *t_BooleanFilter_add(t_BooleanFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::queries::FilterClause a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::FilterClause::initializeClass, &a0))
              {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::Filter a0((jobject) NULL);
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;

              if (!parseArgs(args, "kK", ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_))
              {
                OBJ_CALL(self->object.add(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_BooleanFilter_clauses(t_BooleanFilter *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.clauses());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queries::PY_TYPE(FilterClause));
        }

        static PyObject *t_BooleanFilter_equals(t_BooleanFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_BooleanFilter_getDocIdSet(t_BooleanFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_BooleanFilter_hashCode(t_BooleanFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_BooleanFilter_iterator(t_BooleanFilter *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::queries::PY_TYPE(FilterClause));
        }

        static PyObject *t_BooleanFilter_toString(t_BooleanFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BooleanFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MaxFloatFunction.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MaxFloatFunction::class$ = NULL;
            jmethodID *MaxFloatFunction::mids$ = NULL;
            bool MaxFloatFunction::live$ = false;

            jclass MaxFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MaxFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MaxFloatFunction::MaxFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MaxFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MaxFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MaxFloatFunction_init_(t_MaxFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MaxFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MaxFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MaxFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MaxFloatFunction, t_MaxFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, MaxFloatFunction, t_MaxFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_MaxFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MaxFloatFunction), module, "MaxFloatFunction", 0);
            }

            void t_MaxFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MaxFloatFunction).tp_dict, "class_", make_descriptor(MaxFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MaxFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_MaxFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MaxFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MaxFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MaxFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MaxFloatFunction::wrap_Object(MaxFloatFunction(((t_MaxFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MaxFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MaxFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MaxFloatFunction_init_(t_MaxFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MaxFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MaxFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/ShortDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *ShortDocValuesField::class$ = NULL;
        jmethodID *ShortDocValuesField::mids$ = NULL;
        bool ShortDocValuesField::live$ = false;

        jclass ShortDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/ShortDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_20464280] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;S)V");
            mids$[mid_setShortValue_3bc40c6a] = env->getMethodID(cls, "setShortValue", "(S)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ShortDocValuesField::ShortDocValuesField(const ::java::lang::String & a0, jshort a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_20464280, a0.this$, a1)) {}

        void ShortDocValuesField::setShortValue(jshort a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShortValue_3bc40c6a], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_ShortDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ShortDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ShortDocValuesField_init_(t_ShortDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ShortDocValuesField_setShortValue(t_ShortDocValuesField *self, PyObject *args);
        static int t_ShortDocValuesField_set__shortValue(t_ShortDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_ShortDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_ShortDocValuesField, shortValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ShortDocValuesField__methods_[] = {
          DECLARE_METHOD(t_ShortDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShortDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ShortDocValuesField, setShortValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ShortDocValuesField, t_ShortDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, ShortDocValuesField, t_ShortDocValuesField_init_, 0, 0, t_ShortDocValuesField__fields_, 0, 0);

        void t_ShortDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(ShortDocValuesField), module, "ShortDocValuesField", 0);
        }

        void t_ShortDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ShortDocValuesField).tp_dict, "class_", make_descriptor(ShortDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ShortDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_ShortDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ShortDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ShortDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ShortDocValuesField::initializeClass, 1)))
            return NULL;
          return t_ShortDocValuesField::wrap_Object(ShortDocValuesField(((t_ShortDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_ShortDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ShortDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ShortDocValuesField_init_(t_ShortDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jshort a1;
          ShortDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sS", &a0, &a1))
          {
            INT_CALL(object = ShortDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ShortDocValuesField_setShortValue(t_ShortDocValuesField *self, PyObject *args)
        {
          jshort a0;

          if (!parseArgs(args, "S", &a0))
          {
            OBJ_CALL(self->object.setShortValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ShortDocValuesField), (PyObject *) self, "setShortValue", args, 2);
        }

        static int t_ShortDocValuesField_set__shortValue(t_ShortDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jshort value;
            if (!parseArg(arg, "S", &value))
            {
              INT_CALL(self->object.setShortValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shortValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/payloads/PayloadFunction.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadNearQuery::class$ = NULL;
          jmethodID *PayloadNearQuery::mids$ = NULL;
          bool PayloadNearQuery::live$ = false;

          jclass PayloadNearQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadNearQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4e7e9f44] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZ)V");
              mids$[mid_init$_ba8911fe] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZLorg/apache/lucene/search/payloads/PayloadFunction;)V");
              mids$[mid_clone_95fde422] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/payloads/PayloadNearQuery;");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadNearQuery::PayloadNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2) : ::org::apache::lucene::search::spans::SpanNearQuery(env->newObject(initializeClass, &mids$, mid_init$_4e7e9f44, a0.this$, a1, a2)) {}

          PayloadNearQuery::PayloadNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2, const ::org::apache::lucene::search::payloads::PayloadFunction & a3) : ::org::apache::lucene::search::spans::SpanNearQuery(env->newObject(initializeClass, &mids$, mid_init$_ba8911fe, a0.this$, a1, a2, a3.this$)) {}

          PayloadNearQuery PayloadNearQuery::clone() const
          {
            return PayloadNearQuery(env->callObjectMethod(this$, mids$[mid_clone_95fde422]));
          }

          ::org::apache::lucene::search::Weight PayloadNearQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean PayloadNearQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PayloadNearQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String PayloadNearQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadNearQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadNearQuery_init_(t_PayloadNearQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadNearQuery_clone(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_createWeight(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_equals(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_hashCode(t_PayloadNearQuery *self, PyObject *args);
          static PyObject *t_PayloadNearQuery_toString(t_PayloadNearQuery *self, PyObject *args);

          static PyMethodDef t_PayloadNearQuery__methods_[] = {
            DECLARE_METHOD(t_PayloadNearQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadNearQuery, t_PayloadNearQuery, ::org::apache::lucene::search::spans::SpanNearQuery, PayloadNearQuery, t_PayloadNearQuery_init_, 0, 0, 0, 0, 0);

          void t_PayloadNearQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadNearQuery), module, "PayloadNearQuery", 0);
          }

          void t_PayloadNearQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery).tp_dict, "class_", make_descriptor(PayloadNearQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery).tp_dict, "wrapfn_", make_descriptor(t_PayloadNearQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadNearQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadNearQuery::initializeClass, 1)))
              return NULL;
            return t_PayloadNearQuery::wrap_Object(PayloadNearQuery(((t_PayloadNearQuery *) arg)->object.this$));
          }
          static PyObject *t_PayloadNearQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadNearQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadNearQuery_init_(t_PayloadNearQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                PayloadNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZ", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = PayloadNearQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                ::org::apache::lucene::search::payloads::PayloadFunction a3((jobject) NULL);
                PayloadNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::payloads::PayloadFunction::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = PayloadNearQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadNearQuery_clone(t_PayloadNearQuery *self, PyObject *args)
          {
            PayloadNearQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_PayloadNearQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_PayloadNearQuery_createWeight(t_PayloadNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_PayloadNearQuery_equals(t_PayloadNearQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PayloadNearQuery_hashCode(t_PayloadNearQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PayloadNearQuery_toString(t_PayloadNearQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilterFactory.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemFilterFactory::class$ = NULL;
          jmethodID *SoraniStemFilterFactory::mids$ = NULL;
          bool SoraniStemFilterFactory::live$ = false;

          jclass SoraniStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_84ba1585] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ckb/SoraniStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemFilterFactory::SoraniStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ckb::SoraniStemFilter SoraniStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ckb::SoraniStemFilter(env->callObjectMethod(this$, mids$[mid_create_84ba1585], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemFilterFactory_init_(t_SoraniStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemFilterFactory_create(t_SoraniStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SoraniStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SoraniStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniStemFilterFactory, t_SoraniStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SoraniStemFilterFactory, t_SoraniStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SoraniStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemFilterFactory), module, "SoraniStemFilterFactory", 0);
          }

          void t_SoraniStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniStemFilterFactory).tp_dict, "class_", make_descriptor(SoraniStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SoraniStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SoraniStemFilterFactory::wrap_Object(SoraniStemFilterFactory(((t_SoraniStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemFilterFactory_init_(t_SoraniStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SoraniStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SoraniStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniStemFilterFactory_create(t_SoraniStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ckb::SoraniStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ckb::t_SoraniStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SoraniStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/snowball/SnowballPorterFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {

          ::java::lang::Class *SnowballPorterFilterFactory::class$ = NULL;
          jmethodID *SnowballPorterFilterFactory::mids$ = NULL;
          bool SnowballPorterFilterFactory::live$ = false;
          ::java::lang::String *SnowballPorterFilterFactory::PROTECTED_TOKENS = NULL;

          jclass SnowballPorterFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/snowball/SnowballPorterFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SnowballPorterFilterFactory::SnowballPorterFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter SnowballPorterFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }

          void SnowballPorterFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace snowball {
          static PyObject *t_SnowballPorterFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SnowballPorterFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SnowballPorterFilterFactory_init_(t_SnowballPorterFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SnowballPorterFilterFactory_create(t_SnowballPorterFilterFactory *self, PyObject *args);
          static PyObject *t_SnowballPorterFilterFactory_inform(t_SnowballPorterFilterFactory *self, PyObject *arg);

          static PyMethodDef t_SnowballPorterFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SnowballPorterFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_SnowballPorterFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SnowballPorterFilterFactory, t_SnowballPorterFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SnowballPorterFilterFactory, t_SnowballPorterFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SnowballPorterFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SnowballPorterFilterFactory), module, "SnowballPorterFilterFactory", 0);
          }

          void t_SnowballPorterFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "class_", make_descriptor(SnowballPorterFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SnowballPorterFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SnowballPorterFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(SnowballPorterFilterFactory).tp_dict, "PROTECTED_TOKENS", make_descriptor(j2p(*SnowballPorterFilterFactory::PROTECTED_TOKENS)));
          }

          static PyObject *t_SnowballPorterFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SnowballPorterFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SnowballPorterFilterFactory::wrap_Object(SnowballPorterFilterFactory(((t_SnowballPorterFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SnowballPorterFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SnowballPorterFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SnowballPorterFilterFactory_init_(t_SnowballPorterFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SnowballPorterFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SnowballPorterFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SnowballPorterFilterFactory_create(t_SnowballPorterFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SnowballPorterFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_SnowballPorterFilterFactory_inform(t_SnowballPorterFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishAnalyzer::class$ = NULL;
          jmethodID *EnglishAnalyzer::mids$ = NULL;
          bool EnglishAnalyzer::live$ = false;

          jclass EnglishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet EnglishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishAnalyzer_init_(t_EnglishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_EnglishAnalyzer_get__defaultStopSet(t_EnglishAnalyzer *self, void *data);
          static PyGetSetDef t_EnglishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_EnglishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EnglishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_EnglishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishAnalyzer, t_EnglishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, EnglishAnalyzer, t_EnglishAnalyzer_init_, 0, 0, t_EnglishAnalyzer__fields_, 0, 0);

          void t_EnglishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishAnalyzer), module, "EnglishAnalyzer", 0);
          }

          void t_EnglishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishAnalyzer).tp_dict, "class_", make_descriptor(EnglishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_EnglishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_EnglishAnalyzer::wrap_Object(EnglishAnalyzer(((t_EnglishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_EnglishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishAnalyzer_init_(t_EnglishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::en::EnglishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_EnglishAnalyzer_get__defaultStopSet(t_EnglishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Outputs::class$ = NULL;
          jmethodID *Outputs::mids$ = NULL;
          bool Outputs::live$ = false;

          jclass Outputs::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Outputs");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_add_537d5bdf] = env->getMethodID(cls, "add", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_common_537d5bdf] = env->getMethodID(cls, "common", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_getNoOutput_846352c3] = env->getMethodID(cls, "getNoOutput", "()Ljava/lang/Object;");
              mids$[mid_merge_537d5bdf] = env->getMethodID(cls, "merge", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_outputToString_c9db4eed] = env->getMethodID(cls, "outputToString", "(Ljava/lang/Object;)Ljava/lang/String;");
              mids$[mid_ramBytesUsed_290588f2] = env->getMethodID(cls, "ramBytesUsed", "(Ljava/lang/Object;)J");
              mids$[mid_read_7d5f44e2] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_readFinalOutput_7d5f44e2] = env->getMethodID(cls, "readFinalOutput", "(Lorg/apache/lucene/store/DataInput;)Ljava/lang/Object;");
              mids$[mid_skipFinalOutput_f5d6a551] = env->getMethodID(cls, "skipFinalOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_skipOutput_f5d6a551] = env->getMethodID(cls, "skipOutput", "(Lorg/apache/lucene/store/DataInput;)V");
              mids$[mid_subtract_537d5bdf] = env->getMethodID(cls, "subtract", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_write_208ac1fb] = env->getMethodID(cls, "write", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_writeFinalOutput_208ac1fb] = env->getMethodID(cls, "writeFinalOutput", "(Ljava/lang/Object;Lorg/apache/lucene/store/DataOutput;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Outputs::Outputs() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::Object Outputs::add(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_add_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object Outputs::common(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_common_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object Outputs::getNoOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getNoOutput_846352c3]));
          }

          ::java::lang::Object Outputs::merge(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_merge_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::String Outputs::outputToString(const ::java::lang::Object & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_outputToString_c9db4eed], a0.this$));
          }

          jlong Outputs::ramBytesUsed(const ::java::lang::Object & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_290588f2], a0.this$);
          }

          ::java::lang::Object Outputs::read(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_read_7d5f44e2], a0.this$));
          }

          ::java::lang::Object Outputs::readFinalOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_readFinalOutput_7d5f44e2], a0.this$));
          }

          void Outputs::skipFinalOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipFinalOutput_f5d6a551], a0.this$);
          }

          void Outputs::skipOutput(const ::org::apache::lucene::store::DataInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_skipOutput_f5d6a551], a0.this$);
          }

          ::java::lang::Object Outputs::subtract(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_subtract_537d5bdf], a0.this$, a1.this$));
          }

          void Outputs::write(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_write_208ac1fb], a0.this$, a1.this$);
          }

          void Outputs::writeFinalOutput(const ::java::lang::Object & a0, const ::org::apache::lucene::store::DataOutput & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_writeFinalOutput_208ac1fb], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Outputs_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Outputs_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Outputs_of_(t_Outputs *self, PyObject *args);
          static int t_Outputs_init_(t_Outputs *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Outputs_add(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_common(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_getNoOutput(t_Outputs *self);
          static PyObject *t_Outputs_merge(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_outputToString(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_ramBytesUsed(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_read(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_readFinalOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_skipFinalOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_skipOutput(t_Outputs *self, PyObject *arg);
          static PyObject *t_Outputs_subtract(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_write(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_writeFinalOutput(t_Outputs *self, PyObject *args);
          static PyObject *t_Outputs_get__noOutput(t_Outputs *self, void *data);
          static PyObject *t_Outputs_get__parameters_(t_Outputs *self, void *data);
          static PyGetSetDef t_Outputs__fields_[] = {
            DECLARE_GET_FIELD(t_Outputs, noOutput),
            DECLARE_GET_FIELD(t_Outputs, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Outputs__methods_[] = {
            DECLARE_METHOD(t_Outputs, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Outputs, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Outputs, of_, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, add, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, common, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, getNoOutput, METH_NOARGS),
            DECLARE_METHOD(t_Outputs, merge, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, outputToString, METH_O),
            DECLARE_METHOD(t_Outputs, ramBytesUsed, METH_O),
            DECLARE_METHOD(t_Outputs, read, METH_O),
            DECLARE_METHOD(t_Outputs, readFinalOutput, METH_O),
            DECLARE_METHOD(t_Outputs, skipFinalOutput, METH_O),
            DECLARE_METHOD(t_Outputs, skipOutput, METH_O),
            DECLARE_METHOD(t_Outputs, subtract, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, write, METH_VARARGS),
            DECLARE_METHOD(t_Outputs, writeFinalOutput, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Outputs, t_Outputs, ::java::lang::Object, Outputs, t_Outputs_init_, 0, 0, t_Outputs__fields_, 0, 0);
          PyObject *t_Outputs::wrap_Object(const Outputs& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Outputs::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Outputs *self = (t_Outputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Outputs::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Outputs::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Outputs *self = (t_Outputs *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Outputs::install(PyObject *module)
          {
            installType(&PY_TYPE(Outputs), module, "Outputs", 0);
          }

          void t_Outputs::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Outputs).tp_dict, "class_", make_descriptor(Outputs::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Outputs).tp_dict, "wrapfn_", make_descriptor(t_Outputs::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Outputs).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Outputs_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Outputs::initializeClass, 1)))
              return NULL;
            return t_Outputs::wrap_Object(Outputs(((t_Outputs *) arg)->object.this$));
          }
          static PyObject *t_Outputs_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Outputs::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Outputs_of_(t_Outputs *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Outputs_init_(t_Outputs *self, PyObject *args, PyObject *kwds)
          {
            Outputs object((jobject) NULL);

            INT_CALL(object = Outputs());
            self->object = object;

            return 0;
          }

          static PyObject *t_Outputs_add(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.add(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_Outputs_common(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.common(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "common", args);
            return NULL;
          }

          static PyObject *t_Outputs_getNoOutput(t_Outputs *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getNoOutput());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_Outputs_merge(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.merge(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "merge", args);
            return NULL;
          }

          static PyObject *t_Outputs_outputToString(t_Outputs *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(result = self->object.outputToString(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "outputToString", arg);
            return NULL;
          }

          static PyObject *t_Outputs_ramBytesUsed(t_Outputs *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
              OBJ_CALL(result = self->object.ramBytesUsed(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "ramBytesUsed", arg);
            return NULL;
          }

          static PyObject *t_Outputs_read(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.read(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "read", arg);
            return NULL;
          }

          static PyObject *t_Outputs_readFinalOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.readFinalOutput(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "readFinalOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_skipFinalOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipFinalOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skipFinalOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_skipOutput(t_Outputs *self, PyObject *arg)
          {
            ::org::apache::lucene::store::DataInput a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.skipOutput(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "skipOutput", arg);
            return NULL;
          }

          static PyObject *t_Outputs_subtract(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
              OBJ_CALL(result = self->object.subtract(a0, a1));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subtract", args);
            return NULL;
          }

          static PyObject *t_Outputs_write(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", self->parameters[0], ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.write(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
          }

          static PyObject *t_Outputs_writeFinalOutput(t_Outputs *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::store::DataOutput a1((jobject) NULL);

            if (!parseArgs(args, "Ok", self->parameters[0], ::org::apache::lucene::store::DataOutput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.writeFinalOutput(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "writeFinalOutput", args);
            return NULL;
          }
          static PyObject *t_Outputs_get__parameters_(t_Outputs *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Outputs_get__noOutput(t_Outputs *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getNoOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanWeight.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Explanation.h"
#include "org/apache/lucene/search/payloads/PayloadNearQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {

          ::java::lang::Class *PayloadNearQuery$PayloadNearSpanWeight::class$ = NULL;
          jmethodID *PayloadNearQuery$PayloadNearSpanWeight::mids$ = NULL;
          bool PayloadNearQuery$PayloadNearSpanWeight::live$ = false;

          jclass PayloadNearQuery$PayloadNearSpanWeight::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/payloads/PayloadNearQuery$PayloadNearSpanWeight");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_a7d11f1c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/payloads/PayloadNearQuery;Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/IndexSearcher;)V");
              mids$[mid_explain_6ad94adc] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/index/AtomicReaderContext;I)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_scorer_3869ad24] = env->getMethodID(cls, "scorer", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/Scorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PayloadNearQuery$PayloadNearSpanWeight::PayloadNearQuery$PayloadNearSpanWeight(const ::org::apache::lucene::search::payloads::PayloadNearQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1, const ::org::apache::lucene::search::IndexSearcher & a2) : ::org::apache::lucene::search::spans::SpanWeight(env->newObject(initializeClass, &mids$, mid_init$_a7d11f1c, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Explanation PayloadNearQuery$PayloadNearSpanWeight::explain(const ::org::apache::lucene::index::AtomicReaderContext & a0, jint a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_6ad94adc], a0.this$, a1));
          }

          ::org::apache::lucene::search::Scorer PayloadNearQuery$PayloadNearSpanWeight::scorer(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
          {
            return ::org::apache::lucene::search::Scorer(env->callObjectMethod(this$, mids$[mid_scorer_3869ad24], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace payloads {
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PayloadNearQuery$PayloadNearSpanWeight_init_(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_explain(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args);
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_scorer(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args);

          static PyMethodDef t_PayloadNearQuery$PayloadNearSpanWeight__methods_[] = {
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, explain, METH_VARARGS),
            DECLARE_METHOD(t_PayloadNearQuery$PayloadNearSpanWeight, scorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PayloadNearQuery$PayloadNearSpanWeight, t_PayloadNearQuery$PayloadNearSpanWeight, ::org::apache::lucene::search::spans::SpanWeight, PayloadNearQuery$PayloadNearSpanWeight, t_PayloadNearQuery$PayloadNearSpanWeight_init_, 0, 0, 0, 0, 0);

          void t_PayloadNearQuery$PayloadNearSpanWeight::install(PyObject *module)
          {
            installType(&PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight), module, "PayloadNearQuery$PayloadNearSpanWeight", 0);
          }

          void t_PayloadNearQuery$PayloadNearSpanWeight::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight).tp_dict, "class_", make_descriptor(PayloadNearQuery$PayloadNearSpanWeight::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight).tp_dict, "wrapfn_", make_descriptor(t_PayloadNearQuery$PayloadNearSpanWeight::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PayloadNearQuery$PayloadNearSpanWeight::initializeClass, 1)))
              return NULL;
            return t_PayloadNearQuery$PayloadNearSpanWeight::wrap_Object(PayloadNearQuery$PayloadNearSpanWeight(((t_PayloadNearQuery$PayloadNearSpanWeight *) arg)->object.this$));
          }
          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PayloadNearQuery$PayloadNearSpanWeight::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PayloadNearQuery$PayloadNearSpanWeight_init_(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::payloads::PayloadNearQuery a0((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
            ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
            PayloadNearQuery$PayloadNearSpanWeight object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::payloads::PayloadNearQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PayloadNearQuery$PayloadNearSpanWeight(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_explain(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_PayloadNearQuery$PayloadNearSpanWeight_scorer(t_PayloadNearQuery$PayloadNearSpanWeight *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::org::apache::lucene::search::Scorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.scorer(a0, a1));
              return ::org::apache::lucene::search::t_Scorer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PayloadNearQuery$PayloadNearSpanWeight), (PyObject *) self, "scorer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/Cl2oTaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *Cl2oTaxonomyWriterCache::class$ = NULL;
            jmethodID *Cl2oTaxonomyWriterCache::mids$ = NULL;
            bool Cl2oTaxonomyWriterCache::live$ = false;

            jclass Cl2oTaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/Cl2oTaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_776c6331] = env->getMethodID(cls, "<init>", "(IFI)V");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_283f83f5] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_getMemoryUsage_54c6a179] = env->getMethodID(cls, "getMemoryUsage", "()I");
                mids$[mid_isFull_54c6a16a] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_7ba580a4] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            Cl2oTaxonomyWriterCache::Cl2oTaxonomyWriterCache(jint a0, jfloat a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_776c6331, a0, a1, a2)) {}

            void Cl2oTaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            void Cl2oTaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jint Cl2oTaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_283f83f5], a0.this$);
            }

            jint Cl2oTaxonomyWriterCache::getMemoryUsage() const
            {
              return env->callIntMethod(this$, mids$[mid_getMemoryUsage_54c6a179]);
            }

            jboolean Cl2oTaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_54c6a16a]);
            }

            jboolean Cl2oTaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_7ba580a4], a0.this$, a1);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_Cl2oTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Cl2oTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static int t_Cl2oTaxonomyWriterCache_init_(t_Cl2oTaxonomyWriterCache *self, PyObject *args, PyObject *kwds);
            static PyObject *t_Cl2oTaxonomyWriterCache_clear(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_close(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_get(t_Cl2oTaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_Cl2oTaxonomyWriterCache_getMemoryUsage(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_isFull(t_Cl2oTaxonomyWriterCache *self);
            static PyObject *t_Cl2oTaxonomyWriterCache_put(t_Cl2oTaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_Cl2oTaxonomyWriterCache_get__full(t_Cl2oTaxonomyWriterCache *self, void *data);
            static PyObject *t_Cl2oTaxonomyWriterCache_get__memoryUsage(t_Cl2oTaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_Cl2oTaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_Cl2oTaxonomyWriterCache, full),
              DECLARE_GET_FIELD(t_Cl2oTaxonomyWriterCache, memoryUsage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Cl2oTaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, getMemoryUsage, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_Cl2oTaxonomyWriterCache, put, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Cl2oTaxonomyWriterCache, t_Cl2oTaxonomyWriterCache, ::java::lang::Object, Cl2oTaxonomyWriterCache, t_Cl2oTaxonomyWriterCache_init_, 0, 0, t_Cl2oTaxonomyWriterCache__fields_, 0, 0);

            void t_Cl2oTaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(Cl2oTaxonomyWriterCache), module, "Cl2oTaxonomyWriterCache", 0);
            }

            void t_Cl2oTaxonomyWriterCache::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Cl2oTaxonomyWriterCache).tp_dict, "class_", make_descriptor(Cl2oTaxonomyWriterCache::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Cl2oTaxonomyWriterCache).tp_dict, "wrapfn_", make_descriptor(t_Cl2oTaxonomyWriterCache::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Cl2oTaxonomyWriterCache).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Cl2oTaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_Cl2oTaxonomyWriterCache::wrap_Object(Cl2oTaxonomyWriterCache(((t_Cl2oTaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_Cl2oTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Cl2oTaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_Cl2oTaxonomyWriterCache_init_(t_Cl2oTaxonomyWriterCache *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              jfloat a1;
              jint a2;
              Cl2oTaxonomyWriterCache object((jobject) NULL);

              if (!parseArgs(args, "IFI", &a0, &a1, &a2))
              {
                INT_CALL(object = Cl2oTaxonomyWriterCache(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_clear(t_Cl2oTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_close(t_Cl2oTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_get(t_Cl2oTaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_getMemoryUsage(t_Cl2oTaxonomyWriterCache *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMemoryUsage());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_isFull(t_Cl2oTaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_put(t_Cl2oTaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_get__full(t_Cl2oTaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_Cl2oTaxonomyWriterCache_get__memoryUsage(t_Cl2oTaxonomyWriterCache *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMemoryUsage());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Random.h"
#include "java/util/List.h"
#include "java/lang/Comparable.h"
#include "java/util/ArrayList.h"
#include "java/util/Set.h"
#include "java/util/Deque.h"
#include "java/lang/Class.h"
#include "java/util/SortedMap.h"
#include "java/util/SortedSet.h"
#include "java/util/Map.h"
#include "java/lang/Boolean.h"
#include "java/util/ListIterator.h"
#include "java/util/Enumeration.h"
#include "java/util/Queue.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *Collections::class$ = NULL;
    jmethodID *Collections::mids$ = NULL;
    bool Collections::live$ = false;
    ::java::util::List *Collections::EMPTY_LIST = NULL;
    ::java::util::Map *Collections::EMPTY_MAP = NULL;
    ::java::util::Set *Collections::EMPTY_SET = NULL;

    jclass Collections::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/Collections");

        mids$ = new jmethodID[max_mid];
        mids$[mid_addAll_7d28570f] = env->getStaticMethodID(cls, "addAll", "(Ljava/util/Collection;[Ljava/lang/Object;)Z");
        mids$[mid_asLifoQueue_69ff1ef4] = env->getStaticMethodID(cls, "asLifoQueue", "(Ljava/util/Deque;)Ljava/util/Queue;");
        mids$[mid_binarySearch_632fb920] = env->getStaticMethodID(cls, "binarySearch", "(Ljava/util/List;Ljava/lang/Object;)I");
        mids$[mid_binarySearch_b1262297] = env->getStaticMethodID(cls, "binarySearch", "(Ljava/util/List;Ljava/lang/Object;Ljava/util/Comparator;)I");
        mids$[mid_checkedCollection_cdb515a1] = env->getStaticMethodID(cls, "checkedCollection", "(Ljava/util/Collection;Ljava/lang/Class;)Ljava/util/Collection;");
        mids$[mid_checkedList_8575df61] = env->getStaticMethodID(cls, "checkedList", "(Ljava/util/List;Ljava/lang/Class;)Ljava/util/List;");
        mids$[mid_checkedMap_92913187] = env->getStaticMethodID(cls, "checkedMap", "(Ljava/util/Map;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/Map;");
        mids$[mid_checkedSet_0862698d] = env->getStaticMethodID(cls, "checkedSet", "(Ljava/util/Set;Ljava/lang/Class;)Ljava/util/Set;");
        mids$[mid_checkedSortedMap_5e4bff0f] = env->getStaticMethodID(cls, "checkedSortedMap", "(Ljava/util/SortedMap;Ljava/lang/Class;Ljava/lang/Class;)Ljava/util/SortedMap;");
        mids$[mid_checkedSortedSet_342d53e3] = env->getStaticMethodID(cls, "checkedSortedSet", "(Ljava/util/SortedSet;Ljava/lang/Class;)Ljava/util/SortedSet;");
        mids$[mid_copy_cbe63a12] = env->getStaticMethodID(cls, "copy", "(Ljava/util/List;Ljava/util/List;)V");
        mids$[mid_disjoint_05108b4e] = env->getStaticMethodID(cls, "disjoint", "(Ljava/util/Collection;Ljava/util/Collection;)Z");
        mids$[mid_emptyEnumeration_39f88070] = env->getStaticMethodID(cls, "emptyEnumeration", "()Ljava/util/Enumeration;");
        mids$[mid_emptyIterator_40858c90] = env->getStaticMethodID(cls, "emptyIterator", "()Ljava/util/Iterator;");
        mids$[mid_emptyList_87851566] = env->getStaticMethodID(cls, "emptyList", "()Ljava/util/List;");
        mids$[mid_emptyListIterator_b5be4e14] = env->getStaticMethodID(cls, "emptyListIterator", "()Ljava/util/ListIterator;");
        mids$[mid_emptyMap_db60befd] = env->getStaticMethodID(cls, "emptyMap", "()Ljava/util/Map;");
        mids$[mid_emptySet_03e99967] = env->getStaticMethodID(cls, "emptySet", "()Ljava/util/Set;");
        mids$[mid_enumeration_8f4c58e7] = env->getStaticMethodID(cls, "enumeration", "(Ljava/util/Collection;)Ljava/util/Enumeration;");
        mids$[mid_fill_632fb93f] = env->getStaticMethodID(cls, "fill", "(Ljava/util/List;Ljava/lang/Object;)V");
        mids$[mid_frequency_6b08c59a] = env->getStaticMethodID(cls, "frequency", "(Ljava/util/Collection;Ljava/lang/Object;)I");
        mids$[mid_indexOfSubList_cbe63a0d] = env->getStaticMethodID(cls, "indexOfSubList", "(Ljava/util/List;Ljava/util/List;)I");
        mids$[mid_lastIndexOfSubList_cbe63a0d] = env->getStaticMethodID(cls, "lastIndexOfSubList", "(Ljava/util/List;Ljava/util/List;)I");
        mids$[mid_list_0729353f] = env->getStaticMethodID(cls, "list", "(Ljava/util/Enumeration;)Ljava/util/ArrayList;");
        mids$[mid_max_abd1a366] = env->getStaticMethodID(cls, "max", "(Ljava/util/Collection;)Ljava/lang/Object;");
        mids$[mid_max_24cad27f] = env->getStaticMethodID(cls, "max", "(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;");
        mids$[mid_min_abd1a366] = env->getStaticMethodID(cls, "min", "(Ljava/util/Collection;)Ljava/lang/Object;");
        mids$[mid_min_24cad27f] = env->getStaticMethodID(cls, "min", "(Ljava/util/Collection;Ljava/util/Comparator;)Ljava/lang/Object;");
        mids$[mid_nCopies_a26611d0] = env->getStaticMethodID(cls, "nCopies", "(ILjava/lang/Object;)Ljava/util/List;");
        mids$[mid_newSetFromMap_d56f8575] = env->getStaticMethodID(cls, "newSetFromMap", "(Ljava/util/Map;)Ljava/util/Set;");
        mids$[mid_replaceAll_37ceb42b] = env->getStaticMethodID(cls, "replaceAll", "(Ljava/util/List;Ljava/lang/Object;Ljava/lang/Object;)Z");
        mids$[mid_reverse_1fde8fc3] = env->getStaticMethodID(cls, "reverse", "(Ljava/util/List;)V");
        mids$[mid_reverseOrder_5a7ff2fc] = env->getStaticMethodID(cls, "reverseOrder", "()Ljava/util/Comparator;");
        mids$[mid_reverseOrder_4ed2c59d] = env->getStaticMethodID(cls, "reverseOrder", "(Ljava/util/Comparator;)Ljava/util/Comparator;");
        mids$[mid_rotate_fff63b2f] = env->getStaticMethodID(cls, "rotate", "(Ljava/util/List;I)V");
        mids$[mid_shuffle_1fde8fc3] = env->getStaticMethodID(cls, "shuffle", "(Ljava/util/List;)V");
        mids$[mid_shuffle_06ba5e4b] = env->getStaticMethodID(cls, "shuffle", "(Ljava/util/List;Ljava/util/Random;)V");
        mids$[mid_singleton_4c6d62c3] = env->getStaticMethodID(cls, "singleton", "(Ljava/lang/Object;)Ljava/util/Set;");
        mids$[mid_singletonList_71371966] = env->getStaticMethodID(cls, "singletonList", "(Ljava/lang/Object;)Ljava/util/List;");
        mids$[mid_singletonMap_65580ae9] = env->getStaticMethodID(cls, "singletonMap", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;");
        mids$[mid_sort_1fde8fc3] = env->getStaticMethodID(cls, "sort", "(Ljava/util/List;)V");
        mids$[mid_sort_b59215b8] = env->getStaticMethodID(cls, "sort", "(Ljava/util/List;Ljava/util/Comparator;)V");
        mids$[mid_swap_d5c0aeaf] = env->getStaticMethodID(cls, "swap", "(Ljava/util/List;II)V");
        mids$[mid_synchronizedCollection_55c0b625] = env->getStaticMethodID(cls, "synchronizedCollection", "(Ljava/util/Collection;)Ljava/util/Collection;");
        mids$[mid_synchronizedList_4f378251] = env->getStaticMethodID(cls, "synchronizedList", "(Ljava/util/List;)Ljava/util/List;");
        mids$[mid_synchronizedMap_c606628b] = env->getStaticMethodID(cls, "synchronizedMap", "(Ljava/util/Map;)Ljava/util/Map;");
        mids$[mid_synchronizedSet_390c573f] = env->getStaticMethodID(cls, "synchronizedSet", "(Ljava/util/Set;)Ljava/util/Set;");
        mids$[mid_synchronizedSortedMap_93ac548b] = env->getStaticMethodID(cls, "synchronizedSortedMap", "(Ljava/util/SortedMap;)Ljava/util/SortedMap;");
        mids$[mid_synchronizedSortedSet_b705ec3b] = env->getStaticMethodID(cls, "synchronizedSortedSet", "(Ljava/util/SortedSet;)Ljava/util/SortedSet;");
        mids$[mid_unmodifiableCollection_55c0b625] = env->getStaticMethodID(cls, "unmodifiableCollection", "(Ljava/util/Collection;)Ljava/util/Collection;");
        mids$[mid_unmodifiableList_4f378251] = env->getStaticMethodID(cls, "unmodifiableList", "(Ljava/util/List;)Ljava/util/List;");
        mids$[mid_unmodifiableMap_c606628b] = env->getStaticMethodID(cls, "unmodifiableMap", "(Ljava/util/Map;)Ljava/util/Map;");
        mids$[mid_unmodifiableSet_390c573f] = env->getStaticMethodID(cls, "unmodifiableSet", "(Ljava/util/Set;)Ljava/util/Set;");
        mids$[mid_unmodifiableSortedMap_93ac548b] = env->getStaticMethodID(cls, "unmodifiableSortedMap", "(Ljava/util/SortedMap;)Ljava/util/SortedMap;");
        mids$[mid_unmodifiableSortedSet_b705ec3b] = env->getStaticMethodID(cls, "unmodifiableSortedSet", "(Ljava/util/SortedSet;)Ljava/util/SortedSet;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        EMPTY_LIST = new ::java::util::List(env->getStaticObjectField(cls, "EMPTY_LIST", "Ljava/util/List;"));
        EMPTY_MAP = new ::java::util::Map(env->getStaticObjectField(cls, "EMPTY_MAP", "Ljava/util/Map;"));
        EMPTY_SET = new ::java::util::Set(env->getStaticObjectField(cls, "EMPTY_SET", "Ljava/util/Set;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    jboolean Collections::addAll(const ::java::util::Collection & a0, const JArray< ::java::lang::Object > & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_addAll_7d28570f], a0.this$, a1.this$);
    }

    ::java::util::Queue Collections::asLifoQueue(const ::java::util::Deque & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Queue(env->callStaticObjectMethod(cls, mids$[mid_asLifoQueue_69ff1ef4], a0.this$));
    }

    jint Collections::binarySearch(const ::java::util::List & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_632fb920], a0.this$, a1.this$);
    }

    jint Collections::binarySearch(const ::java::util::List & a0, const ::java::lang::Object & a1, const ::java::util::Comparator & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_binarySearch_b1262297], a0.this$, a1.this$, a2.this$);
    }

    ::java::util::Collection Collections::checkedCollection(const ::java::util::Collection & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_checkedCollection_cdb515a1], a0.this$, a1.this$));
    }

    ::java::util::List Collections::checkedList(const ::java::util::List & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_checkedList_8575df61], a0.this$, a1.this$));
    }

    ::java::util::Map Collections::checkedMap(const ::java::util::Map & a0, const ::java::lang::Class & a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_checkedMap_92913187], a0.this$, a1.this$, a2.this$));
    }

    ::java::util::Set Collections::checkedSet(const ::java::util::Set & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_checkedSet_0862698d], a0.this$, a1.this$));
    }

    ::java::util::SortedMap Collections::checkedSortedMap(const ::java::util::SortedMap & a0, const ::java::lang::Class & a1, const ::java::lang::Class & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_checkedSortedMap_5e4bff0f], a0.this$, a1.this$, a2.this$));
    }

    ::java::util::SortedSet Collections::checkedSortedSet(const ::java::util::SortedSet & a0, const ::java::lang::Class & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_checkedSortedSet_342d53e3], a0.this$, a1.this$));
    }

    void Collections::copy(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_copy_cbe63a12], a0.this$, a1.this$);
    }

    jboolean Collections::disjoint(const ::java::util::Collection & a0, const ::java::util::Collection & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_disjoint_05108b4e], a0.this$, a1.this$);
    }

    ::java::util::Enumeration Collections::emptyEnumeration()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Enumeration(env->callStaticObjectMethod(cls, mids$[mid_emptyEnumeration_39f88070]));
    }

    ::java::util::Iterator Collections::emptyIterator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Iterator(env->callStaticObjectMethod(cls, mids$[mid_emptyIterator_40858c90]));
    }

    ::java::util::List Collections::emptyList()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_emptyList_87851566]));
    }

    ::java::util::ListIterator Collections::emptyListIterator()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::ListIterator(env->callStaticObjectMethod(cls, mids$[mid_emptyListIterator_b5be4e14]));
    }

    ::java::util::Map Collections::emptyMap()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_emptyMap_db60befd]));
    }

    ::java::util::Set Collections::emptySet()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_emptySet_03e99967]));
    }

    ::java::util::Enumeration Collections::enumeration(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Enumeration(env->callStaticObjectMethod(cls, mids$[mid_enumeration_8f4c58e7], a0.this$));
    }

    void Collections::fill(const ::java::util::List & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_fill_632fb93f], a0.this$, a1.this$);
    }

    jint Collections::frequency(const ::java::util::Collection & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_frequency_6b08c59a], a0.this$, a1.this$);
    }

    jint Collections::indexOfSubList(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_indexOfSubList_cbe63a0d], a0.this$, a1.this$);
    }

    jint Collections::lastIndexOfSubList(const ::java::util::List & a0, const ::java::util::List & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_lastIndexOfSubList_cbe63a0d], a0.this$, a1.this$);
    }

    ::java::util::ArrayList Collections::list(const ::java::util::Enumeration & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::ArrayList(env->callStaticObjectMethod(cls, mids$[mid_list_0729353f], a0.this$));
    }

    ::java::lang::Object Collections::max$(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_max_abd1a366], a0.this$));
    }

    ::java::lang::Object Collections::max$(const ::java::util::Collection & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_max_24cad27f], a0.this$, a1.this$));
    }

    ::java::lang::Object Collections::min$(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_min_abd1a366], a0.this$));
    }

    ::java::lang::Object Collections::min$(const ::java::util::Collection & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::Object(env->callStaticObjectMethod(cls, mids$[mid_min_24cad27f], a0.this$, a1.this$));
    }

    ::java::util::List Collections::nCopies(jint a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_nCopies_a26611d0], a0, a1.this$));
    }

    ::java::util::Set Collections::newSetFromMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_newSetFromMap_d56f8575], a0.this$));
    }

    jboolean Collections::replaceAll(const ::java::util::List & a0, const ::java::lang::Object & a1, const ::java::lang::Object & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticBooleanMethod(cls, mids$[mid_replaceAll_37ceb42b], a0.this$, a1.this$, a2.this$);
    }

    void Collections::reverse(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_reverse_1fde8fc3], a0.this$);
    }

    ::java::util::Comparator Collections::reverseOrder()
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_reverseOrder_5a7ff2fc]));
    }

    ::java::util::Comparator Collections::reverseOrder(const ::java::util::Comparator & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Comparator(env->callStaticObjectMethod(cls, mids$[mid_reverseOrder_4ed2c59d], a0.this$));
    }

    void Collections::rotate(const ::java::util::List & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_rotate_fff63b2f], a0.this$, a1);
    }

    void Collections::shuffle(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_shuffle_1fde8fc3], a0.this$);
    }

    void Collections::shuffle(const ::java::util::List & a0, const ::java::util::Random & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_shuffle_06ba5e4b], a0.this$, a1.this$);
    }

    ::java::util::Set Collections::singleton(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_singleton_4c6d62c3], a0.this$));
    }

    ::java::util::List Collections::singletonList(const ::java::lang::Object & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_singletonList_71371966], a0.this$));
    }

    ::java::util::Map Collections::singletonMap(const ::java::lang::Object & a0, const ::java::lang::Object & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_singletonMap_65580ae9], a0.this$, a1.this$));
    }

    void Collections::sort(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_1fde8fc3], a0.this$);
    }

    void Collections::sort(const ::java::util::List & a0, const ::java::util::Comparator & a1)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_sort_b59215b8], a0.this$, a1.this$);
    }

    void Collections::swap(const ::java::util::List & a0, jint a1, jint a2)
    {
      jclass cls = env->getClass(initializeClass);
      env->callStaticVoidMethod(cls, mids$[mid_swap_d5c0aeaf], a0.this$, a1, a2);
    }

    ::java::util::Collection Collections::synchronizedCollection(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_synchronizedCollection_55c0b625], a0.this$));
    }

    ::java::util::List Collections::synchronizedList(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_synchronizedList_4f378251], a0.this$));
    }

    ::java::util::Map Collections::synchronizedMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_synchronizedMap_c606628b], a0.this$));
    }

    ::java::util::Set Collections::synchronizedSet(const ::java::util::Set & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSet_390c573f], a0.this$));
    }

    ::java::util::SortedMap Collections::synchronizedSortedMap(const ::java::util::SortedMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSortedMap_93ac548b], a0.this$));
    }

    ::java::util::SortedSet Collections::synchronizedSortedSet(const ::java::util::SortedSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_synchronizedSortedSet_b705ec3b], a0.this$));
    }

    ::java::util::Collection Collections::unmodifiableCollection(const ::java::util::Collection & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableCollection_55c0b625], a0.this$));
    }

    ::java::util::List Collections::unmodifiableList(const ::java::util::List & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableList_4f378251], a0.this$));
    }

    ::java::util::Map Collections::unmodifiableMap(const ::java::util::Map & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Map(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableMap_c606628b], a0.this$));
    }

    ::java::util::Set Collections::unmodifiableSet(const ::java::util::Set & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSet_390c573f], a0.this$));
    }

    ::java::util::SortedMap Collections::unmodifiableSortedMap(const ::java::util::SortedMap & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedMap(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSortedMap_93ac548b], a0.this$));
    }

    ::java::util::SortedSet Collections::unmodifiableSortedSet(const ::java::util::SortedSet & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::util::SortedSet(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableSortedSet_b705ec3b], a0.this$));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_Collections_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_addAll(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_asLifoQueue(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_binarySearch(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedCollection(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSet(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSortedMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_checkedSortedSet(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_copy(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_disjoint(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_emptyEnumeration(PyTypeObject *type);
    static PyObject *t_Collections_emptyIterator(PyTypeObject *type);
    static PyObject *t_Collections_emptyList(PyTypeObject *type);
    static PyObject *t_Collections_emptyListIterator(PyTypeObject *type);
    static PyObject *t_Collections_emptyMap(PyTypeObject *type);
    static PyObject *t_Collections_emptySet(PyTypeObject *type);
    static PyObject *t_Collections_enumeration(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_fill(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_frequency(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_indexOfSubList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_lastIndexOfSubList(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_list(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_max(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_min(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_nCopies(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_newSetFromMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_replaceAll(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_reverseOrder(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_rotate(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_shuffle(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_singleton(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_singletonList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_singletonMap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_sort(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_swap(PyTypeObject *type, PyObject *args);
    static PyObject *t_Collections_synchronizedCollection(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSortedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_synchronizedSortedSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableCollection(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableList(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSet(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSortedMap(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Collections_unmodifiableSortedSet(PyTypeObject *type, PyObject *arg);

    static PyMethodDef t_Collections__methods_[] = {
      DECLARE_METHOD(t_Collections, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, addAll, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, asLifoQueue, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, binarySearch, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedCollection, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSet, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSortedMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, checkedSortedSet, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, copy, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, disjoint, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyEnumeration, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyIterator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyList, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyListIterator, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptyMap, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, emptySet, METH_NOARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, enumeration, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, fill, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, frequency, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, indexOfSubList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, lastIndexOfSubList, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, list, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, max, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, min, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, nCopies, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, newSetFromMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, replaceAll, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, reverseOrder, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, rotate, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, shuffle, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, singleton, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, singletonList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, singletonMap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, sort, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, swap, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedCollection, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSortedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, synchronizedSortedSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableCollection, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableList, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSet, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSortedMap, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Collections, unmodifiableSortedSet, METH_O | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Collections, t_Collections, ::java::lang::Object, Collections, abstract_init, 0, 0, 0, 0, 0);

    void t_Collections::install(PyObject *module)
    {
      installType(&PY_TYPE(Collections), module, "Collections", 0);
    }

    void t_Collections::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "class_", make_descriptor(Collections::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "wrapfn_", make_descriptor(t_Collections::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "boxfn_", make_descriptor(boxObject));
      env->getClass(Collections::initializeClass);
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "EMPTY_LIST", make_descriptor(::java::util::t_List::wrap_Object(*Collections::EMPTY_LIST)));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "EMPTY_MAP", make_descriptor(::java::util::t_Map::wrap_Object(*Collections::EMPTY_MAP)));
      PyDict_SetItemString(PY_TYPE(Collections).tp_dict, "EMPTY_SET", make_descriptor(::java::util::t_Set::wrap_Object(*Collections::EMPTY_SET)));
    }

    static PyObject *t_Collections_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Collections::initializeClass, 1)))
        return NULL;
      return t_Collections::wrap_Object(Collections(((t_Collections *) arg)->object.this$));
    }
    static PyObject *t_Collections_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Collections::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Collections_addAll(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      JArray< ::java::lang::Object > a1((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "K[o", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::addAll(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "addAll", args);
      return NULL;
    }

    static PyObject *t_Collections_asLifoQueue(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Deque a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Queue result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Deque::initializeClass, &a0, &p0, ::java::util::t_Deque::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::asLifoQueue(a0));
        return ::java::util::t_Queue::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "asLifoQueue", arg);
      return NULL;
    }

    static PyObject *t_Collections_binarySearch(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "Ko", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
          {
            OBJ_CALL(result = ::java::util::Collections::binarySearch(a0, a1));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          ::java::util::Comparator a2((jobject) NULL);
          PyTypeObject **p2;
          jint result;

          if (!parseArgs(args, "KoK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::binarySearch(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError(type, "binarySearch", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedCollection(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedCollection(a0, a1));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedCollection", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::List result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedList(a0, a1));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedList", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedMap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Class a2((jobject) NULL);
      PyTypeObject **p2;
      ::java::util::Map result((jobject) NULL);

      if (!parseArgs(args, "KKK", ::java::util::Map::initializeClass, ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_, &a2, &p2, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedMap(a0, a1, a2));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedMap", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSet(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::Set result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::Set::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSet(a0, a1));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSet", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSortedMap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::lang::Class a2((jobject) NULL);
      PyTypeObject **p2;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArgs(args, "KKK", ::java::util::SortedMap::initializeClass, ::java::lang::Class::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_, &a2, &p2, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSortedMap(a0, a1, a2));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSortedMap", args);
      return NULL;
    }

    static PyObject *t_Collections_checkedSortedSet(PyTypeObject *type, PyObject *args)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Class a1((jobject) NULL);
      PyTypeObject **p1;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArgs(args, "KK", ::java::util::SortedSet::initializeClass, ::java::lang::Class::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_, &a1, &p1, ::java::lang::t_Class::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::checkedSortedSet(a0, a1));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "checkedSortedSet", args);
      return NULL;
    }

    static PyObject *t_Collections_copy(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(::java::util::Collections::copy(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "copy", args);
      return NULL;
    }

    static PyObject *t_Collections_disjoint(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection a1((jobject) NULL);
      PyTypeObject **p1;
      jboolean result;

      if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::disjoint(a0, a1));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "disjoint", args);
      return NULL;
    }

    static PyObject *t_Collections_emptyEnumeration(PyTypeObject *type)
    {
      ::java::util::Enumeration result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyEnumeration());
      return ::java::util::t_Enumeration::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyIterator(PyTypeObject *type)
    {
      ::java::util::Iterator result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyIterator());
      return ::java::util::t_Iterator::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyList(PyTypeObject *type)
    {
      ::java::util::List result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyList());
      return ::java::util::t_List::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyListIterator(PyTypeObject *type)
    {
      ::java::util::ListIterator result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyListIterator());
      return ::java::util::t_ListIterator::wrap_Object(result);
    }

    static PyObject *t_Collections_emptyMap(PyTypeObject *type)
    {
      ::java::util::Map result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptyMap());
      return ::java::util::t_Map::wrap_Object(result);
    }

    static PyObject *t_Collections_emptySet(PyTypeObject *type)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = ::java::util::Collections::emptySet());
      return ::java::util::t_Set::wrap_Object(result);
    }

    static PyObject *t_Collections_enumeration(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Enumeration result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::enumeration(a0));
        return ::java::util::t_Enumeration::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "enumeration", arg);
      return NULL;
    }

    static PyObject *t_Collections_fill(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);

      if (!parseArgs(args, "Ko", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
      {
        OBJ_CALL(::java::util::Collections::fill(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "fill", args);
      return NULL;
    }

    static PyObject *t_Collections_frequency(PyTypeObject *type, PyObject *args)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);
      jint result;

      if (!parseArgs(args, "Ko", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::frequency(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "frequency", args);
      return NULL;
    }

    static PyObject *t_Collections_indexOfSubList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;
      jint result;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::indexOfSubList(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "indexOfSubList", args);
      return NULL;
    }

    static PyObject *t_Collections_lastIndexOfSubList(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List a1((jobject) NULL);
      PyTypeObject **p1;
      jint result;

      if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::lastIndexOfSubList(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "lastIndexOfSubList", args);
      return NULL;
    }

    static PyObject *t_Collections_list(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Enumeration a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::ArrayList result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Enumeration::initializeClass, &a0, &p0, ::java::util::t_Enumeration::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::list(a0));
        return ::java::util::t_ArrayList::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "list", arg);
      return NULL;
    }

    static PyObject *t_Collections_max(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::max$(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::max$(a0, a1));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "max", args);
      return NULL;
    }

    static PyObject *t_Collections_min(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::min$(a0));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Object result((jobject) NULL);

          if (!parseArgs(args, "KK", ::java::util::Collection::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::min$(a0, a1));
            return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "min", args);
      return NULL;
    }

    static PyObject *t_Collections_nCopies(PyTypeObject *type, PyObject *args)
    {
      jint a0;
      ::java::lang::Object a1((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArgs(args, "Io", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::nCopies(a0, a1));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "nCopies", args);
      return NULL;
    }

    static PyObject *t_Collections_newSetFromMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::newSetFromMap(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "newSetFromMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_replaceAll(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object a2((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "Koo", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
      {
        OBJ_CALL(result = ::java::util::Collections::replaceAll(a0, a1, a2));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError(type, "replaceAll", args);
      return NULL;
    }

    static PyObject *t_Collections_reverse(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(::java::util::Collections::reverse(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Collections_reverseOrder(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = ::java::util::Collections::reverseOrder());
          return ::java::util::t_Comparator::wrap_Object(result);
        }
        break;
       case 1:
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(result = ::java::util::Collections::reverseOrder(a0));
            return ::java::util::t_Comparator::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "reverseOrder", args);
      return NULL;
    }

    static PyObject *t_Collections_rotate(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      jint a1;

      if (!parseArgs(args, "KI", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
      {
        OBJ_CALL(::java::util::Collections::rotate(a0, a1));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "rotate", args);
      return NULL;
    }

    static PyObject *t_Collections_shuffle(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(::java::util::Collections::shuffle(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Random a1((jobject) NULL);

          if (!parseArgs(args, "Kk", ::java::util::List::initializeClass, ::java::util::Random::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
          {
            OBJ_CALL(::java::util::Collections::shuffle(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "shuffle", args);
      return NULL;
    }

    static PyObject *t_Collections_singleton(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::util::Collections::singleton(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singleton", arg);
      return NULL;
    }

    static PyObject *t_Collections_singletonList(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = ::java::util::Collections::singletonList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singletonList", arg);
      return NULL;
    }

    static PyObject *t_Collections_singletonMap(PyTypeObject *type, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::util::Map result((jobject) NULL);

      if (!parseArgs(args, "oo", &a0, &a1))
      {
        OBJ_CALL(result = ::java::util::Collections::singletonMap(a0, a1));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "singletonMap", args);
      return NULL;
    }

    static PyObject *t_Collections_sort(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(::java::util::Collections::sort(a0));
            Py_RETURN_NONE;
          }
        }
        break;
       case 2:
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::util::Comparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "KK", ::java::util::List::initializeClass, ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &p1, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(::java::util::Collections::sort(a0, a1));
            Py_RETURN_NONE;
          }
        }
      }

      PyErr_SetArgsError(type, "sort", args);
      return NULL;
    }

    static PyObject *t_Collections_swap(PyTypeObject *type, PyObject *args)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      jint a1;
      jint a2;

      if (!parseArgs(args, "KII", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
      {
        OBJ_CALL(::java::util::Collections::swap(a0, a1, a2));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError(type, "swap", args);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedCollection(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedCollection(a0));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedCollection", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedList(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedList", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Map result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedMap(a0));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSet(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSortedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedMap::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSortedMap(a0));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSortedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_synchronizedSortedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::synchronizedSortedSet(a0));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "synchronizedSortedSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableCollection(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Collection a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Collection result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableCollection(a0));
        return ::java::util::t_Collection::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableCollection", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableList(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::List a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::List result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableList(a0));
        return ::java::util::t_List::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableList", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Map result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableMap(a0));
        return ::java::util::t_Map::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::Set a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::Set result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSet(a0));
        return ::java::util::t_Set::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSet", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSortedMap(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedMap a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedMap result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedMap::initializeClass, &a0, &p0, ::java::util::t_SortedMap::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSortedMap(a0));
        return ::java::util::t_SortedMap::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSortedMap", arg);
      return NULL;
    }

    static PyObject *t_Collections_unmodifiableSortedSet(PyTypeObject *type, PyObject *arg)
    {
      ::java::util::SortedSet a0((jobject) NULL);
      PyTypeObject **p0;
      ::java::util::SortedSet result((jobject) NULL);

      if (!parseArg(arg, "K", ::java::util::SortedSet::initializeClass, &a0, &p0, ::java::util::t_SortedSet::parameters_))
      {
        OBJ_CALL(result = ::java::util::Collections::unmodifiableSortedSet(a0));
        return ::java::util::t_SortedSet::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "unmodifiableSortedSet", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/CloseableThreadLocal.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *CloseableThreadLocal::class$ = NULL;
        jmethodID *CloseableThreadLocal::mids$ = NULL;
        bool CloseableThreadLocal::live$ = false;

        jclass CloseableThreadLocal::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/CloseableThreadLocal");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_get_846352c3] = env->getMethodID(cls, "get", "()Ljava/lang/Object;");
            mids$[mid_set_290588ee] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");
            mids$[mid_initialValue_846352c3] = env->getMethodID(cls, "initialValue", "()Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CloseableThreadLocal::CloseableThreadLocal() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void CloseableThreadLocal::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::java::lang::Object CloseableThreadLocal::get() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_846352c3]));
        }

        void CloseableThreadLocal::set(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_290588ee], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_CloseableThreadLocal_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_of_(t_CloseableThreadLocal *self, PyObject *args);
        static int t_CloseableThreadLocal_init_(t_CloseableThreadLocal *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CloseableThreadLocal_close(t_CloseableThreadLocal *self);
        static PyObject *t_CloseableThreadLocal_get(t_CloseableThreadLocal *self);
        static PyObject *t_CloseableThreadLocal_set(t_CloseableThreadLocal *self, PyObject *arg);
        static PyObject *t_CloseableThreadLocal_get__parameters_(t_CloseableThreadLocal *self, void *data);
        static PyGetSetDef t_CloseableThreadLocal__fields_[] = {
          DECLARE_GET_FIELD(t_CloseableThreadLocal, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CloseableThreadLocal__methods_[] = {
          DECLARE_METHOD(t_CloseableThreadLocal, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CloseableThreadLocal, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CloseableThreadLocal, of_, METH_VARARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, close, METH_NOARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, get, METH_NOARGS),
          DECLARE_METHOD(t_CloseableThreadLocal, set, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CloseableThreadLocal, t_CloseableThreadLocal, ::java::lang::Object, CloseableThreadLocal, t_CloseableThreadLocal_init_, 0, 0, t_CloseableThreadLocal__fields_, 0, 0);
        PyObject *t_CloseableThreadLocal::wrap_Object(const CloseableThreadLocal& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CloseableThreadLocal::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CloseableThreadLocal *self = (t_CloseableThreadLocal *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_CloseableThreadLocal::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_CloseableThreadLocal::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_CloseableThreadLocal *self = (t_CloseableThreadLocal *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_CloseableThreadLocal::install(PyObject *module)
        {
          installType(&PY_TYPE(CloseableThreadLocal), module, "CloseableThreadLocal", 0);
        }

        void t_CloseableThreadLocal::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CloseableThreadLocal).tp_dict, "class_", make_descriptor(CloseableThreadLocal::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CloseableThreadLocal).tp_dict, "wrapfn_", make_descriptor(t_CloseableThreadLocal::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CloseableThreadLocal).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CloseableThreadLocal_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CloseableThreadLocal::initializeClass, 1)))
            return NULL;
          return t_CloseableThreadLocal::wrap_Object(CloseableThreadLocal(((t_CloseableThreadLocal *) arg)->object.this$));
        }
        static PyObject *t_CloseableThreadLocal_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CloseableThreadLocal::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CloseableThreadLocal_of_(t_CloseableThreadLocal *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_CloseableThreadLocal_init_(t_CloseableThreadLocal *self, PyObject *args, PyObject *kwds)
        {
          CloseableThreadLocal object((jobject) NULL);

          INT_CALL(object = CloseableThreadLocal());
          self->object = object;

          return 0;
        }

        static PyObject *t_CloseableThreadLocal_close(t_CloseableThreadLocal *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_CloseableThreadLocal_get(t_CloseableThreadLocal *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.get());
          return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_CloseableThreadLocal_set(t_CloseableThreadLocal *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "O", self->parameters[0], &a0))
          {
            OBJ_CALL(self->object.set(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "set", arg);
          return NULL;
        }
        static PyObject *t_CloseableThreadLocal_get__parameters_(t_CloseableThreadLocal *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemFilter::class$ = NULL;
          jmethodID *LatvianStemFilter::mids$ = NULL;
          bool LatvianStemFilter::live$ = false;

          jclass LatvianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemFilter::LatvianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean LatvianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemFilter_init_(t_LatvianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemFilter_incrementToken(t_LatvianStemFilter *self, PyObject *args);

          static PyMethodDef t_LatvianStemFilter__methods_[] = {
            DECLARE_METHOD(t_LatvianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianStemFilter, t_LatvianStemFilter, ::org::apache::lucene::analysis::TokenFilter, LatvianStemFilter, t_LatvianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_LatvianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemFilter), module, "LatvianStemFilter", 0);
          }

          void t_LatvianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianStemFilter).tp_dict, "class_", make_descriptor(LatvianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_LatvianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatvianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemFilter::initializeClass, 1)))
              return NULL;
            return t_LatvianStemFilter::wrap_Object(LatvianStemFilter(((t_LatvianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemFilter_init_(t_LatvianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            LatvianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = LatvianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianStemFilter_incrementToken(t_LatvianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LatvianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *ASCIIFoldingFilterFactory::class$ = NULL;
          jmethodID *ASCIIFoldingFilterFactory::mids$ = NULL;
          bool ASCIIFoldingFilterFactory::live$ = false;

          jclass ASCIIFoldingFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_7c6dfdbe] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/ASCIIFoldingFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ASCIIFoldingFilterFactory::ASCIIFoldingFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter ASCIIFoldingFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter(env->callObjectMethod(this$, mids$[mid_create_7c6dfdbe], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory ASCIIFoldingFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_ASCIIFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ASCIIFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ASCIIFoldingFilterFactory_init_(t_ASCIIFoldingFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ASCIIFoldingFilterFactory_create(t_ASCIIFoldingFilterFactory *self, PyObject *args);
          static PyObject *t_ASCIIFoldingFilterFactory_getMultiTermComponent(t_ASCIIFoldingFilterFactory *self);
          static PyObject *t_ASCIIFoldingFilterFactory_get__multiTermComponent(t_ASCIIFoldingFilterFactory *self, void *data);
          static PyGetSetDef t_ASCIIFoldingFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_ASCIIFoldingFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ASCIIFoldingFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_ASCIIFoldingFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ASCIIFoldingFilterFactory, t_ASCIIFoldingFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ASCIIFoldingFilterFactory, t_ASCIIFoldingFilterFactory_init_, 0, 0, t_ASCIIFoldingFilterFactory__fields_, 0, 0);

          void t_ASCIIFoldingFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ASCIIFoldingFilterFactory), module, "ASCIIFoldingFilterFactory", 0);
          }

          void t_ASCIIFoldingFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilterFactory).tp_dict, "class_", make_descriptor(ASCIIFoldingFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ASCIIFoldingFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ASCIIFoldingFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ASCIIFoldingFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ASCIIFoldingFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ASCIIFoldingFilterFactory::wrap_Object(ASCIIFoldingFilterFactory(((t_ASCIIFoldingFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ASCIIFoldingFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ASCIIFoldingFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ASCIIFoldingFilterFactory_init_(t_ASCIIFoldingFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ASCIIFoldingFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ASCIIFoldingFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ASCIIFoldingFilterFactory_create(t_ASCIIFoldingFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::ASCIIFoldingFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_ASCIIFoldingFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ASCIIFoldingFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_ASCIIFoldingFilterFactory_getMultiTermComponent(t_ASCIIFoldingFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_ASCIIFoldingFilterFactory_get__multiTermComponent(t_ASCIIFoldingFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ga/IrishLowerCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {

          ::java::lang::Class *IrishLowerCaseFilter::class$ = NULL;
          jmethodID *IrishLowerCaseFilter::mids$ = NULL;
          bool IrishLowerCaseFilter::live$ = false;

          jclass IrishLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ga/IrishLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IrishLowerCaseFilter::IrishLowerCaseFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean IrishLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ga {
          static PyObject *t_IrishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IrishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IrishLowerCaseFilter_init_(t_IrishLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IrishLowerCaseFilter_incrementToken(t_IrishLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_IrishLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_IrishLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IrishLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IrishLowerCaseFilter, t_IrishLowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, IrishLowerCaseFilter, t_IrishLowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_IrishLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(IrishLowerCaseFilter), module, "IrishLowerCaseFilter", 0);
          }

          void t_IrishLowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilter).tp_dict, "class_", make_descriptor(IrishLowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_IrishLowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IrishLowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IrishLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IrishLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_IrishLowerCaseFilter::wrap_Object(IrishLowerCaseFilter(((t_IrishLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_IrishLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IrishLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IrishLowerCaseFilter_init_(t_IrishLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            IrishLowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = IrishLowerCaseFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IrishLowerCaseFilter_incrementToken(t_IrishLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(IrishLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/CollectionTerminatedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *CollectionTerminatedException::class$ = NULL;
        jmethodID *CollectionTerminatedException::mids$ = NULL;
        bool CollectionTerminatedException::live$ = false;

        jclass CollectionTerminatedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/CollectionTerminatedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CollectionTerminatedException::CollectionTerminatedException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_CollectionTerminatedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CollectionTerminatedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CollectionTerminatedException_init_(t_CollectionTerminatedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CollectionTerminatedException__methods_[] = {
          DECLARE_METHOD(t_CollectionTerminatedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CollectionTerminatedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CollectionTerminatedException, t_CollectionTerminatedException, ::java::lang::RuntimeException, CollectionTerminatedException, t_CollectionTerminatedException_init_, 0, 0, 0, 0, 0);

        void t_CollectionTerminatedException::install(PyObject *module)
        {
          installType(&PY_TYPE(CollectionTerminatedException), module, "CollectionTerminatedException", 0);
        }

        void t_CollectionTerminatedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CollectionTerminatedException).tp_dict, "class_", make_descriptor(CollectionTerminatedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CollectionTerminatedException).tp_dict, "wrapfn_", make_descriptor(t_CollectionTerminatedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CollectionTerminatedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CollectionTerminatedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CollectionTerminatedException::initializeClass, 1)))
            return NULL;
          return t_CollectionTerminatedException::wrap_Object(CollectionTerminatedException(((t_CollectionTerminatedException *) arg)->object.this$));
        }
        static PyObject *t_CollectionTerminatedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CollectionTerminatedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CollectionTerminatedException_init_(t_CollectionTerminatedException *self, PyObject *args, PyObject *kwds)
        {
          CollectionTerminatedException object((jobject) NULL);

          INT_CALL(object = CollectionTerminatedException());
          self->object = object;

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *NormalizeCharMap::class$ = NULL;
          jmethodID *NormalizeCharMap::mids$ = NULL;
          bool NormalizeCharMap::live$ = false;

          jclass NormalizeCharMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/NormalizeCharMap");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_NormalizeCharMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizeCharMap_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_NormalizeCharMap__methods_[] = {
            DECLARE_METHOD(t_NormalizeCharMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizeCharMap, t_NormalizeCharMap, ::java::lang::Object, NormalizeCharMap, abstract_init, 0, 0, 0, 0, 0);

          void t_NormalizeCharMap::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizeCharMap), module, "NormalizeCharMap", 0);
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "Builder", make_descriptor(&PY_TYPE(NormalizeCharMap$Builder)));
          }

          void t_NormalizeCharMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "class_", make_descriptor(NormalizeCharMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "wrapfn_", make_descriptor(t_NormalizeCharMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizeCharMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizeCharMap::initializeClass, 1)))
              return NULL;
            return t_NormalizeCharMap::wrap_Object(NormalizeCharMap(((t_NormalizeCharMap *) arg)->object.this$));
          }
          static PyObject *t_NormalizeCharMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizeCharMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/LongBitSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *LongBitSet::class$ = NULL;
        jmethodID *LongBitSet::mids$ = NULL;
        bool LongBitSet::live$ = false;

        jclass LongBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/LongBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_0ee6df2f] = env->getMethodID(cls, "<init>", "(J)V");
            mids$[mid_init$_4c830bd0] = env->getMethodID(cls, "<init>", "([JJ)V");
            mids$[mid_and_6e24e395] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_andNot_6e24e395] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_bits2words_0ee6df30] = env->getStaticMethodID(cls, "bits2words", "(J)I");
            mids$[mid_cardinality_54c6a17a] = env->getMethodID(cls, "cardinality", "()J");
            mids$[mid_clear_0ee6df2f] = env->getMethodID(cls, "clear", "(J)V");
            mids$[mid_clear_a7e12ca4] = env->getMethodID(cls, "clear", "(JJ)V");
            mids$[mid_clone_47551698] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/LongBitSet;");
            mids$[mid_ensureCapacity_b4f3a668] = env->getStaticMethodID(cls, "ensureCapacity", "(Lorg/apache/lucene/util/LongBitSet;J)Lorg/apache/lucene/util/LongBitSet;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_flip_a7e12ca4] = env->getMethodID(cls, "flip", "(JJ)V");
            mids$[mid_get_0ee6df23] = env->getMethodID(cls, "get", "(J)Z");
            mids$[mid_getAndClear_0ee6df23] = env->getMethodID(cls, "getAndClear", "(J)Z");
            mids$[mid_getAndSet_0ee6df23] = env->getMethodID(cls, "getAndSet", "(J)Z");
            mids$[mid_getBits_dab10e76] = env->getMethodID(cls, "getBits", "()[J");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intersects_6e24e399] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/util/LongBitSet;)Z");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_nextSetBit_0ee6df33] = env->getMethodID(cls, "nextSetBit", "(J)J");
            mids$[mid_or_6e24e395] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/util/LongBitSet;)V");
            mids$[mid_prevSetBit_0ee6df33] = env->getMethodID(cls, "prevSetBit", "(J)J");
            mids$[mid_set_0ee6df2f] = env->getMethodID(cls, "set", "(J)V");
            mids$[mid_set_a7e12ca4] = env->getMethodID(cls, "set", "(JJ)V");
            mids$[mid_xor_6e24e395] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/util/LongBitSet;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongBitSet::LongBitSet(jlong a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0ee6df2f, a0)) {}

        LongBitSet::LongBitSet(const JArray< jlong > & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4c830bd0, a0.this$, a1)) {}

        void LongBitSet::and$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_6e24e395], a0.this$);
        }

        void LongBitSet::andNot(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_6e24e395], a0.this$);
        }

        jint LongBitSet::bits2words(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bits2words_0ee6df30], a0);
        }

        jlong LongBitSet::cardinality() const
        {
          return env->callLongMethod(this$, mids$[mid_cardinality_54c6a17a]);
        }

        void LongBitSet::clear(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_0ee6df2f], a0);
        }

        void LongBitSet::clear(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_a7e12ca4], a0, a1);
        }

        LongBitSet LongBitSet::clone() const
        {
          return LongBitSet(env->callObjectMethod(this$, mids$[mid_clone_47551698]));
        }

        LongBitSet LongBitSet::ensureCapacity(const LongBitSet & a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return LongBitSet(env->callStaticObjectMethod(cls, mids$[mid_ensureCapacity_b4f3a668], a0.this$, a1));
        }

        jboolean LongBitSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void LongBitSet::flip(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_a7e12ca4], a0, a1);
        }

        jboolean LongBitSet::get(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_0ee6df23], a0);
        }

        jboolean LongBitSet::getAndClear(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndClear_0ee6df23], a0);
        }

        jboolean LongBitSet::getAndSet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_0ee6df23], a0);
        }

        JArray< jlong > LongBitSet::getBits() const
        {
          return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getBits_dab10e76]));
        }

        jint LongBitSet::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean LongBitSet::intersects(const LongBitSet & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersects_6e24e399], a0.this$);
        }

        jlong LongBitSet::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        jlong LongBitSet::nextSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_nextSetBit_0ee6df33], a0);
        }

        void LongBitSet::or$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_6e24e395], a0.this$);
        }

        jlong LongBitSet::prevSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_prevSetBit_0ee6df33], a0);
        }

        void LongBitSet::set(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_0ee6df2f], a0);
        }

        void LongBitSet::set(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_set_a7e12ca4], a0, a1);
        }

        void LongBitSet::xor$(const LongBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_6e24e395], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_LongBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongBitSet_init_(t_LongBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LongBitSet_and(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_andNot(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_bits2words(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongBitSet_cardinality(t_LongBitSet *self);
        static PyObject *t_LongBitSet_clear(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_clone(t_LongBitSet *self);
        static PyObject *t_LongBitSet_ensureCapacity(PyTypeObject *type, PyObject *args);
        static PyObject *t_LongBitSet_equals(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_flip(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_get(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getAndClear(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getAndSet(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_getBits(t_LongBitSet *self);
        static PyObject *t_LongBitSet_hashCode(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_intersects(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_length(t_LongBitSet *self);
        static PyObject *t_LongBitSet_nextSetBit(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_or(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_prevSetBit(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_set(t_LongBitSet *self, PyObject *args);
        static PyObject *t_LongBitSet_xor(t_LongBitSet *self, PyObject *arg);
        static PyObject *t_LongBitSet_get__bits(t_LongBitSet *self, void *data);
        static PyGetSetDef t_LongBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_LongBitSet, bits),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LongBitSet__methods_[] = {
          DECLARE_METHOD(t_LongBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, and, METH_O),
          DECLARE_METHOD(t_LongBitSet, andNot, METH_O),
          DECLARE_METHOD(t_LongBitSet, bits2words, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, clone, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, ensureCapacity, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_LongBitSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, flip, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, get, METH_O),
          DECLARE_METHOD(t_LongBitSet, getAndClear, METH_O),
          DECLARE_METHOD(t_LongBitSet, getAndSet, METH_O),
          DECLARE_METHOD(t_LongBitSet, getBits, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, intersects, METH_O),
          DECLARE_METHOD(t_LongBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_LongBitSet, nextSetBit, METH_O),
          DECLARE_METHOD(t_LongBitSet, or, METH_O),
          DECLARE_METHOD(t_LongBitSet, prevSetBit, METH_O),
          DECLARE_METHOD(t_LongBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_LongBitSet, xor, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongBitSet, t_LongBitSet, ::java::lang::Object, LongBitSet, t_LongBitSet_init_, 0, 0, t_LongBitSet__fields_, 0, 0);

        void t_LongBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(LongBitSet), module, "LongBitSet", 0);
        }

        void t_LongBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongBitSet).tp_dict, "class_", make_descriptor(LongBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongBitSet).tp_dict, "wrapfn_", make_descriptor(t_LongBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LongBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongBitSet::initializeClass, 1)))
            return NULL;
          return t_LongBitSet::wrap_Object(LongBitSet(((t_LongBitSet *) arg)->object.this$));
        }
        static PyObject *t_LongBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongBitSet_init_(t_LongBitSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              LongBitSet object((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                INT_CALL(object = LongBitSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jlong a1;
              LongBitSet object((jobject) NULL);

              if (!parseArgs(args, "[JJ", &a0, &a1))
              {
                INT_CALL(object = LongBitSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LongBitSet_and(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.and$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "and", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_andNot(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.andNot(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "andNot", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_bits2words(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongBitSet::bits2words(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bits2words", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_cardinality(t_LongBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cardinality());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LongBitSet_clear(t_LongBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_clone(t_LongBitSet *self)
        {
          LongBitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_LongBitSet::wrap_Object(result);
        }

        static PyObject *t_LongBitSet_ensureCapacity(PyTypeObject *type, PyObject *args)
        {
          LongBitSet a0((jobject) NULL);
          jlong a1;
          LongBitSet result((jobject) NULL);

          if (!parseArgs(args, "kJ", LongBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::LongBitSet::ensureCapacity(a0, a1));
            return t_LongBitSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "ensureCapacity", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_equals(t_LongBitSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(LongBitSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_LongBitSet_flip(t_LongBitSet *self, PyObject *args)
        {
          jlong a0;
          jlong a1;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(self->object.flip(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "flip", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_get(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getAndClear(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getAndClear(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndClear", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getAndSet(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jboolean result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getAndSet(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndSet", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_getBits(t_LongBitSet *self)
        {
          JArray< jlong > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBits());
          return result.wrap();
        }

        static PyObject *t_LongBitSet_hashCode(t_LongBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(LongBitSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_LongBitSet_intersects(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersects(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersects", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_length(t_LongBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.length());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_LongBitSet_nextSetBit(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.nextSetBit(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "nextSetBit", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_or(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.or$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "or", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_prevSetBit(t_LongBitSet *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.prevSetBit(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "prevSetBit", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_set(t_LongBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.set(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "set", args);
          return NULL;
        }

        static PyObject *t_LongBitSet_xor(t_LongBitSet *self, PyObject *arg)
        {
          LongBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", LongBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.xor$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "xor", arg);
          return NULL;
        }

        static PyObject *t_LongBitSet_get__bits(t_LongBitSet *self, void *data)
        {
          JArray< jlong > value((jobject) NULL);
          OBJ_CALL(value = self->object.getBits());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortRescorer.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortRescorer::class$ = NULL;
        jmethodID *SortRescorer::mids$ = NULL;
        bool SortRescorer::live$ = false;

        jclass SortRescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortRescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a6044f56] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Sort;)V");
            mids$[mid_explain_2b38e623] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_bd3343d7] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortRescorer::SortRescorer(const ::org::apache::lucene::search::Sort & a0) : ::org::apache::lucene::search::Rescorer(env->newObject(initializeClass, &mids$, mid_init$_a6044f56, a0.this$)) {}

        ::org::apache::lucene::search::Explanation SortRescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_2b38e623], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs SortRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_bd3343d7], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortRescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortRescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortRescorer_init_(t_SortRescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortRescorer_explain(t_SortRescorer *self, PyObject *args);
        static PyObject *t_SortRescorer_rescore(t_SortRescorer *self, PyObject *args);

        static PyMethodDef t_SortRescorer__methods_[] = {
          DECLARE_METHOD(t_SortRescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortRescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortRescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_SortRescorer, rescore, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortRescorer, t_SortRescorer, ::org::apache::lucene::search::Rescorer, SortRescorer, t_SortRescorer_init_, 0, 0, 0, 0, 0);

        void t_SortRescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(SortRescorer), module, "SortRescorer", 0);
        }

        void t_SortRescorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortRescorer).tp_dict, "class_", make_descriptor(SortRescorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortRescorer).tp_dict, "wrapfn_", make_descriptor(t_SortRescorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortRescorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortRescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortRescorer::initializeClass, 1)))
            return NULL;
          return t_SortRescorer::wrap_Object(SortRescorer(((t_SortRescorer *) arg)->object.this$));
        }
        static PyObject *t_SortRescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortRescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortRescorer_init_(t_SortRescorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Sort a0((jobject) NULL);
          SortRescorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Sort::initializeClass, &a0))
          {
            INT_CALL(object = SortRescorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortRescorer_explain(t_SortRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortRescorer), (PyObject *) self, "explain", args, 2);
        }

        static PyObject *t_SortRescorer_rescore(t_SortRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortRescorer), (PyObject *) self, "rescore", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/da/DanishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace da {

          ::java::lang::Class *DanishAnalyzer::class$ = NULL;
          jmethodID *DanishAnalyzer::mids$ = NULL;
          bool DanishAnalyzer::live$ = false;
          ::java::lang::String *DanishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass DanishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/da/DanishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          DanishAnalyzer::DanishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet DanishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace da {
          static PyObject *t_DanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DanishAnalyzer_init_(t_DanishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DanishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_DanishAnalyzer_get__defaultStopSet(t_DanishAnalyzer *self, void *data);
          static PyGetSetDef t_DanishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_DanishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DanishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_DanishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DanishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DanishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DanishAnalyzer, t_DanishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, DanishAnalyzer, t_DanishAnalyzer_init_, 0, 0, t_DanishAnalyzer__fields_, 0, 0);

          void t_DanishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(DanishAnalyzer), module, "DanishAnalyzer", 0);
          }

          void t_DanishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "class_", make_descriptor(DanishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_DanishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DanishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(DanishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*DanishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_DanishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DanishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_DanishAnalyzer::wrap_Object(DanishAnalyzer(((t_DanishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_DanishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DanishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DanishAnalyzer_init_(t_DanishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                DanishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = DanishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DanishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::da::DanishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_DanishAnalyzer_get__defaultStopSet(t_DanishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *NumericTokenStream$NumericTermAttribute::class$ = NULL;
        jmethodID *NumericTokenStream$NumericTermAttribute::mids$ = NULL;
        bool NumericTokenStream$NumericTermAttribute::live$ = false;

        jclass NumericTokenStream$NumericTermAttribute::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/NumericTokenStream$NumericTermAttribute");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getRawValue_54c6a17a] = env->getMethodID(cls, "getRawValue", "()J");
            mids$[mid_getShift_54c6a179] = env->getMethodID(cls, "getShift", "()I");
            mids$[mid_getValueSize_54c6a179] = env->getMethodID(cls, "getValueSize", "()I");
            mids$[mid_incShift_54c6a179] = env->getMethodID(cls, "incShift", "()I");
            mids$[mid_init_72e1d373] = env->getMethodID(cls, "init", "(JIII)V");
            mids$[mid_setShift_39c7bd3c] = env->getMethodID(cls, "setShift", "(I)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong NumericTokenStream$NumericTermAttribute::getRawValue() const
        {
          return env->callLongMethod(this$, mids$[mid_getRawValue_54c6a17a]);
        }

        jint NumericTokenStream$NumericTermAttribute::getShift() const
        {
          return env->callIntMethod(this$, mids$[mid_getShift_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttribute::getValueSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueSize_54c6a179]);
        }

        jint NumericTokenStream$NumericTermAttribute::incShift() const
        {
          return env->callIntMethod(this$, mids$[mid_incShift_54c6a179]);
        }

        void NumericTokenStream$NumericTermAttribute::init(jlong a0, jint a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_init_72e1d373], a0, a1, a2, a3);
        }

        void NumericTokenStream$NumericTermAttribute::setShift(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setShift_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_NumericTokenStream$NumericTermAttribute_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_getRawValue(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_getShift(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_getValueSize(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_incShift(t_NumericTokenStream$NumericTermAttribute *self);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_init(t_NumericTokenStream$NumericTermAttribute *self, PyObject *args);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_setShift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__rawValue(t_NumericTokenStream$NumericTermAttribute *self, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__shift(t_NumericTokenStream$NumericTermAttribute *self, void *data);
        static int t_NumericTokenStream$NumericTermAttribute_set__shift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg, void *data);
        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__valueSize(t_NumericTokenStream$NumericTermAttribute *self, void *data);
        static PyGetSetDef t_NumericTokenStream$NumericTermAttribute__fields_[] = {
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttribute, rawValue),
          DECLARE_GETSET_FIELD(t_NumericTokenStream$NumericTermAttribute, shift),
          DECLARE_GET_FIELD(t_NumericTokenStream$NumericTermAttribute, valueSize),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NumericTokenStream$NumericTermAttribute__methods_[] = {
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, getRawValue, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, getShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, getValueSize, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, incShift, METH_NOARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, init, METH_VARARGS),
          DECLARE_METHOD(t_NumericTokenStream$NumericTermAttribute, setShift, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericTokenStream$NumericTermAttribute, t_NumericTokenStream$NumericTermAttribute, ::org::apache::lucene::util::Attribute, NumericTokenStream$NumericTermAttribute, abstract_init, 0, 0, t_NumericTokenStream$NumericTermAttribute__fields_, 0, 0);

        void t_NumericTokenStream$NumericTermAttribute::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericTokenStream$NumericTermAttribute), module, "NumericTokenStream$NumericTermAttribute", 0);
        }

        void t_NumericTokenStream$NumericTermAttribute::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttribute).tp_dict, "class_", make_descriptor(NumericTokenStream$NumericTermAttribute::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttribute).tp_dict, "wrapfn_", make_descriptor(t_NumericTokenStream$NumericTermAttribute::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericTokenStream$NumericTermAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericTokenStream$NumericTermAttribute::initializeClass, 1)))
            return NULL;
          return t_NumericTokenStream$NumericTermAttribute::wrap_Object(NumericTokenStream$NumericTermAttribute(((t_NumericTokenStream$NumericTermAttribute *) arg)->object.this$));
        }
        static PyObject *t_NumericTokenStream$NumericTermAttribute_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericTokenStream$NumericTermAttribute::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_getRawValue(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_getShift(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_getValueSize(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getValueSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_incShift(t_NumericTokenStream$NumericTermAttribute *self)
        {
          jint result;
          OBJ_CALL(result = self->object.incShift());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_init(t_NumericTokenStream$NumericTermAttribute *self, PyObject *args)
        {
          jlong a0;
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "JIII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.init(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_setShift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setShift(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setShift", arg);
          return NULL;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__rawValue(t_NumericTokenStream$NumericTermAttribute *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getRawValue());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__shift(t_NumericTokenStream$NumericTermAttribute *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getShift());
          return PyInt_FromLong((long) value);
        }
        static int t_NumericTokenStream$NumericTermAttribute_set__shift(t_NumericTokenStream$NumericTermAttribute *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setShift(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "shift", arg);
          return -1;
        }

        static PyObject *t_NumericTokenStream$NumericTermAttribute_get__valueSize(t_NumericTokenStream$NumericTermAttribute *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueSize());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *StandardQueryConfigHandler$Operator::class$ = NULL;
              jmethodID *StandardQueryConfigHandler$Operator::mids$ = NULL;
              bool StandardQueryConfigHandler$Operator::live$ = false;
              StandardQueryConfigHandler$Operator *StandardQueryConfigHandler$Operator::AND = NULL;
              StandardQueryConfigHandler$Operator *StandardQueryConfigHandler$Operator::OR = NULL;

              jclass StandardQueryConfigHandler$Operator::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_5228e32d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");
                  mids$[mid_values_6f704b93] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  AND = new StandardQueryConfigHandler$Operator(env->getStaticObjectField(cls, "AND", "Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;"));
                  OR = new StandardQueryConfigHandler$Operator(env->getStaticObjectField(cls, "OR", "Lorg/apache/lucene/queryparser/flexible/standard/config/StandardQueryConfigHandler$Operator;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryConfigHandler$Operator StandardQueryConfigHandler$Operator::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return StandardQueryConfigHandler$Operator(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5228e32d], a0.this$));
              }

              JArray< StandardQueryConfigHandler$Operator > StandardQueryConfigHandler$Operator::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< StandardQueryConfigHandler$Operator >(env->callStaticObjectMethod(cls, mids$[mid_values_6f704b93]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_StandardQueryConfigHandler$Operator_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$Operator_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryConfigHandler$Operator_of_(t_StandardQueryConfigHandler$Operator *self, PyObject *args);
              static PyObject *t_StandardQueryConfigHandler$Operator_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_StandardQueryConfigHandler$Operator_values(PyTypeObject *type);
              static PyObject *t_StandardQueryConfigHandler$Operator_get__parameters_(t_StandardQueryConfigHandler$Operator *self, void *data);
              static PyGetSetDef t_StandardQueryConfigHandler$Operator__fields_[] = {
                DECLARE_GET_FIELD(t_StandardQueryConfigHandler$Operator, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardQueryConfigHandler$Operator__methods_[] = {
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, of_, METH_VARARGS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryConfigHandler$Operator, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryConfigHandler$Operator, t_StandardQueryConfigHandler$Operator, ::java::lang::Enum, StandardQueryConfigHandler$Operator, abstract_init, 0, 0, t_StandardQueryConfigHandler$Operator__fields_, 0, 0);
              PyObject *t_StandardQueryConfigHandler$Operator::wrap_Object(const StandardQueryConfigHandler$Operator& object, PyTypeObject *p0)
              {
                PyObject *obj = t_StandardQueryConfigHandler$Operator::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_StandardQueryConfigHandler$Operator *self = (t_StandardQueryConfigHandler$Operator *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_StandardQueryConfigHandler$Operator::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_StandardQueryConfigHandler$Operator::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_StandardQueryConfigHandler$Operator *self = (t_StandardQueryConfigHandler$Operator *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_StandardQueryConfigHandler$Operator::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryConfigHandler$Operator), module, "StandardQueryConfigHandler$Operator", 0);
              }

              void t_StandardQueryConfigHandler$Operator::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "class_", make_descriptor(StandardQueryConfigHandler$Operator::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardQueryConfigHandler$Operator::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "AND", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_Object(*StandardQueryConfigHandler$Operator::AND)));
                PyDict_SetItemString(PY_TYPE(StandardQueryConfigHandler$Operator).tp_dict, "OR", make_descriptor(t_StandardQueryConfigHandler$Operator::wrap_Object(*StandardQueryConfigHandler$Operator::OR)));
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryConfigHandler$Operator::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryConfigHandler$Operator::wrap_Object(StandardQueryConfigHandler$Operator(((t_StandardQueryConfigHandler$Operator *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryConfigHandler$Operator_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryConfigHandler$Operator::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_of_(t_StandardQueryConfigHandler$Operator *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                StandardQueryConfigHandler$Operator result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::valueOf(a0));
                  return t_StandardQueryConfigHandler$Operator::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_StandardQueryConfigHandler$Operator_values(PyTypeObject *type)
              {
                JArray< StandardQueryConfigHandler$Operator > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::config::StandardQueryConfigHandler$Operator::values());
                return JArray<jobject>(result.this$).wrap(t_StandardQueryConfigHandler$Operator::wrap_jobject);
              }
              static PyObject *t_StandardQueryConfigHandler$Operator_get__parameters_(t_StandardQueryConfigHandler$Operator *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TieredMergePolicy.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "org/apache/lucene/index/SegmentInfos.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/MergePolicy$MergeSpecification.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/Boolean.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TieredMergePolicy::class$ = NULL;
        jmethodID *TieredMergePolicy::mids$ = NULL;
        bool TieredMergePolicy::live$ = false;
        jdouble TieredMergePolicy::DEFAULT_NO_CFS_RATIO = (jdouble) 0;

        jclass TieredMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TieredMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_findForcedDeletesMerges_581dbc49] = env->getMethodID(cls, "findForcedDeletesMerges", "(Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findForcedMerges_4fe4a5b5] = env->getMethodID(cls, "findForcedMerges", "(Lorg/apache/lucene/index/SegmentInfos;ILjava/util/Map;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_findMerges_cada0df0] = env->getMethodID(cls, "findMerges", "(Lorg/apache/lucene/index/MergeTrigger;Lorg/apache/lucene/index/SegmentInfos;Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/MergePolicy$MergeSpecification;");
            mids$[mid_getFloorSegmentMB_54c6a174] = env->getMethodID(cls, "getFloorSegmentMB", "()D");
            mids$[mid_getForceMergeDeletesPctAllowed_54c6a174] = env->getMethodID(cls, "getForceMergeDeletesPctAllowed", "()D");
            mids$[mid_getMaxMergeAtOnce_54c6a179] = env->getMethodID(cls, "getMaxMergeAtOnce", "()I");
            mids$[mid_getMaxMergeAtOnceExplicit_54c6a179] = env->getMethodID(cls, "getMaxMergeAtOnceExplicit", "()I");
            mids$[mid_getMaxMergedSegmentMB_54c6a174] = env->getMethodID(cls, "getMaxMergedSegmentMB", "()D");
            mids$[mid_getReclaimDeletesWeight_54c6a174] = env->getMethodID(cls, "getReclaimDeletesWeight", "()D");
            mids$[mid_getSegmentsPerTier_54c6a174] = env->getMethodID(cls, "getSegmentsPerTier", "()D");
            mids$[mid_setFloorSegmentMB_e09c6d07] = env->getMethodID(cls, "setFloorSegmentMB", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setForceMergeDeletesPctAllowed_e09c6d07] = env->getMethodID(cls, "setForceMergeDeletesPctAllowed", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergeAtOnce_40ad7bc2] = env->getMethodID(cls, "setMaxMergeAtOnce", "(I)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergeAtOnceExplicit_40ad7bc2] = env->getMethodID(cls, "setMaxMergeAtOnceExplicit", "(I)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setMaxMergedSegmentMB_e09c6d07] = env->getMethodID(cls, "setMaxMergedSegmentMB", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setReclaimDeletesWeight_e09c6d07] = env->getMethodID(cls, "setReclaimDeletesWeight", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_setSegmentsPerTier_e09c6d07] = env->getMethodID(cls, "setSegmentsPerTier", "(D)Lorg/apache/lucene/index/TieredMergePolicy;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_score_178499e5] = env->getMethodID(cls, "score", "(Ljava/util/List;ZJLorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/TieredMergePolicy$MergeScore;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_NO_CFS_RATIO = env->getStaticDoubleField(cls, "DEFAULT_NO_CFS_RATIO");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TieredMergePolicy::TieredMergePolicy() : ::org::apache::lucene::index::MergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void TieredMergePolicy::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findForcedDeletesMerges(const ::org::apache::lucene::index::SegmentInfos & a0, const ::org::apache::lucene::index::IndexWriter & a1) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedDeletesMerges_581dbc49], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findForcedMerges(const ::org::apache::lucene::index::SegmentInfos & a0, jint a1, const ::java::util::Map & a2, const ::org::apache::lucene::index::IndexWriter & a3) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findForcedMerges_4fe4a5b5], a0.this$, a1, a2.this$, a3.this$));
        }

        ::org::apache::lucene::index::MergePolicy$MergeSpecification TieredMergePolicy::findMerges(const ::org::apache::lucene::index::MergeTrigger & a0, const ::org::apache::lucene::index::SegmentInfos & a1, const ::org::apache::lucene::index::IndexWriter & a2) const
        {
          return ::org::apache::lucene::index::MergePolicy$MergeSpecification(env->callObjectMethod(this$, mids$[mid_findMerges_cada0df0], a0.this$, a1.this$, a2.this$));
        }

        jdouble TieredMergePolicy::getFloorSegmentMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getFloorSegmentMB_54c6a174]);
        }

        jdouble TieredMergePolicy::getForceMergeDeletesPctAllowed() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getForceMergeDeletesPctAllowed_54c6a174]);
        }

        jint TieredMergePolicy::getMaxMergeAtOnce() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeAtOnce_54c6a179]);
        }

        jint TieredMergePolicy::getMaxMergeAtOnceExplicit() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxMergeAtOnceExplicit_54c6a179]);
        }

        jdouble TieredMergePolicy::getMaxMergedSegmentMB() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMaxMergedSegmentMB_54c6a174]);
        }

        jdouble TieredMergePolicy::getReclaimDeletesWeight() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getReclaimDeletesWeight_54c6a174]);
        }

        jdouble TieredMergePolicy::getSegmentsPerTier() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getSegmentsPerTier_54c6a174]);
        }

        TieredMergePolicy TieredMergePolicy::setFloorSegmentMB(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setFloorSegmentMB_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setForceMergeDeletesPctAllowed(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setForceMergeDeletesPctAllowed_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergeAtOnce(jint a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergeAtOnce_40ad7bc2], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergeAtOnceExplicit(jint a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergeAtOnceExplicit_40ad7bc2], a0));
        }

        TieredMergePolicy TieredMergePolicy::setMaxMergedSegmentMB(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setMaxMergedSegmentMB_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setReclaimDeletesWeight(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setReclaimDeletesWeight_e09c6d07], a0));
        }

        TieredMergePolicy TieredMergePolicy::setSegmentsPerTier(jdouble a0) const
        {
          return TieredMergePolicy(env->callObjectMethod(this$, mids$[mid_setSegmentsPerTier_e09c6d07], a0));
        }

        ::java::lang::String TieredMergePolicy::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TieredMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TieredMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TieredMergePolicy_init_(t_TieredMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TieredMergePolicy_close(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_findForcedDeletesMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_findForcedMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_findMerges(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_getFloorSegmentMB(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getForceMergeDeletesPctAllowed(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnce(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnceExplicit(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getMaxMergedSegmentMB(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getReclaimDeletesWeight(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_getSegmentsPerTier(t_TieredMergePolicy *self);
        static PyObject *t_TieredMergePolicy_setFloorSegmentMB(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setForceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setMaxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setReclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_setSegmentsPerTier(t_TieredMergePolicy *self, PyObject *arg);
        static PyObject *t_TieredMergePolicy_toString(t_TieredMergePolicy *self, PyObject *args);
        static PyObject *t_TieredMergePolicy_get__floorSegmentMB(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__floorSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnce(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__maxMergedSegmentMB(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__maxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__reclaimDeletesWeight(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__reclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyObject *t_TieredMergePolicy_get__segmentsPerTier(t_TieredMergePolicy *self, void *data);
        static int t_TieredMergePolicy_set__segmentsPerTier(t_TieredMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_TieredMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, floorSegmentMB),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, forceMergeDeletesPctAllowed),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergeAtOnce),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergeAtOnceExplicit),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, maxMergedSegmentMB),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, reclaimDeletesWeight),
          DECLARE_GETSET_FIELD(t_TieredMergePolicy, segmentsPerTier),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TieredMergePolicy__methods_[] = {
          DECLARE_METHOD(t_TieredMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TieredMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TieredMergePolicy, close, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, findForcedDeletesMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, findForcedMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, findMerges, METH_VARARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getFloorSegmentMB, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getForceMergeDeletesPctAllowed, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergeAtOnce, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergeAtOnceExplicit, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getMaxMergedSegmentMB, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getReclaimDeletesWeight, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, getSegmentsPerTier, METH_NOARGS),
          DECLARE_METHOD(t_TieredMergePolicy, setFloorSegmentMB, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setForceMergeDeletesPctAllowed, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergeAtOnce, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergeAtOnceExplicit, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setMaxMergedSegmentMB, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setReclaimDeletesWeight, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, setSegmentsPerTier, METH_O),
          DECLARE_METHOD(t_TieredMergePolicy, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TieredMergePolicy, t_TieredMergePolicy, ::org::apache::lucene::index::MergePolicy, TieredMergePolicy, t_TieredMergePolicy_init_, 0, 0, t_TieredMergePolicy__fields_, 0, 0);

        void t_TieredMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(TieredMergePolicy), module, "TieredMergePolicy", 0);
        }

        void t_TieredMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "class_", make_descriptor(TieredMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_TieredMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TieredMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(TieredMergePolicy).tp_dict, "DEFAULT_NO_CFS_RATIO", make_descriptor(TieredMergePolicy::DEFAULT_NO_CFS_RATIO));
        }

        static PyObject *t_TieredMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TieredMergePolicy::initializeClass, 1)))
            return NULL;
          return t_TieredMergePolicy::wrap_Object(TieredMergePolicy(((t_TieredMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_TieredMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TieredMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TieredMergePolicy_init_(t_TieredMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          TieredMergePolicy object((jobject) NULL);

          INT_CALL(object = TieredMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_TieredMergePolicy_close(t_TieredMergePolicy *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_TieredMergePolicy_findForcedDeletesMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.findForcedDeletesMerges(a0, a1));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "findForcedDeletesMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_findForcedMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::SegmentInfos a0((jobject) NULL);
          jint a1;
          ::java::util::Map a2((jobject) NULL);
          PyTypeObject **p2;
          ::org::apache::lucene::index::IndexWriter a3((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "kIKk", ::org::apache::lucene::index::SegmentInfos::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_, &a3))
          {
            OBJ_CALL(result = self->object.findForcedMerges(a0, a1, a2, a3));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "findForcedMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_findMerges(t_TieredMergePolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeTrigger a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::index::SegmentInfos a1((jobject) NULL);
          ::org::apache::lucene::index::IndexWriter a2((jobject) NULL);
          ::org::apache::lucene::index::MergePolicy$MergeSpecification result((jobject) NULL);

          if (!parseArgs(args, "Kkk", ::org::apache::lucene::index::MergeTrigger::initializeClass, ::org::apache::lucene::index::SegmentInfos::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a1, &a2))
          {
            OBJ_CALL(result = self->object.findMerges(a0, a1, a2));
            return ::org::apache::lucene::index::t_MergePolicy$MergeSpecification::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "findMerges", args, 2);
        }

        static PyObject *t_TieredMergePolicy_getFloorSegmentMB(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getFloorSegmentMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getForceMergeDeletesPctAllowed(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getForceMergeDeletesPctAllowed());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnce(t_TieredMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeAtOnce());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergeAtOnceExplicit(t_TieredMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxMergeAtOnceExplicit());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TieredMergePolicy_getMaxMergedSegmentMB(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMaxMergedSegmentMB());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getReclaimDeletesWeight(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getReclaimDeletesWeight());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_getSegmentsPerTier(t_TieredMergePolicy *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getSegmentsPerTier());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TieredMergePolicy_setFloorSegmentMB(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setFloorSegmentMB(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setFloorSegmentMB", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setForceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setForceMergeDeletesPctAllowed(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setForceMergeDeletesPctAllowed", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg)
        {
          jint a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergeAtOnce(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeAtOnce", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg)
        {
          jint a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergeAtOnceExplicit(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergeAtOnceExplicit", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setMaxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setMaxMergedSegmentMB(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxMergedSegmentMB", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setReclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setReclaimDeletesWeight(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setReclaimDeletesWeight", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_setSegmentsPerTier(t_TieredMergePolicy *self, PyObject *arg)
        {
          jdouble a0;
          TieredMergePolicy result((jobject) NULL);

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = self->object.setSegmentsPerTier(a0));
            return t_TieredMergePolicy::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setSegmentsPerTier", arg);
          return NULL;
        }

        static PyObject *t_TieredMergePolicy_toString(t_TieredMergePolicy *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(TieredMergePolicy), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_TieredMergePolicy_get__floorSegmentMB(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getFloorSegmentMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__floorSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setFloorSegmentMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "floorSegmentMB", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getForceMergeDeletesPctAllowed());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__forceMergeDeletesPctAllowed(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setForceMergeDeletesPctAllowed(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "forceMergeDeletesPctAllowed", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnce(t_TieredMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeAtOnce());
          return PyInt_FromLong((long) value);
        }
        static int t_TieredMergePolicy_set__maxMergeAtOnce(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeAtOnce(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeAtOnce", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxMergeAtOnceExplicit());
          return PyInt_FromLong((long) value);
        }
        static int t_TieredMergePolicy_set__maxMergeAtOnceExplicit(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMaxMergeAtOnceExplicit(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergeAtOnceExplicit", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__maxMergedSegmentMB(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMaxMergedSegmentMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__maxMergedSegmentMB(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMaxMergedSegmentMB(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxMergedSegmentMB", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__reclaimDeletesWeight(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getReclaimDeletesWeight());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__reclaimDeletesWeight(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setReclaimDeletesWeight(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "reclaimDeletesWeight", arg);
          return -1;
        }

        static PyObject *t_TieredMergePolicy_get__segmentsPerTier(t_TieredMergePolicy *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getSegmentsPerTier());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TieredMergePolicy_set__segmentsPerTier(t_TieredMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setSegmentsPerTier(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "segmentsPerTier", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FixedBitSet$FixedBitSetIterator.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FixedBitSet$FixedBitSetIterator::class$ = NULL;
        jmethodID *FixedBitSet$FixedBitSetIterator::mids$ = NULL;
        bool FixedBitSet$FixedBitSetIterator::live$ = false;

        jclass FixedBitSet$FixedBitSetIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FixedBitSet$FixedBitSetIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_ef674644] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_init$_6ae021e7] = env->getMethodID(cls, "<init>", "([JII)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FixedBitSet$FixedBitSetIterator::FixedBitSet$FixedBitSetIterator(const ::org::apache::lucene::util::FixedBitSet & a0) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_ef674644, a0.this$)) {}

        FixedBitSet$FixedBitSetIterator::FixedBitSet$FixedBitSetIterator(const JArray< jlong > & a0, jint a1, jint a2) : ::org::apache::lucene::search::DocIdSetIterator(env->newObject(initializeClass, &mids$, mid_init$_6ae021e7, a0.this$, a1, a2)) {}

        jint FixedBitSet$FixedBitSetIterator::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong FixedBitSet$FixedBitSetIterator::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint FixedBitSet$FixedBitSetIterator::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint FixedBitSet$FixedBitSetIterator::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FixedBitSet$FixedBitSetIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FixedBitSet$FixedBitSetIterator_init_(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_advance(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_cost(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_docID(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);
        static PyObject *t_FixedBitSet$FixedBitSetIterator_nextDoc(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args);

        static PyMethodDef t_FixedBitSet$FixedBitSetIterator__methods_[] = {
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, advance, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, cost, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, docID, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet$FixedBitSetIterator, nextDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FixedBitSet$FixedBitSetIterator, t_FixedBitSet$FixedBitSetIterator, ::org::apache::lucene::search::DocIdSetIterator, FixedBitSet$FixedBitSetIterator, t_FixedBitSet$FixedBitSetIterator_init_, 0, 0, 0, 0, 0);

        void t_FixedBitSet$FixedBitSetIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(FixedBitSet$FixedBitSetIterator), module, "FixedBitSet$FixedBitSetIterator", 0);
        }

        void t_FixedBitSet$FixedBitSetIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FixedBitSet$FixedBitSetIterator).tp_dict, "class_", make_descriptor(FixedBitSet$FixedBitSetIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FixedBitSet$FixedBitSetIterator).tp_dict, "wrapfn_", make_descriptor(t_FixedBitSet$FixedBitSetIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FixedBitSet$FixedBitSetIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FixedBitSet$FixedBitSetIterator::initializeClass, 1)))
            return NULL;
          return t_FixedBitSet$FixedBitSetIterator::wrap_Object(FixedBitSet$FixedBitSetIterator(((t_FixedBitSet$FixedBitSetIterator *) arg)->object.this$));
        }
        static PyObject *t_FixedBitSet$FixedBitSetIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FixedBitSet$FixedBitSetIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FixedBitSet$FixedBitSetIterator_init_(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::FixedBitSet a0((jobject) NULL);
              FixedBitSet$FixedBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::FixedBitSet::initializeClass, &a0))
              {
                INT_CALL(object = FixedBitSet$FixedBitSetIterator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              jint a2;
              FixedBitSet$FixedBitSetIterator object((jobject) NULL);

              if (!parseArgs(args, "[JII", &a0, &a1, &a2))
              {
                INT_CALL(object = FixedBitSet$FixedBitSetIterator(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_advance(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_cost(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_docID(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_FixedBitSet$FixedBitSetIterator_nextDoc(t_FixedBitSet$FixedBitSetIterator *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet$FixedBitSetIterator), (PyObject *) self, "nextDoc", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianAnalyzer::class$ = NULL;
          jmethodID *BrazilianAnalyzer::mids$ = NULL;
          bool BrazilianAnalyzer::live$ = false;
          ::java::lang::String *BrazilianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BrazilianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet BrazilianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianAnalyzer_init_(t_BrazilianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BrazilianAnalyzer_get__defaultStopSet(t_BrazilianAnalyzer *self, void *data);
          static PyGetSetDef t_BrazilianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BrazilianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BrazilianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BrazilianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianAnalyzer, t_BrazilianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, BrazilianAnalyzer, t_BrazilianAnalyzer_init_, 0, 0, t_BrazilianAnalyzer__fields_, 0, 0);

          void t_BrazilianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianAnalyzer), module, "BrazilianAnalyzer", 0);
          }

          void t_BrazilianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "class_", make_descriptor(BrazilianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_BrazilianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BrazilianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BrazilianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BrazilianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BrazilianAnalyzer::wrap_Object(BrazilianAnalyzer(((t_BrazilianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BrazilianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianAnalyzer_init_(t_BrazilianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::br::BrazilianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BrazilianAnalyzer_get__defaultStopSet(t_BrazilianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/SortedSetDocValuesField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *SortedSetDocValuesField::class$ = NULL;
        jmethodID *SortedSetDocValuesField::mids$ = NULL;
        bool SortedSetDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *SortedSetDocValuesField::TYPE = NULL;

        jclass SortedSetDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/SortedSetDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedSetDocValuesField::SortedSetDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_SortedSetDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedSetDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedSetDocValuesField_init_(t_SortedSetDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SortedSetDocValuesField__methods_[] = {
          DECLARE_METHOD(t_SortedSetDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedSetDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedSetDocValuesField, t_SortedSetDocValuesField, ::org::apache::lucene::document::Field, SortedSetDocValuesField, t_SortedSetDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_SortedSetDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedSetDocValuesField), module, "SortedSetDocValuesField", 0);
        }

        void t_SortedSetDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "class_", make_descriptor(SortedSetDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_SortedSetDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortedSetDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortedSetDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*SortedSetDocValuesField::TYPE)));
        }

        static PyObject *t_SortedSetDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedSetDocValuesField::initializeClass, 1)))
            return NULL;
          return t_SortedSetDocValuesField::wrap_Object(SortedSetDocValuesField(((t_SortedSetDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_SortedSetDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedSetDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedSetDocValuesField_init_(t_SortedSetDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          SortedSetDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SortedSetDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKWidthFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKWidthFilter::class$ = NULL;
          jmethodID *CJKWidthFilter::mids$ = NULL;
          bool CJKWidthFilter::live$ = false;

          jclass CJKWidthFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKWidthFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKWidthFilter::CJKWidthFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean CJKWidthFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKWidthFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKWidthFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKWidthFilter_init_(t_CJKWidthFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKWidthFilter_incrementToken(t_CJKWidthFilter *self, PyObject *args);

          static PyMethodDef t_CJKWidthFilter__methods_[] = {
            DECLARE_METHOD(t_CJKWidthFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKWidthFilter, t_CJKWidthFilter, ::org::apache::lucene::analysis::TokenFilter, CJKWidthFilter, t_CJKWidthFilter_init_, 0, 0, 0, 0, 0);

          void t_CJKWidthFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKWidthFilter), module, "CJKWidthFilter", 0);
          }

          void t_CJKWidthFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKWidthFilter).tp_dict, "class_", make_descriptor(CJKWidthFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilter).tp_dict, "wrapfn_", make_descriptor(t_CJKWidthFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKWidthFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKWidthFilter::initializeClass, 1)))
              return NULL;
            return t_CJKWidthFilter::wrap_Object(CJKWidthFilter(((t_CJKWidthFilter *) arg)->object.this$));
          }
          static PyObject *t_CJKWidthFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKWidthFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKWidthFilter_init_(t_CJKWidthFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            CJKWidthFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = CJKWidthFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKWidthFilter_incrementToken(t_CJKWidthFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CJKWidthFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermsEnum$SeekStatus::class$ = NULL;
        jmethodID *TermsEnum$SeekStatus::mids$ = NULL;
        bool TermsEnum$SeekStatus::live$ = false;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::END = NULL;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::FOUND = NULL;
        TermsEnum$SeekStatus *TermsEnum$SeekStatus::NOT_FOUND = NULL;

        jclass TermsEnum$SeekStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermsEnum$SeekStatus");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_e0b0a2bc] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_values_5e8184a6] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/TermsEnum$SeekStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            END = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "END", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            FOUND = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "FOUND", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            NOT_FOUND = new TermsEnum$SeekStatus(env->getStaticObjectField(cls, "NOT_FOUND", "Lorg/apache/lucene/index/TermsEnum$SeekStatus;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermsEnum$SeekStatus TermsEnum$SeekStatus::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return TermsEnum$SeekStatus(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e0b0a2bc], a0.this$));
        }

        JArray< TermsEnum$SeekStatus > TermsEnum$SeekStatus::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< TermsEnum$SeekStatus >(env->callStaticObjectMethod(cls, mids$[mid_values_5e8184a6]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermsEnum$SeekStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum$SeekStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum$SeekStatus_of_(t_TermsEnum$SeekStatus *self, PyObject *args);
        static PyObject *t_TermsEnum$SeekStatus_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermsEnum$SeekStatus_values(PyTypeObject *type);
        static PyObject *t_TermsEnum$SeekStatus_get__parameters_(t_TermsEnum$SeekStatus *self, void *data);
        static PyGetSetDef t_TermsEnum$SeekStatus__fields_[] = {
          DECLARE_GET_FIELD(t_TermsEnum$SeekStatus, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermsEnum$SeekStatus__methods_[] = {
          DECLARE_METHOD(t_TermsEnum$SeekStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, of_, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum$SeekStatus, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsEnum$SeekStatus, t_TermsEnum$SeekStatus, ::java::lang::Enum, TermsEnum$SeekStatus, abstract_init, 0, 0, t_TermsEnum$SeekStatus__fields_, 0, 0);
        PyObject *t_TermsEnum$SeekStatus::wrap_Object(const TermsEnum$SeekStatus& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermsEnum$SeekStatus::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermsEnum$SeekStatus *self = (t_TermsEnum$SeekStatus *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TermsEnum$SeekStatus::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermsEnum$SeekStatus::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermsEnum$SeekStatus *self = (t_TermsEnum$SeekStatus *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TermsEnum$SeekStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsEnum$SeekStatus), module, "TermsEnum$SeekStatus", 0);
        }

        void t_TermsEnum$SeekStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "class_", make_descriptor(TermsEnum$SeekStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "wrapfn_", make_descriptor(t_TermsEnum$SeekStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TermsEnum$SeekStatus::initializeClass);
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "END", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::END)));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "FOUND", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::FOUND)));
          PyDict_SetItemString(PY_TYPE(TermsEnum$SeekStatus).tp_dict, "NOT_FOUND", make_descriptor(t_TermsEnum$SeekStatus::wrap_Object(*TermsEnum$SeekStatus::NOT_FOUND)));
        }

        static PyObject *t_TermsEnum$SeekStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsEnum$SeekStatus::initializeClass, 1)))
            return NULL;
          return t_TermsEnum$SeekStatus::wrap_Object(TermsEnum$SeekStatus(((t_TermsEnum$SeekStatus *) arg)->object.this$));
        }
        static PyObject *t_TermsEnum$SeekStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsEnum$SeekStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermsEnum$SeekStatus_of_(t_TermsEnum$SeekStatus *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TermsEnum$SeekStatus_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::TermsEnum$SeekStatus::valueOf(a0));
            return t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_TermsEnum$SeekStatus_values(PyTypeObject *type)
        {
          JArray< TermsEnum$SeekStatus > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::TermsEnum$SeekStatus::values());
          return JArray<jobject>(result.this$).wrap(t_TermsEnum$SeekStatus::wrap_jobject);
        }
        static PyObject *t_TermsEnum$SeekStatus_get__parameters_(t_TermsEnum$SeekStatus *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorPipeline.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "java/util/ListIterator.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {

              ::java::lang::Class *QueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *QueryNodeProcessorPipeline::mids$ = NULL;
              bool QueryNodeProcessorPipeline::live$ = false;

              jclass QueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_add_507a7d19] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)Z");
                  mids$[mid_add_f6ca4173] = env->getMethodID(cls, "add", "(ILorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)V");
                  mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_addAll_006cd2b7] = env->getMethodID(cls, "addAll", "(ILjava/util/Collection;)Z");
                  mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                  mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                  mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_get_b9090432] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                  mids$[mid_indexOf_290588f1] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;)I");
                  mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                  mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
                  mids$[mid_lastIndexOf_290588f1] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;)I");
                  mids$[mid_listIterator_b5be4e14] = env->getMethodID(cls, "listIterator", "()Ljava/util/ListIterator;");
                  mids$[mid_listIterator_4145ee6a] = env->getMethodID(cls, "listIterator", "(I)Ljava/util/ListIterator;");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_remove_b9090432] = env->getMethodID(cls, "remove", "(I)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
                  mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
                  mids$[mid_set_adfc5df1] = env->getMethodID(cls, "set", "(ILorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                  mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                  mids$[mid_subList_6bc635fe] = env->getMethodID(cls, "subList", "(II)Ljava/util/List;");
                  mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
                  mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryNodeProcessorPipeline::QueryNodeProcessorPipeline() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              QueryNodeProcessorPipeline::QueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              jboolean QueryNodeProcessorPipeline::add(const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_add_507a7d19], a0.this$);
              }

              void QueryNodeProcessorPipeline::add(jint a0, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_add_f6ca4173], a0, a1.this$);
              }

              jboolean QueryNodeProcessorPipeline::addAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::addAll(jint a0, const ::java::util::Collection & a1) const
              {
                return env->callBooleanMethod(this$, mids$[mid_addAll_006cd2b7], a0, a1.this$);
              }

              void QueryNodeProcessorPipeline::clear() const
              {
                env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
              }

              jboolean QueryNodeProcessorPipeline::contains(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::containsAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::get(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_get_b9090432], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryNodeProcessorPipeline::getQueryConfigHandler() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
              }

              jint QueryNodeProcessorPipeline::indexOf(const ::java::lang::Object & a0) const
              {
                return env->callIntMethod(this$, mids$[mid_indexOf_290588f1], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::isEmpty() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
              }

              ::java::util::Iterator QueryNodeProcessorPipeline::iterator() const
              {
                return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
              }

              jint QueryNodeProcessorPipeline::lastIndexOf(const ::java::lang::Object & a0) const
              {
                return env->callIntMethod(this$, mids$[mid_lastIndexOf_290588f1], a0.this$);
              }

              ::java::util::ListIterator QueryNodeProcessorPipeline::listIterator() const
              {
                return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_b5be4e14]));
              }

              ::java::util::ListIterator QueryNodeProcessorPipeline::listIterator(jint a0) const
              {
                return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_4145ee6a], a0));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode QueryNodeProcessorPipeline::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::remove(jint a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_remove_b9090432], a0));
              }

              jboolean QueryNodeProcessorPipeline::remove(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::removeAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
              }

              jboolean QueryNodeProcessorPipeline::retainAll(const ::java::util::Collection & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
              }

              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryNodeProcessorPipeline::set(jint a0, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_set_adfc5df1], a0, a1.this$));
              }

              void QueryNodeProcessorPipeline::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
              }

              jint QueryNodeProcessorPipeline::size() const
              {
                return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
              }

              ::java::util::List QueryNodeProcessorPipeline::subList(jint a0, jint a1) const
              {
                return ::java::util::List(env->callObjectMethod(this$, mids$[mid_subList_6bc635fe], a0, a1));
              }

              JArray< ::java::lang::Object > QueryNodeProcessorPipeline::toArray() const
              {
                return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
              }

              JArray< ::java::lang::Object > QueryNodeProcessorPipeline::toArray(const JArray< ::java::lang::Object > & a0) const
              {
                return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace processors {
              static PyObject *t_QueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryNodeProcessorPipeline_init_(t_QueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryNodeProcessorPipeline_add(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_addAll(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_clear(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_contains(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_containsAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_get(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_getQueryConfigHandler(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_indexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_isEmpty(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_iterator(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_lastIndexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_listIterator(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_process(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_remove(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_removeAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_retainAll(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_set(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_setQueryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg);
              static PyObject *t_QueryNodeProcessorPipeline_size(t_QueryNodeProcessorPipeline *self);
              static PyObject *t_QueryNodeProcessorPipeline_subList(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_toArray(t_QueryNodeProcessorPipeline *self, PyObject *args);
              static PyObject *t_QueryNodeProcessorPipeline_get__empty(t_QueryNodeProcessorPipeline *self, void *data);
              static PyObject *t_QueryNodeProcessorPipeline_get__queryConfigHandler(t_QueryNodeProcessorPipeline *self, void *data);
              static int t_QueryNodeProcessorPipeline_set__queryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg, void *data);
              static PyGetSetDef t_QueryNodeProcessorPipeline__fields_[] = {
                DECLARE_GET_FIELD(t_QueryNodeProcessorPipeline, empty),
                DECLARE_GETSET_FIELD(t_QueryNodeProcessorPipeline, queryConfigHandler),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_QueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, add, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, addAll, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, clear, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, contains, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, containsAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, get, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, getQueryConfigHandler, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, indexOf, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, isEmpty, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, iterator, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, lastIndexOf, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, listIterator, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, process, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, remove, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, removeAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, retainAll, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, set, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, setQueryConfigHandler, METH_O),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, size, METH_NOARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, subList, METH_VARARGS),
                DECLARE_METHOD(t_QueryNodeProcessorPipeline, toArray, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryNodeProcessorPipeline, t_QueryNodeProcessorPipeline, ::java::lang::Object, QueryNodeProcessorPipeline, t_QueryNodeProcessorPipeline_init_, ((PyObject *(*)(t_QueryNodeProcessorPipeline *)) get_iterator< t_QueryNodeProcessorPipeline >), 0, t_QueryNodeProcessorPipeline__fields_, 0, 0);

              void t_QueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryNodeProcessorPipeline), module, "QueryNodeProcessorPipeline", 0);
              }

              void t_QueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorPipeline).tp_dict, "class_", make_descriptor(QueryNodeProcessorPipeline::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorPipeline).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeProcessorPipeline::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryNodeProcessorPipeline).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_QueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_QueryNodeProcessorPipeline::wrap_Object(QueryNodeProcessorPipeline(((t_QueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_QueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryNodeProcessorPipeline_init_(t_QueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    QueryNodeProcessorPipeline object((jobject) NULL);

                    INT_CALL(object = QueryNodeProcessorPipeline());
                    self->object = object;
                    break;
                  }
                  goto err;
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                    QueryNodeProcessorPipeline object((jobject) NULL);

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                    {
                      INT_CALL(object = QueryNodeProcessorPipeline(a0));
                      self->object = object;
                      break;
                    }
                  }
                 default:
                 err:
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_QueryNodeProcessorPipeline_add(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0))
                    {
                      OBJ_CALL(result = self->object.add(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a1((jobject) NULL);

                    if (!parseArgs(args, "Ik", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.add(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "add", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_addAll(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    ::java::util::Collection a0((jobject) NULL);
                    PyTypeObject **p0;
                    jboolean result;

                    if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                    {
                      OBJ_CALL(result = self->object.addAll(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                  break;
                 case 2:
                  {
                    jint a0;
                    ::java::util::Collection a1((jobject) NULL);
                    PyTypeObject **p1;
                    jboolean result;

                    if (!parseArgs(args, "IK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
                    {
                      OBJ_CALL(result = self->object.addAll(a0, a1));
                      Py_RETURN_BOOL(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "addAll", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_clear(t_QueryNodeProcessorPipeline *self)
              {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
              }

              static PyObject *t_QueryNodeProcessorPipeline_contains(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.contains(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "contains", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_containsAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.containsAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "containsAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_get(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "get", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_getQueryConfigHandler(t_QueryNodeProcessorPipeline *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
                OBJ_CALL(result = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_indexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jint result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.indexOf(a0));
                  return PyInt_FromLong((long) result);
                }

                PyErr_SetArgsError((PyObject *) self, "indexOf", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_isEmpty(t_QueryNodeProcessorPipeline *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isEmpty());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_iterator(t_QueryNodeProcessorPipeline *self)
              {
                ::java::util::Iterator result((jobject) NULL);
                OBJ_CALL(result = self->object.iterator());
                return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
              }

              static PyObject *t_QueryNodeProcessorPipeline_lastIndexOf(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::lang::Object a0((jobject) NULL);
                jint result;

                if (!parseArg(arg, "o", &a0))
                {
                  OBJ_CALL(result = self->object.lastIndexOf(a0));
                  return PyInt_FromLong((long) result);
                }

                PyErr_SetArgsError((PyObject *) self, "lastIndexOf", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_listIterator(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    ::java::util::ListIterator result((jobject) NULL);
                    OBJ_CALL(result = self->object.listIterator());
                    return ::java::util::t_ListIterator::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                  }
                  break;
                 case 1:
                  {
                    jint a0;
                    ::java::util::ListIterator result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.listIterator(a0));
                      return ::java::util::t_ListIterator::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "listIterator", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_process(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "process", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_remove(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 1:
                  {
                    jint a0;
                    ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                      OBJ_CALL(result = self->object.remove(a0));
                      return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                    }
                  }
                  {
                    ::java::lang::Object a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "o", &a0))
                    {
                      OBJ_CALL(result = self->object.remove(a0));
                      Py_RETURN_BOOL(result);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "remove", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_removeAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.removeAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "removeAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_retainAll(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean result;

                if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.retainAll(a0));
                  Py_RETURN_BOOL(result);
                }

                PyErr_SetArgsError((PyObject *) self, "retainAll", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_set(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                jint a0;
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);

                if (!parseArgs(args, "Ik", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.set(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "set", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_setQueryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setQueryConfigHandler(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_size(t_QueryNodeProcessorPipeline *self)
              {
                jint result;
                OBJ_CALL(result = self->object.size());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_QueryNodeProcessorPipeline_subList(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                jint a0;
                jint a1;
                ::java::util::List result((jobject) NULL);

                if (!parseArgs(args, "II", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.subList(a0, a1));
                  return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::flexible::core::processors::PY_TYPE(QueryNodeProcessor));
                }

                PyErr_SetArgsError((PyObject *) self, "subList", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_toArray(t_QueryNodeProcessorPipeline *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 0:
                  {
                    JArray< ::java::lang::Object > result((jobject) NULL);
                    OBJ_CALL(result = self->object.toArray());
                    return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                  }
                  break;
                 case 1:
                  {
                    JArray< ::java::lang::Object > a0((jobject) NULL);
                    JArray< ::java::lang::Object > result((jobject) NULL);

                    if (!parseArgs(args, "[o", &a0))
                    {
                      OBJ_CALL(result = self->object.toArray(a0));
                      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "toArray", args);
                return NULL;
              }

              static PyObject *t_QueryNodeProcessorPipeline_get__empty(t_QueryNodeProcessorPipeline *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isEmpty());
                Py_RETURN_BOOL(value);
              }

              static PyObject *t_QueryNodeProcessorPipeline_get__queryConfigHandler(t_QueryNodeProcessorPipeline *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                OBJ_CALL(value = self->object.getQueryConfigHandler());
                return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
              }
              static int t_QueryNodeProcessorPipeline_set__queryConfigHandler(t_QueryNodeProcessorPipeline *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                  {
                    INT_CALL(self->object.setQueryConfigHandler(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianStemFilter::class$ = NULL;
          jmethodID *GalicianStemFilter::mids$ = NULL;
          bool GalicianStemFilter::live$ = false;

          jclass GalicianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianStemFilter::GalicianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GalicianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianStemFilter_init_(t_GalicianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianStemFilter_incrementToken(t_GalicianStemFilter *self, PyObject *args);

          static PyMethodDef t_GalicianStemFilter__methods_[] = {
            DECLARE_METHOD(t_GalicianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianStemFilter, t_GalicianStemFilter, ::org::apache::lucene::analysis::TokenFilter, GalicianStemFilter, t_GalicianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GalicianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianStemFilter), module, "GalicianStemFilter", 0);
          }

          void t_GalicianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianStemFilter).tp_dict, "class_", make_descriptor(GalicianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GalicianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianStemFilter::initializeClass, 1)))
              return NULL;
            return t_GalicianStemFilter::wrap_Object(GalicianStemFilter(((t_GalicianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GalicianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianStemFilter_init_(t_GalicianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GalicianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GalicianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianStemFilter_incrementToken(t_GalicianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GalicianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$additive_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$additive_return::class$ = NULL;
          jmethodID *JavascriptParser$additive_return::mids$ = NULL;
          bool JavascriptParser$additive_return::live$ = false;

          jclass JavascriptParser$additive_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$additive_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$additive_return::JavascriptParser$additive_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$additive_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$additive_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$additive_return_init_(t_JavascriptParser$additive_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$additive_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$additive_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$additive_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$additive_return, t_JavascriptParser$additive_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$additive_return, t_JavascriptParser$additive_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$additive_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$additive_return), module, "JavascriptParser$additive_return", 0);
          }

          void t_JavascriptParser$additive_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$additive_return).tp_dict, "class_", make_descriptor(JavascriptParser$additive_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$additive_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$additive_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$additive_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$additive_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$additive_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$additive_return::wrap_Object(JavascriptParser$additive_return(((t_JavascriptParser$additive_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$additive_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$additive_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$additive_return_init_(t_JavascriptParser$additive_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$additive_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$additive_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ScaleFloatFunction.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ScaleFloatFunction::class$ = NULL;
            jmethodID *ScaleFloatFunction::mids$ = NULL;
            bool ScaleFloatFunction::live$ = false;

            jclass ScaleFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ScaleFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_bdda54b0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FF)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ScaleFloatFunction::ScaleFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_bdda54b0, a0.this$, a1, a2)) {}

            void ScaleFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String ScaleFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ScaleFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ScaleFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ScaleFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ScaleFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ScaleFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ScaleFloatFunction_init_(t_ScaleFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ScaleFloatFunction_createWeight(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_description(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_equals(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_getValues(t_ScaleFloatFunction *self, PyObject *args);
            static PyObject *t_ScaleFloatFunction_hashCode(t_ScaleFloatFunction *self, PyObject *args);

            static PyMethodDef t_ScaleFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ScaleFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ScaleFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ScaleFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ScaleFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ScaleFloatFunction, t_ScaleFloatFunction, ::org::apache::lucene::queries::function::ValueSource, ScaleFloatFunction, t_ScaleFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_ScaleFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ScaleFloatFunction), module, "ScaleFloatFunction", 0);
            }

            void t_ScaleFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ScaleFloatFunction).tp_dict, "class_", make_descriptor(ScaleFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ScaleFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_ScaleFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ScaleFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ScaleFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ScaleFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ScaleFloatFunction::wrap_Object(ScaleFloatFunction(((t_ScaleFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ScaleFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ScaleFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ScaleFloatFunction_init_(t_ScaleFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              ScaleFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = ScaleFloatFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ScaleFloatFunction_createWeight(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_description(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_equals(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_getValues(t_ScaleFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ScaleFloatFunction_hashCode(t_ScaleFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ScaleFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonIterator.h"
#include "java/lang/Throwable.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonIterator::class$ = NULL;
        jmethodID *PythonIterator::mids$ = NULL;
        bool PythonIterator::live$ = false;

        jclass PythonIterator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonIterator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
            mids$[mid_next_846352c3] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIterator::PythonIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIterator::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIterator::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIterator::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        void PythonIterator::remove() const
        {
          env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIterator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIterator_init_(t_PythonIterator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIterator_finalize(t_PythonIterator *self);
        static PyObject *t_PythonIterator_pythonExtension(t_PythonIterator *self, PyObject *args);
        static PyObject *t_PythonIterator_remove(t_PythonIterator *self);
        static jboolean JNICALL t_PythonIterator_hasNext0(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonIterator_next1(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonIterator_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonIterator_get__self(t_PythonIterator *self, void *data);
        static PyGetSetDef t_PythonIterator__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIterator, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIterator__methods_[] = {
          DECLARE_METHOD(t_PythonIterator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIterator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIterator, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIterator, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonIterator, remove, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIterator, t_PythonIterator, ::java::lang::Object, PythonIterator, t_PythonIterator_init_, PyObject_SelfIter, get_extension_next, t_PythonIterator__fields_, 0, 0);

        void t_PythonIterator::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIterator), module, "PythonIterator", 1);
        }

        void t_PythonIterator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIterator).tp_dict, "class_", make_descriptor(PythonIterator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIterator).tp_dict, "wrapfn_", make_descriptor(t_PythonIterator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIterator::initializeClass);
          JNINativeMethod methods[] = {
            { "hasNext", "()Z", (void *) t_PythonIterator_hasNext0 },
            { "next", "()Ljava/lang/Object;", (void *) t_PythonIterator_next1 },
            { "pythonDecRef", "()V", (void *) t_PythonIterator_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIterator::initializeClass, 1)))
            return NULL;
          return t_PythonIterator::wrap_Object(PythonIterator(((t_PythonIterator *) arg)->object.this$));
        }
        static PyObject *t_PythonIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIterator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIterator_init_(t_PythonIterator *self, PyObject *args, PyObject *kwds)
        {
          PythonIterator object((jobject) NULL);

          INT_CALL(object = PythonIterator());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIterator_finalize(t_PythonIterator *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIterator_pythonExtension(t_PythonIterator *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonIterator_remove(t_PythonIterator *self)
        {
          OBJ_CALL(self->object.remove());
          Py_RETURN_NONE;
        }

        static jboolean JNICALL t_PythonIterator_hasNext0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "hasNext", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("hasNext", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonIterator_next1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "next", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("next", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonIterator_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIterator::mids$[PythonIterator::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonIterator_get__self(t_PythonIterator *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MappingMultiDocsEnum.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MultiDocsEnum$EnumWithSlice.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MappingMultiDocsEnum::class$ = NULL;
        jmethodID *MappingMultiDocsEnum::mids$ = NULL;
        bool MappingMultiDocsEnum::live$ = false;

        jclass MappingMultiDocsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MappingMultiDocsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getSubs_1bdfab69] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_setMergeState_fd0cfdf4] = env->getMethodID(cls, "setMergeState", "(Lorg/apache/lucene/index/MergeState;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MappingMultiDocsEnum::MappingMultiDocsEnum() : ::org::apache::lucene::index::DocsEnum(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint MappingMultiDocsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jlong MappingMultiDocsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MappingMultiDocsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MappingMultiDocsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MappingMultiDocsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > MappingMultiDocsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_1bdfab69]));
        }

        jint MappingMultiDocsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        void MappingMultiDocsEnum::setMergeState(const ::org::apache::lucene::index::MergeState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMergeState_fd0cfdf4], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MappingMultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MappingMultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MappingMultiDocsEnum_init_(t_MappingMultiDocsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MappingMultiDocsEnum_advance(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_cost(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_docID(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_freq(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_getNumSubs(t_MappingMultiDocsEnum *self);
        static PyObject *t_MappingMultiDocsEnum_getSubs(t_MappingMultiDocsEnum *self);
        static PyObject *t_MappingMultiDocsEnum_nextDoc(t_MappingMultiDocsEnum *self, PyObject *args);
        static PyObject *t_MappingMultiDocsEnum_setMergeState(t_MappingMultiDocsEnum *self, PyObject *arg);
        static int t_MappingMultiDocsEnum_set__mergeState(t_MappingMultiDocsEnum *self, PyObject *arg, void *data);
        static PyObject *t_MappingMultiDocsEnum_get__numSubs(t_MappingMultiDocsEnum *self, void *data);
        static PyObject *t_MappingMultiDocsEnum_get__subs(t_MappingMultiDocsEnum *self, void *data);
        static PyGetSetDef t_MappingMultiDocsEnum__fields_[] = {
          DECLARE_SET_FIELD(t_MappingMultiDocsEnum, mergeState),
          DECLARE_GET_FIELD(t_MappingMultiDocsEnum, numSubs),
          DECLARE_GET_FIELD(t_MappingMultiDocsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MappingMultiDocsEnum__methods_[] = {
          DECLARE_METHOD(t_MappingMultiDocsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MappingMultiDocsEnum, setMergeState, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MappingMultiDocsEnum, t_MappingMultiDocsEnum, ::org::apache::lucene::index::DocsEnum, MappingMultiDocsEnum, t_MappingMultiDocsEnum_init_, 0, 0, t_MappingMultiDocsEnum__fields_, 0, 0);

        void t_MappingMultiDocsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MappingMultiDocsEnum), module, "MappingMultiDocsEnum", 0);
        }

        void t_MappingMultiDocsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsEnum).tp_dict, "class_", make_descriptor(MappingMultiDocsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsEnum).tp_dict, "wrapfn_", make_descriptor(t_MappingMultiDocsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MappingMultiDocsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MappingMultiDocsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MappingMultiDocsEnum::initializeClass, 1)))
            return NULL;
          return t_MappingMultiDocsEnum::wrap_Object(MappingMultiDocsEnum(((t_MappingMultiDocsEnum *) arg)->object.this$));
        }
        static PyObject *t_MappingMultiDocsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MappingMultiDocsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MappingMultiDocsEnum_init_(t_MappingMultiDocsEnum *self, PyObject *args, PyObject *kwds)
        {
          MappingMultiDocsEnum object((jobject) NULL);

          INT_CALL(object = MappingMultiDocsEnum());
          self->object = object;

          return 0;
        }

        static PyObject *t_MappingMultiDocsEnum_advance(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_cost(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_docID(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_freq(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_getNumSubs(t_MappingMultiDocsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MappingMultiDocsEnum_getSubs(t_MappingMultiDocsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MappingMultiDocsEnum_nextDoc(t_MappingMultiDocsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MappingMultiDocsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MappingMultiDocsEnum_setMergeState(t_MappingMultiDocsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setMergeState(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMergeState", arg);
          return NULL;
        }

        static int t_MappingMultiDocsEnum_set__mergeState(t_MappingMultiDocsEnum *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::MergeState value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::MergeState::initializeClass, &value))
            {
              INT_CALL(self->object.setMergeState(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mergeState", arg);
          return -1;
        }

        static PyObject *t_MappingMultiDocsEnum_get__numSubs(t_MappingMultiDocsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MappingMultiDocsEnum_get__subs(t_MappingMultiDocsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$NumericComparator.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$NumericComparator::class$ = NULL;
        jmethodID *FieldComparator$NumericComparator::mids$ = NULL;
        bool FieldComparator$NumericComparator::live$ = false;

        jclass FieldComparator$NumericComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$NumericComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_158d1296] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Number;)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$NumericComparator::FieldComparator$NumericComparator(const ::java::lang::String & a0, const ::java::lang::Number & a1) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_158d1296, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::FieldComparator FieldComparator$NumericComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$NumericComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$NumericComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$NumericComparator_of_(t_FieldComparator$NumericComparator *self, PyObject *args);
        static int t_FieldComparator$NumericComparator_init_(t_FieldComparator$NumericComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$NumericComparator_setNextReader(t_FieldComparator$NumericComparator *self, PyObject *args);
        static int t_FieldComparator$NumericComparator_set__nextReader(t_FieldComparator$NumericComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$NumericComparator_get__parameters_(t_FieldComparator$NumericComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$NumericComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$NumericComparator, nextReader),
          DECLARE_GET_FIELD(t_FieldComparator$NumericComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$NumericComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$NumericComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$NumericComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$NumericComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$NumericComparator, setNextReader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$NumericComparator, t_FieldComparator$NumericComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$NumericComparator, t_FieldComparator$NumericComparator_init_, 0, 0, t_FieldComparator$NumericComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$NumericComparator::wrap_Object(const FieldComparator$NumericComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$NumericComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$NumericComparator *self = (t_FieldComparator$NumericComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$NumericComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$NumericComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$NumericComparator *self = (t_FieldComparator$NumericComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$NumericComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$NumericComparator), module, "FieldComparator$NumericComparator", 0);
        }

        void t_FieldComparator$NumericComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$NumericComparator).tp_dict, "class_", make_descriptor(FieldComparator$NumericComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$NumericComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$NumericComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$NumericComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$NumericComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$NumericComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$NumericComparator::wrap_Object(FieldComparator$NumericComparator(((t_FieldComparator$NumericComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$NumericComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$NumericComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$NumericComparator_of_(t_FieldComparator$NumericComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$NumericComparator_init_(t_FieldComparator$NumericComparator *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Number a1((jobject) NULL);
          FieldComparator$NumericComparator object((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Number), &a0, &a1))
          {
            INT_CALL(object = FieldComparator$NumericComparator(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$NumericComparator_setNextReader(t_FieldComparator$NumericComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, self->parameters[0]);
          }

          return callSuper(&PY_TYPE(FieldComparator$NumericComparator), (PyObject *) self, "setNextReader", args, 2);
        }
        static PyObject *t_FieldComparator$NumericComparator_get__parameters_(t_FieldComparator$NumericComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$NumericComparator_set__nextReader(t_FieldComparator$NumericComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *SegmentInfoWriter::class$ = NULL;
        jmethodID *SegmentInfoWriter::mids$ = NULL;
        bool SegmentInfoWriter::live$ = false;

        jclass SegmentInfoWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/SegmentInfoWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_write_3589180f] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void SegmentInfoWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_write_3589180f], a0.this$, a1.this$, a2.this$, a3.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfoWriter_write(t_SegmentInfoWriter *self, PyObject *args);

        static PyMethodDef t_SegmentInfoWriter__methods_[] = {
          DECLARE_METHOD(t_SegmentInfoWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfoWriter, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfoWriter, t_SegmentInfoWriter, ::java::lang::Object, SegmentInfoWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_SegmentInfoWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfoWriter), module, "SegmentInfoWriter", 0);
        }

        void t_SegmentInfoWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfoWriter).tp_dict, "class_", make_descriptor(SegmentInfoWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfoWriter).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfoWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfoWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfoWriter::initializeClass, 1)))
            return NULL;
          return t_SegmentInfoWriter::wrap_Object(SegmentInfoWriter(((t_SegmentInfoWriter *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfoWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SegmentInfoWriter_write(t_SegmentInfoWriter *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
          ::org::apache::lucene::store::IOContext a3((jobject) NULL);

          if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.write(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/NormValueSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *NormValueSource::class$ = NULL;
            jmethodID *NormValueSource::mids$ = NULL;
            bool NormValueSource::live$ = false;

            jclass NormValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/NormValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            NormValueSource::NormValueSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            void NormValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String NormValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean NormValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues NormValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint NormValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String NormValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_NormValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NormValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_NormValueSource_init_(t_NormValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_NormValueSource_createWeight(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_description(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_equals(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_getValues(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_hashCode(t_NormValueSource *self, PyObject *args);
            static PyObject *t_NormValueSource_name(t_NormValueSource *self);

            static PyMethodDef t_NormValueSource__methods_[] = {
              DECLARE_METHOD(t_NormValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NormValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NormValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_NormValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NormValueSource, t_NormValueSource, ::org::apache::lucene::queries::function::ValueSource, NormValueSource, t_NormValueSource_init_, 0, 0, 0, 0, 0);

            void t_NormValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(NormValueSource), module, "NormValueSource", 0);
            }

            void t_NormValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NormValueSource).tp_dict, "class_", make_descriptor(NormValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NormValueSource).tp_dict, "wrapfn_", make_descriptor(t_NormValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NormValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NormValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NormValueSource::initializeClass, 1)))
                return NULL;
              return t_NormValueSource::wrap_Object(NormValueSource(((t_NormValueSource *) arg)->object.this$));
            }
            static PyObject *t_NormValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NormValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_NormValueSource_init_(t_NormValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              NormValueSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = NormValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_NormValueSource_createWeight(t_NormValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_NormValueSource_description(t_NormValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_NormValueSource_equals(t_NormValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_NormValueSource_getValues(t_NormValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_NormValueSource_hashCode(t_NormValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(NormValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_NormValueSource_name(t_NormValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "java/lang/String.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeParseException::class$ = NULL;
            jmethodID *QueryNodeParseException::mids$ = NULL;
            bool QueryNodeParseException::live$ = false;

            jclass QueryNodeParseException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeParseException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_41dcc0ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getErrorToken_14c7b5c5] = env->getMethodID(cls, "getErrorToken", "()Ljava/lang/String;");
                mids$[mid_getQuery_e0adba2f] = env->getMethodID(cls, "getQuery", "()Ljava/lang/CharSequence;");
                mids$[mid_setNonLocalizedMessage_1dde9d59] = env->getMethodID(cls, "setNonLocalizedMessage", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_setQuery_a8afc64a] = env->getMethodID(cls, "setQuery", "(Ljava/lang/CharSequence;)V");
                mids$[mid_setErrorToken_5fdc3f48] = env->getMethodID(cls, "setErrorToken", "(Ljava/lang/String;)V");
                mids$[mid_setBeginLine_39c7bd3c] = env->getMethodID(cls, "setBeginLine", "(I)V");
                mids$[mid_setBeginColumn_39c7bd3c] = env->getMethodID(cls, "setBeginColumn", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeParseException::QueryNodeParseException(const ::java::lang::Throwable & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

            QueryNodeParseException::QueryNodeParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

            QueryNodeParseException::QueryNodeParseException(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::org::apache::lucene::queryparser::flexible::core::QueryNodeException(env->newObject(initializeClass, &mids$, mid_init$_41dcc0ed, a0.this$, a1.this$)) {}

            jint QueryNodeParseException::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
            }

            jint QueryNodeParseException::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
            }

            ::java::lang::String QueryNodeParseException::getErrorToken() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getErrorToken_14c7b5c5]));
            }

            ::java::lang::CharSequence QueryNodeParseException::getQuery() const
            {
              return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getQuery_e0adba2f]));
            }

            void QueryNodeParseException::setNonLocalizedMessage(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNonLocalizedMessage_1dde9d59], a0.this$);
            }

            void QueryNodeParseException::setQuery(const ::java::lang::CharSequence & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQuery_a8afc64a], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeParseException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeParseException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeParseException_init_(t_QueryNodeParseException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeParseException_getBeginColumn(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getBeginLine(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getErrorToken(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_getQuery(t_QueryNodeParseException *self);
            static PyObject *t_QueryNodeParseException_setNonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg);
            static PyObject *t_QueryNodeParseException_setQuery(t_QueryNodeParseException *self, PyObject *arg);
            static PyObject *t_QueryNodeParseException_get__beginColumn(t_QueryNodeParseException *self, void *data);
            static PyObject *t_QueryNodeParseException_get__beginLine(t_QueryNodeParseException *self, void *data);
            static PyObject *t_QueryNodeParseException_get__errorToken(t_QueryNodeParseException *self, void *data);
            static int t_QueryNodeParseException_set__nonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg, void *data);
            static PyObject *t_QueryNodeParseException_get__query(t_QueryNodeParseException *self, void *data);
            static int t_QueryNodeParseException_set__query(t_QueryNodeParseException *self, PyObject *arg, void *data);
            static PyGetSetDef t_QueryNodeParseException__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeParseException, beginColumn),
              DECLARE_GET_FIELD(t_QueryNodeParseException, beginLine),
              DECLARE_GET_FIELD(t_QueryNodeParseException, errorToken),
              DECLARE_SET_FIELD(t_QueryNodeParseException, nonLocalizedMessage),
              DECLARE_GETSET_FIELD(t_QueryNodeParseException, query),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeParseException__methods_[] = {
              DECLARE_METHOD(t_QueryNodeParseException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeParseException, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeParseException, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getErrorToken, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, getQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryNodeParseException, setNonLocalizedMessage, METH_O),
              DECLARE_METHOD(t_QueryNodeParseException, setQuery, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryNodeParseException, t_QueryNodeParseException, ::org::apache::lucene::queryparser::flexible::core::QueryNodeException, QueryNodeParseException, t_QueryNodeParseException_init_, 0, 0, t_QueryNodeParseException__fields_, 0, 0);

            void t_QueryNodeParseException::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeParseException), module, "QueryNodeParseException", 0);
            }

            void t_QueryNodeParseException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryNodeParseException).tp_dict, "class_", make_descriptor(QueryNodeParseException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryNodeParseException).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeParseException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryNodeParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeParseException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeParseException::initializeClass, 1)))
                return NULL;
              return t_QueryNodeParseException::wrap_Object(QueryNodeParseException(((t_QueryNodeParseException *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeParseException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeParseException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeParseException_init_(t_QueryNodeParseException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeParseException object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeParseException(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeParseException_getBeginColumn(t_QueryNodeParseException *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_QueryNodeParseException_getBeginLine(t_QueryNodeParseException *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_QueryNodeParseException_getErrorToken(t_QueryNodeParseException *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getErrorToken());
              return j2p(result);
            }

            static PyObject *t_QueryNodeParseException_getQuery(t_QueryNodeParseException *self)
            {
              ::java::lang::CharSequence result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuery());
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            static PyObject *t_QueryNodeParseException_setNonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNonLocalizedMessage(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setNonLocalizedMessage", arg);
              return NULL;
            }

            static PyObject *t_QueryNodeParseException_setQuery(t_QueryNodeParseException *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(self->object.setQuery(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQuery", arg);
              return NULL;
            }

            static PyObject *t_QueryNodeParseException_get__beginColumn(t_QueryNodeParseException *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_QueryNodeParseException_get__beginLine(t_QueryNodeParseException *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_QueryNodeParseException_get__errorToken(t_QueryNodeParseException *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getErrorToken());
              return j2p(value);
            }

            static int t_QueryNodeParseException_set__nonLocalizedMessage(t_QueryNodeParseException *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &value))
                {
                  INT_CALL(self->object.setNonLocalizedMessage(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nonLocalizedMessage", arg);
              return -1;
            }

            static PyObject *t_QueryNodeParseException_get__query(t_QueryNodeParseException *self, void *data)
            {
              ::java::lang::CharSequence value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuery());
              return ::java::lang::t_CharSequence::wrap_Object(value);
            }
            static int t_QueryNodeParseException_set__query(t_QueryNodeParseException *self, PyObject *arg, void *data)
            {
              {
                ::java::lang::CharSequence value((jobject) NULL);
                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                {
                  INT_CALL(self->object.setQuery(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "query", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/suggest/fst/FSTCompletion$Completion.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {

            ::java::lang::Class *FSTCompletion::class$ = NULL;
            jmethodID *FSTCompletion::mids$ = NULL;
            bool FSTCompletion::live$ = false;
            jint FSTCompletion::DEFAULT_BUCKETS = (jint) 0;

            jclass FSTCompletion::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/fst/FSTCompletion");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d454d65c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
                mids$[mid_init$_a36157b6] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;ZZ)V");
                mids$[mid_getBucket_a8afc655] = env->getMethodID(cls, "getBucket", "(Ljava/lang/CharSequence;)I");
                mids$[mid_getBucketCount_54c6a179] = env->getMethodID(cls, "getBucketCount", "()I");
                mids$[mid_getFST_917b3659] = env->getMethodID(cls, "getFST", "()Lorg/apache/lucene/util/fst/FST;");
                mids$[mid_lookup_560b361c] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;I)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                DEFAULT_BUCKETS = env->getStaticIntField(cls, "DEFAULT_BUCKETS");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FSTCompletion::FSTCompletion(const ::org::apache::lucene::util::fst::FST & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d454d65c, a0.this$)) {}

            FSTCompletion::FSTCompletion(const ::org::apache::lucene::util::fst::FST & a0, jboolean a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a36157b6, a0.this$, a1, a2)) {}

            jint FSTCompletion::getBucket(const ::java::lang::CharSequence & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getBucket_a8afc655], a0.this$);
            }

            jint FSTCompletion::getBucketCount() const
            {
              return env->callIntMethod(this$, mids$[mid_getBucketCount_54c6a179]);
            }

            ::org::apache::lucene::util::fst::FST FSTCompletion::getFST() const
            {
              return ::org::apache::lucene::util::fst::FST(env->callObjectMethod(this$, mids$[mid_getFST_917b3659]));
            }

            ::java::util::List FSTCompletion::lookup(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_560b361c], a0.this$, a1));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace fst {
            static PyObject *t_FSTCompletion_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FSTCompletion_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FSTCompletion_init_(t_FSTCompletion *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FSTCompletion_getBucket(t_FSTCompletion *self, PyObject *arg);
            static PyObject *t_FSTCompletion_getBucketCount(t_FSTCompletion *self);
            static PyObject *t_FSTCompletion_getFST(t_FSTCompletion *self);
            static PyObject *t_FSTCompletion_lookup(t_FSTCompletion *self, PyObject *args);
            static PyObject *t_FSTCompletion_get__bucketCount(t_FSTCompletion *self, void *data);
            static PyObject *t_FSTCompletion_get__fST(t_FSTCompletion *self, void *data);
            static PyGetSetDef t_FSTCompletion__fields_[] = {
              DECLARE_GET_FIELD(t_FSTCompletion, bucketCount),
              DECLARE_GET_FIELD(t_FSTCompletion, fST),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FSTCompletion__methods_[] = {
              DECLARE_METHOD(t_FSTCompletion, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FSTCompletion, getBucket, METH_O),
              DECLARE_METHOD(t_FSTCompletion, getBucketCount, METH_NOARGS),
              DECLARE_METHOD(t_FSTCompletion, getFST, METH_NOARGS),
              DECLARE_METHOD(t_FSTCompletion, lookup, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FSTCompletion, t_FSTCompletion, ::java::lang::Object, FSTCompletion, t_FSTCompletion_init_, 0, 0, t_FSTCompletion__fields_, 0, 0);

            void t_FSTCompletion::install(PyObject *module)
            {
              installType(&PY_TYPE(FSTCompletion), module, "FSTCompletion", 0);
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "Completion", make_descriptor(&PY_TYPE(FSTCompletion$Completion)));
            }

            void t_FSTCompletion::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "class_", make_descriptor(FSTCompletion::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "wrapfn_", make_descriptor(t_FSTCompletion::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(FSTCompletion::initializeClass);
              PyDict_SetItemString(PY_TYPE(FSTCompletion).tp_dict, "DEFAULT_BUCKETS", make_descriptor(FSTCompletion::DEFAULT_BUCKETS));
            }

            static PyObject *t_FSTCompletion_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FSTCompletion::initializeClass, 1)))
                return NULL;
              return t_FSTCompletion::wrap_Object(FSTCompletion(((t_FSTCompletion *) arg)->object.this$));
            }
            static PyObject *t_FSTCompletion_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FSTCompletion::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FSTCompletion_init_(t_FSTCompletion *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                  PyTypeObject **p0;
                  FSTCompletion object((jobject) NULL);

                  if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
                  {
                    INT_CALL(object = FSTCompletion(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
                  PyTypeObject **p0;
                  jboolean a1;
                  jboolean a2;
                  FSTCompletion object((jobject) NULL);

                  if (!parseArgs(args, "KZZ", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_, &a1, &a2))
                  {
                    INT_CALL(object = FSTCompletion(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FSTCompletion_getBucket(t_FSTCompletion *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.getBucket(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getBucket", arg);
              return NULL;
            }

            static PyObject *t_FSTCompletion_getBucketCount(t_FSTCompletion *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBucketCount());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FSTCompletion_getFST(t_FSTCompletion *self)
            {
              ::org::apache::lucene::util::fst::FST result((jobject) NULL);
              OBJ_CALL(result = self->object.getFST());
              return ::org::apache::lucene::util::fst::t_FST::wrap_Object(result, &::java::lang::PY_TYPE(Object));
            }

            static PyObject *t_FSTCompletion_lookup(t_FSTCompletion *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              jint a1;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::fst::PY_TYPE(FSTCompletion$Completion));
              }

              PyErr_SetArgsError((PyObject *) self, "lookup", args);
              return NULL;
            }

            static PyObject *t_FSTCompletion_get__bucketCount(t_FSTCompletion *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBucketCount());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FSTCompletion_get__fST(t_FSTCompletion *self, void *data)
            {
              ::org::apache::lucene::util::fst::FST value((jobject) NULL);
              OBJ_CALL(value = self->object.getFST());
              return ::org::apache::lucene::util::fst::t_FST::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/TurkishAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *TurkishAnalyzer::class$ = NULL;
          jmethodID *TurkishAnalyzer::mids$ = NULL;
          bool TurkishAnalyzer::live$ = false;
          ::java::lang::String *TurkishAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass TurkishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/TurkishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          TurkishAnalyzer::TurkishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet TurkishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_TurkishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TurkishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TurkishAnalyzer_init_(t_TurkishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TurkishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_TurkishAnalyzer_get__defaultStopSet(t_TurkishAnalyzer *self, void *data);
          static PyGetSetDef t_TurkishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_TurkishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TurkishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_TurkishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TurkishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TurkishAnalyzer, t_TurkishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, TurkishAnalyzer, t_TurkishAnalyzer_init_, 0, 0, t_TurkishAnalyzer__fields_, 0, 0);

          void t_TurkishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(TurkishAnalyzer), module, "TurkishAnalyzer", 0);
          }

          void t_TurkishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "class_", make_descriptor(TurkishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_TurkishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TurkishAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(TurkishAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*TurkishAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_TurkishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TurkishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_TurkishAnalyzer::wrap_Object(TurkishAnalyzer(((t_TurkishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_TurkishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TurkishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TurkishAnalyzer_init_(t_TurkishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                TurkishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = TurkishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TurkishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::tr::TurkishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_TurkishAnalyzer_get__defaultStopSet(t_TurkishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/xml/sax/helpers/DefaultHandler.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace xml {
    namespace sax {
      namespace helpers {

        ::java::lang::Class *DefaultHandler::class$ = NULL;
        jmethodID *DefaultHandler::mids$ = NULL;
        bool DefaultHandler::live$ = false;

        jclass DefaultHandler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/xml/sax/helpers/DefaultHandler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_characters_6f0bb356] = env->getMethodID(cls, "characters", "([CII)V");
            mids$[mid_endDocument_54c6a166] = env->getMethodID(cls, "endDocument", "()V");
            mids$[mid_endElement_9c119564] = env->getMethodID(cls, "endElement", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_endPrefixMapping_5fdc3f48] = env->getMethodID(cls, "endPrefixMapping", "(Ljava/lang/String;)V");
            mids$[mid_ignorableWhitespace_6f0bb356] = env->getMethodID(cls, "ignorableWhitespace", "([CII)V");
            mids$[mid_notationDecl_9c119564] = env->getMethodID(cls, "notationDecl", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_processingInstruction_4a264742] = env->getMethodID(cls, "processingInstruction", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_skippedEntity_5fdc3f48] = env->getMethodID(cls, "skippedEntity", "(Ljava/lang/String;)V");
            mids$[mid_startDocument_54c6a166] = env->getMethodID(cls, "startDocument", "()V");
            mids$[mid_startPrefixMapping_4a264742] = env->getMethodID(cls, "startPrefixMapping", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_unparsedEntityDecl_3202cd2e] = env->getMethodID(cls, "unparsedEntityDecl", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DefaultHandler::DefaultHandler() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void DefaultHandler::characters(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_characters_6f0bb356], a0.this$, a1, a2);
        }

        void DefaultHandler::endDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_endDocument_54c6a166]);
        }

        void DefaultHandler::endElement(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_endElement_9c119564], a0.this$, a1.this$, a2.this$);
        }

        void DefaultHandler::endPrefixMapping(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_endPrefixMapping_5fdc3f48], a0.this$);
        }

        void DefaultHandler::ignorableWhitespace(const JArray< jchar > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_ignorableWhitespace_6f0bb356], a0.this$, a1, a2);
        }

        void DefaultHandler::notationDecl(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_notationDecl_9c119564], a0.this$, a1.this$, a2.this$);
        }

        void DefaultHandler::processingInstruction(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_processingInstruction_4a264742], a0.this$, a1.this$);
        }

        void DefaultHandler::skippedEntity(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skippedEntity_5fdc3f48], a0.this$);
        }

        void DefaultHandler::startDocument() const
        {
          env->callVoidMethod(this$, mids$[mid_startDocument_54c6a166]);
        }

        void DefaultHandler::startPrefixMapping(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startPrefixMapping_4a264742], a0.this$, a1.this$);
        }

        void DefaultHandler::unparsedEntityDecl(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_unparsedEntityDecl_3202cd2e], a0.this$, a1.this$, a2.this$, a3.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace xml {
    namespace sax {
      namespace helpers {
        static PyObject *t_DefaultHandler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DefaultHandler_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DefaultHandler_init_(t_DefaultHandler *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DefaultHandler_characters(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_endDocument(t_DefaultHandler *self);
        static PyObject *t_DefaultHandler_endElement(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_endPrefixMapping(t_DefaultHandler *self, PyObject *arg);
        static PyObject *t_DefaultHandler_ignorableWhitespace(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_notationDecl(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_processingInstruction(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_skippedEntity(t_DefaultHandler *self, PyObject *arg);
        static PyObject *t_DefaultHandler_startDocument(t_DefaultHandler *self);
        static PyObject *t_DefaultHandler_startPrefixMapping(t_DefaultHandler *self, PyObject *args);
        static PyObject *t_DefaultHandler_unparsedEntityDecl(t_DefaultHandler *self, PyObject *args);

        static PyMethodDef t_DefaultHandler__methods_[] = {
          DECLARE_METHOD(t_DefaultHandler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DefaultHandler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DefaultHandler, characters, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, endDocument, METH_NOARGS),
          DECLARE_METHOD(t_DefaultHandler, endElement, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, endPrefixMapping, METH_O),
          DECLARE_METHOD(t_DefaultHandler, ignorableWhitespace, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, notationDecl, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, processingInstruction, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, skippedEntity, METH_O),
          DECLARE_METHOD(t_DefaultHandler, startDocument, METH_NOARGS),
          DECLARE_METHOD(t_DefaultHandler, startPrefixMapping, METH_VARARGS),
          DECLARE_METHOD(t_DefaultHandler, unparsedEntityDecl, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DefaultHandler, t_DefaultHandler, ::java::lang::Object, DefaultHandler, t_DefaultHandler_init_, 0, 0, 0, 0, 0);

        void t_DefaultHandler::install(PyObject *module)
        {
          installType(&PY_TYPE(DefaultHandler), module, "DefaultHandler", 0);
        }

        void t_DefaultHandler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DefaultHandler).tp_dict, "class_", make_descriptor(DefaultHandler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DefaultHandler).tp_dict, "wrapfn_", make_descriptor(t_DefaultHandler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DefaultHandler).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DefaultHandler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DefaultHandler::initializeClass, 1)))
            return NULL;
          return t_DefaultHandler::wrap_Object(DefaultHandler(((t_DefaultHandler *) arg)->object.this$));
        }
        static PyObject *t_DefaultHandler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DefaultHandler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DefaultHandler_init_(t_DefaultHandler *self, PyObject *args, PyObject *kwds)
        {
          DefaultHandler object((jobject) NULL);

          INT_CALL(object = DefaultHandler());
          self->object = object;

          return 0;
        }

        static PyObject *t_DefaultHandler_characters(t_DefaultHandler *self, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.characters(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "characters", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_endDocument(t_DefaultHandler *self)
        {
          OBJ_CALL(self->object.endDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_DefaultHandler_endElement(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.endElement(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "endElement", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_endPrefixMapping(t_DefaultHandler *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.endPrefixMapping(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "endPrefixMapping", arg);
          return NULL;
        }

        static PyObject *t_DefaultHandler_ignorableWhitespace(t_DefaultHandler *self, PyObject *args)
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.ignorableWhitespace(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "ignorableWhitespace", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_notationDecl(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);

          if (!parseArgs(args, "sss", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.notationDecl(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "notationDecl", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_processingInstruction(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.processingInstruction(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "processingInstruction", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_skippedEntity(t_DefaultHandler *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.skippedEntity(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "skippedEntity", arg);
          return NULL;
        }

        static PyObject *t_DefaultHandler_startDocument(t_DefaultHandler *self)
        {
          OBJ_CALL(self->object.startDocument());
          Py_RETURN_NONE;
        }

        static PyObject *t_DefaultHandler_startPrefixMapping(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.startPrefixMapping(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startPrefixMapping", args);
          return NULL;
        }

        static PyObject *t_DefaultHandler_unparsedEntityDecl(t_DefaultHandler *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::java::lang::String a3((jobject) NULL);

          if (!parseArgs(args, "ssss", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.unparsedEntityDecl(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "unparsedEntityDecl", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/BytesRefFieldSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *BytesRefFieldSource::class$ = NULL;
            jmethodID *BytesRefFieldSource::mids$ = NULL;
            bool BytesRefFieldSource::live$ = false;

            jclass BytesRefFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/BytesRefFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BytesRefFieldSource::BytesRefFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues BytesRefFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_BytesRefFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BytesRefFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BytesRefFieldSource_init_(t_BytesRefFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_BytesRefFieldSource_getValues(t_BytesRefFieldSource *self, PyObject *args);

            static PyMethodDef t_BytesRefFieldSource__methods_[] = {
              DECLARE_METHOD(t_BytesRefFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BytesRefFieldSource, getValues, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BytesRefFieldSource, t_BytesRefFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, BytesRefFieldSource, t_BytesRefFieldSource_init_, 0, 0, 0, 0, 0);

            void t_BytesRefFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(BytesRefFieldSource), module, "BytesRefFieldSource", 0);
            }

            void t_BytesRefFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BytesRefFieldSource).tp_dict, "class_", make_descriptor(BytesRefFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BytesRefFieldSource).tp_dict, "wrapfn_", make_descriptor(t_BytesRefFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BytesRefFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BytesRefFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BytesRefFieldSource::initializeClass, 1)))
                return NULL;
              return t_BytesRefFieldSource::wrap_Object(BytesRefFieldSource(((t_BytesRefFieldSource *) arg)->object.this$));
            }
            static PyObject *t_BytesRefFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BytesRefFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BytesRefFieldSource_init_(t_BytesRefFieldSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              BytesRefFieldSource object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = BytesRefFieldSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_BytesRefFieldSource_getValues(t_BytesRefFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(BytesRefFieldSource), (PyObject *) self, "getValues", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionIncrementAttributeImpl::class$ = NULL;
          jmethodID *PositionIncrementAttributeImpl::mids$ = NULL;
          bool PositionIncrementAttributeImpl::live$ = false;

          jclass PositionIncrementAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionIncrementAttributeImpl::PositionIncrementAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PositionIncrementAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void PositionIncrementAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean PositionIncrementAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PositionIncrementAttributeImpl::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
          }

          jint PositionIncrementAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PositionIncrementAttributeImpl::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionIncrementAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionIncrementAttributeImpl_init_(t_PositionIncrementAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionIncrementAttributeImpl_clear(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_copyTo(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_equals(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_getPositionIncrement(t_PositionIncrementAttributeImpl *self);
          static PyObject *t_PositionIncrementAttributeImpl_hashCode(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_setPositionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg);
          static PyObject *t_PositionIncrementAttributeImpl_get__positionIncrement(t_PositionIncrementAttributeImpl *self, void *data);
          static int t_PositionIncrementAttributeImpl_set__positionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionIncrementAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionIncrementAttributeImpl, positionIncrement),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionIncrementAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, setPositionIncrement, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionIncrementAttributeImpl, t_PositionIncrementAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PositionIncrementAttributeImpl, t_PositionIncrementAttributeImpl_init_, 0, 0, t_PositionIncrementAttributeImpl__fields_, 0, 0);

          void t_PositionIncrementAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionIncrementAttributeImpl), module, "PositionIncrementAttributeImpl", 0);
          }

          void t_PositionIncrementAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttributeImpl).tp_dict, "class_", make_descriptor(PositionIncrementAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PositionIncrementAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionIncrementAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionIncrementAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PositionIncrementAttributeImpl::wrap_Object(PositionIncrementAttributeImpl(((t_PositionIncrementAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PositionIncrementAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionIncrementAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionIncrementAttributeImpl_init_(t_PositionIncrementAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PositionIncrementAttributeImpl object((jobject) NULL);

            INT_CALL(object = PositionIncrementAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PositionIncrementAttributeImpl_clear(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_copyTo(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_equals(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_getPositionIncrement(t_PositionIncrementAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionIncrementAttributeImpl_hashCode(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_setPositionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PositionIncrementAttributeImpl_get__positionIncrement(t_PositionIncrementAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionIncrementAttributeImpl_set__positionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenizerFactory::class$ = NULL;
          jmethodID *NGramTokenizerFactory::mids$ = NULL;
          bool NGramTokenizerFactory::live$ = false;

          jclass NGramTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenizerFactory::NGramTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer NGramTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenizerFactory_init_(t_NGramTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenizerFactory_create(t_NGramTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_NGramTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_NGramTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramTokenizerFactory, t_NGramTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, NGramTokenizerFactory, t_NGramTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_NGramTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenizerFactory), module, "NGramTokenizerFactory", 0);
          }

          void t_NGramTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramTokenizerFactory).tp_dict, "class_", make_descriptor(NGramTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_NGramTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_NGramTokenizerFactory::wrap_Object(NGramTokenizerFactory(((t_NGramTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenizerFactory_init_(t_NGramTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NGramTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NGramTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenizerFactory_create(t_NGramTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NGramTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Distribution.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Distribution::class$ = NULL;
          jmethodID *Distribution::mids$ = NULL;
          bool Distribution::live$ = false;

          jclass Distribution::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Distribution");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_aa9c2b5b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Distribution::Distribution() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Distribution::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_aa9c2b5b], a0.this$, a1, a2));
          }

          jfloat Distribution::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String Distribution::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Distribution_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Distribution_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Distribution_init_(t_Distribution *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Distribution_explain(t_Distribution *self, PyObject *args);
          static PyObject *t_Distribution_score(t_Distribution *self, PyObject *args);
          static PyObject *t_Distribution_toString(t_Distribution *self, PyObject *args);

          static PyMethodDef t_Distribution__methods_[] = {
            DECLARE_METHOD(t_Distribution, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Distribution, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Distribution, explain, METH_VARARGS),
            DECLARE_METHOD(t_Distribution, score, METH_VARARGS),
            DECLARE_METHOD(t_Distribution, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Distribution, t_Distribution, ::java::lang::Object, Distribution, t_Distribution_init_, 0, 0, 0, 0, 0);

          void t_Distribution::install(PyObject *module)
          {
            installType(&PY_TYPE(Distribution), module, "Distribution", 0);
          }

          void t_Distribution::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Distribution).tp_dict, "class_", make_descriptor(Distribution::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Distribution).tp_dict, "wrapfn_", make_descriptor(t_Distribution::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Distribution).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Distribution_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Distribution::initializeClass, 1)))
              return NULL;
            return t_Distribution::wrap_Object(Distribution(((t_Distribution *) arg)->object.this$));
          }
          static PyObject *t_Distribution_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Distribution::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Distribution_init_(t_Distribution *self, PyObject *args, PyObject *kwds)
          {
            Distribution object((jobject) NULL);

            INT_CALL(object = Distribution());
            self->object = object;

            return 0;
          }

          static PyObject *t_Distribution_explain(t_Distribution *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Distribution_score(t_Distribution *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_Distribution_toString(t_Distribution *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Distribution), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/MinFloatFunction.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *MinFloatFunction::class$ = NULL;
            jmethodID *MinFloatFunction::mids$ = NULL;
            bool MinFloatFunction::live$ = false;

            jclass MinFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/MinFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ee9922ca] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_d2e34bb9] = env->getMethodID(cls, "func", "(I[Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MinFloatFunction::MinFloatFunction(const JArray< ::org::apache::lucene::queries::function::ValueSource > & a0) : ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_ee9922ca, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_MinFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MinFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MinFloatFunction_init_(t_MinFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_MinFloatFunction__methods_[] = {
              DECLARE_METHOD(t_MinFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MinFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MinFloatFunction, t_MinFloatFunction, ::org::apache::lucene::queries::function::valuesource::MultiFloatFunction, MinFloatFunction, t_MinFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_MinFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(MinFloatFunction), module, "MinFloatFunction", 0);
            }

            void t_MinFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MinFloatFunction).tp_dict, "class_", make_descriptor(MinFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MinFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_MinFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MinFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MinFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MinFloatFunction::initializeClass, 1)))
                return NULL;
              return t_MinFloatFunction::wrap_Object(MinFloatFunction(((t_MinFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_MinFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MinFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MinFloatFunction_init_(t_MinFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              JArray< ::org::apache::lucene::queries::function::ValueSource > a0((jobject) NULL);
              MinFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = MinFloatFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$equality_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$equality_return::class$ = NULL;
          jmethodID *JavascriptParser$equality_return::mids$ = NULL;
          bool JavascriptParser$equality_return::live$ = false;

          jclass JavascriptParser$equality_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$equality_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$equality_return::JavascriptParser$equality_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$equality_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$equality_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$equality_return_init_(t_JavascriptParser$equality_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$equality_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$equality_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$equality_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$equality_return, t_JavascriptParser$equality_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$equality_return, t_JavascriptParser$equality_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$equality_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$equality_return), module, "JavascriptParser$equality_return", 0);
          }

          void t_JavascriptParser$equality_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$equality_return).tp_dict, "class_", make_descriptor(JavascriptParser$equality_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$equality_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$equality_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$equality_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$equality_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$equality_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$equality_return::wrap_Object(JavascriptParser$equality_return(((t_JavascriptParser$equality_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$equality_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$equality_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$equality_return_init_(t_JavascriptParser$equality_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$equality_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$equality_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SpellChecker.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SpellChecker::class$ = NULL;
          jmethodID *SpellChecker::mids$ = NULL;
          bool SpellChecker::live$ = false;
          jfloat SpellChecker::DEFAULT_ACCURACY = (jfloat) 0;
          ::java::lang::String *SpellChecker::F_WORD = NULL;

          jclass SpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
              mids$[mid_init$_234c1a23] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_init$_eced4abc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/spell/StringDistance;Ljava/util/Comparator;)V");
              mids$[mid_clearIndex_54c6a166] = env->getMethodID(cls, "clearIndex", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_exist_5fdc3f44] = env->getMethodID(cls, "exist", "(Ljava/lang/String;)Z");
              mids$[mid_getAccuracy_54c6a176] = env->getMethodID(cls, "getAccuracy", "()F");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getStringDistance_a5face5e] = env->getMethodID(cls, "getStringDistance", "()Lorg/apache/lucene/search/spell/StringDistance;");
              mids$[mid_indexDictionary_dcfa1d99] = env->getMethodID(cls, "indexDictionary", "(Lorg/apache/lucene/search/spell/Dictionary;Lorg/apache/lucene/index/IndexWriterConfig;Z)V");
              mids$[mid_setAccuracy_06298cab] = env->getMethodID(cls, "setAccuracy", "(F)V");
              mids$[mid_setComparator_6ffdd545] = env->getMethodID(cls, "setComparator", "(Ljava/util/Comparator;)V");
              mids$[mid_setSpellIndex_2e261ef2] = env->getMethodID(cls, "setSpellIndex", "(Lorg/apache/lucene/store/Directory;)V");
              mids$[mid_setStringDistance_9c934047] = env->getMethodID(cls, "setStringDistance", "(Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_suggestSimilar_3384fe85] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_4d5d7778] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;IF)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_f64ed82d] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;ILorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/search/spell/SuggestMode;)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_b90725e0] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;ILorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/search/spell/SuggestMode;F)[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_ACCURACY = env->getStaticFloatField(cls, "DEFAULT_ACCURACY");
              F_WORD = new ::java::lang::String(env->getStaticObjectField(cls, "F_WORD", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::spell::StringDistance & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_234c1a23, a0.this$, a1.this$)) {}

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::spell::StringDistance & a1, const ::java::util::Comparator & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_eced4abc, a0.this$, a1.this$, a2.this$)) {}

          void SpellChecker::clearIndex() const
          {
            env->callVoidMethod(this$, mids$[mid_clearIndex_54c6a166]);
          }

          void SpellChecker::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jboolean SpellChecker::exist(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_exist_5fdc3f44], a0.this$);
          }

          jfloat SpellChecker::getAccuracy() const
          {
            return env->callFloatMethod(this$, mids$[mid_getAccuracy_54c6a176]);
          }

          ::java::util::Comparator SpellChecker::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::search::spell::StringDistance SpellChecker::getStringDistance() const
          {
            return ::org::apache::lucene::search::spell::StringDistance(env->callObjectMethod(this$, mids$[mid_getStringDistance_a5face5e]));
          }

          void SpellChecker::indexDictionary(const ::org::apache::lucene::search::spell::Dictionary & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1, jboolean a2) const
          {
            env->callVoidMethod(this$, mids$[mid_indexDictionary_dcfa1d99], a0.this$, a1.this$, a2);
          }

          void SpellChecker::setAccuracy(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccuracy_06298cab], a0);
          }

          void SpellChecker::setComparator(const ::java::util::Comparator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setComparator_6ffdd545], a0.this$);
          }

          void SpellChecker::setSpellIndex(const ::org::apache::lucene::store::Directory & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSpellIndex_2e261ef2], a0.this$);
          }

          void SpellChecker::setStringDistance(const ::org::apache::lucene::search::spell::StringDistance & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStringDistance_9c934047], a0.this$);
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_3384fe85], a0.this$, a1));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, jfloat a2) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_4d5d7778], a0.this$, a1, a2));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::lang::String & a3, const ::org::apache::lucene::search::spell::SuggestMode & a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_f64ed82d], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::lang::String & a3, const ::org::apache::lucene::search::spell::SuggestMode & a4, jfloat a5) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_b90725e0], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpellChecker_init_(t_SpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpellChecker_clearIndex(t_SpellChecker *self);
          static PyObject *t_SpellChecker_close(t_SpellChecker *self);
          static PyObject *t_SpellChecker_exist(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_getAccuracy(t_SpellChecker *self);
          static PyObject *t_SpellChecker_getComparator(t_SpellChecker *self);
          static PyObject *t_SpellChecker_getStringDistance(t_SpellChecker *self);
          static PyObject *t_SpellChecker_indexDictionary(t_SpellChecker *self, PyObject *args);
          static PyObject *t_SpellChecker_setAccuracy(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setComparator(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setSpellIndex(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setStringDistance(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_suggestSimilar(t_SpellChecker *self, PyObject *args);
          static PyObject *t_SpellChecker_get__accuracy(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__accuracy(t_SpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_SpellChecker_get__comparator(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__comparator(t_SpellChecker *self, PyObject *arg, void *data);
          static int t_SpellChecker_set__spellIndex(t_SpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_SpellChecker_get__stringDistance(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__stringDistance(t_SpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_SpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_SpellChecker, accuracy),
            DECLARE_GETSET_FIELD(t_SpellChecker, comparator),
            DECLARE_SET_FIELD(t_SpellChecker, spellIndex),
            DECLARE_GETSET_FIELD(t_SpellChecker, stringDistance),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpellChecker__methods_[] = {
            DECLARE_METHOD(t_SpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpellChecker, clearIndex, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, close, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, exist, METH_O),
            DECLARE_METHOD(t_SpellChecker, getAccuracy, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, getStringDistance, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, indexDictionary, METH_VARARGS),
            DECLARE_METHOD(t_SpellChecker, setAccuracy, METH_O),
            DECLARE_METHOD(t_SpellChecker, setComparator, METH_O),
            DECLARE_METHOD(t_SpellChecker, setSpellIndex, METH_O),
            DECLARE_METHOD(t_SpellChecker, setStringDistance, METH_O),
            DECLARE_METHOD(t_SpellChecker, suggestSimilar, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpellChecker, t_SpellChecker, ::java::lang::Object, SpellChecker, t_SpellChecker_init_, 0, 0, t_SpellChecker__fields_, 0, 0);

          void t_SpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(SpellChecker), module, "SpellChecker", 0);
          }

          void t_SpellChecker::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "class_", make_descriptor(SpellChecker::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "wrapfn_", make_descriptor(t_SpellChecker::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SpellChecker::initializeClass);
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "DEFAULT_ACCURACY", make_descriptor(SpellChecker::DEFAULT_ACCURACY));
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "F_WORD", make_descriptor(j2p(*SpellChecker::F_WORD)));
          }

          static PyObject *t_SpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpellChecker::initializeClass, 1)))
              return NULL;
            return t_SpellChecker::wrap_Object(SpellChecker(((t_SpellChecker *) arg)->object.this$));
          }
          static PyObject *t_SpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpellChecker_init_(t_SpellChecker *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                {
                  INT_CALL(object = SpellChecker(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::search::spell::StringDistance a1((jobject) NULL);
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SpellChecker(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::search::spell::StringDistance a1((jobject) NULL);
                ::java::util::Comparator a2((jobject) NULL);
                PyTypeObject **p2;
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::spell::StringDistance::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SpellChecker(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpellChecker_clearIndex(t_SpellChecker *self)
          {
            OBJ_CALL(self->object.clearIndex());
            Py_RETURN_NONE;
          }

          static PyObject *t_SpellChecker_close(t_SpellChecker *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_SpellChecker_exist(t_SpellChecker *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.exist(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "exist", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_getAccuracy(t_SpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getAccuracy());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_SpellChecker_getComparator(t_SpellChecker *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord));
          }

          static PyObject *t_SpellChecker_getStringDistance(t_SpellChecker *self)
          {
            ::org::apache::lucene::search::spell::StringDistance result((jobject) NULL);
            OBJ_CALL(result = self->object.getStringDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(result);
          }

          static PyObject *t_SpellChecker_indexDictionary(t_SpellChecker *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::Dictionary a0((jobject) NULL);
            ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::search::spell::Dictionary::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.indexDictionary(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "indexDictionary", args);
            return NULL;
          }

          static PyObject *t_SpellChecker_setAccuracy(t_SpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setAccuracy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccuracy", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setComparator(t_SpellChecker *self, PyObject *arg)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              OBJ_CALL(self->object.setComparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setComparator", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setSpellIndex(t_SpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSpellIndex(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSpellIndex", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setStringDistance(t_SpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spell::StringDistance a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStringDistance(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStringDistance", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_suggestSimilar(t_SpellChecker *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                jfloat a2;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIF", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a4((jobject) NULL);
                PyTypeObject **p4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIksK", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 6:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a4((jobject) NULL);
                PyTypeObject **p4;
                jfloat a5;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIksKF", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a5))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4, a5));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "suggestSimilar", args);
            return NULL;
          }

          static PyObject *t_SpellChecker_get__accuracy(t_SpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getAccuracy());
            return PyFloat_FromDouble((double) value);
          }
          static int t_SpellChecker_set__accuracy(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setAccuracy(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "accuracy", arg);
            return -1;
          }

          static PyObject *t_SpellChecker_get__comparator(t_SpellChecker *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
          static int t_SpellChecker_set__comparator(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Comparator value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
              {
                INT_CALL(self->object.setComparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "comparator", arg);
            return -1;
          }

          static int t_SpellChecker_set__spellIndex(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::store::Directory value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &value))
              {
                INT_CALL(self->object.setSpellIndex(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "spellIndex", arg);
            return -1;
          }

          static PyObject *t_SpellChecker_get__stringDistance(t_SpellChecker *self, void *data)
          {
            ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
            OBJ_CALL(value = self->object.getStringDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(value);
          }
          static int t_SpellChecker_set__stringDistance(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &value))
              {
                INT_CALL(self->object.setStringDistance(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stringDistance", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/ReaderSlice.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *ReaderSlice::class$ = NULL;
        jmethodID *ReaderSlice::mids$ = NULL;
        jfieldID *ReaderSlice::fids$ = NULL;
        bool ReaderSlice::live$ = false;
        JArray< ReaderSlice > *ReaderSlice::EMPTY_ARRAY = NULL;

        jclass ReaderSlice::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/ReaderSlice");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3236aa4] = env->getMethodID(cls, "<init>", "(III)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_length] = env->getFieldID(cls, "length", "I");
            fids$[fid_readerIndex] = env->getFieldID(cls, "readerIndex", "I");
            fids$[fid_start] = env->getFieldID(cls, "start", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY_ARRAY = new JArray< ReaderSlice >(env->getStaticObjectField(cls, "EMPTY_ARRAY", "[Lorg/apache/lucene/index/ReaderSlice;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ReaderSlice::ReaderSlice(jint a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d3236aa4, a0, a1, a2)) {}

        ::java::lang::String ReaderSlice::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jint ReaderSlice::_get_length() const
        {
          return env->getIntField(this$, fids$[fid_length]);
        }

        jint ReaderSlice::_get_readerIndex() const
        {
          return env->getIntField(this$, fids$[fid_readerIndex]);
        }

        jint ReaderSlice::_get_start() const
        {
          return env->getIntField(this$, fids$[fid_start]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_ReaderSlice_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReaderSlice_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ReaderSlice_init_(t_ReaderSlice *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ReaderSlice_toString(t_ReaderSlice *self, PyObject *args);
        static PyObject *t_ReaderSlice_get__length(t_ReaderSlice *self, void *data);
        static PyObject *t_ReaderSlice_get__readerIndex(t_ReaderSlice *self, void *data);
        static PyObject *t_ReaderSlice_get__start(t_ReaderSlice *self, void *data);

        static PyGetSetDef t_ReaderSlice__fields_[] = {
          DECLARE_GET_FIELD(t_ReaderSlice, length),
          DECLARE_GET_FIELD(t_ReaderSlice, readerIndex),
          DECLARE_GET_FIELD(t_ReaderSlice, start),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReaderSlice__methods_[] = {
          DECLARE_METHOD(t_ReaderSlice, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderSlice, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReaderSlice, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReaderSlice, t_ReaderSlice, ::java::lang::Object, ReaderSlice, t_ReaderSlice_init_, 0, 0, t_ReaderSlice__fields_, 0, 0);

        void t_ReaderSlice::install(PyObject *module)
        {
          installType(&PY_TYPE(ReaderSlice), module, "ReaderSlice", 0);
        }

        void t_ReaderSlice::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "class_", make_descriptor(ReaderSlice::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "wrapfn_", make_descriptor(t_ReaderSlice::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ReaderSlice::initializeClass);
          PyDict_SetItemString(PY_TYPE(ReaderSlice).tp_dict, "EMPTY_ARRAY", make_descriptor(JArray<jobject>(ReaderSlice::EMPTY_ARRAY->this$).wrap(t_ReaderSlice::wrap_jobject)));
        }

        static PyObject *t_ReaderSlice_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReaderSlice::initializeClass, 1)))
            return NULL;
          return t_ReaderSlice::wrap_Object(ReaderSlice(((t_ReaderSlice *) arg)->object.this$));
        }
        static PyObject *t_ReaderSlice_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReaderSlice::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ReaderSlice_init_(t_ReaderSlice *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          jint a1;
          jint a2;
          ReaderSlice object((jobject) NULL);

          if (!parseArgs(args, "III", &a0, &a1, &a2))
          {
            INT_CALL(object = ReaderSlice(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ReaderSlice_toString(t_ReaderSlice *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(ReaderSlice), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_ReaderSlice_get__length(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_length());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ReaderSlice_get__readerIndex(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_readerIndex());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_ReaderSlice_get__start(t_ReaderSlice *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_start());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/cn/ChineseTokenizer.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseTokenizerFactory::class$ = NULL;
          jmethodID *ChineseTokenizerFactory::mids$ = NULL;
          bool ChineseTokenizerFactory::live$ = false;

          jclass ChineseTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_3378b1fc] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/cn/ChineseTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseTokenizerFactory::ChineseTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::cn::ChineseTokenizer ChineseTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::cn::ChineseTokenizer(env->callObjectMethod(this$, mids$[mid_create_3378b1fc], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseTokenizerFactory_init_(t_ChineseTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseTokenizerFactory_create(t_ChineseTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ChineseTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ChineseTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseTokenizerFactory, t_ChineseTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ChineseTokenizerFactory, t_ChineseTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ChineseTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseTokenizerFactory), module, "ChineseTokenizerFactory", 0);
          }

          void t_ChineseTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseTokenizerFactory).tp_dict, "class_", make_descriptor(ChineseTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ChineseTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ChineseTokenizerFactory::wrap_Object(ChineseTokenizerFactory(((t_ChineseTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ChineseTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseTokenizerFactory_init_(t_ChineseTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ChineseTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ChineseTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseTokenizerFactory_create(t_ChineseTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::cn::ChineseTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::cn::t_ChineseTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ChineseTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoDeletionPolicy::class$ = NULL;
        jmethodID *NoDeletionPolicy::mids$ = NULL;
        bool NoDeletionPolicy::live$ = false;
        ::org::apache::lucene::index::IndexDeletionPolicy *NoDeletionPolicy::INSTANCE = NULL;

        jclass NoDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_a18376c3] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/IndexDeletionPolicy;");
            mids$[mid_onCommit_1fde8fc3] = env->getMethodID(cls, "onCommit", "(Ljava/util/List;)V");
            mids$[mid_onInit_1fde8fc3] = env->getMethodID(cls, "onInit", "(Ljava/util/List;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::IndexDeletionPolicy(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/IndexDeletionPolicy;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::IndexDeletionPolicy NoDeletionPolicy::clone() const
        {
          return ::org::apache::lucene::index::IndexDeletionPolicy(env->callObjectMethod(this$, mids$[mid_clone_a18376c3]));
        }

        void NoDeletionPolicy::onCommit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onCommit_1fde8fc3], a0.this$);
        }

        void NoDeletionPolicy::onInit(const ::java::util::List & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_onInit_1fde8fc3], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoDeletionPolicy_clone(t_NoDeletionPolicy *self);
        static PyObject *t_NoDeletionPolicy_onCommit(t_NoDeletionPolicy *self, PyObject *args);
        static PyObject *t_NoDeletionPolicy_onInit(t_NoDeletionPolicy *self, PyObject *args);

        static PyMethodDef t_NoDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_NoDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoDeletionPolicy, clone, METH_NOARGS),
          DECLARE_METHOD(t_NoDeletionPolicy, onCommit, METH_VARARGS),
          DECLARE_METHOD(t_NoDeletionPolicy, onInit, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoDeletionPolicy, t_NoDeletionPolicy, ::org::apache::lucene::index::IndexDeletionPolicy, NoDeletionPolicy, abstract_init, 0, 0, 0, 0, 0);

        void t_NoDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(NoDeletionPolicy), module, "NoDeletionPolicy", 0);
        }

        void t_NoDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "class_", make_descriptor(NoDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_NoDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NoDeletionPolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(NoDeletionPolicy).tp_dict, "INSTANCE", make_descriptor(::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(*NoDeletionPolicy::INSTANCE)));
        }

        static PyObject *t_NoDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_NoDeletionPolicy::wrap_Object(NoDeletionPolicy(((t_NoDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_NoDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoDeletionPolicy_clone(t_NoDeletionPolicy *self)
        {
          ::org::apache::lucene::index::IndexDeletionPolicy result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return ::org::apache::lucene::index::t_IndexDeletionPolicy::wrap_Object(result);
        }

        static PyObject *t_NoDeletionPolicy_onCommit(t_NoDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onCommit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoDeletionPolicy), (PyObject *) self, "onCommit", args, 2);
        }

        static PyObject *t_NoDeletionPolicy_onInit(t_NoDeletionPolicy *self, PyObject *args)
        {
          ::java::util::List a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.onInit(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoDeletionPolicy), (PyObject *) self, "onInit", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/CachedFilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilderFactory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilderFactory.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *CachedFilterBuilder::class$ = NULL;
            jmethodID *CachedFilterBuilder::mids$ = NULL;
            bool CachedFilterBuilder::live$ = false;

            jclass CachedFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/CachedFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_11d0c47f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilderFactory;Lorg/apache/lucene/queryparser/xml/FilterBuilderFactory;I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            CachedFilterBuilder::CachedFilterBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilderFactory & a0, const ::org::apache::lucene::queryparser::xml::FilterBuilderFactory & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_11d0c47f, a0.this$, a1.this$, a2)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_CachedFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CachedFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_CachedFilterBuilder_init_(t_CachedFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_CachedFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_CachedFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CachedFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CachedFilterBuilder, t_CachedFilterBuilder, ::java::lang::Object, CachedFilterBuilder, t_CachedFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_CachedFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(CachedFilterBuilder), module, "CachedFilterBuilder", 0);
            }

            void t_CachedFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CachedFilterBuilder).tp_dict, "class_", make_descriptor(CachedFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CachedFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_CachedFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CachedFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CachedFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CachedFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_CachedFilterBuilder::wrap_Object(CachedFilterBuilder(((t_CachedFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_CachedFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CachedFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_CachedFilterBuilder_init_(t_CachedFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilderFactory a0((jobject) NULL);
              ::org::apache::lucene::queryparser::xml::FilterBuilderFactory a1((jobject) NULL);
              jint a2;
              CachedFilterBuilder object((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::queryparser::xml::QueryBuilderFactory::initializeClass, ::org::apache::lucene::queryparser::xml::FilterBuilderFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = CachedFilterBuilder(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedNumericDocValues::class$ = NULL;
        jmethodID *SortedNumericDocValues::mids$ = NULL;
        bool SortedNumericDocValues::live$ = false;

        jclass SortedNumericDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedNumericDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_count_54c6a179] = env->getMethodID(cls, "count", "()I");
            mids$[mid_setDocument_39c7bd3c] = env->getMethodID(cls, "setDocument", "(I)V");
            mids$[mid_valueAt_39c7bd20] = env->getMethodID(cls, "valueAt", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint SortedNumericDocValues::count() const
        {
          return env->callIntMethod(this$, mids$[mid_count_54c6a179]);
        }

        void SortedNumericDocValues::setDocument(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocument_39c7bd3c], a0);
        }

        jlong SortedNumericDocValues::valueAt(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_valueAt_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedNumericDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericDocValues_count(t_SortedNumericDocValues *self);
        static PyObject *t_SortedNumericDocValues_setDocument(t_SortedNumericDocValues *self, PyObject *arg);
        static PyObject *t_SortedNumericDocValues_valueAt(t_SortedNumericDocValues *self, PyObject *arg);
        static int t_SortedNumericDocValues_set__document(t_SortedNumericDocValues *self, PyObject *arg, void *data);
        static PyGetSetDef t_SortedNumericDocValues__fields_[] = {
          DECLARE_SET_FIELD(t_SortedNumericDocValues, document),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedNumericDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedNumericDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericDocValues, count, METH_NOARGS),
          DECLARE_METHOD(t_SortedNumericDocValues, setDocument, METH_O),
          DECLARE_METHOD(t_SortedNumericDocValues, valueAt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericDocValues, t_SortedNumericDocValues, ::java::lang::Object, SortedNumericDocValues, abstract_init, 0, 0, t_SortedNumericDocValues__fields_, 0, 0);

        void t_SortedNumericDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericDocValues), module, "SortedNumericDocValues", 0);
        }

        void t_SortedNumericDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValues).tp_dict, "class_", make_descriptor(SortedNumericDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValues).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedNumericDocValues::wrap_Object(SortedNumericDocValues(((t_SortedNumericDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedNumericDocValues_count(t_SortedNumericDocValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.count());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SortedNumericDocValues_setDocument(t_SortedNumericDocValues *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setDocument(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocument", arg);
          return NULL;
        }

        static PyObject *t_SortedNumericDocValues_valueAt(t_SortedNumericDocValues *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.valueAt(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "valueAt", arg);
          return NULL;
        }

        static int t_SortedNumericDocValues_set__document(t_SortedNumericDocValues *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setDocument(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "document", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SortedSetSortField$Selector.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SortedSetSortField$Selector::class$ = NULL;
          jmethodID *SortedSetSortField$Selector::mids$ = NULL;
          bool SortedSetSortField$Selector::live$ = false;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MAX = NULL;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MIDDLE_MAX = NULL;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MIDDLE_MIN = NULL;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MIN = NULL;

          jclass SortedSetSortField$Selector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SortedSetSortField$Selector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_1826b9b5] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;");
              mids$[mid_values_ab359d3f] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MAX", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              MIDDLE_MAX = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MIDDLE_MAX", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              MIDDLE_MIN = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MIDDLE_MIN", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              MIN = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MIN", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetSortField$Selector SortedSetSortField$Selector::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return SortedSetSortField$Selector(env->callStaticObjectMethod(cls, mids$[mid_valueOf_1826b9b5], a0.this$));
          }

          JArray< SortedSetSortField$Selector > SortedSetSortField$Selector::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< SortedSetSortField$Selector >(env->callStaticObjectMethod(cls, mids$[mid_values_ab359d3f]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SortedSetSortField$Selector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetSortField$Selector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetSortField$Selector_of_(t_SortedSetSortField$Selector *self, PyObject *args);
          static PyObject *t_SortedSetSortField$Selector_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_SortedSetSortField$Selector_values(PyTypeObject *type);
          static PyObject *t_SortedSetSortField$Selector_get__parameters_(t_SortedSetSortField$Selector *self, void *data);
          static PyGetSetDef t_SortedSetSortField$Selector__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetSortField$Selector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetSortField$Selector__methods_[] = {
            DECLARE_METHOD(t_SortedSetSortField$Selector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, of_, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetSortField$Selector, t_SortedSetSortField$Selector, ::java::lang::Enum, SortedSetSortField$Selector, abstract_init, 0, 0, t_SortedSetSortField$Selector__fields_, 0, 0);
          PyObject *t_SortedSetSortField$Selector::wrap_Object(const SortedSetSortField$Selector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SortedSetSortField$Selector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SortedSetSortField$Selector *self = (t_SortedSetSortField$Selector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SortedSetSortField$Selector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SortedSetSortField$Selector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SortedSetSortField$Selector *self = (t_SortedSetSortField$Selector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SortedSetSortField$Selector::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetSortField$Selector), module, "SortedSetSortField$Selector", 0);
          }

          void t_SortedSetSortField$Selector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "class_", make_descriptor(SortedSetSortField$Selector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "wrapfn_", make_descriptor(t_SortedSetSortField$Selector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SortedSetSortField$Selector::initializeClass);
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MAX", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MAX)));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MIDDLE_MAX", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MIDDLE_MAX)));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MIDDLE_MIN", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MIDDLE_MIN)));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MIN", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MIN)));
          }

          static PyObject *t_SortedSetSortField$Selector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetSortField$Selector::initializeClass, 1)))
              return NULL;
            return t_SortedSetSortField$Selector::wrap_Object(SortedSetSortField$Selector(((t_SortedSetSortField$Selector *) arg)->object.this$));
          }
          static PyObject *t_SortedSetSortField$Selector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetSortField$Selector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SortedSetSortField$Selector_of_(t_SortedSetSortField$Selector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_SortedSetSortField$Selector_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            SortedSetSortField$Selector result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector::valueOf(a0));
              return t_SortedSetSortField$Selector::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_SortedSetSortField$Selector_values(PyTypeObject *type)
          {
            JArray< SortedSetSortField$Selector > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector::values());
            return JArray<jobject>(result.this$).wrap(t_SortedSetSortField$Selector::wrap_jobject);
          }
          static PyObject *t_SortedSetSortField$Selector_get__parameters_(t_SortedSetSortField$Selector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Highest.h"
#include "java/io/IOException.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinFieldComparator$Highest::class$ = NULL;
          jmethodID *ToParentBlockJoinFieldComparator$Highest::mids$ = NULL;
          bool ToParentBlockJoinFieldComparator$Highest::live$ = false;

          jclass ToParentBlockJoinFieldComparator$Highest::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinFieldComparator$Highest");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_f2105569] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/FieldComparator;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;I)V");
              mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
              mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
              mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinFieldComparator$Highest::ToParentBlockJoinFieldComparator$Highest(const ::org::apache::lucene::search::FieldComparator & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::Filter & a2, jint a3) : ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator(env->newObject(initializeClass, &mids$, mid_init$_f2105569, a0.this$, a1.this$, a2.this$, a3)) {}

          jint ToParentBlockJoinFieldComparator$Highest::compareBottom(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
          }

          jint ToParentBlockJoinFieldComparator$Highest::compareTop(jint a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
          }

          void ToParentBlockJoinFieldComparator$Highest::copy(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_of_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static int t_ToParentBlockJoinFieldComparator$Highest_init_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareBottom(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareTop(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_copy(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_get__parameters_(t_ToParentBlockJoinFieldComparator$Highest *self, void *data);
          static PyGetSetDef t_ToParentBlockJoinFieldComparator$Highest__fields_[] = {
            DECLARE_GET_FIELD(t_ToParentBlockJoinFieldComparator$Highest, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ToParentBlockJoinFieldComparator$Highest__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, of_, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, compareBottom, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, compareTop, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinFieldComparator$Highest, copy, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinFieldComparator$Highest, t_ToParentBlockJoinFieldComparator$Highest, ::org::apache::lucene::search::join::ToParentBlockJoinFieldComparator, ToParentBlockJoinFieldComparator$Highest, t_ToParentBlockJoinFieldComparator$Highest_init_, 0, 0, t_ToParentBlockJoinFieldComparator$Highest__fields_, 0, 0);
          PyObject *t_ToParentBlockJoinFieldComparator$Highest::wrap_Object(const ToParentBlockJoinFieldComparator$Highest& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Highest::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Highest *self = (t_ToParentBlockJoinFieldComparator$Highest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_ToParentBlockJoinFieldComparator$Highest::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_ToParentBlockJoinFieldComparator$Highest::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_ToParentBlockJoinFieldComparator$Highest *self = (t_ToParentBlockJoinFieldComparator$Highest *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_ToParentBlockJoinFieldComparator$Highest::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), module, "ToParentBlockJoinFieldComparator$Highest", 0);
          }

          void t_ToParentBlockJoinFieldComparator$Highest::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Highest).tp_dict, "class_", make_descriptor(ToParentBlockJoinFieldComparator$Highest::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Highest).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinFieldComparator$Highest::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinFieldComparator$Highest).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinFieldComparator$Highest::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinFieldComparator$Highest::wrap_Object(ToParentBlockJoinFieldComparator$Highest(((t_ToParentBlockJoinFieldComparator$Highest *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinFieldComparator$Highest::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_of_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_ToParentBlockJoinFieldComparator$Highest_init_(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::FieldComparator a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            ::org::apache::lucene::search::Filter a2((jobject) NULL);
            jint a3;
            ToParentBlockJoinFieldComparator$Highest object((jobject) NULL);

            if (!parseArgs(args, "KkkI", ::org::apache::lucene::search::FieldComparator::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_FieldComparator::parameters_, &a1, &a2, &a3))
            {
              INT_CALL(object = ToParentBlockJoinFieldComparator$Highest(a0, a1, a2, a3));
              self->object = object;
              self->parameters[0] = &::java::lang::PY_TYPE(Object);
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareBottom(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareBottom(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), (PyObject *) self, "compareBottom", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_compareTop(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
              OBJ_CALL(result = self->object.compareTop(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), (PyObject *) self, "compareTop", args, 2);
          }

          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_copy(t_ToParentBlockJoinFieldComparator$Highest *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.copy(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinFieldComparator$Highest), (PyObject *) self, "copy", args, 2);
          }
          static PyObject *t_ToParentBlockJoinFieldComparator$Highest_get__parameters_(t_ToParentBlockJoinFieldComparator$Highest *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/DefaultEncoder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *DefaultEncoder::class$ = NULL;
          jmethodID *DefaultEncoder::mids$ = NULL;
          bool DefaultEncoder::live$ = false;

          jclass DefaultEncoder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/DefaultEncoder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_encodeText_97a5258f] = env->getMethodID(cls, "encodeText", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DefaultEncoder::DefaultEncoder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::java::lang::String DefaultEncoder::encodeText(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_encodeText_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_DefaultEncoder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DefaultEncoder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DefaultEncoder_init_(t_DefaultEncoder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DefaultEncoder_encodeText(t_DefaultEncoder *self, PyObject *arg);

          static PyMethodDef t_DefaultEncoder__methods_[] = {
            DECLARE_METHOD(t_DefaultEncoder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultEncoder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DefaultEncoder, encodeText, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DefaultEncoder, t_DefaultEncoder, ::java::lang::Object, DefaultEncoder, t_DefaultEncoder_init_, 0, 0, 0, 0, 0);

          void t_DefaultEncoder::install(PyObject *module)
          {
            installType(&PY_TYPE(DefaultEncoder), module, "DefaultEncoder", 0);
          }

          void t_DefaultEncoder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DefaultEncoder).tp_dict, "class_", make_descriptor(DefaultEncoder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DefaultEncoder).tp_dict, "wrapfn_", make_descriptor(t_DefaultEncoder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DefaultEncoder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DefaultEncoder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DefaultEncoder::initializeClass, 1)))
              return NULL;
            return t_DefaultEncoder::wrap_Object(DefaultEncoder(((t_DefaultEncoder *) arg)->object.this$));
          }
          static PyObject *t_DefaultEncoder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DefaultEncoder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DefaultEncoder_init_(t_DefaultEncoder *self, PyObject *args, PyObject *kwds)
          {
            DefaultEncoder object((jobject) NULL);

            INT_CALL(object = DefaultEncoder());
            self->object = object;

            return 0;
          }

          static PyObject *t_DefaultEncoder_encodeText(t_DefaultEncoder *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.encodeText(a0));
              return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "encodeText", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *CachedOrdinalsReader::class$ = NULL;
          jmethodID *CachedOrdinalsReader::mids$ = NULL;
          bool CachedOrdinalsReader::live$ = false;

          jclass CachedOrdinalsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/CachedOrdinalsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_90116188] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;)V");
              mids$[mid_getIndexFieldName_14c7b5c5] = env->getMethodID(cls, "getIndexFieldName", "()Ljava/lang/String;");
              mids$[mid_getReader_7c7f912a] = env->getMethodID(cls, "getReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/facet/taxonomy/OrdinalsReader$OrdinalsSegmentReader;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CachedOrdinalsReader::CachedOrdinalsReader(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0) : ::org::apache::lucene::facet::taxonomy::OrdinalsReader(env->newObject(initializeClass, &mids$, mid_init$_90116188, a0.this$)) {}

          ::java::lang::String CachedOrdinalsReader::getIndexFieldName() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getIndexFieldName_14c7b5c5]));
          }

          ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader CachedOrdinalsReader::getReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader(env->callObjectMethod(this$, mids$[mid_getReader_7c7f912a], a0.this$));
          }

          jlong CachedOrdinalsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/facet/taxonomy/CachedOrdinalsReader$CachedOrds.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_CachedOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CachedOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CachedOrdinalsReader_init_(t_CachedOrdinalsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CachedOrdinalsReader_getIndexFieldName(t_CachedOrdinalsReader *self, PyObject *args);
          static PyObject *t_CachedOrdinalsReader_getReader(t_CachedOrdinalsReader *self, PyObject *args);
          static PyObject *t_CachedOrdinalsReader_ramBytesUsed(t_CachedOrdinalsReader *self);
          static PyObject *t_CachedOrdinalsReader_get__indexFieldName(t_CachedOrdinalsReader *self, void *data);
          static PyGetSetDef t_CachedOrdinalsReader__fields_[] = {
            DECLARE_GET_FIELD(t_CachedOrdinalsReader, indexFieldName),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CachedOrdinalsReader__methods_[] = {
            DECLARE_METHOD(t_CachedOrdinalsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CachedOrdinalsReader, getIndexFieldName, METH_VARARGS),
            DECLARE_METHOD(t_CachedOrdinalsReader, getReader, METH_VARARGS),
            DECLARE_METHOD(t_CachedOrdinalsReader, ramBytesUsed, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CachedOrdinalsReader, t_CachedOrdinalsReader, ::org::apache::lucene::facet::taxonomy::OrdinalsReader, CachedOrdinalsReader, t_CachedOrdinalsReader_init_, 0, 0, t_CachedOrdinalsReader__fields_, 0, 0);

          void t_CachedOrdinalsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CachedOrdinalsReader), module, "CachedOrdinalsReader", 0);
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "CachedOrds", make_descriptor(&PY_TYPE(CachedOrdinalsReader$CachedOrds)));
          }

          void t_CachedOrdinalsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "class_", make_descriptor(CachedOrdinalsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "wrapfn_", make_descriptor(t_CachedOrdinalsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CachedOrdinalsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CachedOrdinalsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CachedOrdinalsReader::initializeClass, 1)))
              return NULL;
            return t_CachedOrdinalsReader::wrap_Object(CachedOrdinalsReader(((t_CachedOrdinalsReader *) arg)->object.this$));
          }
          static PyObject *t_CachedOrdinalsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CachedOrdinalsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CachedOrdinalsReader_init_(t_CachedOrdinalsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
            CachedOrdinalsReader object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, &a0))
            {
              INT_CALL(object = CachedOrdinalsReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CachedOrdinalsReader_getIndexFieldName(t_CachedOrdinalsReader *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getIndexFieldName());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CachedOrdinalsReader), (PyObject *) self, "getIndexFieldName", args, 2);
          }

          static PyObject *t_CachedOrdinalsReader_getReader(t_CachedOrdinalsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::facet::taxonomy::OrdinalsReader$OrdinalsSegmentReader result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.getReader(a0));
              return ::org::apache::lucene::facet::taxonomy::t_OrdinalsReader$OrdinalsSegmentReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CachedOrdinalsReader), (PyObject *) self, "getReader", args, 2);
          }

          static PyObject *t_CachedOrdinalsReader_ramBytesUsed(t_CachedOrdinalsReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CachedOrdinalsReader_get__indexFieldName(t_CachedOrdinalsReader *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getIndexFieldName());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum.h"
#include "org/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/MultiTermsEnum.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocsAndPositionsEnum::class$ = NULL;
        jmethodID *MultiDocsAndPositionsEnum::mids$ = NULL;
        bool MultiDocsAndPositionsEnum::live$ = false;

        jclass MultiDocsAndPositionsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocsAndPositionsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d44bb06] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MultiTermsEnum;I)V");
            mids$[mid_advance_39c7bd23] = env->getMethodID(cls, "advance", "(I)I");
            mids$[mid_canReuse_4fe73d2c] = env->getMethodID(cls, "canReuse", "(Lorg/apache/lucene/index/MultiTermsEnum;)Z");
            mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
            mids$[mid_docID_54c6a179] = env->getMethodID(cls, "docID", "()I");
            mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
            mids$[mid_freq_54c6a179] = env->getMethodID(cls, "freq", "()I");
            mids$[mid_getNumSubs_54c6a179] = env->getMethodID(cls, "getNumSubs", "()I");
            mids$[mid_getPayload_4ae19461] = env->getMethodID(cls, "getPayload", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSubs_451af4aa] = env->getMethodID(cls, "getSubs", "()[Lorg/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice;");
            mids$[mid_nextDoc_54c6a179] = env->getMethodID(cls, "nextDoc", "()I");
            mids$[mid_nextPosition_54c6a179] = env->getMethodID(cls, "nextPosition", "()I");
            mids$[mid_reset_7ce62fbc] = env->getMethodID(cls, "reset", "([Lorg/apache/lucene/index/MultiDocsAndPositionsEnum$EnumWithSlice;I)Lorg/apache/lucene/index/MultiDocsAndPositionsEnum;");
            mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiDocsAndPositionsEnum::MultiDocsAndPositionsEnum(const ::org::apache::lucene::index::MultiTermsEnum & a0, jint a1) : ::org::apache::lucene::index::DocsAndPositionsEnum(env->newObject(initializeClass, &mids$, mid_init$_7d44bb06, a0.this$, a1)) {}

        jint MultiDocsAndPositionsEnum::advance(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_advance_39c7bd23], a0);
        }

        jboolean MultiDocsAndPositionsEnum::canReuse(const ::org::apache::lucene::index::MultiTermsEnum & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_canReuse_4fe73d2c], a0.this$);
        }

        jlong MultiDocsAndPositionsEnum::cost() const
        {
          return env->callLongMethod(this$, mids$[mid_cost_54c6a17a]);
        }

        jint MultiDocsAndPositionsEnum::docID() const
        {
          return env->callIntMethod(this$, mids$[mid_docID_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::endOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::freq() const
        {
          return env->callIntMethod(this$, mids$[mid_freq_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::getNumSubs() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumSubs_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef MultiDocsAndPositionsEnum::getPayload() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getPayload_4ae19461]));
        }

        JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > MultiDocsAndPositionsEnum::getSubs() const
        {
          return JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice >(env->callObjectMethod(this$, mids$[mid_getSubs_451af4aa]));
        }

        jint MultiDocsAndPositionsEnum::nextDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_nextDoc_54c6a179]);
        }

        jint MultiDocsAndPositionsEnum::nextPosition() const
        {
          return env->callIntMethod(this$, mids$[mid_nextPosition_54c6a179]);
        }

        MultiDocsAndPositionsEnum MultiDocsAndPositionsEnum::reset(const JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > & a0, jint a1) const
        {
          return MultiDocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_reset_7ce62fbc], a0.this$, a1));
        }

        jint MultiDocsAndPositionsEnum::startOffset() const
        {
          return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
        }

        ::java::lang::String MultiDocsAndPositionsEnum::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiDocsAndPositionsEnum_init_(t_MultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiDocsAndPositionsEnum_advance(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_canReuse(t_MultiDocsAndPositionsEnum *self, PyObject *arg);
        static PyObject *t_MultiDocsAndPositionsEnum_cost(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_docID(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_endOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_freq(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_getNumSubs(t_MultiDocsAndPositionsEnum *self);
        static PyObject *t_MultiDocsAndPositionsEnum_getPayload(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_getSubs(t_MultiDocsAndPositionsEnum *self);
        static PyObject *t_MultiDocsAndPositionsEnum_nextDoc(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_nextPosition(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_reset(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_startOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_toString(t_MultiDocsAndPositionsEnum *self, PyObject *args);
        static PyObject *t_MultiDocsAndPositionsEnum_get__numSubs(t_MultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MultiDocsAndPositionsEnum_get__payload(t_MultiDocsAndPositionsEnum *self, void *data);
        static PyObject *t_MultiDocsAndPositionsEnum_get__subs(t_MultiDocsAndPositionsEnum *self, void *data);
        static PyGetSetDef t_MultiDocsAndPositionsEnum__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocsAndPositionsEnum, numSubs),
          DECLARE_GET_FIELD(t_MultiDocsAndPositionsEnum, payload),
          DECLARE_GET_FIELD(t_MultiDocsAndPositionsEnum, subs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocsAndPositionsEnum__methods_[] = {
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, advance, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, canReuse, METH_O),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, cost, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, docID, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, endOffset, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, freq, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, getNumSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, getPayload, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, getSubs, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, nextDoc, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, nextPosition, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, reset, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, startOffset, METH_VARARGS),
          DECLARE_METHOD(t_MultiDocsAndPositionsEnum, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocsAndPositionsEnum, t_MultiDocsAndPositionsEnum, ::org::apache::lucene::index::DocsAndPositionsEnum, MultiDocsAndPositionsEnum, t_MultiDocsAndPositionsEnum_init_, 0, 0, t_MultiDocsAndPositionsEnum__fields_, 0, 0);

        void t_MultiDocsAndPositionsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocsAndPositionsEnum), module, "MultiDocsAndPositionsEnum", 0);
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "EnumWithSlice", make_descriptor(&PY_TYPE(MultiDocsAndPositionsEnum$EnumWithSlice)));
        }

        void t_MultiDocsAndPositionsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "class_", make_descriptor(MultiDocsAndPositionsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "wrapfn_", make_descriptor(t_MultiDocsAndPositionsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocsAndPositionsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocsAndPositionsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocsAndPositionsEnum::initializeClass, 1)))
            return NULL;
          return t_MultiDocsAndPositionsEnum::wrap_Object(MultiDocsAndPositionsEnum(((t_MultiDocsAndPositionsEnum *) arg)->object.this$));
        }
        static PyObject *t_MultiDocsAndPositionsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocsAndPositionsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiDocsAndPositionsEnum_init_(t_MultiDocsAndPositionsEnum *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jint a1;
          MultiDocsAndPositionsEnum object((jobject) NULL);

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MultiDocsAndPositionsEnum(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiDocsAndPositionsEnum_advance(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.advance(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "advance", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_canReuse(t_MultiDocsAndPositionsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::index::MultiTermsEnum a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::MultiTermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.canReuse(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "canReuse", arg);
          return NULL;
        }

        static PyObject *t_MultiDocsAndPositionsEnum_cost(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.cost());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "cost", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_docID(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.docID());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "docID", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_endOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "endOffset", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_freq(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.freq());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "freq", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_getNumSubs(t_MultiDocsAndPositionsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumSubs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_getPayload(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getPayload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "getPayload", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_getSubs(t_MultiDocsAndPositionsEnum *self)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > result((jobject) NULL);
          OBJ_CALL(result = self->object.getSubs());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_nextDoc(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextDoc());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "nextDoc", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_nextPosition(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.nextPosition());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "nextPosition", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_reset(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > a0((jobject) NULL);
          jint a1;
          MultiDocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "[kI", ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.reset(a0, a1));
            return t_MultiDocsAndPositionsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reset", args);
          return NULL;
        }

        static PyObject *t_MultiDocsAndPositionsEnum_startOffset(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "startOffset", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_toString(t_MultiDocsAndPositionsEnum *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiDocsAndPositionsEnum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_get__numSubs(t_MultiDocsAndPositionsEnum *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumSubs());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_get__payload(t_MultiDocsAndPositionsEnum *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getPayload());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_MultiDocsAndPositionsEnum_get__subs(t_MultiDocsAndPositionsEnum *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MultiDocsAndPositionsEnum$EnumWithSlice > value((jobject) NULL);
          OBJ_CALL(value = self->object.getSubs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MultiDocsAndPositionsEnum$EnumWithSlice::wrap_jobject);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/it/ItalianLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {

          ::java::lang::Class *ItalianLightStemFilterFactory::class$ = NULL;
          jmethodID *ItalianLightStemFilterFactory::mids$ = NULL;
          bool ItalianLightStemFilterFactory::live$ = false;

          jclass ItalianLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/it/ItalianLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ItalianLightStemFilterFactory::ItalianLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ItalianLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace it {
          static PyObject *t_ItalianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ItalianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ItalianLightStemFilterFactory_init_(t_ItalianLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ItalianLightStemFilterFactory_create(t_ItalianLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_ItalianLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ItalianLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ItalianLightStemFilterFactory, t_ItalianLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ItalianLightStemFilterFactory, t_ItalianLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ItalianLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ItalianLightStemFilterFactory), module, "ItalianLightStemFilterFactory", 0);
          }

          void t_ItalianLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilterFactory).tp_dict, "class_", make_descriptor(ItalianLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ItalianLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ItalianLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ItalianLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ItalianLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ItalianLightStemFilterFactory::wrap_Object(ItalianLightStemFilterFactory(((t_ItalianLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ItalianLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ItalianLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ItalianLightStemFilterFactory_init_(t_ItalianLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ItalianLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ItalianLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ItalianLightStemFilterFactory_create(t_ItalianLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ItalianLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemFilter::class$ = NULL;
          jmethodID *KStemFilter::mids$ = NULL;
          bool KStemFilter::live$ = false;

          jclass KStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KStemFilter::KStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean KStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KStemFilter_init_(t_KStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KStemFilter_incrementToken(t_KStemFilter *self, PyObject *args);

          static PyMethodDef t_KStemFilter__methods_[] = {
            DECLARE_METHOD(t_KStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KStemFilter, t_KStemFilter, ::org::apache::lucene::analysis::TokenFilter, KStemFilter, t_KStemFilter_init_, 0, 0, 0, 0, 0);

          void t_KStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemFilter), module, "KStemFilter", 0);
          }

          void t_KStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KStemFilter).tp_dict, "class_", make_descriptor(KStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KStemFilter).tp_dict, "wrapfn_", make_descriptor(t_KStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemFilter::initializeClass, 1)))
              return NULL;
            return t_KStemFilter::wrap_Object(KStemFilter(((t_KStemFilter *) arg)->object.this$));
          }
          static PyObject *t_KStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KStemFilter_init_(t_KStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            KStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = KStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KStemFilter_incrementToken(t_KStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyReader::class$ = NULL;
            jmethodID *DirectoryTaxonomyReader::mids$ = NULL;
            bool DirectoryTaxonomyReader::live$ = false;

            jclass DirectoryTaxonomyReader::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_49dc27eb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter;)V");
                mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_getCommitUserData_db60befd] = env->getMethodID(cls, "getCommitUserData", "()Ljava/util/Map;");
                mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_getParallelTaxonomyArrays_306e748e] = env->getMethodID(cls, "getParallelTaxonomyArrays", "()Lorg/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays;");
                mids$[mid_getPath_38cf071d] = env->getMethodID(cls, "getPath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
                mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
                mids$[mid_setCacheSize_39c7bd3c] = env->getMethodID(cls, "setCacheSize", "(I)V");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");
                mids$[mid_doOpenIfChanged_57c99022] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader;");
                mids$[mid_openIndexReader_109b8ac7] = env->getMethodID(cls, "openIndexReader", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/DirectoryReader;");
                mids$[mid_openIndexReader_880937e0] = env->getMethodID(cls, "openIndexReader", "(Lorg/apache/lucene/index/IndexWriter;)Lorg/apache/lucene/index/DirectoryReader;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyReader::DirectoryTaxonomyReader(const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter & a0) : ::org::apache::lucene::facet::taxonomy::TaxonomyReader(env->newObject(initializeClass, &mids$, mid_init$_49dc27eb, a0.this$)) {}

            DirectoryTaxonomyReader::DirectoryTaxonomyReader(const ::org::apache::lucene::store::Directory & a0) : ::org::apache::lucene::facet::taxonomy::TaxonomyReader(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

            ::java::util::Map DirectoryTaxonomyReader::getCommitUserData() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitUserData_db60befd]));
            }

            jint DirectoryTaxonomyReader::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
            }

            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays DirectoryTaxonomyReader::getParallelTaxonomyArrays() const
            {
              return ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays(env->callObjectMethod(this$, mids$[mid_getParallelTaxonomyArrays_306e748e]));
            }

            ::org::apache::lucene::facet::taxonomy::FacetLabel DirectoryTaxonomyReader::getPath(jint a0) const
            {
              return ::org::apache::lucene::facet::taxonomy::FacetLabel(env->callObjectMethod(this$, mids$[mid_getPath_38cf071d], a0));
            }

            jint DirectoryTaxonomyReader::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
            }

            void DirectoryTaxonomyReader::setCacheSize(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setCacheSize_39c7bd3c], a0);
            }

            ::java::lang::String DirectoryTaxonomyReader::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyReader_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyReader_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyReader_init_(t_DirectoryTaxonomyReader *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyReader_getCommitUserData(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getOrdinal(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getParallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getPath(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_getSize(t_DirectoryTaxonomyReader *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyReader_setCacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyReader_toString(t_DirectoryTaxonomyReader *self, PyObject *args);
            static int t_DirectoryTaxonomyReader_set__cacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__commitUserData(t_DirectoryTaxonomyReader *self, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__parallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, void *data);
            static PyObject *t_DirectoryTaxonomyReader_get__size(t_DirectoryTaxonomyReader *self, void *data);
            static PyGetSetDef t_DirectoryTaxonomyReader__fields_[] = {
              DECLARE_SET_FIELD(t_DirectoryTaxonomyReader, cacheSize),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, commitUserData),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, parallelTaxonomyArrays),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyReader, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyReader__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyReader, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getCommitUserData, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getOrdinal, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getParallelTaxonomyArrays, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getPath, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, getSize, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, setCacheSize, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyReader, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyReader, t_DirectoryTaxonomyReader, ::org::apache::lucene::facet::taxonomy::TaxonomyReader, DirectoryTaxonomyReader, t_DirectoryTaxonomyReader_init_, 0, 0, t_DirectoryTaxonomyReader__fields_, 0, 0);

            void t_DirectoryTaxonomyReader::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyReader), module, "DirectoryTaxonomyReader", 0);
            }

            void t_DirectoryTaxonomyReader::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyReader).tp_dict, "class_", make_descriptor(DirectoryTaxonomyReader::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyReader).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyReader::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyReader).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DirectoryTaxonomyReader_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyReader::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyReader::wrap_Object(DirectoryTaxonomyReader(((t_DirectoryTaxonomyReader *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyReader_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyReader::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyReader_init_(t_DirectoryTaxonomyReader *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter a0((jobject) NULL);
                  DirectoryTaxonomyReader object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyReader(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  DirectoryTaxonomyReader object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyReader(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyReader_getCommitUserData(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::java::util::Map result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCommitUserData());
                return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getCommitUserData", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getOrdinal(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.getOrdinal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getOrdinal", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getParallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getParallelTaxonomyArrays());
                return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getParallelTaxonomyArrays", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getPath(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::facet::taxonomy::FacetLabel result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getPath(a0));
                return ::org::apache::lucene::facet::taxonomy::t_FacetLabel::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getPath", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_getSize(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getSize());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "getSize", args, 2);
            }

            static PyObject *t_DirectoryTaxonomyReader_setCacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setCacheSize(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setCacheSize", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyReader_toString(t_DirectoryTaxonomyReader *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DirectoryTaxonomyReader), (PyObject *) self, "toString", args, 2);
            }

            static int t_DirectoryTaxonomyReader_set__cacheSize(t_DirectoryTaxonomyReader *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setCacheSize(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "cacheSize", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyReader_get__commitUserData(t_DirectoryTaxonomyReader *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getCommitUserData());
              return ::java::util::t_Map::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyReader_get__parallelTaxonomyArrays(t_DirectoryTaxonomyReader *self, void *data)
            {
              ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays value((jobject) NULL);
              OBJ_CALL(value = self->object.getParallelTaxonomyArrays());
              return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyReader_get__size(t_DirectoryTaxonomyReader *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/StandardQueryNodeProcessorPipeline.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *StandardQueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *StandardQueryNodeProcessorPipeline::mids$ = NULL;
              bool StandardQueryNodeProcessorPipeline::live$ = false;

              jclass StandardQueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/StandardQueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardQueryNodeProcessorPipeline::StandardQueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorPipeline(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_StandardQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardQueryNodeProcessorPipeline_init_(t_StandardQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_StandardQueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_StandardQueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardQueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardQueryNodeProcessorPipeline, t_StandardQueryNodeProcessorPipeline, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorPipeline, StandardQueryNodeProcessorPipeline, t_StandardQueryNodeProcessorPipeline_init_, 0, 0, 0, 0, 0);

              void t_StandardQueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardQueryNodeProcessorPipeline), module, "StandardQueryNodeProcessorPipeline", 0);
              }

              void t_StandardQueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardQueryNodeProcessorPipeline).tp_dict, "class_", make_descriptor(StandardQueryNodeProcessorPipeline::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardQueryNodeProcessorPipeline).tp_dict, "wrapfn_", make_descriptor(t_StandardQueryNodeProcessorPipeline::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardQueryNodeProcessorPipeline).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardQueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_StandardQueryNodeProcessorPipeline::wrap_Object(StandardQueryNodeProcessorPipeline(((t_StandardQueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_StandardQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardQueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardQueryNodeProcessorPipeline_init_(t_StandardQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                StandardQueryNodeProcessorPipeline object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = StandardQueryNodeProcessorPipeline(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQueryWrapperFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQueryWrapperFilter::class$ = NULL;
        jmethodID *MultiTermQueryWrapperFilter::mids$ = NULL;
        bool MultiTermQueryWrapperFilter::live$ = false;

        jclass MultiTermQueryWrapperFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQueryWrapperFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean MultiTermQueryWrapperFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet MultiTermQueryWrapperFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String MultiTermQueryWrapperFilter::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        jint MultiTermQueryWrapperFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String MultiTermQueryWrapperFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQueryWrapperFilter_of_(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_equals(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_getDocIdSet(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_getField(t_MultiTermQueryWrapperFilter *self);
        static PyObject *t_MultiTermQueryWrapperFilter_hashCode(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_toString(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_get__field(t_MultiTermQueryWrapperFilter *self, void *data);
        static PyObject *t_MultiTermQueryWrapperFilter_get__parameters_(t_MultiTermQueryWrapperFilter *self, void *data);
        static PyGetSetDef t_MultiTermQueryWrapperFilter__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQueryWrapperFilter, field),
          DECLARE_GET_FIELD(t_MultiTermQueryWrapperFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQueryWrapperFilter__methods_[] = {
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, getField, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQueryWrapperFilter, t_MultiTermQueryWrapperFilter, ::org::apache::lucene::search::Filter, MultiTermQueryWrapperFilter, abstract_init, 0, 0, t_MultiTermQueryWrapperFilter__fields_, 0, 0);
        PyObject *t_MultiTermQueryWrapperFilter::wrap_Object(const MultiTermQueryWrapperFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQueryWrapperFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQueryWrapperFilter *self = (t_MultiTermQueryWrapperFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQueryWrapperFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQueryWrapperFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQueryWrapperFilter *self = (t_MultiTermQueryWrapperFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQueryWrapperFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQueryWrapperFilter), module, "MultiTermQueryWrapperFilter", 0);
        }

        void t_MultiTermQueryWrapperFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQueryWrapperFilter).tp_dict, "class_", make_descriptor(MultiTermQueryWrapperFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQueryWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQueryWrapperFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQueryWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQueryWrapperFilter::initializeClass, 1)))
            return NULL;
          return t_MultiTermQueryWrapperFilter::wrap_Object(MultiTermQueryWrapperFilter(((t_MultiTermQueryWrapperFilter *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQueryWrapperFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQueryWrapperFilter_of_(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_equals(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_getDocIdSet(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_getField(t_MultiTermQueryWrapperFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_hashCode(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_toString(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_MultiTermQueryWrapperFilter_get__parameters_(t_MultiTermQueryWrapperFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_MultiTermQueryWrapperFilter_get__field(t_MultiTermQueryWrapperFilter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanTermBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanTermBuilder::class$ = NULL;
            jmethodID *SpanTermBuilder::mids$ = NULL;
            bool SpanTermBuilder::live$ = false;

            jclass SpanTermBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanTermBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanTermBuilder::SpanTermBuilder() : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanTermBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanTermBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanTermBuilder_init_(t_SpanTermBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanTermBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanTermBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanTermBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanTermBuilder, t_SpanTermBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanTermBuilder, t_SpanTermBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanTermBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanTermBuilder), module, "SpanTermBuilder", 0);
            }

            void t_SpanTermBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanTermBuilder).tp_dict, "class_", make_descriptor(SpanTermBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanTermBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanTermBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanTermBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanTermBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanTermBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanTermBuilder::wrap_Object(SpanTermBuilder(((t_SpanTermBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanTermBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanTermBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanTermBuilder_init_(t_SpanTermBuilder *self, PyObject *args, PyObject *kwds)
            {
              SpanTermBuilder object((jobject) NULL);

              INT_CALL(object = SpanTermBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *PhraseSlopQueryNode::class$ = NULL;
              jmethodID *PhraseSlopQueryNode::mids$ = NULL;
              bool PhraseSlopQueryNode::live$ = false;

              jclass PhraseSlopQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/PhraseSlopQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_bc870487] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;I)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getChild_b387c5e6] = env->getMethodID(cls, "getChild", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getValue_54c6a179] = env->getMethodID(cls, "getValue", "()I");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PhraseSlopQueryNode::PhraseSlopQueryNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, jint a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_bc870487, a0.this$, a1)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PhraseSlopQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode PhraseSlopQueryNode::getChild() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_getChild_b387c5e6]));
              }

              ::java::lang::CharSequence PhraseSlopQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              jint PhraseSlopQueryNode::getValue() const
              {
                return env->callIntMethod(this$, mids$[mid_getValue_54c6a179]);
              }

              void PhraseSlopQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence PhraseSlopQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String PhraseSlopQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_PhraseSlopQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PhraseSlopQueryNode_init_(t_PhraseSlopQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PhraseSlopQueryNode_cloneTree(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_getChild(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_getField(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_getValue(t_PhraseSlopQueryNode *self);
              static PyObject *t_PhraseSlopQueryNode_setField(t_PhraseSlopQueryNode *self, PyObject *arg);
              static PyObject *t_PhraseSlopQueryNode_toQueryString(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_toString(t_PhraseSlopQueryNode *self, PyObject *args);
              static PyObject *t_PhraseSlopQueryNode_get__child(t_PhraseSlopQueryNode *self, void *data);
              static PyObject *t_PhraseSlopQueryNode_get__field(t_PhraseSlopQueryNode *self, void *data);
              static int t_PhraseSlopQueryNode_set__field(t_PhraseSlopQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_PhraseSlopQueryNode_get__value(t_PhraseSlopQueryNode *self, void *data);
              static PyGetSetDef t_PhraseSlopQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_PhraseSlopQueryNode, child),
                DECLARE_GETSET_FIELD(t_PhraseSlopQueryNode, field),
                DECLARE_GET_FIELD(t_PhraseSlopQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_PhraseSlopQueryNode__methods_[] = {
                DECLARE_METHOD(t_PhraseSlopQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getChild, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, setField, METH_O),
                DECLARE_METHOD(t_PhraseSlopQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_PhraseSlopQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PhraseSlopQueryNode, t_PhraseSlopQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, PhraseSlopQueryNode, t_PhraseSlopQueryNode_init_, 0, 0, t_PhraseSlopQueryNode__fields_, 0, 0);

              void t_PhraseSlopQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(PhraseSlopQueryNode), module, "PhraseSlopQueryNode", 0);
              }

              void t_PhraseSlopQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNode).tp_dict, "class_", make_descriptor(PhraseSlopQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNode).tp_dict, "wrapfn_", make_descriptor(t_PhraseSlopQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PhraseSlopQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PhraseSlopQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PhraseSlopQueryNode::initializeClass, 1)))
                  return NULL;
                return t_PhraseSlopQueryNode::wrap_Object(PhraseSlopQueryNode(((t_PhraseSlopQueryNode *) arg)->object.this$));
              }
              static PyObject *t_PhraseSlopQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PhraseSlopQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PhraseSlopQueryNode_init_(t_PhraseSlopQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                jint a1;
                PhraseSlopQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = PhraseSlopQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_PhraseSlopQueryNode_cloneTree(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_getChild(t_PhraseSlopQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);
                OBJ_CALL(result = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
              }

              static PyObject *t_PhraseSlopQueryNode_getField(t_PhraseSlopQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_PhraseSlopQueryNode_getValue(t_PhraseSlopQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getValue());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_PhraseSlopQueryNode_setField(t_PhraseSlopQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_PhraseSlopQueryNode_toQueryString(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_toString(t_PhraseSlopQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(PhraseSlopQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_PhraseSlopQueryNode_get__child(t_PhraseSlopQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode value((jobject) NULL);
                OBJ_CALL(value = self->object.getChild());
                return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(value);
              }

              static PyObject *t_PhraseSlopQueryNode_get__field(t_PhraseSlopQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_PhraseSlopQueryNode_set__field(t_PhraseSlopQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_PhraseSlopQueryNode_get__value(t_PhraseSlopQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getValue());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/QueryWrapperFilter.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *QueryWrapperFilter::class$ = NULL;
        jmethodID *QueryWrapperFilter::mids$ = NULL;
        bool QueryWrapperFilter::live$ = false;

        jclass QueryWrapperFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/QueryWrapperFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryWrapperFilter::QueryWrapperFilter(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        jboolean QueryWrapperFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet QueryWrapperFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::Query QueryWrapperFilter::getQuery() const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
        }

        jint QueryWrapperFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String QueryWrapperFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_QueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryWrapperFilter_init_(t_QueryWrapperFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryWrapperFilter_equals(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_getDocIdSet(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_getQuery(t_QueryWrapperFilter *self);
        static PyObject *t_QueryWrapperFilter_hashCode(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_toString(t_QueryWrapperFilter *self, PyObject *args);
        static PyObject *t_QueryWrapperFilter_get__query(t_QueryWrapperFilter *self, void *data);
        static PyGetSetDef t_QueryWrapperFilter__fields_[] = {
          DECLARE_GET_FIELD(t_QueryWrapperFilter, query),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_QueryWrapperFilter__methods_[] = {
          DECLARE_METHOD(t_QueryWrapperFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryWrapperFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryWrapperFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, getQuery, METH_NOARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_QueryWrapperFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(QueryWrapperFilter, t_QueryWrapperFilter, ::org::apache::lucene::search::Filter, QueryWrapperFilter, t_QueryWrapperFilter_init_, 0, 0, t_QueryWrapperFilter__fields_, 0, 0);

        void t_QueryWrapperFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryWrapperFilter), module, "QueryWrapperFilter", 0);
        }

        void t_QueryWrapperFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(QueryWrapperFilter).tp_dict, "class_", make_descriptor(QueryWrapperFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(QueryWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_QueryWrapperFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(QueryWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryWrapperFilter::initializeClass, 1)))
            return NULL;
          return t_QueryWrapperFilter::wrap_Object(QueryWrapperFilter(((t_QueryWrapperFilter *) arg)->object.this$));
        }
        static PyObject *t_QueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryWrapperFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryWrapperFilter_init_(t_QueryWrapperFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          QueryWrapperFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            INT_CALL(object = QueryWrapperFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryWrapperFilter_equals(t_QueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_getDocIdSet(t_QueryWrapperFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_getQuery(t_QueryWrapperFilter *self)
        {
          ::org::apache::lucene::search::Query result((jobject) NULL);
          OBJ_CALL(result = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(result);
        }

        static PyObject *t_QueryWrapperFilter_hashCode(t_QueryWrapperFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_toString(t_QueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(QueryWrapperFilter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_QueryWrapperFilter_get__query(t_QueryWrapperFilter *self, void *data)
        {
          ::org::apache::lucene::search::Query value((jobject) NULL);
          OBJ_CALL(value = self->object.getQuery());
          return ::org::apache::lucene::search::t_Query::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractGroupFacetCollector$FacetEntry::class$ = NULL;
          jmethodID *AbstractGroupFacetCollector$FacetEntry::mids$ = NULL;
          bool AbstractGroupFacetCollector$FacetEntry::live$ = false;

          jclass AbstractGroupFacetCollector$FacetEntry::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_738fc2ce] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;I)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getCount_54c6a179] = env->getMethodID(cls, "getCount", "()I");
              mids$[mid_getValue_4ae19461] = env->getMethodID(cls, "getValue", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractGroupFacetCollector$FacetEntry::AbstractGroupFacetCollector$FacetEntry(const ::org::apache::lucene::util::BytesRef & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_738fc2ce, a0.this$, a1)) {}

          jboolean AbstractGroupFacetCollector$FacetEntry::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint AbstractGroupFacetCollector$FacetEntry::getCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getCount_54c6a179]);
          }

          ::org::apache::lucene::util::BytesRef AbstractGroupFacetCollector$FacetEntry::getValue() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getValue_4ae19461]));
          }

          jint AbstractGroupFacetCollector$FacetEntry::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String AbstractGroupFacetCollector$FacetEntry::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractGroupFacetCollector$FacetEntry_init_(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_equals(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getCount(t_AbstractGroupFacetCollector$FacetEntry *self);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getValue(t_AbstractGroupFacetCollector$FacetEntry *self);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_hashCode(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_toString(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__count(t_AbstractGroupFacetCollector$FacetEntry *self, void *data);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__value(t_AbstractGroupFacetCollector$FacetEntry *self, void *data);
          static PyGetSetDef t_AbstractGroupFacetCollector$FacetEntry__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$FacetEntry, count),
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$FacetEntry, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractGroupFacetCollector$FacetEntry__methods_[] = {
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, equals, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, getCount, METH_NOARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, getValue, METH_NOARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractGroupFacetCollector$FacetEntry, t_AbstractGroupFacetCollector$FacetEntry, ::java::lang::Object, AbstractGroupFacetCollector$FacetEntry, t_AbstractGroupFacetCollector$FacetEntry_init_, 0, 0, t_AbstractGroupFacetCollector$FacetEntry__fields_, 0, 0);

          void t_AbstractGroupFacetCollector$FacetEntry::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), module, "AbstractGroupFacetCollector$FacetEntry", 0);
          }

          void t_AbstractGroupFacetCollector$FacetEntry::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$FacetEntry).tp_dict, "class_", make_descriptor(AbstractGroupFacetCollector$FacetEntry::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$FacetEntry).tp_dict, "wrapfn_", make_descriptor(t_AbstractGroupFacetCollector$FacetEntry::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$FacetEntry).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractGroupFacetCollector$FacetEntry::initializeClass, 1)))
              return NULL;
            return t_AbstractGroupFacetCollector$FacetEntry::wrap_Object(AbstractGroupFacetCollector$FacetEntry(((t_AbstractGroupFacetCollector$FacetEntry *) arg)->object.this$));
          }
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractGroupFacetCollector$FacetEntry::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractGroupFacetCollector$FacetEntry_init_(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;
            AbstractGroupFacetCollector$FacetEntry object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              INT_CALL(object = AbstractGroupFacetCollector$FacetEntry(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_equals(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getCount(t_AbstractGroupFacetCollector$FacetEntry *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getValue(t_AbstractGroupFacetCollector$FacetEntry *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_hashCode(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_toString(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__count(t_AbstractGroupFacetCollector$FacetEntry *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__value(t_AbstractGroupFacetCollector$FacetEntry *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RateLimiter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RateLimiter::class$ = NULL;
        jmethodID *RateLimiter::mids$ = NULL;
        bool RateLimiter::live$ = false;

        jclass RateLimiter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RateLimiter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMbPerSec_54c6a174] = env->getMethodID(cls, "getMbPerSec", "()D");
            mids$[mid_getMinPauseCheckBytes_54c6a17a] = env->getMethodID(cls, "getMinPauseCheckBytes", "()J");
            mids$[mid_pause_0ee6df33] = env->getMethodID(cls, "pause", "(J)J");
            mids$[mid_setMbPerSec_5d1c7645] = env->getMethodID(cls, "setMbPerSec", "(D)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RateLimiter::RateLimiter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jdouble RateLimiter::getMbPerSec() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getMbPerSec_54c6a174]);
        }

        jlong RateLimiter::getMinPauseCheckBytes() const
        {
          return env->callLongMethod(this$, mids$[mid_getMinPauseCheckBytes_54c6a17a]);
        }

        jlong RateLimiter::pause(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_pause_0ee6df33], a0);
        }

        void RateLimiter::setMbPerSec(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMbPerSec_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/store/RateLimiter$SimpleRateLimiter.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RateLimiter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RateLimiter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RateLimiter_init_(t_RateLimiter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RateLimiter_getMbPerSec(t_RateLimiter *self);
        static PyObject *t_RateLimiter_getMinPauseCheckBytes(t_RateLimiter *self);
        static PyObject *t_RateLimiter_pause(t_RateLimiter *self, PyObject *arg);
        static PyObject *t_RateLimiter_setMbPerSec(t_RateLimiter *self, PyObject *arg);
        static PyObject *t_RateLimiter_get__mbPerSec(t_RateLimiter *self, void *data);
        static int t_RateLimiter_set__mbPerSec(t_RateLimiter *self, PyObject *arg, void *data);
        static PyObject *t_RateLimiter_get__minPauseCheckBytes(t_RateLimiter *self, void *data);
        static PyGetSetDef t_RateLimiter__fields_[] = {
          DECLARE_GETSET_FIELD(t_RateLimiter, mbPerSec),
          DECLARE_GET_FIELD(t_RateLimiter, minPauseCheckBytes),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RateLimiter__methods_[] = {
          DECLARE_METHOD(t_RateLimiter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RateLimiter, getMbPerSec, METH_NOARGS),
          DECLARE_METHOD(t_RateLimiter, getMinPauseCheckBytes, METH_NOARGS),
          DECLARE_METHOD(t_RateLimiter, pause, METH_O),
          DECLARE_METHOD(t_RateLimiter, setMbPerSec, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RateLimiter, t_RateLimiter, ::java::lang::Object, RateLimiter, t_RateLimiter_init_, 0, 0, t_RateLimiter__fields_, 0, 0);

        void t_RateLimiter::install(PyObject *module)
        {
          installType(&PY_TYPE(RateLimiter), module, "RateLimiter", 0);
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "SimpleRateLimiter", make_descriptor(&PY_TYPE(RateLimiter$SimpleRateLimiter)));
        }

        void t_RateLimiter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "class_", make_descriptor(RateLimiter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "wrapfn_", make_descriptor(t_RateLimiter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RateLimiter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RateLimiter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RateLimiter::initializeClass, 1)))
            return NULL;
          return t_RateLimiter::wrap_Object(RateLimiter(((t_RateLimiter *) arg)->object.this$));
        }
        static PyObject *t_RateLimiter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RateLimiter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RateLimiter_init_(t_RateLimiter *self, PyObject *args, PyObject *kwds)
        {
          RateLimiter object((jobject) NULL);

          INT_CALL(object = RateLimiter());
          self->object = object;

          return 0;
        }

        static PyObject *t_RateLimiter_getMbPerSec(t_RateLimiter *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getMbPerSec());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_RateLimiter_getMinPauseCheckBytes(t_RateLimiter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RateLimiter_pause(t_RateLimiter *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.pause(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "pause", arg);
          return NULL;
        }

        static PyObject *t_RateLimiter_setMbPerSec(t_RateLimiter *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setMbPerSec(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMbPerSec", arg);
          return NULL;
        }

        static PyObject *t_RateLimiter_get__mbPerSec(t_RateLimiter *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getMbPerSec());
          return PyFloat_FromDouble((double) value);
        }
        static int t_RateLimiter_set__mbPerSec(t_RateLimiter *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setMbPerSec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "mbPerSec", arg);
          return -1;
        }

        static PyObject *t_RateLimiter_get__minPauseCheckBytes(t_RateLimiter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMinPauseCheckBytes());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/Weight.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/join/ScoreMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinQuery::class$ = NULL;
          jmethodID *ToParentBlockJoinQuery::mids$ = NULL;
          bool ToParentBlockJoinQuery::live$ = false;

          jclass ToParentBlockJoinQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_196d5feb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/join/ScoreMode;)V");
              mids$[mid_createWeight_367763cb] = env->getMethodID(cls, "createWeight", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/Weight;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinQuery::ToParentBlockJoinQuery(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::search::Filter & a1, const ::org::apache::lucene::search::join::ScoreMode & a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_196d5feb, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Weight ToParentBlockJoinQuery::createWeight(const ::org::apache::lucene::search::IndexSearcher & a0) const
          {
            return ::org::apache::lucene::search::Weight(env->callObjectMethod(this$, mids$[mid_createWeight_367763cb], a0.this$));
          }

          jboolean ToParentBlockJoinQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void ToParentBlockJoinQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          jint ToParentBlockJoinQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query ToParentBlockJoinQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String ToParentBlockJoinQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToParentBlockJoinQuery_init_(t_ToParentBlockJoinQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinQuery_createWeight(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_equals(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_extractTerms(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_hashCode(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_rewrite(t_ToParentBlockJoinQuery *self, PyObject *args);
          static PyObject *t_ToParentBlockJoinQuery_toString(t_ToParentBlockJoinQuery *self, PyObject *args);

          static PyMethodDef t_ToParentBlockJoinQuery__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, createWeight, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_ToParentBlockJoinQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinQuery, t_ToParentBlockJoinQuery, ::org::apache::lucene::search::Query, ToParentBlockJoinQuery, t_ToParentBlockJoinQuery_init_, 0, 0, 0, 0, 0);

          void t_ToParentBlockJoinQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinQuery), module, "ToParentBlockJoinQuery", 0);
          }

          void t_ToParentBlockJoinQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinQuery).tp_dict, "class_", make_descriptor(ToParentBlockJoinQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinQuery).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinQuery::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinQuery::wrap_Object(ToParentBlockJoinQuery(((t_ToParentBlockJoinQuery *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToParentBlockJoinQuery_init_(t_ToParentBlockJoinQuery *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Query a0((jobject) NULL);
            ::org::apache::lucene::search::Filter a1((jobject) NULL);
            ::org::apache::lucene::search::join::ScoreMode a2((jobject) NULL);
            PyTypeObject **p2;
            ToParentBlockJoinQuery object((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::join::ScoreMode::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::search::join::t_ScoreMode::parameters_))
            {
              INT_CALL(object = ToParentBlockJoinQuery(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinQuery_createWeight(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
            ::org::apache::lucene::search::Weight result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.createWeight(a0));
              return ::org::apache::lucene::search::t_Weight::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "createWeight", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_equals(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_extractTerms(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_hashCode(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_rewrite(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_ToParentBlockJoinQuery_toString(t_ToParentBlockJoinQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinQuery), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Long.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Long::class$ = NULL;
    jmethodID *Long::mids$ = NULL;
    bool Long::live$ = false;
    jlong Long::MAX_VALUE = (jlong) 0;
    jlong Long::MIN_VALUE = (jlong) 0;
    jint Long::SIZE = (jint) 0;
    ::java::lang::Class *Long::TYPE = NULL;

    jclass Long::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Long");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_0ee6df2f] = env->getMethodID(cls, "<init>", "(J)V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_bitCount_0ee6df30] = env->getStaticMethodID(cls, "bitCount", "(J)I");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_compare_a7e12cbb] = env->getStaticMethodID(cls, "compare", "(JJ)I");
        mids$[mid_compareTo_da55802e] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Long;)I");
        mids$[mid_decode_ee9f94be] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_getLong_ee9f94be] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_getLong_9f081a1d] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;J)Ljava/lang/Long;");
        mids$[mid_getLong_9a12142f] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;Ljava/lang/Long;)Ljava/lang/Long;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_highestOneBit_0ee6df33] = env->getStaticMethodID(cls, "highestOneBit", "(J)J");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_lowestOneBit_0ee6df33] = env->getStaticMethodID(cls, "lowestOneBit", "(J)J");
        mids$[mid_numberOfLeadingZeros_0ee6df30] = env->getStaticMethodID(cls, "numberOfLeadingZeros", "(J)I");
        mids$[mid_numberOfTrailingZeros_0ee6df30] = env->getStaticMethodID(cls, "numberOfTrailingZeros", "(J)I");
        mids$[mid_parseLong_5fdc3f54] = env->getStaticMethodID(cls, "parseLong", "(Ljava/lang/String;)J");
        mids$[mid_parseLong_6e53ccda] = env->getStaticMethodID(cls, "parseLong", "(Ljava/lang/String;I)J");
        mids$[mid_reverse_0ee6df33] = env->getStaticMethodID(cls, "reverse", "(J)J");
        mids$[mid_reverseBytes_0ee6df33] = env->getStaticMethodID(cls, "reverseBytes", "(J)J");
        mids$[mid_rotateLeft_25d05c93] = env->getStaticMethodID(cls, "rotateLeft", "(JI)J");
        mids$[mid_rotateRight_25d05c93] = env->getStaticMethodID(cls, "rotateRight", "(JI)J");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
        mids$[mid_signum_0ee6df30] = env->getStaticMethodID(cls, "signum", "(J)I");
        mids$[mid_toBinaryString_3e02f30e] = env->getStaticMethodID(cls, "toBinaryString", "(J)Ljava/lang/String;");
        mids$[mid_toHexString_3e02f30e] = env->getStaticMethodID(cls, "toHexString", "(J)Ljava/lang/String;");
        mids$[mid_toOctalString_3e02f30e] = env->getStaticMethodID(cls, "toOctalString", "(J)Ljava/lang/String;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_toString_3e02f30e] = env->getStaticMethodID(cls, "toString", "(J)Ljava/lang/String;");
        mids$[mid_toString_36a2b01a] = env->getStaticMethodID(cls, "toString", "(JI)Ljava/lang/String;");
        mids$[mid_valueOf_62a69723] = env->getStaticMethodID(cls, "valueOf", "(J)Ljava/lang/Long;");
        mids$[mid_valueOf_ee9f94be] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Long;");
        mids$[mid_valueOf_212f058c] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Long;");

        class$ = (::java::lang::Class *) new JObject(cls);
        cls = (jclass) class$->this$;

        MAX_VALUE = env->getStaticLongField(cls, "MAX_VALUE");
        MIN_VALUE = env->getStaticLongField(cls, "MIN_VALUE");
        SIZE = env->getStaticIntField(cls, "SIZE");
        TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Long::Long(jlong a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_0ee6df2f, a0)) {}

    Long::Long(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    jint Long::bitCount(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_bitCount_0ee6df30], a0);
    }

    jbyte Long::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jint Long::compare(jlong a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_compare_a7e12cbb], a0, a1);
    }

    jint Long::compareTo(const Long & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_compareTo_da55802e], a0.this$);
    }

    Long Long::decode(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_decode_ee9f94be], a0.this$));
    }

    jdouble Long::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jboolean Long::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    jfloat Long::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    Long Long::getLong(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_ee9f94be], a0.this$));
    }

    Long Long::getLong(const ::java::lang::String & a0, jlong a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_9f081a1d], a0.this$, a1));
    }

    Long Long::getLong(const ::java::lang::String & a0, const Long & a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_9a12142f], a0.this$, a1.this$));
    }

    jint Long::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jlong Long::highestOneBit(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_highestOneBit_0ee6df33], a0);
    }

    jint Long::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Long::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jlong Long::lowestOneBit(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_lowestOneBit_0ee6df33], a0);
    }

    jint Long::numberOfLeadingZeros(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfLeadingZeros_0ee6df30], a0);
    }

    jint Long::numberOfTrailingZeros(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_numberOfTrailingZeros_0ee6df30], a0);
    }

    jlong Long::parseLong(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseLong_5fdc3f54], a0.this$);
    }

    jlong Long::parseLong(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_parseLong_6e53ccda], a0.this$, a1);
    }

    jlong Long::reverse(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_reverse_0ee6df33], a0);
    }

    jlong Long::reverseBytes(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_reverseBytes_0ee6df33], a0);
    }

    jlong Long::rotateLeft(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_rotateLeft_25d05c93], a0, a1);
    }

    jlong Long::rotateRight(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticLongMethod(cls, mids$[mid_rotateRight_25d05c93], a0, a1);
    }

    jshort Long::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }

    jint Long::signum(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return env->callStaticIntMethod(cls, mids$[mid_signum_0ee6df30], a0);
    }

    ::java::lang::String Long::toBinaryString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toBinaryString_3e02f30e], a0));
    }

    ::java::lang::String Long::toHexString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_3e02f30e], a0));
    }

    ::java::lang::String Long::toOctalString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toOctalString_3e02f30e], a0));
    }

    ::java::lang::String Long::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::lang::String Long::toString(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_3e02f30e], a0));
    }

    ::java::lang::String Long::toString(jlong a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_36a2b01a], a0, a1));
    }

    Long Long::valueOf(jlong a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_62a69723], a0));
    }

    Long Long::valueOf(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ee9f94be], a0.this$));
    }

    Long Long::valueOf(const ::java::lang::String & a0, jint a1)
    {
      jclass cls = env->getClass(initializeClass);
      return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_212f058c], a0.this$, a1));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Long_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Long_init_(t_Long *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Long_bitCount(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_byteValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_compare(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_compareTo(t_Long *self, PyObject *arg);
    static PyObject *t_Long_decode(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_doubleValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_equals(t_Long *self, PyObject *args);
    static PyObject *t_Long_floatValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_getLong(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_hashCode(t_Long *self, PyObject *args);
    static PyObject *t_Long_highestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_intValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_longValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_lowestOneBit(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_parseLong(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_reverse(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_reverseBytes(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_rotateLeft(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_rotateRight(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_shortValue(t_Long *self, PyObject *args);
    static PyObject *t_Long_signum(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toBinaryString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toHexString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toOctalString(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Long_toString(t_Long *self, PyObject *args);
    static PyObject *t_Long_toString_(PyTypeObject *type, PyObject *args);
    static PyObject *t_Long_valueOf(PyTypeObject *type, PyObject *args);

    static PyMethodDef t_Long__methods_[] = {
      DECLARE_METHOD(t_Long, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, bitCount, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, byteValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, compare, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, compareTo, METH_O),
      DECLARE_METHOD(t_Long, decode, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, doubleValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, equals, METH_VARARGS),
      DECLARE_METHOD(t_Long, floatValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, getLong, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_Long, highestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, intValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, longValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, lowestOneBit, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, numberOfLeadingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, numberOfTrailingZeros, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, parseLong, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, reverse, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, reverseBytes, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, rotateLeft, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, rotateRight, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, shortValue, METH_VARARGS),
      DECLARE_METHOD(t_Long, signum, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toBinaryString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toHexString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toOctalString, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Long, toString, METH_VARARGS),
      DECLARE_METHOD(t_Long, toString_, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Long, valueOf, METH_VARARGS | METH_CLASS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Long, t_Long, ::java::lang::Number, Long, t_Long_init_, 0, 0, 0, 0, 0);

    void t_Long::install(PyObject *module)
    {
      installType(&PY_TYPE(Long), module, "Long", 0);
    }

    void t_Long::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "class_", make_descriptor(Long::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "wrapfn_", make_descriptor(unboxLong));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "boxfn_", make_descriptor(boxLong));
      env->getClass(Long::initializeClass);
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "MAX_VALUE", make_descriptor(Long::MAX_VALUE));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "MIN_VALUE", make_descriptor(Long::MIN_VALUE));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "SIZE", make_descriptor(Long::SIZE));
      PyDict_SetItemString(PY_TYPE(Long).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Long::TYPE)));
    }

    static PyObject *t_Long_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Long::initializeClass, 1)))
        return NULL;
      return t_Long::wrap_Object(Long(((t_Long *) arg)->object.this$));
    }
    static PyObject *t_Long_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Long::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Long_init_(t_Long *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          Long object((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            INT_CALL(object = Long(a0));
            self->object = object;
            break;
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Long object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = Long(a0));
            self->object = object;
            break;
          }
        }
       default:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_Long_bitCount(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::bitCount(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "bitCount", arg);
      return NULL;
    }

    static PyObject *t_Long_byteValue(t_Long *self, PyObject *args)
    {
      jbyte result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.byteValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "byteValue", args, 2);
    }

    static PyObject *t_Long_compare(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jlong a1;
      jint result;

      if (!parseArgs(args, "JJ", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::compare(a0, a1));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "compare", args);
      return NULL;
    }

    static PyObject *t_Long_compareTo(t_Long *self, PyObject *arg)
    {
      Long a0((jobject) NULL);
      jint result;

      if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Long), &a0))
      {
        OBJ_CALL(result = self->object.compareTo(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
      return NULL;
    }

    static PyObject *t_Long_decode(PyTypeObject *type, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      Long result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::decode(a0));
        return t_Long::wrap_Object(result);
      }

      PyErr_SetArgsError(type, "decode", arg);
      return NULL;
    }

    static PyObject *t_Long_doubleValue(t_Long *self, PyObject *args)
    {
      jdouble result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.doubleValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "doubleValue", args, 2);
    }

    static PyObject *t_Long_equals(t_Long *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_Long_floatValue(t_Long *self, PyObject *args)
    {
      jfloat result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.floatValue());
        return PyFloat_FromDouble((double) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "floatValue", args, 2);
    }

    static PyObject *t_Long_getLong(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0));
            return t_Long::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          Long result((jobject) NULL);

          if (!parseArgs(args, "sJ", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Long a1((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Long), &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::getLong(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "getLong", args);
      return NULL;
    }

    static PyObject *t_Long_hashCode(t_Long *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_Long_highestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::highestOneBit(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "highestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Long_intValue(t_Long *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.intValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "intValue", args, 2);
    }

    static PyObject *t_Long_longValue(t_Long *self, PyObject *args)
    {
      jlong result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.longValue());
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "longValue", args, 2);
    }

    static PyObject *t_Long_lowestOneBit(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::lowestOneBit(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "lowestOneBit", arg);
      return NULL;
    }

    static PyObject *t_Long_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::numberOfLeadingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfLeadingZeros", arg);
      return NULL;
    }

    static PyObject *t_Long_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::numberOfTrailingZeros(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "numberOfTrailingZeros", arg);
      return NULL;
    }

    static PyObject *t_Long_parseLong(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::parseLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::parseLong(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }

      PyErr_SetArgsError(type, "parseLong", args);
      return NULL;
    }

    static PyObject *t_Long_reverse(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::reverse(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "reverse", arg);
      return NULL;
    }

    static PyObject *t_Long_reverseBytes(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::reverseBytes(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "reverseBytes", arg);
      return NULL;
    }

    static PyObject *t_Long_rotateLeft(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jint a1;
      jlong result;

      if (!parseArgs(args, "JI", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::rotateLeft(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "rotateLeft", args);
      return NULL;
    }

    static PyObject *t_Long_rotateRight(PyTypeObject *type, PyObject *args)
    {
      jlong a0;
      jint a1;
      jlong result;

      if (!parseArgs(args, "JI", &a0, &a1))
      {
        OBJ_CALL(result = ::java::lang::Long::rotateRight(a0, a1));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError(type, "rotateRight", args);
      return NULL;
    }

    static PyObject *t_Long_shortValue(t_Long *self, PyObject *args)
    {
      jshort result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.shortValue());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "shortValue", args, 2);
    }

    static PyObject *t_Long_signum(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      jint result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::signum(a0));
        return PyInt_FromLong((long) result);
      }

      PyErr_SetArgsError(type, "signum", arg);
      return NULL;
    }

    static PyObject *t_Long_toBinaryString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toBinaryString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toBinaryString", arg);
      return NULL;
    }

    static PyObject *t_Long_toHexString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toHexString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toHexString", arg);
      return NULL;
    }

    static PyObject *t_Long_toOctalString(PyTypeObject *type, PyObject *arg)
    {
      jlong a0;
      ::java::lang::String result((jobject) NULL);

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = ::java::lang::Long::toOctalString(a0));
        return j2p(result);
      }

      PyErr_SetArgsError(type, "toOctalString", arg);
      return NULL;
    }

    static PyObject *t_Long_toString(t_Long *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Long), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_Long_toString_(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::toString(a0));
            return j2p(result);
          }
        }
        break;
       case 2:
        {
          jlong a0;
          jint a1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::toString(a0, a1));
            return j2p(result);
          }
        }
      }

      PyErr_SetArgsError(type, "toString_", args);
      return NULL;
    }

    static PyObject *t_Long_valueOf(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          jlong a0;
          Long result((jobject) NULL);

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0));
            return t_Long::wrap_Object(result);
          }
        }
        {
          ::java::lang::String a0((jobject) NULL);
          Long result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0));
            return t_Long::wrap_Object(result);
          }
        }
        break;
       case 2:
        {
          ::java::lang::String a0((jobject) NULL);
          jint a1;
          Long result((jobject) NULL);

          if (!parseArgs(args, "sI", &a0, &a1))
          {
            OBJ_CALL(result = ::java::lang::Long::valueOf(a0, a1));
            return t_Long::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "valueOf", args);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NumericUtils.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/NumericUtils$IntRangeBuilder.h"
#include "org/apache/lucene/util/NumericUtils$LongRangeBuilder.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NumericUtils::class$ = NULL;
        jmethodID *NumericUtils::mids$ = NULL;
        bool NumericUtils::live$ = false;
        jint NumericUtils::BUF_SIZE_INT = (jint) 0;
        jint NumericUtils::BUF_SIZE_LONG = (jint) 0;
        jint NumericUtils::PRECISION_STEP_DEFAULT = (jint) 0;
        jint NumericUtils::PRECISION_STEP_DEFAULT_32 = (jint) 0;
        jbyte NumericUtils::SHIFT_START_INT = (jbyte) 0;
        jbyte NumericUtils::SHIFT_START_LONG = (jbyte) 0;

        jclass NumericUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NumericUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_doubleToSortableLong_5d1c7659] = env->getStaticMethodID(cls, "doubleToSortableLong", "(D)J");
            mids$[mid_filterPrefixCodedInts_d737078b] = env->getStaticMethodID(cls, "filterPrefixCodedInts", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_filterPrefixCodedLongs_d737078b] = env->getStaticMethodID(cls, "filterPrefixCodedLongs", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_floatToSortableInt_06298cb4] = env->getStaticMethodID(cls, "floatToSortableInt", "(F)I");
            mids$[mid_getMaxInt_d0b7bb08] = env->getStaticMethodID(cls, "getMaxInt", "(Lorg/apache/lucene/index/Terms;)I");
            mids$[mid_getMaxLong_d0b7bb0b] = env->getStaticMethodID(cls, "getMaxLong", "(Lorg/apache/lucene/index/Terms;)J");
            mids$[mid_getMinInt_d0b7bb08] = env->getStaticMethodID(cls, "getMinInt", "(Lorg/apache/lucene/index/Terms;)I");
            mids$[mid_getMinLong_d0b7bb0b] = env->getStaticMethodID(cls, "getMinLong", "(Lorg/apache/lucene/index/Terms;)J");
            mids$[mid_getPrefixCodedIntShift_7bc03ddb] = env->getStaticMethodID(cls, "getPrefixCodedIntShift", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_getPrefixCodedLongShift_7bc03ddb] = env->getStaticMethodID(cls, "getPrefixCodedLongShift", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_intToPrefixCoded_362d2138] = env->getStaticMethodID(cls, "intToPrefixCoded", "(IILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_intToPrefixCodedBytes_362d2138] = env->getStaticMethodID(cls, "intToPrefixCodedBytes", "(IILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_longToPrefixCoded_4adff79b] = env->getStaticMethodID(cls, "longToPrefixCoded", "(JILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_longToPrefixCodedBytes_4adff79b] = env->getStaticMethodID(cls, "longToPrefixCodedBytes", "(JILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_prefixCodedToInt_7bc03ddb] = env->getStaticMethodID(cls, "prefixCodedToInt", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_prefixCodedToLong_7bc03dd8] = env->getStaticMethodID(cls, "prefixCodedToLong", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_sortableDoubleBits_0ee6df33] = env->getStaticMethodID(cls, "sortableDoubleBits", "(J)J");
            mids$[mid_sortableFloatBits_39c7bd23] = env->getStaticMethodID(cls, "sortableFloatBits", "(I)I");
            mids$[mid_sortableIntToFloat_39c7bd2c] = env->getStaticMethodID(cls, "sortableIntToFloat", "(I)F");
            mids$[mid_sortableLongToDouble_0ee6df3d] = env->getStaticMethodID(cls, "sortableLongToDouble", "(J)D");
            mids$[mid_splitIntRange_b263c325] = env->getStaticMethodID(cls, "splitIntRange", "(Lorg/apache/lucene/util/NumericUtils$IntRangeBuilder;III)V");
            mids$[mid_splitLongRange_585f2c31] = env->getStaticMethodID(cls, "splitLongRange", "(Lorg/apache/lucene/util/NumericUtils$LongRangeBuilder;IJJ)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BUF_SIZE_INT = env->getStaticIntField(cls, "BUF_SIZE_INT");
            BUF_SIZE_LONG = env->getStaticIntField(cls, "BUF_SIZE_LONG");
            PRECISION_STEP_DEFAULT = env->getStaticIntField(cls, "PRECISION_STEP_DEFAULT");
            PRECISION_STEP_DEFAULT_32 = env->getStaticIntField(cls, "PRECISION_STEP_DEFAULT_32");
            SHIFT_START_INT = env->getStaticByteField(cls, "SHIFT_START_INT");
            SHIFT_START_LONG = env->getStaticByteField(cls, "SHIFT_START_LONG");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong NumericUtils::doubleToSortableLong(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_doubleToSortableLong_5d1c7659], a0);
        }

        ::org::apache::lucene::index::TermsEnum NumericUtils::filterPrefixCodedInts(const ::org::apache::lucene::index::TermsEnum & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::TermsEnum(env->callStaticObjectMethod(cls, mids$[mid_filterPrefixCodedInts_d737078b], a0.this$));
        }

        ::org::apache::lucene::index::TermsEnum NumericUtils::filterPrefixCodedLongs(const ::org::apache::lucene::index::TermsEnum & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::TermsEnum(env->callStaticObjectMethod(cls, mids$[mid_filterPrefixCodedLongs_d737078b], a0.this$));
        }

        jint NumericUtils::floatToSortableInt(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_floatToSortableInt_06298cb4], a0);
        }

        jint NumericUtils::getMaxInt(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getMaxInt_d0b7bb08], a0.this$);
        }

        jlong NumericUtils::getMaxLong(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getMaxLong_d0b7bb0b], a0.this$);
        }

        jint NumericUtils::getMinInt(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getMinInt_d0b7bb08], a0.this$);
        }

        jlong NumericUtils::getMinLong(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getMinLong_d0b7bb0b], a0.this$);
        }

        jint NumericUtils::getPrefixCodedIntShift(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getPrefixCodedIntShift_7bc03ddb], a0.this$);
        }

        jint NumericUtils::getPrefixCodedLongShift(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getPrefixCodedLongShift_7bc03ddb], a0.this$);
        }

        void NumericUtils::intToPrefixCoded(jint a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_intToPrefixCoded_362d2138], a0, a1, a2.this$);
        }

        void NumericUtils::intToPrefixCodedBytes(jint a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_intToPrefixCodedBytes_362d2138], a0, a1, a2.this$);
        }

        void NumericUtils::longToPrefixCoded(jlong a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_longToPrefixCoded_4adff79b], a0, a1, a2.this$);
        }

        void NumericUtils::longToPrefixCodedBytes(jlong a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_longToPrefixCodedBytes_4adff79b], a0, a1, a2.this$);
        }

        jint NumericUtils::prefixCodedToInt(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_prefixCodedToInt_7bc03ddb], a0.this$);
        }

        jlong NumericUtils::prefixCodedToLong(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_prefixCodedToLong_7bc03dd8], a0.this$);
        }

        jlong NumericUtils::sortableDoubleBits(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sortableDoubleBits_0ee6df33], a0);
        }

        jint NumericUtils::sortableFloatBits(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_sortableFloatBits_39c7bd23], a0);
        }

        jfloat NumericUtils::sortableIntToFloat(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_sortableIntToFloat_39c7bd2c], a0);
        }

        jdouble NumericUtils::sortableLongToDouble(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_sortableLongToDouble_0ee6df3d], a0);
        }

        void NumericUtils::splitIntRange(const ::org::apache::lucene::util::NumericUtils$IntRangeBuilder & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_splitIntRange_b263c325], a0.this$, a1, a2, a3);
        }

        void NumericUtils::splitLongRange(const ::org::apache::lucene::util::NumericUtils$LongRangeBuilder & a0, jint a1, jlong a2, jlong a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_splitLongRange_585f2c31], a0.this$, a1, a2, a3);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NumericUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_doubleToSortableLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_filterPrefixCodedInts(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_filterPrefixCodedLongs(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_floatToSortableInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMaxInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMaxLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMinInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMinLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getPrefixCodedIntShift(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getPrefixCodedLongShift(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_intToPrefixCoded(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_intToPrefixCodedBytes(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_longToPrefixCoded(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_longToPrefixCodedBytes(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_prefixCodedToInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_prefixCodedToLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableDoubleBits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableFloatBits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableIntToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableLongToDouble(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_splitIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_splitLongRange(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_NumericUtils__methods_[] = {
          DECLARE_METHOD(t_NumericUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, doubleToSortableLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, filterPrefixCodedInts, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, filterPrefixCodedLongs, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, floatToSortableInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMaxInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMaxLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMinInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMinLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getPrefixCodedIntShift, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getPrefixCodedLongShift, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, intToPrefixCoded, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, intToPrefixCodedBytes, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, longToPrefixCoded, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, longToPrefixCodedBytes, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, prefixCodedToInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, prefixCodedToLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableDoubleBits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableFloatBits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableIntToFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableLongToDouble, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, splitIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, splitLongRange, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericUtils, t_NumericUtils, ::java::lang::Object, NumericUtils, abstract_init, 0, 0, 0, 0, 0);

        void t_NumericUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericUtils), module, "NumericUtils", 0);
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "IntRangeBuilder", make_descriptor(&PY_TYPE(NumericUtils$IntRangeBuilder)));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "LongRangeBuilder", make_descriptor(&PY_TYPE(NumericUtils$LongRangeBuilder)));
        }

        void t_NumericUtils::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "class_", make_descriptor(NumericUtils::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "wrapfn_", make_descriptor(t_NumericUtils::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NumericUtils::initializeClass);
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "BUF_SIZE_INT", make_descriptor(NumericUtils::BUF_SIZE_INT));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "BUF_SIZE_LONG", make_descriptor(NumericUtils::BUF_SIZE_LONG));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "PRECISION_STEP_DEFAULT", make_descriptor(NumericUtils::PRECISION_STEP_DEFAULT));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "PRECISION_STEP_DEFAULT_32", make_descriptor(NumericUtils::PRECISION_STEP_DEFAULT_32));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "SHIFT_START_INT", make_descriptor(NumericUtils::SHIFT_START_INT));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "SHIFT_START_LONG", make_descriptor(NumericUtils::SHIFT_START_LONG));
        }

        static PyObject *t_NumericUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericUtils::initializeClass, 1)))
            return NULL;
          return t_NumericUtils::wrap_Object(NumericUtils(((t_NumericUtils *) arg)->object.this$));
        }
        static PyObject *t_NumericUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericUtils_doubleToSortableLong(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jlong result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::doubleToSortableLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "doubleToSortableLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_filterPrefixCodedInts(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::filterPrefixCodedInts(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "filterPrefixCodedInts", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_filterPrefixCodedLongs(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::filterPrefixCodedLongs(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "filterPrefixCodedLongs", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_floatToSortableInt(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jint result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::floatToSortableInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToSortableInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMaxInt(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMaxInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getMaxInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMaxLong(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMaxLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "getMaxLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMinInt(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMinInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getMinInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMinLong(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMinLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "getMinLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getPrefixCodedIntShift(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getPrefixCodedIntShift(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getPrefixCodedIntShift", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getPrefixCodedLongShift(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getPrefixCodedLongShift(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getPrefixCodedLongShift", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_intToPrefixCoded(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "IIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::intToPrefixCoded(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "intToPrefixCoded", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_intToPrefixCodedBytes(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "IIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::intToPrefixCodedBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "intToPrefixCodedBytes", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_longToPrefixCoded(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "JIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::longToPrefixCoded(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "longToPrefixCoded", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_longToPrefixCodedBytes(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "JIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::longToPrefixCodedBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "longToPrefixCodedBytes", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_prefixCodedToInt(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::prefixCodedToInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "prefixCodedToInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_prefixCodedToLong(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::prefixCodedToLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "prefixCodedToLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableDoubleBits(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableDoubleBits(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "sortableDoubleBits", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableFloatBits(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableFloatBits(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "sortableFloatBits", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableIntToFloat(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableIntToFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "sortableIntToFloat", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableLongToDouble(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jdouble result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableLongToDouble(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "sortableLongToDouble", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_splitIntRange(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::NumericUtils$IntRangeBuilder a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "kIII", ::org::apache::lucene::util::NumericUtils$IntRangeBuilder::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::splitIntRange(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "splitIntRange", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_splitLongRange(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::NumericUtils$LongRangeBuilder a0((jobject) NULL);
          jint a1;
          jlong a2;
          jlong a3;

          if (!parseArgs(args, "kIJJ", ::org::apache::lucene::util::NumericUtils$LongRangeBuilder::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::splitLongRange(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "splitLongRange", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TokenOffsetPayloadTokenFilter::class$ = NULL;
          jmethodID *TokenOffsetPayloadTokenFilter::mids$ = NULL;
          bool TokenOffsetPayloadTokenFilter::live$ = false;

          jclass TokenOffsetPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenOffsetPayloadTokenFilter::TokenOffsetPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean TokenOffsetPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TokenOffsetPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenOffsetPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenOffsetPayloadTokenFilter_init_(t_TokenOffsetPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenOffsetPayloadTokenFilter_incrementToken(t_TokenOffsetPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_TokenOffsetPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenOffsetPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenOffsetPayloadTokenFilter, t_TokenOffsetPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TokenOffsetPayloadTokenFilter, t_TokenOffsetPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TokenOffsetPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenOffsetPayloadTokenFilter), module, "TokenOffsetPayloadTokenFilter", 0);
          }

          void t_TokenOffsetPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilter).tp_dict, "class_", make_descriptor(TokenOffsetPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenOffsetPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenOffsetPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenOffsetPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenOffsetPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TokenOffsetPayloadTokenFilter::wrap_Object(TokenOffsetPayloadTokenFilter(((t_TokenOffsetPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TokenOffsetPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenOffsetPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenOffsetPayloadTokenFilter_init_(t_TokenOffsetPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TokenOffsetPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TokenOffsetPayloadTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenOffsetPayloadTokenFilter_incrementToken(t_TokenOffsetPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenOffsetPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/InputStreamDataInput.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *InputStreamDataInput::class$ = NULL;
        jmethodID *InputStreamDataInput::mids$ = NULL;
        bool InputStreamDataInput::live$ = false;

        jclass InputStreamDataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/InputStreamDataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        InputStreamDataInput::InputStreamDataInput(const ::java::io::InputStream & a0) : ::org::apache::lucene::store::DataInput(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

        void InputStreamDataInput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jbyte InputStreamDataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void InputStreamDataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_InputStreamDataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InputStreamDataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InputStreamDataInput_init_(t_InputStreamDataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InputStreamDataInput_close(t_InputStreamDataInput *self);
        static PyObject *t_InputStreamDataInput_readByte(t_InputStreamDataInput *self, PyObject *args);
        static PyObject *t_InputStreamDataInput_readBytes(t_InputStreamDataInput *self, PyObject *args);

        static PyMethodDef t_InputStreamDataInput__methods_[] = {
          DECLARE_METHOD(t_InputStreamDataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InputStreamDataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_InputStreamDataInput, close, METH_NOARGS),
          DECLARE_METHOD(t_InputStreamDataInput, readByte, METH_VARARGS),
          DECLARE_METHOD(t_InputStreamDataInput, readBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InputStreamDataInput, t_InputStreamDataInput, ::org::apache::lucene::store::DataInput, InputStreamDataInput, t_InputStreamDataInput_init_, 0, 0, 0, 0, 0);

        void t_InputStreamDataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(InputStreamDataInput), module, "InputStreamDataInput", 0);
        }

        void t_InputStreamDataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(InputStreamDataInput).tp_dict, "class_", make_descriptor(InputStreamDataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(InputStreamDataInput).tp_dict, "wrapfn_", make_descriptor(t_InputStreamDataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(InputStreamDataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_InputStreamDataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, InputStreamDataInput::initializeClass, 1)))
            return NULL;
          return t_InputStreamDataInput::wrap_Object(InputStreamDataInput(((t_InputStreamDataInput *) arg)->object.this$));
        }
        static PyObject *t_InputStreamDataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, InputStreamDataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_InputStreamDataInput_init_(t_InputStreamDataInput *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::InputStream a0((jobject) NULL);
          InputStreamDataInput object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
          {
            INT_CALL(object = InputStreamDataInput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_InputStreamDataInput_close(t_InputStreamDataInput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_InputStreamDataInput_readByte(t_InputStreamDataInput *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(InputStreamDataInput), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_InputStreamDataInput_readBytes(t_InputStreamDataInput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(InputStreamDataInput), (PyObject *) self, "readBytes", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TimeLimitingCollector$TimerThread.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Counter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TimeLimitingCollector$TimerThread::class$ = NULL;
        jmethodID *TimeLimitingCollector$TimerThread::mids$ = NULL;
        bool TimeLimitingCollector$TimerThread::live$ = false;
        jint TimeLimitingCollector$TimerThread::DEFAULT_RESOLUTION = (jint) 0;
        ::java::lang::String *TimeLimitingCollector$TimerThread::THREAD_NAME = NULL;

        jclass TimeLimitingCollector$TimerThread::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TimeLimitingCollector$TimerThread");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4ae88947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_init$_dfcea312] = env->getMethodID(cls, "<init>", "(JLorg/apache/lucene/util/Counter;)V");
            mids$[mid_getMilliseconds_54c6a17a] = env->getMethodID(cls, "getMilliseconds", "()J");
            mids$[mid_getResolution_54c6a17a] = env->getMethodID(cls, "getResolution", "()J");
            mids$[mid_run_54c6a166] = env->getMethodID(cls, "run", "()V");
            mids$[mid_setResolution_0ee6df2f] = env->getMethodID(cls, "setResolution", "(J)V");
            mids$[mid_stopTimer_54c6a166] = env->getMethodID(cls, "stopTimer", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_RESOLUTION = env->getStaticIntField(cls, "DEFAULT_RESOLUTION");
            THREAD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "THREAD_NAME", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TimeLimitingCollector$TimerThread::TimeLimitingCollector$TimerThread(const ::org::apache::lucene::util::Counter & a0) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_4ae88947, a0.this$)) {}

        TimeLimitingCollector$TimerThread::TimeLimitingCollector$TimerThread(jlong a0, const ::org::apache::lucene::util::Counter & a1) : ::java::lang::Thread(env->newObject(initializeClass, &mids$, mid_init$_dfcea312, a0, a1.this$)) {}

        jlong TimeLimitingCollector$TimerThread::getMilliseconds() const
        {
          return env->callLongMethod(this$, mids$[mid_getMilliseconds_54c6a17a]);
        }

        jlong TimeLimitingCollector$TimerThread::getResolution() const
        {
          return env->callLongMethod(this$, mids$[mid_getResolution_54c6a17a]);
        }

        void TimeLimitingCollector$TimerThread::run() const
        {
          env->callVoidMethod(this$, mids$[mid_run_54c6a166]);
        }

        void TimeLimitingCollector$TimerThread::setResolution(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setResolution_0ee6df2f], a0);
        }

        void TimeLimitingCollector$TimerThread::stopTimer() const
        {
          env->callVoidMethod(this$, mids$[mid_stopTimer_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TimeLimitingCollector$TimerThread_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimerThread_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TimeLimitingCollector$TimerThread_init_(t_TimeLimitingCollector$TimerThread *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TimeLimitingCollector$TimerThread_getMilliseconds(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_getResolution(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_run(t_TimeLimitingCollector$TimerThread *self, PyObject *args);
        static PyObject *t_TimeLimitingCollector$TimerThread_setResolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg);
        static PyObject *t_TimeLimitingCollector$TimerThread_stopTimer(t_TimeLimitingCollector$TimerThread *self);
        static PyObject *t_TimeLimitingCollector$TimerThread_get__milliseconds(t_TimeLimitingCollector$TimerThread *self, void *data);
        static PyObject *t_TimeLimitingCollector$TimerThread_get__resolution(t_TimeLimitingCollector$TimerThread *self, void *data);
        static int t_TimeLimitingCollector$TimerThread_set__resolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg, void *data);
        static PyGetSetDef t_TimeLimitingCollector$TimerThread__fields_[] = {
          DECLARE_GET_FIELD(t_TimeLimitingCollector$TimerThread, milliseconds),
          DECLARE_GETSET_FIELD(t_TimeLimitingCollector$TimerThread, resolution),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TimeLimitingCollector$TimerThread__methods_[] = {
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, getMilliseconds, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, getResolution, METH_NOARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, run, METH_VARARGS),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, setResolution, METH_O),
          DECLARE_METHOD(t_TimeLimitingCollector$TimerThread, stopTimer, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TimeLimitingCollector$TimerThread, t_TimeLimitingCollector$TimerThread, ::java::lang::Thread, TimeLimitingCollector$TimerThread, t_TimeLimitingCollector$TimerThread_init_, 0, 0, t_TimeLimitingCollector$TimerThread__fields_, 0, 0);

        void t_TimeLimitingCollector$TimerThread::install(PyObject *module)
        {
          installType(&PY_TYPE(TimeLimitingCollector$TimerThread), module, "TimeLimitingCollector$TimerThread", 0);
        }

        void t_TimeLimitingCollector$TimerThread::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "class_", make_descriptor(TimeLimitingCollector$TimerThread::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "wrapfn_", make_descriptor(t_TimeLimitingCollector$TimerThread::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TimeLimitingCollector$TimerThread::initializeClass);
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "DEFAULT_RESOLUTION", make_descriptor(TimeLimitingCollector$TimerThread::DEFAULT_RESOLUTION));
          PyDict_SetItemString(PY_TYPE(TimeLimitingCollector$TimerThread).tp_dict, "THREAD_NAME", make_descriptor(j2p(*TimeLimitingCollector$TimerThread::THREAD_NAME)));
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TimeLimitingCollector$TimerThread::initializeClass, 1)))
            return NULL;
          return t_TimeLimitingCollector$TimerThread::wrap_Object(TimeLimitingCollector$TimerThread(((t_TimeLimitingCollector$TimerThread *) arg)->object.this$));
        }
        static PyObject *t_TimeLimitingCollector$TimerThread_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TimeLimitingCollector$TimerThread::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TimeLimitingCollector$TimerThread_init_(t_TimeLimitingCollector$TimerThread *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::Counter a0((jobject) NULL);
              TimeLimitingCollector$TimerThread object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
              {
                INT_CALL(object = TimeLimitingCollector$TimerThread(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jlong a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              TimeLimitingCollector$TimerThread object((jobject) NULL);

              if (!parseArgs(args, "Jk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TimeLimitingCollector$TimerThread(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_getMilliseconds(t_TimeLimitingCollector$TimerThread *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getMilliseconds());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_getResolution(t_TimeLimitingCollector$TimerThread *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getResolution());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_run(t_TimeLimitingCollector$TimerThread *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.run());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(TimeLimitingCollector$TimerThread), (PyObject *) self, "run", args, 2);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_setResolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.setResolution(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setResolution", arg);
          return NULL;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_stopTimer(t_TimeLimitingCollector$TimerThread *self)
        {
          OBJ_CALL(self->object.stopTimer());
          Py_RETURN_NONE;
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_get__milliseconds(t_TimeLimitingCollector$TimerThread *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getMilliseconds());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TimeLimitingCollector$TimerThread_get__resolution(t_TimeLimitingCollector$TimerThread *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getResolution());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_TimeLimitingCollector$TimerThread_set__resolution(t_TimeLimitingCollector$TimerThread *self, PyObject *arg, void *data)
        {
          {
            jlong value;
            if (!parseArg(arg, "J", &value))
            {
              INT_CALL(self->object.setResolution(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "resolution", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST$INPUT_TYPE::class$ = NULL;
          jmethodID *FST$INPUT_TYPE::mids$ = NULL;
          bool FST$INPUT_TYPE::live$ = false;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE1 = NULL;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE2 = NULL;
          FST$INPUT_TYPE *FST$INPUT_TYPE::BYTE4 = NULL;

          jclass FST$INPUT_TYPE::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST$INPUT_TYPE");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_06b999b9] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");
              mids$[mid_values_da3dc83f] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              BYTE1 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE1", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              BYTE2 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE2", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              BYTE4 = new FST$INPUT_TYPE(env->getStaticObjectField(cls, "BYTE4", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST$INPUT_TYPE FST$INPUT_TYPE::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return FST$INPUT_TYPE(env->callStaticObjectMethod(cls, mids$[mid_valueOf_06b999b9], a0.this$));
          }

          JArray< FST$INPUT_TYPE > FST$INPUT_TYPE::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< FST$INPUT_TYPE >(env->callStaticObjectMethod(cls, mids$[mid_values_da3dc83f]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST$INPUT_TYPE_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$INPUT_TYPE_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST$INPUT_TYPE_of_(t_FST$INPUT_TYPE *self, PyObject *args);
          static PyObject *t_FST$INPUT_TYPE_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_FST$INPUT_TYPE_values(PyTypeObject *type);
          static PyObject *t_FST$INPUT_TYPE_get__parameters_(t_FST$INPUT_TYPE *self, void *data);
          static PyGetSetDef t_FST$INPUT_TYPE__fields_[] = {
            DECLARE_GET_FIELD(t_FST$INPUT_TYPE, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST$INPUT_TYPE__methods_[] = {
            DECLARE_METHOD(t_FST$INPUT_TYPE, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FST$INPUT_TYPE, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST$INPUT_TYPE, t_FST$INPUT_TYPE, ::java::lang::Enum, FST$INPUT_TYPE, abstract_init, 0, 0, t_FST$INPUT_TYPE__fields_, 0, 0);
          PyObject *t_FST$INPUT_TYPE::wrap_Object(const FST$INPUT_TYPE& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$INPUT_TYPE::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$INPUT_TYPE *self = (t_FST$INPUT_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST$INPUT_TYPE::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST$INPUT_TYPE::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST$INPUT_TYPE *self = (t_FST$INPUT_TYPE *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST$INPUT_TYPE::install(PyObject *module)
          {
            installType(&PY_TYPE(FST$INPUT_TYPE), module, "FST$INPUT_TYPE", 0);
          }

          void t_FST$INPUT_TYPE::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "class_", make_descriptor(FST$INPUT_TYPE::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "wrapfn_", make_descriptor(t_FST$INPUT_TYPE::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FST$INPUT_TYPE::initializeClass);
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "BYTE1", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE1)));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "BYTE2", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE2)));
            PyDict_SetItemString(PY_TYPE(FST$INPUT_TYPE).tp_dict, "BYTE4", make_descriptor(t_FST$INPUT_TYPE::wrap_Object(*FST$INPUT_TYPE::BYTE4)));
          }

          static PyObject *t_FST$INPUT_TYPE_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST$INPUT_TYPE::initializeClass, 1)))
              return NULL;
            return t_FST$INPUT_TYPE::wrap_Object(FST$INPUT_TYPE(((t_FST$INPUT_TYPE *) arg)->object.this$));
          }
          static PyObject *t_FST$INPUT_TYPE_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST$INPUT_TYPE::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST$INPUT_TYPE_of_(t_FST$INPUT_TYPE *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_FST$INPUT_TYPE_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            FST$INPUT_TYPE result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST$INPUT_TYPE::valueOf(a0));
              return t_FST$INPUT_TYPE::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_FST$INPUT_TYPE_values(PyTypeObject *type)
          {
            JArray< FST$INPUT_TYPE > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::util::fst::FST$INPUT_TYPE::values());
            return JArray<jobject>(result.this$).wrap(t_FST$INPUT_TYPE::wrap_jobject);
          }
          static PyObject *t_FST$INPUT_TYPE_get__parameters_(t_FST$INPUT_TYPE *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
