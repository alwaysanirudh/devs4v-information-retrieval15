#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TFValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TFValueSource::class$ = NULL;
            jmethodID *TFValueSource::mids$ = NULL;
            bool TFValueSource::live$ = false;

            jclass TFValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TFValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TFValueSource::TFValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::TermFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues TFValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            ::java::lang::String TFValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TFValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TFValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TFValueSource_init_(t_TFValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TFValueSource_getValues(t_TFValueSource *self, PyObject *args);
            static PyObject *t_TFValueSource_name(t_TFValueSource *self, PyObject *args);

            static PyMethodDef t_TFValueSource__methods_[] = {
              DECLARE_METHOD(t_TFValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TFValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TFValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TFValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TFValueSource, t_TFValueSource, ::org::apache::lucene::queries::function::valuesource::TermFreqValueSource, TFValueSource, t_TFValueSource_init_, 0, 0, 0, 0, 0);

            void t_TFValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TFValueSource), module, "TFValueSource", 0);
            }

            void t_TFValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TFValueSource).tp_dict, "class_", make_descriptor(TFValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TFValueSource).tp_dict, "wrapfn_", make_descriptor(t_TFValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TFValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TFValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TFValueSource::initializeClass, 1)))
                return NULL;
              return t_TFValueSource::wrap_Object(TFValueSource(((t_TFValueSource *) arg)->object.this$));
            }
            static PyObject *t_TFValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TFValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TFValueSource_init_(t_TFValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TFValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TFValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TFValueSource_getValues(t_TFValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(TFValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TFValueSource_name(t_TFValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TFValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/IOContext$Context.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *IOContext$Context::class$ = NULL;
        jmethodID *IOContext$Context::mids$ = NULL;
        bool IOContext$Context::live$ = false;
        IOContext$Context *IOContext$Context::DEFAULT = NULL;
        IOContext$Context *IOContext$Context::FLUSH = NULL;
        IOContext$Context *IOContext$Context::MERGE = NULL;
        IOContext$Context *IOContext$Context::READ = NULL;

        jclass IOContext$Context::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/IOContext$Context");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_6cdc8b82] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/store/IOContext$Context;");
            mids$[mid_values_8c68e654] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/store/IOContext$Context;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT = new IOContext$Context(env->getStaticObjectField(cls, "DEFAULT", "Lorg/apache/lucene/store/IOContext$Context;"));
            FLUSH = new IOContext$Context(env->getStaticObjectField(cls, "FLUSH", "Lorg/apache/lucene/store/IOContext$Context;"));
            MERGE = new IOContext$Context(env->getStaticObjectField(cls, "MERGE", "Lorg/apache/lucene/store/IOContext$Context;"));
            READ = new IOContext$Context(env->getStaticObjectField(cls, "READ", "Lorg/apache/lucene/store/IOContext$Context;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IOContext$Context IOContext$Context::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IOContext$Context(env->callStaticObjectMethod(cls, mids$[mid_valueOf_6cdc8b82], a0.this$));
        }

        JArray< IOContext$Context > IOContext$Context::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< IOContext$Context >(env->callStaticObjectMethod(cls, mids$[mid_values_8c68e654]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_IOContext$Context_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext$Context_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOContext$Context_of_(t_IOContext$Context *self, PyObject *args);
        static PyObject *t_IOContext$Context_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_IOContext$Context_values(PyTypeObject *type);
        static PyObject *t_IOContext$Context_get__parameters_(t_IOContext$Context *self, void *data);
        static PyGetSetDef t_IOContext$Context__fields_[] = {
          DECLARE_GET_FIELD(t_IOContext$Context, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IOContext$Context__methods_[] = {
          DECLARE_METHOD(t_IOContext$Context, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, of_, METH_VARARGS),
          DECLARE_METHOD(t_IOContext$Context, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IOContext$Context, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IOContext$Context, t_IOContext$Context, ::java::lang::Enum, IOContext$Context, abstract_init, 0, 0, t_IOContext$Context__fields_, 0, 0);
        PyObject *t_IOContext$Context::wrap_Object(const IOContext$Context& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IOContext$Context::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOContext$Context *self = (t_IOContext$Context *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_IOContext$Context::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IOContext$Context::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IOContext$Context *self = (t_IOContext$Context *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_IOContext$Context::install(PyObject *module)
        {
          installType(&PY_TYPE(IOContext$Context), module, "IOContext$Context", 0);
        }

        void t_IOContext$Context::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "class_", make_descriptor(IOContext$Context::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "wrapfn_", make_descriptor(t_IOContext$Context::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IOContext$Context::initializeClass);
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "DEFAULT", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::DEFAULT)));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "FLUSH", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::FLUSH)));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "MERGE", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::MERGE)));
          PyDict_SetItemString(PY_TYPE(IOContext$Context).tp_dict, "READ", make_descriptor(t_IOContext$Context::wrap_Object(*IOContext$Context::READ)));
        }

        static PyObject *t_IOContext$Context_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IOContext$Context::initializeClass, 1)))
            return NULL;
          return t_IOContext$Context::wrap_Object(IOContext$Context(((t_IOContext$Context *) arg)->object.this$));
        }
        static PyObject *t_IOContext$Context_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IOContext$Context::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IOContext$Context_of_(t_IOContext$Context *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_IOContext$Context_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          IOContext$Context result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::store::IOContext$Context::valueOf(a0));
            return t_IOContext$Context::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_IOContext$Context_values(PyTypeObject *type)
        {
          JArray< IOContext$Context > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::store::IOContext$Context::values());
          return JArray<jobject>(result.this$).wrap(t_IOContext$Context::wrap_jobject);
        }
        static PyObject *t_IOContext$Context_get__parameters_(t_IOContext$Context *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopFieldDocs.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopFieldDocs::class$ = NULL;
        jmethodID *TopFieldDocs::mids$ = NULL;
        jfieldID *TopFieldDocs::fids$ = NULL;
        bool TopFieldDocs::live$ = false;

        jclass TopFieldDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopFieldDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_e6001f02] = env->getMethodID(cls, "<init>", "(I[Lorg/apache/lucene/search/ScoreDoc;[Lorg/apache/lucene/search/SortField;F)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_fields] = env->getFieldID(cls, "fields", "[Lorg/apache/lucene/search/SortField;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopFieldDocs::TopFieldDocs(jint a0, const JArray< ::org::apache::lucene::search::ScoreDoc > & a1, const JArray< ::org::apache::lucene::search::SortField > & a2, jfloat a3) : ::org::apache::lucene::search::TopDocs(env->newObject(initializeClass, &mids$, mid_init$_e6001f02, a0, a1.this$, a2.this$, a3)) {}

        JArray< ::org::apache::lucene::search::SortField > TopFieldDocs::_get_fields() const
        {
          return JArray< ::org::apache::lucene::search::SortField >(env->getObjectField(this$, fids$[fid_fields]));
        }

        void TopFieldDocs::_set_fields(const JArray< ::org::apache::lucene::search::SortField > & a0) const
        {
          env->setObjectField(this$, fids$[fid_fields], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopFieldDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TopFieldDocs_init_(t_TopFieldDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopFieldDocs_get__fields(t_TopFieldDocs *self, void *data);
        static int t_TopFieldDocs_set__fields(t_TopFieldDocs *self, PyObject *arg, void *data);

        static PyGetSetDef t_TopFieldDocs__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopFieldDocs, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopFieldDocs__methods_[] = {
          DECLARE_METHOD(t_TopFieldDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldDocs, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopFieldDocs, t_TopFieldDocs, ::org::apache::lucene::search::TopDocs, TopFieldDocs, t_TopFieldDocs_init_, 0, 0, t_TopFieldDocs__fields_, 0, 0);

        void t_TopFieldDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(TopFieldDocs), module, "TopFieldDocs", 0);
        }

        void t_TopFieldDocs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopFieldDocs).tp_dict, "class_", make_descriptor(TopFieldDocs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopFieldDocs).tp_dict, "wrapfn_", make_descriptor(t_TopFieldDocs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopFieldDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopFieldDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopFieldDocs::initializeClass, 1)))
            return NULL;
          return t_TopFieldDocs::wrap_Object(TopFieldDocs(((t_TopFieldDocs *) arg)->object.this$));
        }
        static PyObject *t_TopFieldDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopFieldDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TopFieldDocs_init_(t_TopFieldDocs *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          JArray< ::org::apache::lucene::search::ScoreDoc > a1((jobject) NULL);
          JArray< ::org::apache::lucene::search::SortField > a2((jobject) NULL);
          jfloat a3;
          TopFieldDocs object((jobject) NULL);

          if (!parseArgs(args, "I[k[kF", ::org::apache::lucene::search::ScoreDoc::initializeClass, ::org::apache::lucene::search::SortField::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = TopFieldDocs(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopFieldDocs_get__fields(t_TopFieldDocs *self, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fields());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_SortField::wrap_jobject);
        }
        static int t_TopFieldDocs_set__fields(t_TopFieldDocs *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::search::SortField > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::search::SortField::initializeClass, &value))
          {
            INT_CALL(self->object._set_fields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BitsFilteredDocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BitsFilteredDocIdSet::class$ = NULL;
        jmethodID *BitsFilteredDocIdSet::mids$ = NULL;
        bool BitsFilteredDocIdSet::live$ = false;

        jclass BitsFilteredDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BitsFilteredDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_042197af] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/util/Bits;)V");
            mids$[mid_wrap_e3d48bdb] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_match_39c7bd30] = env->getMethodID(cls, "match", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BitsFilteredDocIdSet::BitsFilteredDocIdSet(const ::org::apache::lucene::search::DocIdSet & a0, const ::org::apache::lucene::util::Bits & a1) : ::org::apache::lucene::search::FilteredDocIdSet(env->newObject(initializeClass, &mids$, mid_init$_042197af, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::DocIdSet BitsFilteredDocIdSet::wrap(const ::org::apache::lucene::search::DocIdSet & a0, const ::org::apache::lucene::util::Bits & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_wrap_e3d48bdb], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BitsFilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitsFilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BitsFilteredDocIdSet_init_(t_BitsFilteredDocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BitsFilteredDocIdSet_wrap(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_BitsFilteredDocIdSet__methods_[] = {
          DECLARE_METHOD(t_BitsFilteredDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitsFilteredDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitsFilteredDocIdSet, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BitsFilteredDocIdSet, t_BitsFilteredDocIdSet, ::org::apache::lucene::search::FilteredDocIdSet, BitsFilteredDocIdSet, t_BitsFilteredDocIdSet_init_, 0, 0, 0, 0, 0);

        void t_BitsFilteredDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(BitsFilteredDocIdSet), module, "BitsFilteredDocIdSet", 0);
        }

        void t_BitsFilteredDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BitsFilteredDocIdSet).tp_dict, "class_", make_descriptor(BitsFilteredDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BitsFilteredDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_BitsFilteredDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BitsFilteredDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BitsFilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BitsFilteredDocIdSet::initializeClass, 1)))
            return NULL;
          return t_BitsFilteredDocIdSet::wrap_Object(BitsFilteredDocIdSet(((t_BitsFilteredDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_BitsFilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BitsFilteredDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BitsFilteredDocIdSet_init_(t_BitsFilteredDocIdSet *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSet a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          BitsFilteredDocIdSet object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::DocIdSet::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BitsFilteredDocIdSet(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BitsFilteredDocIdSet_wrap(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSet a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::DocIdSet::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::BitsFilteredDocIdSet::wrap(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionIncrementAttribute::class$ = NULL;
          jmethodID *PositionIncrementAttribute::mids$ = NULL;
          bool PositionIncrementAttribute::live$ = false;

          jclass PositionIncrementAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint PositionIncrementAttribute::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
          }

          void PositionIncrementAttribute::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionIncrementAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_getPositionIncrement(t_PositionIncrementAttribute *self);
          static PyObject *t_PositionIncrementAttribute_setPositionIncrement(t_PositionIncrementAttribute *self, PyObject *arg);
          static PyObject *t_PositionIncrementAttribute_get__positionIncrement(t_PositionIncrementAttribute *self, void *data);
          static int t_PositionIncrementAttribute_set__positionIncrement(t_PositionIncrementAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionIncrementAttribute__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionIncrementAttribute, positionIncrement),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionIncrementAttribute__methods_[] = {
            DECLARE_METHOD(t_PositionIncrementAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttribute, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PositionIncrementAttribute, setPositionIncrement, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionIncrementAttribute, t_PositionIncrementAttribute, ::org::apache::lucene::util::Attribute, PositionIncrementAttribute, abstract_init, 0, 0, t_PositionIncrementAttribute__fields_, 0, 0);

          void t_PositionIncrementAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionIncrementAttribute), module, "PositionIncrementAttribute", 0);
          }

          void t_PositionIncrementAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttribute).tp_dict, "class_", make_descriptor(PositionIncrementAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttribute).tp_dict, "wrapfn_", make_descriptor(t_PositionIncrementAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionIncrementAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionIncrementAttribute::initializeClass, 1)))
              return NULL;
            return t_PositionIncrementAttribute::wrap_Object(PositionIncrementAttribute(((t_PositionIncrementAttribute *) arg)->object.this$));
          }
          static PyObject *t_PositionIncrementAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionIncrementAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PositionIncrementAttribute_getPositionIncrement(t_PositionIncrementAttribute *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionIncrementAttribute_setPositionIncrement(t_PositionIncrementAttribute *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PositionIncrementAttribute_get__positionIncrement(t_PositionIncrementAttribute *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionIncrementAttribute_set__positionIncrement(t_PositionIncrementAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40DocValuesFormat::class$ = NULL;
          jmethodID *Lucene40DocValuesFormat::mids$ = NULL;
          bool Lucene40DocValuesFormat::live$ = false;
          jint Lucene40DocValuesFormat::MAX_BINARY_FIELD_LENGTH = (jint) 0;

          jclass Lucene40DocValuesFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40DocValuesFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_BINARY_FIELD_LENGTH = env->getStaticIntField(cls, "MAX_BINARY_FIELD_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40DocValuesFormat::Lucene40DocValuesFormat() : ::org::apache::lucene::codecs::DocValuesFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene40DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene40DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40DocValuesFormat_init_(t_Lucene40DocValuesFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40DocValuesFormat_fieldsConsumer(t_Lucene40DocValuesFormat *self, PyObject *args);
          static PyObject *t_Lucene40DocValuesFormat_fieldsProducer(t_Lucene40DocValuesFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40DocValuesFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40DocValuesFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40DocValuesFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40DocValuesFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40DocValuesFormat, fieldsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40DocValuesFormat, t_Lucene40DocValuesFormat, ::org::apache::lucene::codecs::DocValuesFormat, Lucene40DocValuesFormat, t_Lucene40DocValuesFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40DocValuesFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40DocValuesFormat), module, "Lucene40DocValuesFormat", 0);
          }

          void t_Lucene40DocValuesFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "class_", make_descriptor(Lucene40DocValuesFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40DocValuesFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene40DocValuesFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene40DocValuesFormat).tp_dict, "MAX_BINARY_FIELD_LENGTH", make_descriptor(Lucene40DocValuesFormat::MAX_BINARY_FIELD_LENGTH));
          }

          static PyObject *t_Lucene40DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40DocValuesFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40DocValuesFormat::wrap_Object(Lucene40DocValuesFormat(((t_Lucene40DocValuesFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40DocValuesFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40DocValuesFormat_init_(t_Lucene40DocValuesFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40DocValuesFormat object((jobject) NULL);

            INT_CALL(object = Lucene40DocValuesFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40DocValuesFormat_fieldsConsumer(t_Lucene40DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40DocValuesFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_Lucene40DocValuesFormat_fieldsProducer(t_Lucene40DocValuesFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40DocValuesFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekLowerCaseFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekLowerCaseFilter::class$ = NULL;
          jmethodID *GreekLowerCaseFilter::mids$ = NULL;
          bool GreekLowerCaseFilter::live$ = false;

          jclass GreekLowerCaseFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekLowerCaseFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekLowerCaseFilter::GreekLowerCaseFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean GreekLowerCaseFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekLowerCaseFilter_init_(t_GreekLowerCaseFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekLowerCaseFilter_incrementToken(t_GreekLowerCaseFilter *self, PyObject *args);

          static PyMethodDef t_GreekLowerCaseFilter__methods_[] = {
            DECLARE_METHOD(t_GreekLowerCaseFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekLowerCaseFilter, t_GreekLowerCaseFilter, ::org::apache::lucene::analysis::TokenFilter, GreekLowerCaseFilter, t_GreekLowerCaseFilter_init_, 0, 0, 0, 0, 0);

          void t_GreekLowerCaseFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekLowerCaseFilter), module, "GreekLowerCaseFilter", 0);
          }

          void t_GreekLowerCaseFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilter).tp_dict, "class_", make_descriptor(GreekLowerCaseFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilter).tp_dict, "wrapfn_", make_descriptor(t_GreekLowerCaseFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekLowerCaseFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekLowerCaseFilter::initializeClass, 1)))
              return NULL;
            return t_GreekLowerCaseFilter::wrap_Object(GreekLowerCaseFilter(((t_GreekLowerCaseFilter *) arg)->object.this$));
          }
          static PyObject *t_GreekLowerCaseFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekLowerCaseFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekLowerCaseFilter_init_(t_GreekLowerCaseFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            GreekLowerCaseFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = GreekLowerCaseFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekLowerCaseFilter_incrementToken(t_GreekLowerCaseFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GreekLowerCaseFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$Allocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$Allocator::class$ = NULL;
        jmethodID *IntBlockPool$Allocator::mids$ = NULL;
        bool IntBlockPool$Allocator::live$ = false;

        jclass IntBlockPool$Allocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$Allocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_getIntBlock_dab10e75] = env->getMethodID(cls, "getIntBlock", "()[I");
            mids$[mid_recycleIntBlocks_9f62f13c] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$Allocator::IntBlockPool$Allocator(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        JArray< jint > IntBlockPool$Allocator::getIntBlock() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getIntBlock_dab10e75]));
        }

        void IntBlockPool$Allocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_9f62f13c], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$Allocator_init_(t_IntBlockPool$Allocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$Allocator_getIntBlock(t_IntBlockPool$Allocator *self);
        static PyObject *t_IntBlockPool$Allocator_recycleIntBlocks(t_IntBlockPool$Allocator *self, PyObject *args);
        static PyObject *t_IntBlockPool$Allocator_get__intBlock(t_IntBlockPool$Allocator *self, void *data);
        static PyGetSetDef t_IntBlockPool$Allocator__fields_[] = {
          DECLARE_GET_FIELD(t_IntBlockPool$Allocator, intBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IntBlockPool$Allocator__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$Allocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, getIntBlock, METH_NOARGS),
          DECLARE_METHOD(t_IntBlockPool$Allocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$Allocator, t_IntBlockPool$Allocator, ::java::lang::Object, IntBlockPool$Allocator, t_IntBlockPool$Allocator_init_, 0, 0, t_IntBlockPool$Allocator__fields_, 0, 0);

        void t_IntBlockPool$Allocator::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$Allocator), module, "IntBlockPool$Allocator", 0);
        }

        void t_IntBlockPool$Allocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$Allocator).tp_dict, "class_", make_descriptor(IntBlockPool$Allocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$Allocator).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$Allocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$Allocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$Allocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$Allocator::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$Allocator::wrap_Object(IntBlockPool$Allocator(((t_IntBlockPool$Allocator *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$Allocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$Allocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$Allocator_init_(t_IntBlockPool$Allocator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          IntBlockPool$Allocator object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = IntBlockPool$Allocator(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IntBlockPool$Allocator_getIntBlock(t_IntBlockPool$Allocator *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getIntBlock());
          return result.wrap();
        }

        static PyObject *t_IntBlockPool$Allocator_recycleIntBlocks(t_IntBlockPool$Allocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "recycleIntBlocks", args);
          return NULL;
        }

        static PyObject *t_IntBlockPool$Allocator_get__intBlock(t_IntBlockPool$Allocator *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getIntBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SpellChecker.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SpellChecker::class$ = NULL;
          jmethodID *SpellChecker::mids$ = NULL;
          bool SpellChecker::live$ = false;
          jfloat SpellChecker::DEFAULT_ACCURACY = (jfloat) 0;
          ::java::lang::String *SpellChecker::F_WORD = NULL;

          jclass SpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
              mids$[mid_init$_234c1a23] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_init$_eced4abc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/search/spell/StringDistance;Ljava/util/Comparator;)V");
              mids$[mid_clearIndex_54c6a166] = env->getMethodID(cls, "clearIndex", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_exist_5fdc3f44] = env->getMethodID(cls, "exist", "(Ljava/lang/String;)Z");
              mids$[mid_getAccuracy_54c6a176] = env->getMethodID(cls, "getAccuracy", "()F");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getStringDistance_a5face5e] = env->getMethodID(cls, "getStringDistance", "()Lorg/apache/lucene/search/spell/StringDistance;");
              mids$[mid_indexDictionary_dcfa1d99] = env->getMethodID(cls, "indexDictionary", "(Lorg/apache/lucene/search/spell/Dictionary;Lorg/apache/lucene/index/IndexWriterConfig;Z)V");
              mids$[mid_setAccuracy_06298cab] = env->getMethodID(cls, "setAccuracy", "(F)V");
              mids$[mid_setComparator_6ffdd545] = env->getMethodID(cls, "setComparator", "(Ljava/util/Comparator;)V");
              mids$[mid_setSpellIndex_2e261ef2] = env->getMethodID(cls, "setSpellIndex", "(Lorg/apache/lucene/store/Directory;)V");
              mids$[mid_setStringDistance_9c934047] = env->getMethodID(cls, "setStringDistance", "(Lorg/apache/lucene/search/spell/StringDistance;)V");
              mids$[mid_suggestSimilar_3384fe85] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_4d5d7778] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;IF)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_f64ed82d] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;ILorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/search/spell/SuggestMode;)[Ljava/lang/String;");
              mids$[mid_suggestSimilar_b90725e0] = env->getMethodID(cls, "suggestSimilar", "(Ljava/lang/String;ILorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/search/spell/SuggestMode;F)[Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_ACCURACY = env->getStaticFloatField(cls, "DEFAULT_ACCURACY");
              F_WORD = new ::java::lang::String(env->getStaticObjectField(cls, "F_WORD", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::spell::StringDistance & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_234c1a23, a0.this$, a1.this$)) {}

          SpellChecker::SpellChecker(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::search::spell::StringDistance & a1, const ::java::util::Comparator & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_eced4abc, a0.this$, a1.this$, a2.this$)) {}

          void SpellChecker::clearIndex() const
          {
            env->callVoidMethod(this$, mids$[mid_clearIndex_54c6a166]);
          }

          void SpellChecker::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jboolean SpellChecker::exist(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_exist_5fdc3f44], a0.this$);
          }

          jfloat SpellChecker::getAccuracy() const
          {
            return env->callFloatMethod(this$, mids$[mid_getAccuracy_54c6a176]);
          }

          ::java::util::Comparator SpellChecker::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::search::spell::StringDistance SpellChecker::getStringDistance() const
          {
            return ::org::apache::lucene::search::spell::StringDistance(env->callObjectMethod(this$, mids$[mid_getStringDistance_a5face5e]));
          }

          void SpellChecker::indexDictionary(const ::org::apache::lucene::search::spell::Dictionary & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1, jboolean a2) const
          {
            env->callVoidMethod(this$, mids$[mid_indexDictionary_dcfa1d99], a0.this$, a1.this$, a2);
          }

          void SpellChecker::setAccuracy(jfloat a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setAccuracy_06298cab], a0);
          }

          void SpellChecker::setComparator(const ::java::util::Comparator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setComparator_6ffdd545], a0.this$);
          }

          void SpellChecker::setSpellIndex(const ::org::apache::lucene::store::Directory & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setSpellIndex_2e261ef2], a0.this$);
          }

          void SpellChecker::setStringDistance(const ::org::apache::lucene::search::spell::StringDistance & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStringDistance_9c934047], a0.this$);
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_3384fe85], a0.this$, a1));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, jfloat a2) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_4d5d7778], a0.this$, a1, a2));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::lang::String & a3, const ::org::apache::lucene::search::spell::SuggestMode & a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_f64ed82d], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          JArray< ::java::lang::String > SpellChecker::suggestSimilar(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::java::lang::String & a3, const ::org::apache::lucene::search::spell::SuggestMode & a4, jfloat a5) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_suggestSimilar_b90725e0], a0.this$, a1, a2.this$, a3.this$, a4.this$, a5));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpellChecker_init_(t_SpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpellChecker_clearIndex(t_SpellChecker *self);
          static PyObject *t_SpellChecker_close(t_SpellChecker *self);
          static PyObject *t_SpellChecker_exist(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_getAccuracy(t_SpellChecker *self);
          static PyObject *t_SpellChecker_getComparator(t_SpellChecker *self);
          static PyObject *t_SpellChecker_getStringDistance(t_SpellChecker *self);
          static PyObject *t_SpellChecker_indexDictionary(t_SpellChecker *self, PyObject *args);
          static PyObject *t_SpellChecker_setAccuracy(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setComparator(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setSpellIndex(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_setStringDistance(t_SpellChecker *self, PyObject *arg);
          static PyObject *t_SpellChecker_suggestSimilar(t_SpellChecker *self, PyObject *args);
          static PyObject *t_SpellChecker_get__accuracy(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__accuracy(t_SpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_SpellChecker_get__comparator(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__comparator(t_SpellChecker *self, PyObject *arg, void *data);
          static int t_SpellChecker_set__spellIndex(t_SpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_SpellChecker_get__stringDistance(t_SpellChecker *self, void *data);
          static int t_SpellChecker_set__stringDistance(t_SpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_SpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_SpellChecker, accuracy),
            DECLARE_GETSET_FIELD(t_SpellChecker, comparator),
            DECLARE_SET_FIELD(t_SpellChecker, spellIndex),
            DECLARE_GETSET_FIELD(t_SpellChecker, stringDistance),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpellChecker__methods_[] = {
            DECLARE_METHOD(t_SpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpellChecker, clearIndex, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, close, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, exist, METH_O),
            DECLARE_METHOD(t_SpellChecker, getAccuracy, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, getStringDistance, METH_NOARGS),
            DECLARE_METHOD(t_SpellChecker, indexDictionary, METH_VARARGS),
            DECLARE_METHOD(t_SpellChecker, setAccuracy, METH_O),
            DECLARE_METHOD(t_SpellChecker, setComparator, METH_O),
            DECLARE_METHOD(t_SpellChecker, setSpellIndex, METH_O),
            DECLARE_METHOD(t_SpellChecker, setStringDistance, METH_O),
            DECLARE_METHOD(t_SpellChecker, suggestSimilar, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpellChecker, t_SpellChecker, ::java::lang::Object, SpellChecker, t_SpellChecker_init_, 0, 0, t_SpellChecker__fields_, 0, 0);

          void t_SpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(SpellChecker), module, "SpellChecker", 0);
          }

          void t_SpellChecker::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "class_", make_descriptor(SpellChecker::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "wrapfn_", make_descriptor(t_SpellChecker::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SpellChecker::initializeClass);
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "DEFAULT_ACCURACY", make_descriptor(SpellChecker::DEFAULT_ACCURACY));
            PyDict_SetItemString(PY_TYPE(SpellChecker).tp_dict, "F_WORD", make_descriptor(j2p(*SpellChecker::F_WORD)));
          }

          static PyObject *t_SpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpellChecker::initializeClass, 1)))
              return NULL;
            return t_SpellChecker::wrap_Object(SpellChecker(((t_SpellChecker *) arg)->object.this$));
          }
          static PyObject *t_SpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpellChecker_init_(t_SpellChecker *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                {
                  INT_CALL(object = SpellChecker(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::search::spell::StringDistance a1((jobject) NULL);
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SpellChecker(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::store::Directory a0((jobject) NULL);
                ::org::apache::lucene::search::spell::StringDistance a1((jobject) NULL);
                ::java::util::Comparator a2((jobject) NULL);
                PyTypeObject **p2;
                SpellChecker object((jobject) NULL);

                if (!parseArgs(args, "kkK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::search::spell::StringDistance::initializeClass, ::java::util::Comparator::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SpellChecker(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpellChecker_clearIndex(t_SpellChecker *self)
          {
            OBJ_CALL(self->object.clearIndex());
            Py_RETURN_NONE;
          }

          static PyObject *t_SpellChecker_close(t_SpellChecker *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_SpellChecker_exist(t_SpellChecker *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.exist(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "exist", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_getAccuracy(t_SpellChecker *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getAccuracy());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_SpellChecker_getComparator(t_SpellChecker *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord));
          }

          static PyObject *t_SpellChecker_getStringDistance(t_SpellChecker *self)
          {
            ::org::apache::lucene::search::spell::StringDistance result((jobject) NULL);
            OBJ_CALL(result = self->object.getStringDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(result);
          }

          static PyObject *t_SpellChecker_indexDictionary(t_SpellChecker *self, PyObject *args)
          {
            ::org::apache::lucene::search::spell::Dictionary a0((jobject) NULL);
            ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::search::spell::Dictionary::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.indexDictionary(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "indexDictionary", args);
            return NULL;
          }

          static PyObject *t_SpellChecker_setAccuracy(t_SpellChecker *self, PyObject *arg)
          {
            jfloat a0;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(self->object.setAccuracy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setAccuracy", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setComparator(t_SpellChecker *self, PyObject *arg)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              OBJ_CALL(self->object.setComparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setComparator", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setSpellIndex(t_SpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setSpellIndex(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSpellIndex", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_setStringDistance(t_SpellChecker *self, PyObject *arg)
          {
            ::org::apache::lucene::search::spell::StringDistance a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStringDistance(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStringDistance", arg);
            return NULL;
          }

          static PyObject *t_SpellChecker_suggestSimilar(t_SpellChecker *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sI", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 3:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                jfloat a2;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIF", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a4((jobject) NULL);
                PyTypeObject **p4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIksK", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 6:
              {
                ::java::lang::String a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::org::apache::lucene::search::spell::SuggestMode a4((jobject) NULL);
                PyTypeObject **p4;
                jfloat a5;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "sIksKF", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a5))
                {
                  OBJ_CALL(result = self->object.suggestSimilar(a0, a1, a2, a3, a4, a5));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "suggestSimilar", args);
            return NULL;
          }

          static PyObject *t_SpellChecker_get__accuracy(t_SpellChecker *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getAccuracy());
            return PyFloat_FromDouble((double) value);
          }
          static int t_SpellChecker_set__accuracy(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              jfloat value;
              if (!parseArg(arg, "F", &value))
              {
                INT_CALL(self->object.setAccuracy(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "accuracy", arg);
            return -1;
          }

          static PyObject *t_SpellChecker_get__comparator(t_SpellChecker *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
          static int t_SpellChecker_set__comparator(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::java::util::Comparator value((jobject) NULL);
              if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
              {
                INT_CALL(self->object.setComparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "comparator", arg);
            return -1;
          }

          static int t_SpellChecker_set__spellIndex(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::store::Directory value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &value))
              {
                INT_CALL(self->object.setSpellIndex(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "spellIndex", arg);
            return -1;
          }

          static PyObject *t_SpellChecker_get__stringDistance(t_SpellChecker *self, void *data)
          {
            ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
            OBJ_CALL(value = self->object.getStringDistance());
            return ::org::apache::lucene::search::spell::t_StringDistance::wrap_Object(value);
          }
          static int t_SpellChecker_set__stringDistance(t_SpellChecker *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::spell::StringDistance value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::spell::StringDistance::initializeClass, &value))
              {
                INT_CALL(self->object.setStringDistance(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stringDistance", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ResourceLoaderAware::class$ = NULL;
          jmethodID *ResourceLoaderAware::mids$ = NULL;
          bool ResourceLoaderAware::live$ = false;

          jclass ResourceLoaderAware::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ResourceLoaderAware");

              mids$ = new jmethodID[max_mid];
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void ResourceLoaderAware::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ResourceLoaderAware_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoaderAware_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoaderAware_inform(t_ResourceLoaderAware *self, PyObject *arg);

          static PyMethodDef t_ResourceLoaderAware__methods_[] = {
            DECLARE_METHOD(t_ResourceLoaderAware, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoaderAware, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoaderAware, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ResourceLoaderAware, t_ResourceLoaderAware, ::java::lang::Object, ResourceLoaderAware, abstract_init, 0, 0, 0, 0, 0);

          void t_ResourceLoaderAware::install(PyObject *module)
          {
            installType(&PY_TYPE(ResourceLoaderAware), module, "ResourceLoaderAware", 0);
          }

          void t_ResourceLoaderAware::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ResourceLoaderAware).tp_dict, "class_", make_descriptor(ResourceLoaderAware::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ResourceLoaderAware).tp_dict, "wrapfn_", make_descriptor(t_ResourceLoaderAware::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ResourceLoaderAware).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ResourceLoaderAware_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ResourceLoaderAware::initializeClass, 1)))
              return NULL;
            return t_ResourceLoaderAware::wrap_Object(ResourceLoaderAware(((t_ResourceLoaderAware *) arg)->object.this$));
          }
          static PyObject *t_ResourceLoaderAware_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ResourceLoaderAware::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ResourceLoaderAware_inform(t_ResourceLoaderAware *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiWordFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiWordFilter::class$ = NULL;
          jmethodID *ThaiWordFilter::mids$ = NULL;
          bool ThaiWordFilter::live$ = false;
          jboolean ThaiWordFilter::DBBI_AVAILABLE = (jboolean) 0;

          jclass ThaiWordFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiWordFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DBBI_AVAILABLE = env->getStaticBooleanField(cls, "DBBI_AVAILABLE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiWordFilter::ThaiWordFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          jboolean ThaiWordFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ThaiWordFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiWordFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiWordFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiWordFilter_init_(t_ThaiWordFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiWordFilter_incrementToken(t_ThaiWordFilter *self, PyObject *args);
          static PyObject *t_ThaiWordFilter_reset(t_ThaiWordFilter *self, PyObject *args);

          static PyMethodDef t_ThaiWordFilter__methods_[] = {
            DECLARE_METHOD(t_ThaiWordFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiWordFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ThaiWordFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiWordFilter, t_ThaiWordFilter, ::org::apache::lucene::analysis::TokenFilter, ThaiWordFilter, t_ThaiWordFilter_init_, 0, 0, 0, 0, 0);

          void t_ThaiWordFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiWordFilter), module, "ThaiWordFilter", 0);
          }

          void t_ThaiWordFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "class_", make_descriptor(ThaiWordFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "wrapfn_", make_descriptor(t_ThaiWordFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ThaiWordFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ThaiWordFilter).tp_dict, "DBBI_AVAILABLE", make_descriptor(ThaiWordFilter::DBBI_AVAILABLE));
          }

          static PyObject *t_ThaiWordFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiWordFilter::initializeClass, 1)))
              return NULL;
            return t_ThaiWordFilter::wrap_Object(ThaiWordFilter(((t_ThaiWordFilter *) arg)->object.this$));
          }
          static PyObject *t_ThaiWordFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiWordFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiWordFilter_init_(t_ThaiWordFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ThaiWordFilter object((jobject) NULL);

            if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
            {
              INT_CALL(object = ThaiWordFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiWordFilter_incrementToken(t_ThaiWordFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ThaiWordFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ThaiWordFilter_reset(t_ThaiWordFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ThaiWordFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/DoubleConstValueSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *DoubleConstValueSource::class$ = NULL;
            jmethodID *DoubleConstValueSource::mids$ = NULL;
            bool DoubleConstValueSource::live$ = false;

            jclass DoubleConstValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/DoubleConstValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getBool_54c6a16a] = env->getMethodID(cls, "getBool", "()Z");
                mids$[mid_getDouble_54c6a174] = env->getMethodID(cls, "getDouble", "()D");
                mids$[mid_getFloat_54c6a176] = env->getMethodID(cls, "getFloat", "()F");
                mids$[mid_getInt_54c6a179] = env->getMethodID(cls, "getInt", "()I");
                mids$[mid_getLong_54c6a17a] = env->getMethodID(cls, "getLong", "()J");
                mids$[mid_getNumber_ee47e3e1] = env->getMethodID(cls, "getNumber", "()Ljava/lang/Number;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DoubleConstValueSource::DoubleConstValueSource(jdouble a0) : ::org::apache::lucene::queries::function::valuesource::ConstNumberSource(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

            ::java::lang::String DoubleConstValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean DoubleConstValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jboolean DoubleConstValueSource::getBool() const
            {
              return env->callBooleanMethod(this$, mids$[mid_getBool_54c6a16a]);
            }

            jdouble DoubleConstValueSource::getDouble() const
            {
              return env->callDoubleMethod(this$, mids$[mid_getDouble_54c6a174]);
            }

            jfloat DoubleConstValueSource::getFloat() const
            {
              return env->callFloatMethod(this$, mids$[mid_getFloat_54c6a176]);
            }

            jint DoubleConstValueSource::getInt() const
            {
              return env->callIntMethod(this$, mids$[mid_getInt_54c6a179]);
            }

            jlong DoubleConstValueSource::getLong() const
            {
              return env->callLongMethod(this$, mids$[mid_getLong_54c6a17a]);
            }

            ::java::lang::Number DoubleConstValueSource::getNumber() const
            {
              return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getNumber_ee47e3e1]));
            }

            ::org::apache::lucene::queries::function::FunctionValues DoubleConstValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint DoubleConstValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_DoubleConstValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DoubleConstValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DoubleConstValueSource_init_(t_DoubleConstValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DoubleConstValueSource_description(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_equals(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getBool(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getDouble(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getFloat(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getInt(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getLong(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getNumber(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_getValues(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_hashCode(t_DoubleConstValueSource *self, PyObject *args);
            static PyObject *t_DoubleConstValueSource_get__bool(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__double(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__float(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__int(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__long(t_DoubleConstValueSource *self, void *data);
            static PyObject *t_DoubleConstValueSource_get__number(t_DoubleConstValueSource *self, void *data);
            static PyGetSetDef t_DoubleConstValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_DoubleConstValueSource, bool),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, double),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, float),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, int),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, long),
              DECLARE_GET_FIELD(t_DoubleConstValueSource, number),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DoubleConstValueSource__methods_[] = {
              DECLARE_METHOD(t_DoubleConstValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleConstValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DoubleConstValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getBool, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getDouble, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getFloat, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getInt, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getLong, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getNumber, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_DoubleConstValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DoubleConstValueSource, t_DoubleConstValueSource, ::org::apache::lucene::queries::function::valuesource::ConstNumberSource, DoubleConstValueSource, t_DoubleConstValueSource_init_, 0, 0, t_DoubleConstValueSource__fields_, 0, 0);

            void t_DoubleConstValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(DoubleConstValueSource), module, "DoubleConstValueSource", 0);
            }

            void t_DoubleConstValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DoubleConstValueSource).tp_dict, "class_", make_descriptor(DoubleConstValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DoubleConstValueSource).tp_dict, "wrapfn_", make_descriptor(t_DoubleConstValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DoubleConstValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DoubleConstValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DoubleConstValueSource::initializeClass, 1)))
                return NULL;
              return t_DoubleConstValueSource::wrap_Object(DoubleConstValueSource(((t_DoubleConstValueSource *) arg)->object.this$));
            }
            static PyObject *t_DoubleConstValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DoubleConstValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DoubleConstValueSource_init_(t_DoubleConstValueSource *self, PyObject *args, PyObject *kwds)
            {
              jdouble a0;
              DoubleConstValueSource object((jobject) NULL);

              if (!parseArgs(args, "D", &a0))
              {
                INT_CALL(object = DoubleConstValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DoubleConstValueSource_description(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_equals(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getBool(t_DoubleConstValueSource *self, PyObject *args)
            {
              jboolean result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getBool());
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getBool", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getDouble(t_DoubleConstValueSource *self, PyObject *args)
            {
              jdouble result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getDouble());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getDouble", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getFloat(t_DoubleConstValueSource *self, PyObject *args)
            {
              jfloat result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getFloat());
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getFloat", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getInt(t_DoubleConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getInt());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getInt", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getLong(t_DoubleConstValueSource *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getLong());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getLong", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getNumber(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::lang::Number result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getNumber());
                return ::java::lang::t_Number::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getNumber", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_getValues(t_DoubleConstValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_hashCode(t_DoubleConstValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DoubleConstValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_DoubleConstValueSource_get__bool(t_DoubleConstValueSource *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.getBool());
              Py_RETURN_BOOL(value);
            }

            static PyObject *t_DoubleConstValueSource_get__double(t_DoubleConstValueSource *self, void *data)
            {
              jdouble value;
              OBJ_CALL(value = self->object.getDouble());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_DoubleConstValueSource_get__float(t_DoubleConstValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getFloat());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_DoubleConstValueSource_get__int(t_DoubleConstValueSource *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getInt());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_DoubleConstValueSource_get__long(t_DoubleConstValueSource *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getLong());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }

            static PyObject *t_DoubleConstValueSource_get__number(t_DoubleConstValueSource *self, void *data)
            {
              ::java::lang::Number value((jobject) NULL);
              OBJ_CALL(value = self->object.getNumber());
              return ::java::lang::t_Number::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ThreadInterruptedException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ThreadInterruptedException::class$ = NULL;
        jmethodID *ThreadInterruptedException::mids$ = NULL;
        bool ThreadInterruptedException::live$ = false;

        jclass ThreadInterruptedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ThreadInterruptedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f201c224] = env->getMethodID(cls, "<init>", "(Ljava/lang/InterruptedException;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ThreadInterruptedException::ThreadInterruptedException(const ::java::lang::InterruptedException & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_f201c224, a0.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ThreadInterruptedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ThreadInterruptedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ThreadInterruptedException_init_(t_ThreadInterruptedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_ThreadInterruptedException__methods_[] = {
          DECLARE_METHOD(t_ThreadInterruptedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ThreadInterruptedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ThreadInterruptedException, t_ThreadInterruptedException, ::java::lang::RuntimeException, ThreadInterruptedException, t_ThreadInterruptedException_init_, 0, 0, 0, 0, 0);

        void t_ThreadInterruptedException::install(PyObject *module)
        {
          installType(&PY_TYPE(ThreadInterruptedException), module, "ThreadInterruptedException", 0);
        }

        void t_ThreadInterruptedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ThreadInterruptedException).tp_dict, "class_", make_descriptor(ThreadInterruptedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ThreadInterruptedException).tp_dict, "wrapfn_", make_descriptor(t_ThreadInterruptedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ThreadInterruptedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ThreadInterruptedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ThreadInterruptedException::initializeClass, 1)))
            return NULL;
          return t_ThreadInterruptedException::wrap_Object(ThreadInterruptedException(((t_ThreadInterruptedException *) arg)->object.this$));
        }
        static PyObject *t_ThreadInterruptedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ThreadInterruptedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ThreadInterruptedException_init_(t_ThreadInterruptedException *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::InterruptedException a0((jobject) NULL);
          ThreadInterruptedException object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::lang::InterruptedException::initializeClass, &a0))
          {
            INT_CALL(object = ThreadInterruptedException(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockStressTest.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockStressTest::class$ = NULL;
        jmethodID *LockStressTest::mids$ = NULL;
        bool LockStressTest::live$ = false;

        jclass LockStressTest::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockStressTest");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockStressTest::LockStressTest() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void LockStressTest::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockStressTest_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockStressTest_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockStressTest_init_(t_LockStressTest *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LockStressTest_main(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_LockStressTest__methods_[] = {
          DECLARE_METHOD(t_LockStressTest, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockStressTest, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockStressTest, main, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockStressTest, t_LockStressTest, ::java::lang::Object, LockStressTest, t_LockStressTest_init_, 0, 0, 0, 0, 0);

        void t_LockStressTest::install(PyObject *module)
        {
          installType(&PY_TYPE(LockStressTest), module, "LockStressTest", 0);
        }

        void t_LockStressTest::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockStressTest).tp_dict, "class_", make_descriptor(LockStressTest::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockStressTest).tp_dict, "wrapfn_", make_descriptor(t_LockStressTest::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockStressTest).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockStressTest_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockStressTest::initializeClass, 1)))
            return NULL;
          return t_LockStressTest::wrap_Object(LockStressTest(((t_LockStressTest *) arg)->object.this$));
        }
        static PyObject *t_LockStressTest_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockStressTest::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockStressTest_init_(t_LockStressTest *self, PyObject *args, PyObject *kwds)
        {
          LockStressTest object((jobject) NULL);

          INT_CALL(object = LockStressTest());
          self->object = object;

          return 0;
        }

        static PyObject *t_LockStressTest_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::store::LockStressTest::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanMultiTermQueryWrapper$SpanRewriteMethod::class$ = NULL;
          jmethodID *SpanMultiTermQueryWrapper$SpanRewriteMethod::mids$ = NULL;
          bool SpanMultiTermQueryWrapper$SpanRewriteMethod::live$ = false;

          jclass SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanMultiTermQueryWrapper$SpanRewriteMethod");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_rewrite_63657170] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/spans/SpanQuery;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanMultiTermQueryWrapper$SpanRewriteMethod::SpanMultiTermQueryWrapper$SpanRewriteMethod() : ::org::apache::lucene::search::MultiTermQuery$RewriteMethod(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::spans::SpanQuery SpanMultiTermQueryWrapper$SpanRewriteMethod::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_rewrite_63657170], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_of_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args);
          static int t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_rewrite(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args);
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_get__parameters_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, void *data);
          static PyGetSetDef t_SpanMultiTermQueryWrapper$SpanRewriteMethod__fields_[] = {
            DECLARE_GET_FIELD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanMultiTermQueryWrapper$SpanRewriteMethod__methods_[] = {
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, of_, METH_VARARGS),
            DECLARE_METHOD(t_SpanMultiTermQueryWrapper$SpanRewriteMethod, rewrite, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod, t_SpanMultiTermQueryWrapper$SpanRewriteMethod, ::org::apache::lucene::search::MultiTermQuery$RewriteMethod, SpanMultiTermQueryWrapper$SpanRewriteMethod, t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_, 0, 0, t_SpanMultiTermQueryWrapper$SpanRewriteMethod__fields_, 0, 0);
          PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(const SpanMultiTermQueryWrapper$SpanRewriteMethod& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self = (t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self = (t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SpanMultiTermQueryWrapper$SpanRewriteMethod::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod), module, "SpanMultiTermQueryWrapper$SpanRewriteMethod", 0);
          }

          void t_SpanMultiTermQueryWrapper$SpanRewriteMethod::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod).tp_dict, "class_", make_descriptor(SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod).tp_dict, "wrapfn_", make_descriptor(t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 1)))
              return NULL;
            return t_SpanMultiTermQueryWrapper$SpanRewriteMethod::wrap_Object(SpanMultiTermQueryWrapper$SpanRewriteMethod(((t_SpanMultiTermQueryWrapper$SpanRewriteMethod *) arg)->object.this$));
          }
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanMultiTermQueryWrapper$SpanRewriteMethod::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_of_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SpanMultiTermQueryWrapper$SpanRewriteMethod_init_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args, PyObject *kwds)
          {
            SpanMultiTermQueryWrapper$SpanRewriteMethod object((jobject) NULL);

            INT_CALL(object = SpanMultiTermQueryWrapper$SpanRewriteMethod());
            self->object = object;

            return 0;
          }

          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_rewrite(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.rewrite(a0, a1));
              return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanMultiTermQueryWrapper$SpanRewriteMethod), (PyObject *) self, "rewrite", args, 2);
          }
          static PyObject *t_SpanMultiTermQueryWrapper$SpanRewriteMethod_get__parameters_(t_SpanMultiTermQueryWrapper$SpanRewriteMethod *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/PythonIntParser.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {

        ::java::lang::Class *PythonIntParser::class$ = NULL;
        jmethodID *PythonIntParser::mids$ = NULL;
        bool PythonIntParser::live$ = false;

        jclass PythonIntParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/search/PythonIntParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_parseInt_7bc03ddb] = env->getMethodID(cls, "parseInt", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_termsEnum_fb3ac14e] = env->getMethodID(cls, "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonIntParser::PythonIntParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonIntParser::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonIntParser::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonIntParser::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        static PyObject *t_PythonIntParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonIntParser_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonIntParser_init_(t_PythonIntParser *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonIntParser_finalize(t_PythonIntParser *self);
        static PyObject *t_PythonIntParser_pythonExtension(t_PythonIntParser *self, PyObject *args);
        static jint JNICALL t_PythonIntParser_parseInt0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonIntParser_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonIntParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0);
        static PyObject *t_PythonIntParser_get__self(t_PythonIntParser *self, void *data);
        static PyGetSetDef t_PythonIntParser__fields_[] = {
          DECLARE_GET_FIELD(t_PythonIntParser, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonIntParser__methods_[] = {
          DECLARE_METHOD(t_PythonIntParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIntParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonIntParser, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonIntParser, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonIntParser, t_PythonIntParser, ::java::lang::Object, PythonIntParser, t_PythonIntParser_init_, 0, 0, t_PythonIntParser__fields_, 0, 0);

        void t_PythonIntParser::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonIntParser), module, "PythonIntParser", 1);
        }

        void t_PythonIntParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonIntParser).tp_dict, "class_", make_descriptor(PythonIntParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonIntParser).tp_dict, "wrapfn_", make_descriptor(t_PythonIntParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonIntParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonIntParser::initializeClass);
          JNINativeMethod methods[] = {
            { "parseInt", "(Lorg/apache/lucene/util/BytesRef;)I", (void *) t_PythonIntParser_parseInt0 },
            { "pythonDecRef", "()V", (void *) t_PythonIntParser_pythonDecRef1 },
            { "termsEnum", "(Lorg/apache/lucene/index/Terms;)Lorg/apache/lucene/index/TermsEnum;", (void *) t_PythonIntParser_termsEnum2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonIntParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonIntParser::initializeClass, 1)))
            return NULL;
          return t_PythonIntParser::wrap_Object(PythonIntParser(((t_PythonIntParser *) arg)->object.this$));
        }
        static PyObject *t_PythonIntParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonIntParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonIntParser_init_(t_PythonIntParser *self, PyObject *args, PyObject *kwds)
        {
          PythonIntParser object((jobject) NULL);

          INT_CALL(object = PythonIntParser());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonIntParser_finalize(t_PythonIntParser *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonIntParser_pythonExtension(t_PythonIntParser *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jint JNICALL t_PythonIntParser_parseInt0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::org::apache::lucene::util::t_BytesRef::wrap_Object(::org::apache::lucene::util::BytesRef(a0));
          PyObject *result = PyObject_CallMethod(obj, "parseInt", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("parseInt", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonIntParser_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jobject JNICALL t_PythonIntParser_termsEnum2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonIntParser::mids$[PythonIntParser::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::index::TermsEnum value((jobject) NULL);
          PyObject *o0 = ::org::apache::lucene::index::t_Terms::wrap_Object(::org::apache::lucene::index::Terms(a0));
          PyObject *result = PyObject_CallMethod(obj, "termsEnum", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &value))
          {
            throwTypeError("termsEnum", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonIntParser_get__self(t_PythonIntParser *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *LikeThisQueryBuilder::class$ = NULL;
            jmethodID *LikeThisQueryBuilder::mids$ = NULL;
            bool LikeThisQueryBuilder::live$ = false;

            jclass LikeThisQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/LikeThisQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b896d246] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;[Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LikeThisQueryBuilder::LikeThisQueryBuilder(const ::org::apache::lucene::analysis::Analyzer & a0, const JArray< ::java::lang::String > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b896d246, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_LikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LikeThisQueryBuilder_init_(t_LikeThisQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_LikeThisQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_LikeThisQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LikeThisQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LikeThisQueryBuilder, t_LikeThisQueryBuilder, ::java::lang::Object, LikeThisQueryBuilder, t_LikeThisQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_LikeThisQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(LikeThisQueryBuilder), module, "LikeThisQueryBuilder", 0);
            }

            void t_LikeThisQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LikeThisQueryBuilder).tp_dict, "class_", make_descriptor(LikeThisQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LikeThisQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_LikeThisQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LikeThisQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LikeThisQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LikeThisQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_LikeThisQueryBuilder::wrap_Object(LikeThisQueryBuilder(((t_LikeThisQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_LikeThisQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LikeThisQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LikeThisQueryBuilder_init_(t_LikeThisQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
              JArray< ::java::lang::String > a1((jobject) NULL);
              LikeThisQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k[s", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
              {
                INT_CALL(object = LikeThisQueryBuilder(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/KStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *KStemFilter::class$ = NULL;
          jmethodID *KStemFilter::mids$ = NULL;
          bool KStemFilter::live$ = false;

          jclass KStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/KStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KStemFilter::KStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean KStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_KStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KStemFilter_init_(t_KStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KStemFilter_incrementToken(t_KStemFilter *self, PyObject *args);

          static PyMethodDef t_KStemFilter__methods_[] = {
            DECLARE_METHOD(t_KStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KStemFilter, t_KStemFilter, ::org::apache::lucene::analysis::TokenFilter, KStemFilter, t_KStemFilter_init_, 0, 0, 0, 0, 0);

          void t_KStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KStemFilter), module, "KStemFilter", 0);
          }

          void t_KStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KStemFilter).tp_dict, "class_", make_descriptor(KStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KStemFilter).tp_dict, "wrapfn_", make_descriptor(t_KStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KStemFilter::initializeClass, 1)))
              return NULL;
            return t_KStemFilter::wrap_Object(KStemFilter(((t_KStemFilter *) arg)->object.this$));
          }
          static PyObject *t_KStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KStemFilter_init_(t_KStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            KStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = KStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KStemFilter_incrementToken(t_KStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/NorwegianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *NorwegianStemmer::class$ = NULL;
        jmethodID *NorwegianStemmer::mids$ = NULL;
        bool NorwegianStemmer::live$ = false;

        jclass NorwegianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/NorwegianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NorwegianStemmer::NorwegianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean NorwegianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint NorwegianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean NorwegianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_NorwegianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NorwegianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NorwegianStemmer_init_(t_NorwegianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NorwegianStemmer_equals(t_NorwegianStemmer *self, PyObject *args);
        static PyObject *t_NorwegianStemmer_hashCode(t_NorwegianStemmer *self, PyObject *args);
        static PyObject *t_NorwegianStemmer_stem(t_NorwegianStemmer *self, PyObject *args);

        static PyMethodDef t_NorwegianStemmer__methods_[] = {
          DECLARE_METHOD(t_NorwegianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NorwegianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NorwegianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_NorwegianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_NorwegianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NorwegianStemmer, t_NorwegianStemmer, ::org::tartarus::snowball::SnowballProgram, NorwegianStemmer, t_NorwegianStemmer_init_, 0, 0, 0, 0, 0);

        void t_NorwegianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(NorwegianStemmer), module, "NorwegianStemmer", 0);
        }

        void t_NorwegianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NorwegianStemmer).tp_dict, "class_", make_descriptor(NorwegianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NorwegianStemmer).tp_dict, "wrapfn_", make_descriptor(t_NorwegianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NorwegianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NorwegianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NorwegianStemmer::initializeClass, 1)))
            return NULL;
          return t_NorwegianStemmer::wrap_Object(NorwegianStemmer(((t_NorwegianStemmer *) arg)->object.this$));
        }
        static PyObject *t_NorwegianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NorwegianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NorwegianStemmer_init_(t_NorwegianStemmer *self, PyObject *args, PyObject *kwds)
        {
          NorwegianStemmer object((jobject) NULL);

          INT_CALL(object = NorwegianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_NorwegianStemmer_equals(t_NorwegianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NorwegianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_NorwegianStemmer_hashCode(t_NorwegianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(NorwegianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_NorwegianStemmer_stem(t_NorwegianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(NorwegianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizationFilter::class$ = NULL;
          jmethodID *SoraniNormalizationFilter::mids$ = NULL;
          bool SoraniNormalizationFilter::live$ = false;

          jclass SoraniNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizationFilter::SoraniNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean SoraniNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizationFilter_init_(t_SoraniNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizationFilter_incrementToken(t_SoraniNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_SoraniNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniNormalizationFilter, t_SoraniNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, SoraniNormalizationFilter, t_SoraniNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_SoraniNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizationFilter), module, "SoraniNormalizationFilter", 0);
          }

          void t_SoraniNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilter).tp_dict, "class_", make_descriptor(SoraniNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_SoraniNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizationFilter::wrap_Object(SoraniNormalizationFilter(((t_SoraniNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizationFilter_init_(t_SoraniNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            SoraniNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = SoraniNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniNormalizationFilter_incrementToken(t_SoraniNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SoraniNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FixedBitSet::class$ = NULL;
        jmethodID *FixedBitSet::mids$ = NULL;
        bool FixedBitSet::live$ = false;

        jclass FixedBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FixedBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_ce93dbcb] = env->getMethodID(cls, "<init>", "([JI)V");
            mids$[mid_and_ef674644] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_and_c2b5607d] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_andNot_ef674644] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_andNot_c2b5607d] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_andNotCount_a42679f6] = env->getStaticMethodID(cls, "andNotCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_bits2words_39c7bd23] = env->getStaticMethodID(cls, "bits2words", "(I)I");
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_clear_39c7bd3c] = env->getMethodID(cls, "clear", "(I)V");
            mids$[mid_clear_d8d154a6] = env->getMethodID(cls, "clear", "(II)V");
            mids$[mid_clone_28209941] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/FixedBitSet;");
            mids$[mid_ensureCapacity_7d813305] = env->getStaticMethodID(cls, "ensureCapacity", "(Lorg/apache/lucene/util/FixedBitSet;I)Lorg/apache/lucene/util/FixedBitSet;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_flip_d8d154a6] = env->getMethodID(cls, "flip", "(II)V");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_getAndClear_39c7bd30] = env->getMethodID(cls, "getAndClear", "(I)Z");
            mids$[mid_getAndSet_39c7bd30] = env->getMethodID(cls, "getAndSet", "(I)Z");
            mids$[mid_getBits_dab10e76] = env->getMethodID(cls, "getBits", "()[J");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intersectionCount_a42679f6] = env->getStaticMethodID(cls, "intersectionCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_intersects_ef674648] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/util/FixedBitSet;)Z");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_nextSetBit_39c7bd23] = env->getMethodID(cls, "nextSetBit", "(I)I");
            mids$[mid_or_ef674644] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_or_c2b5607d] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_prevSetBit_39c7bd23] = env->getMethodID(cls, "prevSetBit", "(I)I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_set_39c7bd3c] = env->getMethodID(cls, "set", "(I)V");
            mids$[mid_set_d8d154a6] = env->getMethodID(cls, "set", "(II)V");
            mids$[mid_unionCount_a42679f6] = env->getStaticMethodID(cls, "unionCount", "(Lorg/apache/lucene/util/FixedBitSet;Lorg/apache/lucene/util/FixedBitSet;)J");
            mids$[mid_xor_ef674644] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/util/FixedBitSet;)V");
            mids$[mid_xor_c2b5607d] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FixedBitSet::FixedBitSet(jint a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        FixedBitSet::FixedBitSet(const JArray< jlong > & a0, jint a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_ce93dbcb, a0.this$, a1)) {}

        void FixedBitSet::and$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_ef674644], a0.this$);
        }

        void FixedBitSet::and$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_c2b5607d], a0.this$);
        }

        void FixedBitSet::andNot(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_ef674644], a0.this$);
        }

        void FixedBitSet::andNot(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_c2b5607d], a0.this$);
        }

        jlong FixedBitSet::andNotCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_andNotCount_a42679f6], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::Bits FixedBitSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jint FixedBitSet::bits2words(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bits2words_39c7bd23], a0);
        }

        jint FixedBitSet::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        void FixedBitSet::clear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_39c7bd3c], a0);
        }

        void FixedBitSet::clear(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_d8d154a6], a0, a1);
        }

        FixedBitSet FixedBitSet::clone() const
        {
          return FixedBitSet(env->callObjectMethod(this$, mids$[mid_clone_28209941]));
        }

        FixedBitSet FixedBitSet::ensureCapacity(const FixedBitSet & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return FixedBitSet(env->callStaticObjectMethod(cls, mids$[mid_ensureCapacity_7d813305], a0.this$, a1));
        }

        jboolean FixedBitSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void FixedBitSet::flip(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_d8d154a6], a0, a1);
        }

        jboolean FixedBitSet::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jboolean FixedBitSet::getAndClear(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndClear_39c7bd30], a0);
        }

        jboolean FixedBitSet::getAndSet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_39c7bd30], a0);
        }

        JArray< jlong > FixedBitSet::getBits() const
        {
          return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getBits_dab10e76]));
        }

        jint FixedBitSet::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jlong FixedBitSet::intersectionCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_intersectionCount_a42679f6], a0.this$, a1.this$);
        }

        jboolean FixedBitSet::intersects(const FixedBitSet & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersects_ef674648], a0.this$);
        }

        jboolean FixedBitSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator FixedBitSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jint FixedBitSet::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jint FixedBitSet::nextSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_nextSetBit_39c7bd23], a0);
        }

        void FixedBitSet::or$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_ef674644], a0.this$);
        }

        void FixedBitSet::or$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_c2b5607d], a0.this$);
        }

        jint FixedBitSet::prevSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_prevSetBit_39c7bd23], a0);
        }

        jlong FixedBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void FixedBitSet::set(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_39c7bd3c], a0);
        }

        void FixedBitSet::set(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_set_d8d154a6], a0, a1);
        }

        jlong FixedBitSet::unionCount(const FixedBitSet & a0, const FixedBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_unionCount_a42679f6], a0.this$, a1.this$);
        }

        void FixedBitSet::xor$(const FixedBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_ef674644], a0.this$);
        }

        void FixedBitSet::xor$(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_c2b5607d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/FixedBitSet$FixedBitSetIterator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FixedBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FixedBitSet_init_(t_FixedBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FixedBitSet_and(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_andNot(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_andNotCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_bits(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_bits2words(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FixedBitSet_cardinality(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_clear(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_clone(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_ensureCapacity(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_equals(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_flip(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_get(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_getAndClear(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_getAndSet(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_getBits(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_hashCode(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_intersectionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_intersects(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_isCacheable(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_iterator(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_length(t_FixedBitSet *self);
        static PyObject *t_FixedBitSet_nextSetBit(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_or(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_prevSetBit(t_FixedBitSet *self, PyObject *arg);
        static PyObject *t_FixedBitSet_ramBytesUsed(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_set(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_unionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_FixedBitSet_xor(t_FixedBitSet *self, PyObject *args);
        static PyObject *t_FixedBitSet_get__cacheable(t_FixedBitSet *self, void *data);
        static PyGetSetDef t_FixedBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_FixedBitSet, cacheable),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FixedBitSet__methods_[] = {
          DECLARE_METHOD(t_FixedBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, and, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, andNot, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, andNotCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, bits2words, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, clone, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, ensureCapacity, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, flip, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, get, METH_O),
          DECLARE_METHOD(t_FixedBitSet, getAndClear, METH_O),
          DECLARE_METHOD(t_FixedBitSet, getAndSet, METH_O),
          DECLARE_METHOD(t_FixedBitSet, getBits, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, intersectionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, intersects, METH_O),
          DECLARE_METHOD(t_FixedBitSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_FixedBitSet, nextSetBit, METH_O),
          DECLARE_METHOD(t_FixedBitSet, or, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, prevSetBit, METH_O),
          DECLARE_METHOD(t_FixedBitSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_FixedBitSet, unionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FixedBitSet, xor, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FixedBitSet, t_FixedBitSet, ::org::apache::lucene::search::DocIdSet, FixedBitSet, t_FixedBitSet_init_, 0, 0, t_FixedBitSet__fields_, 0, 0);

        void t_FixedBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(FixedBitSet), module, "FixedBitSet", 0);
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "FixedBitSetIterator", make_descriptor(&PY_TYPE(FixedBitSet$FixedBitSetIterator)));
        }

        void t_FixedBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "class_", make_descriptor(FixedBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "wrapfn_", make_descriptor(t_FixedBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FixedBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FixedBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FixedBitSet::initializeClass, 1)))
            return NULL;
          return t_FixedBitSet::wrap_Object(FixedBitSet(((t_FixedBitSet *) arg)->object.this$));
        }
        static PyObject *t_FixedBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FixedBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FixedBitSet_init_(t_FixedBitSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              FixedBitSet object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = FixedBitSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              FixedBitSet object((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                INT_CALL(object = FixedBitSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FixedBitSet_and(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.and$(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.and$(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "and", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_andNot(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.andNot(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.andNot(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "andNot", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_andNotCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::andNotCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "andNotCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_bits(t_FixedBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_FixedBitSet_bits2words(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::bits2words(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bits2words", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_cardinality(t_FixedBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FixedBitSet_clear(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_clone(t_FixedBitSet *self)
        {
          FixedBitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_FixedBitSet::wrap_Object(result);
        }

        static PyObject *t_FixedBitSet_ensureCapacity(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          jint a1;
          FixedBitSet result((jobject) NULL);

          if (!parseArgs(args, "kI", FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::ensureCapacity(a0, a1));
            return t_FixedBitSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "ensureCapacity", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_equals(t_FixedBitSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FixedBitSet_flip(t_FixedBitSet *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.flip(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "flip", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_get(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_getAndClear(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAndClear(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndClear", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_getAndSet(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getAndSet(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAndSet", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_getBits(t_FixedBitSet *self)
        {
          JArray< jlong > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBits());
          return result.wrap();
        }

        static PyObject *t_FixedBitSet_hashCode(t_FixedBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FixedBitSet_intersectionCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::intersectionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "intersectionCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_intersects(t_FixedBitSet *self, PyObject *arg)
        {
          FixedBitSet a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", FixedBitSet::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersects(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersects", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_isCacheable(t_FixedBitSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_FixedBitSet_iterator(t_FixedBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FixedBitSet_length(t_FixedBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_FixedBitSet_nextSetBit(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.nextSetBit(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "nextSetBit", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_or(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.or$(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.or$(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "or", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_prevSetBit(t_FixedBitSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.prevSetBit(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "prevSetBit", arg);
          return NULL;
        }

        static PyObject *t_FixedBitSet_ramBytesUsed(t_FixedBitSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(FixedBitSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_FixedBitSet_set(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.set(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "set", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_unionCount(PyTypeObject *type, PyObject *args)
        {
          FixedBitSet a0((jobject) NULL);
          FixedBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", FixedBitSet::initializeClass, FixedBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::FixedBitSet::unionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "unionCount", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_xor(t_FixedBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              FixedBitSet a0((jobject) NULL);

              if (!parseArgs(args, "k", FixedBitSet::initializeClass, &a0))
              {
                OBJ_CALL(self->object.xor$(a0));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.xor$(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "xor", args);
          return NULL;
        }

        static PyObject *t_FixedBitSet_get__cacheable(t_FixedBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanNormalizationFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanNormalizationFilter::class$ = NULL;
          jmethodID *GermanNormalizationFilter::mids$ = NULL;
          bool GermanNormalizationFilter::live$ = false;

          jclass GermanNormalizationFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanNormalizationFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanNormalizationFilter::GermanNormalizationFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanNormalizationFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanNormalizationFilter_init_(t_GermanNormalizationFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanNormalizationFilter_incrementToken(t_GermanNormalizationFilter *self, PyObject *args);

          static PyMethodDef t_GermanNormalizationFilter__methods_[] = {
            DECLARE_METHOD(t_GermanNormalizationFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanNormalizationFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanNormalizationFilter, t_GermanNormalizationFilter, ::org::apache::lucene::analysis::TokenFilter, GermanNormalizationFilter, t_GermanNormalizationFilter_init_, 0, 0, 0, 0, 0);

          void t_GermanNormalizationFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanNormalizationFilter), module, "GermanNormalizationFilter", 0);
          }

          void t_GermanNormalizationFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilter).tp_dict, "class_", make_descriptor(GermanNormalizationFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanNormalizationFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanNormalizationFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanNormalizationFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanNormalizationFilter::initializeClass, 1)))
              return NULL;
            return t_GermanNormalizationFilter::wrap_Object(GermanNormalizationFilter(((t_GermanNormalizationFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanNormalizationFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanNormalizationFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanNormalizationFilter_init_(t_GermanNormalizationFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanNormalizationFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanNormalizationFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanNormalizationFilter_incrementToken(t_GermanNormalizationFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanNormalizationFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *NormalizeCharMap$Builder::class$ = NULL;
          jmethodID *NormalizeCharMap$Builder::mids$ = NULL;
          bool NormalizeCharMap$Builder::live$ = false;

          jclass NormalizeCharMap$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_add_4a264742] = env->getMethodID(cls, "add", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_build_bf8be9b0] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizeCharMap$Builder::NormalizeCharMap$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void NormalizeCharMap$Builder::add(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_4a264742], a0.this$, a1.this$);
          }

          ::org::apache::lucene::analysis::charfilter::NormalizeCharMap NormalizeCharMap$Builder::build() const
          {
            return ::org::apache::lucene::analysis::charfilter::NormalizeCharMap(env->callObjectMethod(this$, mids$[mid_build_bf8be9b0]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_NormalizeCharMap$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizeCharMap$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizeCharMap$Builder_init_(t_NormalizeCharMap$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizeCharMap$Builder_add(t_NormalizeCharMap$Builder *self, PyObject *args);
          static PyObject *t_NormalizeCharMap$Builder_build(t_NormalizeCharMap$Builder *self);

          static PyMethodDef t_NormalizeCharMap$Builder__methods_[] = {
            DECLARE_METHOD(t_NormalizeCharMap$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, build, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizeCharMap$Builder, t_NormalizeCharMap$Builder, ::java::lang::Object, NormalizeCharMap$Builder, t_NormalizeCharMap$Builder_init_, 0, 0, 0, 0, 0);

          void t_NormalizeCharMap$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizeCharMap$Builder), module, "NormalizeCharMap$Builder", 0);
          }

          void t_NormalizeCharMap$Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap$Builder).tp_dict, "class_", make_descriptor(NormalizeCharMap$Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap$Builder).tp_dict, "wrapfn_", make_descriptor(t_NormalizeCharMap$Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizeCharMap$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizeCharMap$Builder::initializeClass, 1)))
              return NULL;
            return t_NormalizeCharMap$Builder::wrap_Object(NormalizeCharMap$Builder(((t_NormalizeCharMap$Builder *) arg)->object.this$));
          }
          static PyObject *t_NormalizeCharMap$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizeCharMap$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizeCharMap$Builder_init_(t_NormalizeCharMap$Builder *self, PyObject *args, PyObject *kwds)
          {
            NormalizeCharMap$Builder object((jobject) NULL);

            INT_CALL(object = NormalizeCharMap$Builder());
            self->object = object;

            return 0;
          }

          static PyObject *t_NormalizeCharMap$Builder_add(t_NormalizeCharMap$Builder *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_NormalizeCharMap$Builder_build(t_NormalizeCharMap$Builder *self)
          {
            ::org::apache::lucene::analysis::charfilter::NormalizeCharMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::charfilter::t_NormalizeCharMap::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/LogDocMergePolicy.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *LogDocMergePolicy::class$ = NULL;
        jmethodID *LogDocMergePolicy::mids$ = NULL;
        bool LogDocMergePolicy::live$ = false;
        jint LogDocMergePolicy::DEFAULT_MIN_MERGE_DOCS = (jint) 0;

        jclass LogDocMergePolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/LogDocMergePolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getMinMergeDocs_54c6a179] = env->getMethodID(cls, "getMinMergeDocs", "()I");
            mids$[mid_setMinMergeDocs_39c7bd3c] = env->getMethodID(cls, "setMinMergeDocs", "(I)V");
            mids$[mid_size_5454cb07] = env->getMethodID(cls, "size", "(Lorg/apache/lucene/index/SegmentCommitInfo;Lorg/apache/lucene/index/IndexWriter;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MIN_MERGE_DOCS = env->getStaticIntField(cls, "DEFAULT_MIN_MERGE_DOCS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LogDocMergePolicy::LogDocMergePolicy() : ::org::apache::lucene::index::LogMergePolicy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint LogDocMergePolicy::getMinMergeDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_getMinMergeDocs_54c6a179]);
        }

        void LogDocMergePolicy::setMinMergeDocs(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMinMergeDocs_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_LogDocMergePolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LogDocMergePolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LogDocMergePolicy_init_(t_LogDocMergePolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LogDocMergePolicy_getMinMergeDocs(t_LogDocMergePolicy *self);
        static PyObject *t_LogDocMergePolicy_setMinMergeDocs(t_LogDocMergePolicy *self, PyObject *arg);
        static PyObject *t_LogDocMergePolicy_get__minMergeDocs(t_LogDocMergePolicy *self, void *data);
        static int t_LogDocMergePolicy_set__minMergeDocs(t_LogDocMergePolicy *self, PyObject *arg, void *data);
        static PyGetSetDef t_LogDocMergePolicy__fields_[] = {
          DECLARE_GETSET_FIELD(t_LogDocMergePolicy, minMergeDocs),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LogDocMergePolicy__methods_[] = {
          DECLARE_METHOD(t_LogDocMergePolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogDocMergePolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LogDocMergePolicy, getMinMergeDocs, METH_NOARGS),
          DECLARE_METHOD(t_LogDocMergePolicy, setMinMergeDocs, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LogDocMergePolicy, t_LogDocMergePolicy, ::org::apache::lucene::index::LogMergePolicy, LogDocMergePolicy, t_LogDocMergePolicy_init_, 0, 0, t_LogDocMergePolicy__fields_, 0, 0);

        void t_LogDocMergePolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(LogDocMergePolicy), module, "LogDocMergePolicy", 0);
        }

        void t_LogDocMergePolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "class_", make_descriptor(LogDocMergePolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "wrapfn_", make_descriptor(t_LogDocMergePolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LogDocMergePolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(LogDocMergePolicy).tp_dict, "DEFAULT_MIN_MERGE_DOCS", make_descriptor(LogDocMergePolicy::DEFAULT_MIN_MERGE_DOCS));
        }

        static PyObject *t_LogDocMergePolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LogDocMergePolicy::initializeClass, 1)))
            return NULL;
          return t_LogDocMergePolicy::wrap_Object(LogDocMergePolicy(((t_LogDocMergePolicy *) arg)->object.this$));
        }
        static PyObject *t_LogDocMergePolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LogDocMergePolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LogDocMergePolicy_init_(t_LogDocMergePolicy *self, PyObject *args, PyObject *kwds)
        {
          LogDocMergePolicy object((jobject) NULL);

          INT_CALL(object = LogDocMergePolicy());
          self->object = object;

          return 0;
        }

        static PyObject *t_LogDocMergePolicy_getMinMergeDocs(t_LogDocMergePolicy *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMinMergeDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_LogDocMergePolicy_setMinMergeDocs(t_LogDocMergePolicy *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setMinMergeDocs(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMinMergeDocs", arg);
          return NULL;
        }

        static PyObject *t_LogDocMergePolicy_get__minMergeDocs(t_LogDocMergePolicy *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMinMergeDocs());
          return PyInt_FromLong((long) value);
        }
        static int t_LogDocMergePolicy_set__minMergeDocs(t_LogDocMergePolicy *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setMinMergeDocs(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "minMergeDocs", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/MultiTermQueryWrapperFilter.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *MultiTermQueryWrapperFilter::class$ = NULL;
        jmethodID *MultiTermQueryWrapperFilter::mids$ = NULL;
        bool MultiTermQueryWrapperFilter::live$ = false;

        jclass MultiTermQueryWrapperFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/MultiTermQueryWrapperFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean MultiTermQueryWrapperFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::DocIdSet MultiTermQueryWrapperFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        ::java::lang::String MultiTermQueryWrapperFilter::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        jint MultiTermQueryWrapperFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String MultiTermQueryWrapperFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_MultiTermQueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiTermQueryWrapperFilter_of_(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_equals(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_getDocIdSet(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_getField(t_MultiTermQueryWrapperFilter *self);
        static PyObject *t_MultiTermQueryWrapperFilter_hashCode(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_toString(t_MultiTermQueryWrapperFilter *self, PyObject *args);
        static PyObject *t_MultiTermQueryWrapperFilter_get__field(t_MultiTermQueryWrapperFilter *self, void *data);
        static PyObject *t_MultiTermQueryWrapperFilter_get__parameters_(t_MultiTermQueryWrapperFilter *self, void *data);
        static PyGetSetDef t_MultiTermQueryWrapperFilter__fields_[] = {
          DECLARE_GET_FIELD(t_MultiTermQueryWrapperFilter, field),
          DECLARE_GET_FIELD(t_MultiTermQueryWrapperFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiTermQueryWrapperFilter__methods_[] = {
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, getField, METH_NOARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_MultiTermQueryWrapperFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiTermQueryWrapperFilter, t_MultiTermQueryWrapperFilter, ::org::apache::lucene::search::Filter, MultiTermQueryWrapperFilter, abstract_init, 0, 0, t_MultiTermQueryWrapperFilter__fields_, 0, 0);
        PyObject *t_MultiTermQueryWrapperFilter::wrap_Object(const MultiTermQueryWrapperFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQueryWrapperFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQueryWrapperFilter *self = (t_MultiTermQueryWrapperFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_MultiTermQueryWrapperFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_MultiTermQueryWrapperFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_MultiTermQueryWrapperFilter *self = (t_MultiTermQueryWrapperFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_MultiTermQueryWrapperFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiTermQueryWrapperFilter), module, "MultiTermQueryWrapperFilter", 0);
        }

        void t_MultiTermQueryWrapperFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiTermQueryWrapperFilter).tp_dict, "class_", make_descriptor(MultiTermQueryWrapperFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiTermQueryWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_MultiTermQueryWrapperFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiTermQueryWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiTermQueryWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiTermQueryWrapperFilter::initializeClass, 1)))
            return NULL;
          return t_MultiTermQueryWrapperFilter::wrap_Object(MultiTermQueryWrapperFilter(((t_MultiTermQueryWrapperFilter *) arg)->object.this$));
        }
        static PyObject *t_MultiTermQueryWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiTermQueryWrapperFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiTermQueryWrapperFilter_of_(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_equals(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_getDocIdSet(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_getField(t_MultiTermQueryWrapperFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_hashCode(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_MultiTermQueryWrapperFilter_toString(t_MultiTermQueryWrapperFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(MultiTermQueryWrapperFilter), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_MultiTermQueryWrapperFilter_get__parameters_(t_MultiTermQueryWrapperFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_MultiTermQueryWrapperFilter_get__field(t_MultiTermQueryWrapperFilter *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/TooManyBasicQueries.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *TooManyBasicQueries::class$ = NULL;
            jmethodID *TooManyBasicQueries::mids$ = NULL;
            bool TooManyBasicQueries::live$ = false;

            jclass TooManyBasicQueries::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/TooManyBasicQueries");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TooManyBasicQueries::TooManyBasicQueries(jint a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_TooManyBasicQueries_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TooManyBasicQueries_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TooManyBasicQueries_init_(t_TooManyBasicQueries *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_TooManyBasicQueries__methods_[] = {
              DECLARE_METHOD(t_TooManyBasicQueries, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TooManyBasicQueries, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TooManyBasicQueries, t_TooManyBasicQueries, ::java::io::IOException, TooManyBasicQueries, t_TooManyBasicQueries_init_, 0, 0, 0, 0, 0);

            void t_TooManyBasicQueries::install(PyObject *module)
            {
              installType(&PY_TYPE(TooManyBasicQueries), module, "TooManyBasicQueries", 0);
            }

            void t_TooManyBasicQueries::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TooManyBasicQueries).tp_dict, "class_", make_descriptor(TooManyBasicQueries::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TooManyBasicQueries).tp_dict, "wrapfn_", make_descriptor(t_TooManyBasicQueries::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TooManyBasicQueries).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TooManyBasicQueries_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TooManyBasicQueries::initializeClass, 1)))
                return NULL;
              return t_TooManyBasicQueries::wrap_Object(TooManyBasicQueries(((t_TooManyBasicQueries *) arg)->object.this$));
            }
            static PyObject *t_TooManyBasicQueries_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TooManyBasicQueries::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TooManyBasicQueries_init_(t_TooManyBasicQueries *self, PyObject *args, PyObject *kwds)
            {
              jint a0;
              TooManyBasicQueries object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = TooManyBasicQueries(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ScoreDoc.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopDocs::class$ = NULL;
        jmethodID *TopDocs::mids$ = NULL;
        jfieldID *TopDocs::fids$ = NULL;
        bool TopDocs::live$ = false;

        jclass TopDocs::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopDocs");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_63c9a885] = env->getMethodID(cls, "<init>", "(I[Lorg/apache/lucene/search/ScoreDoc;F)V");
            mids$[mid_getMaxScore_54c6a176] = env->getMethodID(cls, "getMaxScore", "()F");
            mids$[mid_merge_732b94b7] = env->getStaticMethodID(cls, "merge", "(Lorg/apache/lucene/search/Sort;I[Lorg/apache/lucene/search/TopDocs;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_merge_15bf4771] = env->getStaticMethodID(cls, "merge", "(Lorg/apache/lucene/search/Sort;II[Lorg/apache/lucene/search/TopDocs;)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_setMaxScore_06298cab] = env->getMethodID(cls, "setMaxScore", "(F)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_scoreDocs] = env->getFieldID(cls, "scoreDocs", "[Lorg/apache/lucene/search/ScoreDoc;");
            fids$[fid_totalHits] = env->getFieldID(cls, "totalHits", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopDocs::TopDocs(jint a0, const JArray< ::org::apache::lucene::search::ScoreDoc > & a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_63c9a885, a0, a1.this$, a2)) {}

        jfloat TopDocs::getMaxScore() const
        {
          return env->callFloatMethod(this$, mids$[mid_getMaxScore_54c6a176]);
        }

        TopDocs TopDocs::merge(const ::org::apache::lucene::search::Sort & a0, jint a1, const JArray< TopDocs > & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return TopDocs(env->callStaticObjectMethod(cls, mids$[mid_merge_732b94b7], a0.this$, a1, a2.this$));
        }

        TopDocs TopDocs::merge(const ::org::apache::lucene::search::Sort & a0, jint a1, jint a2, const JArray< TopDocs > & a3)
        {
          jclass cls = env->getClass(initializeClass);
          return TopDocs(env->callStaticObjectMethod(cls, mids$[mid_merge_15bf4771], a0.this$, a1, a2, a3.this$));
        }

        void TopDocs::setMaxScore(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMaxScore_06298cab], a0);
        }

        JArray< ::org::apache::lucene::search::ScoreDoc > TopDocs::_get_scoreDocs() const
        {
          return JArray< ::org::apache::lucene::search::ScoreDoc >(env->getObjectField(this$, fids$[fid_scoreDocs]));
        }

        void TopDocs::_set_scoreDocs(const JArray< ::org::apache::lucene::search::ScoreDoc > & a0) const
        {
          env->setObjectField(this$, fids$[fid_scoreDocs], a0.this$);
        }

        jint TopDocs::_get_totalHits() const
        {
          return env->getIntField(this$, fids$[fid_totalHits]);
        }

        void TopDocs::_set_totalHits(jint a0) const
        {
          env->setIntField(this$, fids$[fid_totalHits], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopDocs_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocs_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TopDocs_init_(t_TopDocs *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopDocs_getMaxScore(t_TopDocs *self);
        static PyObject *t_TopDocs_merge(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopDocs_setMaxScore(t_TopDocs *self, PyObject *arg);
        static PyObject *t_TopDocs_get__scoreDocs(t_TopDocs *self, void *data);
        static int t_TopDocs_set__scoreDocs(t_TopDocs *self, PyObject *arg, void *data);
        static PyObject *t_TopDocs_get__totalHits(t_TopDocs *self, void *data);
        static int t_TopDocs_set__totalHits(t_TopDocs *self, PyObject *arg, void *data);

        static PyObject *t_TopDocs_get__maxScore(t_TopDocs *self, void *data);
        static int t_TopDocs_set__maxScore(t_TopDocs *self, PyObject *arg, void *data);
        static PyGetSetDef t_TopDocs__fields_[] = {
          DECLARE_GETSET_FIELD(t_TopDocs, scoreDocs),
          DECLARE_GETSET_FIELD(t_TopDocs, totalHits),
          DECLARE_GETSET_FIELD(t_TopDocs, maxScore),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopDocs__methods_[] = {
          DECLARE_METHOD(t_TopDocs, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocs, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocs, getMaxScore, METH_NOARGS),
          DECLARE_METHOD(t_TopDocs, merge, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TopDocs, setMaxScore, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopDocs, t_TopDocs, ::java::lang::Object, TopDocs, t_TopDocs_init_, 0, 0, t_TopDocs__fields_, 0, 0);

        void t_TopDocs::install(PyObject *module)
        {
          installType(&PY_TYPE(TopDocs), module, "TopDocs", 0);
        }

        void t_TopDocs::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopDocs).tp_dict, "class_", make_descriptor(TopDocs::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopDocs).tp_dict, "wrapfn_", make_descriptor(t_TopDocs::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopDocs).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopDocs_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopDocs::initializeClass, 1)))
            return NULL;
          return t_TopDocs::wrap_Object(TopDocs(((t_TopDocs *) arg)->object.this$));
        }
        static PyObject *t_TopDocs_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopDocs::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TopDocs_init_(t_TopDocs *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          JArray< ::org::apache::lucene::search::ScoreDoc > a1((jobject) NULL);
          jfloat a2;
          TopDocs object((jobject) NULL);

          if (!parseArgs(args, "I[kF", ::org::apache::lucene::search::ScoreDoc::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = TopDocs(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopDocs_getMaxScore(t_TopDocs *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getMaxScore());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_TopDocs_merge(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              JArray< TopDocs > a2((jobject) NULL);
              TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kI[k", ::org::apache::lucene::search::Sort::initializeClass, TopDocs::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopDocs::merge(a0, a1, a2));
                return t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              jint a2;
              JArray< TopDocs > a3((jobject) NULL);
              TopDocs result((jobject) NULL);

              if (!parseArgs(args, "kII[k", ::org::apache::lucene::search::Sort::initializeClass, TopDocs::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopDocs::merge(a0, a1, a2, a3));
                return t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "merge", args);
          return NULL;
        }

        static PyObject *t_TopDocs_setMaxScore(t_TopDocs *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setMaxScore(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMaxScore", arg);
          return NULL;
        }

        static PyObject *t_TopDocs_get__scoreDocs(t_TopDocs *self, void *data)
        {
          JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_scoreDocs());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_ScoreDoc::wrap_jobject);
        }
        static int t_TopDocs_set__scoreDocs(t_TopDocs *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::search::ScoreDoc > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::search::ScoreDoc::initializeClass, &value))
          {
            INT_CALL(self->object._set_scoreDocs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "scoreDocs", arg);
          return -1;
        }

        static PyObject *t_TopDocs_get__totalHits(t_TopDocs *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_totalHits());
          return PyInt_FromLong((long) value);
        }
        static int t_TopDocs_set__totalHits(t_TopDocs *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_totalHits(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalHits", arg);
          return -1;
        }

        static PyObject *t_TopDocs_get__maxScore(t_TopDocs *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getMaxScore());
          return PyFloat_FromDouble((double) value);
        }
        static int t_TopDocs_set__maxScore(t_TopDocs *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setMaxScore(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "maxScore", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizer::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizer::mids$ = NULL;
          bool UAX29URLEmailTokenizer::live$ = false;
          jint UAX29URLEmailTokenizer::ALPHANUM = (jint) 0;
          jint UAX29URLEmailTokenizer::EMAIL = (jint) 0;
          jint UAX29URLEmailTokenizer::HANGUL = (jint) 0;
          jint UAX29URLEmailTokenizer::HIRAGANA = (jint) 0;
          jint UAX29URLEmailTokenizer::IDEOGRAPHIC = (jint) 0;
          jint UAX29URLEmailTokenizer::KATAKANA = (jint) 0;
          jint UAX29URLEmailTokenizer::NUM = (jint) 0;
          jint UAX29URLEmailTokenizer::SOUTHEAST_ASIAN = (jint) 0;
          JArray< ::java::lang::String > *UAX29URLEmailTokenizer::TOKEN_TYPES = NULL;
          jint UAX29URLEmailTokenizer::URL = (jint) 0;

          jclass UAX29URLEmailTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              EMAIL = env->getStaticIntField(cls, "EMAIL");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              IDEOGRAPHIC = env->getStaticIntField(cls, "IDEOGRAPHIC");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              NUM = env->getStaticIntField(cls, "NUM");
              SOUTHEAST_ASIAN = env->getStaticIntField(cls, "SOUTHEAST_ASIAN");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              URL = env->getStaticIntField(cls, "URL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizer::UAX29URLEmailTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          UAX29URLEmailTokenizer::UAX29URLEmailTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void UAX29URLEmailTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void UAX29URLEmailTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jint UAX29URLEmailTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          jboolean UAX29URLEmailTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void UAX29URLEmailTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void UAX29URLEmailTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizer_init_(t_UAX29URLEmailTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizer_close(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_end(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_getMaxTokenLength(t_UAX29URLEmailTokenizer *self);
          static PyObject *t_UAX29URLEmailTokenizer_incrementToken(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_reset(t_UAX29URLEmailTokenizer *self, PyObject *args);
          static PyObject *t_UAX29URLEmailTokenizer_setMaxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizer_get__maxTokenLength(t_UAX29URLEmailTokenizer *self, void *data);
          static int t_UAX29URLEmailTokenizer_set__maxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_UAX29URLEmailTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_UAX29URLEmailTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UAX29URLEmailTokenizer__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailTokenizer, t_UAX29URLEmailTokenizer, ::org::apache::lucene::analysis::Tokenizer, UAX29URLEmailTokenizer, t_UAX29URLEmailTokenizer_init_, 0, 0, t_UAX29URLEmailTokenizer__fields_, 0, 0);

          void t_UAX29URLEmailTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizer), module, "UAX29URLEmailTokenizer", 0);
          }

          void t_UAX29URLEmailTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(UAX29URLEmailTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "ALPHANUM", make_descriptor(UAX29URLEmailTokenizer::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "EMAIL", make_descriptor(UAX29URLEmailTokenizer::EMAIL));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "HANGUL", make_descriptor(UAX29URLEmailTokenizer::HANGUL));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "HIRAGANA", make_descriptor(UAX29URLEmailTokenizer::HIRAGANA));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "IDEOGRAPHIC", make_descriptor(UAX29URLEmailTokenizer::IDEOGRAPHIC));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "KATAKANA", make_descriptor(UAX29URLEmailTokenizer::KATAKANA));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "NUM", make_descriptor(UAX29URLEmailTokenizer::NUM));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "SOUTHEAST_ASIAN", make_descriptor(UAX29URLEmailTokenizer::SOUTHEAST_ASIAN));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(UAX29URLEmailTokenizer::TOKEN_TYPES->this$).wrap()));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizer).tp_dict, "URL", make_descriptor(UAX29URLEmailTokenizer::URL));
          }

          static PyObject *t_UAX29URLEmailTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizer::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizer::wrap_Object(UAX29URLEmailTokenizer(((t_UAX29URLEmailTokenizer *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizer_init_(t_UAX29URLEmailTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                UAX29URLEmailTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = UAX29URLEmailTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                UAX29URLEmailTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = UAX29URLEmailTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizer_close(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_end(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_getMaxTokenLength(t_UAX29URLEmailTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_UAX29URLEmailTokenizer_incrementToken(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_reset(t_UAX29URLEmailTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_UAX29URLEmailTokenizer_setMaxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_UAX29URLEmailTokenizer_get__maxTokenLength(t_UAX29URLEmailTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_UAX29URLEmailTokenizer_set__maxTokenLength(t_UAX29URLEmailTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/LuceneLevenshteinDistance.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spell/StringDistance.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *LuceneLevenshteinDistance::class$ = NULL;
          jmethodID *LuceneLevenshteinDistance::mids$ = NULL;
          bool LuceneLevenshteinDistance::live$ = false;

          jclass LuceneLevenshteinDistance::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/LuceneLevenshteinDistance");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getDistance_4a264752] = env->getMethodID(cls, "getDistance", "(Ljava/lang/String;Ljava/lang/String;)F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LuceneLevenshteinDistance::LuceneLevenshteinDistance() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jfloat LuceneLevenshteinDistance::getDistance(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_getDistance_4a264752], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_LuceneLevenshteinDistance_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LuceneLevenshteinDistance_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LuceneLevenshteinDistance_init_(t_LuceneLevenshteinDistance *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LuceneLevenshteinDistance_getDistance(t_LuceneLevenshteinDistance *self, PyObject *args);

          static PyMethodDef t_LuceneLevenshteinDistance__methods_[] = {
            DECLARE_METHOD(t_LuceneLevenshteinDistance, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneLevenshteinDistance, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LuceneLevenshteinDistance, getDistance, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LuceneLevenshteinDistance, t_LuceneLevenshteinDistance, ::java::lang::Object, LuceneLevenshteinDistance, t_LuceneLevenshteinDistance_init_, 0, 0, 0, 0, 0);

          void t_LuceneLevenshteinDistance::install(PyObject *module)
          {
            installType(&PY_TYPE(LuceneLevenshteinDistance), module, "LuceneLevenshteinDistance", 0);
          }

          void t_LuceneLevenshteinDistance::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LuceneLevenshteinDistance).tp_dict, "class_", make_descriptor(LuceneLevenshteinDistance::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LuceneLevenshteinDistance).tp_dict, "wrapfn_", make_descriptor(t_LuceneLevenshteinDistance::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LuceneLevenshteinDistance).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LuceneLevenshteinDistance_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LuceneLevenshteinDistance::initializeClass, 1)))
              return NULL;
            return t_LuceneLevenshteinDistance::wrap_Object(LuceneLevenshteinDistance(((t_LuceneLevenshteinDistance *) arg)->object.this$));
          }
          static PyObject *t_LuceneLevenshteinDistance_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LuceneLevenshteinDistance::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LuceneLevenshteinDistance_init_(t_LuceneLevenshteinDistance *self, PyObject *args, PyObject *kwds)
          {
            LuceneLevenshteinDistance object((jobject) NULL);

            INT_CALL(object = LuceneLevenshteinDistance());
            self->object = object;

            return 0;
          }

          static PyObject *t_LuceneLevenshteinDistance_getDistance(t_LuceneLevenshteinDistance *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getDistance(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDistance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanStemFilter.h"
#include "org/apache/lucene/analysis/de/GermanStemmer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanStemFilter::class$ = NULL;
          jmethodID *GermanStemFilter::mids$ = NULL;
          bool GermanStemFilter::live$ = false;

          jclass GermanStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_setStemmer_4867d4cf] = env->getMethodID(cls, "setStemmer", "(Lorg/apache/lucene/analysis/de/GermanStemmer;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanStemFilter::GermanStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GermanStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void GermanStemFilter::setStemmer(const ::org::apache::lucene::analysis::de::GermanStemmer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setStemmer_4867d4cf], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanStemFilter_init_(t_GermanStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanStemFilter_incrementToken(t_GermanStemFilter *self, PyObject *args);
          static PyObject *t_GermanStemFilter_setStemmer(t_GermanStemFilter *self, PyObject *arg);
          static int t_GermanStemFilter_set__stemmer(t_GermanStemFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_GermanStemFilter__fields_[] = {
            DECLARE_SET_FIELD(t_GermanStemFilter, stemmer),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GermanStemFilter__methods_[] = {
            DECLARE_METHOD(t_GermanStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanStemFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_GermanStemFilter, setStemmer, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanStemFilter, t_GermanStemFilter, ::org::apache::lucene::analysis::TokenFilter, GermanStemFilter, t_GermanStemFilter_init_, 0, 0, t_GermanStemFilter__fields_, 0, 0);

          void t_GermanStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanStemFilter), module, "GermanStemFilter", 0);
          }

          void t_GermanStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanStemFilter).tp_dict, "class_", make_descriptor(GermanStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GermanStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanStemFilter::initializeClass, 1)))
              return NULL;
            return t_GermanStemFilter::wrap_Object(GermanStemFilter(((t_GermanStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GermanStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanStemFilter_init_(t_GermanStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GermanStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GermanStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanStemFilter_incrementToken(t_GermanStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GermanStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_GermanStemFilter_setStemmer(t_GermanStemFilter *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::de::GermanStemmer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::de::GermanStemmer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setStemmer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStemmer", arg);
            return NULL;
          }

          static int t_GermanStemFilter_set__stemmer(t_GermanStemFilter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::analysis::de::GermanStemmer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::de::GermanStemmer::initializeClass, &value))
              {
                INT_CALL(self->object.setStemmer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "stemmer", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramFilterFactory::class$ = NULL;
          jmethodID *EdgeNGramFilterFactory::mids$ = NULL;
          bool EdgeNGramFilterFactory::live$ = false;

          jclass EdgeNGramFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ad8ef474] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ngram/EdgeNGramTokenFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramFilterFactory::EdgeNGramFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter EdgeNGramFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter(env->callObjectMethod(this$, mids$[mid_create_ad8ef474], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramFilterFactory_init_(t_EdgeNGramFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramFilterFactory_create(t_EdgeNGramFilterFactory *self, PyObject *args);

          static PyMethodDef t_EdgeNGramFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramFilterFactory, t_EdgeNGramFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, EdgeNGramFilterFactory, t_EdgeNGramFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramFilterFactory), module, "EdgeNGramFilterFactory", 0);
          }

          void t_EdgeNGramFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramFilterFactory).tp_dict, "class_", make_descriptor(EdgeNGramFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EdgeNGramFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramFilterFactory::wrap_Object(EdgeNGramFilterFactory(((t_EdgeNGramFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramFilterFactory_init_(t_EdgeNGramFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EdgeNGramFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EdgeNGramFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramFilterFactory_create(t_EdgeNGramFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ngram::EdgeNGramTokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ngram::t_EdgeNGramTokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EdgeNGramFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicTokenizer::class$ = NULL;
          jmethodID *ClassicTokenizer::mids$ = NULL;
          bool ClassicTokenizer::live$ = false;
          jint ClassicTokenizer::ACRONYM = (jint) 0;
          jint ClassicTokenizer::ACRONYM_DEP = (jint) 0;
          jint ClassicTokenizer::ALPHANUM = (jint) 0;
          jint ClassicTokenizer::APOSTROPHE = (jint) 0;
          jint ClassicTokenizer::CJ = (jint) 0;
          jint ClassicTokenizer::COMPANY = (jint) 0;
          jint ClassicTokenizer::EMAIL = (jint) 0;
          jint ClassicTokenizer::HOST = (jint) 0;
          jint ClassicTokenizer::NUM = (jint) 0;
          JArray< ::java::lang::String > *ClassicTokenizer::TOKEN_TYPES = NULL;

          jclass ClassicTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_getMaxTokenLength_54c6a179] = env->getMethodID(cls, "getMaxTokenLength", "()I");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setMaxTokenLength_39c7bd3c] = env->getMethodID(cls, "setMaxTokenLength", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ACRONYM = env->getStaticIntField(cls, "ACRONYM");
              ACRONYM_DEP = env->getStaticIntField(cls, "ACRONYM_DEP");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              APOSTROPHE = env->getStaticIntField(cls, "APOSTROPHE");
              CJ = env->getStaticIntField(cls, "CJ");
              COMPANY = env->getStaticIntField(cls, "COMPANY");
              EMAIL = env->getStaticIntField(cls, "EMAIL");
              HOST = env->getStaticIntField(cls, "HOST");
              NUM = env->getStaticIntField(cls, "NUM");
              TOKEN_TYPES = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "TOKEN_TYPES", "[Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicTokenizer::ClassicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          ClassicTokenizer::ClassicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}

          void ClassicTokenizer::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void ClassicTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jint ClassicTokenizer::getMaxTokenLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxTokenLength_54c6a179]);
          }

          jboolean ClassicTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ClassicTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void ClassicTokenizer::setMaxTokenLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxTokenLength_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicTokenizer_init_(t_ClassicTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicTokenizer_close(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_end(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_getMaxTokenLength(t_ClassicTokenizer *self);
          static PyObject *t_ClassicTokenizer_incrementToken(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_reset(t_ClassicTokenizer *self, PyObject *args);
          static PyObject *t_ClassicTokenizer_setMaxTokenLength(t_ClassicTokenizer *self, PyObject *arg);
          static PyObject *t_ClassicTokenizer_get__maxTokenLength(t_ClassicTokenizer *self, void *data);
          static int t_ClassicTokenizer_set__maxTokenLength(t_ClassicTokenizer *self, PyObject *arg, void *data);
          static PyGetSetDef t_ClassicTokenizer__fields_[] = {
            DECLARE_GETSET_FIELD(t_ClassicTokenizer, maxTokenLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ClassicTokenizer__methods_[] = {
            DECLARE_METHOD(t_ClassicTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicTokenizer, close, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, getMaxTokenLength, METH_NOARGS),
            DECLARE_METHOD(t_ClassicTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, reset, METH_VARARGS),
            DECLARE_METHOD(t_ClassicTokenizer, setMaxTokenLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicTokenizer, t_ClassicTokenizer, ::org::apache::lucene::analysis::Tokenizer, ClassicTokenizer, t_ClassicTokenizer_init_, 0, 0, t_ClassicTokenizer__fields_, 0, 0);

          void t_ClassicTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicTokenizer), module, "ClassicTokenizer", 0);
          }

          void t_ClassicTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "class_", make_descriptor(ClassicTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ClassicTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ClassicTokenizer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "ACRONYM", make_descriptor(ClassicTokenizer::ACRONYM));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "ACRONYM_DEP", make_descriptor(ClassicTokenizer::ACRONYM_DEP));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "ALPHANUM", make_descriptor(ClassicTokenizer::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "APOSTROPHE", make_descriptor(ClassicTokenizer::APOSTROPHE));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "CJ", make_descriptor(ClassicTokenizer::CJ));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "COMPANY", make_descriptor(ClassicTokenizer::COMPANY));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "EMAIL", make_descriptor(ClassicTokenizer::EMAIL));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "HOST", make_descriptor(ClassicTokenizer::HOST));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "NUM", make_descriptor(ClassicTokenizer::NUM));
            PyDict_SetItemString(PY_TYPE(ClassicTokenizer).tp_dict, "TOKEN_TYPES", make_descriptor(JArray<jstring>(ClassicTokenizer::TOKEN_TYPES->this$).wrap()));
          }

          static PyObject *t_ClassicTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicTokenizer::initializeClass, 1)))
              return NULL;
            return t_ClassicTokenizer::wrap_Object(ClassicTokenizer(((t_ClassicTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ClassicTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicTokenizer_init_(t_ClassicTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ClassicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = ClassicTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ClassicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ClassicTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicTokenizer_close(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_ClassicTokenizer_end(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ClassicTokenizer_getMaxTokenLength(t_ClassicTokenizer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_ClassicTokenizer_incrementToken(t_ClassicTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ClassicTokenizer_reset(t_ClassicTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ClassicTokenizer), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ClassicTokenizer_setMaxTokenLength(t_ClassicTokenizer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxTokenLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxTokenLength", arg);
            return NULL;
          }

          static PyObject *t_ClassicTokenizer_get__maxTokenLength(t_ClassicTokenizer *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxTokenLength());
            return PyInt_FromLong((long) value);
          }
          static int t_ClassicTokenizer_set__maxTokenLength(t_ClassicTokenizer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxTokenLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxTokenLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/QueryRescorer.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/search/Explanation.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *QueryRescorer::class$ = NULL;
        jmethodID *QueryRescorer::mids$ = NULL;
        bool QueryRescorer::live$ = false;

        jclass QueryRescorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/QueryRescorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
            mids$[mid_explain_2b38e623] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/Explanation;I)Lorg/apache/lucene/search/Explanation;");
            mids$[mid_rescore_bd3343d7] = env->getMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_rescore_93dee955] = env->getStaticMethodID(cls, "rescore", "(Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;Lorg/apache/lucene/search/Query;DI)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_combine_a950a3d1] = env->getMethodID(cls, "combine", "(FZF)F");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        QueryRescorer::QueryRescorer(const ::org::apache::lucene::search::Query & a0) : ::org::apache::lucene::search::Rescorer(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

        ::org::apache::lucene::search::Explanation QueryRescorer::explain(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::Explanation & a1, jint a2) const
        {
          return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_2b38e623], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs QueryRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, jint a2) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_rescore_bd3343d7], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::TopDocs QueryRescorer::rescore(const ::org::apache::lucene::search::IndexSearcher & a0, const ::org::apache::lucene::search::TopDocs & a1, const ::org::apache::lucene::search::Query & a2, jdouble a3, jint a4)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::TopDocs(env->callStaticObjectMethod(cls, mids$[mid_rescore_93dee955], a0.this$, a1.this$, a2.this$, a3, a4));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_QueryRescorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_QueryRescorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_QueryRescorer_init_(t_QueryRescorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_QueryRescorer_explain(t_QueryRescorer *self, PyObject *args);
        static PyObject *t_QueryRescorer_rescore(t_QueryRescorer *self, PyObject *args);
        static PyObject *t_QueryRescorer_rescore_(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_QueryRescorer__methods_[] = {
          DECLARE_METHOD(t_QueryRescorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryRescorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_QueryRescorer, explain, METH_VARARGS),
          DECLARE_METHOD(t_QueryRescorer, rescore, METH_VARARGS),
          DECLARE_METHOD(t_QueryRescorer, rescore_, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(QueryRescorer, t_QueryRescorer, ::org::apache::lucene::search::Rescorer, QueryRescorer, t_QueryRescorer_init_, 0, 0, 0, 0, 0);

        void t_QueryRescorer::install(PyObject *module)
        {
          installType(&PY_TYPE(QueryRescorer), module, "QueryRescorer", 0);
        }

        void t_QueryRescorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(QueryRescorer).tp_dict, "class_", make_descriptor(QueryRescorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(QueryRescorer).tp_dict, "wrapfn_", make_descriptor(t_QueryRescorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(QueryRescorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_QueryRescorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, QueryRescorer::initializeClass, 1)))
            return NULL;
          return t_QueryRescorer::wrap_Object(QueryRescorer(((t_QueryRescorer *) arg)->object.this$));
        }
        static PyObject *t_QueryRescorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, QueryRescorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_QueryRescorer_init_(t_QueryRescorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Query a0((jobject) NULL);
          QueryRescorer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
          {
            INT_CALL(object = QueryRescorer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_QueryRescorer_explain(t_QueryRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::Explanation a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::Explanation result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::Explanation::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.explain(a0, a1, a2));
            return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(QueryRescorer), (PyObject *) self, "explain", args, 2);
        }

        static PyObject *t_QueryRescorer_rescore(t_QueryRescorer *self, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          jint a2;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.rescore(a0, a1, a2));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(QueryRescorer), (PyObject *) self, "rescore", args, 2);
        }

        static PyObject *t_QueryRescorer_rescore_(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          ::org::apache::lucene::search::TopDocs a1((jobject) NULL);
          ::org::apache::lucene::search::Query a2((jobject) NULL);
          jdouble a3;
          jint a4;
          ::org::apache::lucene::search::TopDocs result((jobject) NULL);

          if (!parseArgs(args, "kkkDI", ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::QueryRescorer::rescore(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "rescore_", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PackedTokenAttributeImpl::class$ = NULL;
          jmethodID *PackedTokenAttributeImpl::mids$ = NULL;
          bool PackedTokenAttributeImpl::live$ = false;

          jclass PackedTokenAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_2353e953] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl;");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_getPositionLength_54c6a179] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_setOffset_d8d154a6] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");
              mids$[mid_setPositionLength_39c7bd3c] = env->getMethodID(cls, "setPositionLength", "(I)V");
              mids$[mid_setType_5fdc3f48] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");
              mids$[mid_type_14c7b5c5] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedTokenAttributeImpl::PackedTokenAttributeImpl() : ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PackedTokenAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          PackedTokenAttributeImpl PackedTokenAttributeImpl::clone() const
          {
            return PackedTokenAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_2353e953]));
          }

          void PackedTokenAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jint PackedTokenAttributeImpl::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
          }

          jboolean PackedTokenAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PackedTokenAttributeImpl::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
          }

          jint PackedTokenAttributeImpl::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_54c6a179]);
          }

          jint PackedTokenAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PackedTokenAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
          }

          void PackedTokenAttributeImpl::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_d8d154a6], a0, a1);
          }

          void PackedTokenAttributeImpl::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
          }

          void PackedTokenAttributeImpl::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_39c7bd3c], a0);
          }

          void PackedTokenAttributeImpl::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_5fdc3f48], a0.this$);
          }

          jint PackedTokenAttributeImpl::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
          }

          ::java::lang::String PackedTokenAttributeImpl::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PackedTokenAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedTokenAttributeImpl_init_(t_PackedTokenAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedTokenAttributeImpl_clear(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_clone(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_copyTo(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_endOffset(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_equals(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_getPositionIncrement(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_getPositionLength(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_hashCode(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_reflectWith(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_setOffset(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_setPositionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_setPositionLength(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_setType(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_startOffset(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_type(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_get__positionIncrement(t_PackedTokenAttributeImpl *self, void *data);
          static int t_PackedTokenAttributeImpl_set__positionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data);
          static PyObject *t_PackedTokenAttributeImpl_get__positionLength(t_PackedTokenAttributeImpl *self, void *data);
          static int t_PackedTokenAttributeImpl_set__positionLength(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PackedTokenAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PackedTokenAttributeImpl, positionIncrement),
            DECLARE_GETSET_FIELD(t_PackedTokenAttributeImpl, positionLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedTokenAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PackedTokenAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setPositionIncrement, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setPositionLength, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setType, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, startOffset, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedTokenAttributeImpl, t_PackedTokenAttributeImpl, ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl, PackedTokenAttributeImpl, t_PackedTokenAttributeImpl_init_, 0, 0, t_PackedTokenAttributeImpl__fields_, 0, 0);

          void t_PackedTokenAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedTokenAttributeImpl), module, "PackedTokenAttributeImpl", 0);
          }

          void t_PackedTokenAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedTokenAttributeImpl).tp_dict, "class_", make_descriptor(PackedTokenAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedTokenAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PackedTokenAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedTokenAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedTokenAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedTokenAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PackedTokenAttributeImpl::wrap_Object(PackedTokenAttributeImpl(((t_PackedTokenAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PackedTokenAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedTokenAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedTokenAttributeImpl_init_(t_PackedTokenAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PackedTokenAttributeImpl object((jobject) NULL);

            INT_CALL(object = PackedTokenAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedTokenAttributeImpl_clear(t_PackedTokenAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_clone(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            PackedTokenAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_PackedTokenAttributeImpl::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_copyTo(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_endOffset(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_equals(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_getPositionIncrement(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_getPositionLength(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_hashCode(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_reflectWith(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_setOffset(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setPositionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setPositionLength(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setType(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_startOffset(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_type(t_PackedTokenAttributeImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }

          static PyObject *t_PackedTokenAttributeImpl_get__positionIncrement(t_PackedTokenAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyInt_FromLong((long) value);
          }
          static int t_PackedTokenAttributeImpl_set__positionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }

          static PyObject *t_PackedTokenAttributeImpl_get__positionLength(t_PackedTokenAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyInt_FromLong((long) value);
          }
          static int t_PackedTokenAttributeImpl_set__positionLength(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RollingBuffer.h"
#include "org/apache/lucene/util/RollingBuffer$Resettable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RollingBuffer::class$ = NULL;
        jmethodID *RollingBuffer::mids$ = NULL;
        bool RollingBuffer::live$ = false;

        jclass RollingBuffer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RollingBuffer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_freeBefore_39c7bd3c] = env->getMethodID(cls, "freeBefore", "(I)V");
            mids$[mid_get_730fb8ff] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/util/RollingBuffer$Resettable;");
            mids$[mid_getMaxPos_54c6a179] = env->getMethodID(cls, "getMaxPos", "()I");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
            mids$[mid_newInstance_a57a1151] = env->getMethodID(cls, "newInstance", "()Lorg/apache/lucene/util/RollingBuffer$Resettable;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RollingBuffer::RollingBuffer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void RollingBuffer::freeBefore(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_freeBefore_39c7bd3c], a0);
        }

        ::org::apache::lucene::util::RollingBuffer$Resettable RollingBuffer::get(jint a0) const
        {
          return ::org::apache::lucene::util::RollingBuffer$Resettable(env->callObjectMethod(this$, mids$[mid_get_730fb8ff], a0));
        }

        jint RollingBuffer::getMaxPos() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxPos_54c6a179]);
        }

        void RollingBuffer::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RollingBuffer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RollingBuffer_of_(t_RollingBuffer *self, PyObject *args);
        static int t_RollingBuffer_init_(t_RollingBuffer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RollingBuffer_freeBefore(t_RollingBuffer *self, PyObject *arg);
        static PyObject *t_RollingBuffer_get(t_RollingBuffer *self, PyObject *arg);
        static PyObject *t_RollingBuffer_getMaxPos(t_RollingBuffer *self);
        static PyObject *t_RollingBuffer_reset(t_RollingBuffer *self);
        static PyObject *t_RollingBuffer_get__maxPos(t_RollingBuffer *self, void *data);
        static PyObject *t_RollingBuffer_get__parameters_(t_RollingBuffer *self, void *data);
        static PyGetSetDef t_RollingBuffer__fields_[] = {
          DECLARE_GET_FIELD(t_RollingBuffer, maxPos),
          DECLARE_GET_FIELD(t_RollingBuffer, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RollingBuffer__methods_[] = {
          DECLARE_METHOD(t_RollingBuffer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RollingBuffer, of_, METH_VARARGS),
          DECLARE_METHOD(t_RollingBuffer, freeBefore, METH_O),
          DECLARE_METHOD(t_RollingBuffer, get, METH_O),
          DECLARE_METHOD(t_RollingBuffer, getMaxPos, METH_NOARGS),
          DECLARE_METHOD(t_RollingBuffer, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RollingBuffer, t_RollingBuffer, ::java::lang::Object, RollingBuffer, t_RollingBuffer_init_, 0, 0, t_RollingBuffer__fields_, 0, 0);
        PyObject *t_RollingBuffer::wrap_Object(const RollingBuffer& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer *self = (t_RollingBuffer *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_RollingBuffer::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_RollingBuffer::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_RollingBuffer *self = (t_RollingBuffer *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_RollingBuffer::install(PyObject *module)
        {
          installType(&PY_TYPE(RollingBuffer), module, "RollingBuffer", 0);
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "Resettable", make_descriptor(&PY_TYPE(RollingBuffer$Resettable)));
        }

        void t_RollingBuffer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "class_", make_descriptor(RollingBuffer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "wrapfn_", make_descriptor(t_RollingBuffer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RollingBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RollingBuffer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RollingBuffer::initializeClass, 1)))
            return NULL;
          return t_RollingBuffer::wrap_Object(RollingBuffer(((t_RollingBuffer *) arg)->object.this$));
        }
        static PyObject *t_RollingBuffer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RollingBuffer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RollingBuffer_of_(t_RollingBuffer *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_RollingBuffer_init_(t_RollingBuffer *self, PyObject *args, PyObject *kwds)
        {
          RollingBuffer object((jobject) NULL);

          INT_CALL(object = RollingBuffer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RollingBuffer_freeBefore(t_RollingBuffer *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.freeBefore(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "freeBefore", arg);
          return NULL;
        }

        static PyObject *t_RollingBuffer_get(t_RollingBuffer *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::RollingBuffer$Resettable result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::util::t_RollingBuffer$Resettable::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_RollingBuffer_getMaxPos(t_RollingBuffer *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxPos());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RollingBuffer_reset(t_RollingBuffer *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
        static PyObject *t_RollingBuffer_get__parameters_(t_RollingBuffer *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_RollingBuffer_get__maxPos(t_RollingBuffer *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxPos());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FSTEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FSTEnum::class$ = NULL;
          jmethodID *FSTEnum::mids$ = NULL;
          bool FSTEnum::live$ = false;

          jclass FSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_grow_54c6a166] = env->getMethodID(cls, "grow", "()V");
              mids$[mid_doNext_54c6a166] = env->getMethodID(cls, "doNext", "()V");
              mids$[mid_getTargetLabel_54c6a179] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_getCurrentLabel_54c6a179] = env->getMethodID(cls, "getCurrentLabel", "()I");
              mids$[mid_setCurrentLabel_39c7bd3c] = env->getMethodID(cls, "setCurrentLabel", "(I)V");
              mids$[mid_doSeekCeil_54c6a166] = env->getMethodID(cls, "doSeekCeil", "()V");
              mids$[mid_doSeekFloor_54c6a166] = env->getMethodID(cls, "doSeekFloor", "()V");
              mids$[mid_doSeekExact_54c6a16a] = env->getMethodID(cls, "doSeekExact", "()Z");
              mids$[mid_rewindPrefix_54c6a166] = env->getMethodID(cls, "rewindPrefix", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTEnum_of_(t_FSTEnum *self, PyObject *args);
          static PyObject *t_FSTEnum_get__parameters_(t_FSTEnum *self, void *data);
          static PyGetSetDef t_FSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_FSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FSTEnum__methods_[] = {
            DECLARE_METHOD(t_FSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTEnum, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FSTEnum, t_FSTEnum, ::java::lang::Object, FSTEnum, abstract_init, 0, 0, t_FSTEnum__fields_, 0, 0);
          PyObject *t_FSTEnum::wrap_Object(const FSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FSTEnum *self = (t_FSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FSTEnum *self = (t_FSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(FSTEnum), module, "FSTEnum", 0);
          }

          void t_FSTEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FSTEnum).tp_dict, "class_", make_descriptor(FSTEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FSTEnum).tp_dict, "wrapfn_", make_descriptor(t_FSTEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FSTEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FSTEnum::initializeClass, 1)))
              return NULL;
            return t_FSTEnum::wrap_Object(FSTEnum(((t_FSTEnum *) arg)->object.this$));
          }
          static PyObject *t_FSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FSTEnum_of_(t_FSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }
          static PyObject *t_FSTEnum_get__parameters_(t_FSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsIndexWriter::class$ = NULL;
          jmethodID *CompressingStoredFieldsIndexWriter::mids$ = NULL;
          bool CompressingStoredFieldsIndexWriter::live$ = false;

          jclass CompressingStoredFieldsIndexWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsIndexWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void CompressingStoredFieldsIndexWriter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsIndexWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexWriter_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsIndexWriter_close(t_CompressingStoredFieldsIndexWriter *self);

          static PyMethodDef t_CompressingStoredFieldsIndexWriter__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsIndexWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsIndexWriter, close, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsIndexWriter, t_CompressingStoredFieldsIndexWriter, ::java::lang::Object, CompressingStoredFieldsIndexWriter, abstract_init, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsIndexWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsIndexWriter), module, "CompressingStoredFieldsIndexWriter", 0);
          }

          void t_CompressingStoredFieldsIndexWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexWriter).tp_dict, "class_", make_descriptor(CompressingStoredFieldsIndexWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexWriter).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsIndexWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsIndexWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsIndexWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsIndexWriter::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsIndexWriter::wrap_Object(CompressingStoredFieldsIndexWriter(((t_CompressingStoredFieldsIndexWriter *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsIndexWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsIndexWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressingStoredFieldsIndexWriter_close(t_CompressingStoredFieldsIndexWriter *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.h"
#include "java/util/Map.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {

          ::java::lang::Class *WikipediaTokenizerFactory::class$ = NULL;
          jmethodID *WikipediaTokenizerFactory::mids$ = NULL;
          bool WikipediaTokenizerFactory::live$ = false;

          jclass WikipediaTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/wikipedia/WikipediaTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_8727c66d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/wikipedia/WikipediaTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WikipediaTokenizerFactory::WikipediaTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer WikipediaTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer(env->callObjectMethod(this$, mids$[mid_create_8727c66d], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {
          static PyObject *t_WikipediaTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WikipediaTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WikipediaTokenizerFactory_init_(t_WikipediaTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WikipediaTokenizerFactory_create(t_WikipediaTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_WikipediaTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_WikipediaTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WikipediaTokenizerFactory, t_WikipediaTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, WikipediaTokenizerFactory, t_WikipediaTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_WikipediaTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WikipediaTokenizerFactory), module, "WikipediaTokenizerFactory", 0);
          }

          void t_WikipediaTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizerFactory).tp_dict, "class_", make_descriptor(WikipediaTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_WikipediaTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WikipediaTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WikipediaTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_WikipediaTokenizerFactory::wrap_Object(WikipediaTokenizerFactory(((t_WikipediaTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_WikipediaTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WikipediaTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WikipediaTokenizerFactory_init_(t_WikipediaTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WikipediaTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WikipediaTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WikipediaTokenizerFactory_create(t_WikipediaTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::wikipedia::t_WikipediaTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WikipediaTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MultiDocValues$OrdinalMap.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/LongValues.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MultiDocValues$OrdinalMap::class$ = NULL;
        jmethodID *MultiDocValues$OrdinalMap::mids$ = NULL;
        bool MultiDocValues$OrdinalMap::live$ = false;

        jclass MultiDocValues$OrdinalMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MultiDocValues$OrdinalMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f12e599e] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;[Lorg/apache/lucene/index/TermsEnum;)V");
            mids$[mid_init$_222cf653] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;[Lorg/apache/lucene/index/TermsEnum;F)V");
            mids$[mid_getFirstSegmentNumber_0ee6df30] = env->getMethodID(cls, "getFirstSegmentNumber", "(J)I");
            mids$[mid_getFirstSegmentOrd_0ee6df33] = env->getMethodID(cls, "getFirstSegmentOrd", "(J)J");
            mids$[mid_getGlobalOrds_f3def9cd] = env->getMethodID(cls, "getGlobalOrds", "(I)Lorg/apache/lucene/util/LongValues;");
            mids$[mid_getValueCount_54c6a17a] = env->getMethodID(cls, "getValueCount", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MultiDocValues$OrdinalMap::MultiDocValues$OrdinalMap(const ::java::lang::Object & a0, const JArray< ::org::apache::lucene::index::TermsEnum > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f12e599e, a0.this$, a1.this$)) {}

        MultiDocValues$OrdinalMap::MultiDocValues$OrdinalMap(const ::java::lang::Object & a0, const JArray< ::org::apache::lucene::index::TermsEnum > & a1, jfloat a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_222cf653, a0.this$, a1.this$, a2)) {}

        jint MultiDocValues$OrdinalMap::getFirstSegmentNumber(jlong a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getFirstSegmentNumber_0ee6df30], a0);
        }

        jlong MultiDocValues$OrdinalMap::getFirstSegmentOrd(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getFirstSegmentOrd_0ee6df33], a0);
        }

        ::org::apache::lucene::util::LongValues MultiDocValues$OrdinalMap::getGlobalOrds(jint a0) const
        {
          return ::org::apache::lucene::util::LongValues(env->callObjectMethod(this$, mids$[mid_getGlobalOrds_f3def9cd], a0));
        }

        jlong MultiDocValues$OrdinalMap::getValueCount() const
        {
          return env->callLongMethod(this$, mids$[mid_getValueCount_54c6a17a]);
        }

        jlong MultiDocValues$OrdinalMap::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MultiDocValues$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MultiDocValues$OrdinalMap_init_(t_MultiDocValues$OrdinalMap *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentNumber(t_MultiDocValues$OrdinalMap *self, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentOrd(t_MultiDocValues$OrdinalMap *self, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_getGlobalOrds(t_MultiDocValues$OrdinalMap *self, PyObject *arg);
        static PyObject *t_MultiDocValues$OrdinalMap_getValueCount(t_MultiDocValues$OrdinalMap *self);
        static PyObject *t_MultiDocValues$OrdinalMap_ramBytesUsed(t_MultiDocValues$OrdinalMap *self);
        static PyObject *t_MultiDocValues$OrdinalMap_get__valueCount(t_MultiDocValues$OrdinalMap *self, void *data);
        static PyGetSetDef t_MultiDocValues$OrdinalMap__fields_[] = {
          DECLARE_GET_FIELD(t_MultiDocValues$OrdinalMap, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiDocValues$OrdinalMap__methods_[] = {
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getFirstSegmentNumber, METH_O),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getFirstSegmentOrd, METH_O),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getGlobalOrds, METH_O),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_MultiDocValues$OrdinalMap, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiDocValues$OrdinalMap, t_MultiDocValues$OrdinalMap, ::java::lang::Object, MultiDocValues$OrdinalMap, t_MultiDocValues$OrdinalMap_init_, 0, 0, t_MultiDocValues$OrdinalMap__fields_, 0, 0);

        void t_MultiDocValues$OrdinalMap::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiDocValues$OrdinalMap), module, "MultiDocValues$OrdinalMap", 0);
        }

        void t_MultiDocValues$OrdinalMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiDocValues$OrdinalMap).tp_dict, "class_", make_descriptor(MultiDocValues$OrdinalMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$OrdinalMap).tp_dict, "wrapfn_", make_descriptor(t_MultiDocValues$OrdinalMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiDocValues$OrdinalMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiDocValues$OrdinalMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiDocValues$OrdinalMap::initializeClass, 1)))
            return NULL;
          return t_MultiDocValues$OrdinalMap::wrap_Object(MultiDocValues$OrdinalMap(((t_MultiDocValues$OrdinalMap *) arg)->object.this$));
        }
        static PyObject *t_MultiDocValues$OrdinalMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiDocValues$OrdinalMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MultiDocValues$OrdinalMap_init_(t_MultiDocValues$OrdinalMap *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::Object a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::TermsEnum > a1((jobject) NULL);
              MultiDocValues$OrdinalMap object((jobject) NULL);

              if (!parseArgs(args, "o[k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MultiDocValues$OrdinalMap(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::Object a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::TermsEnum > a1((jobject) NULL);
              jfloat a2;
              MultiDocValues$OrdinalMap object((jobject) NULL);

              if (!parseArgs(args, "o[kF", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = MultiDocValues$OrdinalMap(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentNumber(t_MultiDocValues$OrdinalMap *self, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getFirstSegmentNumber(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getFirstSegmentNumber", arg);
          return NULL;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getFirstSegmentOrd(t_MultiDocValues$OrdinalMap *self, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = self->object.getFirstSegmentOrd(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getFirstSegmentOrd", arg);
          return NULL;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getGlobalOrds(t_MultiDocValues$OrdinalMap *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::LongValues result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getGlobalOrds(a0));
            return ::org::apache::lucene::util::t_LongValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getGlobalOrds", arg);
          return NULL;
        }

        static PyObject *t_MultiDocValues$OrdinalMap_getValueCount(t_MultiDocValues$OrdinalMap *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MultiDocValues$OrdinalMap_ramBytesUsed(t_MultiDocValues$OrdinalMap *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_MultiDocValues$OrdinalMap_get__valueCount(t_MultiDocValues$OrdinalMap *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Scorer$ChildScorer::class$ = NULL;
        jmethodID *Scorer$ChildScorer::mids$ = NULL;
        jfieldID *Scorer$ChildScorer::fids$ = NULL;
        bool Scorer$ChildScorer::live$ = false;

        jclass Scorer$ChildScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Scorer$ChildScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9c8e8bbe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_child] = env->getFieldID(cls, "child", "Lorg/apache/lucene/search/Scorer;");
            fids$[fid_relationship] = env->getFieldID(cls, "relationship", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Scorer$ChildScorer::Scorer$ChildScorer(const ::org::apache::lucene::search::Scorer & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c8e8bbe, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::Scorer Scorer$ChildScorer::_get_child() const
        {
          return ::org::apache::lucene::search::Scorer(env->getObjectField(this$, fids$[fid_child]));
        }

        ::java::lang::String Scorer$ChildScorer::_get_relationship() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_relationship]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Scorer$ChildScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorer$ChildScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Scorer$ChildScorer_init_(t_Scorer$ChildScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Scorer$ChildScorer_get__child(t_Scorer$ChildScorer *self, void *data);
        static PyObject *t_Scorer$ChildScorer_get__relationship(t_Scorer$ChildScorer *self, void *data);

        static PyGetSetDef t_Scorer$ChildScorer__fields_[] = {
          DECLARE_GET_FIELD(t_Scorer$ChildScorer, child),
          DECLARE_GET_FIELD(t_Scorer$ChildScorer, relationship),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Scorer$ChildScorer__methods_[] = {
          DECLARE_METHOD(t_Scorer$ChildScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorer$ChildScorer, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Scorer$ChildScorer, t_Scorer$ChildScorer, ::java::lang::Object, Scorer$ChildScorer, t_Scorer$ChildScorer_init_, 0, 0, t_Scorer$ChildScorer__fields_, 0, 0);

        void t_Scorer$ChildScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(Scorer$ChildScorer), module, "Scorer$ChildScorer", 0);
        }

        void t_Scorer$ChildScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Scorer$ChildScorer).tp_dict, "class_", make_descriptor(Scorer$ChildScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Scorer$ChildScorer).tp_dict, "wrapfn_", make_descriptor(t_Scorer$ChildScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Scorer$ChildScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Scorer$ChildScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Scorer$ChildScorer::initializeClass, 1)))
            return NULL;
          return t_Scorer$ChildScorer::wrap_Object(Scorer$ChildScorer(((t_Scorer$ChildScorer *) arg)->object.this$));
        }
        static PyObject *t_Scorer$ChildScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Scorer$ChildScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Scorer$ChildScorer_init_(t_Scorer$ChildScorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Scorer$ChildScorer object((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::search::Scorer::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Scorer$ChildScorer(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Scorer$ChildScorer_get__child(t_Scorer$ChildScorer *self, void *data)
        {
          ::org::apache::lucene::search::Scorer value((jobject) NULL);
          OBJ_CALL(value = self->object._get_child());
          return ::org::apache::lucene::search::t_Scorer::wrap_Object(value);
        }

        static PyObject *t_Scorer$ChildScorer_get__relationship(t_Scorer$ChildScorer *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_relationship());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexUpgrader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexWriterConfig.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexUpgrader::class$ = NULL;
        jmethodID *IndexUpgrader::mids$ = NULL;
        bool IndexUpgrader::live$ = false;

        jclass IndexUpgrader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexUpgrader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_3b411aab] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/util/Version;)V");
            mids$[mid_init$_884b85de] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;Z)V");
            mids$[mid_init$_2b2ed566] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/InfoStream;Z)V");
            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
            mids$[mid_upgrade_54c6a166] = env->getMethodID(cls, "upgrade", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::util::Version & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3b411aab, a0.this$, a1.this$)) {}

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_884b85de, a0.this$, a1.this$, a2)) {}

        IndexUpgrader::IndexUpgrader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::util::Version & a1, const ::org::apache::lucene::util::InfoStream & a2, jboolean a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2b2ed566, a0.this$, a1.this$, a2.this$, a3)) {}

        void IndexUpgrader::main(const JArray< ::java::lang::String > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
        }

        void IndexUpgrader::upgrade() const
        {
          env->callVoidMethod(this$, mids$[mid_upgrade_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexUpgrader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexUpgrader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IndexUpgrader_init_(t_IndexUpgrader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IndexUpgrader_main(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexUpgrader_upgrade(t_IndexUpgrader *self);

        static PyMethodDef t_IndexUpgrader__methods_[] = {
          DECLARE_METHOD(t_IndexUpgrader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, main, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexUpgrader, upgrade, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexUpgrader, t_IndexUpgrader, ::java::lang::Object, IndexUpgrader, t_IndexUpgrader_init_, 0, 0, 0, 0, 0);

        void t_IndexUpgrader::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexUpgrader), module, "IndexUpgrader", 0);
        }

        void t_IndexUpgrader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexUpgrader).tp_dict, "class_", make_descriptor(IndexUpgrader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexUpgrader).tp_dict, "wrapfn_", make_descriptor(t_IndexUpgrader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexUpgrader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexUpgrader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexUpgrader::initializeClass, 1)))
            return NULL;
          return t_IndexUpgrader::wrap_Object(IndexUpgrader(((t_IndexUpgrader *) arg)->object.this$));
        }
        static PyObject *t_IndexUpgrader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexUpgrader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IndexUpgrader_init_(t_IndexUpgrader *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::util::Version a1((jobject) NULL);
              PyTypeObject **p1;
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::util::Version::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::t_Version::parameters_))
              {
                INT_CALL(object = IndexUpgrader(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::IndexWriterConfig a1((jobject) NULL);
              jboolean a2;
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "kkZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IndexUpgrader(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::util::Version a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::util::InfoStream a2((jobject) NULL);
              jboolean a3;
              IndexUpgrader object((jobject) NULL);

              if (!parseArgs(args, "kKkZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::InfoStream::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::t_Version::parameters_, &a2, &a3))
              {
                INT_CALL(object = IndexUpgrader(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_IndexUpgrader_main(PyTypeObject *type, PyObject *arg)
        {
          JArray< ::java::lang::String > a0((jobject) NULL);

          if (!parseArg(arg, "[s", &a0))
          {
            OBJ_CALL(::org::apache::lucene::index::IndexUpgrader::main(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "main", arg);
          return NULL;
        }

        static PyObject *t_IndexUpgrader_upgrade(t_IndexUpgrader *self)
        {
          OBJ_CALL(self->object.upgrade());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsReader::class$ = NULL;
          jmethodID *Lucene41PostingsReader::mids$ = NULL;
          bool Lucene41PostingsReader::live$ = false;

          jclass Lucene41PostingsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_b18a8355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decodeTerm_0d1f34e8] = env->getMethodID(cls, "decodeTerm", "([JLorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
              mids$[mid_docs_4cca8a9c] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
              mids$[mid_docsAndPositions_3ae1ca58] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
              mids$[mid_init_0441f0b2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;)V");
              mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsReader::Lucene41PostingsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::FieldInfos & a1, const ::org::apache::lucene::index::SegmentInfo & a2, const ::org::apache::lucene::store::IOContext & a3, const ::java::lang::String & a4) : ::org::apache::lucene::codecs::PostingsReaderBase(env->newObject(initializeClass, &mids$, mid_init$_b18a8355, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          void Lucene41PostingsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          void Lucene41PostingsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void Lucene41PostingsReader::decodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
          {
            env->callVoidMethod(this$, mids$[mid_decodeTerm_0d1f34e8], a0.this$, a1.this$, a2.this$, a3.this$, a4);
          }

          ::org::apache::lucene::index::DocsEnum Lucene41PostingsReader::docs(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_4cca8a9c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          ::org::apache::lucene::index::DocsAndPositionsEnum Lucene41PostingsReader::docsAndPositions(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsAndPositionsEnum & a3, jint a4) const
          {
            return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_3ae1ca58], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          void Lucene41PostingsReader::init(const ::org::apache::lucene::store::IndexInput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_init_0441f0b2], a0.this$);
          }

          ::org::apache::lucene::codecs::BlockTermState Lucene41PostingsReader::newTermState() const
          {
            return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
          }

          jlong Lucene41PostingsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsReader_init_(t_Lucene41PostingsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsReader_checkIntegrity(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_close(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_decodeTerm(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_docs(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_docsAndPositions(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_init(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_newTermState(t_Lucene41PostingsReader *self, PyObject *args);
          static PyObject *t_Lucene41PostingsReader_ramBytesUsed(t_Lucene41PostingsReader *self, PyObject *args);

          static PyMethodDef t_Lucene41PostingsReader__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, decodeTerm, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, docs, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, docsAndPositions, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, init, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, newTermState, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsReader, ramBytesUsed, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsReader, t_Lucene41PostingsReader, ::org::apache::lucene::codecs::PostingsReaderBase, Lucene41PostingsReader, t_Lucene41PostingsReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene41PostingsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsReader), module, "Lucene41PostingsReader", 0);
          }

          void t_Lucene41PostingsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsReader).tp_dict, "class_", make_descriptor(Lucene41PostingsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41PostingsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsReader::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsReader::wrap_Object(Lucene41PostingsReader(((t_Lucene41PostingsReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsReader_init_(t_Lucene41PostingsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);
            ::java::lang::String a4((jobject) NULL);
            Lucene41PostingsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkks", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = Lucene41PostingsReader(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene41PostingsReader_checkIntegrity(t_Lucene41PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_close(t_Lucene41PostingsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_decodeTerm(t_Lucene41PostingsReader *self, PyObject *args)
          {
            JArray< jlong > a0((jobject) NULL);
            ::org::apache::lucene::store::DataInput a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
            jboolean a4;

            if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3, a4));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "decodeTerm", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_docs(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docs(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "docs", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_docsAndPositions(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
            ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
            ::org::apache::lucene::util::Bits a2((jobject) NULL);
            ::org::apache::lucene::index::DocsAndPositionsEnum a3((jobject) NULL);
            jint a4;
            ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

            if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2, a3, a4));
              return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "docsAndPositions", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_init(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
            {
              OBJ_CALL(self->object.init(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "init", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_newTermState(t_Lucene41PostingsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.newTermState());
              return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "newTermState", args, 2);
          }

          static PyObject *t_Lucene41PostingsReader_ramBytesUsed(t_Lucene41PostingsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Number.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Number::class$ = NULL;
    jmethodID *Number::mids$ = NULL;
    bool Number::live$ = false;

    jclass Number::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Number");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
        mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
        mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
        mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
        mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
        mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Number::Number() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    jbyte Number::byteValue() const
    {
      return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
    }

    jdouble Number::doubleValue() const
    {
      return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
    }

    jfloat Number::floatValue() const
    {
      return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
    }

    jint Number::intValue() const
    {
      return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
    }

    jlong Number::longValue() const
    {
      return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
    }

    jshort Number::shortValue() const
    {
      return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Number_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Number_instance_(PyTypeObject *type, PyObject *arg);
    static int t_Number_init_(t_Number *self, PyObject *args, PyObject *kwds);
    static PyObject *t_Number_byteValue(t_Number *self);
    static PyObject *t_Number_doubleValue(t_Number *self);
    static PyObject *t_Number_floatValue(t_Number *self);
    static PyObject *t_Number_intValue(t_Number *self);
    static PyObject *t_Number_longValue(t_Number *self);
    static PyObject *t_Number_shortValue(t_Number *self);

    static PyMethodDef t_Number__methods_[] = {
      DECLARE_METHOD(t_Number, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Number, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Number, byteValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, doubleValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, floatValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, intValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, longValue, METH_NOARGS),
      DECLARE_METHOD(t_Number, shortValue, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Number, t_Number, ::java::lang::Object, Number, t_Number_init_, 0, 0, 0, 0, 0);

    void t_Number::install(PyObject *module)
    {
      installType(&PY_TYPE(Number), module, "Number", 0);
    }

    void t_Number::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Number).tp_dict, "class_", make_descriptor(Number::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Number).tp_dict, "wrapfn_", make_descriptor(t_Number::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Number).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Number_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Number::initializeClass, 1)))
        return NULL;
      return t_Number::wrap_Object(Number(((t_Number *) arg)->object.this$));
    }
    static PyObject *t_Number_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Number::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_Number_init_(t_Number *self, PyObject *args, PyObject *kwds)
    {
      Number object((jobject) NULL);

      INT_CALL(object = Number());
      self->object = object;

      return 0;
    }

    static PyObject *t_Number_byteValue(t_Number *self)
    {
      jbyte result;
      OBJ_CALL(result = self->object.byteValue());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Number_doubleValue(t_Number *self)
    {
      jdouble result;
      OBJ_CALL(result = self->object.doubleValue());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_Number_floatValue(t_Number *self)
    {
      jfloat result;
      OBJ_CALL(result = self->object.floatValue());
      return PyFloat_FromDouble((double) result);
    }

    static PyObject *t_Number_intValue(t_Number *self)
    {
      jint result;
      OBJ_CALL(result = self->object.intValue());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Number_longValue(t_Number *self)
    {
      jlong result;
      OBJ_CALL(result = self->object.longValue());
      return PyLong_FromLongLong((PY_LONG_LONG) result);
    }

    static PyObject *t_Number_shortValue(t_Number *self)
    {
      jshort result;
      OBJ_CALL(result = self->object.shortValue());
      return PyInt_FromLong((long) result);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/NullFragmenter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *NullFragmenter::class$ = NULL;
          jmethodID *NullFragmenter::mids$ = NULL;
          bool NullFragmenter::live$ = false;

          jclass NullFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/NullFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NullFragmenter::NullFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean NullFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void NullFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_NullFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NullFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NullFragmenter_init_(t_NullFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NullFragmenter_isNewFragment(t_NullFragmenter *self);
          static PyObject *t_NullFragmenter_start(t_NullFragmenter *self, PyObject *args);
          static PyObject *t_NullFragmenter_get__newFragment(t_NullFragmenter *self, void *data);
          static PyGetSetDef t_NullFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_NullFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NullFragmenter__methods_[] = {
            DECLARE_METHOD(t_NullFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NullFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NullFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_NullFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NullFragmenter, t_NullFragmenter, ::java::lang::Object, NullFragmenter, t_NullFragmenter_init_, 0, 0, t_NullFragmenter__fields_, 0, 0);

          void t_NullFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(NullFragmenter), module, "NullFragmenter", 0);
          }

          void t_NullFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NullFragmenter).tp_dict, "class_", make_descriptor(NullFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NullFragmenter).tp_dict, "wrapfn_", make_descriptor(t_NullFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NullFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NullFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NullFragmenter::initializeClass, 1)))
              return NULL;
            return t_NullFragmenter::wrap_Object(NullFragmenter(((t_NullFragmenter *) arg)->object.this$));
          }
          static PyObject *t_NullFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NullFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NullFragmenter_init_(t_NullFragmenter *self, PyObject *args, PyObject *kwds)
          {
            NullFragmenter object((jobject) NULL);

            INT_CALL(object = NullFragmenter());
            self->object = object;

            return 0;
          }

          static PyObject *t_NullFragmenter_isNewFragment(t_NullFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_NullFragmenter_start(t_NullFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_NullFragmenter_get__newFragment(t_NullFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *WordDelimiterFilterFactory::class$ = NULL;
          jmethodID *WordDelimiterFilterFactory::mids$ = NULL;
          bool WordDelimiterFilterFactory::live$ = false;
          ::java::lang::String *WordDelimiterFilterFactory::PROTECTED_TOKENS = NULL;
          ::java::lang::String *WordDelimiterFilterFactory::TYPES = NULL;

          jclass WordDelimiterFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PROTECTED_TOKENS = new ::java::lang::String(env->getStaticObjectField(cls, "PROTECTED_TOKENS", "Ljava/lang/String;"));
              TYPES = new ::java::lang::String(env->getStaticObjectField(cls, "TYPES", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordDelimiterFilterFactory::WordDelimiterFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter WordDelimiterFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }

          void WordDelimiterFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_WordDelimiterFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordDelimiterFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordDelimiterFilterFactory_init_(t_WordDelimiterFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordDelimiterFilterFactory_create(t_WordDelimiterFilterFactory *self, PyObject *args);
          static PyObject *t_WordDelimiterFilterFactory_inform(t_WordDelimiterFilterFactory *self, PyObject *arg);

          static PyMethodDef t_WordDelimiterFilterFactory__methods_[] = {
            DECLARE_METHOD(t_WordDelimiterFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_WordDelimiterFilterFactory, inform, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordDelimiterFilterFactory, t_WordDelimiterFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, WordDelimiterFilterFactory, t_WordDelimiterFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_WordDelimiterFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WordDelimiterFilterFactory), module, "WordDelimiterFilterFactory", 0);
          }

          void t_WordDelimiterFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "class_", make_descriptor(WordDelimiterFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_WordDelimiterFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordDelimiterFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "PROTECTED_TOKENS", make_descriptor(j2p(*WordDelimiterFilterFactory::PROTECTED_TOKENS)));
            PyDict_SetItemString(PY_TYPE(WordDelimiterFilterFactory).tp_dict, "TYPES", make_descriptor(j2p(*WordDelimiterFilterFactory::TYPES)));
          }

          static PyObject *t_WordDelimiterFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordDelimiterFilterFactory::initializeClass, 1)))
              return NULL;
            return t_WordDelimiterFilterFactory::wrap_Object(WordDelimiterFilterFactory(((t_WordDelimiterFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_WordDelimiterFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordDelimiterFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordDelimiterFilterFactory_init_(t_WordDelimiterFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WordDelimiterFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WordDelimiterFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WordDelimiterFilterFactory_create(t_WordDelimiterFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WordDelimiterFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_WordDelimiterFilterFactory_inform(t_WordDelimiterFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/CombineSuggestion.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *CombineSuggestion::class$ = NULL;
          jmethodID *CombineSuggestion::mids$ = NULL;
          jfieldID *CombineSuggestion::fids$ = NULL;
          bool CombineSuggestion::live$ = false;

          jclass CombineSuggestion::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/CombineSuggestion");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e7d3559a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spell/SuggestWord;[I)V");

              fids$ = new jfieldID[max_fid];
              fids$[fid_originalTermIndexes] = env->getFieldID(cls, "originalTermIndexes", "[I");
              fids$[fid_suggestion] = env->getFieldID(cls, "suggestion", "Lorg/apache/lucene/search/spell/SuggestWord;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CombineSuggestion::CombineSuggestion(const ::org::apache::lucene::search::spell::SuggestWord & a0, const JArray< jint > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e7d3559a, a0.this$, a1.this$)) {}

          JArray< jint > CombineSuggestion::_get_originalTermIndexes() const
          {
            return JArray< jint >(env->getObjectField(this$, fids$[fid_originalTermIndexes]));
          }

          ::org::apache::lucene::search::spell::SuggestWord CombineSuggestion::_get_suggestion() const
          {
            return ::org::apache::lucene::search::spell::SuggestWord(env->getObjectField(this$, fids$[fid_suggestion]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_CombineSuggestion_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CombineSuggestion_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CombineSuggestion_init_(t_CombineSuggestion *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CombineSuggestion_get__originalTermIndexes(t_CombineSuggestion *self, void *data);
          static PyObject *t_CombineSuggestion_get__suggestion(t_CombineSuggestion *self, void *data);

          static PyGetSetDef t_CombineSuggestion__fields_[] = {
            DECLARE_GET_FIELD(t_CombineSuggestion, originalTermIndexes),
            DECLARE_GET_FIELD(t_CombineSuggestion, suggestion),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CombineSuggestion__methods_[] = {
            DECLARE_METHOD(t_CombineSuggestion, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CombineSuggestion, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CombineSuggestion, t_CombineSuggestion, ::java::lang::Object, CombineSuggestion, t_CombineSuggestion_init_, 0, 0, t_CombineSuggestion__fields_, 0, 0);

          void t_CombineSuggestion::install(PyObject *module)
          {
            installType(&PY_TYPE(CombineSuggestion), module, "CombineSuggestion", 0);
          }

          void t_CombineSuggestion::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CombineSuggestion).tp_dict, "class_", make_descriptor(CombineSuggestion::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CombineSuggestion).tp_dict, "wrapfn_", make_descriptor(t_CombineSuggestion::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CombineSuggestion).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CombineSuggestion_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CombineSuggestion::initializeClass, 1)))
              return NULL;
            return t_CombineSuggestion::wrap_Object(CombineSuggestion(((t_CombineSuggestion *) arg)->object.this$));
          }
          static PyObject *t_CombineSuggestion_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CombineSuggestion::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CombineSuggestion_init_(t_CombineSuggestion *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::spell::SuggestWord a0((jobject) NULL);
            JArray< jint > a1((jobject) NULL);
            CombineSuggestion object((jobject) NULL);

            if (!parseArgs(args, "k[I", ::org::apache::lucene::search::spell::SuggestWord::initializeClass, &a0, &a1))
            {
              INT_CALL(object = CombineSuggestion(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CombineSuggestion_get__originalTermIndexes(t_CombineSuggestion *self, void *data)
          {
            JArray< jint > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_originalTermIndexes());
            return value.wrap();
          }

          static PyObject *t_CombineSuggestion_get__suggestion(t_CombineSuggestion *self, void *data)
          {
            ::org::apache::lucene::search::spell::SuggestWord value((jobject) NULL);
            OBJ_CALL(value = self->object._get_suggestion());
            return ::org::apache::lucene::search::spell::t_SuggestWord::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/br/BrazilianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {

          ::java::lang::Class *BrazilianAnalyzer::class$ = NULL;
          jmethodID *BrazilianAnalyzer::mids$ = NULL;
          bool BrazilianAnalyzer::live$ = false;
          ::java::lang::String *BrazilianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BrazilianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/br/BrazilianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          BrazilianAnalyzer::BrazilianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet BrazilianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace br {
          static PyObject *t_BrazilianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BrazilianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BrazilianAnalyzer_init_(t_BrazilianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BrazilianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BrazilianAnalyzer_get__defaultStopSet(t_BrazilianAnalyzer *self, void *data);
          static PyGetSetDef t_BrazilianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BrazilianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BrazilianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BrazilianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BrazilianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BrazilianAnalyzer, t_BrazilianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, BrazilianAnalyzer, t_BrazilianAnalyzer_init_, 0, 0, t_BrazilianAnalyzer__fields_, 0, 0);

          void t_BrazilianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BrazilianAnalyzer), module, "BrazilianAnalyzer", 0);
          }

          void t_BrazilianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "class_", make_descriptor(BrazilianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_BrazilianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BrazilianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(BrazilianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BrazilianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BrazilianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BrazilianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BrazilianAnalyzer::wrap_Object(BrazilianAnalyzer(((t_BrazilianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BrazilianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BrazilianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BrazilianAnalyzer_init_(t_BrazilianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                BrazilianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BrazilianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BrazilianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::br::BrazilianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BrazilianAnalyzer_get__defaultStopSet(t_BrazilianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsReaderBase::class$ = NULL;
        jmethodID *PostingsReaderBase::mids$ = NULL;
        bool PostingsReaderBase::live$ = false;

        jclass PostingsReaderBase::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsReaderBase");

            mids$ = new jmethodID[max_mid];
            mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_decodeTerm_0d1f34e8] = env->getMethodID(cls, "decodeTerm", "([JLorg/apache/lucene/store/DataInput;Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Z)V");
            mids$[mid_docs_4cca8a9c] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_3ae1ca58] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/codecs/BlockTermState;Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_init_0441f0b2] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/store/IndexInput;)V");
            mids$[mid_newTermState_9f93879c] = env->getMethodID(cls, "newTermState", "()Lorg/apache/lucene/codecs/BlockTermState;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PostingsReaderBase::checkIntegrity() const
        {
          env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
        }

        void PostingsReaderBase::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void PostingsReaderBase::decodeTerm(const JArray< jlong > & a0, const ::org::apache::lucene::store::DataInput & a1, const ::org::apache::lucene::index::FieldInfo & a2, const ::org::apache::lucene::codecs::BlockTermState & a3, jboolean a4) const
        {
          env->callVoidMethod(this$, mids$[mid_decodeTerm_0d1f34e8], a0.this$, a1.this$, a2.this$, a3.this$, a4);
        }

        ::org::apache::lucene::index::DocsEnum PostingsReaderBase::docs(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsEnum & a3, jint a4) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_4cca8a9c], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum PostingsReaderBase::docsAndPositions(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::codecs::BlockTermState & a1, const ::org::apache::lucene::util::Bits & a2, const ::org::apache::lucene::index::DocsAndPositionsEnum & a3, jint a4) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_3ae1ca58], a0.this$, a1.this$, a2.this$, a3.this$, a4));
        }

        void PostingsReaderBase::init(const ::org::apache::lucene::store::IndexInput & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_init_0441f0b2], a0.this$);
        }

        ::org::apache::lucene::codecs::BlockTermState PostingsReaderBase::newTermState() const
        {
          return ::org::apache::lucene::codecs::BlockTermState(env->callObjectMethod(this$, mids$[mid_newTermState_9f93879c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsReaderBase_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsReaderBase_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsReaderBase_checkIntegrity(t_PostingsReaderBase *self);
        static PyObject *t_PostingsReaderBase_close(t_PostingsReaderBase *self);
        static PyObject *t_PostingsReaderBase_decodeTerm(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_docs(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_docsAndPositions(t_PostingsReaderBase *self, PyObject *args);
        static PyObject *t_PostingsReaderBase_init(t_PostingsReaderBase *self, PyObject *arg);
        static PyObject *t_PostingsReaderBase_newTermState(t_PostingsReaderBase *self);

        static PyMethodDef t_PostingsReaderBase__methods_[] = {
          DECLARE_METHOD(t_PostingsReaderBase, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsReaderBase, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsReaderBase, checkIntegrity, METH_NOARGS),
          DECLARE_METHOD(t_PostingsReaderBase, close, METH_NOARGS),
          DECLARE_METHOD(t_PostingsReaderBase, decodeTerm, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, docs, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_PostingsReaderBase, init, METH_O),
          DECLARE_METHOD(t_PostingsReaderBase, newTermState, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsReaderBase, t_PostingsReaderBase, ::java::lang::Object, PostingsReaderBase, abstract_init, 0, 0, 0, 0, 0);

        void t_PostingsReaderBase::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsReaderBase), module, "PostingsReaderBase", 0);
        }

        void t_PostingsReaderBase::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsReaderBase).tp_dict, "class_", make_descriptor(PostingsReaderBase::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsReaderBase).tp_dict, "wrapfn_", make_descriptor(t_PostingsReaderBase::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsReaderBase).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsReaderBase_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsReaderBase::initializeClass, 1)))
            return NULL;
          return t_PostingsReaderBase::wrap_Object(PostingsReaderBase(((t_PostingsReaderBase *) arg)->object.this$));
        }
        static PyObject *t_PostingsReaderBase_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsReaderBase::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsReaderBase_checkIntegrity(t_PostingsReaderBase *self)
        {
          OBJ_CALL(self->object.checkIntegrity());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsReaderBase_close(t_PostingsReaderBase *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsReaderBase_decodeTerm(t_PostingsReaderBase *self, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          ::org::apache::lucene::store::DataInput a1((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo a2((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a3((jobject) NULL);
          jboolean a4;

          if (!parseArgs(args, "[JkkkZ", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.decodeTerm(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "decodeTerm", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_docs(t_PostingsReaderBase *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
          ::org::apache::lucene::util::Bits a2((jobject) NULL);
          ::org::apache::lucene::index::DocsEnum a3((jobject) NULL);
          jint a4;
          ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.docs(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "docs", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_docsAndPositions(t_PostingsReaderBase *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::codecs::BlockTermState a1((jobject) NULL);
          ::org::apache::lucene::util::Bits a2((jobject) NULL);
          ::org::apache::lucene::index::DocsAndPositionsEnum a3((jobject) NULL);
          jint a4;
          ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

          if (!parseArgs(args, "kkkkI", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::codecs::BlockTermState::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2, a3, a4));
            return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "docsAndPositions", args);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_init(t_PostingsReaderBase *self, PyObject *arg)
        {
          ::org::apache::lucene::store::IndexInput a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::IndexInput::initializeClass, &a0))
          {
            OBJ_CALL(self->object.init(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", arg);
          return NULL;
        }

        static PyObject *t_PostingsReaderBase_newTermState(t_PostingsReaderBase *self)
        {
          ::org::apache::lucene::codecs::BlockTermState result((jobject) NULL);
          OBJ_CALL(result = self->object.newTermState());
          return ::org::apache::lucene::codecs::t_BlockTermState::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/analysis/tokenattributes/TermToBytesRefAttribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/String.h"
#include "java/lang/StringBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *CharTermAttributeImpl::class$ = NULL;
          jmethodID *CharTermAttributeImpl::mids$ = NULL;
          bool CharTermAttributeImpl::live$ = false;

          jclass CharTermAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_append_2b3c6943] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_8fff6b0d] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_ec8fc27b] = env->getMethodID(cls, "append", "(C)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_950755e3] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_727d3f8d] = env->getMethodID(cls, "append", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_6505d5ab] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_buffer_dab10e7f] = env->getMethodID(cls, "buffer", "()[C");
              mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_c3b245d5] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttributeImpl;");
              mids$[mid_copyBuffer_6f0bb356] = env->getMethodID(cls, "copyBuffer", "([CII)V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_fillBytesRef_54c6a166] = env->getMethodID(cls, "fillBytesRef", "()V");
              mids$[mid_getBytesRef_4ae19461] = env->getMethodID(cls, "getBytesRef", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
              mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_resizeBuffer_b4292e99] = env->getMethodID(cls, "resizeBuffer", "(I)[C");
              mids$[mid_setEmpty_211a9257] = env->getMethodID(cls, "setEmpty", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_setLength_da4913e5] = env->getMethodID(cls, "setLength", "(I)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTermAttributeImpl::CharTermAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_2b3c6943], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::StringBuilder & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_8fff6b0d], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(jchar a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_ec8fc27b], a0));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::CharSequence & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_950755e3], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_727d3f8d], a0.this$));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_6505d5ab], a0.this$, a1, a2));
          }

          JArray< jchar > CharTermAttributeImpl::buffer() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_buffer_dab10e7f]));
          }

          jchar CharTermAttributeImpl::charAt(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
          }

          void CharTermAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          CharTermAttributeImpl CharTermAttributeImpl::clone() const
          {
            return CharTermAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_c3b245d5]));
          }

          void CharTermAttributeImpl::copyBuffer(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_copyBuffer_6f0bb356], a0.this$, a1, a2);
          }

          void CharTermAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean CharTermAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void CharTermAttributeImpl::fillBytesRef() const
          {
            env->callVoidMethod(this$, mids$[mid_fillBytesRef_54c6a166]);
          }

          ::org::apache::lucene::util::BytesRef CharTermAttributeImpl::getBytesRef() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBytesRef_4ae19461]));
          }

          jint CharTermAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jint CharTermAttributeImpl::length() const
          {
            return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
          }

          void CharTermAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
          }

          JArray< jchar > CharTermAttributeImpl::resizeBuffer(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_resizeBuffer_b4292e99], a0));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::setEmpty() const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setEmpty_211a9257]));
          }

          ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute CharTermAttributeImpl::setLength(jint a0) const
          {
            return ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setLength_da4913e5], a0));
          }

          ::java::lang::CharSequence CharTermAttributeImpl::subSequence(jint a0, jint a1) const
          {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
          }

          ::java::lang::String CharTermAttributeImpl::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_CharTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharTermAttributeImpl_init_(t_CharTermAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharTermAttributeImpl_append(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_buffer(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_charAt(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_clear(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_clone(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_copyBuffer(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_copyTo(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_equals(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_fillBytesRef(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_getBytesRef(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_hashCode(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_length(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_reflectWith(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_resizeBuffer(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_setEmpty(t_CharTermAttributeImpl *self);
          static PyObject *t_CharTermAttributeImpl_setLength(t_CharTermAttributeImpl *self, PyObject *arg);
          static PyObject *t_CharTermAttributeImpl_subSequence(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_toString(t_CharTermAttributeImpl *self, PyObject *args);
          static PyObject *t_CharTermAttributeImpl_get__bytesRef(t_CharTermAttributeImpl *self, void *data);
          static PyGetSetDef t_CharTermAttributeImpl__fields_[] = {
            DECLARE_GET_FIELD(t_CharTermAttributeImpl, bytesRef),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharTermAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_CharTermAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttributeImpl, append, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, buffer, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, charAt, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, copyBuffer, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, fillBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, getBytesRef, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, length, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, resizeBuffer, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, setEmpty, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, setLength, METH_O),
            DECLARE_METHOD(t_CharTermAttributeImpl, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttributeImpl, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharTermAttributeImpl, t_CharTermAttributeImpl, ::org::apache::lucene::util::AttributeImpl, CharTermAttributeImpl, t_CharTermAttributeImpl_init_, 0, 0, t_CharTermAttributeImpl__fields_, 0, 0);

          void t_CharTermAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTermAttributeImpl), module, "CharTermAttributeImpl", 0);
          }

          void t_CharTermAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharTermAttributeImpl).tp_dict, "class_", make_descriptor(CharTermAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharTermAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_CharTermAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharTermAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharTermAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTermAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_CharTermAttributeImpl::wrap_Object(CharTermAttributeImpl(((t_CharTermAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_CharTermAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTermAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharTermAttributeImpl_init_(t_CharTermAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            CharTermAttributeImpl object((jobject) NULL);

            INT_CALL(object = CharTermAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_CharTermAttributeImpl_append(t_CharTermAttributeImpl *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::StringBuilder a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                jchar a0;
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_buffer(t_CharTermAttributeImpl *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.buffer());
            return result.wrap();
          }

          static PyObject *t_CharTermAttributeImpl_charAt(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.charAt(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_clear(t_CharTermAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_clone(t_CharTermAttributeImpl *self, PyObject *args)
          {
            CharTermAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_CharTermAttributeImpl::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_copyBuffer(t_CharTermAttributeImpl *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.copyBuffer(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copyBuffer", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_copyTo(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_equals(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_fillBytesRef(t_CharTermAttributeImpl *self)
          {
            OBJ_CALL(self->object.fillBytesRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_CharTermAttributeImpl_getBytesRef(t_CharTermAttributeImpl *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_CharTermAttributeImpl_hashCode(t_CharTermAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_length(t_CharTermAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharTermAttributeImpl_reflectWith(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_resizeBuffer(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resizeBuffer(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "resizeBuffer", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_setEmpty(t_CharTermAttributeImpl *self)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);
            OBJ_CALL(result = self->object.setEmpty());
            return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
          }

          static PyObject *t_CharTermAttributeImpl_setLength(t_CharTermAttributeImpl *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setLength(a0));
              return ::org::apache::lucene::analysis::tokenattributes::t_CharTermAttribute::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_subSequence(t_CharTermAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::java::lang::CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.subSequence(a0, a1));
              return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subSequence", args);
            return NULL;
          }

          static PyObject *t_CharTermAttributeImpl_toString(t_CharTermAttributeImpl *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharTermAttributeImpl), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CharTermAttributeImpl_get__bytesRef(t_CharTermAttributeImpl *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesRef());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/IntDocValues.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *IntDocValues::class$ = NULL;
            jmethodID *IntDocValues::mids$ = NULL;
            bool IntDocValues::live$ = false;

            jclass IntDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/IntDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IntDocValues::IntDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jbyte IntDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble IntDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat IntDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer IntDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller IntDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint IntDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong IntDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object IntDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort IntDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String IntDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String IntDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_IntDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IntDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IntDocValues_init_(t_IntDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IntDocValues_byteVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_doubleVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_floatVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_getRangeScorer(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_getValueFiller(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_intVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_longVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_objectVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_shortVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_strVal(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_toString(t_IntDocValues *self, PyObject *args);
            static PyObject *t_IntDocValues_get__valueFiller(t_IntDocValues *self, void *data);
            static PyGetSetDef t_IntDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_IntDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_IntDocValues__methods_[] = {
              DECLARE_METHOD(t_IntDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IntDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_IntDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IntDocValues, t_IntDocValues, ::org::apache::lucene::queries::function::FunctionValues, IntDocValues, t_IntDocValues_init_, 0, 0, t_IntDocValues__fields_, 0, 0);

            void t_IntDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(IntDocValues), module, "IntDocValues", 0);
            }

            void t_IntDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IntDocValues).tp_dict, "class_", make_descriptor(IntDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IntDocValues).tp_dict, "wrapfn_", make_descriptor(t_IntDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IntDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IntDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IntDocValues::initializeClass, 1)))
                return NULL;
              return t_IntDocValues::wrap_Object(IntDocValues(((t_IntDocValues *) arg)->object.this$));
            }
            static PyObject *t_IntDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IntDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IntDocValues_init_(t_IntDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              IntDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = IntDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IntDocValues_byteVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_IntDocValues_doubleVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_IntDocValues_floatVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_IntDocValues_getRangeScorer(t_IntDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_IntDocValues_getValueFiller(t_IntDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_IntDocValues_intVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_IntDocValues_longVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_IntDocValues_objectVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_IntDocValues_shortVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_IntDocValues_strVal(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_IntDocValues_toString(t_IntDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IntDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_IntDocValues_get__valueFiller(t_IntDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *TermFreqIterator::class$ = NULL;
          jmethodID *TermFreqIterator::mids$ = NULL;
          bool TermFreqIterator::live$ = false;

          jclass TermFreqIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/TermFreqIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong TermFreqIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/spell/TermFreqIterator$TermFreqIteratorWrapper.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_TermFreqIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFreqIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFreqIterator_weight(t_TermFreqIterator *self);

          static PyMethodDef t_TermFreqIterator__methods_[] = {
            DECLARE_METHOD(t_TermFreqIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermFreqIterator, t_TermFreqIterator, ::org::apache::lucene::util::BytesRefIterator, TermFreqIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_TermFreqIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(TermFreqIterator), module, "TermFreqIterator", 0);
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "TermFreqIteratorWrapper", make_descriptor(&PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper)));
          }

          void t_TermFreqIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "class_", make_descriptor(TermFreqIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "wrapfn_", make_descriptor(t_TermFreqIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermFreqIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermFreqIterator::initializeClass, 1)))
              return NULL;
            return t_TermFreqIterator::wrap_Object(TermFreqIterator(((t_TermFreqIterator *) arg)->object.this$));
          }
          static PyObject *t_TermFreqIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermFreqIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TermFreqIterator_weight(t_TermFreqIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountAnalyzer.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountAnalyzer::class$ = NULL;
          jmethodID *LimitTokenCountAnalyzer::mids$ = NULL;
          bool LimitTokenCountAnalyzer::live$ = false;

          jclass LimitTokenCountAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_e882998a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;I)V");
              mids$[mid_init$_79b44903] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;IZ)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_wrapComponents_46d74455] = env->getMethodID(cls, "wrapComponents", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
              mids$[mid_getWrappedAnalyzer_29a2299f] = env->getMethodID(cls, "getWrappedAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountAnalyzer::LimitTokenCountAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_e882998a, a0.this$, a1)) {}

          LimitTokenCountAnalyzer::LimitTokenCountAnalyzer(const ::org::apache::lucene::analysis::Analyzer & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::AnalyzerWrapper(env->newObject(initializeClass, &mids$, mid_init$_79b44903, a0.this$, a1, a2)) {}

          ::java::lang::String LimitTokenCountAnalyzer::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountAnalyzer_init_(t_LimitTokenCountAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountAnalyzer_toString(t_LimitTokenCountAnalyzer *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountAnalyzer__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountAnalyzer, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenCountAnalyzer, t_LimitTokenCountAnalyzer, ::org::apache::lucene::analysis::AnalyzerWrapper, LimitTokenCountAnalyzer, t_LimitTokenCountAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenCountAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountAnalyzer), module, "LimitTokenCountAnalyzer", 0);
          }

          void t_LimitTokenCountAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenCountAnalyzer).tp_dict, "class_", make_descriptor(LimitTokenCountAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenCountAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenCountAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountAnalyzer::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountAnalyzer::wrap_Object(LimitTokenCountAnalyzer(((t_LimitTokenCountAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountAnalyzer_init_(t_LimitTokenCountAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                LimitTokenCountAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenCountAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenCountAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenCountAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountAnalyzer_toString(t_LimitTokenCountAnalyzer *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LimitTokenCountAnalyzer), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldFragList$WeightedFragInfo$SubInfo::class$ = NULL;
          jmethodID *FieldFragList$WeightedFragInfo$SubInfo::mids$ = NULL;
          bool FieldFragList$WeightedFragInfo$SubInfo::live$ = false;

          jclass FieldFragList$WeightedFragInfo$SubInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo$SubInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ca488422] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/util/List;IF)V");
              mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getSeqnum_54c6a179] = env->getMethodID(cls, "getSeqnum", "()I");
              mids$[mid_getTermsOffsets_87851566] = env->getMethodID(cls, "getTermsOffsets", "()Ljava/util/List;");
              mids$[mid_getText_14c7b5c5] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldFragList$WeightedFragInfo$SubInfo::FieldFragList$WeightedFragInfo$SubInfo(const ::java::lang::String & a0, const ::java::util::List & a1, jint a2, jfloat a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ca488422, a0.this$, a1.this$, a2, a3)) {}

          jfloat FieldFragList$WeightedFragInfo$SubInfo::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
          }

          jint FieldFragList$WeightedFragInfo$SubInfo::getSeqnum() const
          {
            return env->callIntMethod(this$, mids$[mid_getSeqnum_54c6a179]);
          }

          ::java::util::List FieldFragList$WeightedFragInfo$SubInfo::getTermsOffsets() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsOffsets_87851566]));
          }

          ::java::lang::String FieldFragList$WeightedFragInfo$SubInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_14c7b5c5]));
          }

          ::java::lang::String FieldFragList$WeightedFragInfo$SubInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldFragList$WeightedFragInfo$SubInfo_init_(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getBoost(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getSeqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getTermsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getText(t_FieldFragList$WeightedFragInfo$SubInfo *self);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_toString(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__boost(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__seqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__termsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__text(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data);
          static PyGetSetDef t_FieldFragList$WeightedFragInfo$SubInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, boost),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, seqnum),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, termsOffsets),
            DECLARE_GET_FIELD(t_FieldFragList$WeightedFragInfo$SubInfo, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldFragList$WeightedFragInfo$SubInfo__methods_[] = {
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getSeqnum, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getTermsOffsets, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldFragList$WeightedFragInfo$SubInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldFragList$WeightedFragInfo$SubInfo, t_FieldFragList$WeightedFragInfo$SubInfo, ::java::lang::Object, FieldFragList$WeightedFragInfo$SubInfo, t_FieldFragList$WeightedFragInfo$SubInfo_init_, 0, 0, t_FieldFragList$WeightedFragInfo$SubInfo__fields_, 0, 0);

          void t_FieldFragList$WeightedFragInfo$SubInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo), module, "FieldFragList$WeightedFragInfo$SubInfo", 0);
          }

          void t_FieldFragList$WeightedFragInfo$SubInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo).tp_dict, "class_", make_descriptor(FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldFragList$WeightedFragInfo$SubInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 1)))
              return NULL;
            return t_FieldFragList$WeightedFragInfo$SubInfo::wrap_Object(FieldFragList$WeightedFragInfo$SubInfo(((t_FieldFragList$WeightedFragInfo$SubInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldFragList$WeightedFragInfo$SubInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldFragList$WeightedFragInfo$SubInfo_init_(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::util::List a1((jobject) NULL);
            PyTypeObject **p1;
            jint a2;
            jfloat a3;
            FieldFragList$WeightedFragInfo$SubInfo object((jobject) NULL);

            if (!parseArgs(args, "sKIF", ::java::util::List::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &a3))
            {
              INT_CALL(object = FieldFragList$WeightedFragInfo$SubInfo(a0, a1, a2, a3));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getBoost(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getSeqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSeqnum());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getTermsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs));
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_getText(t_FieldFragList$WeightedFragInfo$SubInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_toString(t_FieldFragList$WeightedFragInfo$SubInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldFragList$WeightedFragInfo$SubInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__boost(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__seqnum(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSeqnum());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__termsOffsets(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldFragList$WeightedFragInfo$SubInfo_get__text(t_FieldFragList$WeightedFragInfo$SubInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *DoubleBarrelLRUCache$CloneableKey::class$ = NULL;
        jmethodID *DoubleBarrelLRUCache$CloneableKey::mids$ = NULL;
        bool DoubleBarrelLRUCache$CloneableKey::live$ = false;

        jclass DoubleBarrelLRUCache$CloneableKey::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_233cec6c] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/DoubleBarrelLRUCache$CloneableKey;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DoubleBarrelLRUCache$CloneableKey::DoubleBarrelLRUCache$CloneableKey() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        DoubleBarrelLRUCache$CloneableKey DoubleBarrelLRUCache$CloneableKey::clone() const
        {
          return DoubleBarrelLRUCache$CloneableKey(env->callObjectMethod(this$, mids$[mid_clone_233cec6c]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_of_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args);
        static int t_DoubleBarrelLRUCache$CloneableKey_init_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_clone(t_DoubleBarrelLRUCache$CloneableKey *self);
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_get__parameters_(t_DoubleBarrelLRUCache$CloneableKey *self, void *data);
        static PyGetSetDef t_DoubleBarrelLRUCache$CloneableKey__fields_[] = {
          DECLARE_GET_FIELD(t_DoubleBarrelLRUCache$CloneableKey, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DoubleBarrelLRUCache$CloneableKey__methods_[] = {
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, of_, METH_VARARGS),
          DECLARE_METHOD(t_DoubleBarrelLRUCache$CloneableKey, clone, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DoubleBarrelLRUCache$CloneableKey, t_DoubleBarrelLRUCache$CloneableKey, ::java::lang::Object, DoubleBarrelLRUCache$CloneableKey, t_DoubleBarrelLRUCache$CloneableKey_init_, 0, 0, t_DoubleBarrelLRUCache$CloneableKey__fields_, 0, 0);
        PyObject *t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(const DoubleBarrelLRUCache$CloneableKey& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache$CloneableKey *self = (t_DoubleBarrelLRUCache$CloneableKey *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_DoubleBarrelLRUCache$CloneableKey::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_DoubleBarrelLRUCache$CloneableKey::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DoubleBarrelLRUCache$CloneableKey *self = (t_DoubleBarrelLRUCache$CloneableKey *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_DoubleBarrelLRUCache$CloneableKey::install(PyObject *module)
        {
          installType(&PY_TYPE(DoubleBarrelLRUCache$CloneableKey), module, "DoubleBarrelLRUCache$CloneableKey", 0);
        }

        void t_DoubleBarrelLRUCache$CloneableKey::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache$CloneableKey).tp_dict, "class_", make_descriptor(DoubleBarrelLRUCache$CloneableKey::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache$CloneableKey).tp_dict, "wrapfn_", make_descriptor(t_DoubleBarrelLRUCache$CloneableKey::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DoubleBarrelLRUCache$CloneableKey).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DoubleBarrelLRUCache$CloneableKey::initializeClass, 1)))
            return NULL;
          return t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(DoubleBarrelLRUCache$CloneableKey(((t_DoubleBarrelLRUCache$CloneableKey *) arg)->object.this$));
        }
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DoubleBarrelLRUCache$CloneableKey::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_of_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_DoubleBarrelLRUCache$CloneableKey_init_(t_DoubleBarrelLRUCache$CloneableKey *self, PyObject *args, PyObject *kwds)
        {
          DoubleBarrelLRUCache$CloneableKey object((jobject) NULL);

          INT_CALL(object = DoubleBarrelLRUCache$CloneableKey());
          self->object = object;

          return 0;
        }

        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_clone(t_DoubleBarrelLRUCache$CloneableKey *self)
        {
          DoubleBarrelLRUCache$CloneableKey result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_DoubleBarrelLRUCache$CloneableKey::wrap_Object(result);
        }
        static PyObject *t_DoubleBarrelLRUCache$CloneableKey_get__parameters_(t_DoubleBarrelLRUCache$CloneableKey *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *TypeAsPayloadTokenFilter::class$ = NULL;
          jmethodID *TypeAsPayloadTokenFilter::mids$ = NULL;
          bool TypeAsPayloadTokenFilter::live$ = false;

          jclass TypeAsPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeAsPayloadTokenFilter::TypeAsPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean TypeAsPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_TypeAsPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeAsPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeAsPayloadTokenFilter_init_(t_TypeAsPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TypeAsPayloadTokenFilter_incrementToken(t_TypeAsPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_TypeAsPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeAsPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeAsPayloadTokenFilter, t_TypeAsPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TypeAsPayloadTokenFilter, t_TypeAsPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TypeAsPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeAsPayloadTokenFilter), module, "TypeAsPayloadTokenFilter", 0);
          }

          void t_TypeAsPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilter).tp_dict, "class_", make_descriptor(TypeAsPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TypeAsPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeAsPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeAsPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeAsPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TypeAsPayloadTokenFilter::wrap_Object(TypeAsPayloadTokenFilter(((t_TypeAsPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TypeAsPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeAsPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeAsPayloadTokenFilter_init_(t_TypeAsPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            TypeAsPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = TypeAsPayloadTokenFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TypeAsPayloadTokenFilter_incrementToken(t_TypeAsPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TypeAsPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/RandomSamplingFacetsCollector.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "java/util/List.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "org/apache/lucene/facet/FacetsCollector$MatchingDocs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *RandomSamplingFacetsCollector::class$ = NULL;
        jmethodID *RandomSamplingFacetsCollector::mids$ = NULL;
        bool RandomSamplingFacetsCollector::live$ = false;

        jclass RandomSamplingFacetsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/RandomSamplingFacetsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_03b232b5] = env->getMethodID(cls, "<init>", "(IJ)V");
            mids$[mid_amortizeFacetCounts_25b169d3] = env->getMethodID(cls, "amortizeFacetCounts", "(Lorg/apache/lucene/facet/FacetResult;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/facet/FacetResult;");
            mids$[mid_getMatchingDocs_87851566] = env->getMethodID(cls, "getMatchingDocs", "()Ljava/util/List;");
            mids$[mid_getOriginalMatchingDocs_87851566] = env->getMethodID(cls, "getOriginalMatchingDocs", "()Ljava/util/List;");
            mids$[mid_getSamplingRate_54c6a174] = env->getMethodID(cls, "getSamplingRate", "()D");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RandomSamplingFacetsCollector::RandomSamplingFacetsCollector(jint a0) : ::org::apache::lucene::facet::FacetsCollector(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        RandomSamplingFacetsCollector::RandomSamplingFacetsCollector(jint a0, jlong a1) : ::org::apache::lucene::facet::FacetsCollector(env->newObject(initializeClass, &mids$, mid_init$_03b232b5, a0, a1)) {}

        ::org::apache::lucene::facet::FacetResult RandomSamplingFacetsCollector::amortizeFacetCounts(const ::org::apache::lucene::facet::FacetResult & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::search::IndexSearcher & a2) const
        {
          return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_amortizeFacetCounts_25b169d3], a0.this$, a1.this$, a2.this$));
        }

        ::java::util::List RandomSamplingFacetsCollector::getMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getMatchingDocs_87851566]));
        }

        ::java::util::List RandomSamplingFacetsCollector::getOriginalMatchingDocs() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getOriginalMatchingDocs_87851566]));
        }

        jdouble RandomSamplingFacetsCollector::getSamplingRate() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getSamplingRate_54c6a174]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_RandomSamplingFacetsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomSamplingFacetsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RandomSamplingFacetsCollector_init_(t_RandomSamplingFacetsCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RandomSamplingFacetsCollector_amortizeFacetCounts(t_RandomSamplingFacetsCollector *self, PyObject *args);
        static PyObject *t_RandomSamplingFacetsCollector_getMatchingDocs(t_RandomSamplingFacetsCollector *self, PyObject *args);
        static PyObject *t_RandomSamplingFacetsCollector_getOriginalMatchingDocs(t_RandomSamplingFacetsCollector *self);
        static PyObject *t_RandomSamplingFacetsCollector_getSamplingRate(t_RandomSamplingFacetsCollector *self);
        static PyObject *t_RandomSamplingFacetsCollector_get__matchingDocs(t_RandomSamplingFacetsCollector *self, void *data);
        static PyObject *t_RandomSamplingFacetsCollector_get__originalMatchingDocs(t_RandomSamplingFacetsCollector *self, void *data);
        static PyObject *t_RandomSamplingFacetsCollector_get__samplingRate(t_RandomSamplingFacetsCollector *self, void *data);
        static PyGetSetDef t_RandomSamplingFacetsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, matchingDocs),
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, originalMatchingDocs),
          DECLARE_GET_FIELD(t_RandomSamplingFacetsCollector, samplingRate),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RandomSamplingFacetsCollector__methods_[] = {
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, amortizeFacetCounts, METH_VARARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getMatchingDocs, METH_VARARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getOriginalMatchingDocs, METH_NOARGS),
          DECLARE_METHOD(t_RandomSamplingFacetsCollector, getSamplingRate, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RandomSamplingFacetsCollector, t_RandomSamplingFacetsCollector, ::org::apache::lucene::facet::FacetsCollector, RandomSamplingFacetsCollector, t_RandomSamplingFacetsCollector_init_, 0, 0, t_RandomSamplingFacetsCollector__fields_, 0, 0);

        void t_RandomSamplingFacetsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(RandomSamplingFacetsCollector), module, "RandomSamplingFacetsCollector", 0);
        }

        void t_RandomSamplingFacetsCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RandomSamplingFacetsCollector).tp_dict, "class_", make_descriptor(RandomSamplingFacetsCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RandomSamplingFacetsCollector).tp_dict, "wrapfn_", make_descriptor(t_RandomSamplingFacetsCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RandomSamplingFacetsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomSamplingFacetsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RandomSamplingFacetsCollector::initializeClass, 1)))
            return NULL;
          return t_RandomSamplingFacetsCollector::wrap_Object(RandomSamplingFacetsCollector(((t_RandomSamplingFacetsCollector *) arg)->object.this$));
        }
        static PyObject *t_RandomSamplingFacetsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RandomSamplingFacetsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RandomSamplingFacetsCollector_init_(t_RandomSamplingFacetsCollector *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              RandomSamplingFacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = RandomSamplingFacetsCollector(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              jlong a1;
              RandomSamplingFacetsCollector object((jobject) NULL);

              if (!parseArgs(args, "IJ", &a0, &a1))
              {
                INT_CALL(object = RandomSamplingFacetsCollector(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RandomSamplingFacetsCollector_amortizeFacetCounts(t_RandomSamplingFacetsCollector *self, PyObject *args)
        {
          ::org::apache::lucene::facet::FacetResult a0((jobject) NULL);
          ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
          ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
          ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::facet::FacetResult::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.amortizeFacetCounts(a0, a1, a2));
            return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "amortizeFacetCounts", args);
          return NULL;
        }

        static PyObject *t_RandomSamplingFacetsCollector_getMatchingDocs(t_RandomSamplingFacetsCollector *self, PyObject *args)
        {
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getMatchingDocs());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
          }

          return callSuper(&PY_TYPE(RandomSamplingFacetsCollector), (PyObject *) self, "getMatchingDocs", args, 2);
        }

        static PyObject *t_RandomSamplingFacetsCollector_getOriginalMatchingDocs(t_RandomSamplingFacetsCollector *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.getOriginalMatchingDocs());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::facet::PY_TYPE(FacetsCollector$MatchingDocs));
        }

        static PyObject *t_RandomSamplingFacetsCollector_getSamplingRate(t_RandomSamplingFacetsCollector *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getSamplingRate());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__matchingDocs(t_RandomSamplingFacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__originalMatchingDocs(t_RandomSamplingFacetsCollector *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getOriginalMatchingDocs());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_RandomSamplingFacetsCollector_get__samplingRate(t_RandomSamplingFacetsCollector *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getSamplingRate());
          return PyFloat_FromDouble((double) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/util/MutableBits.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentWriteState::class$ = NULL;
        jmethodID *SegmentWriteState::mids$ = NULL;
        jfieldID *SegmentWriteState::fids$ = NULL;
        bool SegmentWriteState::live$ = false;

        jclass SegmentWriteState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentWriteState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_bde10a1b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentWriteState;Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext;");
            fids$[fid_delCountOnFlush] = env->getFieldID(cls, "delCountOnFlush", "I");
            fids$[fid_directory] = env->getFieldID(cls, "directory", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_infoStream] = env->getFieldID(cls, "infoStream", "Lorg/apache/lucene/util/InfoStream;");
            fids$[fid_liveDocs] = env->getFieldID(cls, "liveDocs", "Lorg/apache/lucene/util/MutableBits;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");
            fids$[fid_segmentSuffix] = env->getFieldID(cls, "segmentSuffix", "Ljava/lang/String;");
            fids$[fid_termIndexInterval] = env->getFieldID(cls, "termIndexInterval", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentWriteState::SegmentWriteState(const SegmentWriteState & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bde10a1b, a0.this$, a1.this$)) {}

        ::org::apache::lucene::store::IOContext SegmentWriteState::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext(env->getObjectField(this$, fids$[fid_context]));
        }

        jint SegmentWriteState::_get_delCountOnFlush() const
        {
          return env->getIntField(this$, fids$[fid_delCountOnFlush]);
        }

        void SegmentWriteState::_set_delCountOnFlush(jint a0) const
        {
          env->setIntField(this$, fids$[fid_delCountOnFlush], a0);
        }

        ::org::apache::lucene::store::Directory SegmentWriteState::_get_directory() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_directory]));
        }

        ::org::apache::lucene::index::FieldInfos SegmentWriteState::_get_fieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        ::org::apache::lucene::util::InfoStream SegmentWriteState::_get_infoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->getObjectField(this$, fids$[fid_infoStream]));
        }

        ::org::apache::lucene::util::MutableBits SegmentWriteState::_get_liveDocs() const
        {
          return ::org::apache::lucene::util::MutableBits(env->getObjectField(this$, fids$[fid_liveDocs]));
        }

        void SegmentWriteState::_set_liveDocs(const ::org::apache::lucene::util::MutableBits & a0) const
        {
          env->setObjectField(this$, fids$[fid_liveDocs], a0.this$);
        }

        ::org::apache::lucene::index::SegmentInfo SegmentWriteState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }

        ::java::lang::String SegmentWriteState::_get_segmentSuffix() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentSuffix]));
        }

        jint SegmentWriteState::_get_termIndexInterval() const
        {
          return env->getIntField(this$, fids$[fid_termIndexInterval]);
        }

        void SegmentWriteState::_set_termIndexInterval(jint a0) const
        {
          env->setIntField(this$, fids$[fid_termIndexInterval], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentWriteState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentWriteState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentWriteState_init_(t_SegmentWriteState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentWriteState_get__context(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__delCountOnFlush(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__delCountOnFlush(t_SegmentWriteState *self, PyObject *arg, void *data);
        static PyObject *t_SegmentWriteState_get__directory(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__fieldInfos(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__infoStream(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__liveDocs(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__liveDocs(t_SegmentWriteState *self, PyObject *arg, void *data);
        static PyObject *t_SegmentWriteState_get__segmentInfo(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__segmentSuffix(t_SegmentWriteState *self, void *data);
        static PyObject *t_SegmentWriteState_get__termIndexInterval(t_SegmentWriteState *self, void *data);
        static int t_SegmentWriteState_set__termIndexInterval(t_SegmentWriteState *self, PyObject *arg, void *data);

        static PyGetSetDef t_SegmentWriteState__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentWriteState, context),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, delCountOnFlush),
          DECLARE_GET_FIELD(t_SegmentWriteState, directory),
          DECLARE_GET_FIELD(t_SegmentWriteState, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentWriteState, infoStream),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, liveDocs),
          DECLARE_GET_FIELD(t_SegmentWriteState, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentWriteState, segmentSuffix),
          DECLARE_GETSET_FIELD(t_SegmentWriteState, termIndexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentWriteState__methods_[] = {
          DECLARE_METHOD(t_SegmentWriteState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentWriteState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentWriteState, t_SegmentWriteState, ::java::lang::Object, SegmentWriteState, t_SegmentWriteState_init_, 0, 0, t_SegmentWriteState__fields_, 0, 0);

        void t_SegmentWriteState::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentWriteState), module, "SegmentWriteState", 0);
        }

        void t_SegmentWriteState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentWriteState).tp_dict, "class_", make_descriptor(SegmentWriteState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentWriteState).tp_dict, "wrapfn_", make_descriptor(t_SegmentWriteState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentWriteState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentWriteState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentWriteState::initializeClass, 1)))
            return NULL;
          return t_SegmentWriteState::wrap_Object(SegmentWriteState(((t_SegmentWriteState *) arg)->object.this$));
        }
        static PyObject *t_SegmentWriteState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentWriteState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentWriteState_init_(t_SegmentWriteState *self, PyObject *args, PyObject *kwds)
        {
          SegmentWriteState a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          SegmentWriteState object((jobject) NULL);

          if (!parseArgs(args, "ks", SegmentWriteState::initializeClass, &a0, &a1))
          {
            INT_CALL(object = SegmentWriteState(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentWriteState_get__context(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::store::IOContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__delCountOnFlush(t_SegmentWriteState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_delCountOnFlush());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentWriteState_set__delCountOnFlush(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_delCountOnFlush(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "delCountOnFlush", arg);
          return -1;
        }

        static PyObject *t_SegmentWriteState_get__directory(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__fieldInfos(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__infoStream(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object._get_infoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__liveDocs(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::util::MutableBits value((jobject) NULL);
          OBJ_CALL(value = self->object._get_liveDocs());
          return ::org::apache::lucene::util::t_MutableBits::wrap_Object(value);
        }
        static int t_SegmentWriteState_set__liveDocs(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::util::MutableBits value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::util::MutableBits::initializeClass, &value))
          {
            INT_CALL(self->object._set_liveDocs(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "liveDocs", arg);
          return -1;
        }

        static PyObject *t_SegmentWriteState_get__segmentInfo(t_SegmentWriteState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentWriteState_get__segmentSuffix(t_SegmentWriteState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentSuffix());
          return j2p(value);
        }

        static PyObject *t_SegmentWriteState_get__termIndexInterval(t_SegmentWriteState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_termIndexInterval());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentWriteState_set__termIndexInterval(t_SegmentWriteState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_termIndexInterval(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/precedence/processors/PrecedenceQueryNodeProcessorPipeline.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {

              ::java::lang::Class *PrecedenceQueryNodeProcessorPipeline::class$ = NULL;
              jmethodID *PrecedenceQueryNodeProcessorPipeline::mids$ = NULL;
              bool PrecedenceQueryNodeProcessorPipeline::live$ = false;

              jclass PrecedenceQueryNodeProcessorPipeline::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/precedence/processors/PrecedenceQueryNodeProcessorPipeline");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrecedenceQueryNodeProcessorPipeline::PrecedenceQueryNodeProcessorPipeline(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::org::apache::lucene::queryparser::flexible::standard::processors::StandardQueryNodeProcessorPipeline(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace precedence {
            namespace processors {
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrecedenceQueryNodeProcessorPipeline_init_(t_PrecedenceQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_PrecedenceQueryNodeProcessorPipeline__methods_[] = {
                DECLARE_METHOD(t_PrecedenceQueryNodeProcessorPipeline, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrecedenceQueryNodeProcessorPipeline, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PrecedenceQueryNodeProcessorPipeline, t_PrecedenceQueryNodeProcessorPipeline, ::org::apache::lucene::queryparser::flexible::standard::processors::StandardQueryNodeProcessorPipeline, PrecedenceQueryNodeProcessorPipeline, t_PrecedenceQueryNodeProcessorPipeline_init_, 0, 0, 0, 0, 0);

              void t_PrecedenceQueryNodeProcessorPipeline::install(PyObject *module)
              {
                installType(&PY_TYPE(PrecedenceQueryNodeProcessorPipeline), module, "PrecedenceQueryNodeProcessorPipeline", 0);
              }

              void t_PrecedenceQueryNodeProcessorPipeline::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PrecedenceQueryNodeProcessorPipeline).tp_dict, "class_", make_descriptor(PrecedenceQueryNodeProcessorPipeline::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PrecedenceQueryNodeProcessorPipeline).tp_dict, "wrapfn_", make_descriptor(t_PrecedenceQueryNodeProcessorPipeline::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PrecedenceQueryNodeProcessorPipeline).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrecedenceQueryNodeProcessorPipeline::initializeClass, 1)))
                  return NULL;
                return t_PrecedenceQueryNodeProcessorPipeline::wrap_Object(PrecedenceQueryNodeProcessorPipeline(((t_PrecedenceQueryNodeProcessorPipeline *) arg)->object.this$));
              }
              static PyObject *t_PrecedenceQueryNodeProcessorPipeline_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrecedenceQueryNodeProcessorPipeline::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrecedenceQueryNodeProcessorPipeline_init_(t_PrecedenceQueryNodeProcessorPipeline *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                PrecedenceQueryNodeProcessorPipeline object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = PrecedenceQueryNodeProcessorPipeline(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TSTLookup.h"
#include "java/util/Set.h"
#include "java/lang/CharSequence.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TSTLookup::class$ = NULL;
            jmethodID *TSTLookup::mids$ = NULL;
            bool TSTLookup::live$ = false;

            jclass TSTLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TSTLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_add_cb8bea96] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Z");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TSTLookup::TSTLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jboolean TSTLookup::add(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_add_cb8bea96], a0.this$, a1.this$);
            }

            void TSTLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object TSTLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong TSTLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean TSTLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List TSTLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong TSTLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean TSTLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TSTLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TSTLookup_init_(t_TSTLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TSTLookup_add(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_build(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_get(t_TSTLookup *self, PyObject *arg);
            static PyObject *t_TSTLookup_getCount(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_load(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_lookup(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_ramBytesUsed(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_store(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_get__count(t_TSTLookup *self, void *data);
            static PyGetSetDef t_TSTLookup__fields_[] = {
              DECLARE_GET_FIELD(t_TSTLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TSTLookup__methods_[] = {
              DECLARE_METHOD(t_TSTLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTLookup, add, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, get, METH_O),
              DECLARE_METHOD(t_TSTLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TSTLookup, t_TSTLookup, ::org::apache::lucene::search::suggest::Lookup, TSTLookup, t_TSTLookup_init_, 0, 0, t_TSTLookup__fields_, 0, 0);

            void t_TSTLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(TSTLookup), module, "TSTLookup", 0);
            }

            void t_TSTLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TSTLookup).tp_dict, "class_", make_descriptor(TSTLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TSTLookup).tp_dict, "wrapfn_", make_descriptor(t_TSTLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TSTLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TSTLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TSTLookup::initializeClass, 1)))
                return NULL;
              return t_TSTLookup::wrap_Object(TSTLookup(((t_TSTLookup *) arg)->object.this$));
            }
            static PyObject *t_TSTLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TSTLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TSTLookup_init_(t_TSTLookup *self, PyObject *args, PyObject *kwds)
            {
              TSTLookup object((jobject) NULL);

              INT_CALL(object = TSTLookup());
              self->object = object;

              return 0;
            }

            static PyObject *t_TSTLookup_add(t_TSTLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Oo", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_TSTLookup_build(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_TSTLookup_get(t_TSTLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_TSTLookup_getCount(t_TSTLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_TSTLookup_load(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_TSTLookup_lookup(t_TSTLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_TSTLookup_ramBytesUsed(t_TSTLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_TSTLookup_store(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_TSTLookup_get__count(t_TSTLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndIntQueue::class$ = NULL;
        jmethodID *TopOrdAndIntQueue::mids$ = NULL;
        bool TopOrdAndIntQueue::live$ = false;

        jclass TopOrdAndIntQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndIntQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_lessThan_bb8ee210] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue;Lorg/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndIntQueue::TopOrdAndIntQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndIntQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue_of_(t_TopOrdAndIntQueue *self, PyObject *args);
        static int t_TopOrdAndIntQueue_init_(t_TopOrdAndIntQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndIntQueue_get__parameters_(t_TopOrdAndIntQueue *self, void *data);
        static PyGetSetDef t_TopOrdAndIntQueue__fields_[] = {
          DECLARE_GET_FIELD(t_TopOrdAndIntQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndIntQueue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndIntQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndIntQueue, t_TopOrdAndIntQueue, ::org::apache::lucene::util::PriorityQueue, TopOrdAndIntQueue, t_TopOrdAndIntQueue_init_, 0, 0, t_TopOrdAndIntQueue__fields_, 0, 0);
        PyObject *t_TopOrdAndIntQueue::wrap_Object(const TopOrdAndIntQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue *self = (t_TopOrdAndIntQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndIntQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue *self = (t_TopOrdAndIntQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndIntQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndIntQueue), module, "TopOrdAndIntQueue", 0);
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "OrdAndValue", make_descriptor(&PY_TYPE(TopOrdAndIntQueue$OrdAndValue)));
        }

        void t_TopOrdAndIntQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "class_", make_descriptor(TopOrdAndIntQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndIntQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndIntQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndIntQueue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndIntQueue::wrap_Object(TopOrdAndIntQueue(((t_TopOrdAndIntQueue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndIntQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndIntQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndIntQueue_of_(t_TopOrdAndIntQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndIntQueue_init_(t_TopOrdAndIntQueue *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopOrdAndIntQueue object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopOrdAndIntQueue(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndIntQueue$OrdAndValue);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_TopOrdAndIntQueue_get__parameters_(t_TopOrdAndIntQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/VectorValueSource.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *VectorValueSource::class$ = NULL;
            jmethodID *VectorValueSource::mids$ = NULL;
            bool VectorValueSource::live$ = false;

            jclass VectorValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/VectorValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_1fde8fc3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_dimension_54c6a179] = env->getMethodID(cls, "dimension", "()I");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getSources_87851566] = env->getMethodID(cls, "getSources", "()Ljava/util/List;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            VectorValueSource::VectorValueSource(const ::java::util::List & a0) : ::org::apache::lucene::queries::function::valuesource::MultiValueSource(env->newObject(initializeClass, &mids$, mid_init$_1fde8fc3, a0.this$)) {}

            void VectorValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String VectorValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jint VectorValueSource::dimension() const
            {
              return env->callIntMethod(this$, mids$[mid_dimension_54c6a179]);
            }

            jboolean VectorValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::java::util::List VectorValueSource::getSources() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSources_87851566]));
            }

            ::org::apache::lucene::queries::function::FunctionValues VectorValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint VectorValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::String VectorValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_VectorValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_VectorValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_VectorValueSource_init_(t_VectorValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_VectorValueSource_createWeight(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_description(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_dimension(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_equals(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_getSources(t_VectorValueSource *self);
            static PyObject *t_VectorValueSource_getValues(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_hashCode(t_VectorValueSource *self, PyObject *args);
            static PyObject *t_VectorValueSource_name(t_VectorValueSource *self);
            static PyObject *t_VectorValueSource_get__sources(t_VectorValueSource *self, void *data);
            static PyGetSetDef t_VectorValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_VectorValueSource, sources),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_VectorValueSource__methods_[] = {
              DECLARE_METHOD(t_VectorValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_VectorValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_VectorValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, dimension, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, getSources, METH_NOARGS),
              DECLARE_METHOD(t_VectorValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_VectorValueSource, name, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(VectorValueSource, t_VectorValueSource, ::org::apache::lucene::queries::function::valuesource::MultiValueSource, VectorValueSource, t_VectorValueSource_init_, 0, 0, t_VectorValueSource__fields_, 0, 0);

            void t_VectorValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(VectorValueSource), module, "VectorValueSource", 0);
            }

            void t_VectorValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(VectorValueSource).tp_dict, "class_", make_descriptor(VectorValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(VectorValueSource).tp_dict, "wrapfn_", make_descriptor(t_VectorValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(VectorValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_VectorValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, VectorValueSource::initializeClass, 1)))
                return NULL;
              return t_VectorValueSource::wrap_Object(VectorValueSource(((t_VectorValueSource *) arg)->object.this$));
            }
            static PyObject *t_VectorValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, VectorValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_VectorValueSource_init_(t_VectorValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::util::List a0((jobject) NULL);
              PyTypeObject **p0;
              VectorValueSource object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
              {
                INT_CALL(object = VectorValueSource(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_VectorValueSource_createWeight(t_VectorValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_VectorValueSource_description(t_VectorValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_VectorValueSource_dimension(t_VectorValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.dimension());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "dimension", args, 2);
            }

            static PyObject *t_VectorValueSource_equals(t_VectorValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_VectorValueSource_getSources(t_VectorValueSource *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getSources());
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queries::function::PY_TYPE(ValueSource));
            }

            static PyObject *t_VectorValueSource_getValues(t_VectorValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_VectorValueSource_hashCode(t_VectorValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(VectorValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_VectorValueSource_name(t_VectorValueSource *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.name());
              return j2p(result);
            }

            static PyObject *t_VectorValueSource_get__sources(t_VectorValueSource *self, void *data)
            {
              ::java::util::List value((jobject) NULL);
              OBJ_CALL(value = self->object.getSources());
              return ::java::util::t_List::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/CoreParser.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "java/io/InputStream.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/ParserException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *CoreParser::class$ = NULL;
          jmethodID *CoreParser::mids$ = NULL;
          bool CoreParser::live$ = false;
          jint CoreParser::maxNumCachedFilters = (jint) 0;

          jclass CoreParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/CoreParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d77cc89a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_64322899] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Analyzer;Lorg/apache/lucene/queryparser/classic/QueryParser;)V");
              mids$[mid_addFilterBuilder_a961e918] = env->getMethodID(cls, "addFilterBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/FilterBuilder;)V");
              mids$[mid_addQueryBuilder_155f2547] = env->getMethodID(cls, "addQueryBuilder", "(Ljava/lang/String;Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");
              mids$[mid_parse_2700f308] = env->getMethodID(cls, "parse", "(Ljava/io/InputStream;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              maxNumCachedFilters = env->getStaticIntField(cls, "maxNumCachedFilters");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CoreParser::CoreParser(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::Analyzer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d77cc89a, a0.this$, a1.this$)) {}

          CoreParser::CoreParser(const ::org::apache::lucene::analysis::Analyzer & a0, const ::org::apache::lucene::queryparser::classic::QueryParser & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_64322899, a0.this$, a1.this$)) {}

          void CoreParser::addFilterBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::FilterBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addFilterBuilder_a961e918], a0.this$, a1.this$);
          }

          void CoreParser::addQueryBuilder(const ::java::lang::String & a0, const ::org::apache::lucene::queryparser::xml::QueryBuilder & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_addQueryBuilder_155f2547], a0.this$, a1.this$);
          }

          ::org::apache::lucene::search::Query CoreParser::parse(const ::java::io::InputStream & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_2700f308], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_CoreParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CoreParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CoreParser_init_(t_CoreParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CoreParser_addFilterBuilder(t_CoreParser *self, PyObject *args);
          static PyObject *t_CoreParser_addQueryBuilder(t_CoreParser *self, PyObject *args);
          static PyObject *t_CoreParser_parse(t_CoreParser *self, PyObject *arg);

          static PyMethodDef t_CoreParser__methods_[] = {
            DECLARE_METHOD(t_CoreParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CoreParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CoreParser, addFilterBuilder, METH_VARARGS),
            DECLARE_METHOD(t_CoreParser, addQueryBuilder, METH_VARARGS),
            DECLARE_METHOD(t_CoreParser, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CoreParser, t_CoreParser, ::java::lang::Object, CoreParser, t_CoreParser_init_, 0, 0, 0, 0, 0);

          void t_CoreParser::install(PyObject *module)
          {
            installType(&PY_TYPE(CoreParser), module, "CoreParser", 0);
          }

          void t_CoreParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "class_", make_descriptor(CoreParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "wrapfn_", make_descriptor(t_CoreParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CoreParser::initializeClass);
            PyDict_SetItemString(PY_TYPE(CoreParser).tp_dict, "maxNumCachedFilters", make_descriptor(CoreParser::maxNumCachedFilters));
          }

          static PyObject *t_CoreParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CoreParser::initializeClass, 1)))
              return NULL;
            return t_CoreParser::wrap_Object(CoreParser(((t_CoreParser *) arg)->object.this$));
          }
          static PyObject *t_CoreParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CoreParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CoreParser_init_(t_CoreParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
                CoreParser object((jobject) NULL);

                if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CoreParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::org::apache::lucene::queryparser::classic::QueryParser a1((jobject) NULL);
                CoreParser object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::queryparser::classic::QueryParser::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CoreParser(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CoreParser_addFilterBuilder(t_CoreParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::FilterBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::FilterBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addFilterBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addFilterBuilder", args);
            return NULL;
          }

          static PyObject *t_CoreParser_addQueryBuilder(t_CoreParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::queryparser::xml::QueryBuilder a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.addQueryBuilder(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addQueryBuilder", args);
            return NULL;
          }

          static PyObject *t_CoreParser_parse(t_CoreParser *self, PyObject *arg)
          {
            ::java::io::InputStream a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/SetKeywordMarkerFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *SetKeywordMarkerFilter::class$ = NULL;
          jmethodID *SetKeywordMarkerFilter::mids$ = NULL;
          bool SetKeywordMarkerFilter::live$ = false;

          jclass SetKeywordMarkerFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/SetKeywordMarkerFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_64fb9de3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_isKeyword_54c6a16a] = env->getMethodID(cls, "isKeyword", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SetKeywordMarkerFilter::SetKeywordMarkerFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter(env->newObject(initializeClass, &mids$, mid_init$_64fb9de3, a0.this$, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_SetKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SetKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SetKeywordMarkerFilter_init_(t_SetKeywordMarkerFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SetKeywordMarkerFilter__methods_[] = {
            DECLARE_METHOD(t_SetKeywordMarkerFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SetKeywordMarkerFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SetKeywordMarkerFilter, t_SetKeywordMarkerFilter, ::org::apache::lucene::analysis::miscellaneous::KeywordMarkerFilter, SetKeywordMarkerFilter, t_SetKeywordMarkerFilter_init_, 0, 0, 0, 0, 0);

          void t_SetKeywordMarkerFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(SetKeywordMarkerFilter), module, "SetKeywordMarkerFilter", 0);
          }

          void t_SetKeywordMarkerFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SetKeywordMarkerFilter).tp_dict, "class_", make_descriptor(SetKeywordMarkerFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SetKeywordMarkerFilter).tp_dict, "wrapfn_", make_descriptor(t_SetKeywordMarkerFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SetKeywordMarkerFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SetKeywordMarkerFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SetKeywordMarkerFilter::initializeClass, 1)))
              return NULL;
            return t_SetKeywordMarkerFilter::wrap_Object(SetKeywordMarkerFilter(((t_SetKeywordMarkerFilter *) arg)->object.this$));
          }
          static PyObject *t_SetKeywordMarkerFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SetKeywordMarkerFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SetKeywordMarkerFilter_init_(t_SetKeywordMarkerFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
            PyTypeObject **p1;
            SetKeywordMarkerFilter object((jobject) NULL);

            if (!parseArgs(args, "kK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
            {
              INT_CALL(object = SetKeywordMarkerFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/FacetsConfig.h"
#include "org/apache/lucene/facet/taxonomy/OrdinalsReader.h"
#include "org/apache/lucene/facet/FacetsCollector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyFacetSumValueSource::class$ = NULL;
          jmethodID *TaxonomyFacetSumValueSource::mids$ = NULL;
          bool TaxonomyFacetSumValueSource::live$ = false;

          jclass TaxonomyFacetSumValueSource::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6182367d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/queries/function/ValueSource;)V");
              mids$[mid_init$_855546e7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/facet/taxonomy/OrdinalsReader;Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Lorg/apache/lucene/facet/FacetsConfig;Lorg/apache/lucene/facet/FacetsCollector;Lorg/apache/lucene/queries/function/ValueSource;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyFacetSumValueSource::TaxonomyFacetSumValueSource(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::org::apache::lucene::facet::FacetsConfig & a1, const ::org::apache::lucene::facet::FacetsCollector & a2, const ::org::apache::lucene::queries::function::ValueSource & a3) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_6182367d, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          TaxonomyFacetSumValueSource::TaxonomyFacetSumValueSource(const ::org::apache::lucene::facet::taxonomy::OrdinalsReader & a0, const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a1, const ::org::apache::lucene::facet::FacetsConfig & a2, const ::org::apache::lucene::facet::FacetsCollector & a3, const ::org::apache::lucene::queries::function::ValueSource & a4) : ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets(env->newObject(initializeClass, &mids$, mid_init$_855546e7, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyFacetSumValueSource$ScoreValueSource.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyFacetSumValueSource_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyFacetSumValueSource_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyFacetSumValueSource_init_(t_TaxonomyFacetSumValueSource *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TaxonomyFacetSumValueSource__methods_[] = {
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyFacetSumValueSource, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyFacetSumValueSource, t_TaxonomyFacetSumValueSource, ::org::apache::lucene::facet::taxonomy::FloatTaxonomyFacets, TaxonomyFacetSumValueSource, t_TaxonomyFacetSumValueSource_init_, 0, 0, 0, 0, 0);

          void t_TaxonomyFacetSumValueSource::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyFacetSumValueSource), module, "TaxonomyFacetSumValueSource", 0);
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "ScoreValueSource", make_descriptor(&PY_TYPE(TaxonomyFacetSumValueSource$ScoreValueSource)));
          }

          void t_TaxonomyFacetSumValueSource::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "class_", make_descriptor(TaxonomyFacetSumValueSource::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyFacetSumValueSource::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyFacetSumValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyFacetSumValueSource_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyFacetSumValueSource::initializeClass, 1)))
              return NULL;
            return t_TaxonomyFacetSumValueSource::wrap_Object(TaxonomyFacetSumValueSource(((t_TaxonomyFacetSumValueSource *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyFacetSumValueSource_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyFacetSumValueSource::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyFacetSumValueSource_init_(t_TaxonomyFacetSumValueSource *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a2((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a3((jobject) NULL);
                TaxonomyFacetSumValueSource object((jobject) NULL);

                if (!parseArgs(args, "kkkk", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = TaxonomyFacetSumValueSource(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::facet::taxonomy::OrdinalsReader a0((jobject) NULL);
                ::org::apache::lucene::facet::taxonomy::TaxonomyReader a1((jobject) NULL);
                ::org::apache::lucene::facet::FacetsConfig a2((jobject) NULL);
                ::org::apache::lucene::facet::FacetsCollector a3((jobject) NULL);
                ::org::apache::lucene::queries::function::ValueSource a4((jobject) NULL);
                TaxonomyFacetSumValueSource object((jobject) NULL);

                if (!parseArgs(args, "kkkkk", ::org::apache::lucene::facet::taxonomy::OrdinalsReader::initializeClass, ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::org::apache::lucene::facet::FacetsConfig::initializeClass, ::org::apache::lucene::facet::FacetsCollector::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = TaxonomyFacetSumValueSource(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$NumericComparator.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$NumericComparator::class$ = NULL;
        jmethodID *FieldComparator$NumericComparator::mids$ = NULL;
        bool FieldComparator$NumericComparator::live$ = false;

        jclass FieldComparator$NumericComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$NumericComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_158d1296] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Number;)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$NumericComparator::FieldComparator$NumericComparator(const ::java::lang::String & a0, const ::java::lang::Number & a1) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_158d1296, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::FieldComparator FieldComparator$NumericComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$NumericComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$NumericComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$NumericComparator_of_(t_FieldComparator$NumericComparator *self, PyObject *args);
        static int t_FieldComparator$NumericComparator_init_(t_FieldComparator$NumericComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$NumericComparator_setNextReader(t_FieldComparator$NumericComparator *self, PyObject *args);
        static int t_FieldComparator$NumericComparator_set__nextReader(t_FieldComparator$NumericComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$NumericComparator_get__parameters_(t_FieldComparator$NumericComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$NumericComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$NumericComparator, nextReader),
          DECLARE_GET_FIELD(t_FieldComparator$NumericComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$NumericComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$NumericComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$NumericComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$NumericComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$NumericComparator, setNextReader, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$NumericComparator, t_FieldComparator$NumericComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$NumericComparator, t_FieldComparator$NumericComparator_init_, 0, 0, t_FieldComparator$NumericComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$NumericComparator::wrap_Object(const FieldComparator$NumericComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$NumericComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$NumericComparator *self = (t_FieldComparator$NumericComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$NumericComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$NumericComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$NumericComparator *self = (t_FieldComparator$NumericComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$NumericComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$NumericComparator), module, "FieldComparator$NumericComparator", 0);
        }

        void t_FieldComparator$NumericComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$NumericComparator).tp_dict, "class_", make_descriptor(FieldComparator$NumericComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$NumericComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$NumericComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$NumericComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$NumericComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$NumericComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$NumericComparator::wrap_Object(FieldComparator$NumericComparator(((t_FieldComparator$NumericComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$NumericComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$NumericComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$NumericComparator_of_(t_FieldComparator$NumericComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$NumericComparator_init_(t_FieldComparator$NumericComparator *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Number a1((jobject) NULL);
          FieldComparator$NumericComparator object((jobject) NULL);

          if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Number), &a0, &a1))
          {
            INT_CALL(object = FieldComparator$NumericComparator(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$NumericComparator_setNextReader(t_FieldComparator$NumericComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, self->parameters[0]);
          }

          return callSuper(&PY_TYPE(FieldComparator$NumericComparator), (PyObject *) self, "setNextReader", args, 2);
        }
        static PyObject *t_FieldComparator$NumericComparator_get__parameters_(t_FieldComparator$NumericComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$NumericComparator_set__nextReader(t_FieldComparator$NumericComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesConsumer::class$ = NULL;
        jmethodID *DocValuesConsumer::mids$ = NULL;
        bool DocValuesConsumer::live$ = false;

        jclass DocValuesConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addBinaryField_1dd3fb83] = env->getMethodID(cls, "addBinaryField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;)V");
            mids$[mid_addNumericField_1dd3fb83] = env->getMethodID(cls, "addNumericField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;)V");
            mids$[mid_addSortedField_4e727c10] = env->getMethodID(cls, "addSortedField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;Ljava/lang/Iterable;)V");
            mids$[mid_addSortedNumericField_4e727c10] = env->getMethodID(cls, "addSortedNumericField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;Ljava/lang/Iterable;)V");
            mids$[mid_addSortedSetField_eef27e8b] = env->getMethodID(cls, "addSortedSetField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;Ljava/lang/Iterable;Ljava/lang/Iterable;)V");
            mids$[mid_isSingleValued_d1cac209] = env->getStaticMethodID(cls, "isSingleValued", "(Ljava/lang/Iterable;)Z");
            mids$[mid_mergeBinaryField_1705fbe6] = env->getMethodID(cls, "mergeBinaryField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;Ljava/util/List;)V");
            mids$[mid_mergeNumericField_1705fbe6] = env->getMethodID(cls, "mergeNumericField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;Ljava/util/List;)V");
            mids$[mid_mergeSortedField_eba53503] = env->getMethodID(cls, "mergeSortedField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;)V");
            mids$[mid_mergeSortedNumericField_eba53503] = env->getMethodID(cls, "mergeSortedNumericField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;)V");
            mids$[mid_mergeSortedSetField_eba53503] = env->getMethodID(cls, "mergeSortedSetField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;)V");
            mids$[mid_singletonView_0e65223a] = env->getStaticMethodID(cls, "singletonView", "(Ljava/lang/Iterable;Ljava/lang/Iterable;Ljava/lang/Number;)Ljava/lang/Iterable;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void DocValuesConsumer::addBinaryField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addBinaryField_1dd3fb83], a0.this$, a1.this$);
        }

        void DocValuesConsumer::addNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addNumericField_1dd3fb83], a0.this$, a1.this$);
        }

        void DocValuesConsumer::addSortedField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1, const ::java::lang::Iterable & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedField_4e727c10], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::addSortedNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1, const ::java::lang::Iterable & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedNumericField_4e727c10], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::addSortedSetField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1, const ::java::lang::Iterable & a2, const ::java::lang::Iterable & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedSetField_eef27e8b], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        jboolean DocValuesConsumer::isSingleValued(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isSingleValued_d1cac209], a0.this$);
        }

        void DocValuesConsumer::mergeBinaryField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2, const ::java::util::List & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeBinaryField_1705fbe6], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        void DocValuesConsumer::mergeNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2, const ::java::util::List & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeNumericField_1705fbe6], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        void DocValuesConsumer::mergeSortedField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedField_eba53503], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::mergeSortedNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedNumericField_eba53503], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::mergeSortedSetField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedSetField_eba53503], a0.this$, a1.this$, a2.this$);
        }

        ::java::lang::Iterable DocValuesConsumer::singletonView(const ::java::lang::Iterable & a0, const ::java::lang::Iterable & a1, const ::java::lang::Number & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Iterable(env->callStaticObjectMethod(cls, mids$[mid_singletonView_0e65223a], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_addBinaryField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedSetField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_isSingleValued(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_mergeBinaryField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedSetField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_singletonView(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_DocValuesConsumer__methods_[] = {
          DECLARE_METHOD(t_DocValuesConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, addBinaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedSetField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, isSingleValued, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeBinaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedSetField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, singletonView, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValuesConsumer, t_DocValuesConsumer, ::java::lang::Object, DocValuesConsumer, abstract_init, 0, 0, 0, 0, 0);

        void t_DocValuesConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesConsumer), module, "DocValuesConsumer", 0);
        }

        void t_DocValuesConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValuesConsumer).tp_dict, "class_", make_descriptor(DocValuesConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValuesConsumer).tp_dict, "wrapfn_", make_descriptor(t_DocValuesConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValuesConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesConsumer::initializeClass, 1)))
            return NULL;
          return t_DocValuesConsumer::wrap_Object(DocValuesConsumer(((t_DocValuesConsumer *) arg)->object.this$));
        }
        static PyObject *t_DocValuesConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesConsumer_addBinaryField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addBinaryField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addBinaryField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addNumericField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Iterable a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2, &p2, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addSortedField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Iterable a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2, &p2, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addSortedNumericField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedSetField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Iterable a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::lang::Iterable a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "kKKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2, &p2, ::java::lang::t_Iterable::parameters_, &a3, &p3, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addSortedSetField(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedSetField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_isSingleValued(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesConsumer::isSingleValued(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isSingleValued", arg);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeBinaryField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::util::List a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "kkKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3, &p3, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeBinaryField(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeBinaryField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::util::List a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "kkKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3, &p3, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeNumericField(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kkK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeSortedField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kkK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeSortedNumericField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedSetField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kkK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeSortedSetField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedSetField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_singletonView(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Number a2((jobject) NULL);
          ::java::lang::Iterable result((jobject) NULL);

          if (!parseArgs(args, "KKO", ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &::java::lang::PY_TYPE(Number), &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesConsumer::singletonView(a0, a1, a2));
            return ::java::lang::t_Iterable::wrap_Object(result, &::java::lang::PY_TYPE(Number));
          }

          PyErr_SetArgsError(type, "singletonView", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Explanation::class$ = NULL;
        jmethodID *Explanation::mids$ = NULL;
        bool Explanation::live$ = false;

        jclass Explanation::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Explanation");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_f3ab5075] = env->getMethodID(cls, "<init>", "(FLjava/lang/String;)V");
            mids$[mid_addDetail_398cd45a] = env->getMethodID(cls, "addDetail", "(Lorg/apache/lucene/search/Explanation;)V");
            mids$[mid_getDescription_14c7b5c5] = env->getMethodID(cls, "getDescription", "()Ljava/lang/String;");
            mids$[mid_getDetails_1ee90723] = env->getMethodID(cls, "getDetails", "()[Lorg/apache/lucene/search/Explanation;");
            mids$[mid_getValue_54c6a176] = env->getMethodID(cls, "getValue", "()F");
            mids$[mid_isMatch_54c6a16a] = env->getMethodID(cls, "isMatch", "()Z");
            mids$[mid_setDescription_5fdc3f48] = env->getMethodID(cls, "setDescription", "(Ljava/lang/String;)V");
            mids$[mid_setValue_06298cab] = env->getMethodID(cls, "setValue", "(F)V");
            mids$[mid_toHtml_14c7b5c5] = env->getMethodID(cls, "toHtml", "()Ljava/lang/String;");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
            mids$[mid_getSummary_14c7b5c5] = env->getMethodID(cls, "getSummary", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Explanation::Explanation() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Explanation::Explanation(jfloat a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f3ab5075, a0, a1.this$)) {}

        void Explanation::addDetail(const Explanation & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addDetail_398cd45a], a0.this$);
        }

        ::java::lang::String Explanation::getDescription() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getDescription_14c7b5c5]));
        }

        JArray< Explanation > Explanation::getDetails() const
        {
          return JArray< Explanation >(env->callObjectMethod(this$, mids$[mid_getDetails_1ee90723]));
        }

        jfloat Explanation::getValue() const
        {
          return env->callFloatMethod(this$, mids$[mid_getValue_54c6a176]);
        }

        jboolean Explanation::isMatch() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isMatch_54c6a16a]);
        }

        void Explanation::setDescription(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDescription_5fdc3f48], a0.this$);
        }

        void Explanation::setValue(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setValue_06298cab], a0);
        }

        ::java::lang::String Explanation::toHtml() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toHtml_14c7b5c5]));
        }

        ::java::lang::String Explanation::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Explanation_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Explanation_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Explanation_init_(t_Explanation *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Explanation_addDetail(t_Explanation *self, PyObject *arg);
        static PyObject *t_Explanation_getDescription(t_Explanation *self);
        static PyObject *t_Explanation_getDetails(t_Explanation *self);
        static PyObject *t_Explanation_getValue(t_Explanation *self);
        static PyObject *t_Explanation_isMatch(t_Explanation *self);
        static PyObject *t_Explanation_setDescription(t_Explanation *self, PyObject *arg);
        static PyObject *t_Explanation_setValue(t_Explanation *self, PyObject *arg);
        static PyObject *t_Explanation_toHtml(t_Explanation *self);
        static PyObject *t_Explanation_toString(t_Explanation *self, PyObject *args);
        static PyObject *t_Explanation_get__description(t_Explanation *self, void *data);
        static int t_Explanation_set__description(t_Explanation *self, PyObject *arg, void *data);
        static PyObject *t_Explanation_get__details(t_Explanation *self, void *data);
        static PyObject *t_Explanation_get__match(t_Explanation *self, void *data);
        static PyObject *t_Explanation_get__value(t_Explanation *self, void *data);
        static int t_Explanation_set__value(t_Explanation *self, PyObject *arg, void *data);
        static PyGetSetDef t_Explanation__fields_[] = {
          DECLARE_GETSET_FIELD(t_Explanation, description),
          DECLARE_GET_FIELD(t_Explanation, details),
          DECLARE_GET_FIELD(t_Explanation, match),
          DECLARE_GETSET_FIELD(t_Explanation, value),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Explanation__methods_[] = {
          DECLARE_METHOD(t_Explanation, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Explanation, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Explanation, addDetail, METH_O),
          DECLARE_METHOD(t_Explanation, getDescription, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, getDetails, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, getValue, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, isMatch, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, setDescription, METH_O),
          DECLARE_METHOD(t_Explanation, setValue, METH_O),
          DECLARE_METHOD(t_Explanation, toHtml, METH_NOARGS),
          DECLARE_METHOD(t_Explanation, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Explanation, t_Explanation, ::java::lang::Object, Explanation, t_Explanation_init_, 0, 0, t_Explanation__fields_, 0, 0);

        void t_Explanation::install(PyObject *module)
        {
          installType(&PY_TYPE(Explanation), module, "Explanation", 0);
        }

        void t_Explanation::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Explanation).tp_dict, "class_", make_descriptor(Explanation::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Explanation).tp_dict, "wrapfn_", make_descriptor(t_Explanation::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Explanation).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Explanation_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Explanation::initializeClass, 1)))
            return NULL;
          return t_Explanation::wrap_Object(Explanation(((t_Explanation *) arg)->object.this$));
        }
        static PyObject *t_Explanation_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Explanation::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Explanation_init_(t_Explanation *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              Explanation object((jobject) NULL);

              INT_CALL(object = Explanation());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jfloat a0;
              ::java::lang::String a1((jobject) NULL);
              Explanation object((jobject) NULL);

              if (!parseArgs(args, "Fs", &a0, &a1))
              {
                INT_CALL(object = Explanation(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Explanation_addDetail(t_Explanation *self, PyObject *arg)
        {
          Explanation a0((jobject) NULL);

          if (!parseArg(arg, "k", Explanation::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addDetail(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addDetail", arg);
          return NULL;
        }

        static PyObject *t_Explanation_getDescription(t_Explanation *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getDescription());
          return j2p(result);
        }

        static PyObject *t_Explanation_getDetails(t_Explanation *self)
        {
          JArray< Explanation > result((jobject) NULL);
          OBJ_CALL(result = self->object.getDetails());
          return JArray<jobject>(result.this$).wrap(t_Explanation::wrap_jobject);
        }

        static PyObject *t_Explanation_getValue(t_Explanation *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getValue());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Explanation_isMatch(t_Explanation *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isMatch());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_Explanation_setDescription(t_Explanation *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setDescription(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDescription", arg);
          return NULL;
        }

        static PyObject *t_Explanation_setValue(t_Explanation *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setValue", arg);
          return NULL;
        }

        static PyObject *t_Explanation_toHtml(t_Explanation *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.toHtml());
          return j2p(result);
        }

        static PyObject *t_Explanation_toString(t_Explanation *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Explanation), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Explanation_get__description(t_Explanation *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getDescription());
          return j2p(value);
        }
        static int t_Explanation_set__description(t_Explanation *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object.setDescription(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "description", arg);
          return -1;
        }

        static PyObject *t_Explanation_get__details(t_Explanation *self, void *data)
        {
          JArray< Explanation > value((jobject) NULL);
          OBJ_CALL(value = self->object.getDetails());
          return JArray<jobject>(value.this$).wrap(t_Explanation::wrap_jobject);
        }

        static PyObject *t_Explanation_get__match(t_Explanation *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isMatch());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_Explanation_get__value(t_Explanation *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getValue());
          return PyFloat_FromDouble((double) value);
        }
        static int t_Explanation_set__value(t_Explanation *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "value", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LruTaxonomyWriterCache::class$ = NULL;
            jmethodID *LruTaxonomyWriterCache::mids$ = NULL;
            bool LruTaxonomyWriterCache::live$ = false;

            jclass LruTaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_83a5d707] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;)V");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_283f83f5] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_isFull_54c6a16a] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_7ba580a4] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LruTaxonomyWriterCache::LruTaxonomyWriterCache(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            LruTaxonomyWriterCache::LruTaxonomyWriterCache(jint a0, const ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_83a5d707, a0, a1.this$)) {}

            void LruTaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            void LruTaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jint LruTaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_283f83f5], a0.this$);
            }

            jboolean LruTaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_54c6a16a]);
            }

            jboolean LruTaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_7ba580a4], a0.this$, a1);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LruTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LruTaxonomyWriterCache_init_(t_LruTaxonomyWriterCache *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LruTaxonomyWriterCache_clear(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_close(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_get(t_LruTaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache_isFull(t_LruTaxonomyWriterCache *self);
            static PyObject *t_LruTaxonomyWriterCache_put(t_LruTaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache_get__full(t_LruTaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_LruTaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_LruTaxonomyWriterCache, full),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LruTaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_LruTaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache, put, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LruTaxonomyWriterCache, t_LruTaxonomyWriterCache, ::java::lang::Object, LruTaxonomyWriterCache, t_LruTaxonomyWriterCache_init_, 0, 0, t_LruTaxonomyWriterCache__fields_, 0, 0);

            void t_LruTaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(LruTaxonomyWriterCache), module, "LruTaxonomyWriterCache", 0);
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "LRUType", make_descriptor(&PY_TYPE(LruTaxonomyWriterCache$LRUType)));
            }

            void t_LruTaxonomyWriterCache::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "class_", make_descriptor(LruTaxonomyWriterCache::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "wrapfn_", make_descriptor(t_LruTaxonomyWriterCache::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LruTaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LruTaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_LruTaxonomyWriterCache::wrap_Object(LruTaxonomyWriterCache(((t_LruTaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_LruTaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LruTaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LruTaxonomyWriterCache_init_(t_LruTaxonomyWriterCache *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  jint a0;
                  LruTaxonomyWriterCache object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = LruTaxonomyWriterCache(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  jint a0;
                  ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType a1((jobject) NULL);
                  PyTypeObject **p1;
                  LruTaxonomyWriterCache object((jobject) NULL);

                  if (!parseArgs(args, "IK", ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::facet::taxonomy::writercache::t_LruTaxonomyWriterCache$LRUType::parameters_))
                  {
                    INT_CALL(object = LruTaxonomyWriterCache(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LruTaxonomyWriterCache_clear(t_LruTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_LruTaxonomyWriterCache_close(t_LruTaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_LruTaxonomyWriterCache_get(t_LruTaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_LruTaxonomyWriterCache_isFull(t_LruTaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_LruTaxonomyWriterCache_put(t_LruTaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_LruTaxonomyWriterCache_get__full(t_LruTaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenPositionFilter::class$ = NULL;
          jmethodID *LimitTokenPositionFilter::mids$ = NULL;
          bool LimitTokenPositionFilter::live$ = false;

          jclass LimitTokenPositionFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenPositionFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_4f7f61d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenPositionFilter::LimitTokenPositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          LimitTokenPositionFilter::LimitTokenPositionFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_4f7f61d3, a0.this$, a1, a2)) {}

          jboolean LimitTokenPositionFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void LimitTokenPositionFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenPositionFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenPositionFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenPositionFilter_init_(t_LimitTokenPositionFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenPositionFilter_incrementToken(t_LimitTokenPositionFilter *self, PyObject *args);
          static PyObject *t_LimitTokenPositionFilter_reset(t_LimitTokenPositionFilter *self, PyObject *args);

          static PyMethodDef t_LimitTokenPositionFilter__methods_[] = {
            DECLARE_METHOD(t_LimitTokenPositionFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_LimitTokenPositionFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenPositionFilter, t_LimitTokenPositionFilter, ::org::apache::lucene::analysis::TokenFilter, LimitTokenPositionFilter, t_LimitTokenPositionFilter_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenPositionFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenPositionFilter), module, "LimitTokenPositionFilter", 0);
          }

          void t_LimitTokenPositionFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilter).tp_dict, "class_", make_descriptor(LimitTokenPositionFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilter).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenPositionFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenPositionFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenPositionFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenPositionFilter::initializeClass, 1)))
              return NULL;
            return t_LimitTokenPositionFilter::wrap_Object(LimitTokenPositionFilter(((t_LimitTokenPositionFilter *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenPositionFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenPositionFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenPositionFilter_init_(t_LimitTokenPositionFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                LimitTokenPositionFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenPositionFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenPositionFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenPositionFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenPositionFilter_incrementToken(t_LimitTokenPositionFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LimitTokenPositionFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_LimitTokenPositionFilter_reset(t_LimitTokenPositionFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(LimitTokenPositionFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/TypeTokenFilter.h"
#include "java/util/Set.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *TypeTokenFilter::class$ = NULL;
          jmethodID *TypeTokenFilter::mids$ = NULL;
          bool TypeTokenFilter::live$ = false;

          jclass TypeTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/TypeTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ecce6e0b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;)V");
              mids$[mid_init$_eb1a7514] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;Z)V");
              mids$[mid_init$_bac183a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;)V");
              mids$[mid_init$_436958cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;Z)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::util::Set & a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ecce6e0b, a0.this$, a1.this$, a2.this$)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::util::Set & a2, jboolean a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_eb1a7514, a0.this$, a1.this$, a2.this$, a3)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, const ::java::util::Set & a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_bac183a2, a0.this$, a1, a2.this$, a3.this$)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, const ::java::util::Set & a3, jboolean a4) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_436958cb, a0.this$, a1, a2.this$, a3.this$, a4)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_TypeTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeTokenFilter_init_(t_TypeTokenFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TypeTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TypeTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeTokenFilter, t_TypeTokenFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, TypeTokenFilter, t_TypeTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TypeTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeTokenFilter), module, "TypeTokenFilter", 0);
          }

          void t_TypeTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeTokenFilter).tp_dict, "class_", make_descriptor(TypeTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TypeTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TypeTokenFilter::wrap_Object(TypeTokenFilter(((t_TypeTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TypeTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeTokenFilter_init_(t_TypeTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkKZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::java::util::t_Set::parameters_, &a3))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KZkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                jboolean a4;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KZkKZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_, &a4))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/DecimalFormat.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/StringBuffer.h"
#include "java/util/Currency.h"
#include "java/lang/Number.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *DecimalFormat::class$ = NULL;
    jmethodID *DecimalFormat::mids$ = NULL;
    bool DecimalFormat::live$ = false;

    jclass DecimalFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/DecimalFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_applyLocalizedPattern_5fdc3f48] = env->getMethodID(cls, "applyLocalizedPattern", "(Ljava/lang/String;)V");
        mids$[mid_applyPattern_5fdc3f48] = env->getMethodID(cls, "applyPattern", "(Ljava/lang/String;)V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getCurrency_14c3f2a1] = env->getMethodID(cls, "getCurrency", "()Ljava/util/Currency;");
        mids$[mid_getGroupingSize_54c6a179] = env->getMethodID(cls, "getGroupingSize", "()I");
        mids$[mid_getMaximumFractionDigits_54c6a179] = env->getMethodID(cls, "getMaximumFractionDigits", "()I");
        mids$[mid_getMaximumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMaximumIntegerDigits", "()I");
        mids$[mid_getMinimumFractionDigits_54c6a179] = env->getMethodID(cls, "getMinimumFractionDigits", "()I");
        mids$[mid_getMinimumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMinimumIntegerDigits", "()I");
        mids$[mid_getMultiplier_54c6a179] = env->getMethodID(cls, "getMultiplier", "()I");
        mids$[mid_getNegativePrefix_14c7b5c5] = env->getMethodID(cls, "getNegativePrefix", "()Ljava/lang/String;");
        mids$[mid_getNegativeSuffix_14c7b5c5] = env->getMethodID(cls, "getNegativeSuffix", "()Ljava/lang/String;");
        mids$[mid_getPositivePrefix_14c7b5c5] = env->getMethodID(cls, "getPositivePrefix", "()Ljava/lang/String;");
        mids$[mid_getPositiveSuffix_14c7b5c5] = env->getMethodID(cls, "getPositiveSuffix", "()Ljava/lang/String;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isDecimalSeparatorAlwaysShown_54c6a16a] = env->getMethodID(cls, "isDecimalSeparatorAlwaysShown", "()Z");
        mids$[mid_isParseBigDecimal_54c6a16a] = env->getMethodID(cls, "isParseBigDecimal", "()Z");
        mids$[mid_setCurrency_de939370] = env->getMethodID(cls, "setCurrency", "(Ljava/util/Currency;)V");
        mids$[mid_setDecimalSeparatorAlwaysShown_bb0c767f] = env->getMethodID(cls, "setDecimalSeparatorAlwaysShown", "(Z)V");
        mids$[mid_setGroupingSize_39c7bd3c] = env->getMethodID(cls, "setGroupingSize", "(I)V");
        mids$[mid_setMaximumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumFractionDigits", "(I)V");
        mids$[mid_setMaximumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumIntegerDigits", "(I)V");
        mids$[mid_setMinimumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumFractionDigits", "(I)V");
        mids$[mid_setMinimumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumIntegerDigits", "(I)V");
        mids$[mid_setMultiplier_39c7bd3c] = env->getMethodID(cls, "setMultiplier", "(I)V");
        mids$[mid_setNegativePrefix_5fdc3f48] = env->getMethodID(cls, "setNegativePrefix", "(Ljava/lang/String;)V");
        mids$[mid_setNegativeSuffix_5fdc3f48] = env->getMethodID(cls, "setNegativeSuffix", "(Ljava/lang/String;)V");
        mids$[mid_setParseBigDecimal_bb0c767f] = env->getMethodID(cls, "setParseBigDecimal", "(Z)V");
        mids$[mid_setPositivePrefix_5fdc3f48] = env->getMethodID(cls, "setPositivePrefix", "(Ljava/lang/String;)V");
        mids$[mid_setPositiveSuffix_5fdc3f48] = env->getMethodID(cls, "setPositiveSuffix", "(Ljava/lang/String;)V");
        mids$[mid_toLocalizedPattern_14c7b5c5] = env->getMethodID(cls, "toLocalizedPattern", "()Ljava/lang/String;");
        mids$[mid_toPattern_14c7b5c5] = env->getMethodID(cls, "toPattern", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    DecimalFormat::DecimalFormat() : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    DecimalFormat::DecimalFormat(const ::java::lang::String & a0) : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    void DecimalFormat::applyLocalizedPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyLocalizedPattern_5fdc3f48], a0.this$);
    }

    void DecimalFormat::applyPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyPattern_5fdc3f48], a0.this$);
    }

    ::java::lang::Object DecimalFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean DecimalFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::util::Currency DecimalFormat::getCurrency() const
    {
      return ::java::util::Currency(env->callObjectMethod(this$, mids$[mid_getCurrency_14c3f2a1]));
    }

    jint DecimalFormat::getGroupingSize() const
    {
      return env->callIntMethod(this$, mids$[mid_getGroupingSize_54c6a179]);
    }

    jint DecimalFormat::getMaximumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumFractionDigits_54c6a179]);
    }

    jint DecimalFormat::getMaximumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumIntegerDigits_54c6a179]);
    }

    jint DecimalFormat::getMinimumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumFractionDigits_54c6a179]);
    }

    jint DecimalFormat::getMinimumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumIntegerDigits_54c6a179]);
    }

    jint DecimalFormat::getMultiplier() const
    {
      return env->callIntMethod(this$, mids$[mid_getMultiplier_54c6a179]);
    }

    ::java::lang::String DecimalFormat::getNegativePrefix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNegativePrefix_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::getNegativeSuffix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNegativeSuffix_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::getPositivePrefix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPositivePrefix_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::getPositiveSuffix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPositiveSuffix_14c7b5c5]));
    }

    jint DecimalFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean DecimalFormat::isDecimalSeparatorAlwaysShown() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isDecimalSeparatorAlwaysShown_54c6a16a]);
    }

    jboolean DecimalFormat::isParseBigDecimal() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isParseBigDecimal_54c6a16a]);
    }

    void DecimalFormat::setCurrency(const ::java::util::Currency & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCurrency_de939370], a0.this$);
    }

    void DecimalFormat::setDecimalSeparatorAlwaysShown(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDecimalSeparatorAlwaysShown_bb0c767f], a0);
    }

    void DecimalFormat::setGroupingSize(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setGroupingSize_39c7bd3c], a0);
    }

    void DecimalFormat::setMaximumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumFractionDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMaximumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumIntegerDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMinimumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumFractionDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMinimumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumIntegerDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMultiplier(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMultiplier_39c7bd3c], a0);
    }

    void DecimalFormat::setNegativePrefix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNegativePrefix_5fdc3f48], a0.this$);
    }

    void DecimalFormat::setNegativeSuffix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNegativeSuffix_5fdc3f48], a0.this$);
    }

    void DecimalFormat::setParseBigDecimal(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setParseBigDecimal_bb0c767f], a0);
    }

    void DecimalFormat::setPositivePrefix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPositivePrefix_5fdc3f48], a0.this$);
    }

    void DecimalFormat::setPositiveSuffix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPositiveSuffix_5fdc3f48], a0.this$);
    }

    ::java::lang::String DecimalFormat::toLocalizedPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLocalizedPattern_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::toPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toPattern_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_DecimalFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DecimalFormat_instance_(PyTypeObject *type, PyObject *arg);
    static int t_DecimalFormat_init_(t_DecimalFormat *self, PyObject *args, PyObject *kwds);
    static PyObject *t_DecimalFormat_applyLocalizedPattern(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_applyPattern(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_clone(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_equals(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getCurrency(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getGroupingSize(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getMaximumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMinimumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMultiplier(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getNegativePrefix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getNegativeSuffix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getPositivePrefix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getPositiveSuffix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_hashCode(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_isDecimalSeparatorAlwaysShown(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_isParseBigDecimal(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_setCurrency(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setDecimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setGroupingSize(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setMaximumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMinimumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMultiplier(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setNegativePrefix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setNegativeSuffix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setParseBigDecimal(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setPositivePrefix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setPositiveSuffix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_toLocalizedPattern(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_toPattern(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_get__currency(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__currency(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__decimalSeparatorAlwaysShown(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__decimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__groupingSize(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__groupingSize(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__maximumFractionDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__maximumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__maximumIntegerDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__maximumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__minimumFractionDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__minimumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__minimumIntegerDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__minimumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__multiplier(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__multiplier(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__negativePrefix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__negativePrefix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__negativeSuffix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__negativeSuffix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__parseBigDecimal(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__parseBigDecimal(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__positivePrefix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__positivePrefix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__positiveSuffix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__positiveSuffix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_DecimalFormat__fields_[] = {
      DECLARE_GETSET_FIELD(t_DecimalFormat, currency),
      DECLARE_GETSET_FIELD(t_DecimalFormat, decimalSeparatorAlwaysShown),
      DECLARE_GETSET_FIELD(t_DecimalFormat, groupingSize),
      DECLARE_GETSET_FIELD(t_DecimalFormat, maximumFractionDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, maximumIntegerDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, minimumFractionDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, minimumIntegerDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, multiplier),
      DECLARE_GETSET_FIELD(t_DecimalFormat, negativePrefix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, negativeSuffix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, parseBigDecimal),
      DECLARE_GETSET_FIELD(t_DecimalFormat, positivePrefix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, positiveSuffix),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_DecimalFormat__methods_[] = {
      DECLARE_METHOD(t_DecimalFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DecimalFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DecimalFormat, applyLocalizedPattern, METH_O),
      DECLARE_METHOD(t_DecimalFormat, applyPattern, METH_O),
      DECLARE_METHOD(t_DecimalFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getCurrency, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getGroupingSize, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getMaximumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMaximumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMinimumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMinimumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMultiplier, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getNegativePrefix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getNegativeSuffix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getPositivePrefix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getPositiveSuffix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, isDecimalSeparatorAlwaysShown, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, isParseBigDecimal, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, setCurrency, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setDecimalSeparatorAlwaysShown, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setGroupingSize, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setMaximumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMaximumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMinimumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMinimumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMultiplier, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setNegativePrefix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setNegativeSuffix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setParseBigDecimal, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setPositivePrefix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setPositiveSuffix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, toLocalizedPattern, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, toPattern, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(DecimalFormat, t_DecimalFormat, ::java::text::NumberFormat, DecimalFormat, t_DecimalFormat_init_, 0, 0, t_DecimalFormat__fields_, 0, 0);

    void t_DecimalFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(DecimalFormat), module, "DecimalFormat", 0);
    }

    void t_DecimalFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(DecimalFormat).tp_dict, "class_", make_descriptor(DecimalFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(DecimalFormat).tp_dict, "wrapfn_", make_descriptor(t_DecimalFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(DecimalFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_DecimalFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, DecimalFormat::initializeClass, 1)))
        return NULL;
      return t_DecimalFormat::wrap_Object(DecimalFormat(((t_DecimalFormat *) arg)->object.this$));
    }
    static PyObject *t_DecimalFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, DecimalFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_DecimalFormat_init_(t_DecimalFormat *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DecimalFormat object((jobject) NULL);

          INT_CALL(object = DecimalFormat());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          DecimalFormat object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = DecimalFormat(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_DecimalFormat_applyLocalizedPattern(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyLocalizedPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyLocalizedPattern", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_applyPattern(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyPattern", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_clone(t_DecimalFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_DecimalFormat_equals(t_DecimalFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_DecimalFormat_getCurrency(t_DecimalFormat *self, PyObject *args)
    {
      ::java::util::Currency result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getCurrency());
        return ::java::util::t_Currency::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getCurrency", args, 2);
    }

    static PyObject *t_DecimalFormat_getGroupingSize(t_DecimalFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getGroupingSize());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DecimalFormat_getMaximumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMaximumFractionDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMaximumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMaximumIntegerDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMaximumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMinimumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMinimumFractionDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMinimumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMinimumIntegerDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMinimumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMultiplier(t_DecimalFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMultiplier());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DecimalFormat_getNegativePrefix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getNegativePrefix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getNegativeSuffix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getNegativeSuffix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getPositivePrefix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getPositivePrefix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getPositiveSuffix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getPositiveSuffix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_hashCode(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_DecimalFormat_isDecimalSeparatorAlwaysShown(t_DecimalFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isDecimalSeparatorAlwaysShown());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DecimalFormat_isParseBigDecimal(t_DecimalFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isParseBigDecimal());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DecimalFormat_setCurrency(t_DecimalFormat *self, PyObject *args)
    {
      ::java::util::Currency a0((jobject) NULL);

      if (!parseArgs(args, "k", ::java::util::Currency::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCurrency(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setCurrency", args, 2);
    }

    static PyObject *t_DecimalFormat_setDecimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setDecimalSeparatorAlwaysShown(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDecimalSeparatorAlwaysShown", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setGroupingSize(t_DecimalFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setGroupingSize(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setGroupingSize", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setMaximumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMaximumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMaximumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMinimumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMinimumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMinimumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMultiplier(t_DecimalFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMultiplier(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMultiplier", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setNegativePrefix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setNegativePrefix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNegativePrefix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setNegativeSuffix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setNegativeSuffix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNegativeSuffix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setParseBigDecimal(t_DecimalFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setParseBigDecimal(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setParseBigDecimal", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setPositivePrefix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setPositivePrefix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPositivePrefix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setPositiveSuffix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setPositiveSuffix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPositiveSuffix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_toLocalizedPattern(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toLocalizedPattern());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_toPattern(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toPattern());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_get__currency(t_DecimalFormat *self, void *data)
    {
      ::java::util::Currency value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(value);
    }
    static int t_DecimalFormat_set__currency(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Currency value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &value))
        {
          INT_CALL(self->object.setCurrency(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "currency", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__decimalSeparatorAlwaysShown(t_DecimalFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isDecimalSeparatorAlwaysShown());
      Py_RETURN_BOOL(value);
    }
    static int t_DecimalFormat_set__decimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setDecimalSeparatorAlwaysShown(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "decimalSeparatorAlwaysShown", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__groupingSize(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getGroupingSize());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__groupingSize(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setGroupingSize(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "groupingSize", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__maximumFractionDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__maximumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__maximumIntegerDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__maximumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__minimumFractionDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__minimumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__minimumIntegerDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__minimumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__multiplier(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMultiplier());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__multiplier(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMultiplier(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "multiplier", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__negativePrefix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getNegativePrefix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__negativePrefix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setNegativePrefix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "negativePrefix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__negativeSuffix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getNegativeSuffix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__negativeSuffix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setNegativeSuffix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "negativeSuffix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__parseBigDecimal(t_DecimalFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isParseBigDecimal());
      Py_RETURN_BOOL(value);
    }
    static int t_DecimalFormat_set__parseBigDecimal(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setParseBigDecimal(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "parseBigDecimal", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__positivePrefix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getPositivePrefix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__positivePrefix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setPositivePrefix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "positivePrefix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__positiveSuffix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getPositiveSuffix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__positiveSuffix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setPositiveSuffix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "positiveSuffix", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/in/IndicTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {

          ::java::lang::Class *IndicTokenizer::class$ = NULL;
          jmethodID *IndicTokenizer::mids$ = NULL;
          bool IndicTokenizer::live$ = false;

          jclass IndicTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/in/IndicTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndicTokenizer::IndicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          IndicTokenizer::IndicTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace in {
          static PyObject *t_IndicTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndicTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndicTokenizer_init_(t_IndicTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_IndicTokenizer__methods_[] = {
            DECLARE_METHOD(t_IndicTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndicTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndicTokenizer, t_IndicTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, IndicTokenizer, t_IndicTokenizer_init_, 0, 0, 0, 0, 0);

          void t_IndicTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(IndicTokenizer), module, "IndicTokenizer", 0);
          }

          void t_IndicTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndicTokenizer).tp_dict, "class_", make_descriptor(IndicTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndicTokenizer).tp_dict, "wrapfn_", make_descriptor(t_IndicTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndicTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndicTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndicTokenizer::initializeClass, 1)))
              return NULL;
            return t_IndicTokenizer::wrap_Object(IndicTokenizer(((t_IndicTokenizer *) arg)->object.this$));
          }
          static PyObject *t_IndicTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndicTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndicTokenizer_init_(t_IndicTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                IndicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = IndicTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                IndicTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = IndicTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniNormalizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniNormalizer::class$ = NULL;
          jmethodID *SoraniNormalizer::mids$ = NULL;
          bool SoraniNormalizer::live$ = false;

          jclass SoraniNormalizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniNormalizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normalize_ec6430eb] = env->getMethodID(cls, "normalize", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniNormalizer::SoraniNormalizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SoraniNormalizer::normalize(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_normalize_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniNormalizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniNormalizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniNormalizer_init_(t_SoraniNormalizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniNormalizer_normalize(t_SoraniNormalizer *self, PyObject *args);

          static PyMethodDef t_SoraniNormalizer__methods_[] = {
            DECLARE_METHOD(t_SoraniNormalizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniNormalizer, normalize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniNormalizer, t_SoraniNormalizer, ::java::lang::Object, SoraniNormalizer, t_SoraniNormalizer_init_, 0, 0, 0, 0, 0);

          void t_SoraniNormalizer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniNormalizer), module, "SoraniNormalizer", 0);
          }

          void t_SoraniNormalizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniNormalizer).tp_dict, "class_", make_descriptor(SoraniNormalizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizer).tp_dict, "wrapfn_", make_descriptor(t_SoraniNormalizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniNormalizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniNormalizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniNormalizer::initializeClass, 1)))
              return NULL;
            return t_SoraniNormalizer::wrap_Object(SoraniNormalizer(((t_SoraniNormalizer *) arg)->object.this$));
          }
          static PyObject *t_SoraniNormalizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniNormalizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniNormalizer_init_(t_SoraniNormalizer *self, PyObject *args, PyObject *kwds)
          {
            SoraniNormalizer object((jobject) NULL);

            INT_CALL(object = SoraniNormalizer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SoraniNormalizer_normalize(t_SoraniNormalizer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.normalize(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "normalize", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNotQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNotQuery::class$ = NULL;
          jmethodID *SpanNotQuery::mids$ = NULL;
          bool SpanNotQuery::live$ = false;

          jclass SpanNotQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNotQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c77562f2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;)V");
              mids$[mid_init$_2606b720] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;I)V");
              mids$[mid_init$_0c3ef6ba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/spans/SpanQuery;Lorg/apache/lucene/search/spans/SpanQuery;II)V");
              mids$[mid_clone_4b6f9500] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanNotQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getExclude_d3aa0332] = env->getMethodID(cls, "getExclude", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getInclude_d3aa0332] = env->getMethodID(cls, "getInclude", "()Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_c77562f2, a0.this$, a1.this$)) {}

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1, jint a2) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_2606b720, a0.this$, a1.this$, a2)) {}

          SpanNotQuery::SpanNotQuery(const ::org::apache::lucene::search::spans::SpanQuery & a0, const ::org::apache::lucene::search::spans::SpanQuery & a1, jint a2, jint a3) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_0c3ef6ba, a0.this$, a1.this$, a2, a3)) {}

          SpanNotQuery SpanNotQuery::clone() const
          {
            return SpanNotQuery(env->callObjectMethod(this$, mids$[mid_clone_4b6f9500]));
          }

          jboolean SpanNotQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanNotQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanNotQuery::getExclude() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getExclude_d3aa0332]));
          }

          ::java::lang::String SpanNotQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          ::org::apache::lucene::search::spans::SpanQuery SpanNotQuery::getInclude() const
          {
            return ::org::apache::lucene::search::spans::SpanQuery(env->callObjectMethod(this$, mids$[mid_getInclude_d3aa0332]));
          }

          ::org::apache::lucene::search::spans::Spans SpanNotQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint SpanNotQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::org::apache::lucene::search::Query SpanNotQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String SpanNotQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNotQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNotQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNotQuery_init_(t_SpanNotQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNotQuery_clone(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_equals(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_extractTerms(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_getExclude(t_SpanNotQuery *self);
          static PyObject *t_SpanNotQuery_getField(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_getInclude(t_SpanNotQuery *self);
          static PyObject *t_SpanNotQuery_getSpans(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_hashCode(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_rewrite(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_toString(t_SpanNotQuery *self, PyObject *args);
          static PyObject *t_SpanNotQuery_get__exclude(t_SpanNotQuery *self, void *data);
          static PyObject *t_SpanNotQuery_get__field(t_SpanNotQuery *self, void *data);
          static PyObject *t_SpanNotQuery_get__include(t_SpanNotQuery *self, void *data);
          static PyGetSetDef t_SpanNotQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanNotQuery, exclude),
            DECLARE_GET_FIELD(t_SpanNotQuery, field),
            DECLARE_GET_FIELD(t_SpanNotQuery, include),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanNotQuery__methods_[] = {
            DECLARE_METHOD(t_SpanNotQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNotQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNotQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, getExclude, METH_NOARGS),
            DECLARE_METHOD(t_SpanNotQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, getInclude, METH_NOARGS),
            DECLARE_METHOD(t_SpanNotQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanNotQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanNotQuery, t_SpanNotQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanNotQuery, t_SpanNotQuery_init_, 0, 0, t_SpanNotQuery__fields_, 0, 0);

          void t_SpanNotQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNotQuery), module, "SpanNotQuery", 0);
          }

          void t_SpanNotQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanNotQuery).tp_dict, "class_", make_descriptor(SpanNotQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanNotQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanNotQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanNotQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNotQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNotQuery::initializeClass, 1)))
              return NULL;
            return t_SpanNotQuery::wrap_Object(SpanNotQuery(((t_SpanNotQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanNotQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNotQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNotQuery_init_(t_SpanNotQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                jint a2;
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::search::spans::SpanQuery a0((jobject) NULL);
                ::org::apache::lucene::search::spans::SpanQuery a1((jobject) NULL);
                jint a2;
                jint a3;
                SpanNotQuery object((jobject) NULL);

                if (!parseArgs(args, "kkII", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SpanNotQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNotQuery_clone(t_SpanNotQuery *self, PyObject *args)
          {
            SpanNotQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanNotQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanNotQuery_equals(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanNotQuery_extractTerms(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanNotQuery_getExclude(t_SpanNotQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getExclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanNotQuery_getField(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanNotQuery_getInclude(t_SpanNotQuery *self)
          {
            ::org::apache::lucene::search::spans::SpanQuery result((jobject) NULL);
            OBJ_CALL(result = self->object.getInclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(result);
          }

          static PyObject *t_SpanNotQuery_getSpans(t_SpanNotQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanNotQuery_hashCode(t_SpanNotQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanNotQuery_rewrite(t_SpanNotQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanNotQuery_toString(t_SpanNotQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNotQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanNotQuery_get__exclude(t_SpanNotQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getExclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }

          static PyObject *t_SpanNotQuery_get__field(t_SpanNotQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanNotQuery_get__include(t_SpanNotQuery *self, void *data)
          {
            ::org::apache::lucene::search::spans::SpanQuery value((jobject) NULL);
            OBJ_CALL(value = self->object.getInclude());
            return ::org::apache::lucene::search::spans::t_SpanQuery::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/Transition.h"
#include "java/lang/Class.h"
#include "java/util/Comparator.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/automaton/State.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *Transition::class$ = NULL;
          jmethodID *Transition::mids$ = NULL;
          bool Transition::live$ = false;
          ::java::util::Comparator *Transition::CompareByDestThenMinMax = NULL;
          ::java::util::Comparator *Transition::CompareByMinMaxThenDest = NULL;

          jclass Transition::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/Transition");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8b58b7f9] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_init$_630ffcbb] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/util/automaton/State;)V");
              mids$[mid_clone_09f0be81] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/automaton/Transition;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getDest_0b46b0b2] = env->getMethodID(cls, "getDest", "()Lorg/apache/lucene/util/automaton/State;");
              mids$[mid_getMax_54c6a179] = env->getMethodID(cls, "getMax", "()I");
              mids$[mid_getMin_54c6a179] = env->getMethodID(cls, "getMin", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              CompareByDestThenMinMax = new ::java::util::Comparator(env->getStaticObjectField(cls, "CompareByDestThenMinMax", "Ljava/util/Comparator;"));
              CompareByMinMaxThenDest = new ::java::util::Comparator(env->getStaticObjectField(cls, "CompareByMinMaxThenDest", "Ljava/util/Comparator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Transition::Transition(jint a0, const ::org::apache::lucene::util::automaton::State & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_8b58b7f9, a0, a1.this$)) {}

          Transition::Transition(jint a0, jint a1, const ::org::apache::lucene::util::automaton::State & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_630ffcbb, a0, a1, a2.this$)) {}

          Transition Transition::clone() const
          {
            return Transition(env->callObjectMethod(this$, mids$[mid_clone_09f0be81]));
          }

          jboolean Transition::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          ::org::apache::lucene::util::automaton::State Transition::getDest() const
          {
            return ::org::apache::lucene::util::automaton::State(env->callObjectMethod(this$, mids$[mid_getDest_0b46b0b2]));
          }

          jint Transition::getMax() const
          {
            return env->callIntMethod(this$, mids$[mid_getMax_54c6a179]);
          }

          jint Transition::getMin() const
          {
            return env->callIntMethod(this$, mids$[mid_getMin_54c6a179]);
          }

          jint Transition::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String Transition::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_Transition_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Transition_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Transition_init_(t_Transition *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Transition_clone(t_Transition *self);
          static PyObject *t_Transition_equals(t_Transition *self, PyObject *args);
          static PyObject *t_Transition_getDest(t_Transition *self);
          static PyObject *t_Transition_getMax(t_Transition *self);
          static PyObject *t_Transition_getMin(t_Transition *self);
          static PyObject *t_Transition_hashCode(t_Transition *self, PyObject *args);
          static PyObject *t_Transition_toString(t_Transition *self, PyObject *args);
          static PyObject *t_Transition_get__dest(t_Transition *self, void *data);
          static PyObject *t_Transition_get__max(t_Transition *self, void *data);
          static PyObject *t_Transition_get__min(t_Transition *self, void *data);
          static PyGetSetDef t_Transition__fields_[] = {
            DECLARE_GET_FIELD(t_Transition, dest),
            DECLARE_GET_FIELD(t_Transition, max),
            DECLARE_GET_FIELD(t_Transition, min),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Transition__methods_[] = {
            DECLARE_METHOD(t_Transition, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Transition, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Transition, clone, METH_NOARGS),
            DECLARE_METHOD(t_Transition, equals, METH_VARARGS),
            DECLARE_METHOD(t_Transition, getDest, METH_NOARGS),
            DECLARE_METHOD(t_Transition, getMax, METH_NOARGS),
            DECLARE_METHOD(t_Transition, getMin, METH_NOARGS),
            DECLARE_METHOD(t_Transition, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Transition, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Transition, t_Transition, ::java::lang::Object, Transition, t_Transition_init_, 0, 0, t_Transition__fields_, 0, 0);

          void t_Transition::install(PyObject *module)
          {
            installType(&PY_TYPE(Transition), module, "Transition", 0);
          }

          void t_Transition::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "class_", make_descriptor(Transition::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "wrapfn_", make_descriptor(t_Transition::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Transition::initializeClass);
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "CompareByDestThenMinMax", make_descriptor(::java::util::t_Comparator::wrap_Object(*Transition::CompareByDestThenMinMax)));
            PyDict_SetItemString(PY_TYPE(Transition).tp_dict, "CompareByMinMaxThenDest", make_descriptor(::java::util::t_Comparator::wrap_Object(*Transition::CompareByMinMaxThenDest)));
          }

          static PyObject *t_Transition_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Transition::initializeClass, 1)))
              return NULL;
            return t_Transition::wrap_Object(Transition(((t_Transition *) arg)->object.this$));
          }
          static PyObject *t_Transition_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Transition::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Transition_init_(t_Transition *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                jint a0;
                ::org::apache::lucene::util::automaton::State a1((jobject) NULL);
                Transition object((jobject) NULL);

                if (!parseArgs(args, "Ik", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Transition(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                jint a0;
                jint a1;
                ::org::apache::lucene::util::automaton::State a2((jobject) NULL);
                Transition object((jobject) NULL);

                if (!parseArgs(args, "IIk", ::org::apache::lucene::util::automaton::State::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Transition(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Transition_clone(t_Transition *self)
          {
            Transition result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_Transition::wrap_Object(result);
          }

          static PyObject *t_Transition_equals(t_Transition *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Transition), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_Transition_getDest(t_Transition *self)
          {
            ::org::apache::lucene::util::automaton::State result((jobject) NULL);
            OBJ_CALL(result = self->object.getDest());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(result);
          }

          static PyObject *t_Transition_getMax(t_Transition *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMax());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Transition_getMin(t_Transition *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMin());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Transition_hashCode(t_Transition *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Transition), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_Transition_toString(t_Transition *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Transition), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Transition_get__dest(t_Transition *self, void *data)
          {
            ::org::apache::lucene::util::automaton::State value((jobject) NULL);
            OBJ_CALL(value = self->object.getDest());
            return ::org::apache::lucene::util::automaton::t_State::wrap_Object(value);
          }

          static PyObject *t_Transition_get__max(t_Transition *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMax());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_Transition_get__min(t_Transition *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMin());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonLock.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonLock::class$ = NULL;
        jmethodID *PythonLock::mids$ = NULL;
        bool PythonLock::live$ = false;

        jclass PythonLock::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonLock");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_isLocked_54c6a16a] = env->getMethodID(cls, "isLocked", "()Z");
            mids$[mid_obtain_54c6a16a] = env->getMethodID(cls, "obtain", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_release_54c6a166] = env->getMethodID(cls, "release", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonLock::PythonLock() : ::org::apache::lucene::store::Lock(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonLock::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonLock::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonLock::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonLock_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonLock_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonLock_init_(t_PythonLock *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonLock_finalize(t_PythonLock *self);
        static PyObject *t_PythonLock_pythonExtension(t_PythonLock *self, PyObject *args);
        static void JNICALL t_PythonLock_close0(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonLock_isLocked1(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonLock_obtain2(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonLock_pythonDecRef3(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonLock_release4(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonLock_get__self(t_PythonLock *self, void *data);
        static PyGetSetDef t_PythonLock__fields_[] = {
          DECLARE_GET_FIELD(t_PythonLock, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonLock__methods_[] = {
          DECLARE_METHOD(t_PythonLock, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLock, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLock, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonLock, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonLock, t_PythonLock, ::org::apache::lucene::store::Lock, PythonLock, t_PythonLock_init_, 0, 0, t_PythonLock__fields_, 0, 0);

        void t_PythonLock::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonLock), module, "PythonLock", 1);
        }

        void t_PythonLock::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonLock).tp_dict, "class_", make_descriptor(PythonLock::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonLock).tp_dict, "wrapfn_", make_descriptor(t_PythonLock::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonLock).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonLock::initializeClass);
          JNINativeMethod methods[] = {
            { "close", "()V", (void *) t_PythonLock_close0 },
            { "isLocked", "()Z", (void *) t_PythonLock_isLocked1 },
            { "obtain", "()Z", (void *) t_PythonLock_obtain2 },
            { "pythonDecRef", "()V", (void *) t_PythonLock_pythonDecRef3 },
            { "release", "()V", (void *) t_PythonLock_release4 },
          };
          env->registerNatives(cls, methods, 5);
        }

        static PyObject *t_PythonLock_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonLock::initializeClass, 1)))
            return NULL;
          return t_PythonLock::wrap_Object(PythonLock(((t_PythonLock *) arg)->object.this$));
        }
        static PyObject *t_PythonLock_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonLock::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonLock_init_(t_PythonLock *self, PyObject *args, PyObject *kwds)
        {
          PythonLock object((jobject) NULL);

          INT_CALL(object = PythonLock());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonLock_finalize(t_PythonLock *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonLock_pythonExtension(t_PythonLock *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonLock_close0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "close", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonLock_isLocked1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isLocked", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isLocked", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonLock_obtain2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "obtain", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("obtain", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonLock_pythonDecRef3(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static void JNICALL t_PythonLock_release4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLock::mids$[PythonLock::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "release", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static PyObject *t_PythonLock_get__self(t_PythonLock *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cn/ChineseTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {

          ::java::lang::Class *ChineseTokenizer::class$ = NULL;
          jmethodID *ChineseTokenizer::mids$ = NULL;
          bool ChineseTokenizer::live$ = false;

          jclass ChineseTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cn/ChineseTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_5877b8f0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ChineseTokenizer::ChineseTokenizer(const ::java::io::Reader & a0) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          ChineseTokenizer::ChineseTokenizer(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::Tokenizer(env->newObject(initializeClass, &mids$, mid_init$_5877b8f0, a0.this$, a1.this$)) {}

          void ChineseTokenizer::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean ChineseTokenizer::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ChineseTokenizer::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cn {
          static PyObject *t_ChineseTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ChineseTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ChineseTokenizer_init_(t_ChineseTokenizer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ChineseTokenizer_end(t_ChineseTokenizer *self, PyObject *args);
          static PyObject *t_ChineseTokenizer_incrementToken(t_ChineseTokenizer *self, PyObject *args);
          static PyObject *t_ChineseTokenizer_reset(t_ChineseTokenizer *self, PyObject *args);

          static PyMethodDef t_ChineseTokenizer__methods_[] = {
            DECLARE_METHOD(t_ChineseTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ChineseTokenizer, end, METH_VARARGS),
            DECLARE_METHOD(t_ChineseTokenizer, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ChineseTokenizer, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ChineseTokenizer, t_ChineseTokenizer, ::org::apache::lucene::analysis::Tokenizer, ChineseTokenizer, t_ChineseTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ChineseTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ChineseTokenizer), module, "ChineseTokenizer", 0);
          }

          void t_ChineseTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ChineseTokenizer).tp_dict, "class_", make_descriptor(ChineseTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ChineseTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ChineseTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ChineseTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ChineseTokenizer::initializeClass, 1)))
              return NULL;
            return t_ChineseTokenizer::wrap_Object(ChineseTokenizer(((t_ChineseTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ChineseTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ChineseTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ChineseTokenizer_init_(t_ChineseTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                ChineseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = ChineseTokenizer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
                ::java::io::Reader a1((jobject) NULL);
                ChineseTokenizer object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ChineseTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ChineseTokenizer_end(t_ChineseTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ChineseTokenizer), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ChineseTokenizer_incrementToken(t_ChineseTokenizer *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ChineseTokenizer), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ChineseTokenizer_reset(t_ChineseTokenizer *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ChineseTokenizer), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicLetterTokenizer.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicLetterTokenizer::class$ = NULL;
          jmethodID *ArabicLetterTokenizer::mids$ = NULL;
          bool ArabicLetterTokenizer::live$ = false;

          jclass ArabicLetterTokenizer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicLetterTokenizer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
              mids$[mid_init$_be7a3ecf] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)V");
              mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicLetterTokenizer::ArabicLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

          ArabicLetterTokenizer::ArabicLetterTokenizer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::util::AttributeFactory & a1, const ::java::io::Reader & a2) : ::org::apache::lucene::analysis::core::LetterTokenizer(env->newObject(initializeClass, &mids$, mid_init$_be7a3ecf, a0.this$, a1.this$, a2.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicLetterTokenizer_init_(t_ArabicLetterTokenizer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_ArabicLetterTokenizer__methods_[] = {
            DECLARE_METHOD(t_ArabicLetterTokenizer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicLetterTokenizer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicLetterTokenizer, t_ArabicLetterTokenizer, ::org::apache::lucene::analysis::core::LetterTokenizer, ArabicLetterTokenizer, t_ArabicLetterTokenizer_init_, 0, 0, 0, 0, 0);

          void t_ArabicLetterTokenizer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicLetterTokenizer), module, "ArabicLetterTokenizer", 0);
          }

          void t_ArabicLetterTokenizer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizer).tp_dict, "class_", make_descriptor(ArabicLetterTokenizer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizer).tp_dict, "wrapfn_", make_descriptor(t_ArabicLetterTokenizer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicLetterTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicLetterTokenizer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicLetterTokenizer::initializeClass, 1)))
              return NULL;
            return t_ArabicLetterTokenizer::wrap_Object(ArabicLetterTokenizer(((t_ArabicLetterTokenizer *) arg)->object.this$));
          }
          static PyObject *t_ArabicLetterTokenizer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicLetterTokenizer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicLetterTokenizer_init_(t_ArabicLetterTokenizer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::io::Reader a1((jobject) NULL);
                ArabicLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = ArabicLetterTokenizer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::util::AttributeFactory a1((jobject) NULL);
                ::java::io::Reader a2((jobject) NULL);
                ArabicLetterTokenizer object((jobject) NULL);

                if (!parseArgs(args, "Kkk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = ArabicLetterTokenizer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/BooleanQueryNodeBuilder.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *BooleanQueryNodeBuilder::class$ = NULL;
              jmethodID *BooleanQueryNodeBuilder::mids$ = NULL;
              bool BooleanQueryNodeBuilder::live$ = false;

              jclass BooleanQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/BooleanQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanQueryNodeBuilder::BooleanQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery BooleanQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_BooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanQueryNodeBuilder_init_(t_BooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BooleanQueryNodeBuilder_build(t_BooleanQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_BooleanQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanQueryNodeBuilder, t_BooleanQueryNodeBuilder, ::java::lang::Object, BooleanQueryNodeBuilder, t_BooleanQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_BooleanQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanQueryNodeBuilder), module, "BooleanQueryNodeBuilder", 0);
              }

              void t_BooleanQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanQueryNodeBuilder).tp_dict, "class_", make_descriptor(BooleanQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_BooleanQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_BooleanQueryNodeBuilder::wrap_Object(BooleanQueryNodeBuilder(((t_BooleanQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_BooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanQueryNodeBuilder_init_(t_BooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                BooleanQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = BooleanQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_BooleanQueryNodeBuilder_build(t_BooleanQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/RomanianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *RomanianStemmer::class$ = NULL;
        jmethodID *RomanianStemmer::mids$ = NULL;
        bool RomanianStemmer::live$ = false;

        jclass RomanianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/RomanianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RomanianStemmer::RomanianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean RomanianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint RomanianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean RomanianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_RomanianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RomanianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RomanianStemmer_init_(t_RomanianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RomanianStemmer_equals(t_RomanianStemmer *self, PyObject *args);
        static PyObject *t_RomanianStemmer_hashCode(t_RomanianStemmer *self, PyObject *args);
        static PyObject *t_RomanianStemmer_stem(t_RomanianStemmer *self, PyObject *args);

        static PyMethodDef t_RomanianStemmer__methods_[] = {
          DECLARE_METHOD(t_RomanianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RomanianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RomanianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_RomanianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_RomanianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RomanianStemmer, t_RomanianStemmer, ::org::tartarus::snowball::SnowballProgram, RomanianStemmer, t_RomanianStemmer_init_, 0, 0, 0, 0, 0);

        void t_RomanianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(RomanianStemmer), module, "RomanianStemmer", 0);
        }

        void t_RomanianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RomanianStemmer).tp_dict, "class_", make_descriptor(RomanianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RomanianStemmer).tp_dict, "wrapfn_", make_descriptor(t_RomanianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RomanianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RomanianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RomanianStemmer::initializeClass, 1)))
            return NULL;
          return t_RomanianStemmer::wrap_Object(RomanianStemmer(((t_RomanianStemmer *) arg)->object.this$));
        }
        static PyObject *t_RomanianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RomanianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RomanianStemmer_init_(t_RomanianStemmer *self, PyObject *args, PyObject *kwds)
        {
          RomanianStemmer object((jobject) NULL);

          INT_CALL(object = RomanianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_RomanianStemmer_equals(t_RomanianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RomanianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_RomanianStemmer_hashCode(t_RomanianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(RomanianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_RomanianStemmer_stem(t_RomanianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(RomanianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$Writer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$Writer::class$ = NULL;
          jmethodID *PackedInts$Writer::mids$ = NULL;
          bool PackedInts$Writer::live$ = false;

          jclass PackedInts$Writer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$Writer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_add_0ee6df2f] = env->getMethodID(cls, "add", "(J)V");
              mids$[mid_bitsPerValue_54c6a179] = env->getMethodID(cls, "bitsPerValue", "()I");
              mids$[mid_finish_54c6a166] = env->getMethodID(cls, "finish", "()V");
              mids$[mid_ord_54c6a179] = env->getMethodID(cls, "ord", "()I");
              mids$[mid_getFormat_2580793f] = env->getMethodID(cls, "getFormat", "()Lorg/apache/lucene/util/packed/PackedInts$Format;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void PackedInts$Writer::add(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_0ee6df2f], a0);
          }

          jint PackedInts$Writer::bitsPerValue() const
          {
            return env->callIntMethod(this$, mids$[mid_bitsPerValue_54c6a179]);
          }

          void PackedInts$Writer::finish() const
          {
            env->callVoidMethod(this$, mids$[mid_finish_54c6a166]);
          }

          jint PackedInts$Writer::ord() const
          {
            return env->callIntMethod(this$, mids$[mid_ord_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$Writer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Writer_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$Writer_add(t_PackedInts$Writer *self, PyObject *arg);
          static PyObject *t_PackedInts$Writer_bitsPerValue(t_PackedInts$Writer *self);
          static PyObject *t_PackedInts$Writer_finish(t_PackedInts$Writer *self);
          static PyObject *t_PackedInts$Writer_ord(t_PackedInts$Writer *self);

          static PyMethodDef t_PackedInts$Writer__methods_[] = {
            DECLARE_METHOD(t_PackedInts$Writer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Writer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$Writer, add, METH_O),
            DECLARE_METHOD(t_PackedInts$Writer, bitsPerValue, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Writer, finish, METH_NOARGS),
            DECLARE_METHOD(t_PackedInts$Writer, ord, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$Writer, t_PackedInts$Writer, ::java::lang::Object, PackedInts$Writer, abstract_init, 0, 0, 0, 0, 0);

          void t_PackedInts$Writer::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$Writer), module, "PackedInts$Writer", 0);
          }

          void t_PackedInts$Writer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$Writer).tp_dict, "class_", make_descriptor(PackedInts$Writer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$Writer).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$Writer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$Writer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$Writer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$Writer::initializeClass, 1)))
              return NULL;
            return t_PackedInts$Writer::wrap_Object(PackedInts$Writer(((t_PackedInts$Writer *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$Writer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$Writer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_PackedInts$Writer_add(t_PackedInts$Writer *self, PyObject *arg)
          {
            jlong a0;

            if (!parseArg(arg, "J", &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_PackedInts$Writer_bitsPerValue(t_PackedInts$Writer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.bitsPerValue());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedInts$Writer_finish(t_PackedInts$Writer *self)
          {
            OBJ_CALL(self->object.finish());
            Py_RETURN_NONE;
          }

          static PyObject *t_PackedInts$Writer_ord(t_PackedInts$Writer *self)
          {
            jint result;
            OBJ_CALL(result = self->object.ord());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SortedDocValues::class$ = NULL;
        jmethodID *SortedDocValues::mids$ = NULL;
        bool SortedDocValues::live$ = false;

        jclass SortedDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SortedDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_b57e9c3f] = env->getMethodID(cls, "get", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getOrd_39c7bd23] = env->getMethodID(cls, "getOrd", "(I)I");
            mids$[mid_getValueCount_54c6a179] = env->getMethodID(cls, "getValueCount", "()I");
            mids$[mid_lookupOrd_b57e9c3f] = env->getMethodID(cls, "lookupOrd", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_lookupTerm_7bc03ddb] = env->getMethodID(cls, "lookupTerm", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_termsEnum_ea7afd9f] = env->getMethodID(cls, "termsEnum", "()Lorg/apache/lucene/index/TermsEnum;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::BytesRef SortedDocValues::get(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_get_b57e9c3f], a0));
        }

        jint SortedDocValues::getOrd(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getOrd_39c7bd23], a0);
        }

        jint SortedDocValues::getValueCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getValueCount_54c6a179]);
        }

        ::org::apache::lucene::util::BytesRef SortedDocValues::lookupOrd(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_lookupOrd_b57e9c3f], a0));
        }

        jint SortedDocValues::lookupTerm(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_lookupTerm_7bc03ddb], a0.this$);
        }

        ::org::apache::lucene::index::TermsEnum SortedDocValues::termsEnum() const
        {
          return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_termsEnum_ea7afd9f]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SortedDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedDocValues_get(t_SortedDocValues *self, PyObject *args);
        static PyObject *t_SortedDocValues_getOrd(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_getValueCount(t_SortedDocValues *self);
        static PyObject *t_SortedDocValues_lookupOrd(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_lookupTerm(t_SortedDocValues *self, PyObject *arg);
        static PyObject *t_SortedDocValues_termsEnum(t_SortedDocValues *self);
        static PyObject *t_SortedDocValues_get__valueCount(t_SortedDocValues *self, void *data);
        static PyGetSetDef t_SortedDocValues__fields_[] = {
          DECLARE_GET_FIELD(t_SortedDocValues, valueCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedDocValues__methods_[] = {
          DECLARE_METHOD(t_SortedDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedDocValues, get, METH_VARARGS),
          DECLARE_METHOD(t_SortedDocValues, getOrd, METH_O),
          DECLARE_METHOD(t_SortedDocValues, getValueCount, METH_NOARGS),
          DECLARE_METHOD(t_SortedDocValues, lookupOrd, METH_O),
          DECLARE_METHOD(t_SortedDocValues, lookupTerm, METH_O),
          DECLARE_METHOD(t_SortedDocValues, termsEnum, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedDocValues, t_SortedDocValues, ::org::apache::lucene::index::BinaryDocValues, SortedDocValues, abstract_init, 0, 0, t_SortedDocValues__fields_, 0, 0);

        void t_SortedDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedDocValues), module, "SortedDocValues", 0);
        }

        void t_SortedDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedDocValues).tp_dict, "class_", make_descriptor(SortedDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedDocValues).tp_dict, "wrapfn_", make_descriptor(t_SortedDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedDocValues::initializeClass, 1)))
            return NULL;
          return t_SortedDocValues::wrap_Object(SortedDocValues(((t_SortedDocValues *) arg)->object.this$));
        }
        static PyObject *t_SortedDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_SortedDocValues_get(t_SortedDocValues *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortedDocValues), (PyObject *) self, "get", args, 2);
        }

        static PyObject *t_SortedDocValues_getOrd(t_SortedDocValues *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getOrd(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getOrd", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_getValueCount(t_SortedDocValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getValueCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SortedDocValues_lookupOrd(t_SortedDocValues *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.lookupOrd(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupOrd", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_lookupTerm(t_SortedDocValues *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.lookupTerm(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "lookupTerm", arg);
          return NULL;
        }

        static PyObject *t_SortedDocValues_termsEnum(t_SortedDocValues *self)
        {
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);
          OBJ_CALL(result = self->object.termsEnum());
          return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
        }

        static PyObject *t_SortedDocValues_get__valueCount(t_SortedDocValues *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getValueCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/StoredField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *StoredField::class$ = NULL;
        jmethodID *StoredField::mids$ = NULL;
        bool StoredField::live$ = false;
        ::org::apache::lucene::document::FieldType *StoredField::TYPE = NULL;

        jclass StoredField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/StoredField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
            mids$[mid_init$_f0649ce1] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;F)V");
            mids$[mid_init$_4372eed5] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;J)V");
            mids$[mid_init$_493fce5f] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;D)V");
            mids$[mid_init$_97e62b21] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[B)V");
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_init$_eab5cd19] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        StoredField::StoredField(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jfloat a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_f0649ce1, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jlong a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4372eed5, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, jdouble a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_493fce5f, a0.this$, a1)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const JArray< jbyte > & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_97e62b21, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        StoredField::StoredField(const ::java::lang::String & a0, const JArray< jbyte > & a1, jint a2, jint a3) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_eab5cd19, a0.this$, a1.this$, a2, a3)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_StoredField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StoredField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StoredField_init_(t_StoredField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_StoredField__methods_[] = {
          DECLARE_METHOD(t_StoredField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_StoredField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StoredField, t_StoredField, ::org::apache::lucene::document::Field, StoredField, t_StoredField_init_, 0, 0, 0, 0, 0);

        void t_StoredField::install(PyObject *module)
        {
          installType(&PY_TYPE(StoredField), module, "StoredField", 0);
        }

        void t_StoredField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "class_", make_descriptor(StoredField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "wrapfn_", make_descriptor(t_StoredField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(StoredField::initializeClass);
          PyDict_SetItemString(PY_TYPE(StoredField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*StoredField::TYPE)));
        }

        static PyObject *t_StoredField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, StoredField::initializeClass, 1)))
            return NULL;
          return t_StoredField::wrap_Object(StoredField(((t_StoredField *) arg)->object.this$));
        }
        static PyObject *t_StoredField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, StoredField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_StoredField_init_(t_StoredField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sI", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sF", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sJ", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jdouble a1;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sD", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "s[B", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                INT_CALL(object = StoredField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< jbyte > a1((jobject) NULL);
              jint a2;
              jint a3;
              StoredField object((jobject) NULL);

              if (!parseArgs(args, "s[BII", &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = StoredField(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKBigramFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKBigramFilter::class$ = NULL;
          jmethodID *CJKBigramFilter::mids$ = NULL;
          bool CJKBigramFilter::live$ = false;
          ::java::lang::String *CJKBigramFilter::DOUBLE_TYPE = NULL;
          jint CJKBigramFilter::HAN = (jint) 0;
          jint CJKBigramFilter::HANGUL = (jint) 0;
          jint CJKBigramFilter::HIRAGANA = (jint) 0;
          jint CJKBigramFilter::KATAKANA = (jint) 0;
          ::java::lang::String *CJKBigramFilter::SINGLE_TYPE = NULL;

          jclass CJKBigramFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKBigramFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_4f7f61d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DOUBLE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DOUBLE_TYPE", "Ljava/lang/String;"));
              HAN = env->getStaticIntField(cls, "HAN");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              SINGLE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "SINGLE_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_4f7f61d3, a0.this$, a1, a2)) {}

          jboolean CJKBigramFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CJKBigramFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKBigramFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKBigramFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKBigramFilter_init_(t_CJKBigramFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKBigramFilter_incrementToken(t_CJKBigramFilter *self, PyObject *args);
          static PyObject *t_CJKBigramFilter_reset(t_CJKBigramFilter *self, PyObject *args);

          static PyMethodDef t_CJKBigramFilter__methods_[] = {
            DECLARE_METHOD(t_CJKBigramFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CJKBigramFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKBigramFilter, t_CJKBigramFilter, ::org::apache::lucene::analysis::TokenFilter, CJKBigramFilter, t_CJKBigramFilter_init_, 0, 0, 0, 0, 0);

          void t_CJKBigramFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKBigramFilter), module, "CJKBigramFilter", 0);
          }

          void t_CJKBigramFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "class_", make_descriptor(CJKBigramFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "wrapfn_", make_descriptor(t_CJKBigramFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CJKBigramFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "DOUBLE_TYPE", make_descriptor(j2p(*CJKBigramFilter::DOUBLE_TYPE)));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "HAN", make_descriptor(CJKBigramFilter::HAN));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "HANGUL", make_descriptor(CJKBigramFilter::HANGUL));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "HIRAGANA", make_descriptor(CJKBigramFilter::HIRAGANA));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "KATAKANA", make_descriptor(CJKBigramFilter::KATAKANA));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "SINGLE_TYPE", make_descriptor(j2p(*CJKBigramFilter::SINGLE_TYPE)));
          }

          static PyObject *t_CJKBigramFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKBigramFilter::initializeClass, 1)))
              return NULL;
            return t_CJKBigramFilter::wrap_Object(CJKBigramFilter(((t_CJKBigramFilter *) arg)->object.this$));
          }
          static PyObject *t_CJKBigramFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKBigramFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKBigramFilter_init_(t_CJKBigramFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = CJKBigramFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CJKBigramFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = CJKBigramFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKBigramFilter_incrementToken(t_CJKBigramFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CJKBigramFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CJKBigramFilter_reset(t_CJKBigramFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CJKBigramFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PrefixAndSuffixAwareTokenFilter::class$ = NULL;
          jmethodID *PrefixAndSuffixAwareTokenFilter::mids$ = NULL;
          bool PrefixAndSuffixAwareTokenFilter::live$ = false;

          jclass PrefixAndSuffixAwareTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_63d58924] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_updateInputToken_a810a20b] = env->getMethodID(cls, "updateInputToken", "(Lorg/apache/lucene/analysis/Token;Lorg/apache/lucene/analysis/Token;)Lorg/apache/lucene/analysis/Token;");
              mids$[mid_updateSuffixToken_a810a20b] = env->getMethodID(cls, "updateSuffixToken", "(Lorg/apache/lucene/analysis/Token;Lorg/apache/lucene/analysis/Token;)Lorg/apache/lucene/analysis/Token;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PrefixAndSuffixAwareTokenFilter::PrefixAndSuffixAwareTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::TokenStream & a2) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_63d58924, a0.this$, a1.this$, a2.this$)) {}

          void PrefixAndSuffixAwareTokenFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void PrefixAndSuffixAwareTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean PrefixAndSuffixAwareTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PrefixAndSuffixAwareTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          ::org::apache::lucene::analysis::Token PrefixAndSuffixAwareTokenFilter::updateInputToken(const ::org::apache::lucene::analysis::Token & a0, const ::org::apache::lucene::analysis::Token & a1) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_updateInputToken_a810a20b], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::Token PrefixAndSuffixAwareTokenFilter::updateSuffixToken(const ::org::apache::lucene::analysis::Token & a0, const ::org::apache::lucene::analysis::Token & a1) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_updateSuffixToken_a810a20b], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PrefixAndSuffixAwareTokenFilter_init_(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_close(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_end(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_incrementToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_reset(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateInputToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateSuffixToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);

          static PyMethodDef t_PrefixAndSuffixAwareTokenFilter__methods_[] = {
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, updateInputToken, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, updateSuffixToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PrefixAndSuffixAwareTokenFilter, t_PrefixAndSuffixAwareTokenFilter, ::org::apache::lucene::analysis::TokenStream, PrefixAndSuffixAwareTokenFilter, t_PrefixAndSuffixAwareTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_PrefixAndSuffixAwareTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), module, "PrefixAndSuffixAwareTokenFilter", 0);
          }

          void t_PrefixAndSuffixAwareTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PrefixAndSuffixAwareTokenFilter).tp_dict, "class_", make_descriptor(PrefixAndSuffixAwareTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PrefixAndSuffixAwareTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PrefixAndSuffixAwareTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PrefixAndSuffixAwareTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PrefixAndSuffixAwareTokenFilter::initializeClass, 1)))
              return NULL;
            return t_PrefixAndSuffixAwareTokenFilter::wrap_Object(PrefixAndSuffixAwareTokenFilter(((t_PrefixAndSuffixAwareTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PrefixAndSuffixAwareTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PrefixAndSuffixAwareTokenFilter_init_(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
            PrefixAndSuffixAwareTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PrefixAndSuffixAwareTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_close(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_end(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_incrementToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_reset(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateInputToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            ::org::apache::lucene::analysis::Token a1((jobject) NULL);
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Token::initializeClass, ::org::apache::lucene::analysis::Token::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.updateInputToken(a0, a1));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "updateInputToken", args);
            return NULL;
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateSuffixToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            ::org::apache::lucene::analysis::Token a1((jobject) NULL);
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Token::initializeClass, ::org::apache::lucene::analysis::Token::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.updateSuffixToken(a0, a1));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "updateSuffixToken", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttributeImpl.h"
#include "java/util/List.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttribute.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::class$ = NULL;
        jmethodID *FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::mids$ = NULL;
        bool FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::live$ = false;

        jclass FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FuzzyTermsEnum$LevenshteinAutomataAttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_automata_87851566] = env->getMethodID(cls, "automata", "()Ljava/util/List;");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::FuzzyTermsEnum$LevenshteinAutomataAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::util::List FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::automata() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_automata_87851566]));
        }

        void FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        void FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        jboolean FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_init_(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_clear(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_copyTo(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_equals(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_hashCode(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args);

        static PyMethodDef t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl__methods_[] = {
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, automata, METH_NOARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, clear, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, copyTo, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, equals, METH_VARARGS),
          DECLARE_METHOD(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, hashCode, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, ::org::apache::lucene::util::AttributeImpl, FuzzyTermsEnum$LevenshteinAutomataAttributeImpl, t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_init_, 0, 0, 0, 0, 0);

        void t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), module, "FuzzyTermsEnum$LevenshteinAutomataAttributeImpl", 0);
        }

        void t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl).tp_dict, "class_", make_descriptor(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass, 1)))
            return NULL;
          return t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::wrap_Object(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl(((t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FuzzyTermsEnum$LevenshteinAutomataAttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_init_(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          FuzzyTermsEnum$LevenshteinAutomataAttributeImpl object((jobject) NULL);

          INT_CALL(object = FuzzyTermsEnum$LevenshteinAutomataAttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_automata(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.automata());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::util::automaton::PY_TYPE(CompiledAutomaton));
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_clear(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_copyTo(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {
          ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "copyTo", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_equals(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl_hashCode(t_FuzzyTermsEnum$LevenshteinAutomataAttributeImpl *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FuzzyTermsEnum$LevenshteinAutomataAttributeImpl), (PyObject *) self, "hashCode", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/NameHashIntCacheLRU.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *NameHashIntCacheLRU::class$ = NULL;
            jmethodID *NameHashIntCacheLRU::mids$ = NULL;
            bool NameHashIntCacheLRU::live$ = false;

            jclass NameHashIntCacheLRU::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/NameHashIntCacheLRU");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_NameHashIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameHashIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_NameHashIntCacheLRU__methods_[] = {
              DECLARE_METHOD(t_NameHashIntCacheLRU, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameHashIntCacheLRU, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NameHashIntCacheLRU, t_NameHashIntCacheLRU, ::org::apache::lucene::facet::taxonomy::writercache::NameIntCacheLRU, NameHashIntCacheLRU, abstract_init, 0, 0, 0, 0, 0);

            void t_NameHashIntCacheLRU::install(PyObject *module)
            {
              installType(&PY_TYPE(NameHashIntCacheLRU), module, "NameHashIntCacheLRU", 0);
            }

            void t_NameHashIntCacheLRU::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NameHashIntCacheLRU).tp_dict, "class_", make_descriptor(NameHashIntCacheLRU::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NameHashIntCacheLRU).tp_dict, "wrapfn_", make_descriptor(t_NameHashIntCacheLRU::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NameHashIntCacheLRU).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NameHashIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NameHashIntCacheLRU::initializeClass, 1)))
                return NULL;
              return t_NameHashIntCacheLRU::wrap_Object(NameHashIntCacheLRU(((t_NameHashIntCacheLRU *) arg)->object.this$));
            }
            static PyObject *t_NameHashIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NameHashIntCacheLRU::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermsEnum::class$ = NULL;
        jmethodID *TermsEnum::mids$ = NULL;
        bool TermsEnum::live$ = false;
        TermsEnum *TermsEnum::EMPTY = NULL;

        jclass TermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_fb0743a7] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_ffc1634d] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new TermsEnum(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/index/TermsEnum;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::AttributeSource TermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint TermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum TermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_fb0743a7], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::DocsEnum TermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum TermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_ffc1634d], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum TermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        jlong TermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus TermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean TermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void TermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        void TermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef TermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::org::apache::lucene::index::TermState TermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
        }

        jlong TermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum_attributes(t_TermsEnum *self);
        static PyObject *t_TermsEnum_docFreq(t_TermsEnum *self);
        static PyObject *t_TermsEnum_docs(t_TermsEnum *self, PyObject *args);
        static PyObject *t_TermsEnum_docsAndPositions(t_TermsEnum *self, PyObject *args);
        static PyObject *t_TermsEnum_ord(t_TermsEnum *self);
        static PyObject *t_TermsEnum_seekCeil(t_TermsEnum *self, PyObject *arg);
        static PyObject *t_TermsEnum_seekExact(t_TermsEnum *self, PyObject *args);
        static PyObject *t_TermsEnum_term(t_TermsEnum *self);
        static PyObject *t_TermsEnum_termState(t_TermsEnum *self);
        static PyObject *t_TermsEnum_totalTermFreq(t_TermsEnum *self);

        static PyMethodDef t_TermsEnum__methods_[] = {
          DECLARE_METHOD(t_TermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum, attributes, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum, ord, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, seekCeil, METH_O),
          DECLARE_METHOD(t_TermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum, term, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, termState, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, totalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsEnum, t_TermsEnum, ::java::lang::Object, TermsEnum, abstract_init, 0, 0, 0, 0, 0);

        void t_TermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsEnum), module, "TermsEnum", 0);
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "SeekStatus", make_descriptor(&PY_TYPE(TermsEnum$SeekStatus)));
        }

        void t_TermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "class_", make_descriptor(TermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "wrapfn_", make_descriptor(t_TermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TermsEnum::initializeClass);
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "EMPTY", make_descriptor(t_TermsEnum::wrap_Object(*TermsEnum::EMPTY)));
        }

        static PyObject *t_TermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsEnum::initializeClass, 1)))
            return NULL;
          return t_TermsEnum::wrap_Object(TermsEnum(((t_TermsEnum *) arg)->object.this$));
        }
        static PyObject *t_TermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermsEnum_attributes(t_TermsEnum *self)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_docFreq(t_TermsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docFreq());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TermsEnum_docs(t_TermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.docs(a0, a1));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.docs(a0, a1, a2));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "docs", args);
          return NULL;
        }

        static PyObject *t_TermsEnum_docsAndPositions(t_TermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.docsAndPositions(a0, a1));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "docsAndPositions", args);
          return NULL;
        }

        static PyObject *t_TermsEnum_ord(t_TermsEnum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ord());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermsEnum_seekCeil(t_TermsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
          return NULL;
        }

        static PyObject *t_TermsEnum_seekExact(t_TermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "seekExact", args);
          return NULL;
        }

        static PyObject *t_TermsEnum_term(t_TermsEnum *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.term());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_termState(t_TermsEnum *self)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);
          OBJ_CALL(result = self->object.termState());
          return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_totalTermFreq(t_TermsEnum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/FastCharStream.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *FastCharStream::class$ = NULL;
            jmethodID *FastCharStream::mids$ = NULL;
            bool FastCharStream::live$ = false;

            jclass FastCharStream::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/FastCharStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jchar FastCharStream::BeginToken() const
            {
              return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
            }

            void FastCharStream::Done() const
            {
              env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
            }

            ::java::lang::String FastCharStream::GetImage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
            }

            JArray< jchar > FastCharStream::GetSuffix(jint a0) const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
            }

            void FastCharStream::backup(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
            }

            jint FastCharStream::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
            }

            jint FastCharStream::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
            }

            jint FastCharStream::getColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
            }

            jint FastCharStream::getEndColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
            }

            jint FastCharStream::getEndLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
            }

            jint FastCharStream::getLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
            }

            jchar FastCharStream::readChar() const
            {
              return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
            static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
            static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
            static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
            static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
            static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
            static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
            static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
            static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
            static PyGetSetDef t_FastCharStream__fields_[] = {
              DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
              DECLARE_GET_FIELD(t_FastCharStream, beginLine),
              DECLARE_GET_FIELD(t_FastCharStream, column),
              DECLARE_GET_FIELD(t_FastCharStream, endColumn),
              DECLARE_GET_FIELD(t_FastCharStream, endLine),
              DECLARE_GET_FIELD(t_FastCharStream, line),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FastCharStream__methods_[] = {
              DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
              DECLARE_METHOD(t_FastCharStream, backup, METH_O),
              DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
              DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FastCharStream, t_FastCharStream, ::java::lang::Object, FastCharStream, t_FastCharStream_init_, 0, 0, t_FastCharStream__fields_, 0, 0);

            void t_FastCharStream::install(PyObject *module)
            {
              installType(&PY_TYPE(FastCharStream), module, "FastCharStream", 0);
            }

            void t_FastCharStream::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "class_", make_descriptor(FastCharStream::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
                return NULL;
              return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
            }
            static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FastCharStream::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              FastCharStream object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = FastCharStream(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.BeginToken());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
            {
              OBJ_CALL(self->object.Done());
              Py_RETURN_NONE;
            }

            static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.GetImage());
              return j2p(result);
            }

            static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
            {
              jint a0;
              JArray< jchar > result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.GetSuffix(a0));
                return result.wrap();
              }

              PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
              return NULL;
            }

            static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.backup(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "backup", arg);
              return NULL;
            }

            static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.readChar());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getLine());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Iterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *BlockTreeTermsReader::class$ = NULL;
          jmethodID *BlockTreeTermsReader::mids$ = NULL;
          bool BlockTreeTermsReader::live$ = false;

          jclass BlockTreeTermsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/BlockTreeTermsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_72076db5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;I)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
              mids$[mid_readHeader_0441f0ad] = env->getMethodID(cls, "readHeader", "(Lorg/apache/lucene/store/IndexInput;)I");
              mids$[mid_readIndexHeader_0441f0ad] = env->getMethodID(cls, "readIndexHeader", "(Lorg/apache/lucene/store/IndexInput;)I");
              mids$[mid_seekDir_ec9e0593] = env->getMethodID(cls, "seekDir", "(Lorg/apache/lucene/store/IndexInput;J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockTreeTermsReader::BlockTreeTermsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::FieldInfos & a1, const ::org::apache::lucene::index::SegmentInfo & a2, const ::org::apache::lucene::codecs::PostingsReaderBase & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5, jint a6) : ::org::apache::lucene::codecs::FieldsProducer(env->newObject(initializeClass, &mids$, mid_init$_72076db5, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6)) {}

          void BlockTreeTermsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          void BlockTreeTermsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          ::java::util::Iterator BlockTreeTermsReader::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
          }

          jlong BlockTreeTermsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jint BlockTreeTermsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::org::apache::lucene::index::Terms BlockTreeTermsReader::terms(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_BlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockTreeTermsReader_init_(t_BlockTreeTermsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockTreeTermsReader_checkIntegrity(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_close(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_iterator(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_ramBytesUsed(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_size(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_terms(t_BlockTreeTermsReader *self, PyObject *args);

          static PyMethodDef t_BlockTreeTermsReader__methods_[] = {
            DECLARE_METHOD(t_BlockTreeTermsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, size, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, terms, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockTreeTermsReader, t_BlockTreeTermsReader, ::org::apache::lucene::codecs::FieldsProducer, BlockTreeTermsReader, t_BlockTreeTermsReader_init_, ((PyObject *(*)(t_BlockTreeTermsReader *)) get_iterator< t_BlockTreeTermsReader >), 0, 0, 0, 0);

          void t_BlockTreeTermsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockTreeTermsReader), module, "BlockTreeTermsReader", 0);
          }

          void t_BlockTreeTermsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsReader).tp_dict, "class_", make_descriptor(BlockTreeTermsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsReader).tp_dict, "wrapfn_", make_descriptor(t_BlockTreeTermsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockTreeTermsReader::initializeClass, 1)))
              return NULL;
            return t_BlockTreeTermsReader::wrap_Object(BlockTreeTermsReader(((t_BlockTreeTermsReader *) arg)->object.this$));
          }
          static PyObject *t_BlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockTreeTermsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockTreeTermsReader_init_(t_BlockTreeTermsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            jint a6;
            BlockTreeTermsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkkksI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = BlockTreeTermsReader(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockTreeTermsReader_checkIntegrity(t_BlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_close(t_BlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_iterator(t_BlockTreeTermsReader *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_ramBytesUsed(t_BlockTreeTermsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_size(t_BlockTreeTermsReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_terms(t_BlockTreeTermsReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Terms result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.terms(a0));
              return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "terms", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {

          ::java::lang::Class *NumericPayloadTokenFilter::class$ = NULL;
          jmethodID *NumericPayloadTokenFilter::mids$ = NULL;
          bool NumericPayloadTokenFilter::live$ = false;

          jclass NumericPayloadTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/payloads/NumericPayloadTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_333172df] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;FLjava/lang/String;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NumericPayloadTokenFilter::NumericPayloadTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jfloat a1, const ::java::lang::String & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_333172df, a0.this$, a1, a2.this$)) {}

          jboolean NumericPayloadTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace payloads {
          static PyObject *t_NumericPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NumericPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NumericPayloadTokenFilter_init_(t_NumericPayloadTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NumericPayloadTokenFilter_incrementToken(t_NumericPayloadTokenFilter *self, PyObject *args);

          static PyMethodDef t_NumericPayloadTokenFilter__methods_[] = {
            DECLARE_METHOD(t_NumericPayloadTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumericPayloadTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NumericPayloadTokenFilter, t_NumericPayloadTokenFilter, ::org::apache::lucene::analysis::TokenFilter, NumericPayloadTokenFilter, t_NumericPayloadTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_NumericPayloadTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NumericPayloadTokenFilter), module, "NumericPayloadTokenFilter", 0);
          }

          void t_NumericPayloadTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilter).tp_dict, "class_", make_descriptor(NumericPayloadTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_NumericPayloadTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NumericPayloadTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NumericPayloadTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NumericPayloadTokenFilter::initializeClass, 1)))
              return NULL;
            return t_NumericPayloadTokenFilter::wrap_Object(NumericPayloadTokenFilter(((t_NumericPayloadTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_NumericPayloadTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NumericPayloadTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NumericPayloadTokenFilter_init_(t_NumericPayloadTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jfloat a1;
            ::java::lang::String a2((jobject) NULL);
            NumericPayloadTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kFs", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = NumericPayloadTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NumericPayloadTokenFilter_incrementToken(t_NumericPayloadTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NumericPayloadTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LongFieldSource.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LongFieldSource::class$ = NULL;
            jmethodID *LongFieldSource::mids$ = NULL;
            bool LongFieldSource::live$ = false;

            jclass LongFieldSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LongFieldSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_d7533242] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$LongParser;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_externalToLong_5fdc3f54] = env->getMethodID(cls, "externalToLong", "(Ljava/lang/String;)J");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_longToObject_fe727f5c] = env->getMethodID(cls, "longToObject", "(J)Ljava/lang/Object;");
                mids$[mid_longToString_3e02f30e] = env->getMethodID(cls, "longToString", "(J)Ljava/lang/String;");
                mids$[mid_newMutableValueLong_31ee279b] = env->getMethodID(cls, "newMutableValueLong", "()Lorg/apache/lucene/util/mutable/MutableValueLong;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LongFieldSource::LongFieldSource(const ::java::lang::String & a0) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            LongFieldSource::LongFieldSource(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$LongParser & a1) : ::org::apache::lucene::queries::function::valuesource::FieldCacheSource(env->newObject(initializeClass, &mids$, mid_init$_d7533242, a0.this$, a1.this$)) {}

            ::java::lang::String LongFieldSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean LongFieldSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jlong LongFieldSource::externalToLong(const ::java::lang::String & a0) const
            {
              return env->callLongMethod(this$, mids$[mid_externalToLong_5fdc3f54], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues LongFieldSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint LongFieldSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }

            ::java::lang::Object LongFieldSource::longToObject(jlong a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_longToObject_fe727f5c], a0));
            }

            ::java::lang::String LongFieldSource::longToString(jlong a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_longToString_3e02f30e], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LongFieldSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LongFieldSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LongFieldSource_init_(t_LongFieldSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LongFieldSource_description(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_equals(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_externalToLong(t_LongFieldSource *self, PyObject *arg);
            static PyObject *t_LongFieldSource_getValues(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_hashCode(t_LongFieldSource *self, PyObject *args);
            static PyObject *t_LongFieldSource_longToObject(t_LongFieldSource *self, PyObject *arg);
            static PyObject *t_LongFieldSource_longToString(t_LongFieldSource *self, PyObject *arg);

            static PyMethodDef t_LongFieldSource__methods_[] = {
              DECLARE_METHOD(t_LongFieldSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongFieldSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LongFieldSource, description, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, externalToLong, METH_O),
              DECLARE_METHOD(t_LongFieldSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, hashCode, METH_VARARGS),
              DECLARE_METHOD(t_LongFieldSource, longToObject, METH_O),
              DECLARE_METHOD(t_LongFieldSource, longToString, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LongFieldSource, t_LongFieldSource, ::org::apache::lucene::queries::function::valuesource::FieldCacheSource, LongFieldSource, t_LongFieldSource_init_, 0, 0, 0, 0, 0);

            void t_LongFieldSource::install(PyObject *module)
            {
              installType(&PY_TYPE(LongFieldSource), module, "LongFieldSource", 0);
            }

            void t_LongFieldSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LongFieldSource).tp_dict, "class_", make_descriptor(LongFieldSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LongFieldSource).tp_dict, "wrapfn_", make_descriptor(t_LongFieldSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LongFieldSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LongFieldSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LongFieldSource::initializeClass, 1)))
                return NULL;
              return t_LongFieldSource::wrap_Object(LongFieldSource(((t_LongFieldSource *) arg)->object.this$));
            }
            static PyObject *t_LongFieldSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LongFieldSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LongFieldSource_init_(t_LongFieldSource *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  LongFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = LongFieldSource(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::org::apache::lucene::search::FieldCache$LongParser a1((jobject) NULL);
                  LongFieldSource object((jobject) NULL);

                  if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$LongParser::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = LongFieldSource(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LongFieldSource_description(t_LongFieldSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LongFieldSource_equals(t_LongFieldSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LongFieldSource_externalToLong(t_LongFieldSource *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              jlong result;

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.externalToLong(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              PyErr_SetArgsError((PyObject *) self, "externalToLong", arg);
              return NULL;
            }

            static PyObject *t_LongFieldSource_getValues(t_LongFieldSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LongFieldSource_hashCode(t_LongFieldSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LongFieldSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_LongFieldSource_longToObject(t_LongFieldSource *self, PyObject *arg)
            {
              jlong a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "J", &a0))
              {
                OBJ_CALL(result = self->object.longToObject(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "longToObject", arg);
              return NULL;
            }

            static PyObject *t_LongFieldSource_longToString(t_LongFieldSource *self, PyObject *arg)
            {
              jlong a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArg(arg, "J", &a0))
              {
                OBJ_CALL(result = self->object.longToString(a0));
                return j2p(result);
              }

              PyErr_SetArgsError((PyObject *) self, "longToString", arg);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/ArmenianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *ArmenianStemmer::class$ = NULL;
        jmethodID *ArmenianStemmer::mids$ = NULL;
        bool ArmenianStemmer::live$ = false;

        jclass ArmenianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/ArmenianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ArmenianStemmer::ArmenianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean ArmenianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint ArmenianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean ArmenianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_ArmenianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArmenianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ArmenianStemmer_init_(t_ArmenianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ArmenianStemmer_equals(t_ArmenianStemmer *self, PyObject *args);
        static PyObject *t_ArmenianStemmer_hashCode(t_ArmenianStemmer *self, PyObject *args);
        static PyObject *t_ArmenianStemmer_stem(t_ArmenianStemmer *self, PyObject *args);

        static PyMethodDef t_ArmenianStemmer__methods_[] = {
          DECLARE_METHOD(t_ArmenianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArmenianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ArmenianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_ArmenianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ArmenianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ArmenianStemmer, t_ArmenianStemmer, ::org::tartarus::snowball::SnowballProgram, ArmenianStemmer, t_ArmenianStemmer_init_, 0, 0, 0, 0, 0);

        void t_ArmenianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(ArmenianStemmer), module, "ArmenianStemmer", 0);
        }

        void t_ArmenianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ArmenianStemmer).tp_dict, "class_", make_descriptor(ArmenianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ArmenianStemmer).tp_dict, "wrapfn_", make_descriptor(t_ArmenianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ArmenianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ArmenianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ArmenianStemmer::initializeClass, 1)))
            return NULL;
          return t_ArmenianStemmer::wrap_Object(ArmenianStemmer(((t_ArmenianStemmer *) arg)->object.this$));
        }
        static PyObject *t_ArmenianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ArmenianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ArmenianStemmer_init_(t_ArmenianStemmer *self, PyObject *args, PyObject *kwds)
        {
          ArmenianStemmer object((jobject) NULL);

          INT_CALL(object = ArmenianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_ArmenianStemmer_equals(t_ArmenianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ArmenianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ArmenianStemmer_hashCode(t_ArmenianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ArmenianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ArmenianStemmer_stem(t_ArmenianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ArmenianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionAllGroupsCollector::class$ = NULL;
            jmethodID *FunctionAllGroupsCollector::mids$ = NULL;
            bool FunctionAllGroupsCollector::live$ = false;

            jclass FunctionAllGroupsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionAllGroupsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9d3ebac8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_2d2d7de4] = env->getMethodID(cls, "getGroups", "()Ljava/util/Collection;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionAllGroupsCollector::FunctionAllGroupsCollector(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1) : ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector(env->newObject(initializeClass, &mids$, mid_init$_9d3ebac8, a0.this$, a1.this$)) {}

            void FunctionAllGroupsCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::Collection FunctionAllGroupsCollector::getGroups() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getGroups_2d2d7de4]));
            }

            void FunctionAllGroupsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionAllGroupsCollector_of_(t_FunctionAllGroupsCollector *self, PyObject *args);
            static int t_FunctionAllGroupsCollector_init_(t_FunctionAllGroupsCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionAllGroupsCollector_collect(t_FunctionAllGroupsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupsCollector_getGroups(t_FunctionAllGroupsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupsCollector_setNextReader(t_FunctionAllGroupsCollector *self, PyObject *args);
            static PyObject *t_FunctionAllGroupsCollector_get__groups(t_FunctionAllGroupsCollector *self, void *data);
            static int t_FunctionAllGroupsCollector_set__nextReader(t_FunctionAllGroupsCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionAllGroupsCollector_get__parameters_(t_FunctionAllGroupsCollector *self, void *data);
            static PyGetSetDef t_FunctionAllGroupsCollector__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionAllGroupsCollector, groups),
              DECLARE_SET_FIELD(t_FunctionAllGroupsCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionAllGroupsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionAllGroupsCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionAllGroupsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_FunctionAllGroupsCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionAllGroupsCollector, t_FunctionAllGroupsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector, FunctionAllGroupsCollector, t_FunctionAllGroupsCollector_init_, 0, 0, t_FunctionAllGroupsCollector__fields_, 0, 0);
            PyObject *t_FunctionAllGroupsCollector::wrap_Object(const FunctionAllGroupsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupsCollector *self = (t_FunctionAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionAllGroupsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionAllGroupsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionAllGroupsCollector *self = (t_FunctionAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionAllGroupsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionAllGroupsCollector), module, "FunctionAllGroupsCollector", 0);
            }

            void t_FunctionAllGroupsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupsCollector).tp_dict, "class_", make_descriptor(FunctionAllGroupsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupsCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionAllGroupsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionAllGroupsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionAllGroupsCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionAllGroupsCollector::wrap_Object(FunctionAllGroupsCollector(((t_FunctionAllGroupsCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionAllGroupsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionAllGroupsCollector_of_(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionAllGroupsCollector_init_(t_FunctionAllGroupsCollector *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              FunctionAllGroupsCollector object((jobject) NULL);

              if (!parseArgs(args, "kK", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = FunctionAllGroupsCollector(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionAllGroupsCollector_collect(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupsCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_FunctionAllGroupsCollector_getGroups(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              ::java::util::Collection result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue));
              }

              return callSuper(&PY_TYPE(FunctionAllGroupsCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_FunctionAllGroupsCollector_setNextReader(t_FunctionAllGroupsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionAllGroupsCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionAllGroupsCollector_get__parameters_(t_FunctionAllGroupsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_FunctionAllGroupsCollector_get__groups(t_FunctionAllGroupsCollector *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_Collection::wrap_Object(value);
            }

            static int t_FunctionAllGroupsCollector_set__nextReader(t_FunctionAllGroupsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemmer::class$ = NULL;
          jmethodID *ArabicStemmer::mids$ = NULL;
          bool ArabicStemmer::live$ = false;
          jchar ArabicStemmer::ALEF = (jchar) 0;
          jchar ArabicStemmer::BEH = (jchar) 0;
          jchar ArabicStemmer::FEH = (jchar) 0;
          jchar ArabicStemmer::HEH = (jchar) 0;
          jchar ArabicStemmer::KAF = (jchar) 0;
          jchar ArabicStemmer::LAM = (jchar) 0;
          jchar ArabicStemmer::NOON = (jchar) 0;
          jchar ArabicStemmer::TEH = (jchar) 0;
          jchar ArabicStemmer::TEH_MARBUTA = (jchar) 0;
          jchar ArabicStemmer::WAW = (jchar) 0;
          jchar ArabicStemmer::YEH = (jchar) 0;
          JArray< JArray< jchar > > *ArabicStemmer::prefixes = NULL;
          JArray< JArray< jchar > > *ArabicStemmer::suffixes = NULL;

          jclass ArabicStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");
              mids$[mid_stemPrefix_ec6430eb] = env->getMethodID(cls, "stemPrefix", "([CI)I");
              mids$[mid_stemSuffix_ec6430eb] = env->getMethodID(cls, "stemSuffix", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALEF = env->getStaticCharField(cls, "ALEF");
              BEH = env->getStaticCharField(cls, "BEH");
              FEH = env->getStaticCharField(cls, "FEH");
              HEH = env->getStaticCharField(cls, "HEH");
              KAF = env->getStaticCharField(cls, "KAF");
              LAM = env->getStaticCharField(cls, "LAM");
              NOON = env->getStaticCharField(cls, "NOON");
              TEH = env->getStaticCharField(cls, "TEH");
              TEH_MARBUTA = env->getStaticCharField(cls, "TEH_MARBUTA");
              WAW = env->getStaticCharField(cls, "WAW");
              YEH = env->getStaticCharField(cls, "YEH");
              prefixes = new JArray< JArray< jchar > >(env->getStaticObjectField(cls, "prefixes", "[[C"));
              suffixes = new JArray< JArray< jchar > >(env->getStaticObjectField(cls, "suffixes", "[[C"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemmer::ArabicStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint ArabicStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }

          jint ArabicStemmer::stemPrefix(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stemPrefix_ec6430eb], a0.this$, a1);
          }

          jint ArabicStemmer::stemSuffix(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stemSuffix_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemmer_init_(t_ArabicStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemmer_stem(t_ArabicStemmer *self, PyObject *args);
          static PyObject *t_ArabicStemmer_stemPrefix(t_ArabicStemmer *self, PyObject *args);
          static PyObject *t_ArabicStemmer_stemSuffix(t_ArabicStemmer *self, PyObject *args);

          static PyMethodDef t_ArabicStemmer__methods_[] = {
            DECLARE_METHOD(t_ArabicStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemmer, stem, METH_VARARGS),
            DECLARE_METHOD(t_ArabicStemmer, stemPrefix, METH_VARARGS),
            DECLARE_METHOD(t_ArabicStemmer, stemSuffix, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicStemmer, t_ArabicStemmer, ::java::lang::Object, ArabicStemmer, t_ArabicStemmer_init_, 0, 0, 0, 0, 0);

          void t_ArabicStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemmer), module, "ArabicStemmer", 0);
          }

          void t_ArabicStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "class_", make_descriptor(ArabicStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "wrapfn_", make_descriptor(t_ArabicStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ArabicStemmer::initializeClass);
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "ALEF", make_descriptor(ArabicStemmer::ALEF));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "BEH", make_descriptor(ArabicStemmer::BEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "FEH", make_descriptor(ArabicStemmer::FEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "HEH", make_descriptor(ArabicStemmer::HEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "KAF", make_descriptor(ArabicStemmer::KAF));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "LAM", make_descriptor(ArabicStemmer::LAM));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "NOON", make_descriptor(ArabicStemmer::NOON));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "TEH", make_descriptor(ArabicStemmer::TEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "TEH_MARBUTA", make_descriptor(ArabicStemmer::TEH_MARBUTA));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "WAW", make_descriptor(ArabicStemmer::WAW));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "YEH", make_descriptor(ArabicStemmer::YEH));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "prefixes", make_descriptor(JArray<jobject>(ArabicStemmer::prefixes->this$).wrap(NULL)));
            PyDict_SetItemString(PY_TYPE(ArabicStemmer).tp_dict, "suffixes", make_descriptor(JArray<jobject>(ArabicStemmer::suffixes->this$).wrap(NULL)));
          }

          static PyObject *t_ArabicStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemmer::initializeClass, 1)))
              return NULL;
            return t_ArabicStemmer::wrap_Object(ArabicStemmer(((t_ArabicStemmer *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemmer_init_(t_ArabicStemmer *self, PyObject *args, PyObject *kwds)
          {
            ArabicStemmer object((jobject) NULL);

            INT_CALL(object = ArabicStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_ArabicStemmer_stem(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }

          static PyObject *t_ArabicStemmer_stemPrefix(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stemPrefix(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stemPrefix", args);
            return NULL;
          }

          static PyObject *t_ArabicStemmer_stemSuffix(t_ArabicStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stemSuffix(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stemSuffix", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/SingleInstanceLockFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *SingleInstanceLockFactory::class$ = NULL;
        jmethodID *SingleInstanceLockFactory::mids$ = NULL;
        bool SingleInstanceLockFactory::live$ = false;

        jclass SingleInstanceLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/SingleInstanceLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SingleInstanceLockFactory::SingleInstanceLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void SingleInstanceLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock SingleInstanceLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_SingleInstanceLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SingleInstanceLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SingleInstanceLockFactory_init_(t_SingleInstanceLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SingleInstanceLockFactory_clearLock(t_SingleInstanceLockFactory *self, PyObject *args);
        static PyObject *t_SingleInstanceLockFactory_makeLock(t_SingleInstanceLockFactory *self, PyObject *args);

        static PyMethodDef t_SingleInstanceLockFactory__methods_[] = {
          DECLARE_METHOD(t_SingleInstanceLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleInstanceLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SingleInstanceLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_SingleInstanceLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SingleInstanceLockFactory, t_SingleInstanceLockFactory, ::org::apache::lucene::store::LockFactory, SingleInstanceLockFactory, t_SingleInstanceLockFactory_init_, 0, 0, 0, 0, 0);

        void t_SingleInstanceLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(SingleInstanceLockFactory), module, "SingleInstanceLockFactory", 0);
        }

        void t_SingleInstanceLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SingleInstanceLockFactory).tp_dict, "class_", make_descriptor(SingleInstanceLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SingleInstanceLockFactory).tp_dict, "wrapfn_", make_descriptor(t_SingleInstanceLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SingleInstanceLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SingleInstanceLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SingleInstanceLockFactory::initializeClass, 1)))
            return NULL;
          return t_SingleInstanceLockFactory::wrap_Object(SingleInstanceLockFactory(((t_SingleInstanceLockFactory *) arg)->object.this$));
        }
        static PyObject *t_SingleInstanceLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SingleInstanceLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SingleInstanceLockFactory_init_(t_SingleInstanceLockFactory *self, PyObject *args, PyObject *kwds)
        {
          SingleInstanceLockFactory object((jobject) NULL);

          INT_CALL(object = SingleInstanceLockFactory());
          self->object = object;

          return 0;
        }

        static PyObject *t_SingleInstanceLockFactory_clearLock(t_SingleInstanceLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SingleInstanceLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_SingleInstanceLockFactory_makeLock(t_SingleInstanceLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SingleInstanceLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/Attribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "java/lang/Cloneable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeImpl::class$ = NULL;
        jmethodID *AttributeImpl::mids$ = NULL;
        bool AttributeImpl::live$ = false;

        jclass AttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clone_a200d3c2] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_reflectAsString_445a175e] = env->getMethodID(cls, "reflectAsString", "(Z)Ljava/lang/String;");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeImpl::AttributeImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void AttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        AttributeImpl AttributeImpl::clone() const
        {
          return AttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_a200d3c2]));
        }

        void AttributeImpl::copyTo(const AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        ::java::lang::String AttributeImpl::reflectAsString(jboolean a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_reflectAsString_445a175e], a0));
        }

        void AttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeImpl_init_(t_AttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeImpl_clear(t_AttributeImpl *self);
        static PyObject *t_AttributeImpl_clone(t_AttributeImpl *self);
        static PyObject *t_AttributeImpl_copyTo(t_AttributeImpl *self, PyObject *arg);
        static PyObject *t_AttributeImpl_reflectAsString(t_AttributeImpl *self, PyObject *arg);
        static PyObject *t_AttributeImpl_reflectWith(t_AttributeImpl *self, PyObject *arg);

        static PyMethodDef t_AttributeImpl__methods_[] = {
          DECLARE_METHOD(t_AttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeImpl, clear, METH_NOARGS),
          DECLARE_METHOD(t_AttributeImpl, clone, METH_NOARGS),
          DECLARE_METHOD(t_AttributeImpl, copyTo, METH_O),
          DECLARE_METHOD(t_AttributeImpl, reflectAsString, METH_O),
          DECLARE_METHOD(t_AttributeImpl, reflectWith, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeImpl, t_AttributeImpl, ::java::lang::Object, AttributeImpl, t_AttributeImpl_init_, 0, 0, 0, 0, 0);

        void t_AttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeImpl), module, "AttributeImpl", 0);
        }

        void t_AttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeImpl).tp_dict, "class_", make_descriptor(AttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_AttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeImpl::initializeClass, 1)))
            return NULL;
          return t_AttributeImpl::wrap_Object(AttributeImpl(((t_AttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_AttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeImpl_init_(t_AttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          AttributeImpl object((jobject) NULL);

          INT_CALL(object = AttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeImpl_clear(t_AttributeImpl *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_AttributeImpl_clone(t_AttributeImpl *self)
        {
          AttributeImpl result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_AttributeImpl::wrap_Object(result);
        }

        static PyObject *t_AttributeImpl_copyTo(t_AttributeImpl *self, PyObject *arg)
        {
          AttributeImpl a0((jobject) NULL);

          if (!parseArg(arg, "k", AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyTo", arg);
          return NULL;
        }

        static PyObject *t_AttributeImpl_reflectAsString(t_AttributeImpl *self, PyObject *arg)
        {
          jboolean a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.reflectAsString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reflectAsString", arg);
          return NULL;
        }

        static PyObject *t_AttributeImpl_reflectWith(t_AttributeImpl *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflectWith", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/PositiveScoresOnlyCollector.h"
#include "org/apache/lucene/search/Scorer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *PositiveScoresOnlyCollector::class$ = NULL;
        jmethodID *PositiveScoresOnlyCollector::mids$ = NULL;
        bool PositiveScoresOnlyCollector::live$ = false;

        jclass PositiveScoresOnlyCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/PositiveScoresOnlyCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_77379ce0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
            mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PositiveScoresOnlyCollector::PositiveScoresOnlyCollector(const ::org::apache::lucene::search::Collector & a0) : ::org::apache::lucene::search::Collector(env->newObject(initializeClass, &mids$, mid_init$_77379ce0, a0.this$)) {}

        jboolean PositiveScoresOnlyCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        void PositiveScoresOnlyCollector::collect(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
        }

        void PositiveScoresOnlyCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
        }

        void PositiveScoresOnlyCollector::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_PositiveScoresOnlyCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PositiveScoresOnlyCollector_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PositiveScoresOnlyCollector_init_(t_PositiveScoresOnlyCollector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PositiveScoresOnlyCollector_acceptsDocsOutOfOrder(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static PyObject *t_PositiveScoresOnlyCollector_collect(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static PyObject *t_PositiveScoresOnlyCollector_setNextReader(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static PyObject *t_PositiveScoresOnlyCollector_setScorer(t_PositiveScoresOnlyCollector *self, PyObject *args);
        static int t_PositiveScoresOnlyCollector_set__nextReader(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data);
        static int t_PositiveScoresOnlyCollector_set__scorer(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data);
        static PyGetSetDef t_PositiveScoresOnlyCollector__fields_[] = {
          DECLARE_SET_FIELD(t_PositiveScoresOnlyCollector, nextReader),
          DECLARE_SET_FIELD(t_PositiveScoresOnlyCollector, scorer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PositiveScoresOnlyCollector__methods_[] = {
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, collect, METH_VARARGS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_PositiveScoresOnlyCollector, setScorer, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PositiveScoresOnlyCollector, t_PositiveScoresOnlyCollector, ::org::apache::lucene::search::Collector, PositiveScoresOnlyCollector, t_PositiveScoresOnlyCollector_init_, 0, 0, t_PositiveScoresOnlyCollector__fields_, 0, 0);

        void t_PositiveScoresOnlyCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(PositiveScoresOnlyCollector), module, "PositiveScoresOnlyCollector", 0);
        }

        void t_PositiveScoresOnlyCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PositiveScoresOnlyCollector).tp_dict, "class_", make_descriptor(PositiveScoresOnlyCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PositiveScoresOnlyCollector).tp_dict, "wrapfn_", make_descriptor(t_PositiveScoresOnlyCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PositiveScoresOnlyCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PositiveScoresOnlyCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PositiveScoresOnlyCollector::initializeClass, 1)))
            return NULL;
          return t_PositiveScoresOnlyCollector::wrap_Object(PositiveScoresOnlyCollector(((t_PositiveScoresOnlyCollector *) arg)->object.this$));
        }
        static PyObject *t_PositiveScoresOnlyCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PositiveScoresOnlyCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PositiveScoresOnlyCollector_init_(t_PositiveScoresOnlyCollector *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Collector a0((jobject) NULL);
          PositiveScoresOnlyCollector object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
          {
            INT_CALL(object = PositiveScoresOnlyCollector(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PositiveScoresOnlyCollector_acceptsDocsOutOfOrder(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_PositiveScoresOnlyCollector_collect(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.collect(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "collect", args, 2);
        }

        static PyObject *t_PositiveScoresOnlyCollector_setNextReader(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setNextReader(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_PositiveScoresOnlyCollector_setScorer(t_PositiveScoresOnlyCollector *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(PositiveScoresOnlyCollector), (PyObject *) self, "setScorer", args, 2);
        }

        static int t_PositiveScoresOnlyCollector_set__nextReader(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_PositiveScoresOnlyCollector_set__scorer(t_PositiveScoresOnlyCollector *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NumericDocValues::class$ = NULL;
        jmethodID *NumericDocValues::mids$ = NULL;
        bool NumericDocValues::live$ = false;

        jclass NumericDocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NumericDocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong NumericDocValues::get(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NumericDocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericDocValues_get(t_NumericDocValues *self, PyObject *arg);

        static PyMethodDef t_NumericDocValues__methods_[] = {
          DECLARE_METHOD(t_NumericDocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericDocValues, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericDocValues, t_NumericDocValues, ::java::lang::Object, NumericDocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_NumericDocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericDocValues), module, "NumericDocValues", 0);
        }

        void t_NumericDocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericDocValues).tp_dict, "class_", make_descriptor(NumericDocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericDocValues).tp_dict, "wrapfn_", make_descriptor(t_NumericDocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericDocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericDocValues::initializeClass, 1)))
            return NULL;
          return t_NumericDocValues::wrap_Object(NumericDocValues(((t_NumericDocValues *) arg)->object.this$));
        }
        static PyObject *t_NumericDocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericDocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericDocValues_get(t_NumericDocValues *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene49/Lucene49NormsFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {

          ::java::lang::Class *Lucene49NormsFormat::class$ = NULL;
          jmethodID *Lucene49NormsFormat::mids$ = NULL;
          bool Lucene49NormsFormat::live$ = false;

          jclass Lucene49NormsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene49/Lucene49NormsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_normsConsumer_025deb44] = env->getMethodID(cls, "normsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
              mids$[mid_normsProducer_9b0d4e4a] = env->getMethodID(cls, "normsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene49NormsFormat::Lucene49NormsFormat() : ::org::apache::lucene::codecs::NormsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesConsumer Lucene49NormsFormat::normsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_normsConsumer_025deb44], a0.this$));
          }

          ::org::apache::lucene::codecs::DocValuesProducer Lucene49NormsFormat::normsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_normsProducer_9b0d4e4a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene49 {
          static PyObject *t_Lucene49NormsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene49NormsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene49NormsFormat_init_(t_Lucene49NormsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene49NormsFormat_normsConsumer(t_Lucene49NormsFormat *self, PyObject *args);
          static PyObject *t_Lucene49NormsFormat_normsProducer(t_Lucene49NormsFormat *self, PyObject *args);

          static PyMethodDef t_Lucene49NormsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene49NormsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49NormsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene49NormsFormat, normsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_Lucene49NormsFormat, normsProducer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene49NormsFormat, t_Lucene49NormsFormat, ::org::apache::lucene::codecs::NormsFormat, Lucene49NormsFormat, t_Lucene49NormsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene49NormsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene49NormsFormat), module, "Lucene49NormsFormat", 0);
          }

          void t_Lucene49NormsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene49NormsFormat).tp_dict, "class_", make_descriptor(Lucene49NormsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene49NormsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene49NormsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene49NormsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene49NormsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene49NormsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene49NormsFormat::wrap_Object(Lucene49NormsFormat(((t_Lucene49NormsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene49NormsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene49NormsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene49NormsFormat_init_(t_Lucene49NormsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene49NormsFormat object((jobject) NULL);

            INT_CALL(object = Lucene49NormsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene49NormsFormat_normsConsumer(t_Lucene49NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsConsumer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49NormsFormat), (PyObject *) self, "normsConsumer", args, 2);
          }

          static PyObject *t_Lucene49NormsFormat_normsProducer(t_Lucene49NormsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.normsProducer(a0));
              return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene49NormsFormat), (PyObject *) self, "normsProducer", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST::class$ = NULL;
          jmethodID *FST::mids$ = NULL;
          jfieldID *FST::fids$ = NULL;
          bool FST::live$ = false;
          jint FST::DEFAULT_MAX_BLOCK_BITS = (jint) 0;
          jint FST::END_LABEL = (jint) 0;

          jclass FST::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ed0a14d8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_init$_f8dfeffa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/fst/Outputs;I)V");
              mids$[mid_findTargetArc_12322441] = env->getMethodID(cls, "findTargetArc", "(ILorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_getArcCount_54c6a17a] = env->getMethodID(cls, "getArcCount", "()J");
              mids$[mid_getArcWithOutputCount_54c6a17a] = env->getMethodID(cls, "getArcWithOutputCount", "()J");
              mids$[mid_getBytesReader_92a3fc65] = env->getMethodID(cls, "getBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");
              mids$[mid_getEmptyOutput_846352c3] = env->getMethodID(cls, "getEmptyOutput", "()Ljava/lang/Object;");
              mids$[mid_getFirstArc_8c07e6cb] = env->getMethodID(cls, "getFirstArc", "(Lorg/apache/lucene/util/fst/FST$Arc;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_getInputType_ae922153] = env->getMethodID(cls, "getInputType", "()Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");
              mids$[mid_getNodeCount_54c6a17a] = env->getMethodID(cls, "getNodeCount", "()J");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_read_fd85abc1] = env->getStaticMethodID(cls, "read", "(Ljava/io/File;Lorg/apache/lucene/util/fst/Outputs;)Lorg/apache/lucene/util/fst/FST;");
              mids$[mid_readFirstRealTargetArc_e3f5aada] = env->getMethodID(cls, "readFirstRealTargetArc", "(JLorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readFirstTargetArc_ec7dd60b] = env->getMethodID(cls, "readFirstTargetArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readLastTargetArc_ec7dd60b] = env->getMethodID(cls, "readLastTargetArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readNextArc_1deb4fc1] = env->getMethodID(cls, "readNextArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readNextArcLabel_614f52e1] = env->getMethodID(cls, "readNextArcLabel", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)I");
              mids$[mid_readNextRealArc_1deb4fc1] = env->getMethodID(cls, "readNextRealArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readRootArcs_a2b77668] = env->getMethodID(cls, "readRootArcs", "([Lorg/apache/lucene/util/fst/FST$Arc;)V");
              mids$[mid_save_c3dacf57] = env->getMethodID(cls, "save", "(Ljava/io/File;)V");
              mids$[mid_save_27875f57] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_targetHasArcs_0c8cc6dc] = env->getStaticMethodID(cls, "targetHasArcs", "(Lorg/apache/lucene/util/fst/FST$Arc;)Z");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arcCount] = env->getFieldID(cls, "arcCount", "J");
              fids$[fid_arcWithOutputCount] = env->getFieldID(cls, "arcWithOutputCount", "J");
              fids$[fid_inputType] = env->getFieldID(cls, "inputType", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");
              fids$[fid_nodeCount] = env->getFieldID(cls, "nodeCount", "J");
              fids$[fid_outputs] = env->getFieldID(cls, "outputs", "Lorg/apache/lucene/util/fst/Outputs;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_BITS = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_BITS");
              END_LABEL = env->getStaticIntField(cls, "END_LABEL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST::FST(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::fst::Outputs & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ed0a14d8, a0.this$, a1.this$)) {}

          FST::FST(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::fst::Outputs & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f8dfeffa, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::util::fst::FST$Arc FST::findTargetArc(jint a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$BytesReader & a3) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_findTargetArc_12322441], a0, a1.this$, a2.this$, a3.this$));
          }

          jlong FST::getArcCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getArcCount_54c6a17a]);
          }

          jlong FST::getArcWithOutputCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getArcWithOutputCount_54c6a17a]);
          }

          ::org::apache::lucene::util::fst::FST$BytesReader FST::getBytesReader() const
          {
            return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getBytesReader_92a3fc65]));
          }

          ::java::lang::Object FST::getEmptyOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getEmptyOutput_846352c3]));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::getFirstArc(const ::org::apache::lucene::util::fst::FST$Arc & a0) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_getFirstArc_8c07e6cb], a0.this$));
          }

          ::org::apache::lucene::util::fst::FST$INPUT_TYPE FST::getInputType() const
          {
            return ::org::apache::lucene::util::fst::FST$INPUT_TYPE(env->callObjectMethod(this$, mids$[mid_getInputType_ae922153]));
          }

          jlong FST::getNodeCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getNodeCount_54c6a17a]);
          }

          jlong FST::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          FST FST::read(const ::java::io::File & a0, const ::org::apache::lucene::util::fst::Outputs & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return FST(env->callStaticObjectMethod(cls, mids$[mid_read_fd85abc1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readFirstRealTargetArc(jlong a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readFirstRealTargetArc_e3f5aada], a0, a1.this$, a2.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readFirstTargetArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readFirstTargetArc_ec7dd60b], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readLastTargetArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readLastTargetArc_ec7dd60b], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readNextArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readNextArc_1deb4fc1], a0.this$, a1.this$));
          }

          jint FST::readNextArcLabel(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_readNextArcLabel_614f52e1], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readNextRealArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readNextRealArc_1deb4fc1], a0.this$, a1.this$));
          }

          void FST::readRootArcs(const JArray< ::org::apache::lucene::util::fst::FST$Arc > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_readRootArcs_a2b77668], a0.this$);
          }

          void FST::save(const ::java::io::File & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_c3dacf57], a0.this$);
          }

          void FST::save(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_27875f57], a0.this$);
          }

          jboolean FST::targetHasArcs(const ::org::apache::lucene::util::fst::FST$Arc & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_targetHasArcs_0c8cc6dc], a0.this$);
          }

          jlong FST::_get_arcCount() const
          {
            return env->getLongField(this$, fids$[fid_arcCount]);
          }

          void FST::_set_arcCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_arcCount], a0);
          }

          jlong FST::_get_arcWithOutputCount() const
          {
            return env->getLongField(this$, fids$[fid_arcWithOutputCount]);
          }

          void FST::_set_arcWithOutputCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_arcWithOutputCount], a0);
          }

          ::org::apache::lucene::util::fst::FST$INPUT_TYPE FST::_get_inputType() const
          {
            return ::org::apache::lucene::util::fst::FST$INPUT_TYPE(env->getObjectField(this$, fids$[fid_inputType]));
          }

          jlong FST::_get_nodeCount() const
          {
            return env->getLongField(this$, fids$[fid_nodeCount]);
          }

          void FST::_set_nodeCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_nodeCount], a0);
          }

          ::org::apache::lucene::util::fst::Outputs FST::_get_outputs() const
          {
            return ::org::apache::lucene::util::fst::Outputs(env->getObjectField(this$, fids$[fid_outputs]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_of_(t_FST *self, PyObject *args);
          static int t_FST_init_(t_FST *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST_findTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_getArcCount(t_FST *self);
          static PyObject *t_FST_getArcWithOutputCount(t_FST *self);
          static PyObject *t_FST_getBytesReader(t_FST *self);
          static PyObject *t_FST_getEmptyOutput(t_FST *self);
          static PyObject *t_FST_getFirstArc(t_FST *self, PyObject *arg);
          static PyObject *t_FST_getInputType(t_FST *self);
          static PyObject *t_FST_getNodeCount(t_FST *self);
          static PyObject *t_FST_ramBytesUsed(t_FST *self);
          static PyObject *t_FST_read(PyTypeObject *type, PyObject *args);
          static PyObject *t_FST_readFirstRealTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readFirstTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readLastTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readNextArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readNextArcLabel(t_FST *self, PyObject *args);
          static PyObject *t_FST_readNextRealArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readRootArcs(t_FST *self, PyObject *arg);
          static PyObject *t_FST_save(t_FST *self, PyObject *args);
          static PyObject *t_FST_targetHasArcs(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_get__outputs(t_FST *self, void *data);

          static PyObject *t_FST_get__arcCount(t_FST *self, void *data);
          static PyObject *t_FST_get__arcWithOutputCount(t_FST *self, void *data);
          static PyObject *t_FST_get__bytesReader(t_FST *self, void *data);
          static PyObject *t_FST_get__emptyOutput(t_FST *self, void *data);
          static PyObject *t_FST_get__inputType(t_FST *self, void *data);
          static PyObject *t_FST_get__nodeCount(t_FST *self, void *data);
          static PyObject *t_FST_get__parameters_(t_FST *self, void *data);
          static PyGetSetDef t_FST__fields_[] = {
            DECLARE_GET_FIELD(t_FST, outputs),
            DECLARE_GET_FIELD(t_FST, arcCount),
            DECLARE_GET_FIELD(t_FST, arcWithOutputCount),
            DECLARE_GET_FIELD(t_FST, bytesReader),
            DECLARE_GET_FIELD(t_FST, emptyOutput),
            DECLARE_GET_FIELD(t_FST, inputType),
            DECLARE_GET_FIELD(t_FST, nodeCount),
            DECLARE_GET_FIELD(t_FST, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST__methods_[] = {
            DECLARE_METHOD(t_FST, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST, findTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, getArcCount, METH_NOARGS),
            DECLARE_METHOD(t_FST, getArcWithOutputCount, METH_NOARGS),
            DECLARE_METHOD(t_FST, getBytesReader, METH_NOARGS),
            DECLARE_METHOD(t_FST, getEmptyOutput, METH_NOARGS),
            DECLARE_METHOD(t_FST, getFirstArc, METH_O),
            DECLARE_METHOD(t_FST, getInputType, METH_NOARGS),
            DECLARE_METHOD(t_FST, getNodeCount, METH_NOARGS),
            DECLARE_METHOD(t_FST, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_FST, read, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FST, readFirstRealTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readFirstTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readLastTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readNextArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readNextArcLabel, METH_VARARGS),
            DECLARE_METHOD(t_FST, readNextRealArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readRootArcs, METH_O),
            DECLARE_METHOD(t_FST, save, METH_VARARGS),
            DECLARE_METHOD(t_FST, targetHasArcs, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST, t_FST, ::java::lang::Object, FST, t_FST_init_, 0, 0, t_FST__fields_, 0, 0);
          PyObject *t_FST::wrap_Object(const FST& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST *self = (t_FST *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST *self = (t_FST *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST::install(PyObject *module)
          {
            installType(&PY_TYPE(FST), module, "FST", 0);
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "BytesReader", make_descriptor(&PY_TYPE(FST$BytesReader)));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "Arc", make_descriptor(&PY_TYPE(FST$Arc)));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "INPUT_TYPE", make_descriptor(&PY_TYPE(FST$INPUT_TYPE)));
          }

          void t_FST::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "class_", make_descriptor(FST::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "wrapfn_", make_descriptor(t_FST::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FST::initializeClass);
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "DEFAULT_MAX_BLOCK_BITS", make_descriptor(FST::DEFAULT_MAX_BLOCK_BITS));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "END_LABEL", make_descriptor(FST::END_LABEL));
          }

          static PyObject *t_FST_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST::initializeClass, 1)))
              return NULL;
            return t_FST::wrap_Object(FST(((t_FST *) arg)->object.this$));
          }
          static PyObject *t_FST_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST_of_(t_FST *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST_init_(t_FST *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
                PyTypeObject **p1;
                FST object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
                {
                  INT_CALL(object = FST(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                FST object((jobject) NULL);

                if (!parseArgs(args, "kKI", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a2))
                {
                  INT_CALL(object = FST(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FST_findTargetArc(t_FST *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$BytesReader a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "IKKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.findTargetArc(a0, a1, a2, a3));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "findTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_getArcCount(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getArcCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_getArcWithOutputCount(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getArcWithOutputCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_getBytesReader(t_FST *self)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
          }

          static PyObject *t_FST_getEmptyOutput(t_FST *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getEmptyOutput());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_FST_getFirstArc(t_FST *self, PyObject *arg)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArg(arg, "K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = self->object.getFirstArc(a0));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "getFirstArc", arg);
            return NULL;
          }

          static PyObject *t_FST_getInputType(t_FST *self)
          {
            ::org::apache::lucene::util::fst::FST$INPUT_TYPE result((jobject) NULL);
            OBJ_CALL(result = self->object.getInputType());
            return ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::wrap_Object(result);
          }

          static PyObject *t_FST_getNodeCount(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNodeCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_ramBytesUsed(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_read(PyTypeObject *type, PyObject *args)
          {
            ::java::io::File a0((jobject) NULL);
            ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
            PyTypeObject **p1;
            FST result((jobject) NULL);

            if (!parseArgs(args, "kK", ::java::io::File::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST::read(a0, a1));
              return t_FST::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "read", args);
            return NULL;
          }

          static PyObject *t_FST_readFirstRealTargetArc(t_FST *self, PyObject *args)
          {
            jlong a0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "JKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readFirstRealTargetArc(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readFirstRealTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_readFirstTargetArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readFirstTargetArc(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readFirstTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_readLastTargetArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readLastTargetArc(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readLastTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_readNextArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readNextArc(a0, a1));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readNextArc", args);
            return NULL;
          }

          static PyObject *t_FST_readNextArcLabel(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            jint result;

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readNextArcLabel(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "readNextArcLabel", args);
            return NULL;
          }

          static PyObject *t_FST_readNextRealArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readNextRealArc(a0, a1));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readNextRealArc", args);
            return NULL;
          }

          static PyObject *t_FST_readRootArcs(t_FST *self, PyObject *arg)
          {
            JArray< ::org::apache::lucene::util::fst::FST$Arc > a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "[K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
            {
              OBJ_CALL(self->object.readRootArcs(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "readRootArcs", arg);
            return NULL;
          }

          static PyObject *t_FST_save(t_FST *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::File a0((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.save(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.save(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "save", args);
            return NULL;
          }

          static PyObject *t_FST_targetHasArcs(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST::targetHasArcs(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "targetHasArcs", arg);
            return NULL;
          }
          static PyObject *t_FST_get__parameters_(t_FST *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST_get__outputs(t_FST *self, void *data)
          {
            ::org::apache::lucene::util::fst::Outputs value((jobject) NULL);
            OBJ_CALL(value = self->object._get_outputs());
            return ::org::apache::lucene::util::fst::t_Outputs::wrap_Object(value);
          }

          static PyObject *t_FST_get__arcCount(t_FST *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getArcCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FST_get__arcWithOutputCount(t_FST *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getArcWithOutputCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FST_get__bytesReader(t_FST *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
          }

          static PyObject *t_FST_get__emptyOutput(t_FST *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getEmptyOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_FST_get__inputType(t_FST *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$INPUT_TYPE value((jobject) NULL);
            OBJ_CALL(value = self->object.getInputType());
            return ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::wrap_Object(value);
          }

          static PyObject *t_FST_get__nodeCount(t_FST *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNodeCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MatchNoDocsQueryNodeBuilder.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MatchNoDocsQueryNodeBuilder::class$ = NULL;
              jmethodID *MatchNoDocsQueryNodeBuilder::mids$ = NULL;
              bool MatchNoDocsQueryNodeBuilder::live$ = false;

              jclass MatchNoDocsQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MatchNoDocsQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchNoDocsQueryNodeBuilder::MatchNoDocsQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery MatchNoDocsQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MatchNoDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchNoDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchNoDocsQueryNodeBuilder_init_(t_MatchNoDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchNoDocsQueryNodeBuilder_build(t_MatchNoDocsQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MatchNoDocsQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchNoDocsQueryNodeBuilder, t_MatchNoDocsQueryNodeBuilder, ::java::lang::Object, MatchNoDocsQueryNodeBuilder, t_MatchNoDocsQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_MatchNoDocsQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchNoDocsQueryNodeBuilder), module, "MatchNoDocsQueryNodeBuilder", 0);
              }

              void t_MatchNoDocsQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNodeBuilder).tp_dict, "class_", make_descriptor(MatchNoDocsQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_MatchNoDocsQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchNoDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchNoDocsQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MatchNoDocsQueryNodeBuilder::wrap_Object(MatchNoDocsQueryNodeBuilder(((t_MatchNoDocsQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MatchNoDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchNoDocsQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchNoDocsQueryNodeBuilder_init_(t_MatchNoDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MatchNoDocsQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MatchNoDocsQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchNoDocsQueryNodeBuilder_build(t_MatchNoDocsQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/MMapDirectory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/io/File.h"
#include "org/apache/lucene/store/LockFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *MMapDirectory::class$ = NULL;
        jmethodID *MMapDirectory::mids$ = NULL;
        bool MMapDirectory::live$ = false;
        jint MMapDirectory::DEFAULT_MAX_BUFF = (jint) 0;
        jboolean MMapDirectory::UNMAP_SUPPORTED = (jboolean) 0;

        jclass MMapDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/MMapDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5f9cf6ef] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;)V");
            mids$[mid_init$_4d8117f3] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Lorg/apache/lucene/store/LockFactory;I)V");
            mids$[mid_getMaxChunkSize_54c6a179] = env->getMethodID(cls, "getMaxChunkSize", "()I");
            mids$[mid_getUseUnmap_54c6a16a] = env->getMethodID(cls, "getUseUnmap", "()Z");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_setUseUnmap_bb0c767f] = env->getMethodID(cls, "setUseUnmap", "(Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_MAX_BUFF = env->getStaticIntField(cls, "DEFAULT_MAX_BUFF");
            UNMAP_SUPPORTED = env->getStaticBooleanField(cls, "UNMAP_SUPPORTED");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MMapDirectory::MMapDirectory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        MMapDirectory::MMapDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_5f9cf6ef, a0.this$, a1.this$)) {}

        MMapDirectory::MMapDirectory(const ::java::io::File & a0, const ::org::apache::lucene::store::LockFactory & a1, jint a2) : ::org::apache::lucene::store::FSDirectory(env->newObject(initializeClass, &mids$, mid_init$_4d8117f3, a0.this$, a1.this$, a2)) {}

        jint MMapDirectory::getMaxChunkSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getMaxChunkSize_54c6a179]);
        }

        jboolean MMapDirectory::getUseUnmap() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseUnmap_54c6a16a]);
        }

        ::org::apache::lucene::store::IndexInput MMapDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void MMapDirectory::setUseUnmap(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setUseUnmap_bb0c767f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_MMapDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MMapDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MMapDirectory_init_(t_MMapDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MMapDirectory_getMaxChunkSize(t_MMapDirectory *self);
        static PyObject *t_MMapDirectory_getUseUnmap(t_MMapDirectory *self);
        static PyObject *t_MMapDirectory_openInput(t_MMapDirectory *self, PyObject *args);
        static PyObject *t_MMapDirectory_setUseUnmap(t_MMapDirectory *self, PyObject *arg);
        static PyObject *t_MMapDirectory_get__maxChunkSize(t_MMapDirectory *self, void *data);
        static PyObject *t_MMapDirectory_get__useUnmap(t_MMapDirectory *self, void *data);
        static int t_MMapDirectory_set__useUnmap(t_MMapDirectory *self, PyObject *arg, void *data);
        static PyGetSetDef t_MMapDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_MMapDirectory, maxChunkSize),
          DECLARE_GETSET_FIELD(t_MMapDirectory, useUnmap),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MMapDirectory__methods_[] = {
          DECLARE_METHOD(t_MMapDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MMapDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MMapDirectory, getMaxChunkSize, METH_NOARGS),
          DECLARE_METHOD(t_MMapDirectory, getUseUnmap, METH_NOARGS),
          DECLARE_METHOD(t_MMapDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_MMapDirectory, setUseUnmap, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MMapDirectory, t_MMapDirectory, ::org::apache::lucene::store::FSDirectory, MMapDirectory, t_MMapDirectory_init_, 0, 0, t_MMapDirectory__fields_, 0, 0);

        void t_MMapDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(MMapDirectory), module, "MMapDirectory", 0);
        }

        void t_MMapDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "class_", make_descriptor(MMapDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "wrapfn_", make_descriptor(t_MMapDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(MMapDirectory::initializeClass);
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "DEFAULT_MAX_BUFF", make_descriptor(MMapDirectory::DEFAULT_MAX_BUFF));
          PyDict_SetItemString(PY_TYPE(MMapDirectory).tp_dict, "UNMAP_SUPPORTED", make_descriptor(MMapDirectory::UNMAP_SUPPORTED));
        }

        static PyObject *t_MMapDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MMapDirectory::initializeClass, 1)))
            return NULL;
          return t_MMapDirectory::wrap_Object(MMapDirectory(((t_MMapDirectory *) arg)->object.this$));
        }
        static PyObject *t_MMapDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MMapDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MMapDirectory_init_(t_MMapDirectory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = MMapDirectory(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = MMapDirectory(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::io::File a0((jobject) NULL);
              ::org::apache::lucene::store::LockFactory a1((jobject) NULL);
              jint a2;
              MMapDirectory object((jobject) NULL);

              if (!parseArgs(args, "kkI", ::java::io::File::initializeClass, ::org::apache::lucene::store::LockFactory::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = MMapDirectory(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MMapDirectory_getMaxChunkSize(t_MMapDirectory *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getMaxChunkSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MMapDirectory_getUseUnmap(t_MMapDirectory *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseUnmap());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MMapDirectory_openInput(t_MMapDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(MMapDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_MMapDirectory_setUseUnmap(t_MMapDirectory *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.setUseUnmap(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setUseUnmap", arg);
          return NULL;
        }

        static PyObject *t_MMapDirectory_get__maxChunkSize(t_MMapDirectory *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getMaxChunkSize());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_MMapDirectory_get__useUnmap(t_MMapDirectory *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseUnmap());
          Py_RETURN_BOOL(value);
        }
        static int t_MMapDirectory_set__useUnmap(t_MMapDirectory *self, PyObject *arg, void *data)
        {
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object.setUseUnmap(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "useUnmap", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsConsumer.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/codecs/TermStats.h"
#include "org/apache/lucene/util/FixedBitSet.h"
#include "org/apache/lucene/index/FieldInfo$IndexOptions.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsConsumer::class$ = NULL;
        jmethodID *PostingsConsumer::mids$ = NULL;
        bool PostingsConsumer::live$ = false;

        jclass PostingsConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addPosition_d481f39e] = env->getMethodID(cls, "addPosition", "(ILorg/apache/lucene/util/BytesRef;II)V");
            mids$[mid_finishDoc_54c6a166] = env->getMethodID(cls, "finishDoc", "()V");
            mids$[mid_merge_3a3a1af6] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/MergeState;Lorg/apache/lucene/index/FieldInfo$IndexOptions;Lorg/apache/lucene/index/DocsEnum;Lorg/apache/lucene/util/FixedBitSet;)Lorg/apache/lucene/codecs/TermStats;");
            mids$[mid_startDoc_d8d154a6] = env->getMethodID(cls, "startDoc", "(II)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void PostingsConsumer::addPosition(jint a0, const ::org::apache::lucene::util::BytesRef & a1, jint a2, jint a3) const
        {
          env->callVoidMethod(this$, mids$[mid_addPosition_d481f39e], a0, a1.this$, a2, a3);
        }

        void PostingsConsumer::finishDoc() const
        {
          env->callVoidMethod(this$, mids$[mid_finishDoc_54c6a166]);
        }

        ::org::apache::lucene::codecs::TermStats PostingsConsumer::merge(const ::org::apache::lucene::index::MergeState & a0, const ::org::apache::lucene::index::FieldInfo$IndexOptions & a1, const ::org::apache::lucene::index::DocsEnum & a2, const ::org::apache::lucene::util::FixedBitSet & a3) const
        {
          return ::org::apache::lucene::codecs::TermStats(env->callObjectMethod(this$, mids$[mid_merge_3a3a1af6], a0.this$, a1.this$, a2.this$, a3.this$));
        }

        void PostingsConsumer::startDoc(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_startDoc_d8d154a6], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsConsumer_addPosition(t_PostingsConsumer *self, PyObject *args);
        static PyObject *t_PostingsConsumer_finishDoc(t_PostingsConsumer *self);
        static PyObject *t_PostingsConsumer_merge(t_PostingsConsumer *self, PyObject *args);
        static PyObject *t_PostingsConsumer_startDoc(t_PostingsConsumer *self, PyObject *args);

        static PyMethodDef t_PostingsConsumer__methods_[] = {
          DECLARE_METHOD(t_PostingsConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsConsumer, addPosition, METH_VARARGS),
          DECLARE_METHOD(t_PostingsConsumer, finishDoc, METH_NOARGS),
          DECLARE_METHOD(t_PostingsConsumer, merge, METH_VARARGS),
          DECLARE_METHOD(t_PostingsConsumer, startDoc, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsConsumer, t_PostingsConsumer, ::java::lang::Object, PostingsConsumer, abstract_init, 0, 0, 0, 0, 0);

        void t_PostingsConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsConsumer), module, "PostingsConsumer", 0);
        }

        void t_PostingsConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsConsumer).tp_dict, "class_", make_descriptor(PostingsConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsConsumer).tp_dict, "wrapfn_", make_descriptor(t_PostingsConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsConsumer::initializeClass, 1)))
            return NULL;
          return t_PostingsConsumer::wrap_Object(PostingsConsumer(((t_PostingsConsumer *) arg)->object.this$));
        }
        static PyObject *t_PostingsConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsConsumer_addPosition(t_PostingsConsumer *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint a2;
          jint a3;

          if (!parseArgs(args, "IkII", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(self->object.addPosition(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addPosition", args);
          return NULL;
        }

        static PyObject *t_PostingsConsumer_finishDoc(t_PostingsConsumer *self)
        {
          OBJ_CALL(self->object.finishDoc());
          Py_RETURN_NONE;
        }

        static PyObject *t_PostingsConsumer_merge(t_PostingsConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::MergeState a0((jobject) NULL);
          ::org::apache::lucene::index::FieldInfo$IndexOptions a1((jobject) NULL);
          PyTypeObject **p1;
          ::org::apache::lucene::index::DocsEnum a2((jobject) NULL);
          ::org::apache::lucene::util::FixedBitSet a3((jobject) NULL);
          ::org::apache::lucene::codecs::TermStats result((jobject) NULL);

          if (!parseArgs(args, "kKkk", ::org::apache::lucene::index::MergeState::initializeClass, ::org::apache::lucene::index::FieldInfo$IndexOptions::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, ::org::apache::lucene::util::FixedBitSet::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_FieldInfo$IndexOptions::parameters_, &a2, &a3))
          {
            OBJ_CALL(result = self->object.merge(a0, a1, a2, a3));
            return ::org::apache::lucene::codecs::t_TermStats::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "merge", args);
          return NULL;
        }

        static PyObject *t_PostingsConsumer_startDoc(t_PostingsConsumer *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.startDoc(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "startDoc", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LinearFloatFunction.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LinearFloatFunction::class$ = NULL;
            jmethodID *LinearFloatFunction::mids$ = NULL;
            bool LinearFloatFunction::live$ = false;

            jclass LinearFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LinearFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_bdda54b0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FF)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LinearFloatFunction::LinearFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_bdda54b0, a0.this$, a1, a2)) {}

            void LinearFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String LinearFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean LinearFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues LinearFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint LinearFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LinearFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LinearFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LinearFloatFunction_init_(t_LinearFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LinearFloatFunction_createWeight(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_description(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_equals(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_getValues(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_hashCode(t_LinearFloatFunction *self, PyObject *args);

            static PyMethodDef t_LinearFloatFunction__methods_[] = {
              DECLARE_METHOD(t_LinearFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LinearFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LinearFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LinearFloatFunction, t_LinearFloatFunction, ::org::apache::lucene::queries::function::ValueSource, LinearFloatFunction, t_LinearFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_LinearFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(LinearFloatFunction), module, "LinearFloatFunction", 0);
            }

            void t_LinearFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LinearFloatFunction).tp_dict, "class_", make_descriptor(LinearFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LinearFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_LinearFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LinearFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LinearFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LinearFloatFunction::initializeClass, 1)))
                return NULL;
              return t_LinearFloatFunction::wrap_Object(LinearFloatFunction(((t_LinearFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_LinearFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LinearFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LinearFloatFunction_init_(t_LinearFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              LinearFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = LinearFloatFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LinearFloatFunction_createWeight(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_LinearFloatFunction_description(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LinearFloatFunction_equals(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LinearFloatFunction_getValues(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LinearFloatFunction_hashCode(t_LinearFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/DFRSimilarity.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicModel.h"
#include "org/apache/lucene/search/similarities/AfterEffect.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *DFRSimilarity::class$ = NULL;
          jmethodID *DFRSimilarity::mids$ = NULL;
          bool DFRSimilarity::live$ = false;

          jclass DFRSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/DFRSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0c253c94] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/BasicModel;Lorg/apache/lucene/search/similarities/AfterEffect;Lorg/apache/lucene/search/similarities/Normalization;)V");
              mids$[mid_getAfterEffect_b58cd920] = env->getMethodID(cls, "getAfterEffect", "()Lorg/apache/lucene/search/similarities/AfterEffect;");
              mids$[mid_getBasicModel_05e8921f] = env->getMethodID(cls, "getBasicModel", "()Lorg/apache/lucene/search/similarities/BasicModel;");
              mids$[mid_getNormalization_d2e76e28] = env->getMethodID(cls, "getNormalization", "()Lorg/apache/lucene/search/similarities/Normalization;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DFRSimilarity::DFRSimilarity(const ::org::apache::lucene::search::similarities::BasicModel & a0, const ::org::apache::lucene::search::similarities::AfterEffect & a1, const ::org::apache::lucene::search::similarities::Normalization & a2) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_0c253c94, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::similarities::AfterEffect DFRSimilarity::getAfterEffect() const
          {
            return ::org::apache::lucene::search::similarities::AfterEffect(env->callObjectMethod(this$, mids$[mid_getAfterEffect_b58cd920]));
          }

          ::org::apache::lucene::search::similarities::BasicModel DFRSimilarity::getBasicModel() const
          {
            return ::org::apache::lucene::search::similarities::BasicModel(env->callObjectMethod(this$, mids$[mid_getBasicModel_05e8921f]));
          }

          ::org::apache::lucene::search::similarities::Normalization DFRSimilarity::getNormalization() const
          {
            return ::org::apache::lucene::search::similarities::Normalization(env->callObjectMethod(this$, mids$[mid_getNormalization_d2e76e28]));
          }

          ::java::lang::String DFRSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_DFRSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DFRSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DFRSimilarity_init_(t_DFRSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DFRSimilarity_getAfterEffect(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_getBasicModel(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_getNormalization(t_DFRSimilarity *self);
          static PyObject *t_DFRSimilarity_toString(t_DFRSimilarity *self, PyObject *args);
          static PyObject *t_DFRSimilarity_get__afterEffect(t_DFRSimilarity *self, void *data);
          static PyObject *t_DFRSimilarity_get__basicModel(t_DFRSimilarity *self, void *data);
          static PyObject *t_DFRSimilarity_get__normalization(t_DFRSimilarity *self, void *data);
          static PyGetSetDef t_DFRSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_DFRSimilarity, afterEffect),
            DECLARE_GET_FIELD(t_DFRSimilarity, basicModel),
            DECLARE_GET_FIELD(t_DFRSimilarity, normalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DFRSimilarity__methods_[] = {
            DECLARE_METHOD(t_DFRSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DFRSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DFRSimilarity, getAfterEffect, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, getBasicModel, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, getNormalization, METH_NOARGS),
            DECLARE_METHOD(t_DFRSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DFRSimilarity, t_DFRSimilarity, ::org::apache::lucene::search::similarities::SimilarityBase, DFRSimilarity, t_DFRSimilarity_init_, 0, 0, t_DFRSimilarity__fields_, 0, 0);

          void t_DFRSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(DFRSimilarity), module, "DFRSimilarity", 0);
          }

          void t_DFRSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DFRSimilarity).tp_dict, "class_", make_descriptor(DFRSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DFRSimilarity).tp_dict, "wrapfn_", make_descriptor(t_DFRSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DFRSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DFRSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DFRSimilarity::initializeClass, 1)))
              return NULL;
            return t_DFRSimilarity::wrap_Object(DFRSimilarity(((t_DFRSimilarity *) arg)->object.this$));
          }
          static PyObject *t_DFRSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DFRSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DFRSimilarity_init_(t_DFRSimilarity *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::similarities::BasicModel a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::AfterEffect a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Normalization a2((jobject) NULL);
            DFRSimilarity object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::similarities::BasicModel::initializeClass, ::org::apache::lucene::search::similarities::AfterEffect::initializeClass, ::org::apache::lucene::search::similarities::Normalization::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = DFRSimilarity(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DFRSimilarity_getAfterEffect(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::AfterEffect result((jobject) NULL);
            OBJ_CALL(result = self->object.getAfterEffect());
            return ::org::apache::lucene::search::similarities::t_AfterEffect::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_getBasicModel(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::BasicModel result((jobject) NULL);
            OBJ_CALL(result = self->object.getBasicModel());
            return ::org::apache::lucene::search::similarities::t_BasicModel::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_getNormalization(t_DFRSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Normalization result((jobject) NULL);
            OBJ_CALL(result = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(result);
          }

          static PyObject *t_DFRSimilarity_toString(t_DFRSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(DFRSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_DFRSimilarity_get__afterEffect(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::AfterEffect value((jobject) NULL);
            OBJ_CALL(value = self->object.getAfterEffect());
            return ::org::apache::lucene::search::similarities::t_AfterEffect::wrap_Object(value);
          }

          static PyObject *t_DFRSimilarity_get__basicModel(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::BasicModel value((jobject) NULL);
            OBJ_CALL(value = self->object.getBasicModel());
            return ::org::apache::lucene::search::similarities::t_BasicModel::wrap_Object(value);
          }

          static PyObject *t_DFRSimilarity_get__normalization(t_DFRSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Normalization value((jobject) NULL);
            OBJ_CALL(value = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/DataInput.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Cloneable.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *DataInput::class$ = NULL;
        jmethodID *DataInput::mids$ = NULL;
        bool DataInput::live$ = false;

        jclass DataInput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/DataInput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clone_3fcc829c] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/store/DataInput;");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_readBytes_717964e8] = env->getMethodID(cls, "readBytes", "([BIIZ)V");
            mids$[mid_readInt_54c6a179] = env->getMethodID(cls, "readInt", "()I");
            mids$[mid_readLong_54c6a17a] = env->getMethodID(cls, "readLong", "()J");
            mids$[mid_readShort_54c6a163] = env->getMethodID(cls, "readShort", "()S");
            mids$[mid_readString_14c7b5c5] = env->getMethodID(cls, "readString", "()Ljava/lang/String;");
            mids$[mid_readStringSet_03e99967] = env->getMethodID(cls, "readStringSet", "()Ljava/util/Set;");
            mids$[mid_readStringStringMap_db60befd] = env->getMethodID(cls, "readStringStringMap", "()Ljava/util/Map;");
            mids$[mid_readVInt_54c6a179] = env->getMethodID(cls, "readVInt", "()I");
            mids$[mid_readVLong_54c6a17a] = env->getMethodID(cls, "readVLong", "()J");
            mids$[mid_skipBytes_0ee6df2f] = env->getMethodID(cls, "skipBytes", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        DataInput::DataInput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        DataInput DataInput::clone() const
        {
          return DataInput(env->callObjectMethod(this$, mids$[mid_clone_3fcc829c]));
        }

        jbyte DataInput::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void DataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void DataInput::readBytes(const JArray< jbyte > & a0, jint a1, jint a2, jboolean a3) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_717964e8], a0.this$, a1, a2, a3);
        }

        jint DataInput::readInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readInt_54c6a179]);
        }

        jlong DataInput::readLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readLong_54c6a17a]);
        }

        jshort DataInput::readShort() const
        {
          return env->callShortMethod(this$, mids$[mid_readShort_54c6a163]);
        }

        ::java::lang::String DataInput::readString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readString_14c7b5c5]));
        }

        ::java::util::Set DataInput::readStringSet() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_readStringSet_03e99967]));
        }

        ::java::util::Map DataInput::readStringStringMap() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_readStringStringMap_db60befd]));
        }

        jint DataInput::readVInt() const
        {
          return env->callIntMethod(this$, mids$[mid_readVInt_54c6a179]);
        }

        jlong DataInput::readVLong() const
        {
          return env->callLongMethod(this$, mids$[mid_readVLong_54c6a17a]);
        }

        void DataInput::skipBytes(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_skipBytes_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_DataInput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DataInput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_DataInput_init_(t_DataInput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_DataInput_clone(t_DataInput *self);
        static PyObject *t_DataInput_readByte(t_DataInput *self);
        static PyObject *t_DataInput_readBytes(t_DataInput *self, PyObject *args);
        static PyObject *t_DataInput_readInt(t_DataInput *self);
        static PyObject *t_DataInput_readLong(t_DataInput *self);
        static PyObject *t_DataInput_readShort(t_DataInput *self);
        static PyObject *t_DataInput_readString(t_DataInput *self);
        static PyObject *t_DataInput_readStringSet(t_DataInput *self);
        static PyObject *t_DataInput_readStringStringMap(t_DataInput *self);
        static PyObject *t_DataInput_readVInt(t_DataInput *self);
        static PyObject *t_DataInput_readVLong(t_DataInput *self);
        static PyObject *t_DataInput_skipBytes(t_DataInput *self, PyObject *arg);

        static PyMethodDef t_DataInput__methods_[] = {
          DECLARE_METHOD(t_DataInput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataInput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DataInput, clone, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readByte, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_DataInput, readInt, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readLong, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readShort, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readString, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readStringSet, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readStringStringMap, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readVInt, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, readVLong, METH_NOARGS),
          DECLARE_METHOD(t_DataInput, skipBytes, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DataInput, t_DataInput, ::java::lang::Object, DataInput, t_DataInput_init_, 0, 0, 0, 0, 0);

        void t_DataInput::install(PyObject *module)
        {
          installType(&PY_TYPE(DataInput), module, "DataInput", 0);
        }

        void t_DataInput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DataInput).tp_dict, "class_", make_descriptor(DataInput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DataInput).tp_dict, "wrapfn_", make_descriptor(t_DataInput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DataInput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DataInput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DataInput::initializeClass, 1)))
            return NULL;
          return t_DataInput::wrap_Object(DataInput(((t_DataInput *) arg)->object.this$));
        }
        static PyObject *t_DataInput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DataInput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_DataInput_init_(t_DataInput *self, PyObject *args, PyObject *kwds)
        {
          DataInput object((jobject) NULL);

          INT_CALL(object = DataInput());
          self->object = object;

          return 0;
        }

        static PyObject *t_DataInput_clone(t_DataInput *self)
        {
          DataInput result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_DataInput::wrap_Object(result);
        }

        static PyObject *t_DataInput_readByte(t_DataInput *self)
        {
          jbyte result;
          OBJ_CALL(result = self->object.readByte());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readBytes(t_DataInput *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;

              if (!parseArgs(args, "[BII", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
            break;
           case 4:
            {
              JArray< jbyte > a0((jobject) NULL);
              jint a1;
              jint a2;
              jboolean a3;

              if (!parseArgs(args, "[BIIZ", &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(self->object.readBytes(a0, a1, a2, a3));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "readBytes", args);
          return NULL;
        }

        static PyObject *t_DataInput_readInt(t_DataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readInt());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readLong(t_DataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.readLong());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DataInput_readShort(t_DataInput *self)
        {
          jshort result;
          OBJ_CALL(result = self->object.readShort());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readString(t_DataInput *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.readString());
          return j2p(result);
        }

        static PyObject *t_DataInput_readStringSet(t_DataInput *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.readStringSet());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DataInput_readStringStringMap(t_DataInput *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.readStringStringMap());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DataInput_readVInt(t_DataInput *self)
        {
          jint result;
          OBJ_CALL(result = self->object.readVInt());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_DataInput_readVLong(t_DataInput *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.readVLong());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DataInput_skipBytes(t_DataInput *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.skipBytes(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "skipBytes", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *NumericRangeQueryNode::class$ = NULL;
              jmethodID *NumericRangeQueryNode::mids$ = NULL;
              jfieldID *NumericRangeQueryNode::fids$ = NULL;
              bool NumericRangeQueryNode::live$ = false;

              jclass NumericRangeQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/NumericRangeQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_b6ec7fba] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;ZZLorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;)V");
                  mids$[mid_getNumericConfig_4e1c9c59] = env->getMethodID(cls, "getNumericConfig", "()Lorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;");
                  mids$[mid_setBounds_b6ec7fba] = env->getMethodID(cls, "setBounds", "(Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;Lorg/apache/lucene/queryparser/flexible/standard/nodes/NumericQueryNode;ZZLorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;)V");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  fids$ = new jfieldID[max_fid];
                  fids$[fid_numericConfig] = env->getFieldID(cls, "numericConfig", "Lorg/apache/lucene/queryparser/flexible/standard/config/NumericConfig;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericRangeQueryNode::NumericRangeQueryNode(const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig & a4) : ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode(env->newObject(initializeClass, &mids$, mid_init$_b6ec7fba, a0.this$, a1.this$, a2, a3, a4.this$)) {}

              ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig NumericRangeQueryNode::getNumericConfig() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig(env->callObjectMethod(this$, mids$[mid_getNumericConfig_4e1c9c59]));
              }

              void NumericRangeQueryNode::setBounds(const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a0, const ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig & a4) const
              {
                env->callVoidMethod(this$, mids$[mid_setBounds_b6ec7fba], a0.this$, a1.this$, a2, a3, a4.this$);
              }

              ::java::lang::String NumericRangeQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }

              ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig NumericRangeQueryNode::_get_numericConfig() const
              {
                return ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig(env->getObjectField(this$, fids$[fid_numericConfig]));
              }

              void NumericRangeQueryNode::_set_numericConfig(const ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig & a0) const
              {
                env->setObjectField(this$, fids$[fid_numericConfig], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_NumericRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNode_of_(t_NumericRangeQueryNode *self, PyObject *args);
              static int t_NumericRangeQueryNode_init_(t_NumericRangeQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericRangeQueryNode_getNumericConfig(t_NumericRangeQueryNode *self);
              static PyObject *t_NumericRangeQueryNode_setBounds(t_NumericRangeQueryNode *self, PyObject *args);
              static PyObject *t_NumericRangeQueryNode_toString(t_NumericRangeQueryNode *self, PyObject *args);

              static PyObject *t_NumericRangeQueryNode_get__numericConfig(t_NumericRangeQueryNode *self, void *data);
              static PyObject *t_NumericRangeQueryNode_get__parameters_(t_NumericRangeQueryNode *self, void *data);
              static PyGetSetDef t_NumericRangeQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_NumericRangeQueryNode, numericConfig),
                DECLARE_GET_FIELD(t_NumericRangeQueryNode, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_NumericRangeQueryNode__methods_[] = {
                DECLARE_METHOD(t_NumericRangeQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNode, of_, METH_VARARGS),
                DECLARE_METHOD(t_NumericRangeQueryNode, getNumericConfig, METH_NOARGS),
                DECLARE_METHOD(t_NumericRangeQueryNode, setBounds, METH_VARARGS),
                DECLARE_METHOD(t_NumericRangeQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericRangeQueryNode, t_NumericRangeQueryNode, ::org::apache::lucene::queryparser::flexible::standard::nodes::AbstractRangeQueryNode, NumericRangeQueryNode, t_NumericRangeQueryNode_init_, 0, 0, t_NumericRangeQueryNode__fields_, 0, 0);
              PyObject *t_NumericRangeQueryNode::wrap_Object(const NumericRangeQueryNode& object, PyTypeObject *p0)
              {
                PyObject *obj = t_NumericRangeQueryNode::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_NumericRangeQueryNode *self = (t_NumericRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_NumericRangeQueryNode::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_NumericRangeQueryNode::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_NumericRangeQueryNode *self = (t_NumericRangeQueryNode *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_NumericRangeQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericRangeQueryNode), module, "NumericRangeQueryNode", 0);
              }

              void t_NumericRangeQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNode).tp_dict, "class_", make_descriptor(NumericRangeQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNode).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericRangeQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericRangeQueryNode::initializeClass, 1)))
                  return NULL;
                return t_NumericRangeQueryNode::wrap_Object(NumericRangeQueryNode(((t_NumericRangeQueryNode *) arg)->object.this$));
              }
              static PyObject *t_NumericRangeQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericRangeQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_NumericRangeQueryNode_of_(t_NumericRangeQueryNode *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static int t_NumericRangeQueryNode_init_(t_NumericRangeQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig a4((jobject) NULL);
                NumericRangeQueryNode object((jobject) NULL);

                if (!parseArgs(args, "kkZZk", ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = NumericRangeQueryNode(a0, a1, a2, a3, a4));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::queryparser::flexible::standard::nodes::PY_TYPE(NumericQueryNode);
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericRangeQueryNode_getNumericConfig(t_NumericRangeQueryNode *self)
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig result((jobject) NULL);
                OBJ_CALL(result = self->object.getNumericConfig());
                return ::org::apache::lucene::queryparser::flexible::standard::config::t_NumericConfig::wrap_Object(result);
              }

              static PyObject *t_NumericRangeQueryNode_setBounds(t_NumericRangeQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode a1((jobject) NULL);
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig a4((jobject) NULL);

                if (!parseArgs(args, "kkZZk", ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::nodes::NumericQueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(self->object.setBounds(a0, a1, a2, a3, a4));
                  Py_RETURN_NONE;
                }

                return callSuper(&PY_TYPE(NumericRangeQueryNode), (PyObject *) self, "setBounds", args, 2);
              }

              static PyObject *t_NumericRangeQueryNode_toString(t_NumericRangeQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(NumericRangeQueryNode), (PyObject *) self, "toString", args, 2);
              }
              static PyObject *t_NumericRangeQueryNode_get__parameters_(t_NumericRangeQueryNode *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }

              static PyObject *t_NumericRangeQueryNode_get__numericConfig(t_NumericRangeQueryNode *self, void *data)
              {
                ::org::apache::lucene::queryparser::flexible::standard::config::NumericConfig value((jobject) NULL);
                OBJ_CALL(value = self->object.getNumericConfig());
                return ::org::apache::lucene::queryparser::flexible::standard::config::t_NumericConfig::wrap_Object(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *ReciprocalFloatFunction::class$ = NULL;
            jmethodID *ReciprocalFloatFunction::mids$ = NULL;
            bool ReciprocalFloatFunction::live$ = false;

            jclass ReciprocalFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/ReciprocalFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_64f8c2b9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FFF)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ReciprocalFloatFunction::ReciprocalFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2, jfloat a3) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_64f8c2b9, a0.this$, a1, a2, a3)) {}

            void ReciprocalFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String ReciprocalFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean ReciprocalFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues ReciprocalFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint ReciprocalFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_ReciprocalFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ReciprocalFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ReciprocalFloatFunction_init_(t_ReciprocalFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ReciprocalFloatFunction_createWeight(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_description(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_equals(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_getValues(t_ReciprocalFloatFunction *self, PyObject *args);
            static PyObject *t_ReciprocalFloatFunction_hashCode(t_ReciprocalFloatFunction *self, PyObject *args);

            static PyMethodDef t_ReciprocalFloatFunction__methods_[] = {
              DECLARE_METHOD(t_ReciprocalFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_ReciprocalFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ReciprocalFloatFunction, t_ReciprocalFloatFunction, ::org::apache::lucene::queries::function::ValueSource, ReciprocalFloatFunction, t_ReciprocalFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_ReciprocalFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(ReciprocalFloatFunction), module, "ReciprocalFloatFunction", 0);
            }

            void t_ReciprocalFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ReciprocalFloatFunction).tp_dict, "class_", make_descriptor(ReciprocalFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ReciprocalFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_ReciprocalFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ReciprocalFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ReciprocalFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ReciprocalFloatFunction::initializeClass, 1)))
                return NULL;
              return t_ReciprocalFloatFunction::wrap_Object(ReciprocalFloatFunction(((t_ReciprocalFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_ReciprocalFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ReciprocalFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ReciprocalFloatFunction_init_(t_ReciprocalFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              jfloat a3;
              ReciprocalFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = ReciprocalFloatFunction(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ReciprocalFloatFunction_createWeight(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_description(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_equals(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_getValues(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_ReciprocalFloatFunction_hashCode(t_ReciprocalFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(ReciprocalFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ru/RussianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {

          ::java::lang::Class *RussianAnalyzer::class$ = NULL;
          jmethodID *RussianAnalyzer::mids$ = NULL;
          bool RussianAnalyzer::live$ = false;
          ::java::lang::String *RussianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass RussianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ru/RussianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          RussianAnalyzer::RussianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet RussianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ru {
          static PyObject *t_RussianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_RussianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_RussianAnalyzer_init_(t_RussianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_RussianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_RussianAnalyzer_get__defaultStopSet(t_RussianAnalyzer *self, void *data);
          static PyGetSetDef t_RussianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_RussianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_RussianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_RussianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RussianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(RussianAnalyzer, t_RussianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, RussianAnalyzer, t_RussianAnalyzer_init_, 0, 0, t_RussianAnalyzer__fields_, 0, 0);

          void t_RussianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(RussianAnalyzer), module, "RussianAnalyzer", 0);
          }

          void t_RussianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "class_", make_descriptor(RussianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_RussianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(RussianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(RussianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*RussianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_RussianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, RussianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_RussianAnalyzer::wrap_Object(RussianAnalyzer(((t_RussianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_RussianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, RussianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_RussianAnalyzer_init_(t_RussianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                RussianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = RussianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_RussianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::ru::RussianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_RussianAnalyzer_get__defaultStopSet(t_RussianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/EnglishStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *EnglishStemmer::class$ = NULL;
        jmethodID *EnglishStemmer::mids$ = NULL;
        bool EnglishStemmer::live$ = false;

        jclass EnglishStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/EnglishStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        EnglishStemmer::EnglishStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean EnglishStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint EnglishStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean EnglishStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_EnglishStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_EnglishStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_EnglishStemmer_init_(t_EnglishStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_EnglishStemmer_equals(t_EnglishStemmer *self, PyObject *args);
        static PyObject *t_EnglishStemmer_hashCode(t_EnglishStemmer *self, PyObject *args);
        static PyObject *t_EnglishStemmer_stem(t_EnglishStemmer *self, PyObject *args);

        static PyMethodDef t_EnglishStemmer__methods_[] = {
          DECLARE_METHOD(t_EnglishStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_EnglishStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_EnglishStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_EnglishStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_EnglishStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(EnglishStemmer, t_EnglishStemmer, ::org::tartarus::snowball::SnowballProgram, EnglishStemmer, t_EnglishStemmer_init_, 0, 0, 0, 0, 0);

        void t_EnglishStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(EnglishStemmer), module, "EnglishStemmer", 0);
        }

        void t_EnglishStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(EnglishStemmer).tp_dict, "class_", make_descriptor(EnglishStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(EnglishStemmer).tp_dict, "wrapfn_", make_descriptor(t_EnglishStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(EnglishStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_EnglishStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, EnglishStemmer::initializeClass, 1)))
            return NULL;
          return t_EnglishStemmer::wrap_Object(EnglishStemmer(((t_EnglishStemmer *) arg)->object.this$));
        }
        static PyObject *t_EnglishStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, EnglishStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_EnglishStemmer_init_(t_EnglishStemmer *self, PyObject *args, PyObject *kwds)
        {
          EnglishStemmer object((jobject) NULL);

          INT_CALL(object = EnglishStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_EnglishStemmer_equals(t_EnglishStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(EnglishStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_EnglishStemmer_hashCode(t_EnglishStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(EnglishStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_EnglishStemmer_stem(t_EnglishStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(EnglishStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishAnalyzer.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishAnalyzer::class$ = NULL;
          jmethodID *EnglishAnalyzer::mids$ = NULL;
          bool EnglishAnalyzer::live$ = false;

          jclass EnglishAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          EnglishAnalyzer::EnglishAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet EnglishAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishAnalyzer_init_(t_EnglishAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_EnglishAnalyzer_get__defaultStopSet(t_EnglishAnalyzer *self, void *data);
          static PyGetSetDef t_EnglishAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_EnglishAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EnglishAnalyzer__methods_[] = {
            DECLARE_METHOD(t_EnglishAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishAnalyzer, t_EnglishAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, EnglishAnalyzer, t_EnglishAnalyzer_init_, 0, 0, t_EnglishAnalyzer__fields_, 0, 0);

          void t_EnglishAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishAnalyzer), module, "EnglishAnalyzer", 0);
          }

          void t_EnglishAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishAnalyzer).tp_dict, "class_", make_descriptor(EnglishAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_EnglishAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishAnalyzer::initializeClass, 1)))
              return NULL;
            return t_EnglishAnalyzer::wrap_Object(EnglishAnalyzer(((t_EnglishAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_EnglishAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishAnalyzer_init_(t_EnglishAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                EnglishAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = EnglishAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::en::EnglishAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_EnglishAnalyzer_get__defaultStopSet(t_EnglishAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/EmptyTokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *EmptyTokenStream::class$ = NULL;
          jmethodID *EmptyTokenStream::mids$ = NULL;
          bool EmptyTokenStream::live$ = false;

          jclass EmptyTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/EmptyTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EmptyTokenStream::EmptyTokenStream() : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean EmptyTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_EmptyTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EmptyTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EmptyTokenStream_init_(t_EmptyTokenStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EmptyTokenStream_incrementToken(t_EmptyTokenStream *self, PyObject *args);

          static PyMethodDef t_EmptyTokenStream__methods_[] = {
            DECLARE_METHOD(t_EmptyTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EmptyTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EmptyTokenStream, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EmptyTokenStream, t_EmptyTokenStream, ::org::apache::lucene::analysis::TokenStream, EmptyTokenStream, t_EmptyTokenStream_init_, 0, 0, 0, 0, 0);

          void t_EmptyTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(EmptyTokenStream), module, "EmptyTokenStream", 0);
          }

          void t_EmptyTokenStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EmptyTokenStream).tp_dict, "class_", make_descriptor(EmptyTokenStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EmptyTokenStream).tp_dict, "wrapfn_", make_descriptor(t_EmptyTokenStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EmptyTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EmptyTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EmptyTokenStream::initializeClass, 1)))
              return NULL;
            return t_EmptyTokenStream::wrap_Object(EmptyTokenStream(((t_EmptyTokenStream *) arg)->object.this$));
          }
          static PyObject *t_EmptyTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EmptyTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EmptyTokenStream_init_(t_EmptyTokenStream *self, PyObject *args, PyObject *kwds)
          {
            EmptyTokenStream object((jobject) NULL);

            INT_CALL(object = EmptyTokenStream());
            self->object = object;

            return 0;
          }

          static PyObject *t_EmptyTokenStream_incrementToken(t_EmptyTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EmptyTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter.h"
#include "org/apache/lucene/search/Filter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *FixedBitSetCachingWrapperFilter::class$ = NULL;
          jmethodID *FixedBitSetCachingWrapperFilter::mids$ = NULL;
          bool FixedBitSetCachingWrapperFilter::live$ = false;

          jclass FixedBitSetCachingWrapperFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_docIdSetToCache_5fee2a54] = env->getMethodID(cls, "docIdSetToCache", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/search/DocIdSet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FixedBitSetCachingWrapperFilter::FixedBitSetCachingWrapperFilter(const ::org::apache::lucene::search::Filter & a0) : ::org::apache::lucene::search::CachingWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_FixedBitSetCachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FixedBitSetCachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FixedBitSetCachingWrapperFilter_init_(t_FixedBitSetCachingWrapperFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_FixedBitSetCachingWrapperFilter__methods_[] = {
            DECLARE_METHOD(t_FixedBitSetCachingWrapperFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixedBitSetCachingWrapperFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FixedBitSetCachingWrapperFilter, t_FixedBitSetCachingWrapperFilter, ::org::apache::lucene::search::CachingWrapperFilter, FixedBitSetCachingWrapperFilter, t_FixedBitSetCachingWrapperFilter_init_, 0, 0, 0, 0, 0);

          void t_FixedBitSetCachingWrapperFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FixedBitSetCachingWrapperFilter), module, "FixedBitSetCachingWrapperFilter", 0);
          }

          void t_FixedBitSetCachingWrapperFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FixedBitSetCachingWrapperFilter).tp_dict, "class_", make_descriptor(FixedBitSetCachingWrapperFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FixedBitSetCachingWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_FixedBitSetCachingWrapperFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FixedBitSetCachingWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FixedBitSetCachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FixedBitSetCachingWrapperFilter::initializeClass, 1)))
              return NULL;
            return t_FixedBitSetCachingWrapperFilter::wrap_Object(FixedBitSetCachingWrapperFilter(((t_FixedBitSetCachingWrapperFilter *) arg)->object.this$));
          }
          static PyObject *t_FixedBitSetCachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FixedBitSetCachingWrapperFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FixedBitSetCachingWrapperFilter_init_(t_FixedBitSetCachingWrapperFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Filter a0((jobject) NULL);
            FixedBitSetCachingWrapperFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
            {
              INT_CALL(object = FixedBitSetCachingWrapperFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemmer::class$ = NULL;
          jmethodID *SwedishLightStemmer::mids$ = NULL;
          bool SwedishLightStemmer::live$ = false;

          jclass SwedishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemmer::SwedishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SwedishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemmer_init_(t_SwedishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemmer_stem(t_SwedishLightStemmer *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishLightStemmer, t_SwedishLightStemmer, ::java::lang::Object, SwedishLightStemmer, t_SwedishLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_SwedishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemmer), module, "SwedishLightStemmer", 0);
          }

          void t_SwedishLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishLightStemmer).tp_dict, "class_", make_descriptor(SwedishLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_SwedishLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SwedishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemmer::wrap_Object(SwedishLightStemmer(((t_SwedishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemmer_init_(t_SwedishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            SwedishLightStemmer object((jobject) NULL);

            INT_CALL(object = SwedishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SwedishLightStemmer_stem(t_SwedishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/Lucene47WordDelimiterFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *Lucene47WordDelimiterFilter::class$ = NULL;
          jmethodID *Lucene47WordDelimiterFilter::mids$ = NULL;
          bool Lucene47WordDelimiterFilter::live$ = false;
          jint Lucene47WordDelimiterFilter::ALPHA = (jint) 0;
          jint Lucene47WordDelimiterFilter::ALPHANUM = (jint) 0;
          jint Lucene47WordDelimiterFilter::CATENATE_ALL = (jint) 0;
          jint Lucene47WordDelimiterFilter::CATENATE_NUMBERS = (jint) 0;
          jint Lucene47WordDelimiterFilter::CATENATE_WORDS = (jint) 0;
          jint Lucene47WordDelimiterFilter::DIGIT = (jint) 0;
          jint Lucene47WordDelimiterFilter::GENERATE_NUMBER_PARTS = (jint) 0;
          jint Lucene47WordDelimiterFilter::GENERATE_WORD_PARTS = (jint) 0;
          jint Lucene47WordDelimiterFilter::LOWER = (jint) 0;
          jint Lucene47WordDelimiterFilter::PRESERVE_ORIGINAL = (jint) 0;
          jint Lucene47WordDelimiterFilter::SPLIT_ON_CASE_CHANGE = (jint) 0;
          jint Lucene47WordDelimiterFilter::SPLIT_ON_NUMERICS = (jint) 0;
          jint Lucene47WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE = (jint) 0;
          jint Lucene47WordDelimiterFilter::SUBWORD_DELIM = (jint) 0;
          jint Lucene47WordDelimiterFilter::UPPER = (jint) 0;

          jclass Lucene47WordDelimiterFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/Lucene47WordDelimiterFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_70257dbd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;ILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_06e41d2a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;[BILorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              ALPHA = env->getStaticIntField(cls, "ALPHA");
              ALPHANUM = env->getStaticIntField(cls, "ALPHANUM");
              CATENATE_ALL = env->getStaticIntField(cls, "CATENATE_ALL");
              CATENATE_NUMBERS = env->getStaticIntField(cls, "CATENATE_NUMBERS");
              CATENATE_WORDS = env->getStaticIntField(cls, "CATENATE_WORDS");
              DIGIT = env->getStaticIntField(cls, "DIGIT");
              GENERATE_NUMBER_PARTS = env->getStaticIntField(cls, "GENERATE_NUMBER_PARTS");
              GENERATE_WORD_PARTS = env->getStaticIntField(cls, "GENERATE_WORD_PARTS");
              LOWER = env->getStaticIntField(cls, "LOWER");
              PRESERVE_ORIGINAL = env->getStaticIntField(cls, "PRESERVE_ORIGINAL");
              SPLIT_ON_CASE_CHANGE = env->getStaticIntField(cls, "SPLIT_ON_CASE_CHANGE");
              SPLIT_ON_NUMERICS = env->getStaticIntField(cls, "SPLIT_ON_NUMERICS");
              STEM_ENGLISH_POSSESSIVE = env->getStaticIntField(cls, "STEM_ENGLISH_POSSESSIVE");
              SUBWORD_DELIM = env->getStaticIntField(cls, "SUBWORD_DELIM");
              UPPER = env->getStaticIntField(cls, "UPPER");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene47WordDelimiterFilter::Lucene47WordDelimiterFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_70257dbd, a0.this$, a1, a2.this$)) {}

          Lucene47WordDelimiterFilter::Lucene47WordDelimiterFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const JArray< jbyte > & a1, jint a2, const ::org::apache::lucene::analysis::util::CharArraySet & a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_06e41d2a, a0.this$, a1.this$, a2, a3.this$)) {}

          jboolean Lucene47WordDelimiterFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void Lucene47WordDelimiterFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_Lucene47WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene47WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene47WordDelimiterFilter_init_(t_Lucene47WordDelimiterFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene47WordDelimiterFilter_incrementToken(t_Lucene47WordDelimiterFilter *self, PyObject *args);
          static PyObject *t_Lucene47WordDelimiterFilter_reset(t_Lucene47WordDelimiterFilter *self, PyObject *args);

          static PyMethodDef t_Lucene47WordDelimiterFilter__methods_[] = {
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_Lucene47WordDelimiterFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene47WordDelimiterFilter, t_Lucene47WordDelimiterFilter, ::org::apache::lucene::analysis::TokenFilter, Lucene47WordDelimiterFilter, t_Lucene47WordDelimiterFilter_init_, 0, 0, 0, 0, 0);

          void t_Lucene47WordDelimiterFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene47WordDelimiterFilter), module, "Lucene47WordDelimiterFilter", 0);
          }

          void t_Lucene47WordDelimiterFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "class_", make_descriptor(Lucene47WordDelimiterFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "wrapfn_", make_descriptor(t_Lucene47WordDelimiterFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene47WordDelimiterFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "ALPHA", make_descriptor(Lucene47WordDelimiterFilter::ALPHA));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "ALPHANUM", make_descriptor(Lucene47WordDelimiterFilter::ALPHANUM));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "CATENATE_ALL", make_descriptor(Lucene47WordDelimiterFilter::CATENATE_ALL));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "CATENATE_NUMBERS", make_descriptor(Lucene47WordDelimiterFilter::CATENATE_NUMBERS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "CATENATE_WORDS", make_descriptor(Lucene47WordDelimiterFilter::CATENATE_WORDS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "DIGIT", make_descriptor(Lucene47WordDelimiterFilter::DIGIT));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "GENERATE_NUMBER_PARTS", make_descriptor(Lucene47WordDelimiterFilter::GENERATE_NUMBER_PARTS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "GENERATE_WORD_PARTS", make_descriptor(Lucene47WordDelimiterFilter::GENERATE_WORD_PARTS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "LOWER", make_descriptor(Lucene47WordDelimiterFilter::LOWER));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "PRESERVE_ORIGINAL", make_descriptor(Lucene47WordDelimiterFilter::PRESERVE_ORIGINAL));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "SPLIT_ON_CASE_CHANGE", make_descriptor(Lucene47WordDelimiterFilter::SPLIT_ON_CASE_CHANGE));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "SPLIT_ON_NUMERICS", make_descriptor(Lucene47WordDelimiterFilter::SPLIT_ON_NUMERICS));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "STEM_ENGLISH_POSSESSIVE", make_descriptor(Lucene47WordDelimiterFilter::STEM_ENGLISH_POSSESSIVE));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "SUBWORD_DELIM", make_descriptor(Lucene47WordDelimiterFilter::SUBWORD_DELIM));
            PyDict_SetItemString(PY_TYPE(Lucene47WordDelimiterFilter).tp_dict, "UPPER", make_descriptor(Lucene47WordDelimiterFilter::UPPER));
          }

          static PyObject *t_Lucene47WordDelimiterFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene47WordDelimiterFilter::initializeClass, 1)))
              return NULL;
            return t_Lucene47WordDelimiterFilter::wrap_Object(Lucene47WordDelimiterFilter(((t_Lucene47WordDelimiterFilter *) arg)->object.this$));
          }
          static PyObject *t_Lucene47WordDelimiterFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene47WordDelimiterFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene47WordDelimiterFilter_init_(t_Lucene47WordDelimiterFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                Lucene47WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "kIK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = Lucene47WordDelimiterFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                JArray< jbyte > a1((jobject) NULL);
                jint a2;
                ::org::apache::lucene::analysis::util::CharArraySet a3((jobject) NULL);
                PyTypeObject **p3;
                Lucene47WordDelimiterFilter object((jobject) NULL);

                if (!parseArgs(args, "k[BIK", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = Lucene47WordDelimiterFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lucene47WordDelimiterFilter_incrementToken(t_Lucene47WordDelimiterFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Lucene47WordDelimiterFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_Lucene47WordDelimiterFilter_reset(t_Lucene47WordDelimiterFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene47WordDelimiterFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/PrintTaxonomyStats.h"
#include "java/io/PrintStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *PrintTaxonomyStats::class$ = NULL;
          jmethodID *PrintTaxonomyStats::mids$ = NULL;
          bool PrintTaxonomyStats::live$ = false;

          jclass PrintTaxonomyStats::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/PrintTaxonomyStats");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
              mids$[mid_printStats_aafb31cf] = env->getStaticMethodID(cls, "printStats", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;Ljava/io/PrintStream;Z)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PrintTaxonomyStats::PrintTaxonomyStats() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PrintTaxonomyStats::main(const JArray< ::java::lang::String > & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
          }

          void PrintTaxonomyStats::printStats(const ::org::apache::lucene::facet::taxonomy::TaxonomyReader & a0, const ::java::io::PrintStream & a1, jboolean a2)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_printStats_aafb31cf], a0.this$, a1.this$, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_PrintTaxonomyStats_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrintTaxonomyStats_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PrintTaxonomyStats_init_(t_PrintTaxonomyStats *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PrintTaxonomyStats_main(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrintTaxonomyStats_printStats(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_PrintTaxonomyStats__methods_[] = {
            DECLARE_METHOD(t_PrintTaxonomyStats, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, main, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintTaxonomyStats, printStats, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PrintTaxonomyStats, t_PrintTaxonomyStats, ::java::lang::Object, PrintTaxonomyStats, t_PrintTaxonomyStats_init_, 0, 0, 0, 0, 0);

          void t_PrintTaxonomyStats::install(PyObject *module)
          {
            installType(&PY_TYPE(PrintTaxonomyStats), module, "PrintTaxonomyStats", 0);
          }

          void t_PrintTaxonomyStats::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PrintTaxonomyStats).tp_dict, "class_", make_descriptor(PrintTaxonomyStats::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PrintTaxonomyStats).tp_dict, "wrapfn_", make_descriptor(t_PrintTaxonomyStats::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PrintTaxonomyStats).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PrintTaxonomyStats_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PrintTaxonomyStats::initializeClass, 1)))
              return NULL;
            return t_PrintTaxonomyStats::wrap_Object(PrintTaxonomyStats(((t_PrintTaxonomyStats *) arg)->object.this$));
          }
          static PyObject *t_PrintTaxonomyStats_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PrintTaxonomyStats::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PrintTaxonomyStats_init_(t_PrintTaxonomyStats *self, PyObject *args, PyObject *kwds)
          {
            PrintTaxonomyStats object((jobject) NULL);

            INT_CALL(object = PrintTaxonomyStats());
            self->object = object;

            return 0;
          }

          static PyObject *t_PrintTaxonomyStats_main(PyTypeObject *type, PyObject *arg)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);

            if (!parseArg(arg, "[s", &a0))
            {
              OBJ_CALL(::org::apache::lucene::facet::taxonomy::PrintTaxonomyStats::main(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "main", arg);
            return NULL;
          }

          static PyObject *t_PrintTaxonomyStats_printStats(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader a0((jobject) NULL);
            ::java::io::PrintStream a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::facet::taxonomy::TaxonomyReader::initializeClass, ::java::io::PrintStream::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(::org::apache::lucene::facet::taxonomy::PrintTaxonomyStats::printStats(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "printStats", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ParserExtension.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/queryparser/ext/ExtensionQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ParserExtension::class$ = NULL;
          jmethodID *ParserExtension::mids$ = NULL;
          bool ParserExtension::live$ = false;

          jclass ParserExtension::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ParserExtension");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_parse_d185629b] = env->getMethodID(cls, "parse", "(Lorg/apache/lucene/queryparser/ext/ExtensionQuery;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParserExtension::ParserExtension() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Query ParserExtension::parse(const ::org::apache::lucene::queryparser::ext::ExtensionQuery & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_d185629b], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ParserExtension_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParserExtension_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParserExtension_init_(t_ParserExtension *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParserExtension_parse(t_ParserExtension *self, PyObject *arg);

          static PyMethodDef t_ParserExtension__methods_[] = {
            DECLARE_METHOD(t_ParserExtension, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserExtension, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserExtension, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParserExtension, t_ParserExtension, ::java::lang::Object, ParserExtension, t_ParserExtension_init_, 0, 0, 0, 0, 0);

          void t_ParserExtension::install(PyObject *module)
          {
            installType(&PY_TYPE(ParserExtension), module, "ParserExtension", 0);
          }

          void t_ParserExtension::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParserExtension).tp_dict, "class_", make_descriptor(ParserExtension::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParserExtension).tp_dict, "wrapfn_", make_descriptor(t_ParserExtension::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParserExtension).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParserExtension_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParserExtension::initializeClass, 1)))
              return NULL;
            return t_ParserExtension::wrap_Object(ParserExtension(((t_ParserExtension *) arg)->object.this$));
          }
          static PyObject *t_ParserExtension_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParserExtension::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParserExtension_init_(t_ParserExtension *self, PyObject *args, PyObject *kwds)
          {
            ParserExtension object((jobject) NULL);

            INT_CALL(object = ParserExtension());
            self->object = object;

            return 0;
          }

          static PyObject *t_ParserExtension_parse(t_ParserExtension *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::ext::ExtensionQuery a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::ext::ExtensionQuery::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/store/IOContext.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressingStoredFieldsReader::class$ = NULL;
          jmethodID *CompressingStoredFieldsReader::mids$ = NULL;
          bool CompressingStoredFieldsReader::live$ = false;

          jclass CompressingStoredFieldsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressingStoredFieldsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_846e12dd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;Lorg/apache/lucene/codecs/compressing/CompressionMode;)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_clone_ef585f0d] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/codecs/StoredFieldsReader;");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_visitDocument_a2ea3ebe] = env->getMethodID(cls, "visitDocument", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CompressingStoredFieldsReader::CompressingStoredFieldsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5, const ::org::apache::lucene::codecs::compressing::CompressionMode & a6) : ::org::apache::lucene::codecs::StoredFieldsReader(env->newObject(initializeClass, &mids$, mid_init$_846e12dd, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$)) {}

          void CompressingStoredFieldsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          ::org::apache::lucene::codecs::StoredFieldsReader CompressingStoredFieldsReader::clone() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsReader(env->callObjectMethod(this$, mids$[mid_clone_ef585f0d]));
          }

          void CompressingStoredFieldsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          jlong CompressingStoredFieldsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          void CompressingStoredFieldsReader::visitDocument(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_visitDocument_a2ea3ebe], a0, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressingStoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressingStoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CompressingStoredFieldsReader_init_(t_CompressingStoredFieldsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CompressingStoredFieldsReader_checkIntegrity(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_clone(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_close(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_ramBytesUsed(t_CompressingStoredFieldsReader *self, PyObject *args);
          static PyObject *t_CompressingStoredFieldsReader_visitDocument(t_CompressingStoredFieldsReader *self, PyObject *args);

          static PyMethodDef t_CompressingStoredFieldsReader__methods_[] = {
            DECLARE_METHOD(t_CompressingStoredFieldsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, clone, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_CompressingStoredFieldsReader, visitDocument, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressingStoredFieldsReader, t_CompressingStoredFieldsReader, ::org::apache::lucene::codecs::StoredFieldsReader, CompressingStoredFieldsReader, t_CompressingStoredFieldsReader_init_, 0, 0, 0, 0, 0);

          void t_CompressingStoredFieldsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressingStoredFieldsReader), module, "CompressingStoredFieldsReader", 0);
          }

          void t_CompressingStoredFieldsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsReader).tp_dict, "class_", make_descriptor(CompressingStoredFieldsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsReader).tp_dict, "wrapfn_", make_descriptor(t_CompressingStoredFieldsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressingStoredFieldsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CompressingStoredFieldsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressingStoredFieldsReader::initializeClass, 1)))
              return NULL;
            return t_CompressingStoredFieldsReader::wrap_Object(CompressingStoredFieldsReader(((t_CompressingStoredFieldsReader *) arg)->object.this$));
          }
          static PyObject *t_CompressingStoredFieldsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressingStoredFieldsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CompressingStoredFieldsReader_init_(t_CompressingStoredFieldsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            ::org::apache::lucene::codecs::compressing::CompressionMode a6((jobject) NULL);
            CompressingStoredFieldsReader object((jobject) NULL);

            if (!parseArgs(args, "kkskksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, ::org::apache::lucene::codecs::compressing::CompressionMode::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = CompressingStoredFieldsReader(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CompressingStoredFieldsReader_checkIntegrity(t_CompressingStoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_clone(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return ::org::apache::lucene::codecs::t_StoredFieldsReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_close(t_CompressingStoredFieldsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_ramBytesUsed(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_CompressingStoredFieldsReader_visitDocument(t_CompressingStoredFieldsReader *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

            if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.visitDocument(a0, a1));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CompressingStoredFieldsReader), (PyObject *) self, "visitDocument", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Distribution.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Distribution::class$ = NULL;
          jmethodID *Distribution::mids$ = NULL;
          bool Distribution::live$ = false;

          jclass Distribution::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Distribution");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_aa9c2b5b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Distribution::Distribution() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Distribution::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_aa9c2b5b], a0.this$, a1, a2));
          }

          jfloat Distribution::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String Distribution::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Distribution_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Distribution_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Distribution_init_(t_Distribution *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Distribution_explain(t_Distribution *self, PyObject *args);
          static PyObject *t_Distribution_score(t_Distribution *self, PyObject *args);
          static PyObject *t_Distribution_toString(t_Distribution *self, PyObject *args);

          static PyMethodDef t_Distribution__methods_[] = {
            DECLARE_METHOD(t_Distribution, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Distribution, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Distribution, explain, METH_VARARGS),
            DECLARE_METHOD(t_Distribution, score, METH_VARARGS),
            DECLARE_METHOD(t_Distribution, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Distribution, t_Distribution, ::java::lang::Object, Distribution, t_Distribution_init_, 0, 0, 0, 0, 0);

          void t_Distribution::install(PyObject *module)
          {
            installType(&PY_TYPE(Distribution), module, "Distribution", 0);
          }

          void t_Distribution::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Distribution).tp_dict, "class_", make_descriptor(Distribution::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Distribution).tp_dict, "wrapfn_", make_descriptor(t_Distribution::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Distribution).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Distribution_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Distribution::initializeClass, 1)))
              return NULL;
            return t_Distribution::wrap_Object(Distribution(((t_Distribution *) arg)->object.this$));
          }
          static PyObject *t_Distribution_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Distribution::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Distribution_init_(t_Distribution *self, PyObject *args, PyObject *kwds)
          {
            Distribution object((jobject) NULL);

            INT_CALL(object = Distribution());
            self->object = object;

            return 0;
          }

          static PyObject *t_Distribution_explain(t_Distribution *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_Distribution_score(t_Distribution *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.score(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_Distribution_toString(t_Distribution *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Distribution), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/StringUtils.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *StringUtils::class$ = NULL;
              jmethodID *StringUtils::mids$ = NULL;
              bool StringUtils::live$ = false;

              jclass StringUtils::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/StringUtils");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_toString_c9db4eed] = env->getStaticMethodID(cls, "toString", "(Ljava/lang/Object;)Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StringUtils::StringUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::java::lang::String StringUtils::toString(const ::java::lang::Object & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_c9db4eed], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_StringUtils_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StringUtils_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StringUtils_init_(t_StringUtils *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StringUtils_toString(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_StringUtils__methods_[] = {
                DECLARE_METHOD(t_StringUtils, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StringUtils, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StringUtils, toString, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StringUtils, t_StringUtils, ::java::lang::Object, StringUtils, t_StringUtils_init_, 0, 0, 0, 0, 0);

              void t_StringUtils::install(PyObject *module)
              {
                installType(&PY_TYPE(StringUtils), module, "StringUtils", 0);
              }

              void t_StringUtils::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StringUtils).tp_dict, "class_", make_descriptor(StringUtils::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StringUtils).tp_dict, "wrapfn_", make_descriptor(t_StringUtils::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StringUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StringUtils_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StringUtils::initializeClass, 1)))
                  return NULL;
                return t_StringUtils::wrap_Object(StringUtils(((t_StringUtils *) arg)->object.this$));
              }
              static PyObject *t_StringUtils_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StringUtils::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StringUtils_init_(t_StringUtils *self, PyObject *args, PyObject *kwds)
              {
                StringUtils object((jobject) NULL);

                INT_CALL(object = StringUtils());
                self->object = object;

                return 0;
              }

              static PyObject *t_StringUtils_toString(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::Object a0((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::StringUtils::toString(a0));
                  return j2p(result);
                }

                return callSuper(type, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/DefaultPhraseSlopQueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *DefaultPhraseSlopQueryNodeProcessor::class$ = NULL;
              jmethodID *DefaultPhraseSlopQueryNodeProcessor::mids$ = NULL;
              bool DefaultPhraseSlopQueryNodeProcessor::live$ = false;

              jclass DefaultPhraseSlopQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/DefaultPhraseSlopQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_process_6705aed7] = env->getMethodID(cls, "process", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");
                  mids$[mid_processChildren_cc04aeef] = env->getMethodID(cls, "processChildren", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              DefaultPhraseSlopQueryNodeProcessor::DefaultPhraseSlopQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode DefaultPhraseSlopQueryNodeProcessor::process(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_process_6705aed7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_DefaultPhraseSlopQueryNodeProcessor_init_(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds);
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_process(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args);

              static PyMethodDef t_DefaultPhraseSlopQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_DefaultPhraseSlopQueryNodeProcessor, process, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(DefaultPhraseSlopQueryNodeProcessor, t_DefaultPhraseSlopQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, DefaultPhraseSlopQueryNodeProcessor, t_DefaultPhraseSlopQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_DefaultPhraseSlopQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(DefaultPhraseSlopQueryNodeProcessor), module, "DefaultPhraseSlopQueryNodeProcessor", 0);
              }

              void t_DefaultPhraseSlopQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(DefaultPhraseSlopQueryNodeProcessor).tp_dict, "class_", make_descriptor(DefaultPhraseSlopQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(DefaultPhraseSlopQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_DefaultPhraseSlopQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(DefaultPhraseSlopQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, DefaultPhraseSlopQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_DefaultPhraseSlopQueryNodeProcessor::wrap_Object(DefaultPhraseSlopQueryNodeProcessor(((t_DefaultPhraseSlopQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, DefaultPhraseSlopQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_DefaultPhraseSlopQueryNodeProcessor_init_(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                DefaultPhraseSlopQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = DefaultPhraseSlopQueryNodeProcessor());
                self->object = object;

                return 0;
              }

              static PyObject *t_DefaultPhraseSlopQueryNodeProcessor_process(t_DefaultPhraseSlopQueryNodeProcessor *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.process(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(DefaultPhraseSlopQueryNodeProcessor), (PyObject *) self, "process", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/LongField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *LongField::class$ = NULL;
        jmethodID *LongField::mids$ = NULL;
        bool LongField::live$ = false;
        ::org::apache::lucene::document::FieldType *LongField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *LongField::TYPE_STORED = NULL;

        jclass LongField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/LongField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_45798648] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JLorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_4cb133a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;JLorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LongField::LongField(const ::java::lang::String & a0, jlong a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_45798648, a0.this$, a1, a2.this$)) {}

        LongField::LongField(const ::java::lang::String & a0, jlong a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_4cb133a7, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_LongField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LongField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LongField_init_(t_LongField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LongField__methods_[] = {
          DECLARE_METHOD(t_LongField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LongField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LongField, t_LongField, ::org::apache::lucene::document::Field, LongField, t_LongField_init_, 0, 0, 0, 0, 0);

        void t_LongField::install(PyObject *module)
        {
          installType(&PY_TYPE(LongField), module, "LongField", 0);
        }

        void t_LongField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "class_", make_descriptor(LongField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "wrapfn_", make_descriptor(t_LongField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(LongField::initializeClass);
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*LongField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(LongField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*LongField::TYPE_STORED)));
        }

        static PyObject *t_LongField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LongField::initializeClass, 1)))
            return NULL;
          return t_LongField::wrap_Object(LongField(((t_LongField *) arg)->object.this$));
        }
        static PyObject *t_LongField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LongField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LongField_init_(t_LongField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              LongField object((jobject) NULL);

              if (!parseArgs(args, "sJK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = LongField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jlong a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              LongField object((jobject) NULL);

              if (!parseArgs(args, "sJk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = LongField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopFieldCollector.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/Sort.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"
#include "org/apache/lucene/search/FieldDoc.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopFieldCollector::class$ = NULL;
        jmethodID *TopFieldCollector::mids$ = NULL;
        bool TopFieldCollector::live$ = false;

        jclass TopFieldCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopFieldCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acceptsDocsOutOfOrder_54c6a16a] = env->getMethodID(cls, "acceptsDocsOutOfOrder", "()Z");
            mids$[mid_create_ea5994c0] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Sort;IZZZZ)Lorg/apache/lucene/search/TopFieldCollector;");
            mids$[mid_create_be0959c2] = env->getStaticMethodID(cls, "create", "(Lorg/apache/lucene/search/Sort;ILorg/apache/lucene/search/FieldDoc;ZZZZ)Lorg/apache/lucene/search/TopFieldCollector;");
            mids$[mid_populateResults_fbb5e76c] = env->getMethodID(cls, "populateResults", "([Lorg/apache/lucene/search/ScoreDoc;I)V");
            mids$[mid_newTopDocs_a5bceb12] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean TopFieldCollector::acceptsDocsOutOfOrder() const
        {
          return env->callBooleanMethod(this$, mids$[mid_acceptsDocsOutOfOrder_54c6a16a]);
        }

        TopFieldCollector TopFieldCollector::create(const ::org::apache::lucene::search::Sort & a0, jint a1, jboolean a2, jboolean a3, jboolean a4, jboolean a5)
        {
          jclass cls = env->getClass(initializeClass);
          return TopFieldCollector(env->callStaticObjectMethod(cls, mids$[mid_create_ea5994c0], a0.this$, a1, a2, a3, a4, a5));
        }

        TopFieldCollector TopFieldCollector::create(const ::org::apache::lucene::search::Sort & a0, jint a1, const ::org::apache::lucene::search::FieldDoc & a2, jboolean a3, jboolean a4, jboolean a5, jboolean a6)
        {
          jclass cls = env->getClass(initializeClass);
          return TopFieldCollector(env->callStaticObjectMethod(cls, mids$[mid_create_be0959c2], a0.this$, a1, a2.this$, a3, a4, a5, a6));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopFieldCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopFieldCollector_of_(t_TopFieldCollector *self, PyObject *args);
        static PyObject *t_TopFieldCollector_acceptsDocsOutOfOrder(t_TopFieldCollector *self, PyObject *args);
        static PyObject *t_TopFieldCollector_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_TopFieldCollector_get__parameters_(t_TopFieldCollector *self, void *data);
        static PyGetSetDef t_TopFieldCollector__fields_[] = {
          DECLARE_GET_FIELD(t_TopFieldCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopFieldCollector__methods_[] = {
          DECLARE_METHOD(t_TopFieldCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopFieldCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopFieldCollector, acceptsDocsOutOfOrder, METH_VARARGS),
          DECLARE_METHOD(t_TopFieldCollector, create, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopFieldCollector, t_TopFieldCollector, ::org::apache::lucene::search::TopDocsCollector, TopFieldCollector, abstract_init, 0, 0, t_TopFieldCollector__fields_, 0, 0);
        PyObject *t_TopFieldCollector::wrap_Object(const TopFieldCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopFieldCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopFieldCollector *self = (t_TopFieldCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopFieldCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopFieldCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopFieldCollector *self = (t_TopFieldCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopFieldCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopFieldCollector), module, "TopFieldCollector", 0);
        }

        void t_TopFieldCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopFieldCollector).tp_dict, "class_", make_descriptor(TopFieldCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopFieldCollector).tp_dict, "wrapfn_", make_descriptor(t_TopFieldCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopFieldCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopFieldCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopFieldCollector::initializeClass, 1)))
            return NULL;
          return t_TopFieldCollector::wrap_Object(TopFieldCollector(((t_TopFieldCollector *) arg)->object.this$));
        }
        static PyObject *t_TopFieldCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopFieldCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopFieldCollector_of_(t_TopFieldCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopFieldCollector_acceptsDocsOutOfOrder(t_TopFieldCollector *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.acceptsDocsOutOfOrder());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TopFieldCollector), (PyObject *) self, "acceptsDocsOutOfOrder", args, 2);
        }

        static PyObject *t_TopFieldCollector_create(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 6:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              jboolean a2;
              jboolean a3;
              jboolean a4;
              jboolean a5;
              TopFieldCollector result((jobject) NULL);

              if (!parseArgs(args, "kIZZZZ", ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopFieldCollector::create(a0, a1, a2, a3, a4, a5));
                return t_TopFieldCollector::wrap_Object(result);
              }
            }
            break;
           case 7:
            {
              ::org::apache::lucene::search::Sort a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::search::FieldDoc a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              jboolean a5;
              jboolean a6;
              TopFieldCollector result((jobject) NULL);

              if (!parseArgs(args, "kIkZZZZ", ::org::apache::lucene::search::Sort::initializeClass, ::org::apache::lucene::search::FieldDoc::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
              {
                OBJ_CALL(result = ::org::apache::lucene::search::TopFieldCollector::create(a0, a1, a2, a3, a4, a5, a6));
                return t_TopFieldCollector::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }
        static PyObject *t_TopFieldCollector_get__parameters_(t_TopFieldCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/egothor/stemmer/Compile.h"
#include "java/lang/Exception.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace egothor {
    namespace stemmer {

      ::java::lang::Class *Compile::class$ = NULL;
      jmethodID *Compile::mids$ = NULL;
      bool Compile::live$ = false;

      jclass Compile::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/egothor/stemmer/Compile");

          mids$ = new jmethodID[max_mid];
          mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      void Compile::main(const JArray< ::java::lang::String > & a0)
      {
        jclass cls = env->getClass(initializeClass);
        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace egothor {
    namespace stemmer {
      static PyObject *t_Compile_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Compile_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_Compile_main(PyTypeObject *type, PyObject *arg);

      static PyMethodDef t_Compile__methods_[] = {
        DECLARE_METHOD(t_Compile, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Compile, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_Compile, main, METH_O | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(Compile, t_Compile, ::java::lang::Object, Compile, abstract_init, 0, 0, 0, 0, 0);

      void t_Compile::install(PyObject *module)
      {
        installType(&PY_TYPE(Compile), module, "Compile", 0);
      }

      void t_Compile::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(Compile).tp_dict, "class_", make_descriptor(Compile::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(Compile).tp_dict, "wrapfn_", make_descriptor(t_Compile::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(Compile).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_Compile_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, Compile::initializeClass, 1)))
          return NULL;
        return t_Compile::wrap_Object(Compile(((t_Compile *) arg)->object.this$));
      }
      static PyObject *t_Compile_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, Compile::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_Compile_main(PyTypeObject *type, PyObject *arg)
      {
        JArray< ::java::lang::String > a0((jobject) NULL);

        if (!parseArg(arg, "[s", &a0))
        {
          OBJ_CALL(::org::egothor::stemmer::Compile::main(a0));
          Py_RETURN_NONE;
        }

        PyErr_SetArgsError(type, "main", arg);
        return NULL;
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PagedBytes.h"
#include "org/apache/lucene/util/PagedBytes$Reader.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataInput.h"
#include "org/apache/lucene/util/PagedBytes$PagedBytesDataOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PagedBytes::class$ = NULL;
        jmethodID *PagedBytes::mids$ = NULL;
        bool PagedBytes::live$ = false;

        jclass PagedBytes::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PagedBytes");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_copy_ec9e0593] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/store/IndexInput;J)V");
            mids$[mid_copy_594e5ee6] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_copyUsingLengthPrefix_7bc03dd8] = env->getMethodID(cls, "copyUsingLengthPrefix", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_freeze_6c94cff0] = env->getMethodID(cls, "freeze", "(Z)Lorg/apache/lucene/util/PagedBytes$Reader;");
            mids$[mid_getDataInput_da9ab8b7] = env->getMethodID(cls, "getDataInput", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataInput;");
            mids$[mid_getDataOutput_279c2d0b] = env->getMethodID(cls, "getDataOutput", "()Lorg/apache/lucene/util/PagedBytes$PagedBytesDataOutput;");
            mids$[mid_getPointer_54c6a17a] = env->getMethodID(cls, "getPointer", "()J");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PagedBytes::PagedBytes(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        void PagedBytes::copy(const ::org::apache::lucene::store::IndexInput & a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_ec9e0593], a0.this$, a1);
        }

        void PagedBytes::copy(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_594e5ee6], a0.this$, a1.this$);
        }

        jlong PagedBytes::copyUsingLengthPrefix(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_copyUsingLengthPrefix_7bc03dd8], a0.this$);
        }

        ::org::apache::lucene::util::PagedBytes$Reader PagedBytes::freeze(jboolean a0) const
        {
          return ::org::apache::lucene::util::PagedBytes$Reader(env->callObjectMethod(this$, mids$[mid_freeze_6c94cff0], a0));
        }

        ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput PagedBytes::getDataInput() const
        {
          return ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput(env->callObjectMethod(this$, mids$[mid_getDataInput_da9ab8b7]));
        }

        ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput PagedBytes::getDataOutput() const
        {
          return ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput(env->callObjectMethod(this$, mids$[mid_getDataOutput_279c2d0b]));
        }

        jlong PagedBytes::getPointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getPointer_54c6a17a]);
        }

        jlong PagedBytes::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PagedBytes_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PagedBytes_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PagedBytes_init_(t_PagedBytes *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PagedBytes_copy(t_PagedBytes *self, PyObject *args);
        static PyObject *t_PagedBytes_copyUsingLengthPrefix(t_PagedBytes *self, PyObject *arg);
        static PyObject *t_PagedBytes_freeze(t_PagedBytes *self, PyObject *arg);
        static PyObject *t_PagedBytes_getDataInput(t_PagedBytes *self);
        static PyObject *t_PagedBytes_getDataOutput(t_PagedBytes *self);
        static PyObject *t_PagedBytes_getPointer(t_PagedBytes *self);
        static PyObject *t_PagedBytes_ramBytesUsed(t_PagedBytes *self);
        static PyObject *t_PagedBytes_get__dataInput(t_PagedBytes *self, void *data);
        static PyObject *t_PagedBytes_get__dataOutput(t_PagedBytes *self, void *data);
        static PyObject *t_PagedBytes_get__pointer(t_PagedBytes *self, void *data);
        static PyGetSetDef t_PagedBytes__fields_[] = {
          DECLARE_GET_FIELD(t_PagedBytes, dataInput),
          DECLARE_GET_FIELD(t_PagedBytes, dataOutput),
          DECLARE_GET_FIELD(t_PagedBytes, pointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PagedBytes__methods_[] = {
          DECLARE_METHOD(t_PagedBytes, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PagedBytes, copy, METH_VARARGS),
          DECLARE_METHOD(t_PagedBytes, copyUsingLengthPrefix, METH_O),
          DECLARE_METHOD(t_PagedBytes, freeze, METH_O),
          DECLARE_METHOD(t_PagedBytes, getDataInput, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, getDataOutput, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, getPointer, METH_NOARGS),
          DECLARE_METHOD(t_PagedBytes, ramBytesUsed, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PagedBytes, t_PagedBytes, ::java::lang::Object, PagedBytes, t_PagedBytes_init_, 0, 0, t_PagedBytes__fields_, 0, 0);

        void t_PagedBytes::install(PyObject *module)
        {
          installType(&PY_TYPE(PagedBytes), module, "PagedBytes", 0);
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "Reader", make_descriptor(&PY_TYPE(PagedBytes$Reader)));
        }

        void t_PagedBytes::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "class_", make_descriptor(PagedBytes::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "wrapfn_", make_descriptor(t_PagedBytes::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PagedBytes).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PagedBytes_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PagedBytes::initializeClass, 1)))
            return NULL;
          return t_PagedBytes::wrap_Object(PagedBytes(((t_PagedBytes *) arg)->object.this$));
        }
        static PyObject *t_PagedBytes_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PagedBytes::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PagedBytes_init_(t_PagedBytes *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          PagedBytes object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = PagedBytes(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PagedBytes_copy(t_PagedBytes *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::store::IndexInput a0((jobject) NULL);
              jlong a1;

              if (!parseArgs(args, "kJ", ::org::apache::lucene::store::IndexInput::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.copy(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.copy(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "copy", args);
          return NULL;
        }

        static PyObject *t_PagedBytes_copyUsingLengthPrefix(t_PagedBytes *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.copyUsingLengthPrefix(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "copyUsingLengthPrefix", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes_freeze(t_PagedBytes *self, PyObject *arg)
        {
          jboolean a0;
          ::org::apache::lucene::util::PagedBytes$Reader result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.freeze(a0));
            return ::org::apache::lucene::util::t_PagedBytes$Reader::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeze", arg);
          return NULL;
        }

        static PyObject *t_PagedBytes_getDataInput(t_PagedBytes *self)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput result((jobject) NULL);
          OBJ_CALL(result = self->object.getDataInput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataInput::wrap_Object(result);
        }

        static PyObject *t_PagedBytes_getDataOutput(t_PagedBytes *self)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput result((jobject) NULL);
          OBJ_CALL(result = self->object.getDataOutput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataOutput::wrap_Object(result);
        }

        static PyObject *t_PagedBytes_getPointer(t_PagedBytes *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getPointer());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes_ramBytesUsed(t_PagedBytes *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ramBytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_PagedBytes_get__dataInput(t_PagedBytes *self, void *data)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataInput value((jobject) NULL);
          OBJ_CALL(value = self->object.getDataInput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataInput::wrap_Object(value);
        }

        static PyObject *t_PagedBytes_get__dataOutput(t_PagedBytes *self, void *data)
        {
          ::org::apache::lucene::util::PagedBytes$PagedBytesDataOutput value((jobject) NULL);
          OBJ_CALL(value = self->object.getDataOutput());
          return ::org::apache::lucene::util::t_PagedBytes$PagedBytesDataOutput::wrap_Object(value);
        }

        static PyObject *t_PagedBytes_get__pointer(t_PagedBytes *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getPointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/highlight/PythonFragmenter.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PythonFragmenter::class$ = NULL;
          jmethodID *PythonFragmenter::mids$ = NULL;
          bool PythonFragmenter::live$ = false;

          jclass PythonFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/highlight/PythonFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonFragmenter::PythonFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PythonFragmenter::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jlong PythonFragmenter::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonFragmenter::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PythonFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonFragmenter_init_(t_PythonFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonFragmenter_finalize(t_PythonFragmenter *self);
          static PyObject *t_PythonFragmenter_pythonExtension(t_PythonFragmenter *self, PyObject *args);
          static jboolean JNICALL t_PythonFragmenter_isNewFragment0(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonFragmenter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonFragmenter_start2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static PyObject *t_PythonFragmenter_get__self(t_PythonFragmenter *self, void *data);
          static PyGetSetDef t_PythonFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_PythonFragmenter, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonFragmenter__methods_[] = {
            DECLARE_METHOD(t_PythonFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFragmenter, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonFragmenter, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonFragmenter, t_PythonFragmenter, ::java::lang::Object, PythonFragmenter, t_PythonFragmenter_init_, 0, 0, t_PythonFragmenter__fields_, 0, 0);

          void t_PythonFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonFragmenter), module, "PythonFragmenter", 1);
          }

          void t_PythonFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonFragmenter).tp_dict, "class_", make_descriptor(PythonFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonFragmenter).tp_dict, "wrapfn_", make_descriptor(t_PythonFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonFragmenter::initializeClass);
            JNINativeMethod methods[] = {
              { "isNewFragment", "()Z", (void *) t_PythonFragmenter_isNewFragment0 },
              { "pythonDecRef", "()V", (void *) t_PythonFragmenter_pythonDecRef1 },
              { "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V", (void *) t_PythonFragmenter_start2 },
            };
            env->registerNatives(cls, methods, 3);
          }

          static PyObject *t_PythonFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonFragmenter::initializeClass, 1)))
              return NULL;
            return t_PythonFragmenter::wrap_Object(PythonFragmenter(((t_PythonFragmenter *) arg)->object.this$));
          }
          static PyObject *t_PythonFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonFragmenter_init_(t_PythonFragmenter *self, PyObject *args, PyObject *kwds)
          {
            PythonFragmenter object((jobject) NULL);

            INT_CALL(object = PythonFragmenter());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonFragmenter_finalize(t_PythonFragmenter *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonFragmenter_pythonExtension(t_PythonFragmenter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jboolean JNICALL t_PythonFragmenter_isNewFragment0(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "isNewFragment", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("isNewFragment", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static void JNICALL t_PythonFragmenter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static void JNICALL t_PythonFragmenter_start2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(::org::apache::lucene::analysis::TokenStream(a1));
            PyObject *result = PyObject_CallMethod(obj, "start", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else
              Py_DECREF(result);
          }

          static PyObject *t_PythonFragmenter_get__self(t_PythonFragmenter *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42FieldInfosFormat::class$ = NULL;
          jmethodID *Lucene42FieldInfosFormat::mids$ = NULL;
          bool Lucene42FieldInfosFormat::live$ = false;

          jclass Lucene42FieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42FieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
              mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42FieldInfosFormat::Lucene42FieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldInfosReader Lucene42FieldInfosFormat::getFieldInfosReader() const
          {
            return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
          }

          ::org::apache::lucene::codecs::FieldInfosWriter Lucene42FieldInfosFormat::getFieldInfosWriter() const
          {
            return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42FieldInfosFormat_init_(t_Lucene42FieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosReader(t_Lucene42FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosWriter(t_Lucene42FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosReader(t_Lucene42FieldInfosFormat *self, void *data);
          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosWriter(t_Lucene42FieldInfosFormat *self, void *data);
          static PyGetSetDef t_Lucene42FieldInfosFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene42FieldInfosFormat, fieldInfosReader),
            DECLARE_GET_FIELD(t_Lucene42FieldInfosFormat, fieldInfosWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene42FieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, getFieldInfosReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42FieldInfosFormat, getFieldInfosWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42FieldInfosFormat, t_Lucene42FieldInfosFormat, ::org::apache::lucene::codecs::FieldInfosFormat, Lucene42FieldInfosFormat, t_Lucene42FieldInfosFormat_init_, 0, 0, t_Lucene42FieldInfosFormat__fields_, 0, 0);

          void t_Lucene42FieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42FieldInfosFormat), module, "Lucene42FieldInfosFormat", 0);
          }

          void t_Lucene42FieldInfosFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42FieldInfosFormat).tp_dict, "class_", make_descriptor(Lucene42FieldInfosFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42FieldInfosFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42FieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42FieldInfosFormat::wrap_Object(Lucene42FieldInfosFormat(((t_Lucene42FieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42FieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42FieldInfosFormat_init_(t_Lucene42FieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene42FieldInfosFormat object((jobject) NULL);

            INT_CALL(object = Lucene42FieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosReader(t_Lucene42FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosReader());
              return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42FieldInfosFormat), (PyObject *) self, "getFieldInfosReader", args, 2);
          }

          static PyObject *t_Lucene42FieldInfosFormat_getFieldInfosWriter(t_Lucene42FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosWriter());
              return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42FieldInfosFormat), (PyObject *) self, "getFieldInfosWriter", args, 2);
          }

          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosReader(t_Lucene42FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosReader());
            return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
          }

          static PyObject *t_Lucene42FieldInfosFormat_get__fieldInfosWriter(t_Lucene42FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosWriter());
            return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianAnalyzer::class$ = NULL;
          jmethodID *HungarianAnalyzer::mids$ = NULL;
          bool HungarianAnalyzer::live$ = false;
          ::java::lang::String *HungarianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass HungarianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet HungarianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianAnalyzer_init_(t_HungarianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_HungarianAnalyzer_get__defaultStopSet(t_HungarianAnalyzer *self, void *data);
          static PyGetSetDef t_HungarianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_HungarianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HungarianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_HungarianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianAnalyzer, t_HungarianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, HungarianAnalyzer, t_HungarianAnalyzer_init_, 0, 0, t_HungarianAnalyzer__fields_, 0, 0);

          void t_HungarianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianAnalyzer), module, "HungarianAnalyzer", 0);
          }

          void t_HungarianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "class_", make_descriptor(HungarianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_HungarianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(HungarianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*HungarianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_HungarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_HungarianAnalyzer::wrap_Object(HungarianAnalyzer(((t_HungarianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_HungarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianAnalyzer_init_(t_HungarianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hu::HungarianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_HungarianAnalyzer_get__defaultStopSet(t_HungarianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BitUtil::class$ = NULL;
        jmethodID *BitUtil::mids$ = NULL;
        bool BitUtil::live$ = false;

        jclass BitUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BitUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bitCount_b2271698] = env->getStaticMethodID(cls, "bitCount", "(B)I");
            mids$[mid_bitList_b2271698] = env->getStaticMethodID(cls, "bitList", "(B)I");
            mids$[mid_nextHighestPowerOfTwo_0ee6df33] = env->getStaticMethodID(cls, "nextHighestPowerOfTwo", "(J)J");
            mids$[mid_nextHighestPowerOfTwo_39c7bd23] = env->getStaticMethodID(cls, "nextHighestPowerOfTwo", "(I)I");
            mids$[mid_pop_andnot_c347d95a] = env->getStaticMethodID(cls, "pop_andnot", "([J[JII)J");
            mids$[mid_pop_array_6ae021fb] = env->getStaticMethodID(cls, "pop_array", "([JII)J");
            mids$[mid_pop_intersect_c347d95a] = env->getStaticMethodID(cls, "pop_intersect", "([J[JII)J");
            mids$[mid_pop_union_c347d95a] = env->getStaticMethodID(cls, "pop_union", "([J[JII)J");
            mids$[mid_pop_xor_c347d95a] = env->getStaticMethodID(cls, "pop_xor", "([J[JII)J");
            mids$[mid_zigZagDecode_39c7bd23] = env->getStaticMethodID(cls, "zigZagDecode", "(I)I");
            mids$[mid_zigZagDecode_0ee6df33] = env->getStaticMethodID(cls, "zigZagDecode", "(J)J");
            mids$[mid_zigZagEncode_39c7bd23] = env->getStaticMethodID(cls, "zigZagEncode", "(I)I");
            mids$[mid_zigZagEncode_0ee6df33] = env->getStaticMethodID(cls, "zigZagEncode", "(J)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint BitUtil::bitCount(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bitCount_b2271698], a0);
        }

        jint BitUtil::bitList(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bitList_b2271698], a0);
        }

        jlong BitUtil::nextHighestPowerOfTwo(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_nextHighestPowerOfTwo_0ee6df33], a0);
        }

        jint BitUtil::nextHighestPowerOfTwo(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_nextHighestPowerOfTwo_39c7bd23], a0);
        }

        jlong BitUtil::pop_andnot(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_andnot_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_array(const JArray< jlong > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_array_6ae021fb], a0.this$, a1, a2);
        }

        jlong BitUtil::pop_intersect(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_intersect_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_union(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_union_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_xor(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_xor_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jint BitUtil::zigZagDecode(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_zigZagDecode_39c7bd23], a0);
        }

        jlong BitUtil::zigZagDecode(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_zigZagDecode_0ee6df33], a0);
        }

        jint BitUtil::zigZagEncode(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_zigZagEncode_39c7bd23], a0);
        }

        jlong BitUtil::zigZagEncode(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_zigZagEncode_0ee6df33], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BitUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_bitCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_bitList(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_nextHighestPowerOfTwo(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_andnot(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_array(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_intersect(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_union(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_xor(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_zigZagDecode(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_zigZagEncode(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_BitUtil__methods_[] = {
          DECLARE_METHOD(t_BitUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, bitCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, bitList, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, nextHighestPowerOfTwo, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_andnot, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_array, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_intersect, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_union, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_xor, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, zigZagDecode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, zigZagEncode, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BitUtil, t_BitUtil, ::java::lang::Object, BitUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_BitUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(BitUtil), module, "BitUtil", 0);
        }

        void t_BitUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BitUtil).tp_dict, "class_", make_descriptor(BitUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BitUtil).tp_dict, "wrapfn_", make_descriptor(t_BitUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BitUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BitUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BitUtil::initializeClass, 1)))
            return NULL;
          return t_BitUtil::wrap_Object(BitUtil(((t_BitUtil *) arg)->object.this$));
        }
        static PyObject *t_BitUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BitUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BitUtil_bitCount(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jint result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::bitCount(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bitCount", arg);
          return NULL;
        }

        static PyObject *t_BitUtil_bitList(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jint result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::bitList(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bitList", arg);
          return NULL;
        }

        static PyObject *t_BitUtil_nextHighestPowerOfTwo(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::nextHighestPowerOfTwo(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::nextHighestPowerOfTwo(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "nextHighestPowerOfTwo", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_andnot(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_andnot(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_andnot", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_array(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong result;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_array(a0, a1, a2));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_array", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_intersect(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_intersect(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_intersect", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_union(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_union(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_union", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_xor(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_xor(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_xor", args);
          return NULL;
        }

        static PyObject *t_BitUtil_zigZagDecode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagDecode(a0));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagDecode(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "zigZagDecode", args);
          return NULL;
        }

        static PyObject *t_BitUtil_zigZagEncode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagEncode(a0));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagEncode(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "zigZagEncode", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CharacterRunAutomaton.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CharacterRunAutomaton::class$ = NULL;
          jmethodID *CharacterRunAutomaton::mids$ = NULL;
          bool CharacterRunAutomaton::live$ = false;

          jclass CharacterRunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CharacterRunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fc7cf394] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_run_5fdc3f44] = env->getMethodID(cls, "run", "(Ljava/lang/String;)Z");
              mids$[mid_run_6f0bb35a] = env->getMethodID(cls, "run", "([CII)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharacterRunAutomaton::CharacterRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_fc7cf394, a0.this$)) {}

          jboolean CharacterRunAutomaton::run(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_5fdc3f44], a0.this$);
          }

          jboolean CharacterRunAutomaton::run(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_6f0bb35a], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CharacterRunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterRunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharacterRunAutomaton_init_(t_CharacterRunAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharacterRunAutomaton_run(t_CharacterRunAutomaton *self, PyObject *args);

          static PyMethodDef t_CharacterRunAutomaton__methods_[] = {
            DECLARE_METHOD(t_CharacterRunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterRunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterRunAutomaton, run, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharacterRunAutomaton, t_CharacterRunAutomaton, ::org::apache::lucene::util::automaton::RunAutomaton, CharacterRunAutomaton, t_CharacterRunAutomaton_init_, 0, 0, 0, 0, 0);

          void t_CharacterRunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(CharacterRunAutomaton), module, "CharacterRunAutomaton", 0);
          }

          void t_CharacterRunAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharacterRunAutomaton).tp_dict, "class_", make_descriptor(CharacterRunAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharacterRunAutomaton).tp_dict, "wrapfn_", make_descriptor(t_CharacterRunAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharacterRunAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharacterRunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharacterRunAutomaton::initializeClass, 1)))
              return NULL;
            return t_CharacterRunAutomaton::wrap_Object(CharacterRunAutomaton(((t_CharacterRunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_CharacterRunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharacterRunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharacterRunAutomaton_init_(t_CharacterRunAutomaton *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            CharacterRunAutomaton object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              INT_CALL(object = CharacterRunAutomaton(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharacterRunAutomaton_run(t_CharacterRunAutomaton *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.run(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.run(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "run", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42TermVectorsFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42TermVectorsFormat::class$ = NULL;
          jmethodID *Lucene42TermVectorsFormat::mids$ = NULL;
          bool Lucene42TermVectorsFormat::live$ = false;

          jclass Lucene42TermVectorsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42TermVectorsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42TermVectorsFormat::Lucene42TermVectorsFormat() : ::org::apache::lucene::codecs::compressing::CompressingTermVectorsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42TermVectorsFormat_init_(t_Lucene42TermVectorsFormat *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_Lucene42TermVectorsFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene42TermVectorsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42TermVectorsFormat, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42TermVectorsFormat, t_Lucene42TermVectorsFormat, ::org::apache::lucene::codecs::compressing::CompressingTermVectorsFormat, Lucene42TermVectorsFormat, t_Lucene42TermVectorsFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene42TermVectorsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42TermVectorsFormat), module, "Lucene42TermVectorsFormat", 0);
          }

          void t_Lucene42TermVectorsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42TermVectorsFormat).tp_dict, "class_", make_descriptor(Lucene42TermVectorsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42TermVectorsFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene42TermVectorsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42TermVectorsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42TermVectorsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42TermVectorsFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene42TermVectorsFormat::wrap_Object(Lucene42TermVectorsFormat(((t_Lucene42TermVectorsFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene42TermVectorsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42TermVectorsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42TermVectorsFormat_init_(t_Lucene42TermVectorsFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene42TermVectorsFormat object((jobject) NULL);

            INT_CALL(object = Lucene42TermVectorsFormat());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryParserHelper.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryParserHelper::class$ = NULL;
            jmethodID *QueryParserHelper::mids$ = NULL;
            bool QueryParserHelper::live$ = false;

            jclass QueryParserHelper::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryParserHelper");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_552e5b8b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                mids$[mid_getQueryBuilder_8003a74c] = env->getMethodID(cls, "getQueryBuilder", "()Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;");
                mids$[mid_getQueryConfigHandler_3636d8c3] = env->getMethodID(cls, "getQueryConfigHandler", "()Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;");
                mids$[mid_getQueryNodeProcessor_eb463160] = env->getMethodID(cls, "getQueryNodeProcessor", "()Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;");
                mids$[mid_getSyntaxParser_ede87db0] = env->getMethodID(cls, "getSyntaxParser", "()Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;");
                mids$[mid_parse_1a6a44ef] = env->getMethodID(cls, "parse", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;");
                mids$[mid_setQueryBuilder_f13b6d3d] = env->getMethodID(cls, "setQueryBuilder", "(Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                mids$[mid_setQueryConfigHandler_0b1f7132] = env->getMethodID(cls, "setQueryConfigHandler", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                mids$[mid_setQueryNodeProcessor_507a7d15] = env->getMethodID(cls, "setQueryNodeProcessor", "(Lorg/apache/lucene/queryparser/flexible/core/processors/QueryNodeProcessor;)V");
                mids$[mid_setSyntaxParser_af2d05c9] = env->getMethodID(cls, "setSyntaxParser", "(Lorg/apache/lucene/queryparser/flexible/core/parser/SyntaxParser;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParserHelper::QueryParserHelper(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0, const ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser & a1, const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a2, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_552e5b8b, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder QueryParserHelper::getQueryBuilder() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder(env->callObjectMethod(this$, mids$[mid_getQueryBuilder_8003a74c]));
            }

            ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler QueryParserHelper::getQueryConfigHandler() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler(env->callObjectMethod(this$, mids$[mid_getQueryConfigHandler_3636d8c3]));
            }

            ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor QueryParserHelper::getQueryNodeProcessor() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor(env->callObjectMethod(this$, mids$[mid_getQueryNodeProcessor_eb463160]));
            }

            ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser QueryParserHelper::getSyntaxParser() const
            {
              return ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser(env->callObjectMethod(this$, mids$[mid_getSyntaxParser_ede87db0]));
            }

            ::java::lang::Object QueryParserHelper::parse(const ::java::lang::String & a0, const ::java::lang::String & a1) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_parse_1a6a44ef], a0.this$, a1.this$));
            }

            void QueryParserHelper::setQueryBuilder(const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryBuilder_f13b6d3d], a0.this$);
            }

            void QueryParserHelper::setQueryConfigHandler(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryConfigHandler_0b1f7132], a0.this$);
            }

            void QueryParserHelper::setQueryNodeProcessor(const ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setQueryNodeProcessor_507a7d15], a0.this$);
            }

            void QueryParserHelper::setSyntaxParser(const ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setSyntaxParser_af2d05c9], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryParserHelper_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParserHelper_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParserHelper_init_(t_QueryParserHelper *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParserHelper_getQueryBuilder(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getQueryConfigHandler(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getQueryNodeProcessor(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_getSyntaxParser(t_QueryParserHelper *self);
            static PyObject *t_QueryParserHelper_parse(t_QueryParserHelper *self, PyObject *args);
            static PyObject *t_QueryParserHelper_setQueryBuilder(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setQueryConfigHandler(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setQueryNodeProcessor(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_setSyntaxParser(t_QueryParserHelper *self, PyObject *arg);
            static PyObject *t_QueryParserHelper_get__queryBuilder(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryBuilder(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__queryConfigHandler(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryConfigHandler(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__queryNodeProcessor(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__queryNodeProcessor(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyObject *t_QueryParserHelper_get__syntaxParser(t_QueryParserHelper *self, void *data);
            static int t_QueryParserHelper_set__syntaxParser(t_QueryParserHelper *self, PyObject *arg, void *data);
            static PyGetSetDef t_QueryParserHelper__fields_[] = {
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryBuilder),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryConfigHandler),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, queryNodeProcessor),
              DECLARE_GETSET_FIELD(t_QueryParserHelper, syntaxParser),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParserHelper__methods_[] = {
              DECLARE_METHOD(t_QueryParserHelper, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserHelper, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryBuilder, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryConfigHandler, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getQueryNodeProcessor, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, getSyntaxParser, METH_NOARGS),
              DECLARE_METHOD(t_QueryParserHelper, parse, METH_VARARGS),
              DECLARE_METHOD(t_QueryParserHelper, setQueryBuilder, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setQueryConfigHandler, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setQueryNodeProcessor, METH_O),
              DECLARE_METHOD(t_QueryParserHelper, setSyntaxParser, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParserHelper, t_QueryParserHelper, ::java::lang::Object, QueryParserHelper, t_QueryParserHelper_init_, 0, 0, t_QueryParserHelper__fields_, 0, 0);

            void t_QueryParserHelper::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParserHelper), module, "QueryParserHelper", 0);
            }

            void t_QueryParserHelper::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParserHelper).tp_dict, "class_", make_descriptor(QueryParserHelper::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParserHelper).tp_dict, "wrapfn_", make_descriptor(t_QueryParserHelper::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParserHelper).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParserHelper_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParserHelper::initializeClass, 1)))
                return NULL;
              return t_QueryParserHelper::wrap_Object(QueryParserHelper(((t_QueryParserHelper *) arg)->object.this$));
            }
            static PyObject *t_QueryParserHelper_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParserHelper::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParserHelper_init_(t_QueryParserHelper *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser a1((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a2((jobject) NULL);
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a3((jobject) NULL);
              QueryParserHelper object((jobject) NULL);

              if (!parseArgs(args, "kkkk", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = QueryParserHelper(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParserHelper_getQueryBuilder(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryBuilder());
              return ::org::apache::lucene::queryparser::flexible::core::builders::t_QueryBuilder::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getQueryConfigHandler(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryConfigHandler());
              return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getQueryNodeProcessor(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor result((jobject) NULL);
              OBJ_CALL(result = self->object.getQueryNodeProcessor());
              return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_getSyntaxParser(t_QueryParserHelper *self)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser result((jobject) NULL);
              OBJ_CALL(result = self->object.getSyntaxParser());
              return ::org::apache::lucene::queryparser::flexible::core::parser::t_SyntaxParser::wrap_Object(result);
            }

            static PyObject *t_QueryParserHelper_parse(t_QueryParserHelper *self, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "ss", &a0, &a1))
              {
                OBJ_CALL(result = self->object.parse(a0, a1));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "parse", args);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryBuilder(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryBuilder(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryBuilder", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryConfigHandler(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryConfigHandler(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryConfigHandler", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setQueryNodeProcessor(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setQueryNodeProcessor(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setQueryNodeProcessor", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_setSyntaxParser(t_QueryParserHelper *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setSyntaxParser(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setSyntaxParser", arg);
              return NULL;
            }

            static PyObject *t_QueryParserHelper_get__queryBuilder(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryBuilder());
              return ::org::apache::lucene::queryparser::flexible::core::builders::t_QueryBuilder::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryBuilder(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryBuilder(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryBuilder", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__queryConfigHandler(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryConfigHandler());
              return ::org::apache::lucene::queryparser::flexible::core::config::t_QueryConfigHandler::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryConfigHandler(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryConfigHandler(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryConfigHandler", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__queryNodeProcessor(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor value((jobject) NULL);
              OBJ_CALL(value = self->object.getQueryNodeProcessor());
              return ::org::apache::lucene::queryparser::flexible::core::processors::t_QueryNodeProcessor::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__queryNodeProcessor(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessor::initializeClass, &value))
                {
                  INT_CALL(self->object.setQueryNodeProcessor(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "queryNodeProcessor", arg);
              return -1;
            }

            static PyObject *t_QueryParserHelper_get__syntaxParser(t_QueryParserHelper *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser value((jobject) NULL);
              OBJ_CALL(value = self->object.getSyntaxParser());
              return ::org::apache::lucene::queryparser::flexible::core::parser::t_SyntaxParser::wrap_Object(value);
            }
            static int t_QueryParserHelper_set__syntaxParser(t_QueryParserHelper *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::parser::SyntaxParser::initializeClass, &value))
                {
                  INT_CALL(self->object.setSyntaxParser(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "syntaxParser", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/OutputStreamDataOutput.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/io/OutputStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *OutputStreamDataOutput::class$ = NULL;
        jmethodID *OutputStreamDataOutput::mids$ = NULL;
        bool OutputStreamDataOutput::live$ = false;

        jclass OutputStreamDataOutput::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/OutputStreamDataOutput");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_82d865f8] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_writeByte_b2271687] = env->getMethodID(cls, "writeByte", "(B)V");
            mids$[mid_writeBytes_86f4435f] = env->getMethodID(cls, "writeBytes", "([BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OutputStreamDataOutput::OutputStreamDataOutput(const ::java::io::OutputStream & a0) : ::org::apache::lucene::store::DataOutput(env->newObject(initializeClass, &mids$, mid_init$_82d865f8, a0.this$)) {}

        void OutputStreamDataOutput::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void OutputStreamDataOutput::writeByte(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_writeByte_b2271687], a0);
        }

        void OutputStreamDataOutput::writeBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_writeBytes_86f4435f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_OutputStreamDataOutput_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OutputStreamDataOutput_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OutputStreamDataOutput_init_(t_OutputStreamDataOutput *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OutputStreamDataOutput_close(t_OutputStreamDataOutput *self);
        static PyObject *t_OutputStreamDataOutput_writeByte(t_OutputStreamDataOutput *self, PyObject *args);
        static PyObject *t_OutputStreamDataOutput_writeBytes(t_OutputStreamDataOutput *self, PyObject *args);

        static PyMethodDef t_OutputStreamDataOutput__methods_[] = {
          DECLARE_METHOD(t_OutputStreamDataOutput, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamDataOutput, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OutputStreamDataOutput, close, METH_NOARGS),
          DECLARE_METHOD(t_OutputStreamDataOutput, writeByte, METH_VARARGS),
          DECLARE_METHOD(t_OutputStreamDataOutput, writeBytes, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OutputStreamDataOutput, t_OutputStreamDataOutput, ::org::apache::lucene::store::DataOutput, OutputStreamDataOutput, t_OutputStreamDataOutput_init_, 0, 0, 0, 0, 0);

        void t_OutputStreamDataOutput::install(PyObject *module)
        {
          installType(&PY_TYPE(OutputStreamDataOutput), module, "OutputStreamDataOutput", 0);
        }

        void t_OutputStreamDataOutput::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OutputStreamDataOutput).tp_dict, "class_", make_descriptor(OutputStreamDataOutput::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OutputStreamDataOutput).tp_dict, "wrapfn_", make_descriptor(t_OutputStreamDataOutput::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OutputStreamDataOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OutputStreamDataOutput_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OutputStreamDataOutput::initializeClass, 1)))
            return NULL;
          return t_OutputStreamDataOutput::wrap_Object(OutputStreamDataOutput(((t_OutputStreamDataOutput *) arg)->object.this$));
        }
        static PyObject *t_OutputStreamDataOutput_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OutputStreamDataOutput::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OutputStreamDataOutput_init_(t_OutputStreamDataOutput *self, PyObject *args, PyObject *kwds)
        {
          ::java::io::OutputStream a0((jobject) NULL);
          OutputStreamDataOutput object((jobject) NULL);

          if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
          {
            INT_CALL(object = OutputStreamDataOutput(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OutputStreamDataOutput_close(t_OutputStreamDataOutput *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_OutputStreamDataOutput_writeByte(t_OutputStreamDataOutput *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.writeByte(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamDataOutput), (PyObject *) self, "writeByte", args, 2);
        }

        static PyObject *t_OutputStreamDataOutput_writeBytes(t_OutputStreamDataOutput *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.writeBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(OutputStreamDataOutput), (PyObject *) self, "writeBytes", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/spans/PythonSpans.h"
#include "java/lang/Throwable.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *PythonSpans::class$ = NULL;
          jmethodID *PythonSpans::mids$ = NULL;
          bool PythonSpans::live$ = false;

          jclass PythonSpans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/spans/PythonSpans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonSpans::PythonSpans() : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PythonSpans::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jlong PythonSpans::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonSpans::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace spans {
          static PyObject *t_PythonSpans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonSpans_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonSpans_init_(t_PythonSpans *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonSpans_finalize(t_PythonSpans *self);
          static PyObject *t_PythonSpans_pythonExtension(t_PythonSpans *self, PyObject *args);
          static jlong JNICALL t_PythonSpans_cost0(JNIEnv *jenv, jobject jobj);
          static jint JNICALL t_PythonSpans_doc1(JNIEnv *jenv, jobject jobj);
          static jint JNICALL t_PythonSpans_end2(JNIEnv *jenv, jobject jobj);
          static jobject JNICALL t_PythonSpans_getPayload3(JNIEnv *jenv, jobject jobj);
          static jboolean JNICALL t_PythonSpans_isPayloadAvailable4(JNIEnv *jenv, jobject jobj);
          static jboolean JNICALL t_PythonSpans_next5(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonSpans_pythonDecRef6(JNIEnv *jenv, jobject jobj);
          static jboolean JNICALL t_PythonSpans_skipTo7(JNIEnv *jenv, jobject jobj, jint a0);
          static jint JNICALL t_PythonSpans_start8(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonSpans_get__self(t_PythonSpans *self, void *data);
          static PyGetSetDef t_PythonSpans__fields_[] = {
            DECLARE_GET_FIELD(t_PythonSpans, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonSpans__methods_[] = {
            DECLARE_METHOD(t_PythonSpans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonSpans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonSpans, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonSpans, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonSpans, t_PythonSpans, ::org::apache::lucene::search::spans::Spans, PythonSpans, t_PythonSpans_init_, 0, 0, t_PythonSpans__fields_, 0, 0);

          void t_PythonSpans::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonSpans), module, "PythonSpans", 1);
          }

          void t_PythonSpans::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonSpans).tp_dict, "class_", make_descriptor(PythonSpans::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonSpans).tp_dict, "wrapfn_", make_descriptor(t_PythonSpans::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonSpans).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonSpans::initializeClass);
            JNINativeMethod methods[] = {
              { "cost", "()J", (void *) t_PythonSpans_cost0 },
              { "doc", "()I", (void *) t_PythonSpans_doc1 },
              { "end", "()I", (void *) t_PythonSpans_end2 },
              { "getPayload", "()Ljava/util/Collection;", (void *) t_PythonSpans_getPayload3 },
              { "isPayloadAvailable", "()Z", (void *) t_PythonSpans_isPayloadAvailable4 },
              { "next", "()Z", (void *) t_PythonSpans_next5 },
              { "pythonDecRef", "()V", (void *) t_PythonSpans_pythonDecRef6 },
              { "skipTo", "(I)Z", (void *) t_PythonSpans_skipTo7 },
              { "start", "()I", (void *) t_PythonSpans_start8 },
            };
            env->registerNatives(cls, methods, 9);
          }

          static PyObject *t_PythonSpans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonSpans::initializeClass, 1)))
              return NULL;
            return t_PythonSpans::wrap_Object(PythonSpans(((t_PythonSpans *) arg)->object.this$));
          }
          static PyObject *t_PythonSpans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonSpans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonSpans_init_(t_PythonSpans *self, PyObject *args, PyObject *kwds)
          {
            PythonSpans object((jobject) NULL);

            INT_CALL(object = PythonSpans());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonSpans_finalize(t_PythonSpans *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonSpans_pythonExtension(t_PythonSpans *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jlong JNICALL t_PythonSpans_cost0(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jlong value;
            PyObject *result = PyObject_CallMethod(obj, "cost", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "J", &value))
            {
              throwTypeError("cost", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jlong) 0;
          }

          static jint JNICALL t_PythonSpans_doc1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jint value;
            PyObject *result = PyObject_CallMethod(obj, "doc", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "I", &value))
            {
              throwTypeError("doc", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jint) 0;
          }

          static jint JNICALL t_PythonSpans_end2(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jint value;
            PyObject *result = PyObject_CallMethod(obj, "end", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "I", &value))
            {
              throwTypeError("end", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jint) 0;
          }

          static jobject JNICALL t_PythonSpans_getPayload3(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::java::util::Collection value((jobject) NULL);
            PyObject *result = PyObject_CallMethod(obj, "getPayload", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::java::util::Collection::initializeClass, &value))
            {
              throwTypeError("getPayload", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jboolean JNICALL t_PythonSpans_isPayloadAvailable4(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "isPayloadAvailable", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("isPayloadAvailable", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static jboolean JNICALL t_PythonSpans_next5(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "next", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("next", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static void JNICALL t_PythonSpans_pythonDecRef6(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static jboolean JNICALL t_PythonSpans_skipTo7(JNIEnv *jenv, jobject jobj, jint a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "skipTo", "i", (int) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("skipTo", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static jint JNICALL t_PythonSpans_start8(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jint value;
            PyObject *result = PyObject_CallMethod(obj, "start", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "I", &value))
            {
              throwTypeError("start", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jint) 0;
          }

          static PyObject *t_PythonSpans_get__self(t_PythonSpans *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemFilter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemFilterFactory::class$ = NULL;
          jmethodID *SoraniStemFilterFactory::mids$ = NULL;
          bool SoraniStemFilterFactory::live$ = false;

          jclass SoraniStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_84ba1585] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ckb/SoraniStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemFilterFactory::SoraniStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ckb::SoraniStemFilter SoraniStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ckb::SoraniStemFilter(env->callObjectMethod(this$, mids$[mid_create_84ba1585], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemFilterFactory_init_(t_SoraniStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemFilterFactory_create(t_SoraniStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SoraniStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SoraniStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniStemFilterFactory, t_SoraniStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SoraniStemFilterFactory, t_SoraniStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SoraniStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemFilterFactory), module, "SoraniStemFilterFactory", 0);
          }

          void t_SoraniStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniStemFilterFactory).tp_dict, "class_", make_descriptor(SoraniStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SoraniStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SoraniStemFilterFactory::wrap_Object(SoraniStemFilterFactory(((t_SoraniStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemFilterFactory_init_(t_SoraniStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SoraniStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SoraniStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SoraniStemFilterFactory_create(t_SoraniStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ckb::SoraniStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ckb::t_SoraniStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SoraniStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/LucenePackage.h"
#include "java/lang/Package.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {

      ::java::lang::Class *LucenePackage::class$ = NULL;
      jmethodID *LucenePackage::mids$ = NULL;
      bool LucenePackage::live$ = false;

      jclass LucenePackage::initializeClass(bool getOnly)
      {
        if (getOnly)
          return (jclass) (live$ ? class$->this$ : NULL);
        if (class$ == NULL)
        {
          jclass cls = (jclass) env->findClass("org/apache/lucene/LucenePackage");

          mids$ = new jmethodID[max_mid];
          mids$[mid_get_b0f2f7bb] = env->getStaticMethodID(cls, "get", "()Ljava/lang/Package;");

          class$ = (::java::lang::Class *) new JObject(cls);
          live$ = true;
        }
        return (jclass) class$->this$;
      }

      ::java::lang::Package LucenePackage::get()
      {
        jclass cls = env->getClass(initializeClass);
        return ::java::lang::Package(env->callStaticObjectMethod(cls, mids$[mid_get_b0f2f7bb]));
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      static PyObject *t_LucenePackage_cast_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_LucenePackage_instance_(PyTypeObject *type, PyObject *arg);
      static PyObject *t_LucenePackage_get(PyTypeObject *type);

      static PyMethodDef t_LucenePackage__methods_[] = {
        DECLARE_METHOD(t_LucenePackage, cast_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_LucenePackage, instance_, METH_O | METH_CLASS),
        DECLARE_METHOD(t_LucenePackage, get, METH_NOARGS | METH_CLASS),
        { NULL, NULL, 0, NULL }
      };

      DECLARE_TYPE(LucenePackage, t_LucenePackage, ::java::lang::Object, LucenePackage, abstract_init, 0, 0, 0, 0, 0);

      void t_LucenePackage::install(PyObject *module)
      {
        installType(&PY_TYPE(LucenePackage), module, "LucenePackage", 0);
      }

      void t_LucenePackage::initialize(PyObject *module)
      {
        PyDict_SetItemString(PY_TYPE(LucenePackage).tp_dict, "class_", make_descriptor(LucenePackage::initializeClass, 1));
        PyDict_SetItemString(PY_TYPE(LucenePackage).tp_dict, "wrapfn_", make_descriptor(t_LucenePackage::wrap_jobject));
        PyDict_SetItemString(PY_TYPE(LucenePackage).tp_dict, "boxfn_", make_descriptor(boxObject));
      }

      static PyObject *t_LucenePackage_cast_(PyTypeObject *type, PyObject *arg)
      {
        if (!(arg = castCheck(arg, LucenePackage::initializeClass, 1)))
          return NULL;
        return t_LucenePackage::wrap_Object(LucenePackage(((t_LucenePackage *) arg)->object.this$));
      }
      static PyObject *t_LucenePackage_instance_(PyTypeObject *type, PyObject *arg)
      {
        if (!castCheck(arg, LucenePackage::initializeClass, 0))
          Py_RETURN_FALSE;
        Py_RETURN_TRUE;
      }

      static PyObject *t_LucenePackage_get(PyTypeObject *type)
      {
        ::java::lang::Package result((jobject) NULL);
        OBJ_CALL(result = ::org::apache::lucene::LucenePackage::get());
        return ::java::lang::t_Package::wrap_Object(result);
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonFilteringTokenFilter.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonFilteringTokenFilter::class$ = NULL;
        jmethodID *PythonFilteringTokenFilter::mids$ = NULL;
        bool PythonFilteringTokenFilter::live$ = false;

        jclass PythonFilteringTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonFilteringTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFilteringTokenFilter::PythonFilteringTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

        void PythonFilteringTokenFilter::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFilteringTokenFilter::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFilteringTokenFilter::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonFilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFilteringTokenFilter_init_(t_PythonFilteringTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFilteringTokenFilter_finalize(t_PythonFilteringTokenFilter *self);
        static PyObject *t_PythonFilteringTokenFilter_pythonExtension(t_PythonFilteringTokenFilter *self, PyObject *args);
        static jboolean JNICALL t_PythonFilteringTokenFilter_accept0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonFilteringTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonFilteringTokenFilter_get__self(t_PythonFilteringTokenFilter *self, void *data);
        static PyGetSetDef t_PythonFilteringTokenFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFilteringTokenFilter, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFilteringTokenFilter__methods_[] = {
          DECLARE_METHOD(t_PythonFilteringTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFilteringTokenFilter, t_PythonFilteringTokenFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, PythonFilteringTokenFilter, t_PythonFilteringTokenFilter_init_, 0, 0, t_PythonFilteringTokenFilter__fields_, 0, 0);

        void t_PythonFilteringTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFilteringTokenFilter), module, "PythonFilteringTokenFilter", 1);
        }

        void t_PythonFilteringTokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFilteringTokenFilter).tp_dict, "class_", make_descriptor(PythonFilteringTokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFilteringTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PythonFilteringTokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFilteringTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFilteringTokenFilter::initializeClass);
          JNINativeMethod methods[] = {
            { "accept", "()Z", (void *) t_PythonFilteringTokenFilter_accept0 },
            { "pythonDecRef", "()V", (void *) t_PythonFilteringTokenFilter_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonFilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFilteringTokenFilter::initializeClass, 1)))
            return NULL;
          return t_PythonFilteringTokenFilter::wrap_Object(PythonFilteringTokenFilter(((t_PythonFilteringTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_PythonFilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFilteringTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFilteringTokenFilter_init_(t_PythonFilteringTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          PythonFilteringTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
          {
            INT_CALL(object = PythonFilteringTokenFilter(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFilteringTokenFilter_finalize(t_PythonFilteringTokenFilter *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFilteringTokenFilter_pythonExtension(t_PythonFilteringTokenFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonFilteringTokenFilter_accept0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "accept", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("accept", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonFilteringTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonFilteringTokenFilter_get__self(t_PythonFilteringTokenFilter *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std31/StandardTokenizerImpl31.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {

            ::java::lang::Class *StandardTokenizerImpl31::class$ = NULL;
            jmethodID *StandardTokenizerImpl31::mids$ = NULL;
            bool StandardTokenizerImpl31::live$ = false;
            jint StandardTokenizerImpl31::HANGUL_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::HIRAGANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::IDEOGRAPHIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::KATAKANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::NUMERIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::WORD_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::YYEOF = (jint) 0;
            jint StandardTokenizerImpl31::YYINITIAL = (jint) 0;

            jclass StandardTokenizerImpl31::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std31/StandardTokenizerImpl31");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardTokenizerImpl31::StandardTokenizerImpl31(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint StandardTokenizerImpl31::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void StandardTokenizerImpl31::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void StandardTokenizerImpl31::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint StandardTokenizerImpl31::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar StandardTokenizerImpl31::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void StandardTokenizerImpl31::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint StandardTokenizerImpl31::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void StandardTokenizerImpl31::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void StandardTokenizerImpl31::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint StandardTokenizerImpl31::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String StandardTokenizerImpl31::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {
            static PyObject *t_StandardTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardTokenizerImpl31_init_(t_StandardTokenizerImpl31 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardTokenizerImpl31_getNextToken(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_getText(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yybegin(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yychar(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yycharat(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yyclose(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yylength(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yypushback(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yyreset(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yystate(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yytext(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_get__nextToken(t_StandardTokenizerImpl31 *self, void *data);
            static PyGetSetDef t_StandardTokenizerImpl31__fields_[] = {
              DECLARE_GET_FIELD(t_StandardTokenizerImpl31, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardTokenizerImpl31__methods_[] = {
              DECLARE_METHOD(t_StandardTokenizerImpl31, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, getText, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yybegin, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yychar, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yycharat, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yylength, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yypushback, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yyreset, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yystate, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardTokenizerImpl31, t_StandardTokenizerImpl31, ::java::lang::Object, StandardTokenizerImpl31, t_StandardTokenizerImpl31_init_, 0, 0, t_StandardTokenizerImpl31__fields_, 0, 0);

            void t_StandardTokenizerImpl31::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardTokenizerImpl31), module, "StandardTokenizerImpl31", 0);
            }

            void t_StandardTokenizerImpl31::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "class_", make_descriptor(StandardTokenizerImpl31::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl31::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(StandardTokenizerImpl31::initializeClass);
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl31::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl31::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl31::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl31::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl31::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl31::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl31::YYEOF));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl31::YYINITIAL));
            }

            static PyObject *t_StandardTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardTokenizerImpl31::initializeClass, 1)))
                return NULL;
              return t_StandardTokenizerImpl31::wrap_Object(StandardTokenizerImpl31(((t_StandardTokenizerImpl31 *) arg)->object.this$));
            }
            static PyObject *t_StandardTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardTokenizerImpl31::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardTokenizerImpl31_init_(t_StandardTokenizerImpl31 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              StandardTokenizerImpl31 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = StandardTokenizerImpl31(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardTokenizerImpl31_getNextToken(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_getText(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yybegin(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yychar(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_yycharat(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yyclose(t_StandardTokenizerImpl31 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_StandardTokenizerImpl31_yylength(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_yypushback(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yyreset(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yystate(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_yytext(t_StandardTokenizerImpl31 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_StandardTokenizerImpl31_get__nextToken(t_StandardTokenizerImpl31 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/stempel/StempelFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/stempel/StempelStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {

          ::java::lang::Class *StempelFilter::class$ = NULL;
          jmethodID *StempelFilter::mids$ = NULL;
          bool StempelFilter::live$ = false;
          jint StempelFilter::DEFAULT_MIN_LENGTH = (jint) 0;

          jclass StempelFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/stempel/StempelFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_2cfd7ca0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/stempel/StempelStemmer;)V");
              mids$[mid_init$_0fe419aa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/stempel/StempelStemmer;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MIN_LENGTH = env->getStaticIntField(cls, "DEFAULT_MIN_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StempelFilter::StempelFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::stempel::StempelStemmer & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_2cfd7ca0, a0.this$, a1.this$)) {}

          StempelFilter::StempelFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::stempel::StempelStemmer & a1, jint a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_0fe419aa, a0.this$, a1.this$, a2)) {}

          jboolean StempelFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace stempel {
          static PyObject *t_StempelFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StempelFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StempelFilter_init_(t_StempelFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StempelFilter_incrementToken(t_StempelFilter *self, PyObject *args);

          static PyMethodDef t_StempelFilter__methods_[] = {
            DECLARE_METHOD(t_StempelFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StempelFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StempelFilter, t_StempelFilter, ::org::apache::lucene::analysis::TokenFilter, StempelFilter, t_StempelFilter_init_, 0, 0, 0, 0, 0);

          void t_StempelFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(StempelFilter), module, "StempelFilter", 0);
          }

          void t_StempelFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "class_", make_descriptor(StempelFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "wrapfn_", make_descriptor(t_StempelFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StempelFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(StempelFilter).tp_dict, "DEFAULT_MIN_LENGTH", make_descriptor(StempelFilter::DEFAULT_MIN_LENGTH));
          }

          static PyObject *t_StempelFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StempelFilter::initializeClass, 1)))
              return NULL;
            return t_StempelFilter::wrap_Object(StempelFilter(((t_StempelFilter *) arg)->object.this$));
          }
          static PyObject *t_StempelFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StempelFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StempelFilter_init_(t_StempelFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::stempel::StempelStemmer a1((jobject) NULL);
                StempelFilter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::stempel::StempelStemmer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = StempelFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::org::apache::lucene::analysis::stempel::StempelStemmer a1((jobject) NULL);
                jint a2;
                StempelFilter object((jobject) NULL);

                if (!parseArgs(args, "kkI", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::stempel::StempelStemmer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = StempelFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StempelFilter_incrementToken(t_StempelFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StempelFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParser.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "org/apache/lucene/queryparser/surround/parser/ParseException.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "java/util/List.h"
#include "java/util/ArrayList.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParser::class$ = NULL;
            jmethodID *QueryParser::mids$ = NULL;
            jfieldID *QueryParser::fids$ = NULL;
            bool QueryParser::live$ = false;

            jclass QueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_c0dff4ef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;)V");
                mids$[mid_init$_5bfa6473] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_AndQuery_26528772] = env->getMethodID(cls, "AndQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_FieldsQuery_26528772] = env->getMethodID(cls, "FieldsQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_FieldsQueryList_87851566] = env->getMethodID(cls, "FieldsQueryList", "()Ljava/util/List;");
                mids$[mid_NQuery_26528772] = env->getMethodID(cls, "NQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_NotQuery_26528772] = env->getMethodID(cls, "NotQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_OptionalFields_21eb51b0] = env->getMethodID(cls, "OptionalFields", "()Ljava/util/ArrayList;");
                mids$[mid_OptionalWeights_5e4f727f] = env->getMethodID(cls, "OptionalWeights", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;)V");
                mids$[mid_OrQuery_26528772] = env->getMethodID(cls, "OrQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_PrefixOperatorQuery_26528772] = env->getMethodID(cls, "PrefixOperatorQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_PrimaryQuery_26528772] = env->getMethodID(cls, "PrimaryQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_ReInit_c0dff4ef] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;)V");
                mids$[mid_ReInit_5bfa6473] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_SimpleTerm_26528772] = env->getMethodID(cls, "SimpleTerm", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_TopSrndQuery_26528772] = env->getMethodID(cls, "TopSrndQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_WQuery_26528772] = env->getMethodID(cls, "WQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_disable_tracing_54c6a166] = env->getMethodID(cls, "disable_tracing", "()V");
                mids$[mid_enable_tracing_54c6a166] = env->getMethodID(cls, "enable_tracing", "()V");
                mids$[mid_generateParseException_dc2be8ae] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/surround/parser/ParseException;");
                mids$[mid_getNextToken_353aefd6] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_getToken_1162c488] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_parse_eb9ff21c] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_parse2_eb9ff21c] = env->getMethodID(cls, "parse2", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getPrefixQuery_484af57f] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getOpDistance_5fdc3f57] = env->getStaticMethodID(cls, "getOpDistance", "(Ljava/lang/String;)I");
                mids$[mid_getOrQuery_685e421b] = env->getMethodID(cls, "getOrQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_allowedTruncation_5fdc3f44] = env->getMethodID(cls, "allowedTruncation", "(Ljava/lang/String;)Z");
                mids$[mid_getTruncQuery_eb9ff21c] = env->getMethodID(cls, "getTruncQuery", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getFieldsQuery_4e036592] = env->getMethodID(cls, "getFieldsQuery", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/util/ArrayList;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getAndQuery_685e421b] = env->getMethodID(cls, "getAndQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getNotQuery_3a2a55ec] = env->getMethodID(cls, "getNotQuery", "(Ljava/util/List;Lorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_checkDistanceSubQueries_657c42bd] = env->getStaticMethodID(cls, "checkDistanceSubQueries", "(Lorg/apache/lucene/queryparser/surround/query/DistanceQuery;Ljava/lang/String;)V");
                mids$[mid_getDistanceQuery_b401ccf2] = env->getMethodID(cls, "getDistanceQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getTermQuery_484af57f] = env->getMethodID(cls, "getTermQuery", "(Ljava/lang/String;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_allowedSuffix_5fdc3f44] = env->getMethodID(cls, "allowedSuffix", "(Ljava/lang/String;)Z");

                fids$ = new jfieldID[max_fid];
                fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParser::QueryParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            QueryParser::QueryParser(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c0dff4ef, a0.this$)) {}

            QueryParser::QueryParser(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5bfa6473, a0.this$)) {}

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::AndQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_AndQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::FieldsQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_FieldsQuery_26528772]));
            }

            ::java::util::List QueryParser::FieldsQueryList() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_FieldsQueryList_87851566]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::NQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_NQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::NotQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_NotQuery_26528772]));
            }

            ::java::util::ArrayList QueryParser::OptionalFields() const
            {
              return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_OptionalFields_21eb51b0]));
            }

            void QueryParser::OptionalWeights(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_OptionalWeights_5e4f727f], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::OrQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_OrQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::PrefixOperatorQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_PrefixOperatorQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::PrimaryQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_PrimaryQuery_26528772]));
            }

            void QueryParser::ReInit(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_c0dff4ef], a0.this$);
            }

            void QueryParser::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_5bfa6473], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::SimpleTerm() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_SimpleTerm_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::TopSrndQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_TopSrndQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::WQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_WQuery_26528772]));
            }

            void QueryParser::disable_tracing() const
            {
              env->callVoidMethod(this$, mids$[mid_disable_tracing_54c6a166]);
            }

            void QueryParser::enable_tracing() const
            {
              env->callVoidMethod(this$, mids$[mid_enable_tracing_54c6a166]);
            }

            ::org::apache::lucene::queryparser::surround::parser::ParseException QueryParser::generateParseException() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_dc2be8ae]));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::getNextToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_353aefd6]));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::getToken(jint a0) const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getToken_1162c488], a0));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::parse(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callStaticObjectMethod(cls, mids$[mid_parse_eb9ff21c], a0.this$));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::parse2(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_parse2_eb9ff21c], a0.this$));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::_get_jj_nt() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
            }

            void QueryParser::_set_jj_nt(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::_get_token() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_token]));
            }

            void QueryParser::_set_token(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_token], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager QueryParser::_get_token_source() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
            }

            void QueryParser::_set_token_source(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) const
            {
              env->setObjectField(this$, fids$[fid_token_source], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParser_AndQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_FieldsQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_FieldsQueryList(t_QueryParser *self);
            static PyObject *t_QueryParser_NQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_NotQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_OptionalFields(t_QueryParser *self);
            static PyObject *t_QueryParser_OptionalWeights(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_OrQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_PrefixOperatorQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_PrimaryQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args);
            static PyObject *t_QueryParser_SimpleTerm(t_QueryParser *self);
            static PyObject *t_QueryParser_TopSrndQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_WQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self);
            static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self);
            static PyObject *t_QueryParser_generateParseException(t_QueryParser *self);
            static PyObject *t_QueryParser_getNextToken(t_QueryParser *self);
            static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_parse(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParser_parse2(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data);
            static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data);
            static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data);
            static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data);
            static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data);
            static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data);

            static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data);
            static PyGetSetDef t_QueryParser__fields_[] = {
              DECLARE_GETSET_FIELD(t_QueryParser, jj_nt),
              DECLARE_GETSET_FIELD(t_QueryParser, token),
              DECLARE_GETSET_FIELD(t_QueryParser, token_source),
              DECLARE_GET_FIELD(t_QueryParser, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParser__methods_[] = {
              DECLARE_METHOD(t_QueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, AndQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, FieldsQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, FieldsQueryList, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, NQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, NotQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, OptionalFields, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, OptionalWeights, METH_O),
              DECLARE_METHOD(t_QueryParser, OrQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, PrefixOperatorQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, PrimaryQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, ReInit, METH_VARARGS),
              DECLARE_METHOD(t_QueryParser, SimpleTerm, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, TopSrndQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, WQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, disable_tracing, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, enable_tracing, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, generateParseException, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, getToken, METH_O),
              DECLARE_METHOD(t_QueryParser, parse, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, parse2, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParser, t_QueryParser, ::java::lang::Object, QueryParser, t_QueryParser_init_, 0, 0, t_QueryParser__fields_, 0, 0);

            void t_QueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParser), module, "QueryParser", 0);
            }

            void t_QueryParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "class_", make_descriptor(QueryParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "wrapfn_", make_descriptor(t_QueryParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParser::initializeClass, 1)))
                return NULL;
              return t_QueryParser::wrap_Object(QueryParser(((t_QueryParser *) arg)->object.this$));
            }
            static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  QueryParser object((jobject) NULL);

                  INT_CALL(object = QueryParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager a0((jobject) NULL);
                  QueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  QueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParser_AndQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.AndQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_FieldsQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.FieldsQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_FieldsQueryList(t_QueryParser *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.FieldsQueryList());
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::surround::query::PY_TYPE(SrndQuery));
            }

            static PyObject *t_QueryParser_NQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.NQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_NotQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.NotQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_OptionalFields(t_QueryParser *self)
            {
              ::java::util::ArrayList result((jobject) NULL);
              OBJ_CALL(result = self->object.OptionalFields());
              return ::java::util::t_ArrayList::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_QueryParser_OptionalWeights(t_QueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, &a0))
              {
                OBJ_CALL(self->object.OptionalWeights(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "OptionalWeights", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_OrQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.OrQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_PrefixOperatorQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.PrefixOperatorQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_PrimaryQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.PrimaryQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "ReInit", args);
              return NULL;
            }

            static PyObject *t_QueryParser_SimpleTerm(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.SimpleTerm());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_TopSrndQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.TopSrndQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_WQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.WQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self)
            {
              OBJ_CALL(self->object.disable_tracing());
              Py_RETURN_NONE;
            }

            static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self)
            {
              OBJ_CALL(self->object.enable_tracing());
              Py_RETURN_NONE;
            }

            static PyObject *t_QueryParser_generateParseException(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::ParseException result((jobject) NULL);
              OBJ_CALL(result = self->object.generateParseException());
              return ::org::apache::lucene::queryparser::surround::parser::t_ParseException::wrap_Object(result);
            }

            static PyObject *t_QueryParser_getNextToken(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);
              OBJ_CALL(result = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
            }

            static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getToken(a0));
                return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getToken", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_parse(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::QueryParser::parse(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "parse", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_parse2(t_QueryParser *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.parse2(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "parse2", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_jj_nt());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_jj_nt(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_token());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_token(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager value((jobject) NULL);
              OBJ_CALL(value = self->object._get_token_source());
              return ::org::apache::lucene::queryparser::surround::parser::t_QueryParserTokenManager::wrap_Object(value);
            }
            static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &value))
              {
                INT_CALL(self->object._set_token_source(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "token_source", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/BlockTermState.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/TermState.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *BlockTermState::class$ = NULL;
        jmethodID *BlockTermState::mids$ = NULL;
        jfieldID *BlockTermState::fids$ = NULL;
        bool BlockTermState::live$ = false;

        jclass BlockTermState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/BlockTermState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_copyFrom_d506ca07] = env->getMethodID(cls, "copyFrom", "(Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_blockFilePointer] = env->getFieldID(cls, "blockFilePointer", "J");
            fids$[fid_docFreq] = env->getFieldID(cls, "docFreq", "I");
            fids$[fid_termBlockOrd] = env->getFieldID(cls, "termBlockOrd", "I");
            fids$[fid_totalTermFreq] = env->getFieldID(cls, "totalTermFreq", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void BlockTermState::copyFrom(const ::org::apache::lucene::index::TermState & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyFrom_d506ca07], a0.this$);
        }

        ::java::lang::String BlockTermState::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        jlong BlockTermState::_get_blockFilePointer() const
        {
          return env->getLongField(this$, fids$[fid_blockFilePointer]);
        }

        void BlockTermState::_set_blockFilePointer(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_blockFilePointer], a0);
        }

        jint BlockTermState::_get_docFreq() const
        {
          return env->getIntField(this$, fids$[fid_docFreq]);
        }

        void BlockTermState::_set_docFreq(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docFreq], a0);
        }

        jint BlockTermState::_get_termBlockOrd() const
        {
          return env->getIntField(this$, fids$[fid_termBlockOrd]);
        }

        void BlockTermState::_set_termBlockOrd(jint a0) const
        {
          env->setIntField(this$, fids$[fid_termBlockOrd], a0);
        }

        jlong BlockTermState::_get_totalTermFreq() const
        {
          return env->getLongField(this$, fids$[fid_totalTermFreq]);
        }

        void BlockTermState::_set_totalTermFreq(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totalTermFreq], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_BlockTermState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlockTermState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BlockTermState_copyFrom(t_BlockTermState *self, PyObject *args);
        static PyObject *t_BlockTermState_toString(t_BlockTermState *self, PyObject *args);
        static PyObject *t_BlockTermState_get__blockFilePointer(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__blockFilePointer(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__docFreq(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__docFreq(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__termBlockOrd(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__termBlockOrd(t_BlockTermState *self, PyObject *arg, void *data);
        static PyObject *t_BlockTermState_get__totalTermFreq(t_BlockTermState *self, void *data);
        static int t_BlockTermState_set__totalTermFreq(t_BlockTermState *self, PyObject *arg, void *data);

        static PyGetSetDef t_BlockTermState__fields_[] = {
          DECLARE_GETSET_FIELD(t_BlockTermState, blockFilePointer),
          DECLARE_GETSET_FIELD(t_BlockTermState, docFreq),
          DECLARE_GETSET_FIELD(t_BlockTermState, termBlockOrd),
          DECLARE_GETSET_FIELD(t_BlockTermState, totalTermFreq),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BlockTermState__methods_[] = {
          DECLARE_METHOD(t_BlockTermState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlockTermState, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BlockTermState, copyFrom, METH_VARARGS),
          DECLARE_METHOD(t_BlockTermState, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BlockTermState, t_BlockTermState, ::org::apache::lucene::index::OrdTermState, BlockTermState, abstract_init, 0, 0, t_BlockTermState__fields_, 0, 0);

        void t_BlockTermState::install(PyObject *module)
        {
          installType(&PY_TYPE(BlockTermState), module, "BlockTermState", 0);
        }

        void t_BlockTermState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BlockTermState).tp_dict, "class_", make_descriptor(BlockTermState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BlockTermState).tp_dict, "wrapfn_", make_descriptor(t_BlockTermState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BlockTermState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BlockTermState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BlockTermState::initializeClass, 1)))
            return NULL;
          return t_BlockTermState::wrap_Object(BlockTermState(((t_BlockTermState *) arg)->object.this$));
        }
        static PyObject *t_BlockTermState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BlockTermState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BlockTermState_copyFrom(t_BlockTermState *self, PyObject *args)
        {
          ::org::apache::lucene::index::TermState a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::TermState::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyFrom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(BlockTermState), (PyObject *) self, "copyFrom", args, 2);
        }

        static PyObject *t_BlockTermState_toString(t_BlockTermState *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(BlockTermState), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_BlockTermState_get__blockFilePointer(t_BlockTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_blockFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_BlockTermState_set__blockFilePointer(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_blockFilePointer(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "blockFilePointer", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__docFreq(t_BlockTermState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docFreq());
          return PyInt_FromLong((long) value);
        }
        static int t_BlockTermState_set__docFreq(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__termBlockOrd(t_BlockTermState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_termBlockOrd());
          return PyInt_FromLong((long) value);
        }
        static int t_BlockTermState_set__termBlockOrd(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_termBlockOrd(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termBlockOrd", arg);
          return -1;
        }

        static PyObject *t_BlockTermState_get__totalTermFreq(t_BlockTermState *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_BlockTermState_set__totalTermFreq(t_BlockTermState *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totalTermFreq(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndTermQuery.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndTermQuery::class$ = NULL;
            jmethodID *SrndTermQuery::mids$ = NULL;
            bool SrndTermQuery::live$ = false;

            jclass SrndTermQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndTermQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
                mids$[mid_getLuceneTerm_2864f4ee] = env->getMethodID(cls, "getLuceneTerm", "(Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
                mids$[mid_getTermText_14c7b5c5] = env->getMethodID(cls, "getTermText", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndTermQuery::SrndTermQuery(const ::java::lang::String & a0, jboolean a1) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

            ::org::apache::lucene::index::Term SrndTermQuery::getLuceneTerm(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getLuceneTerm_2864f4ee], a0.this$));
            }

            ::java::lang::String SrndTermQuery::getTermText() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTermText_14c7b5c5]));
            }

            ::java::lang::String SrndTermQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SrndTermQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndTermQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndTermQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndTermQuery_init_(t_SrndTermQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndTermQuery_getLuceneTerm(t_SrndTermQuery *self, PyObject *arg);
            static PyObject *t_SrndTermQuery_getTermText(t_SrndTermQuery *self);
            static PyObject *t_SrndTermQuery_toStringUnquoted(t_SrndTermQuery *self, PyObject *args);
            static PyObject *t_SrndTermQuery_visitMatchingTerms(t_SrndTermQuery *self, PyObject *args);
            static PyObject *t_SrndTermQuery_get__termText(t_SrndTermQuery *self, void *data);
            static PyGetSetDef t_SrndTermQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndTermQuery, termText),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndTermQuery__methods_[] = {
              DECLARE_METHOD(t_SrndTermQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTermQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTermQuery, getLuceneTerm, METH_O),
              DECLARE_METHOD(t_SrndTermQuery, getTermText, METH_NOARGS),
              DECLARE_METHOD(t_SrndTermQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndTermQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndTermQuery, t_SrndTermQuery, ::org::apache::lucene::queryparser::surround::query::SimpleTerm, SrndTermQuery, t_SrndTermQuery_init_, 0, 0, t_SrndTermQuery__fields_, 0, 0);

            void t_SrndTermQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndTermQuery), module, "SrndTermQuery", 0);
            }

            void t_SrndTermQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndTermQuery).tp_dict, "class_", make_descriptor(SrndTermQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndTermQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndTermQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndTermQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndTermQuery::initializeClass, 1)))
                return NULL;
              return t_SrndTermQuery::wrap_Object(SrndTermQuery(((t_SrndTermQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndTermQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndTermQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndTermQuery_init_(t_SrndTermQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              SrndTermQuery object((jobject) NULL);

              if (!parseArgs(args, "sZ", &a0, &a1))
              {
                INT_CALL(object = SrndTermQuery(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndTermQuery_getLuceneTerm(t_SrndTermQuery *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::Term result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getLuceneTerm(a0));
                return ::org::apache::lucene::index::t_Term::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLuceneTerm", arg);
              return NULL;
            }

            static PyObject *t_SrndTermQuery_getTermText(t_SrndTermQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getTermText());
              return j2p(result);
            }

            static PyObject *t_SrndTermQuery_toStringUnquoted(t_SrndTermQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndTermQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndTermQuery_visitMatchingTerms(t_SrndTermQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SrndTermQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndTermQuery_get__termText(t_SrndTermQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getTermText());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Sort.h"
#include "java/util/Collection.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *SearchGroup::class$ = NULL;
          jmethodID *SearchGroup::mids$ = NULL;
          jfieldID *SearchGroup::fids$ = NULL;
          bool SearchGroup::live$ = false;

          jclass SearchGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/SearchGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_merge_8879ded5] = env->getStaticMethodID(cls, "merge", "(Ljava/util/List;IILorg/apache/lucene/search/Sort;)Ljava/util/Collection;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_sortValues] = env->getFieldID(cls, "sortValues", "[Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearchGroup::SearchGroup() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean SearchGroup::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SearchGroup::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::util::Collection SearchGroup::merge(const ::java::util::List & a0, jint a1, jint a2, const ::org::apache::lucene::search::Sort & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_merge_8879ded5], a0.this$, a1, a2, a3.this$));
          }

          ::java::lang::String SearchGroup::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::Object SearchGroup::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          void SearchGroup::_set_groupValue(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_groupValue], a0.this$);
          }

          JArray< ::java::lang::Object > SearchGroup::_get_sortValues() const
          {
            return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_sortValues]));
          }

          void SearchGroup::_set_sortValues(const JArray< ::java::lang::Object > & a0) const
          {
            env->setObjectField(this$, fids$[fid_sortValues], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_SearchGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearchGroup_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearchGroup_of_(t_SearchGroup *self, PyObject *args);
          static int t_SearchGroup_init_(t_SearchGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearchGroup_equals(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_hashCode(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_merge(PyTypeObject *type, PyObject *args);
          static PyObject *t_SearchGroup_toString(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_get__groupValue(t_SearchGroup *self, void *data);
          static int t_SearchGroup_set__groupValue(t_SearchGroup *self, PyObject *arg, void *data);
          static PyObject *t_SearchGroup_get__sortValues(t_SearchGroup *self, void *data);
          static int t_SearchGroup_set__sortValues(t_SearchGroup *self, PyObject *arg, void *data);

          static PyObject *t_SearchGroup_get__parameters_(t_SearchGroup *self, void *data);
          static PyGetSetDef t_SearchGroup__fields_[] = {
            DECLARE_GETSET_FIELD(t_SearchGroup, groupValue),
            DECLARE_GETSET_FIELD(t_SearchGroup, sortValues),
            DECLARE_GET_FIELD(t_SearchGroup, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearchGroup__methods_[] = {
            DECLARE_METHOD(t_SearchGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, of_, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, equals, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, merge, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SearchGroup, t_SearchGroup, ::java::lang::Object, SearchGroup, t_SearchGroup_init_, 0, 0, t_SearchGroup__fields_, 0, 0);
          PyObject *t_SearchGroup::wrap_Object(const SearchGroup& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearchGroup::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearchGroup *self = (t_SearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearchGroup::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearchGroup::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearchGroup *self = (t_SearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearchGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(SearchGroup), module, "SearchGroup", 0);
          }

          void t_SearchGroup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SearchGroup).tp_dict, "class_", make_descriptor(SearchGroup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SearchGroup).tp_dict, "wrapfn_", make_descriptor(t_SearchGroup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SearchGroup).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearchGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearchGroup::initializeClass, 1)))
              return NULL;
            return t_SearchGroup::wrap_Object(SearchGroup(((t_SearchGroup *) arg)->object.this$));
          }
          static PyObject *t_SearchGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearchGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearchGroup_of_(t_SearchGroup *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearchGroup_init_(t_SearchGroup *self, PyObject *args, PyObject *kwds)
          {
            SearchGroup object((jobject) NULL);

            INT_CALL(object = SearchGroup());
            self->object = object;

            return 0;
          }

          static PyObject *t_SearchGroup_equals(t_SearchGroup *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SearchGroup), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SearchGroup_hashCode(t_SearchGroup *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SearchGroup), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SearchGroup_merge(PyTypeObject *type, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::search::Sort a3((jobject) NULL);
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, "KIIk", ::java::util::List::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::SearchGroup::merge(a0, a1, a2, a3));
              return ::java::util::t_Collection::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "merge", args);
            return NULL;
          }

          static PyObject *t_SearchGroup_toString(t_SearchGroup *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SearchGroup), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_SearchGroup_get__parameters_(t_SearchGroup *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SearchGroup_get__groupValue(t_SearchGroup *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_SearchGroup_set__groupValue(t_SearchGroup *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_groupValue(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "groupValue", arg);
            return -1;
          }

          static PyObject *t_SearchGroup_get__sortValues(t_SearchGroup *self, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_sortValues());
            return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
          static int t_SearchGroup_set__sortValues(t_SearchGroup *self, PyObject *arg, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            if (!parseArg(arg, "[o", &value))
            {
              INT_CALL(self->object._set_sortValues(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "sortValues", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/MultiFieldQueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "java/lang/Float.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/util/Map.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *MultiFieldQueryParser::class$ = NULL;
          jmethodID *MultiFieldQueryParser::mids$ = NULL;
          bool MultiFieldQueryParser::live$ = false;

          jclass MultiFieldQueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/MultiFieldQueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_822fc5c3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_init$_84717d3b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;Ljava/util/Map;)V");
              mids$[mid_parse_8e084329] = env->getStaticMethodID(cls, "parse", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_parse_6b08888f] = env->getStaticMethodID(cls, "parse", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_parse_5707fee1] = env->getStaticMethodID(cls, "parse", "(Lorg/apache/lucene/util/Version;[Ljava/lang/String;[Ljava/lang/String;[Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/analysis/Analyzer;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_c7c8d9a8] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;I)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFieldQuery_bd696f55] = env->getMethodID(cls, "getFieldQuery", "(Ljava/lang/String;Ljava/lang/String;Z)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRangeQuery_75fd45b6] = env->getMethodID(cls, "getRangeQuery", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/Query;");
              mids$[mid_getFuzzyQuery_45995161] = env->getMethodID(cls, "getFuzzyQuery", "(Ljava/lang/String;Ljava/lang/String;F)Lorg/apache/lucene/search/Query;");
              mids$[mid_getWildcardQuery_38d6e77e] = env->getMethodID(cls, "getWildcardQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getRegexpQuery_38d6e77e] = env->getMethodID(cls, "getRegexpQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_getPrefixQuery_38d6e77e] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MultiFieldQueryParser::MultiFieldQueryParser(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_822fc5c3, a0.this$, a1.this$, a2.this$)) {}

          MultiFieldQueryParser::MultiFieldQueryParser(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::analysis::Analyzer & a2, const ::java::util::Map & a3) : ::org::apache::lucene::queryparser::classic::QueryParser(env->newObject(initializeClass, &mids$, mid_init$_84717d3b, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const JArray< ::java::lang::String > & a2, const ::org::apache::lucene::analysis::Analyzer & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_8e084329], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a3, const ::org::apache::lucene::analysis::Analyzer & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_6b08888f], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }

          ::org::apache::lucene::search::Query MultiFieldQueryParser::parse(const ::org::apache::lucene::util::Version & a0, const JArray< ::java::lang::String > & a1, const JArray< ::java::lang::String > & a2, const JArray< ::org::apache::lucene::search::BooleanClause$Occur > & a3, const ::org::apache::lucene::analysis::Analyzer & a4)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::search::Query(env->callStaticObjectMethod(cls, mids$[mid_parse_5707fee1], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_MultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MultiFieldQueryParser_init_(t_MultiFieldQueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MultiFieldQueryParser_parse(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_MultiFieldQueryParser__methods_[] = {
            DECLARE_METHOD(t_MultiFieldQueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiFieldQueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MultiFieldQueryParser, parse, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MultiFieldQueryParser, t_MultiFieldQueryParser, ::org::apache::lucene::queryparser::classic::QueryParser, MultiFieldQueryParser, t_MultiFieldQueryParser_init_, 0, 0, 0, 0, 0);

          void t_MultiFieldQueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(MultiFieldQueryParser), module, "MultiFieldQueryParser", 0);
          }

          void t_MultiFieldQueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MultiFieldQueryParser).tp_dict, "class_", make_descriptor(MultiFieldQueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MultiFieldQueryParser).tp_dict, "wrapfn_", make_descriptor(t_MultiFieldQueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MultiFieldQueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MultiFieldQueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MultiFieldQueryParser::initializeClass, 1)))
              return NULL;
            return t_MultiFieldQueryParser::wrap_Object(MultiFieldQueryParser(((t_MultiFieldQueryParser *) arg)->object.this$));
          }
          static PyObject *t_MultiFieldQueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MultiFieldQueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MultiFieldQueryParser_init_(t_MultiFieldQueryParser *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                MultiFieldQueryParser object((jobject) NULL);

                if (!parseArgs(args, "K[sk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = MultiFieldQueryParser(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
                ::java::util::Map a3((jobject) NULL);
                PyTypeObject **p3;
                MultiFieldQueryParser object((jobject) NULL);

                if (!parseArgs(args, "K[skK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Map::parameters_))
                {
                  INT_CALL(object = MultiFieldQueryParser(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_MultiFieldQueryParser_parse(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                ::org::apache::lucene::analysis::Analyzer a3((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "K[s[sk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              break;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::BooleanClause$Occur > a3((jobject) NULL);
                PyTypeObject **p3;
                ::org::apache::lucene::analysis::Analyzer a4((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "Ks[s[Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                JArray< ::java::lang::String > a1((jobject) NULL);
                JArray< ::java::lang::String > a2((jobject) NULL);
                JArray< ::org::apache::lucene::search::BooleanClause$Occur > a3((jobject) NULL);
                PyTypeObject **p3;
                ::org::apache::lucene::analysis::Analyzer a4((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArgs(args, "K[s[s[Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a4))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::MultiFieldQueryParser::parse(a0, a1, a2, a3, a4));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }
              }
            }

            return callSuper(type, "parse", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntax$Type::class$ = NULL;
              jmethodID *EscapeQuerySyntax$Type::mids$ = NULL;
              bool EscapeQuerySyntax$Type::live$ = false;
              EscapeQuerySyntax$Type *EscapeQuerySyntax$Type::NORMAL = NULL;
              EscapeQuerySyntax$Type *EscapeQuerySyntax$Type::STRING = NULL;

              jclass EscapeQuerySyntax$Type::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_870295fe] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;");
                  mids$[mid_values_4eb00ec4] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  NORMAL = new EscapeQuerySyntax$Type(env->getStaticObjectField(cls, "NORMAL", "Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;"));
                  STRING = new EscapeQuerySyntax$Type(env->getStaticObjectField(cls, "STRING", "Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              EscapeQuerySyntax$Type EscapeQuerySyntax$Type::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return EscapeQuerySyntax$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_870295fe], a0.this$));
              }

              JArray< EscapeQuerySyntax$Type > EscapeQuerySyntax$Type::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< EscapeQuerySyntax$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_4eb00ec4]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_EscapeQuerySyntax$Type_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax$Type_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntax$Type_of_(t_EscapeQuerySyntax$Type *self, PyObject *args);
              static PyObject *t_EscapeQuerySyntax$Type_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_EscapeQuerySyntax$Type_values(PyTypeObject *type);
              static PyObject *t_EscapeQuerySyntax$Type_get__parameters_(t_EscapeQuerySyntax$Type *self, void *data);
              static PyGetSetDef t_EscapeQuerySyntax$Type__fields_[] = {
                DECLARE_GET_FIELD(t_EscapeQuerySyntax$Type, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_EscapeQuerySyntax$Type__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, of_, METH_VARARGS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntax$Type, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(EscapeQuerySyntax$Type, t_EscapeQuerySyntax$Type, ::java::lang::Enum, EscapeQuerySyntax$Type, abstract_init, 0, 0, t_EscapeQuerySyntax$Type__fields_, 0, 0);
              PyObject *t_EscapeQuerySyntax$Type::wrap_Object(const EscapeQuerySyntax$Type& object, PyTypeObject *p0)
              {
                PyObject *obj = t_EscapeQuerySyntax$Type::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_EscapeQuerySyntax$Type *self = (t_EscapeQuerySyntax$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_EscapeQuerySyntax$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_EscapeQuerySyntax$Type::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_EscapeQuerySyntax$Type *self = (t_EscapeQuerySyntax$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_EscapeQuerySyntax$Type::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntax$Type), module, "EscapeQuerySyntax$Type", 0);
              }

              void t_EscapeQuerySyntax$Type::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "class_", make_descriptor(EscapeQuerySyntax$Type::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "wrapfn_", make_descriptor(t_EscapeQuerySyntax$Type::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(EscapeQuerySyntax$Type::initializeClass);
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "NORMAL", make_descriptor(t_EscapeQuerySyntax$Type::wrap_Object(*EscapeQuerySyntax$Type::NORMAL)));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntax$Type).tp_dict, "STRING", make_descriptor(t_EscapeQuerySyntax$Type::wrap_Object(*EscapeQuerySyntax$Type::STRING)));
              }

              static PyObject *t_EscapeQuerySyntax$Type_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntax$Type::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntax$Type::wrap_Object(EscapeQuerySyntax$Type(((t_EscapeQuerySyntax$Type *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntax$Type_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntax$Type::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_EscapeQuerySyntax$Type_of_(t_EscapeQuerySyntax$Type *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_EscapeQuerySyntax$Type_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                EscapeQuerySyntax$Type result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::valueOf(a0));
                  return t_EscapeQuerySyntax$Type::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_EscapeQuerySyntax$Type_values(PyTypeObject *type)
              {
                JArray< EscapeQuerySyntax$Type > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::values());
                return JArray<jobject>(result.this$).wrap(t_EscapeQuerySyntax$Type::wrap_jobject);
              }
              static PyObject *t_EscapeQuerySyntax$Type_get__parameters_(t_EscapeQuerySyntax$Type *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/HungarianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *HungarianStemmer::class$ = NULL;
        jmethodID *HungarianStemmer::mids$ = NULL;
        bool HungarianStemmer::live$ = false;

        jclass HungarianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/HungarianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        HungarianStemmer::HungarianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean HungarianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint HungarianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean HungarianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_HungarianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HungarianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_HungarianStemmer_init_(t_HungarianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_HungarianStemmer_equals(t_HungarianStemmer *self, PyObject *args);
        static PyObject *t_HungarianStemmer_hashCode(t_HungarianStemmer *self, PyObject *args);
        static PyObject *t_HungarianStemmer_stem(t_HungarianStemmer *self, PyObject *args);

        static PyMethodDef t_HungarianStemmer__methods_[] = {
          DECLARE_METHOD(t_HungarianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HungarianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_HungarianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_HungarianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_HungarianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(HungarianStemmer, t_HungarianStemmer, ::org::tartarus::snowball::SnowballProgram, HungarianStemmer, t_HungarianStemmer_init_, 0, 0, 0, 0, 0);

        void t_HungarianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(HungarianStemmer), module, "HungarianStemmer", 0);
        }

        void t_HungarianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(HungarianStemmer).tp_dict, "class_", make_descriptor(HungarianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(HungarianStemmer).tp_dict, "wrapfn_", make_descriptor(t_HungarianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(HungarianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_HungarianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, HungarianStemmer::initializeClass, 1)))
            return NULL;
          return t_HungarianStemmer::wrap_Object(HungarianStemmer(((t_HungarianStemmer *) arg)->object.this$));
        }
        static PyObject *t_HungarianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, HungarianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_HungarianStemmer_init_(t_HungarianStemmer *self, PyObject *args, PyObject *kwds)
        {
          HungarianStemmer object((jobject) NULL);

          INT_CALL(object = HungarianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_HungarianStemmer_equals(t_HungarianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(HungarianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_HungarianStemmer_hashCode(t_HungarianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(HungarianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_HungarianStemmer_stem(t_HungarianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(HungarianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/DateTools.h"
#include "java/util/Date.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/DateTools$Resolution.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *DateTools::class$ = NULL;
        jmethodID *DateTools::mids$ = NULL;
        bool DateTools::live$ = false;

        jclass DateTools::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/DateTools");

            mids$ = new jmethodID[max_mid];
            mids$[mid_dateToString_ca526ca6] = env->getStaticMethodID(cls, "dateToString", "(Ljava/util/Date;Lorg/apache/lucene/document/DateTools$Resolution;)Ljava/lang/String;");
            mids$[mid_round_d582ee11] = env->getStaticMethodID(cls, "round", "(Ljava/util/Date;Lorg/apache/lucene/document/DateTools$Resolution;)Ljava/util/Date;");
            mids$[mid_round_ebfd1017] = env->getStaticMethodID(cls, "round", "(JLorg/apache/lucene/document/DateTools$Resolution;)J");
            mids$[mid_stringToDate_e1ca31a4] = env->getStaticMethodID(cls, "stringToDate", "(Ljava/lang/String;)Ljava/util/Date;");
            mids$[mid_stringToTime_5fdc3f54] = env->getStaticMethodID(cls, "stringToTime", "(Ljava/lang/String;)J");
            mids$[mid_timeToString_3ccc1506] = env->getStaticMethodID(cls, "timeToString", "(JLorg/apache/lucene/document/DateTools$Resolution;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::lang::String DateTools::dateToString(const ::java::util::Date & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_dateToString_ca526ca6], a0.this$, a1.this$));
        }

        ::java::util::Date DateTools::round(const ::java::util::Date & a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Date(env->callStaticObjectMethod(cls, mids$[mid_round_d582ee11], a0.this$, a1.this$));
        }

        jlong DateTools::round(jlong a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_round_ebfd1017], a0, a1.this$);
        }

        ::java::util::Date DateTools::stringToDate(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Date(env->callStaticObjectMethod(cls, mids$[mid_stringToDate_e1ca31a4], a0.this$));
        }

        jlong DateTools::stringToTime(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_stringToTime_5fdc3f54], a0.this$);
        }

        ::java::lang::String DateTools::timeToString(jlong a0, const ::org::apache::lucene::document::DateTools$Resolution & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_timeToString_3ccc1506], a0, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_DateTools_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_dateToString(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools_round(PyTypeObject *type, PyObject *args);
        static PyObject *t_DateTools_stringToDate(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_stringToTime(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DateTools_timeToString(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_DateTools__methods_[] = {
          DECLARE_METHOD(t_DateTools, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, dateToString, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools, round, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DateTools, stringToDate, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, stringToTime, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DateTools, timeToString, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DateTools, t_DateTools, ::java::lang::Object, DateTools, abstract_init, 0, 0, 0, 0, 0);

        void t_DateTools::install(PyObject *module)
        {
          installType(&PY_TYPE(DateTools), module, "DateTools", 0);
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "Resolution", make_descriptor(&PY_TYPE(DateTools$Resolution)));
        }

        void t_DateTools::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "class_", make_descriptor(DateTools::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "wrapfn_", make_descriptor(t_DateTools::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DateTools).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DateTools_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DateTools::initializeClass, 1)))
            return NULL;
          return t_DateTools::wrap_Object(DateTools(((t_DateTools *) arg)->object.this$));
        }
        static PyObject *t_DateTools_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DateTools::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DateTools_dateToString(PyTypeObject *type, PyObject *args)
        {
          ::java::util::Date a0((jobject) NULL);
          ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "kK", ::java::util::Date::initializeClass, ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::dateToString(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "dateToString", args);
          return NULL;
        }

        static PyObject *t_DateTools_round(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::util::Date a0((jobject) NULL);
              ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
              PyTypeObject **p1;
              ::java::util::Date result((jobject) NULL);

              if (!parseArgs(args, "kK", ::java::util::Date::initializeClass, ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::DateTools::round(a0, a1));
                return ::java::util::t_Date::wrap_Object(result);
              }
            }
            {
              jlong a0;
              ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
              PyTypeObject **p1;
              jlong result;

              if (!parseArgs(args, "JK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::document::DateTools::round(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "round", args);
          return NULL;
        }

        static PyObject *t_DateTools_stringToDate(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::util::Date result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::stringToDate(a0));
            return ::java::util::t_Date::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "stringToDate", arg);
          return NULL;
        }

        static PyObject *t_DateTools_stringToTime(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::stringToTime(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "stringToTime", arg);
          return NULL;
        }

        static PyObject *t_DateTools_timeToString(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          ::org::apache::lucene::document::DateTools$Resolution a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "JK", ::org::apache::lucene::document::DateTools$Resolution::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::document::t_DateTools$Resolution::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::document::DateTools::timeToString(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError(type, "timeToString", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DirectoryReader::class$ = NULL;
        jmethodID *DirectoryReader::mids$ = NULL;
        bool DirectoryReader::live$ = false;
        jint DirectoryReader::DEFAULT_TERMS_INDEX_DIVISOR = (jint) 0;

        jclass DirectoryReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DirectoryReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_directory_1f3934bb] = env->getMethodID(cls, "directory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getIndexCommit_09307276] = env->getMethodID(cls, "getIndexCommit", "()Lorg/apache/lucene/index/IndexCommit;");
            mids$[mid_getVersion_54c6a17a] = env->getMethodID(cls, "getVersion", "()J");
            mids$[mid_indexExists_2e261efe] = env->getStaticMethodID(cls, "indexExists", "(Lorg/apache/lucene/store/Directory;)Z");
            mids$[mid_isCurrent_54c6a16a] = env->getMethodID(cls, "isCurrent", "()Z");
            mids$[mid_listCommits_a0981b9a] = env->getStaticMethodID(cls, "listCommits", "(Lorg/apache/lucene/store/Directory;)Ljava/util/List;");
            mids$[mid_open_109b8ac7] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_26fd6272] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_e4ee522b] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_d7b74111] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_13bade12] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_5bb3c60f] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_bf41593a] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_openIfChanged_dbc531b7] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/index/DirectoryReader;Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_1de06693] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_e4ee522b] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_doOpenIfChanged_26fd6272] = env->getMethodID(cls, "doOpenIfChanged", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_TERMS_INDEX_DIVISOR = env->getStaticIntField(cls, "DEFAULT_TERMS_INDEX_DIVISOR");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::store::Directory DirectoryReader::directory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_directory_1f3934bb]));
        }

        ::org::apache::lucene::index::IndexCommit DirectoryReader::getIndexCommit() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_getIndexCommit_09307276]));
        }

        jlong DirectoryReader::getVersion() const
        {
          return env->callLongMethod(this$, mids$[mid_getVersion_54c6a17a]);
        }

        jboolean DirectoryReader::indexExists(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_indexExists_2e261efe], a0.this$);
        }

        jboolean DirectoryReader::isCurrent() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCurrent_54c6a16a]);
        }

        ::java::util::List DirectoryReader::listCommits(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_listCommits_a0981b9a], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_109b8ac7], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexCommit & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_26fd6272], a0.this$));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_e4ee522b], a0.this$, a1));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::store::Directory & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_d7b74111], a0.this$, a1));
        }

        DirectoryReader DirectoryReader::open(const ::org::apache::lucene::index::IndexCommit & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_13bade12], a0.this$, a1));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_5bb3c60f], a0.this$));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0, const ::org::apache::lucene::index::IndexCommit & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_bf41593a], a0.this$, a1.this$));
        }

        DirectoryReader DirectoryReader::openIfChanged(const DirectoryReader & a0, const ::org::apache::lucene::index::IndexWriter & a1, jboolean a2)
        {
          jclass cls = env->getClass(initializeClass);
          return DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_dbc531b7], a0.this$, a1.this$, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DirectoryReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_of_(t_DirectoryReader *self, PyObject *args);
        static PyObject *t_DirectoryReader_directory(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_getIndexCommit(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_getVersion(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_indexExists(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_isCurrent(t_DirectoryReader *self);
        static PyObject *t_DirectoryReader_listCommits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DirectoryReader_open(PyTypeObject *type, PyObject *args);
        static PyObject *t_DirectoryReader_openIfChanged(PyTypeObject *type, PyObject *args);
        static PyObject *t_DirectoryReader_get__current(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__indexCommit(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__version(t_DirectoryReader *self, void *data);
        static PyObject *t_DirectoryReader_get__parameters_(t_DirectoryReader *self, void *data);
        static PyGetSetDef t_DirectoryReader__fields_[] = {
          DECLARE_GET_FIELD(t_DirectoryReader, current),
          DECLARE_GET_FIELD(t_DirectoryReader, indexCommit),
          DECLARE_GET_FIELD(t_DirectoryReader, version),
          DECLARE_GET_FIELD(t_DirectoryReader, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DirectoryReader__methods_[] = {
          DECLARE_METHOD(t_DirectoryReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, of_, METH_VARARGS),
          DECLARE_METHOD(t_DirectoryReader, directory, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, getIndexCommit, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, indexExists, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, isCurrent, METH_NOARGS),
          DECLARE_METHOD(t_DirectoryReader, listCommits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, open, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DirectoryReader, openIfChanged, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DirectoryReader, t_DirectoryReader, ::org::apache::lucene::index::BaseCompositeReader, DirectoryReader, abstract_init, 0, 0, t_DirectoryReader__fields_, 0, 0);
        PyObject *t_DirectoryReader::wrap_Object(const DirectoryReader& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DirectoryReader::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DirectoryReader *self = (t_DirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_DirectoryReader::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_DirectoryReader::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_DirectoryReader *self = (t_DirectoryReader *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_DirectoryReader::install(PyObject *module)
        {
          installType(&PY_TYPE(DirectoryReader), module, "DirectoryReader", 0);
        }

        void t_DirectoryReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "class_", make_descriptor(DirectoryReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "wrapfn_", make_descriptor(t_DirectoryReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(DirectoryReader::initializeClass);
          PyDict_SetItemString(PY_TYPE(DirectoryReader).tp_dict, "DEFAULT_TERMS_INDEX_DIVISOR", make_descriptor(DirectoryReader::DEFAULT_TERMS_INDEX_DIVISOR));
        }

        static PyObject *t_DirectoryReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DirectoryReader::initializeClass, 1)))
            return NULL;
          return t_DirectoryReader::wrap_Object(DirectoryReader(((t_DirectoryReader *) arg)->object.this$));
        }
        static PyObject *t_DirectoryReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DirectoryReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DirectoryReader_of_(t_DirectoryReader *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_DirectoryReader_directory(t_DirectoryReader *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_DirectoryReader_getIndexCommit(t_DirectoryReader *self)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
        }

        static PyObject *t_DirectoryReader_getVersion(t_DirectoryReader *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_DirectoryReader_indexExists(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::indexExists(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "indexExists", arg);
          return NULL;
        }

        static PyObject *t_DirectoryReader_isCurrent(t_DirectoryReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCurrent());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_DirectoryReader_listCommits(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::util::List result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::listCommits(a0));
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexCommit));
          }

          PyErr_SetArgsError(type, "listCommits", arg);
          return NULL;
        }

        static PyObject *t_DirectoryReader_open(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              jint a1;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::open(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          return callSuper(type, "open", args, 2);
        }

        static PyObject *t_DirectoryReader_openIfChanged(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "K", DirectoryReader::initializeClass, &a0, &p0, t_DirectoryReader::parameters_))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::IndexCommit a1((jobject) NULL);
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "Kk", DirectoryReader::initializeClass, ::org::apache::lucene::index::IndexCommit::initializeClass, &a0, &p0, t_DirectoryReader::parameters_, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0, a1));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              DirectoryReader a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::IndexWriter a1((jobject) NULL);
              jboolean a2;
              DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "KkZ", DirectoryReader::initializeClass, ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &p0, t_DirectoryReader::parameters_, &a1, &a2))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DirectoryReader::openIfChanged(a0, a1, a2));
                return t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "openIfChanged", args);
          return NULL;
        }
        static PyObject *t_DirectoryReader_get__parameters_(t_DirectoryReader *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_DirectoryReader_get__current(t_DirectoryReader *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCurrent());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_DirectoryReader_get__indexCommit(t_DirectoryReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexCommit value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexCommit());
          return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(value);
        }

        static PyObject *t_DirectoryReader_get__version(t_DirectoryReader *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getVersion());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$TokenStreamComponents::class$ = NULL;
        jmethodID *Analyzer$TokenStreamComponents::mids$ = NULL;
        bool Analyzer$TokenStreamComponents::live$ = false;

        jclass Analyzer$TokenStreamComponents::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$TokenStreamComponents");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_789fa946] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Tokenizer;)V");
            mids$[mid_init$_f0015a14] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/Tokenizer;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_getTokenStream_71f550c9] = env->getMethodID(cls, "getTokenStream", "()Lorg/apache/lucene/analysis/TokenStream;");
            mids$[mid_getTokenizer_6c9709bb] = env->getMethodID(cls, "getTokenizer", "()Lorg/apache/lucene/analysis/Tokenizer;");
            mids$[mid_setReader_cf2e3c10] = env->getMethodID(cls, "setReader", "(Ljava/io/Reader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$TokenStreamComponents::Analyzer$TokenStreamComponents(const ::org::apache::lucene::analysis::Tokenizer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_789fa946, a0.this$)) {}

        Analyzer$TokenStreamComponents::Analyzer$TokenStreamComponents(const ::org::apache::lucene::analysis::Tokenizer & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f0015a14, a0.this$, a1.this$)) {}

        ::org::apache::lucene::analysis::TokenStream Analyzer$TokenStreamComponents::getTokenStream() const
        {
          return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_getTokenStream_71f550c9]));
        }

        ::org::apache::lucene::analysis::Tokenizer Analyzer$TokenStreamComponents::getTokenizer() const
        {
          return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_getTokenizer_6c9709bb]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$TokenStreamComponents_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$TokenStreamComponents_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$TokenStreamComponents_init_(t_Analyzer$TokenStreamComponents *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$TokenStreamComponents_getTokenStream(t_Analyzer$TokenStreamComponents *self);
        static PyObject *t_Analyzer$TokenStreamComponents_getTokenizer(t_Analyzer$TokenStreamComponents *self);
        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenStream(t_Analyzer$TokenStreamComponents *self, void *data);
        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenizer(t_Analyzer$TokenStreamComponents *self, void *data);
        static PyGetSetDef t_Analyzer$TokenStreamComponents__fields_[] = {
          DECLARE_GET_FIELD(t_Analyzer$TokenStreamComponents, tokenStream),
          DECLARE_GET_FIELD(t_Analyzer$TokenStreamComponents, tokenizer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Analyzer$TokenStreamComponents__methods_[] = {
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, getTokenStream, METH_NOARGS),
          DECLARE_METHOD(t_Analyzer$TokenStreamComponents, getTokenizer, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$TokenStreamComponents, t_Analyzer$TokenStreamComponents, ::java::lang::Object, Analyzer$TokenStreamComponents, t_Analyzer$TokenStreamComponents_init_, 0, 0, t_Analyzer$TokenStreamComponents__fields_, 0, 0);

        void t_Analyzer$TokenStreamComponents::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$TokenStreamComponents), module, "Analyzer$TokenStreamComponents", 0);
        }

        void t_Analyzer$TokenStreamComponents::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$TokenStreamComponents).tp_dict, "class_", make_descriptor(Analyzer$TokenStreamComponents::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$TokenStreamComponents).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$TokenStreamComponents::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$TokenStreamComponents).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$TokenStreamComponents_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$TokenStreamComponents::initializeClass, 1)))
            return NULL;
          return t_Analyzer$TokenStreamComponents::wrap_Object(Analyzer$TokenStreamComponents(((t_Analyzer$TokenStreamComponents *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$TokenStreamComponents_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$TokenStreamComponents::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$TokenStreamComponents_init_(t_Analyzer$TokenStreamComponents *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::analysis::Tokenizer a0((jobject) NULL);
              Analyzer$TokenStreamComponents object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::analysis::Tokenizer::initializeClass, &a0))
              {
                INT_CALL(object = Analyzer$TokenStreamComponents(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::analysis::Tokenizer a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              Analyzer$TokenStreamComponents object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Tokenizer::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = Analyzer$TokenStreamComponents(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Analyzer$TokenStreamComponents_getTokenStream(t_Analyzer$TokenStreamComponents *self)
        {
          ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getTokenStream());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
        }

        static PyObject *t_Analyzer$TokenStreamComponents_getTokenizer(t_Analyzer$TokenStreamComponents *self)
        {
          ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);
          OBJ_CALL(result = self->object.getTokenizer());
          return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
        }

        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenStream(t_Analyzer$TokenStreamComponents *self, void *data)
        {
          ::org::apache::lucene::analysis::TokenStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getTokenStream());
          return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(value);
        }

        static PyObject *t_Analyzer$TokenStreamComponents_get__tokenizer(t_Analyzer$TokenStreamComponents *self, void *data)
        {
          ::org::apache::lucene::analysis::Tokenizer value((jobject) NULL);
          OBJ_CALL(value = self->object.getTokenizer());
          return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemFilter::class$ = NULL;
          jmethodID *NorwegianMinimalStemFilter::mids$ = NULL;
          bool NorwegianMinimalStemFilter::live$ = false;

          jclass NorwegianMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemFilter::NorwegianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          NorwegianMinimalStemFilter::NorwegianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean NorwegianMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemFilter_init_(t_NorwegianMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemFilter_incrementToken(t_NorwegianMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianMinimalStemFilter, t_NorwegianMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, NorwegianMinimalStemFilter, t_NorwegianMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_NorwegianMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemFilter), module, "NorwegianMinimalStemFilter", 0);
          }

          void t_NorwegianMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilter).tp_dict, "class_", make_descriptor(NorwegianMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_NorwegianMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemFilter::wrap_Object(NorwegianMinimalStemFilter(((t_NorwegianMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemFilter_init_(t_NorwegianMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                NorwegianMinimalStemFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = NorwegianMinimalStemFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                NorwegianMinimalStemFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = NorwegianMinimalStemFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemFilter_incrementToken(t_NorwegianMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NorwegianMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/Bindings.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {

        ::java::lang::Class *Bindings::class$ = NULL;
        jmethodID *Bindings::mids$ = NULL;
        bool Bindings::live$ = false;

        jclass Bindings::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/Bindings");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getValueSource_3afe260d] = env->getMethodID(cls, "getValueSource", "(Ljava/lang/String;)Lorg/apache/lucene/queries/function/ValueSource;");
            mids$[mid_getScoreValueSource_b62b6193] = env->getMethodID(cls, "getScoreValueSource", "()Lorg/apache/lucene/queries/function/ValueSource;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::queries::function::ValueSource Bindings::getValueSource(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::queries::function::ValueSource(env->callObjectMethod(this$, mids$[mid_getValueSource_3afe260d], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        static PyObject *t_Bindings_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bindings_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bindings_getValueSource(t_Bindings *self, PyObject *arg);

        static PyMethodDef t_Bindings__methods_[] = {
          DECLARE_METHOD(t_Bindings, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bindings, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bindings, getValueSource, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bindings, t_Bindings, ::java::lang::Object, Bindings, abstract_init, 0, 0, 0, 0, 0);

        void t_Bindings::install(PyObject *module)
        {
          installType(&PY_TYPE(Bindings), module, "Bindings", 0);
        }

        void t_Bindings::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bindings).tp_dict, "class_", make_descriptor(Bindings::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bindings).tp_dict, "wrapfn_", make_descriptor(t_Bindings::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bindings).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bindings_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bindings::initializeClass, 1)))
            return NULL;
          return t_Bindings::wrap_Object(Bindings(((t_Bindings *) arg)->object.this$));
        }
        static PyObject *t_Bindings_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bindings::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_Bindings_getValueSource(t_Bindings *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::queries::function::ValueSource result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getValueSource(a0));
            return ::org::apache::lucene::queries::function::t_ValueSource::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getValueSource", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FilterAtomicReader$FilterFields.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/io/IOException.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FilterAtomicReader$FilterFields::class$ = NULL;
        jmethodID *FilterAtomicReader$FilterFields::mids$ = NULL;
        bool FilterAtomicReader$FilterFields::live$ = false;

        jclass FilterAtomicReader$FilterFields::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FilterAtomicReader$FilterFields");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a2a6a1f4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Fields;)V");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FilterAtomicReader$FilterFields::FilterAtomicReader$FilterFields(const ::org::apache::lucene::index::Fields & a0) : ::org::apache::lucene::index::Fields(env->newObject(initializeClass, &mids$, mid_init$_a2a6a1f4, a0.this$)) {}

        ::java::util::Iterator FilterAtomicReader$FilterFields::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint FilterAtomicReader$FilterFields::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::org::apache::lucene::index::Terms FilterAtomicReader$FilterFields::terms(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FilterAtomicReader$FilterFields_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterAtomicReader$FilterFields_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterAtomicReader$FilterFields_init_(t_FilterAtomicReader$FilterFields *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterAtomicReader$FilterFields_iterator(t_FilterAtomicReader$FilterFields *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterFields_size(t_FilterAtomicReader$FilterFields *self, PyObject *args);
        static PyObject *t_FilterAtomicReader$FilterFields_terms(t_FilterAtomicReader$FilterFields *self, PyObject *args);

        static PyMethodDef t_FilterAtomicReader$FilterFields__methods_[] = {
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, iterator, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, size, METH_VARARGS),
          DECLARE_METHOD(t_FilterAtomicReader$FilterFields, terms, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterAtomicReader$FilterFields, t_FilterAtomicReader$FilterFields, ::org::apache::lucene::index::Fields, FilterAtomicReader$FilterFields, t_FilterAtomicReader$FilterFields_init_, ((PyObject *(*)(t_FilterAtomicReader$FilterFields *)) get_iterator< t_FilterAtomicReader$FilterFields >), 0, 0, 0, 0);

        void t_FilterAtomicReader$FilterFields::install(PyObject *module)
        {
          installType(&PY_TYPE(FilterAtomicReader$FilterFields), module, "FilterAtomicReader$FilterFields", 0);
        }

        void t_FilterAtomicReader$FilterFields::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterFields).tp_dict, "class_", make_descriptor(FilterAtomicReader$FilterFields::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterFields).tp_dict, "wrapfn_", make_descriptor(t_FilterAtomicReader$FilterFields::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FilterAtomicReader$FilterFields).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterAtomicReader$FilterFields_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FilterAtomicReader$FilterFields::initializeClass, 1)))
            return NULL;
          return t_FilterAtomicReader$FilterFields::wrap_Object(FilterAtomicReader$FilterFields(((t_FilterAtomicReader$FilterFields *) arg)->object.this$));
        }
        static PyObject *t_FilterAtomicReader$FilterFields_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FilterAtomicReader$FilterFields::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FilterAtomicReader$FilterFields_init_(t_FilterAtomicReader$FilterFields *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Fields a0((jobject) NULL);
          FilterAtomicReader$FilterFields object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Fields::initializeClass, &a0))
          {
            INT_CALL(object = FilterAtomicReader$FilterFields(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FilterAtomicReader$FilterFields_iterator(t_FilterAtomicReader$FilterFields *self, PyObject *args)
        {
          ::java::util::Iterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterFields), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterFields_size(t_FilterAtomicReader$FilterFields *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterFields), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_FilterAtomicReader$FilterFields_terms(t_FilterAtomicReader$FilterFields *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.terms(a0));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FilterAtomicReader$FilterFields), (PyObject *) self, "terms", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModel.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModel::class$ = NULL;
          jmethodID *BasicModel::mids$ = NULL;
          bool BasicModel::live$ = false;

          jclass BasicModel::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModel");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModel::BasicModel() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation BasicModel::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat BasicModel::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModel::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModel_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModel_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModel_init_(t_BasicModel *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModel_explain(t_BasicModel *self, PyObject *args);
          static PyObject *t_BasicModel_score(t_BasicModel *self, PyObject *args);
          static PyObject *t_BasicModel_toString(t_BasicModel *self, PyObject *args);

          static PyMethodDef t_BasicModel__methods_[] = {
            DECLARE_METHOD(t_BasicModel, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModel, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModel, explain, METH_VARARGS),
            DECLARE_METHOD(t_BasicModel, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModel, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModel, t_BasicModel, ::java::lang::Object, BasicModel, t_BasicModel_init_, 0, 0, 0, 0, 0);

          void t_BasicModel::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModel), module, "BasicModel", 0);
          }

          void t_BasicModel::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModel).tp_dict, "class_", make_descriptor(BasicModel::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModel).tp_dict, "wrapfn_", make_descriptor(t_BasicModel::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModel).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModel_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModel::initializeClass, 1)))
              return NULL;
            return t_BasicModel::wrap_Object(BasicModel(((t_BasicModel *) arg)->object.this$));
          }
          static PyObject *t_BasicModel_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModel::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModel_init_(t_BasicModel *self, PyObject *args, PyObject *kwds)
          {
            BasicModel object((jobject) NULL);

            INT_CALL(object = BasicModel());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModel_explain(t_BasicModel *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "explain", args);
            return NULL;
          }

          static PyObject *t_BasicModel_score(t_BasicModel *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "score", args);
            return NULL;
          }

          static PyObject *t_BasicModel_toString(t_BasicModel *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModel), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationH3.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationH3::class$ = NULL;
          jmethodID *NormalizationH3::mids$ = NULL;
          bool NormalizationH3::live$ = false;

          jclass NormalizationH3::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationH3");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getMu_54c6a176] = env->getMethodID(cls, "getMu", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationH3::NormalizationH3() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationH3::NormalizationH3(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationH3::getMu() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMu_54c6a176]);
          }

          jfloat NormalizationH3::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationH3::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationH3_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationH3_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationH3_init_(t_NormalizationH3 *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationH3_getMu(t_NormalizationH3 *self);
          static PyObject *t_NormalizationH3_tfn(t_NormalizationH3 *self, PyObject *args);
          static PyObject *t_NormalizationH3_toString(t_NormalizationH3 *self, PyObject *args);
          static PyObject *t_NormalizationH3_get__mu(t_NormalizationH3 *self, void *data);
          static PyGetSetDef t_NormalizationH3__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationH3, mu),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationH3__methods_[] = {
            DECLARE_METHOD(t_NormalizationH3, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH3, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationH3, getMu, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationH3, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationH3, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationH3, t_NormalizationH3, ::org::apache::lucene::search::similarities::Normalization, NormalizationH3, t_NormalizationH3_init_, 0, 0, t_NormalizationH3__fields_, 0, 0);

          void t_NormalizationH3::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationH3), module, "NormalizationH3", 0);
          }

          void t_NormalizationH3::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationH3).tp_dict, "class_", make_descriptor(NormalizationH3::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationH3).tp_dict, "wrapfn_", make_descriptor(t_NormalizationH3::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationH3).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationH3_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationH3::initializeClass, 1)))
              return NULL;
            return t_NormalizationH3::wrap_Object(NormalizationH3(((t_NormalizationH3 *) arg)->object.this$));
          }
          static PyObject *t_NormalizationH3_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationH3::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationH3_init_(t_NormalizationH3 *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationH3 object((jobject) NULL);

                INT_CALL(object = NormalizationH3());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationH3 object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationH3(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationH3_getMu(t_NormalizationH3 *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMu());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationH3_tfn(t_NormalizationH3 *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationH3), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationH3_toString(t_NormalizationH3 *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationH3), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationH3_get__mu(t_NormalizationH3 *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMu());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonSet.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/Throwable.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonSet::class$ = NULL;
        jmethodID *PythonSet::mids$ = NULL;
        bool PythonSet::live$ = false;

        jclass PythonSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
            mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
            mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
            mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
            mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
            mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonSet::PythonSet() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PythonSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::java::lang::Object::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_290588e2], a0.this$);
        }

        void PythonSet::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonSet::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonSet::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        JArray< ::java::lang::Object > PythonSet::toArray(const JArray< ::java::lang::Object > & a0) const
        {
          return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonSet_init_(t_PythonSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonSet_equals(t_PythonSet *self, PyObject *args);
        static PyObject *t_PythonSet_finalize(t_PythonSet *self);
        static PyObject *t_PythonSet_pythonExtension(t_PythonSet *self, PyObject *args);
        static PyObject *t_PythonSet_toArray(t_PythonSet *self, PyObject *arg);
        static jboolean JNICALL t_PythonSet_add0(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_addAll1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonSet_clear2(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonSet_contains3(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_containsAll4(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_equals5(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_isEmpty6(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonSet_iterator7(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonSet_pythonDecRef8(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonSet_remove9(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_removeAll10(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonSet_retainAll11(JNIEnv *jenv, jobject jobj, jobject a0);
        static jint JNICALL t_PythonSet_size12(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonSet_toArray13(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonSet_get__self(t_PythonSet *self, void *data);
        static PyGetSetDef t_PythonSet__fields_[] = {
          DECLARE_GET_FIELD(t_PythonSet, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonSet__methods_[] = {
          DECLARE_METHOD(t_PythonSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonSet, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonSet, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonSet, toArray, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonSet, t_PythonSet, ::java::lang::Object, PythonSet, t_PythonSet_init_, get_extension_iterator, 0, t_PythonSet__fields_, 0, 0);

        void t_PythonSet::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonSet), module, "PythonSet", 1);
        }

        void t_PythonSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonSet).tp_dict, "class_", make_descriptor(PythonSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonSet).tp_dict, "wrapfn_", make_descriptor(t_PythonSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonSet::initializeClass);
          JNINativeMethod methods[] = {
            { "add", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_add0 },
            { "addAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_addAll1 },
            { "clear", "()V", (void *) t_PythonSet_clear2 },
            { "contains", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_contains3 },
            { "containsAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_containsAll4 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_equals5 },
            { "isEmpty", "()Z", (void *) t_PythonSet_isEmpty6 },
            { "iterator", "()Ljava/util/Iterator;", (void *) t_PythonSet_iterator7 },
            { "pythonDecRef", "()V", (void *) t_PythonSet_pythonDecRef8 },
            { "remove", "(Ljava/lang/Object;)Z", (void *) t_PythonSet_remove9 },
            { "removeAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_removeAll10 },
            { "retainAll", "(Ljava/util/Collection;)Z", (void *) t_PythonSet_retainAll11 },
            { "size", "()I", (void *) t_PythonSet_size12 },
            { "toArray", "()[Ljava/lang/Object;", (void *) t_PythonSet_toArray13 },
          };
          env->registerNatives(cls, methods, 14);
        }

        static PyObject *t_PythonSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonSet::initializeClass, 1)))
            return NULL;
          return t_PythonSet::wrap_Object(PythonSet(((t_PythonSet *) arg)->object.this$));
        }
        static PyObject *t_PythonSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonSet_init_(t_PythonSet *self, PyObject *args, PyObject *kwds)
        {
          PythonSet object((jobject) NULL);

          INT_CALL(object = PythonSet());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonSet_equals(t_PythonSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PythonSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonSet_finalize(t_PythonSet *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonSet_pythonExtension(t_PythonSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonSet_toArray(t_PythonSet *self, PyObject *arg)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArg(arg, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "toArray", arg);
          return NULL;
        }

        static jboolean JNICALL t_PythonSet_add0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "add", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("add", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_addAll1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonSet_clear2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonSet_contains3(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "contains", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("contains", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_containsAll4(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "containsAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("containsAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_equals5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_isEmpty6(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isEmpty", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isEmpty", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonSet_iterator7(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::Iterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "iterator", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::Iterator::initializeClass, &value))
          {
            throwTypeError("iterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonSet_pythonDecRef8(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jboolean JNICALL t_PythonSet_remove9(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "remove", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("remove", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_removeAll10(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "removeAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("removeAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonSet_retainAll11(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "retainAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("retainAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jint JNICALL t_PythonSet_size12(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "size", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("size", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonSet_toArray13(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonSet::mids$[PythonSet::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::Object > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "toArray", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[o", &value))
          {
            throwTypeError("toArray", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonSet_get__self(t_PythonSet *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekStemFilter::class$ = NULL;
          jmethodID *GreekStemFilter::mids$ = NULL;
          bool GreekStemFilter::live$ = false;

          jclass GreekStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekStemFilter::GreekStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GreekStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekStemFilter_init_(t_GreekStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekStemFilter_incrementToken(t_GreekStemFilter *self, PyObject *args);

          static PyMethodDef t_GreekStemFilter__methods_[] = {
            DECLARE_METHOD(t_GreekStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekStemFilter, t_GreekStemFilter, ::org::apache::lucene::analysis::TokenFilter, GreekStemFilter, t_GreekStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GreekStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekStemFilter), module, "GreekStemFilter", 0);
          }

          void t_GreekStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekStemFilter).tp_dict, "class_", make_descriptor(GreekStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GreekStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekStemFilter::initializeClass, 1)))
              return NULL;
            return t_GreekStemFilter::wrap_Object(GreekStemFilter(((t_GreekStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GreekStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekStemFilter_init_(t_GreekStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GreekStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GreekStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekStemFilter_incrementToken(t_GreekStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GreekStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder.h"
#include "org/apache/lucene/search/RegexpQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *RegexpQueryNodeBuilder::class$ = NULL;
              jmethodID *RegexpQueryNodeBuilder::mids$ = NULL;
              bool RegexpQueryNodeBuilder::live$ = false;

              jclass RegexpQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/RegexpQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_261cecb0] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/RegexpQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              RegexpQueryNodeBuilder::RegexpQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::RegexpQuery RegexpQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::RegexpQuery(env->callObjectMethod(this$, mids$[mid_build_261cecb0], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_RegexpQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_RegexpQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_RegexpQueryNodeBuilder_init_(t_RegexpQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_RegexpQueryNodeBuilder_build(t_RegexpQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_RegexpQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_RegexpQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(RegexpQueryNodeBuilder, t_RegexpQueryNodeBuilder, ::java::lang::Object, RegexpQueryNodeBuilder, t_RegexpQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_RegexpQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(RegexpQueryNodeBuilder), module, "RegexpQueryNodeBuilder", 0);
              }

              void t_RegexpQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(RegexpQueryNodeBuilder).tp_dict, "class_", make_descriptor(RegexpQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_RegexpQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(RegexpQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_RegexpQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, RegexpQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_RegexpQueryNodeBuilder::wrap_Object(RegexpQueryNodeBuilder(((t_RegexpQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_RegexpQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, RegexpQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_RegexpQueryNodeBuilder_init_(t_RegexpQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                RegexpQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = RegexpQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_RegexpQueryNodeBuilder_build(t_RegexpQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::RegexpQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_RegexpQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoFormat.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/SegmentInfoReader.h"
#include "org/apache/lucene/codecs/SegmentInfoWriter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {

          ::java::lang::Class *Lucene3xSegmentInfoFormat::class$ = NULL;
          jmethodID *Lucene3xSegmentInfoFormat::mids$ = NULL;
          bool Lucene3xSegmentInfoFormat::live$ = false;
          ::java::lang::String *Lucene3xSegmentInfoFormat::DS_COMPOUND_KEY = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::DS_NAME_KEY = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::DS_OFFSET_KEY = NULL;
          jint Lucene3xSegmentInfoFormat::FORMAT_3_1 = (jint) 0;
          jint Lucene3xSegmentInfoFormat::FORMAT_DIAGNOSTICS = (jint) 0;
          jint Lucene3xSegmentInfoFormat::FORMAT_HAS_VECTORS = (jint) 0;
          ::java::lang::String *Lucene3xSegmentInfoFormat::NORMGEN_KEY = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::NORMGEN_PREFIX = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::UPGRADED_SI_CODEC_NAME = NULL;
          ::java::lang::String *Lucene3xSegmentInfoFormat::UPGRADED_SI_EXTENSION = NULL;
          jint Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_CURRENT = (jint) 0;
          jint Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_START = (jint) 0;

          jclass Lucene3xSegmentInfoFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfoFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getDocStoreIsCompoundFile_196ca35f] = env->getStaticMethodID(cls, "getDocStoreIsCompoundFile", "(Lorg/apache/lucene/index/SegmentInfo;)Z");
              mids$[mid_getDocStoreOffset_196ca34c] = env->getStaticMethodID(cls, "getDocStoreOffset", "(Lorg/apache/lucene/index/SegmentInfo;)I");
              mids$[mid_getDocStoreSegment_44869e72] = env->getStaticMethodID(cls, "getDocStoreSegment", "(Lorg/apache/lucene/index/SegmentInfo;)Ljava/lang/String;");
              mids$[mid_getSegmentInfoReader_1e88b6e7] = env->getMethodID(cls, "getSegmentInfoReader", "()Lorg/apache/lucene/codecs/SegmentInfoReader;");
              mids$[mid_getSegmentInfoWriter_2d4ab533] = env->getMethodID(cls, "getSegmentInfoWriter", "()Lorg/apache/lucene/codecs/SegmentInfoWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DS_COMPOUND_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "DS_COMPOUND_KEY", "Ljava/lang/String;"));
              DS_NAME_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "DS_NAME_KEY", "Ljava/lang/String;"));
              DS_OFFSET_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "DS_OFFSET_KEY", "Ljava/lang/String;"));
              FORMAT_3_1 = env->getStaticIntField(cls, "FORMAT_3_1");
              FORMAT_DIAGNOSTICS = env->getStaticIntField(cls, "FORMAT_DIAGNOSTICS");
              FORMAT_HAS_VECTORS = env->getStaticIntField(cls, "FORMAT_HAS_VECTORS");
              NORMGEN_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "NORMGEN_KEY", "Ljava/lang/String;"));
              NORMGEN_PREFIX = new ::java::lang::String(env->getStaticObjectField(cls, "NORMGEN_PREFIX", "Ljava/lang/String;"));
              UPGRADED_SI_CODEC_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "UPGRADED_SI_CODEC_NAME", "Ljava/lang/String;"));
              UPGRADED_SI_EXTENSION = new ::java::lang::String(env->getStaticObjectField(cls, "UPGRADED_SI_EXTENSION", "Ljava/lang/String;"));
              UPGRADED_SI_VERSION_CURRENT = env->getStaticIntField(cls, "UPGRADED_SI_VERSION_CURRENT");
              UPGRADED_SI_VERSION_START = env->getStaticIntField(cls, "UPGRADED_SI_VERSION_START");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene3xSegmentInfoFormat::Lucene3xSegmentInfoFormat() : ::org::apache::lucene::codecs::SegmentInfoFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean Lucene3xSegmentInfoFormat::getDocStoreIsCompoundFile(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_getDocStoreIsCompoundFile_196ca35f], a0.this$);
          }

          jint Lucene3xSegmentInfoFormat::getDocStoreOffset(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticIntMethod(cls, mids$[mid_getDocStoreOffset_196ca34c], a0.this$);
          }

          ::java::lang::String Lucene3xSegmentInfoFormat::getDocStoreSegment(const ::org::apache::lucene::index::SegmentInfo & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getDocStoreSegment_44869e72], a0.this$));
          }

          ::org::apache::lucene::codecs::SegmentInfoReader Lucene3xSegmentInfoFormat::getSegmentInfoReader() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoReader(env->callObjectMethod(this$, mids$[mid_getSegmentInfoReader_1e88b6e7]));
          }

          ::org::apache::lucene::codecs::SegmentInfoWriter Lucene3xSegmentInfoFormat::getSegmentInfoWriter() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoWriter(env->callObjectMethod(this$, mids$[mid_getSegmentInfoWriter_2d4ab533]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene3x {
          static PyObject *t_Lucene3xSegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene3xSegmentInfoFormat_init_(t_Lucene3xSegmentInfoFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreIsCompoundFile(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreOffset(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreSegment(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoReader(t_Lucene3xSegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, PyObject *args);
          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoReader(t_Lucene3xSegmentInfoFormat *self, void *data);
          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, void *data);
          static PyGetSetDef t_Lucene3xSegmentInfoFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene3xSegmentInfoFormat, segmentInfoReader),
            DECLARE_GET_FIELD(t_Lucene3xSegmentInfoFormat, segmentInfoWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene3xSegmentInfoFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getDocStoreIsCompoundFile, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getDocStoreOffset, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getDocStoreSegment, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getSegmentInfoReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene3xSegmentInfoFormat, getSegmentInfoWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene3xSegmentInfoFormat, t_Lucene3xSegmentInfoFormat, ::org::apache::lucene::codecs::SegmentInfoFormat, Lucene3xSegmentInfoFormat, t_Lucene3xSegmentInfoFormat_init_, 0, 0, t_Lucene3xSegmentInfoFormat__fields_, 0, 0);

          void t_Lucene3xSegmentInfoFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene3xSegmentInfoFormat), module, "Lucene3xSegmentInfoFormat", 0);
          }

          void t_Lucene3xSegmentInfoFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "class_", make_descriptor(Lucene3xSegmentInfoFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene3xSegmentInfoFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Lucene3xSegmentInfoFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "DS_COMPOUND_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::DS_COMPOUND_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "DS_NAME_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::DS_NAME_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "DS_OFFSET_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::DS_OFFSET_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "FORMAT_3_1", make_descriptor(Lucene3xSegmentInfoFormat::FORMAT_3_1));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "FORMAT_DIAGNOSTICS", make_descriptor(Lucene3xSegmentInfoFormat::FORMAT_DIAGNOSTICS));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "FORMAT_HAS_VECTORS", make_descriptor(Lucene3xSegmentInfoFormat::FORMAT_HAS_VECTORS));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "NORMGEN_KEY", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::NORMGEN_KEY)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "NORMGEN_PREFIX", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::NORMGEN_PREFIX)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_CODEC_NAME", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::UPGRADED_SI_CODEC_NAME)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_EXTENSION", make_descriptor(j2p(*Lucene3xSegmentInfoFormat::UPGRADED_SI_EXTENSION)));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_VERSION_CURRENT", make_descriptor(Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_CURRENT));
            PyDict_SetItemString(PY_TYPE(Lucene3xSegmentInfoFormat).tp_dict, "UPGRADED_SI_VERSION_START", make_descriptor(Lucene3xSegmentInfoFormat::UPGRADED_SI_VERSION_START));
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene3xSegmentInfoFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene3xSegmentInfoFormat::wrap_Object(Lucene3xSegmentInfoFormat(((t_Lucene3xSegmentInfoFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene3xSegmentInfoFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene3xSegmentInfoFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene3xSegmentInfoFormat_init_(t_Lucene3xSegmentInfoFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene3xSegmentInfoFormat object((jobject) NULL);

            INT_CALL(object = Lucene3xSegmentInfoFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreIsCompoundFile(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoFormat::getDocStoreIsCompoundFile(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "getDocStoreIsCompoundFile", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreOffset(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoFormat::getDocStoreOffset(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "getDocStoreOffset", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getDocStoreSegment(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::index::SegmentInfo a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::codecs::lucene3x::Lucene3xSegmentInfoFormat::getDocStoreSegment(a0));
              return j2p(result);
            }

            PyErr_SetArgsError(type, "getDocStoreSegment", arg);
            return NULL;
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoReader(t_Lucene3xSegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoReader());
              return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xSegmentInfoFormat), (PyObject *) self, "getSegmentInfoReader", args, 2);
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_getSegmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSegmentInfoWriter());
              return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene3xSegmentInfoFormat), (PyObject *) self, "getSegmentInfoWriter", args, 2);
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoReader(t_Lucene3xSegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoReader());
            return ::org::apache::lucene::codecs::t_SegmentInfoReader::wrap_Object(value);
          }

          static PyObject *t_Lucene3xSegmentInfoFormat_get__segmentInfoWriter(t_Lucene3xSegmentInfoFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::SegmentInfoWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getSegmentInfoWriter());
            return ::org::apache::lucene::codecs::t_SegmentInfoWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryTermScorer.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/highlight/WeightedTerm.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryTermScorer::class$ = NULL;
          jmethodID *QueryTermScorer::mids$ = NULL;
          bool QueryTermScorer::live$ = false;

          jclass QueryTermScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryTermScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0bdf9712] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/highlight/WeightedTerm;)V");
              mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
              mids$[mid_init$_036dd355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;)V");
              mids$[mid_init$_2e1f8bd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_allFragmentsProcessed_54c6a166] = env->getMethodID(cls, "allFragmentsProcessed", "()V");
              mids$[mid_getFragmentScore_54c6a176] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getMaxTermWeight_54c6a176] = env->getMethodID(cls, "getMaxTermWeight", "()F");
              mids$[mid_getTokenScore_54c6a176] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_init_a65cd6ab] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_startFragment_0335a78a] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryTermScorer::QueryTermScorer(const JArray< ::org::apache::lucene::search::highlight::WeightedTerm > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0bdf9712, a0.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_036dd355, a0.this$, a1.this$)) {}

          QueryTermScorer::QueryTermScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e1f8bd4, a0.this$, a1.this$, a2.this$)) {}

          void QueryTermScorer::allFragmentsProcessed() const
          {
            env->callVoidMethod(this$, mids$[mid_allFragmentsProcessed_54c6a166]);
          }

          jfloat QueryTermScorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_54c6a176]);
          }

          jfloat QueryTermScorer::getMaxTermWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxTermWeight_54c6a176]);
          }

          jfloat QueryTermScorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_54c6a176]);
          }

          ::org::apache::lucene::analysis::TokenStream QueryTermScorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_a65cd6ab], a0.this$));
          }

          void QueryTermScorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_0335a78a], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryTermScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryTermScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryTermScorer_init_(t_QueryTermScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryTermScorer_allFragmentsProcessed(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getFragmentScore(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getMaxTermWeight(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_getTokenScore(t_QueryTermScorer *self);
          static PyObject *t_QueryTermScorer_init(t_QueryTermScorer *self, PyObject *arg);
          static PyObject *t_QueryTermScorer_startFragment(t_QueryTermScorer *self, PyObject *arg);
          static PyObject *t_QueryTermScorer_get__fragmentScore(t_QueryTermScorer *self, void *data);
          static PyObject *t_QueryTermScorer_get__maxTermWeight(t_QueryTermScorer *self, void *data);
          static PyObject *t_QueryTermScorer_get__tokenScore(t_QueryTermScorer *self, void *data);
          static PyGetSetDef t_QueryTermScorer__fields_[] = {
            DECLARE_GET_FIELD(t_QueryTermScorer, fragmentScore),
            DECLARE_GET_FIELD(t_QueryTermScorer, maxTermWeight),
            DECLARE_GET_FIELD(t_QueryTermScorer, tokenScore),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryTermScorer__methods_[] = {
            DECLARE_METHOD(t_QueryTermScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryTermScorer, allFragmentsProcessed, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getMaxTermWeight, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryTermScorer, init, METH_O),
            DECLARE_METHOD(t_QueryTermScorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryTermScorer, t_QueryTermScorer, ::java::lang::Object, QueryTermScorer, t_QueryTermScorer_init_, 0, 0, t_QueryTermScorer__fields_, 0, 0);

          void t_QueryTermScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryTermScorer), module, "QueryTermScorer", 0);
          }

          void t_QueryTermScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryTermScorer).tp_dict, "class_", make_descriptor(QueryTermScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryTermScorer).tp_dict, "wrapfn_", make_descriptor(t_QueryTermScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryTermScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryTermScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryTermScorer::initializeClass, 1)))
              return NULL;
            return t_QueryTermScorer::wrap_Object(QueryTermScorer(((t_QueryTermScorer *) arg)->object.this$));
          }
          static PyObject *t_QueryTermScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryTermScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryTermScorer_init_(t_QueryTermScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::search::highlight::WeightedTerm > a0((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::search::highlight::WeightedTerm::initializeClass, &a0))
                {
                  INT_CALL(object = QueryTermScorer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  INT_CALL(object = QueryTermScorer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryTermScorer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryTermScorer object((jobject) NULL);

                if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryTermScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryTermScorer_allFragmentsProcessed(t_QueryTermScorer *self)
          {
            OBJ_CALL(self->object.allFragmentsProcessed());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryTermScorer_getFragmentScore(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_getMaxTermWeight(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_getTokenScore(t_QueryTermScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryTermScorer_init(t_QueryTermScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_QueryTermScorer_startFragment(t_QueryTermScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_QueryTermScorer_get__fragmentScore(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryTermScorer_get__maxTermWeight(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryTermScorer_get__tokenScore(t_QueryTermScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyReader$ChildrenIterator::class$ = NULL;
          jmethodID *TaxonomyReader$ChildrenIterator::mids$ = NULL;
          bool TaxonomyReader$ChildrenIterator::live$ = false;

          jclass TaxonomyReader$ChildrenIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_next_54c6a179] = env->getMethodID(cls, "next", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint TaxonomyReader$ChildrenIterator::next() const
          {
            return env->callIntMethod(this$, mids$[mid_next_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyReader$ChildrenIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader$ChildrenIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader$ChildrenIterator_next(t_TaxonomyReader$ChildrenIterator *self);

          static PyMethodDef t_TaxonomyReader$ChildrenIterator__methods_[] = {
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader$ChildrenIterator, next, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyReader$ChildrenIterator, t_TaxonomyReader$ChildrenIterator, ::java::lang::Object, TaxonomyReader$ChildrenIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_TaxonomyReader$ChildrenIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyReader$ChildrenIterator), module, "TaxonomyReader$ChildrenIterator", 0);
          }

          void t_TaxonomyReader$ChildrenIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyReader$ChildrenIterator).tp_dict, "class_", make_descriptor(TaxonomyReader$ChildrenIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader$ChildrenIterator).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyReader$ChildrenIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader$ChildrenIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TaxonomyReader$ChildrenIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyReader$ChildrenIterator::initializeClass, 1)))
              return NULL;
            return t_TaxonomyReader$ChildrenIterator::wrap_Object(TaxonomyReader$ChildrenIterator(((t_TaxonomyReader$ChildrenIterator *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyReader$ChildrenIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyReader$ChildrenIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TaxonomyReader$ChildrenIterator_next(t_TaxonomyReader$ChildrenIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.next());
            return PyInt_FromLong((long) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Comparable.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexCommit::class$ = NULL;
        jmethodID *IndexCommit::mids$ = NULL;
        bool IndexCommit::live$ = false;

        jclass IndexCommit::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexCommit");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compareTo_fecc65cc] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/index/IndexCommit;)I");
            mids$[mid_delete_54c6a166] = env->getMethodID(cls, "delete", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getFileNames_2d2d7de4] = env->getMethodID(cls, "getFileNames", "()Ljava/util/Collection;");
            mids$[mid_getGeneration_54c6a17a] = env->getMethodID(cls, "getGeneration", "()J");
            mids$[mid_getSegmentCount_54c6a179] = env->getMethodID(cls, "getSegmentCount", "()I");
            mids$[mid_getSegmentsFileName_14c7b5c5] = env->getMethodID(cls, "getSegmentsFileName", "()Ljava/lang/String;");
            mids$[mid_getUserData_db60befd] = env->getMethodID(cls, "getUserData", "()Ljava/util/Map;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isDeleted_54c6a16a] = env->getMethodID(cls, "isDeleted", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint IndexCommit::compareTo(const IndexCommit & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTo_fecc65cc], a0.this$);
        }

        void IndexCommit::delete$() const
        {
          env->callVoidMethod(this$, mids$[mid_delete_54c6a166]);
        }

        jboolean IndexCommit::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::store::Directory IndexCommit::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }

        ::java::util::Collection IndexCommit::getFileNames() const
        {
          return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getFileNames_2d2d7de4]));
        }

        jlong IndexCommit::getGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getGeneration_54c6a17a]);
        }

        jint IndexCommit::getSegmentCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getSegmentCount_54c6a179]);
        }

        ::java::lang::String IndexCommit::getSegmentsFileName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSegmentsFileName_14c7b5c5]));
        }

        ::java::util::Map IndexCommit::getUserData() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getUserData_db60befd]));
        }

        jint IndexCommit::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean IndexCommit::isDeleted() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isDeleted_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexCommit_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexCommit_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexCommit_compareTo(t_IndexCommit *self, PyObject *arg);
        static PyObject *t_IndexCommit_delete(t_IndexCommit *self);
        static PyObject *t_IndexCommit_equals(t_IndexCommit *self, PyObject *args);
        static PyObject *t_IndexCommit_getDirectory(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getFileNames(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getGeneration(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getSegmentCount(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getSegmentsFileName(t_IndexCommit *self);
        static PyObject *t_IndexCommit_getUserData(t_IndexCommit *self);
        static PyObject *t_IndexCommit_hashCode(t_IndexCommit *self, PyObject *args);
        static PyObject *t_IndexCommit_isDeleted(t_IndexCommit *self);
        static PyObject *t_IndexCommit_get__deleted(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__directory(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__fileNames(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__generation(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__segmentCount(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__segmentsFileName(t_IndexCommit *self, void *data);
        static PyObject *t_IndexCommit_get__userData(t_IndexCommit *self, void *data);
        static PyGetSetDef t_IndexCommit__fields_[] = {
          DECLARE_GET_FIELD(t_IndexCommit, deleted),
          DECLARE_GET_FIELD(t_IndexCommit, directory),
          DECLARE_GET_FIELD(t_IndexCommit, fileNames),
          DECLARE_GET_FIELD(t_IndexCommit, generation),
          DECLARE_GET_FIELD(t_IndexCommit, segmentCount),
          DECLARE_GET_FIELD(t_IndexCommit, segmentsFileName),
          DECLARE_GET_FIELD(t_IndexCommit, userData),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexCommit__methods_[] = {
          DECLARE_METHOD(t_IndexCommit, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexCommit, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexCommit, compareTo, METH_O),
          DECLARE_METHOD(t_IndexCommit, delete, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, equals, METH_VARARGS),
          DECLARE_METHOD(t_IndexCommit, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getFileNames, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getGeneration, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getSegmentCount, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getSegmentsFileName, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, getUserData, METH_NOARGS),
          DECLARE_METHOD(t_IndexCommit, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IndexCommit, isDeleted, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexCommit, t_IndexCommit, ::java::lang::Object, IndexCommit, abstract_init, 0, 0, t_IndexCommit__fields_, 0, 0);

        void t_IndexCommit::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexCommit), module, "IndexCommit", 0);
        }

        void t_IndexCommit::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexCommit).tp_dict, "class_", make_descriptor(IndexCommit::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexCommit).tp_dict, "wrapfn_", make_descriptor(t_IndexCommit::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexCommit).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexCommit_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexCommit::initializeClass, 1)))
            return NULL;
          return t_IndexCommit::wrap_Object(IndexCommit(((t_IndexCommit *) arg)->object.this$));
        }
        static PyObject *t_IndexCommit_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexCommit::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexCommit_compareTo(t_IndexCommit *self, PyObject *arg)
        {
          IndexCommit a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", IndexCommit::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.compareTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
          return NULL;
        }

        static PyObject *t_IndexCommit_delete(t_IndexCommit *self)
        {
          OBJ_CALL(self->object.delete$());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexCommit_equals(t_IndexCommit *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IndexCommit), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IndexCommit_getDirectory(t_IndexCommit *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_IndexCommit_getFileNames(t_IndexCommit *self)
        {
          ::java::util::Collection result((jobject) NULL);
          OBJ_CALL(result = self->object.getFileNames());
          return ::java::util::t_Collection::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexCommit_getGeneration(t_IndexCommit *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_IndexCommit_getSegmentCount(t_IndexCommit *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSegmentCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexCommit_getSegmentsFileName(t_IndexCommit *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getSegmentsFileName());
          return j2p(result);
        }

        static PyObject *t_IndexCommit_getUserData(t_IndexCommit *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_IndexCommit_hashCode(t_IndexCommit *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexCommit), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IndexCommit_isDeleted(t_IndexCommit *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isDeleted());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexCommit_get__deleted(t_IndexCommit *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isDeleted());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_IndexCommit_get__directory(t_IndexCommit *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_IndexCommit_get__fileNames(t_IndexCommit *self, void *data)
        {
          ::java::util::Collection value((jobject) NULL);
          OBJ_CALL(value = self->object.getFileNames());
          return ::java::util::t_Collection::wrap_Object(value);
        }

        static PyObject *t_IndexCommit_get__generation(t_IndexCommit *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_IndexCommit_get__segmentCount(t_IndexCommit *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSegmentCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_IndexCommit_get__segmentsFileName(t_IndexCommit *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getSegmentsFileName());
          return j2p(value);
        }

        static PyObject *t_IndexCommit_get__userData(t_IndexCommit *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getUserData());
          return ::java::util::t_Map::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TrackingIndexWriter.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Iterable.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/Term.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TrackingIndexWriter::class$ = NULL;
        jmethodID *TrackingIndexWriter::mids$ = NULL;
        bool TrackingIndexWriter::live$ = false;

        jclass TrackingIndexWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TrackingIndexWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4f2fb7d5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexWriter;)V");
            mids$[mid_addDocument_d1cac219] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;)J");
            mids$[mid_addDocument_f74a1d49] = env->getMethodID(cls, "addDocument", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");
            mids$[mid_addDocuments_d1cac219] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;)J");
            mids$[mid_addDocuments_f74a1d49] = env->getMethodID(cls, "addDocuments", "(Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");
            mids$[mid_addIndexes_a20f8ef5] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/index/IndexReader;)J");
            mids$[mid_addIndexes_160e609a] = env->getMethodID(cls, "addIndexes", "([Lorg/apache/lucene/store/Directory;)J");
            mids$[mid_deleteAll_54c6a17a] = env->getMethodID(cls, "deleteAll", "()J");
            mids$[mid_deleteDocuments_7eca6a9d] = env->getMethodID(cls, "deleteDocuments", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_deleteDocuments_c9f85e1d] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/index/Term;)J");
            mids$[mid_deleteDocuments_937b34cf] = env->getMethodID(cls, "deleteDocuments", "([Lorg/apache/lucene/search/Query;)J");
            mids$[mid_deleteDocuments_6e30110f] = env->getMethodID(cls, "deleteDocuments", "(Lorg/apache/lucene/search/Query;)J");
            mids$[mid_getAndIncrementGeneration_54c6a17a] = env->getMethodID(cls, "getAndIncrementGeneration", "()J");
            mids$[mid_getGeneration_54c6a17a] = env->getMethodID(cls, "getGeneration", "()J");
            mids$[mid_getIndexWriter_bbe46a60] = env->getMethodID(cls, "getIndexWriter", "()Lorg/apache/lucene/index/IndexWriter;");
            mids$[mid_tryDeleteDocument_1e4306f9] = env->getMethodID(cls, "tryDeleteDocument", "(Lorg/apache/lucene/index/IndexReader;I)J");
            mids$[mid_updateDocument_b5aef5fe] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)J");
            mids$[mid_updateDocument_4d995da4] = env->getMethodID(cls, "updateDocument", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");
            mids$[mid_updateDocuments_b5aef5fe] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;)J");
            mids$[mid_updateDocuments_4d995da4] = env->getMethodID(cls, "updateDocuments", "(Lorg/apache/lucene/index/Term;Ljava/lang/Iterable;Lorg/apache/lucene/analysis/Analyzer;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TrackingIndexWriter::TrackingIndexWriter(const ::org::apache::lucene::index::IndexWriter & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4f2fb7d5, a0.this$)) {}

        jlong TrackingIndexWriter::addDocument(const ::java::lang::Iterable & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocument_d1cac219], a0.this$);
        }

        jlong TrackingIndexWriter::addDocument(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocument_f74a1d49], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::addDocuments(const ::java::lang::Iterable & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocuments_d1cac219], a0.this$);
        }

        jlong TrackingIndexWriter::addDocuments(const ::java::lang::Iterable & a0, const ::org::apache::lucene::analysis::Analyzer & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_addDocuments_f74a1d49], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::addIndexes(const JArray< ::org::apache::lucene::index::IndexReader > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addIndexes_a20f8ef5], a0.this$);
        }

        jlong TrackingIndexWriter::addIndexes(const JArray< ::org::apache::lucene::store::Directory > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_addIndexes_160e609a], a0.this$);
        }

        jlong TrackingIndexWriter::deleteAll() const
        {
          return env->callLongMethod(this$, mids$[mid_deleteAll_54c6a17a]);
        }

        jlong TrackingIndexWriter::deleteDocuments(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_7eca6a9d], a0.this$);
        }

        jlong TrackingIndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::index::Term > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_c9f85e1d], a0.this$);
        }

        jlong TrackingIndexWriter::deleteDocuments(const JArray< ::org::apache::lucene::search::Query > & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_937b34cf], a0.this$);
        }

        jlong TrackingIndexWriter::deleteDocuments(const ::org::apache::lucene::search::Query & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_deleteDocuments_6e30110f], a0.this$);
        }

        jlong TrackingIndexWriter::getAndIncrementGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getAndIncrementGeneration_54c6a17a]);
        }

        jlong TrackingIndexWriter::getGeneration() const
        {
          return env->callLongMethod(this$, mids$[mid_getGeneration_54c6a17a]);
        }

        ::org::apache::lucene::index::IndexWriter TrackingIndexWriter::getIndexWriter() const
        {
          return ::org::apache::lucene::index::IndexWriter(env->callObjectMethod(this$, mids$[mid_getIndexWriter_bbe46a60]));
        }

        jlong TrackingIndexWriter::tryDeleteDocument(const ::org::apache::lucene::index::IndexReader & a0, jint a1) const
        {
          return env->callLongMethod(this$, mids$[mid_tryDeleteDocument_1e4306f9], a0.this$, a1);
        }

        jlong TrackingIndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocument_b5aef5fe], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::updateDocument(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocument_4d995da4], a0.this$, a1.this$, a2.this$);
        }

        jlong TrackingIndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocuments_b5aef5fe], a0.this$, a1.this$);
        }

        jlong TrackingIndexWriter::updateDocuments(const ::org::apache::lucene::index::Term & a0, const ::java::lang::Iterable & a1, const ::org::apache::lucene::analysis::Analyzer & a2) const
        {
          return env->callLongMethod(this$, mids$[mid_updateDocuments_4d995da4], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TrackingIndexWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TrackingIndexWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TrackingIndexWriter_init_(t_TrackingIndexWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TrackingIndexWriter_addDocument(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_addDocuments(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_addIndexes(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_deleteAll(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_deleteDocuments(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_getAndIncrementGeneration(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_getGeneration(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_getIndexWriter(t_TrackingIndexWriter *self);
        static PyObject *t_TrackingIndexWriter_tryDeleteDocument(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_updateDocument(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_updateDocuments(t_TrackingIndexWriter *self, PyObject *args);
        static PyObject *t_TrackingIndexWriter_get__andIncrementGeneration(t_TrackingIndexWriter *self, void *data);
        static PyObject *t_TrackingIndexWriter_get__generation(t_TrackingIndexWriter *self, void *data);
        static PyObject *t_TrackingIndexWriter_get__indexWriter(t_TrackingIndexWriter *self, void *data);
        static PyGetSetDef t_TrackingIndexWriter__fields_[] = {
          DECLARE_GET_FIELD(t_TrackingIndexWriter, andIncrementGeneration),
          DECLARE_GET_FIELD(t_TrackingIndexWriter, generation),
          DECLARE_GET_FIELD(t_TrackingIndexWriter, indexWriter),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TrackingIndexWriter__methods_[] = {
          DECLARE_METHOD(t_TrackingIndexWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingIndexWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TrackingIndexWriter, addDocument, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, addDocuments, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, addIndexes, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, deleteAll, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, deleteDocuments, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, getAndIncrementGeneration, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, getGeneration, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, getIndexWriter, METH_NOARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, tryDeleteDocument, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, updateDocument, METH_VARARGS),
          DECLARE_METHOD(t_TrackingIndexWriter, updateDocuments, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TrackingIndexWriter, t_TrackingIndexWriter, ::java::lang::Object, TrackingIndexWriter, t_TrackingIndexWriter_init_, 0, 0, t_TrackingIndexWriter__fields_, 0, 0);

        void t_TrackingIndexWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(TrackingIndexWriter), module, "TrackingIndexWriter", 0);
        }

        void t_TrackingIndexWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TrackingIndexWriter).tp_dict, "class_", make_descriptor(TrackingIndexWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TrackingIndexWriter).tp_dict, "wrapfn_", make_descriptor(t_TrackingIndexWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TrackingIndexWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TrackingIndexWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TrackingIndexWriter::initializeClass, 1)))
            return NULL;
          return t_TrackingIndexWriter::wrap_Object(TrackingIndexWriter(((t_TrackingIndexWriter *) arg)->object.this$));
        }
        static PyObject *t_TrackingIndexWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TrackingIndexWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TrackingIndexWriter_init_(t_TrackingIndexWriter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          TrackingIndexWriter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0))
          {
            INT_CALL(object = TrackingIndexWriter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TrackingIndexWriter_addDocument(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              jlong result;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.addDocument(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.addDocument(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocument", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_addDocuments(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              jlong result;

              if (!parseArgs(args, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.addDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 2:
            {
              ::java::lang::Iterable a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::analysis::Analyzer a1((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "Kk", ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.addDocuments(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addDocuments", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_addIndexes(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              JArray< ::org::apache::lucene::index::IndexReader > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addIndexes(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::store::Directory > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addIndexes(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addIndexes", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_deleteAll(t_TrackingIndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.deleteAll());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TrackingIndexWriter_deleteDocuments(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::index::Term::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              JArray< ::org::apache::lucene::search::Query > a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.deleteDocuments(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "deleteDocuments", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_getAndIncrementGeneration(t_TrackingIndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getAndIncrementGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TrackingIndexWriter_getGeneration(t_TrackingIndexWriter *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TrackingIndexWriter_getIndexWriter(t_TrackingIndexWriter *self)
        {
          ::org::apache::lucene::index::IndexWriter result((jobject) NULL);
          OBJ_CALL(result = self->object.getIndexWriter());
          return ::org::apache::lucene::index::t_IndexWriter::wrap_Object(result);
        }

        static PyObject *t_TrackingIndexWriter_tryDeleteDocument(t_TrackingIndexWriter *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          jint a1;
          jlong result;

          if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.tryDeleteDocument(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "tryDeleteDocument", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_updateDocument(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              jlong result;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.updateDocument(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(result = self->object.updateDocument(a0, a1, a2));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocument", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_updateDocuments(t_TrackingIndexWriter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              jlong result;

              if (!parseArgs(args, "kK", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
              {
                OBJ_CALL(result = self->object.updateDocuments(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::Term a0((jobject) NULL);
              ::java::lang::Iterable a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
              jlong result;

              if (!parseArgs(args, "kKk", ::org::apache::lucene::index::Term::initializeClass, ::java::lang::Iterable::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
              {
                OBJ_CALL(result = self->object.updateDocuments(a0, a1, a2));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "updateDocuments", args);
          return NULL;
        }

        static PyObject *t_TrackingIndexWriter_get__andIncrementGeneration(t_TrackingIndexWriter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getAndIncrementGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TrackingIndexWriter_get__generation(t_TrackingIndexWriter *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getGeneration());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_TrackingIndexWriter_get__indexWriter(t_TrackingIndexWriter *self, void *data)
        {
          ::org::apache::lucene::index::IndexWriter value((jobject) NULL);
          OBJ_CALL(value = self->object.getIndexWriter());
          return ::org::apache::lucene::index::t_IndexWriter::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.h"
#include "java/lang/CharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldValuePairQueryNode.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/TextableQueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldQueryNode::class$ = NULL;
              jmethodID *FieldQueryNode::mids$ = NULL;
              bool FieldQueryNode::live$ = false;

              jclass FieldQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_ddd81d4e] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;II)V");
                  mids$[mid_cloneTree_010ca031] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode;");
                  mids$[mid_getBegin_54c6a179] = env->getMethodID(cls, "getBegin", "()I");
                  mids$[mid_getEnd_54c6a179] = env->getMethodID(cls, "getEnd", "()I");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
                  mids$[mid_getText_e0adba2f] = env->getMethodID(cls, "getText", "()Ljava/lang/CharSequence;");
                  mids$[mid_getTextAsString_14c7b5c5] = env->getMethodID(cls, "getTextAsString", "()Ljava/lang/String;");
                  mids$[mid_getValue_e0adba2f] = env->getMethodID(cls, "getValue", "()Ljava/lang/CharSequence;");
                  mids$[mid_setBegin_39c7bd3c] = env->getMethodID(cls, "setBegin", "(I)V");
                  mids$[mid_setEnd_39c7bd3c] = env->getMethodID(cls, "setEnd", "(I)V");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");
                  mids$[mid_setText_a8afc64a] = env->getMethodID(cls, "setText", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_setValue_a8afc64a] = env->getMethodID(cls, "setValue", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                  mids$[mid_getTermEscaped_99b8dfe1] = env->getMethodID(cls, "getTermEscaped", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_getTermEscapeQuoted_99b8dfe1] = env->getMethodID(cls, "getTermEscapeQuoted", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldQueryNode::FieldQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) : ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl(env->newObject(initializeClass, &mids$, mid_init$_ddd81d4e, a0.this$, a1.this$, a2, a3)) {}

              FieldQueryNode FieldQueryNode::cloneTree() const
              {
                return FieldQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_010ca031]));
              }

              jint FieldQueryNode::getBegin() const
              {
                return env->callIntMethod(this$, mids$[mid_getBegin_54c6a179]);
              }

              jint FieldQueryNode::getEnd() const
              {
                return env->callIntMethod(this$, mids$[mid_getEnd_54c6a179]);
              }

              ::java::lang::CharSequence FieldQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String FieldQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              jint FieldQueryNode::getPositionIncrement() const
              {
                return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
              }

              ::java::lang::CharSequence FieldQueryNode::getText() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getText_e0adba2f]));
              }

              ::java::lang::String FieldQueryNode::getTextAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTextAsString_14c7b5c5]));
              }

              ::java::lang::CharSequence FieldQueryNode::getValue() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getValue_e0adba2f]));
              }

              void FieldQueryNode::setBegin(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setBegin_39c7bd3c], a0);
              }

              void FieldQueryNode::setEnd(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setEnd_39c7bd3c], a0);
              }

              void FieldQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              void FieldQueryNode::setPositionIncrement(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
              }

              void FieldQueryNode::setText(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setText_a8afc64a], a0.this$);
              }

              void FieldQueryNode::setValue(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setValue_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence FieldQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String FieldQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldQueryNode_init_(t_FieldQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldQueryNode_cloneTree(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_getBegin(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getEnd(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getField(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getFieldAsString(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getPositionIncrement(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getText(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getTextAsString(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_getValue(t_FieldQueryNode *self);
              static PyObject *t_FieldQueryNode_setBegin(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setEnd(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setField(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setPositionIncrement(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setText(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_setValue(t_FieldQueryNode *self, PyObject *arg);
              static PyObject *t_FieldQueryNode_toQueryString(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_toString(t_FieldQueryNode *self, PyObject *args);
              static PyObject *t_FieldQueryNode_get__begin(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__begin(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__end(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__end(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__field(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__field(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__fieldAsString(t_FieldQueryNode *self, void *data);
              static PyObject *t_FieldQueryNode_get__positionIncrement(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__positionIncrement(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__text(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__text(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FieldQueryNode_get__textAsString(t_FieldQueryNode *self, void *data);
              static PyObject *t_FieldQueryNode_get__value(t_FieldQueryNode *self, void *data);
              static int t_FieldQueryNode_set__value(t_FieldQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FieldQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FieldQueryNode, begin),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, end),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, field),
                DECLARE_GET_FIELD(t_FieldQueryNode, fieldAsString),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, positionIncrement),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, text),
                DECLARE_GET_FIELD(t_FieldQueryNode, textAsString),
                DECLARE_GETSET_FIELD(t_FieldQueryNode, value),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldQueryNode__methods_[] = {
                DECLARE_METHOD(t_FieldQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_FieldQueryNode, getBegin, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getEnd, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getPositionIncrement, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getText, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getTextAsString, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, getValue, METH_NOARGS),
                DECLARE_METHOD(t_FieldQueryNode, setBegin, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setEnd, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setField, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setPositionIncrement, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setText, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, setValue, METH_O),
                DECLARE_METHOD(t_FieldQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_FieldQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldQueryNode, t_FieldQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNodeImpl, FieldQueryNode, t_FieldQueryNode_init_, 0, 0, t_FieldQueryNode__fields_, 0, 0);

              void t_FieldQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldQueryNode), module, "FieldQueryNode", 0);
              }

              void t_FieldQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldQueryNode).tp_dict, "class_", make_descriptor(FieldQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldQueryNode).tp_dict, "wrapfn_", make_descriptor(t_FieldQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FieldQueryNode::wrap_Object(FieldQueryNode(((t_FieldQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FieldQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldQueryNode_init_(t_FieldQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                jint a3;
                FieldQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = FieldQueryNode(a0, a1, a2, a3));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldQueryNode_cloneTree(t_FieldQueryNode *self, PyObject *args)
              {
                FieldQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_FieldQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FieldQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_FieldQueryNode_getBegin(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getBegin());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getEnd(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getEnd());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getField(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_getFieldAsString(t_FieldQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_FieldQueryNode_getPositionIncrement(t_FieldQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPositionIncrement());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FieldQueryNode_getText(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_getTextAsString(t_FieldQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getTextAsString());
                return j2p(result);
              }

              static PyObject *t_FieldQueryNode_getValue(t_FieldQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldQueryNode_setBegin(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setBegin(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setBegin", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setEnd(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setEnd(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setEnd", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setField(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setPositionIncrement(t_FieldQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPositionIncrement(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setText(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setText(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setText", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_setValue(t_FieldQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setValue(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                return NULL;
              }

              static PyObject *t_FieldQueryNode_toQueryString(t_FieldQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FieldQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_FieldQueryNode_toString(t_FieldQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(FieldQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FieldQueryNode_get__begin(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getBegin());
                return PyInt_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__begin(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setBegin(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "begin", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__end(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getEnd());
                return PyInt_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__end(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setEnd(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "end", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__field(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__field(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__fieldAsString(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_FieldQueryNode_get__positionIncrement(t_FieldQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPositionIncrement());
                return PyInt_FromLong((long) value);
              }
              static int t_FieldQueryNode_set__positionIncrement(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPositionIncrement(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__text(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getText());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__text(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setText(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "text", arg);
                return -1;
              }

              static PyObject *t_FieldQueryNode_get__textAsString(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getTextAsString());
                return j2p(value);
              }

              static PyObject *t_FieldQueryNode_get__value(t_FieldQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getValue());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldQueryNode_set__value(t_FieldQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "value", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PositionIncrementAttributeImpl::class$ = NULL;
          jmethodID *PositionIncrementAttributeImpl::mids$ = NULL;
          bool PositionIncrementAttributeImpl::live$ = false;

          jclass PositionIncrementAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PositionIncrementAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionIncrementAttributeImpl::PositionIncrementAttributeImpl() : ::org::apache::lucene::util::AttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PositionIncrementAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          void PositionIncrementAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jboolean PositionIncrementAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PositionIncrementAttributeImpl::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
          }

          jint PositionIncrementAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PositionIncrementAttributeImpl::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PositionIncrementAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionIncrementAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionIncrementAttributeImpl_init_(t_PositionIncrementAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PositionIncrementAttributeImpl_clear(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_copyTo(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_equals(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_getPositionIncrement(t_PositionIncrementAttributeImpl *self);
          static PyObject *t_PositionIncrementAttributeImpl_hashCode(t_PositionIncrementAttributeImpl *self, PyObject *args);
          static PyObject *t_PositionIncrementAttributeImpl_setPositionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg);
          static PyObject *t_PositionIncrementAttributeImpl_get__positionIncrement(t_PositionIncrementAttributeImpl *self, void *data);
          static int t_PositionIncrementAttributeImpl_set__positionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PositionIncrementAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PositionIncrementAttributeImpl, positionIncrement),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PositionIncrementAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PositionIncrementAttributeImpl, setPositionIncrement, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionIncrementAttributeImpl, t_PositionIncrementAttributeImpl, ::org::apache::lucene::util::AttributeImpl, PositionIncrementAttributeImpl, t_PositionIncrementAttributeImpl_init_, 0, 0, t_PositionIncrementAttributeImpl__fields_, 0, 0);

          void t_PositionIncrementAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionIncrementAttributeImpl), module, "PositionIncrementAttributeImpl", 0);
          }

          void t_PositionIncrementAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttributeImpl).tp_dict, "class_", make_descriptor(PositionIncrementAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PositionIncrementAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionIncrementAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionIncrementAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionIncrementAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PositionIncrementAttributeImpl::wrap_Object(PositionIncrementAttributeImpl(((t_PositionIncrementAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PositionIncrementAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionIncrementAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionIncrementAttributeImpl_init_(t_PositionIncrementAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PositionIncrementAttributeImpl object((jobject) NULL);

            INT_CALL(object = PositionIncrementAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PositionIncrementAttributeImpl_clear(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_copyTo(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_equals(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_getPositionIncrement(t_PositionIncrementAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PositionIncrementAttributeImpl_hashCode(t_PositionIncrementAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PositionIncrementAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PositionIncrementAttributeImpl_setPositionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PositionIncrementAttributeImpl_get__positionIncrement(t_PositionIncrementAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyInt_FromLong((long) value);
          }
          static int t_PositionIncrementAttributeImpl_set__positionIncrement(t_PositionIncrementAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Appendable.h"
#include "java/lang/StringBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *CharTermAttribute::class$ = NULL;
          jmethodID *CharTermAttribute::mids$ = NULL;
          bool CharTermAttribute::live$ = false;

          jclass CharTermAttribute::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/CharTermAttribute");

              mids$ = new jmethodID[max_mid];
              mids$[mid_append_8fff6b0d] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuilder;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_ec8fc27b] = env->getMethodID(cls, "append", "(C)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_950755e3] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_727d3f8d] = env->getMethodID(cls, "append", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_2b3c6943] = env->getMethodID(cls, "append", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_append_6505d5ab] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_buffer_dab10e7f] = env->getMethodID(cls, "buffer", "()[C");
              mids$[mid_copyBuffer_6f0bb356] = env->getMethodID(cls, "copyBuffer", "([CII)V");
              mids$[mid_resizeBuffer_b4292e99] = env->getMethodID(cls, "resizeBuffer", "(I)[C");
              mids$[mid_setEmpty_211a9257] = env->getMethodID(cls, "setEmpty", "()Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");
              mids$[mid_setLength_da4913e5] = env->getMethodID(cls, "setLength", "(I)Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::StringBuilder & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_8fff6b0d], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(jchar a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_ec8fc27b], a0));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::CharSequence & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_950755e3], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::String & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_727d3f8d], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const CharTermAttribute & a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_2b3c6943], a0.this$));
          }

          CharTermAttribute CharTermAttribute::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_append_6505d5ab], a0.this$, a1, a2));
          }

          JArray< jchar > CharTermAttribute::buffer() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_buffer_dab10e7f]));
          }

          void CharTermAttribute::copyBuffer(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_copyBuffer_6f0bb356], a0.this$, a1, a2);
          }

          JArray< jchar > CharTermAttribute::resizeBuffer(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_resizeBuffer_b4292e99], a0));
          }

          CharTermAttribute CharTermAttribute::setEmpty() const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setEmpty_211a9257]));
          }

          CharTermAttribute CharTermAttribute::setLength(jint a0) const
          {
            return CharTermAttribute(env->callObjectMethod(this$, mids$[mid_setLength_da4913e5], a0));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_CharTermAttribute_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttribute_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharTermAttribute_append(t_CharTermAttribute *self, PyObject *args);
          static PyObject *t_CharTermAttribute_buffer(t_CharTermAttribute *self);
          static PyObject *t_CharTermAttribute_copyBuffer(t_CharTermAttribute *self, PyObject *args);
          static PyObject *t_CharTermAttribute_resizeBuffer(t_CharTermAttribute *self, PyObject *arg);
          static PyObject *t_CharTermAttribute_setEmpty(t_CharTermAttribute *self);
          static PyObject *t_CharTermAttribute_setLength(t_CharTermAttribute *self, PyObject *arg);
          static int t_CharTermAttribute_set__length(t_CharTermAttribute *self, PyObject *arg, void *data);
          static PyGetSetDef t_CharTermAttribute__fields_[] = {
            DECLARE_SET_FIELD(t_CharTermAttribute, length),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharTermAttribute__methods_[] = {
            DECLARE_METHOD(t_CharTermAttribute, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttribute, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharTermAttribute, append, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttribute, buffer, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttribute, copyBuffer, METH_VARARGS),
            DECLARE_METHOD(t_CharTermAttribute, resizeBuffer, METH_O),
            DECLARE_METHOD(t_CharTermAttribute, setEmpty, METH_NOARGS),
            DECLARE_METHOD(t_CharTermAttribute, setLength, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharTermAttribute, t_CharTermAttribute, ::org::apache::lucene::util::Attribute, CharTermAttribute, abstract_init, 0, 0, t_CharTermAttribute__fields_, 0, 0);

          void t_CharTermAttribute::install(PyObject *module)
          {
            installType(&PY_TYPE(CharTermAttribute), module, "CharTermAttribute", 0);
          }

          void t_CharTermAttribute::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharTermAttribute).tp_dict, "class_", make_descriptor(CharTermAttribute::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharTermAttribute).tp_dict, "wrapfn_", make_descriptor(t_CharTermAttribute::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharTermAttribute).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharTermAttribute_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharTermAttribute::initializeClass, 1)))
              return NULL;
            return t_CharTermAttribute::wrap_Object(CharTermAttribute(((t_CharTermAttribute *) arg)->object.this$));
          }
          static PyObject *t_CharTermAttribute_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharTermAttribute::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharTermAttribute_append(t_CharTermAttribute *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::StringBuilder a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                jchar a0;
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              {
                CharTermAttribute a0((jobject) NULL);
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "k", CharTermAttribute::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.append(a0));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jint a1;
                jint a2;
                CharTermAttribute result((jobject) NULL);

                if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.append(a0, a1, a2));
                  return t_CharTermAttribute::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_buffer(t_CharTermAttribute *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.buffer());
            return result.wrap();
          }

          static PyObject *t_CharTermAttribute_copyBuffer(t_CharTermAttribute *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.copyBuffer(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copyBuffer", args);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_resizeBuffer(t_CharTermAttribute *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.resizeBuffer(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "resizeBuffer", arg);
            return NULL;
          }

          static PyObject *t_CharTermAttribute_setEmpty(t_CharTermAttribute *self)
          {
            CharTermAttribute result((jobject) NULL);
            OBJ_CALL(result = self->object.setEmpty());
            return t_CharTermAttribute::wrap_Object(result);
          }

          static PyObject *t_CharTermAttribute_setLength(t_CharTermAttribute *self, PyObject *arg)
          {
            jint a0;
            CharTermAttribute result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setLength(a0));
              return t_CharTermAttribute::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
          }

          static int t_CharTermAttribute_set__length(t_CharTermAttribute *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "length", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/DocumentDictionary.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *DocumentDictionary::class$ = NULL;
          jmethodID *DocumentDictionary::mids$ = NULL;
          bool DocumentDictionary::live$ = false;

          jclass DocumentDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/DocumentDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d188be8d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_d5472fa7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_087c6971] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d188be8d, a0.this$, a1.this$, a2.this$)) {}

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d5472fa7, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          DocumentDictionary::DocumentDictionary(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_087c6971, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator DocumentDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_DocumentDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DocumentDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DocumentDictionary_init_(t_DocumentDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DocumentDictionary_getEntryIterator(t_DocumentDictionary *self);
          static PyObject *t_DocumentDictionary_get__entryIterator(t_DocumentDictionary *self, void *data);
          static PyGetSetDef t_DocumentDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_DocumentDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_DocumentDictionary__methods_[] = {
            DECLARE_METHOD(t_DocumentDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DocumentDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DocumentDictionary, t_DocumentDictionary, ::java::lang::Object, DocumentDictionary, t_DocumentDictionary_init_, 0, 0, t_DocumentDictionary__fields_, 0, 0);

          void t_DocumentDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(DocumentDictionary), module, "DocumentDictionary", 0);
          }

          void t_DocumentDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DocumentDictionary).tp_dict, "class_", make_descriptor(DocumentDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DocumentDictionary).tp_dict, "wrapfn_", make_descriptor(t_DocumentDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DocumentDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DocumentDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DocumentDictionary::initializeClass, 1)))
              return NULL;
            return t_DocumentDictionary::wrap_Object(DocumentDictionary(((t_DocumentDictionary *) arg)->object.this$));
          }
          static PyObject *t_DocumentDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DocumentDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DocumentDictionary_init_(t_DocumentDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "ksss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String a4((jobject) NULL);
                DocumentDictionary object((jobject) NULL);

                if (!parseArgs(args, "kssss", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = DocumentDictionary(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DocumentDictionary_getEntryIterator(t_DocumentDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_DocumentDictionary_get__entryIterator(t_DocumentDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NumericUtils.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/util/NumericUtils$IntRangeBuilder.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "org/apache/lucene/util/NumericUtils$LongRangeBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NumericUtils::class$ = NULL;
        jmethodID *NumericUtils::mids$ = NULL;
        bool NumericUtils::live$ = false;
        jint NumericUtils::BUF_SIZE_INT = (jint) 0;
        jint NumericUtils::BUF_SIZE_LONG = (jint) 0;
        jint NumericUtils::PRECISION_STEP_DEFAULT = (jint) 0;
        jint NumericUtils::PRECISION_STEP_DEFAULT_32 = (jint) 0;
        jbyte NumericUtils::SHIFT_START_INT = (jbyte) 0;
        jbyte NumericUtils::SHIFT_START_LONG = (jbyte) 0;

        jclass NumericUtils::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NumericUtils");

            mids$ = new jmethodID[max_mid];
            mids$[mid_doubleToSortableLong_5d1c7659] = env->getStaticMethodID(cls, "doubleToSortableLong", "(D)J");
            mids$[mid_filterPrefixCodedInts_d737078b] = env->getStaticMethodID(cls, "filterPrefixCodedInts", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_filterPrefixCodedLongs_d737078b] = env->getStaticMethodID(cls, "filterPrefixCodedLongs", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
            mids$[mid_floatToSortableInt_06298cb4] = env->getStaticMethodID(cls, "floatToSortableInt", "(F)I");
            mids$[mid_getMaxInt_d0b7bb08] = env->getStaticMethodID(cls, "getMaxInt", "(Lorg/apache/lucene/index/Terms;)I");
            mids$[mid_getMaxLong_d0b7bb0b] = env->getStaticMethodID(cls, "getMaxLong", "(Lorg/apache/lucene/index/Terms;)J");
            mids$[mid_getMinInt_d0b7bb08] = env->getStaticMethodID(cls, "getMinInt", "(Lorg/apache/lucene/index/Terms;)I");
            mids$[mid_getMinLong_d0b7bb0b] = env->getStaticMethodID(cls, "getMinLong", "(Lorg/apache/lucene/index/Terms;)J");
            mids$[mid_getPrefixCodedIntShift_7bc03ddb] = env->getStaticMethodID(cls, "getPrefixCodedIntShift", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_getPrefixCodedLongShift_7bc03ddb] = env->getStaticMethodID(cls, "getPrefixCodedLongShift", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_intToPrefixCoded_362d2138] = env->getStaticMethodID(cls, "intToPrefixCoded", "(IILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_intToPrefixCodedBytes_362d2138] = env->getStaticMethodID(cls, "intToPrefixCodedBytes", "(IILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_longToPrefixCoded_4adff79b] = env->getStaticMethodID(cls, "longToPrefixCoded", "(JILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_longToPrefixCodedBytes_4adff79b] = env->getStaticMethodID(cls, "longToPrefixCodedBytes", "(JILorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_prefixCodedToInt_7bc03ddb] = env->getStaticMethodID(cls, "prefixCodedToInt", "(Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_prefixCodedToLong_7bc03dd8] = env->getStaticMethodID(cls, "prefixCodedToLong", "(Lorg/apache/lucene/util/BytesRef;)J");
            mids$[mid_sortableDoubleBits_0ee6df33] = env->getStaticMethodID(cls, "sortableDoubleBits", "(J)J");
            mids$[mid_sortableFloatBits_39c7bd23] = env->getStaticMethodID(cls, "sortableFloatBits", "(I)I");
            mids$[mid_sortableIntToFloat_39c7bd2c] = env->getStaticMethodID(cls, "sortableIntToFloat", "(I)F");
            mids$[mid_sortableLongToDouble_0ee6df3d] = env->getStaticMethodID(cls, "sortableLongToDouble", "(J)D");
            mids$[mid_splitIntRange_b263c325] = env->getStaticMethodID(cls, "splitIntRange", "(Lorg/apache/lucene/util/NumericUtils$IntRangeBuilder;III)V");
            mids$[mid_splitLongRange_585f2c31] = env->getStaticMethodID(cls, "splitLongRange", "(Lorg/apache/lucene/util/NumericUtils$LongRangeBuilder;IJJ)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            BUF_SIZE_INT = env->getStaticIntField(cls, "BUF_SIZE_INT");
            BUF_SIZE_LONG = env->getStaticIntField(cls, "BUF_SIZE_LONG");
            PRECISION_STEP_DEFAULT = env->getStaticIntField(cls, "PRECISION_STEP_DEFAULT");
            PRECISION_STEP_DEFAULT_32 = env->getStaticIntField(cls, "PRECISION_STEP_DEFAULT_32");
            SHIFT_START_INT = env->getStaticByteField(cls, "SHIFT_START_INT");
            SHIFT_START_LONG = env->getStaticByteField(cls, "SHIFT_START_LONG");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong NumericUtils::doubleToSortableLong(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_doubleToSortableLong_5d1c7659], a0);
        }

        ::org::apache::lucene::index::TermsEnum NumericUtils::filterPrefixCodedInts(const ::org::apache::lucene::index::TermsEnum & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::TermsEnum(env->callStaticObjectMethod(cls, mids$[mid_filterPrefixCodedInts_d737078b], a0.this$));
        }

        ::org::apache::lucene::index::TermsEnum NumericUtils::filterPrefixCodedLongs(const ::org::apache::lucene::index::TermsEnum & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::TermsEnum(env->callStaticObjectMethod(cls, mids$[mid_filterPrefixCodedLongs_d737078b], a0.this$));
        }

        jint NumericUtils::floatToSortableInt(jfloat a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_floatToSortableInt_06298cb4], a0);
        }

        jint NumericUtils::getMaxInt(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getMaxInt_d0b7bb08], a0.this$);
        }

        jlong NumericUtils::getMaxLong(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getMaxLong_d0b7bb0b], a0.this$);
        }

        jint NumericUtils::getMinInt(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getMinInt_d0b7bb08], a0.this$);
        }

        jlong NumericUtils::getMinLong(const ::org::apache::lucene::index::Terms & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_getMinLong_d0b7bb0b], a0.this$);
        }

        jint NumericUtils::getPrefixCodedIntShift(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getPrefixCodedIntShift_7bc03ddb], a0.this$);
        }

        jint NumericUtils::getPrefixCodedLongShift(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_getPrefixCodedLongShift_7bc03ddb], a0.this$);
        }

        void NumericUtils::intToPrefixCoded(jint a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_intToPrefixCoded_362d2138], a0, a1, a2.this$);
        }

        void NumericUtils::intToPrefixCodedBytes(jint a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_intToPrefixCodedBytes_362d2138], a0, a1, a2.this$);
        }

        void NumericUtils::longToPrefixCoded(jlong a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_longToPrefixCoded_4adff79b], a0, a1, a2.this$);
        }

        void NumericUtils::longToPrefixCodedBytes(jlong a0, jint a1, const ::org::apache::lucene::util::BytesRef & a2)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_longToPrefixCodedBytes_4adff79b], a0, a1, a2.this$);
        }

        jint NumericUtils::prefixCodedToInt(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_prefixCodedToInt_7bc03ddb], a0.this$);
        }

        jlong NumericUtils::prefixCodedToLong(const ::org::apache::lucene::util::BytesRef & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_prefixCodedToLong_7bc03dd8], a0.this$);
        }

        jlong NumericUtils::sortableDoubleBits(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_sortableDoubleBits_0ee6df33], a0);
        }

        jint NumericUtils::sortableFloatBits(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_sortableFloatBits_39c7bd23], a0);
        }

        jfloat NumericUtils::sortableIntToFloat(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticFloatMethod(cls, mids$[mid_sortableIntToFloat_39c7bd2c], a0);
        }

        jdouble NumericUtils::sortableLongToDouble(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_sortableLongToDouble_0ee6df3d], a0);
        }

        void NumericUtils::splitIntRange(const ::org::apache::lucene::util::NumericUtils$IntRangeBuilder & a0, jint a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_splitIntRange_b263c325], a0.this$, a1, a2, a3);
        }

        void NumericUtils::splitLongRange(const ::org::apache::lucene::util::NumericUtils$LongRangeBuilder & a0, jint a1, jlong a2, jlong a3)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_splitLongRange_585f2c31], a0.this$, a1, a2, a3);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NumericUtils_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_doubleToSortableLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_filterPrefixCodedInts(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_filterPrefixCodedLongs(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_floatToSortableInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMaxInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMaxLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMinInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getMinLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getPrefixCodedIntShift(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_getPrefixCodedLongShift(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_intToPrefixCoded(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_intToPrefixCodedBytes(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_longToPrefixCoded(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_longToPrefixCodedBytes(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_prefixCodedToInt(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_prefixCodedToLong(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableDoubleBits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableFloatBits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableIntToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_sortableLongToDouble(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils_splitIntRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_NumericUtils_splitLongRange(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_NumericUtils__methods_[] = {
          DECLARE_METHOD(t_NumericUtils, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, doubleToSortableLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, filterPrefixCodedInts, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, filterPrefixCodedLongs, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, floatToSortableInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMaxInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMaxLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMinInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getMinLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getPrefixCodedIntShift, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, getPrefixCodedLongShift, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, intToPrefixCoded, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, intToPrefixCodedBytes, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, longToPrefixCoded, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, longToPrefixCodedBytes, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, prefixCodedToInt, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, prefixCodedToLong, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableDoubleBits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableFloatBits, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableIntToFloat, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, sortableLongToDouble, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, splitIntRange, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils, splitLongRange, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericUtils, t_NumericUtils, ::java::lang::Object, NumericUtils, abstract_init, 0, 0, 0, 0, 0);

        void t_NumericUtils::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericUtils), module, "NumericUtils", 0);
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "IntRangeBuilder", make_descriptor(&PY_TYPE(NumericUtils$IntRangeBuilder)));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "LongRangeBuilder", make_descriptor(&PY_TYPE(NumericUtils$LongRangeBuilder)));
        }

        void t_NumericUtils::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "class_", make_descriptor(NumericUtils::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "wrapfn_", make_descriptor(t_NumericUtils::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NumericUtils::initializeClass);
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "BUF_SIZE_INT", make_descriptor(NumericUtils::BUF_SIZE_INT));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "BUF_SIZE_LONG", make_descriptor(NumericUtils::BUF_SIZE_LONG));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "PRECISION_STEP_DEFAULT", make_descriptor(NumericUtils::PRECISION_STEP_DEFAULT));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "PRECISION_STEP_DEFAULT_32", make_descriptor(NumericUtils::PRECISION_STEP_DEFAULT_32));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "SHIFT_START_INT", make_descriptor(NumericUtils::SHIFT_START_INT));
          PyDict_SetItemString(PY_TYPE(NumericUtils).tp_dict, "SHIFT_START_LONG", make_descriptor(NumericUtils::SHIFT_START_LONG));
        }

        static PyObject *t_NumericUtils_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericUtils::initializeClass, 1)))
            return NULL;
          return t_NumericUtils::wrap_Object(NumericUtils(((t_NumericUtils *) arg)->object.this$));
        }
        static PyObject *t_NumericUtils_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericUtils::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NumericUtils_doubleToSortableLong(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jlong result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::doubleToSortableLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "doubleToSortableLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_filterPrefixCodedInts(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::filterPrefixCodedInts(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "filterPrefixCodedInts", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_filterPrefixCodedLongs(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::filterPrefixCodedLongs(a0));
            return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "filterPrefixCodedLongs", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_floatToSortableInt(PyTypeObject *type, PyObject *arg)
        {
          jfloat a0;
          jint result;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::floatToSortableInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "floatToSortableInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMaxInt(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMaxInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getMaxInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMaxLong(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMaxLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "getMaxLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMinInt(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMinInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getMinInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getMinLong(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Terms a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Terms::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getMinLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "getMinLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getPrefixCodedIntShift(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getPrefixCodedIntShift(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getPrefixCodedIntShift", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_getPrefixCodedLongShift(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::getPrefixCodedLongShift(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "getPrefixCodedLongShift", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_intToPrefixCoded(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "IIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::intToPrefixCoded(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "intToPrefixCoded", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_intToPrefixCodedBytes(PyTypeObject *type, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "IIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::intToPrefixCodedBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "intToPrefixCodedBytes", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_longToPrefixCoded(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "JIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::longToPrefixCoded(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "longToPrefixCoded", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_longToPrefixCodedBytes(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jint a1;
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);

          if (!parseArgs(args, "JIk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::longToPrefixCodedBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "longToPrefixCodedBytes", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_prefixCodedToInt(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::prefixCodedToInt(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "prefixCodedToInt", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_prefixCodedToLong(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::prefixCodedToLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "prefixCodedToLong", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableDoubleBits(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jlong result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableDoubleBits(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "sortableDoubleBits", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableFloatBits(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableFloatBits(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "sortableFloatBits", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableIntToFloat(PyTypeObject *type, PyObject *arg)
        {
          jint a0;
          jfloat result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableIntToFloat(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "sortableIntToFloat", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_sortableLongToDouble(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jdouble result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::NumericUtils::sortableLongToDouble(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "sortableLongToDouble", arg);
          return NULL;
        }

        static PyObject *t_NumericUtils_splitIntRange(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::NumericUtils$IntRangeBuilder a0((jobject) NULL);
          jint a1;
          jint a2;
          jint a3;

          if (!parseArgs(args, "kIII", ::org::apache::lucene::util::NumericUtils$IntRangeBuilder::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::splitIntRange(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "splitIntRange", args);
          return NULL;
        }

        static PyObject *t_NumericUtils_splitLongRange(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::util::NumericUtils$LongRangeBuilder a0((jobject) NULL);
          jint a1;
          jlong a2;
          jlong a3;

          if (!parseArgs(args, "kIJJ", ::org::apache::lucene::util::NumericUtils$LongRangeBuilder::initializeClass, &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(::org::apache::lucene::util::NumericUtils::splitLongRange(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "splitLongRange", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.h"
#include "org/apache/lucene/index/Term.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowFuzzyTermsEnum::class$ = NULL;
          jmethodID *SlowFuzzyTermsEnum::mids$ = NULL;
          bool SlowFuzzyTermsEnum::live$ = false;

          jclass SlowFuzzyTermsEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_40b71111] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;Lorg/apache/lucene/index/Term;FI)V");
              mids$[mid_maxEditDistanceChanged_0741f897] = env->getMethodID(cls, "maxEditDistanceChanged", "(Lorg/apache/lucene/util/BytesRef;IZ)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowFuzzyTermsEnum::SlowFuzzyTermsEnum(const ::org::apache::lucene::index::Terms & a0, const ::org::apache::lucene::util::AttributeSource & a1, const ::org::apache::lucene::index::Term & a2, jfloat a3, jint a4) : ::org::apache::lucene::search::FuzzyTermsEnum(env->newObject(initializeClass, &mids$, mid_init$_40b71111, a0.this$, a1.this$, a2.this$, a3, a4)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowFuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowFuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowFuzzyTermsEnum_init_(t_SlowFuzzyTermsEnum *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_SlowFuzzyTermsEnum__methods_[] = {
            DECLARE_METHOD(t_SlowFuzzyTermsEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowFuzzyTermsEnum, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowFuzzyTermsEnum, t_SlowFuzzyTermsEnum, ::org::apache::lucene::search::FuzzyTermsEnum, SlowFuzzyTermsEnum, t_SlowFuzzyTermsEnum_init_, 0, 0, 0, 0, 0);

          void t_SlowFuzzyTermsEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowFuzzyTermsEnum), module, "SlowFuzzyTermsEnum", 0);
          }

          void t_SlowFuzzyTermsEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowFuzzyTermsEnum).tp_dict, "class_", make_descriptor(SlowFuzzyTermsEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyTermsEnum).tp_dict, "wrapfn_", make_descriptor(t_SlowFuzzyTermsEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyTermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SlowFuzzyTermsEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowFuzzyTermsEnum::initializeClass, 1)))
              return NULL;
            return t_SlowFuzzyTermsEnum::wrap_Object(SlowFuzzyTermsEnum(((t_SlowFuzzyTermsEnum *) arg)->object.this$));
          }
          static PyObject *t_SlowFuzzyTermsEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowFuzzyTermsEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowFuzzyTermsEnum_init_(t_SlowFuzzyTermsEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::index::Terms a0((jobject) NULL);
            ::org::apache::lucene::util::AttributeSource a1((jobject) NULL);
            ::org::apache::lucene::index::Term a2((jobject) NULL);
            jfloat a3;
            jint a4;
            SlowFuzzyTermsEnum object((jobject) NULL);

            if (!parseArgs(args, "kkkFI", ::org::apache::lucene::index::Terms::initializeClass, ::org::apache::lucene::util::AttributeSource::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3, &a4))
            {
              INT_CALL(object = SlowFuzzyTermsEnum(a0, a1, a2, a3, a4));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemFilterFactory::class$ = NULL;
          jmethodID *LatvianStemFilterFactory::mids$ = NULL;
          bool LatvianStemFilterFactory::live$ = false;

          jclass LatvianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemFilterFactory::LatvianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream LatvianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemFilterFactory_init_(t_LatvianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemFilterFactory_create(t_LatvianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_LatvianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_LatvianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianStemFilterFactory, t_LatvianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, LatvianStemFilterFactory, t_LatvianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_LatvianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemFilterFactory), module, "LatvianStemFilterFactory", 0);
          }

          void t_LatvianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianStemFilterFactory).tp_dict, "class_", make_descriptor(LatvianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_LatvianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatvianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_LatvianStemFilterFactory::wrap_Object(LatvianStemFilterFactory(((t_LatvianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemFilterFactory_init_(t_LatvianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LatvianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LatvianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianStemFilterFactory_create(t_LatvianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LatvianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/LiveFieldValues.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "java/lang/String.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *LiveFieldValues::class$ = NULL;
        jmethodID *LiveFieldValues::mids$ = NULL;
        bool LiveFieldValues::live$ = false;

        jclass LiveFieldValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/LiveFieldValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_48ea9202] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/ReferenceManager;Ljava/lang/Object;)V");
            mids$[mid_add_2da4da24] = env->getMethodID(cls, "add", "(Ljava/lang/String;Ljava/lang/Object;)V");
            mids$[mid_afterRefresh_bb0c767f] = env->getMethodID(cls, "afterRefresh", "(Z)V");
            mids$[mid_beforeRefresh_54c6a166] = env->getMethodID(cls, "beforeRefresh", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_delete_5fdc3f48] = env->getMethodID(cls, "delete", "(Ljava/lang/String;)V");
            mids$[mid_get_2a1c4d09] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_lookupFromSearcher_e0270375] = env->getMethodID(cls, "lookupFromSearcher", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LiveFieldValues::LiveFieldValues(const ::org::apache::lucene::search::ReferenceManager & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_48ea9202, a0.this$, a1.this$)) {}

        void LiveFieldValues::add(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_2da4da24], a0.this$, a1.this$);
        }

        void LiveFieldValues::afterRefresh(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_afterRefresh_bb0c767f], a0);
        }

        void LiveFieldValues::beforeRefresh() const
        {
          env->callVoidMethod(this$, mids$[mid_beforeRefresh_54c6a166]);
        }

        void LiveFieldValues::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void LiveFieldValues::delete$(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_delete_5fdc3f48], a0.this$);
        }

        ::java::lang::Object LiveFieldValues::get(const ::java::lang::String & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_2a1c4d09], a0.this$));
        }

        jint LiveFieldValues::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_LiveFieldValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveFieldValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveFieldValues_of_(t_LiveFieldValues *self, PyObject *args);
        static int t_LiveFieldValues_init_(t_LiveFieldValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LiveFieldValues_add(t_LiveFieldValues *self, PyObject *args);
        static PyObject *t_LiveFieldValues_afterRefresh(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_beforeRefresh(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_close(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_delete(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_get(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_size(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_get__parameters_(t_LiveFieldValues *self, void *data);
        static PyGetSetDef t_LiveFieldValues__fields_[] = {
          DECLARE_GET_FIELD(t_LiveFieldValues, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LiveFieldValues__methods_[] = {
          DECLARE_METHOD(t_LiveFieldValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveFieldValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveFieldValues, of_, METH_VARARGS),
          DECLARE_METHOD(t_LiveFieldValues, add, METH_VARARGS),
          DECLARE_METHOD(t_LiveFieldValues, afterRefresh, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, beforeRefresh, METH_NOARGS),
          DECLARE_METHOD(t_LiveFieldValues, close, METH_NOARGS),
          DECLARE_METHOD(t_LiveFieldValues, delete, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, get, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LiveFieldValues, t_LiveFieldValues, ::java::lang::Object, LiveFieldValues, t_LiveFieldValues_init_, 0, 0, t_LiveFieldValues__fields_, 0, 0);
        PyObject *t_LiveFieldValues::wrap_Object(const LiveFieldValues& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_LiveFieldValues::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_LiveFieldValues *self = (t_LiveFieldValues *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_LiveFieldValues::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_LiveFieldValues::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_LiveFieldValues *self = (t_LiveFieldValues *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_LiveFieldValues::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveFieldValues), module, "LiveFieldValues", 0);
        }

        void t_LiveFieldValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LiveFieldValues).tp_dict, "class_", make_descriptor(LiveFieldValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LiveFieldValues).tp_dict, "wrapfn_", make_descriptor(t_LiveFieldValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LiveFieldValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveFieldValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveFieldValues::initializeClass, 1)))
            return NULL;
          return t_LiveFieldValues::wrap_Object(LiveFieldValues(((t_LiveFieldValues *) arg)->object.this$));
        }
        static PyObject *t_LiveFieldValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveFieldValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveFieldValues_of_(t_LiveFieldValues *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_LiveFieldValues_init_(t_LiveFieldValues *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::ReferenceManager a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          LiveFieldValues object((jobject) NULL);

          if (!parseArgs(args, "Ko", ::org::apache::lucene::search::ReferenceManager::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager::parameters_, &a1))
          {
            INT_CALL(object = LiveFieldValues(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LiveFieldValues_add(t_LiveFieldValues *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);

          if (!parseArgs(args, "sO", self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(self->object.add(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_afterRefresh(t_LiveFieldValues *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.afterRefresh(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "afterRefresh", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_beforeRefresh(t_LiveFieldValues *self)
        {
          OBJ_CALL(self->object.beforeRefresh());
          Py_RETURN_NONE;
        }

        static PyObject *t_LiveFieldValues_close(t_LiveFieldValues *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_LiveFieldValues_delete(t_LiveFieldValues *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.delete$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "delete", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_get(t_LiveFieldValues *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_size(t_LiveFieldValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }
        static PyObject *t_LiveFieldValues_get__parameters_(t_LiveFieldValues *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FieldableNode::class$ = NULL;
              jmethodID *FieldableNode::mids$ = NULL;
              bool FieldableNode::live$ = false;

              jclass FieldableNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FieldableNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::java::lang::CharSequence FieldableNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              void FieldableNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FieldableNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldableNode_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldableNode_getField(t_FieldableNode *self);
              static PyObject *t_FieldableNode_setField(t_FieldableNode *self, PyObject *arg);
              static PyObject *t_FieldableNode_get__field(t_FieldableNode *self, void *data);
              static int t_FieldableNode_set__field(t_FieldableNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FieldableNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FieldableNode, field),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FieldableNode__methods_[] = {
                DECLARE_METHOD(t_FieldableNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldableNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldableNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_FieldableNode, setField, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldableNode, t_FieldableNode, ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode, FieldableNode, abstract_init, 0, 0, t_FieldableNode__fields_, 0, 0);

              void t_FieldableNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldableNode), module, "FieldableNode", 0);
              }

              void t_FieldableNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldableNode).tp_dict, "class_", make_descriptor(FieldableNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldableNode).tp_dict, "wrapfn_", make_descriptor(t_FieldableNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldableNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldableNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldableNode::initializeClass, 1)))
                  return NULL;
                return t_FieldableNode::wrap_Object(FieldableNode(((t_FieldableNode *) arg)->object.this$));
              }
              static PyObject *t_FieldableNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldableNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_FieldableNode_getField(t_FieldableNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_FieldableNode_setField(t_FieldableNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_FieldableNode_get__field(t_FieldableNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_FieldableNode_set__field(t_FieldableNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/SuggestWordQueue.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *SuggestWordQueue::class$ = NULL;
          jmethodID *SuggestWordQueue::mids$ = NULL;
          bool SuggestWordQueue::live$ = false;
          ::java::util::Comparator *SuggestWordQueue::DEFAULT_COMPARATOR = NULL;

          jclass SuggestWordQueue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/SuggestWordQueue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_4ba868a3] = env->getMethodID(cls, "<init>", "(ILjava/util/Comparator;)V");
              mids$[mid_lessThan_2e903be2] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/spell/SuggestWord;Lorg/apache/lucene/search/spell/SuggestWord;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "DEFAULT_COMPARATOR", "Ljava/util/Comparator;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SuggestWordQueue::SuggestWordQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          SuggestWordQueue::SuggestWordQueue(jint a0, const ::java::util::Comparator & a1) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_4ba868a3, a0, a1.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_SuggestWordQueue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordQueue_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SuggestWordQueue_of_(t_SuggestWordQueue *self, PyObject *args);
          static int t_SuggestWordQueue_init_(t_SuggestWordQueue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SuggestWordQueue_get__parameters_(t_SuggestWordQueue *self, void *data);
          static PyGetSetDef t_SuggestWordQueue__fields_[] = {
            DECLARE_GET_FIELD(t_SuggestWordQueue, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SuggestWordQueue__methods_[] = {
            DECLARE_METHOD(t_SuggestWordQueue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordQueue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SuggestWordQueue, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SuggestWordQueue, t_SuggestWordQueue, ::org::apache::lucene::util::PriorityQueue, SuggestWordQueue, t_SuggestWordQueue_init_, 0, 0, t_SuggestWordQueue__fields_, 0, 0);
          PyObject *t_SuggestWordQueue::wrap_Object(const SuggestWordQueue& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestWordQueue::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestWordQueue *self = (t_SuggestWordQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SuggestWordQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SuggestWordQueue::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SuggestWordQueue *self = (t_SuggestWordQueue *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SuggestWordQueue::install(PyObject *module)
          {
            installType(&PY_TYPE(SuggestWordQueue), module, "SuggestWordQueue", 0);
          }

          void t_SuggestWordQueue::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "class_", make_descriptor(SuggestWordQueue::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "wrapfn_", make_descriptor(t_SuggestWordQueue::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SuggestWordQueue::initializeClass);
            PyDict_SetItemString(PY_TYPE(SuggestWordQueue).tp_dict, "DEFAULT_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*SuggestWordQueue::DEFAULT_COMPARATOR)));
          }

          static PyObject *t_SuggestWordQueue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SuggestWordQueue::initializeClass, 1)))
              return NULL;
            return t_SuggestWordQueue::wrap_Object(SuggestWordQueue(((t_SuggestWordQueue *) arg)->object.this$));
          }
          static PyObject *t_SuggestWordQueue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SuggestWordQueue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SuggestWordQueue_of_(t_SuggestWordQueue *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SuggestWordQueue_init_(t_SuggestWordQueue *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                SuggestWordQueue object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = SuggestWordQueue(a0));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord);
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                ::java::util::Comparator a1((jobject) NULL);
                PyTypeObject **p1;
                SuggestWordQueue object((jobject) NULL);

                if (!parseArgs(args, "IK", ::java::util::Comparator::initializeClass, &a0, &a1, &p1, ::java::util::t_Comparator::parameters_))
                {
                  INT_CALL(object = SuggestWordQueue(a0, a1));
                  self->object = object;
                  self->parameters[0] = &::org::apache::lucene::search::spell::PY_TYPE(SuggestWord);
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
          static PyObject *t_SuggestWordQueue_get__parameters_(t_SuggestWordQueue *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/lv/LatvianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {

          ::java::lang::Class *LatvianStemFilter::class$ = NULL;
          jmethodID *LatvianStemFilter::mids$ = NULL;
          bool LatvianStemFilter::live$ = false;

          jclass LatvianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/lv/LatvianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LatvianStemFilter::LatvianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean LatvianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace lv {
          static PyObject *t_LatvianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LatvianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LatvianStemFilter_init_(t_LatvianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LatvianStemFilter_incrementToken(t_LatvianStemFilter *self, PyObject *args);

          static PyMethodDef t_LatvianStemFilter__methods_[] = {
            DECLARE_METHOD(t_LatvianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LatvianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LatvianStemFilter, t_LatvianStemFilter, ::org::apache::lucene::analysis::TokenFilter, LatvianStemFilter, t_LatvianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_LatvianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LatvianStemFilter), module, "LatvianStemFilter", 0);
          }

          void t_LatvianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LatvianStemFilter).tp_dict, "class_", make_descriptor(LatvianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_LatvianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LatvianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LatvianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LatvianStemFilter::initializeClass, 1)))
              return NULL;
            return t_LatvianStemFilter::wrap_Object(LatvianStemFilter(((t_LatvianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_LatvianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LatvianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LatvianStemFilter_init_(t_LatvianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            LatvianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = LatvianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LatvianStemFilter_incrementToken(t_LatvianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LatvianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonTokenFilter.h"
#include "java/lang/Throwable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonTokenFilter::class$ = NULL;
        jmethodID *PythonTokenFilter::mids$ = NULL;
        bool PythonTokenFilter::live$ = false;

        jclass PythonTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonTokenFilter::PythonTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

        void PythonTokenFilter::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonTokenFilter::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonTokenFilter::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonTokenFilter_init_(t_PythonTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonTokenFilter_finalize(t_PythonTokenFilter *self);
        static PyObject *t_PythonTokenFilter_pythonExtension(t_PythonTokenFilter *self, PyObject *args);
        static jboolean JNICALL t_PythonTokenFilter_incrementToken0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonTokenFilter_get__self(t_PythonTokenFilter *self, void *data);
        static PyGetSetDef t_PythonTokenFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PythonTokenFilter, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonTokenFilter__methods_[] = {
          DECLARE_METHOD(t_PythonTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonTokenFilter, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonTokenFilter, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonTokenFilter, t_PythonTokenFilter, ::org::apache::lucene::analysis::TokenFilter, PythonTokenFilter, t_PythonTokenFilter_init_, 0, 0, t_PythonTokenFilter__fields_, 0, 0);

        void t_PythonTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonTokenFilter), module, "PythonTokenFilter", 1);
        }

        void t_PythonTokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonTokenFilter).tp_dict, "class_", make_descriptor(PythonTokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PythonTokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonTokenFilter::initializeClass);
          JNINativeMethod methods[] = {
            { "incrementToken", "()Z", (void *) t_PythonTokenFilter_incrementToken0 },
            { "pythonDecRef", "()V", (void *) t_PythonTokenFilter_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonTokenFilter::initializeClass, 1)))
            return NULL;
          return t_PythonTokenFilter::wrap_Object(PythonTokenFilter(((t_PythonTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_PythonTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonTokenFilter_init_(t_PythonTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
          PythonTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
          {
            INT_CALL(object = PythonTokenFilter(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonTokenFilter_finalize(t_PythonTokenFilter *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonTokenFilter_pythonExtension(t_PythonTokenFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonTokenFilter_incrementToken0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "incrementToken", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("incrementToken", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonTokenFilter::mids$[PythonTokenFilter::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonTokenFilter_get__self(t_PythonTokenFilter *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OfflineSorter.h"
#include "org/apache/lucene/util/OfflineSorter$SortInfo.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/util/Comparator.h"
#include "java/io/File.h"
#include "org/apache/lucene/util/OfflineSorter$BufferSize.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OfflineSorter::class$ = NULL;
        jmethodID *OfflineSorter::mids$ = NULL;
        bool OfflineSorter::live$ = false;
        jlong OfflineSorter::ABSOLUTE_MIN_SORT_BUFFER_SIZE = (jlong) 0;
        ::java::util::Comparator *OfflineSorter::DEFAULT_COMPARATOR = NULL;
        jlong OfflineSorter::GB = (jlong) 0;
        jint OfflineSorter::MAX_TEMPFILES = (jint) 0;
        jlong OfflineSorter::MB = (jlong) 0;
        jlong OfflineSorter::MIN_BUFFER_SIZE_MB = (jlong) 0;

        jclass OfflineSorter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OfflineSorter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_6ffdd545] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;)V");
            mids$[mid_init$_22c0d43b] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;Lorg/apache/lucene/util/OfflineSorter$BufferSize;Ljava/io/File;I)V");
            mids$[mid_defaultTempDir_a8eb7bbe] = env->getStaticMethodID(cls, "defaultTempDir", "()Ljava/io/File;");
            mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
            mids$[mid_sort_c917fc5b] = env->getMethodID(cls, "sort", "(Ljava/io/File;Ljava/io/File;)Lorg/apache/lucene/util/OfflineSorter$SortInfo;");
            mids$[mid_sortPartition_5a7c7338] = env->getMethodID(cls, "sortPartition", "(I)Ljava/io/File;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            ABSOLUTE_MIN_SORT_BUFFER_SIZE = env->getStaticLongField(cls, "ABSOLUTE_MIN_SORT_BUFFER_SIZE");
            DEFAULT_COMPARATOR = new ::java::util::Comparator(env->getStaticObjectField(cls, "DEFAULT_COMPARATOR", "Ljava/util/Comparator;"));
            GB = env->getStaticLongField(cls, "GB");
            MAX_TEMPFILES = env->getStaticIntField(cls, "MAX_TEMPFILES");
            MB = env->getStaticLongField(cls, "MB");
            MIN_BUFFER_SIZE_MB = env->getStaticLongField(cls, "MIN_BUFFER_SIZE_MB");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OfflineSorter::OfflineSorter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        OfflineSorter::OfflineSorter(const ::java::util::Comparator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6ffdd545, a0.this$)) {}

        OfflineSorter::OfflineSorter(const ::java::util::Comparator & a0, const ::org::apache::lucene::util::OfflineSorter$BufferSize & a1, const ::java::io::File & a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_22c0d43b, a0.this$, a1.this$, a2.this$, a3)) {}

        ::java::io::File OfflineSorter::defaultTempDir()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::io::File(env->callStaticObjectMethod(cls, mids$[mid_defaultTempDir_a8eb7bbe]));
        }

        ::java::util::Comparator OfflineSorter::getComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::util::OfflineSorter$SortInfo OfflineSorter::sort(const ::java::io::File & a0, const ::java::io::File & a1) const
        {
          return ::org::apache::lucene::util::OfflineSorter$SortInfo(env->callObjectMethod(this$, mids$[mid_sort_c917fc5b], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesReader.h"
#include "org/apache/lucene/util/OfflineSorter$ByteSequencesWriter.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OfflineSorter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OfflineSorter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OfflineSorter_init_(t_OfflineSorter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OfflineSorter_defaultTempDir(PyTypeObject *type);
        static PyObject *t_OfflineSorter_getComparator(t_OfflineSorter *self);
        static PyObject *t_OfflineSorter_sort(t_OfflineSorter *self, PyObject *args);
        static PyObject *t_OfflineSorter_get__comparator(t_OfflineSorter *self, void *data);
        static PyGetSetDef t_OfflineSorter__fields_[] = {
          DECLARE_GET_FIELD(t_OfflineSorter, comparator),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OfflineSorter__methods_[] = {
          DECLARE_METHOD(t_OfflineSorter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter, defaultTempDir, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_OfflineSorter, getComparator, METH_NOARGS),
          DECLARE_METHOD(t_OfflineSorter, sort, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OfflineSorter, t_OfflineSorter, ::java::lang::Object, OfflineSorter, t_OfflineSorter_init_, 0, 0, t_OfflineSorter__fields_, 0, 0);

        void t_OfflineSorter::install(PyObject *module)
        {
          installType(&PY_TYPE(OfflineSorter), module, "OfflineSorter", 0);
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "ByteSequencesReader", make_descriptor(&PY_TYPE(OfflineSorter$ByteSequencesReader)));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "ByteSequencesWriter", make_descriptor(&PY_TYPE(OfflineSorter$ByteSequencesWriter)));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "BufferSize", make_descriptor(&PY_TYPE(OfflineSorter$BufferSize)));
        }

        void t_OfflineSorter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "class_", make_descriptor(OfflineSorter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "wrapfn_", make_descriptor(t_OfflineSorter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(OfflineSorter::initializeClass);
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "ABSOLUTE_MIN_SORT_BUFFER_SIZE", make_descriptor(OfflineSorter::ABSOLUTE_MIN_SORT_BUFFER_SIZE));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "DEFAULT_COMPARATOR", make_descriptor(::java::util::t_Comparator::wrap_Object(*OfflineSorter::DEFAULT_COMPARATOR)));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "GB", make_descriptor(OfflineSorter::GB));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "MAX_TEMPFILES", make_descriptor(OfflineSorter::MAX_TEMPFILES));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "MB", make_descriptor(OfflineSorter::MB));
          PyDict_SetItemString(PY_TYPE(OfflineSorter).tp_dict, "MIN_BUFFER_SIZE_MB", make_descriptor(OfflineSorter::MIN_BUFFER_SIZE_MB));
        }

        static PyObject *t_OfflineSorter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OfflineSorter::initializeClass, 1)))
            return NULL;
          return t_OfflineSorter::wrap_Object(OfflineSorter(((t_OfflineSorter *) arg)->object.this$));
        }
        static PyObject *t_OfflineSorter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OfflineSorter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OfflineSorter_init_(t_OfflineSorter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OfflineSorter object((jobject) NULL);

              INT_CALL(object = OfflineSorter());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::util::Comparator a0((jobject) NULL);
              PyTypeObject **p0;
              OfflineSorter object((jobject) NULL);

              if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
              {
                INT_CALL(object = OfflineSorter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::util::Comparator a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::util::OfflineSorter$BufferSize a1((jobject) NULL);
              ::java::io::File a2((jobject) NULL);
              jint a3;
              OfflineSorter object((jobject) NULL);

              if (!parseArgs(args, "KkkI", ::java::util::Comparator::initializeClass, ::org::apache::lucene::util::OfflineSorter$BufferSize::initializeClass, ::java::io::File::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_, &a1, &a2, &a3))
              {
                INT_CALL(object = OfflineSorter(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OfflineSorter_defaultTempDir(PyTypeObject *type)
        {
          ::java::io::File result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::util::OfflineSorter::defaultTempDir());
          return ::java::io::t_File::wrap_Object(result);
        }

        static PyObject *t_OfflineSorter_getComparator(t_OfflineSorter *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_OfflineSorter_sort(t_OfflineSorter *self, PyObject *args)
        {
          ::java::io::File a0((jobject) NULL);
          ::java::io::File a1((jobject) NULL);
          ::org::apache::lucene::util::OfflineSorter$SortInfo result((jobject) NULL);

          if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::java::io::File::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.sort(a0, a1));
            return ::org::apache::lucene::util::t_OfflineSorter$SortInfo::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "sort", args);
          return NULL;
        }

        static PyObject *t_OfflineSorter_get__comparator(t_OfflineSorter *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldValueHitQueue.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/search/SortField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldValueHitQueue::class$ = NULL;
        jmethodID *FieldValueHitQueue::mids$ = NULL;
        bool FieldValueHitQueue::live$ = false;

        jclass FieldValueHitQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldValueHitQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_create_c78d73c1] = env->getStaticMethodID(cls, "create", "([Lorg/apache/lucene/search/SortField;I)Lorg/apache/lucene/search/FieldValueHitQueue;");
            mids$[mid_getComparators_cbcbe6bc] = env->getMethodID(cls, "getComparators", "()[Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getReverseMul_dab10e75] = env->getMethodID(cls, "getReverseMul", "()[I");
            mids$[mid_setComparator_205d9ea7] = env->getMethodID(cls, "setComparator", "(ILorg/apache/lucene/search/FieldComparator;)V");
            mids$[mid_lessThan_90234960] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/search/FieldValueHitQueue$Entry;Lorg/apache/lucene/search/FieldValueHitQueue$Entry;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldValueHitQueue FieldValueHitQueue::create(const JArray< ::org::apache::lucene::search::SortField > & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return FieldValueHitQueue(env->callStaticObjectMethod(cls, mids$[mid_create_c78d73c1], a0.this$, a1));
        }

        JArray< ::org::apache::lucene::search::FieldComparator > FieldValueHitQueue::getComparators() const
        {
          return JArray< ::org::apache::lucene::search::FieldComparator >(env->callObjectMethod(this$, mids$[mid_getComparators_cbcbe6bc]));
        }

        JArray< jint > FieldValueHitQueue::getReverseMul() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getReverseMul_dab10e75]));
        }

        void FieldValueHitQueue::setComparator(jint a0, const ::org::apache::lucene::search::FieldComparator & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_setComparator_205d9ea7], a0, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FieldValueHitQueue$Entry.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldValueHitQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueHitQueue_of_(t_FieldValueHitQueue *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue_create(PyTypeObject *type, PyObject *args);
        static PyObject *t_FieldValueHitQueue_getComparators(t_FieldValueHitQueue *self);
        static PyObject *t_FieldValueHitQueue_getReverseMul(t_FieldValueHitQueue *self);
        static PyObject *t_FieldValueHitQueue_setComparator(t_FieldValueHitQueue *self, PyObject *args);
        static PyObject *t_FieldValueHitQueue_get__comparators(t_FieldValueHitQueue *self, void *data);
        static PyObject *t_FieldValueHitQueue_get__reverseMul(t_FieldValueHitQueue *self, void *data);
        static PyObject *t_FieldValueHitQueue_get__parameters_(t_FieldValueHitQueue *self, void *data);
        static PyGetSetDef t_FieldValueHitQueue__fields_[] = {
          DECLARE_GET_FIELD(t_FieldValueHitQueue, comparators),
          DECLARE_GET_FIELD(t_FieldValueHitQueue, reverseMul),
          DECLARE_GET_FIELD(t_FieldValueHitQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldValueHitQueue__methods_[] = {
          DECLARE_METHOD(t_FieldValueHitQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueHitQueue, create, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_FieldValueHitQueue, getComparators, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueHitQueue, getReverseMul, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueHitQueue, setComparator, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldValueHitQueue, t_FieldValueHitQueue, ::org::apache::lucene::util::PriorityQueue, FieldValueHitQueue, abstract_init, 0, 0, t_FieldValueHitQueue__fields_, 0, 0);
        PyObject *t_FieldValueHitQueue::wrap_Object(const FieldValueHitQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue *self = (t_FieldValueHitQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldValueHitQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldValueHitQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldValueHitQueue *self = (t_FieldValueHitQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldValueHitQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldValueHitQueue), module, "FieldValueHitQueue", 0);
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "Entry", make_descriptor(&PY_TYPE(FieldValueHitQueue$Entry)));
        }

        void t_FieldValueHitQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "class_", make_descriptor(FieldValueHitQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "wrapfn_", make_descriptor(t_FieldValueHitQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldValueHitQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldValueHitQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldValueHitQueue::initializeClass, 1)))
            return NULL;
          return t_FieldValueHitQueue::wrap_Object(FieldValueHitQueue(((t_FieldValueHitQueue *) arg)->object.this$));
        }
        static PyObject *t_FieldValueHitQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldValueHitQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldValueHitQueue_of_(t_FieldValueHitQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldValueHitQueue_create(PyTypeObject *type, PyObject *args)
        {
          JArray< ::org::apache::lucene::search::SortField > a0((jobject) NULL);
          jint a1;
          FieldValueHitQueue result((jobject) NULL);

          if (!parseArgs(args, "[kI", ::org::apache::lucene::search::SortField::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::FieldValueHitQueue::create(a0, a1));
            return t_FieldValueHitQueue::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "create", args);
          return NULL;
        }

        static PyObject *t_FieldValueHitQueue_getComparators(t_FieldValueHitQueue *self)
        {
          JArray< ::org::apache::lucene::search::FieldComparator > result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparators());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_FieldComparator::wrap_jobject);
        }

        static PyObject *t_FieldValueHitQueue_getReverseMul(t_FieldValueHitQueue *self)
        {
          JArray< jint > result((jobject) NULL);
          OBJ_CALL(result = self->object.getReverseMul());
          return result.wrap();
        }

        static PyObject *t_FieldValueHitQueue_setComparator(t_FieldValueHitQueue *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::search::FieldComparator a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "IK", ::org::apache::lucene::search::FieldComparator::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_FieldComparator::parameters_))
          {
            OBJ_CALL(self->object.setComparator(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setComparator", args);
          return NULL;
        }
        static PyObject *t_FieldValueHitQueue_get__parameters_(t_FieldValueHitQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_FieldValueHitQueue_get__comparators(t_FieldValueHitQueue *self, void *data)
        {
          JArray< ::org::apache::lucene::search::FieldComparator > value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparators());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_FieldComparator::wrap_jobject);
        }

        static PyObject *t_FieldValueHitQueue_get__reverseMul(t_FieldValueHitQueue *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getReverseMul());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilderFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *ConstantScoreQueryBuilder::class$ = NULL;
            jmethodID *ConstantScoreQueryBuilder::mids$ = NULL;
            bool ConstantScoreQueryBuilder::live$ = false;

            jclass ConstantScoreQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/ConstantScoreQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_08e51f07] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/FilterBuilderFactory;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ConstantScoreQueryBuilder::ConstantScoreQueryBuilder(const ::org::apache::lucene::queryparser::xml::FilterBuilderFactory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_08e51f07, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_ConstantScoreQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ConstantScoreQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ConstantScoreQueryBuilder_init_(t_ConstantScoreQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_ConstantScoreQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_ConstantScoreQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ConstantScoreQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ConstantScoreQueryBuilder, t_ConstantScoreQueryBuilder, ::java::lang::Object, ConstantScoreQueryBuilder, t_ConstantScoreQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_ConstantScoreQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(ConstantScoreQueryBuilder), module, "ConstantScoreQueryBuilder", 0);
            }

            void t_ConstantScoreQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ConstantScoreQueryBuilder).tp_dict, "class_", make_descriptor(ConstantScoreQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ConstantScoreQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_ConstantScoreQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ConstantScoreQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ConstantScoreQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ConstantScoreQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_ConstantScoreQueryBuilder::wrap_Object(ConstantScoreQueryBuilder(((t_ConstantScoreQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_ConstantScoreQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ConstantScoreQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ConstantScoreQueryBuilder_init_(t_ConstantScoreQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::FilterBuilderFactory a0((jobject) NULL);
              ConstantScoreQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::FilterBuilderFactory::initializeClass, &a0))
              {
                INT_CALL(object = ConstantScoreQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/WildcardQuery.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *WildcardQuery::class$ = NULL;
        jmethodID *WildcardQuery::mids$ = NULL;
        bool WildcardQuery::live$ = false;
        jchar WildcardQuery::WILDCARD_CHAR = (jchar) 0;
        jchar WildcardQuery::WILDCARD_ESCAPE = (jchar) 0;
        jchar WildcardQuery::WILDCARD_STRING = (jchar) 0;

        jclass WildcardQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/WildcardQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
            mids$[mid_toAutomaton_d07301d8] = env->getStaticMethodID(cls, "toAutomaton", "(Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/util/automaton/Automaton;");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            WILDCARD_CHAR = env->getStaticCharField(cls, "WILDCARD_CHAR");
            WILDCARD_ESCAPE = env->getStaticCharField(cls, "WILDCARD_ESCAPE");
            WILDCARD_STRING = env->getStaticCharField(cls, "WILDCARD_STRING");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        WildcardQuery::WildcardQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::AutomatonQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

        ::org::apache::lucene::index::Term WildcardQuery::getTerm() const
        {
          return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
        }

        ::org::apache::lucene::util::automaton::Automaton WildcardQuery::toAutomaton(const ::org::apache::lucene::index::Term & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::automaton::Automaton(env->callStaticObjectMethod(cls, mids$[mid_toAutomaton_d07301d8], a0.this$));
        }

        ::java::lang::String WildcardQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_WildcardQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WildcardQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_WildcardQuery_init_(t_WildcardQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_WildcardQuery_getTerm(t_WildcardQuery *self);
        static PyObject *t_WildcardQuery_toAutomaton(PyTypeObject *type, PyObject *arg);
        static PyObject *t_WildcardQuery_toString(t_WildcardQuery *self, PyObject *args);
        static PyObject *t_WildcardQuery_get__term(t_WildcardQuery *self, void *data);
        static PyGetSetDef t_WildcardQuery__fields_[] = {
          DECLARE_GET_FIELD(t_WildcardQuery, term),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_WildcardQuery__methods_[] = {
          DECLARE_METHOD(t_WildcardQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, getTerm, METH_NOARGS),
          DECLARE_METHOD(t_WildcardQuery, toAutomaton, METH_O | METH_CLASS),
          DECLARE_METHOD(t_WildcardQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(WildcardQuery, t_WildcardQuery, ::org::apache::lucene::search::AutomatonQuery, WildcardQuery, t_WildcardQuery_init_, 0, 0, t_WildcardQuery__fields_, 0, 0);

        void t_WildcardQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(WildcardQuery), module, "WildcardQuery", 0);
        }

        void t_WildcardQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "class_", make_descriptor(WildcardQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "wrapfn_", make_descriptor(t_WildcardQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(WildcardQuery::initializeClass);
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "WILDCARD_CHAR", make_descriptor(WildcardQuery::WILDCARD_CHAR));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "WILDCARD_ESCAPE", make_descriptor(WildcardQuery::WILDCARD_ESCAPE));
          PyDict_SetItemString(PY_TYPE(WildcardQuery).tp_dict, "WILDCARD_STRING", make_descriptor(WildcardQuery::WILDCARD_STRING));
        }

        static PyObject *t_WildcardQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, WildcardQuery::initializeClass, 1)))
            return NULL;
          return t_WildcardQuery::wrap_Object(WildcardQuery(((t_WildcardQuery *) arg)->object.this$));
        }
        static PyObject *t_WildcardQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, WildcardQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_WildcardQuery_init_(t_WildcardQuery *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          WildcardQuery object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            INT_CALL(object = WildcardQuery(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_WildcardQuery_getTerm(t_WildcardQuery *self)
        {
          ::org::apache::lucene::index::Term result((jobject) NULL);
          OBJ_CALL(result = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(result);
        }

        static PyObject *t_WildcardQuery_toAutomaton(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          ::org::apache::lucene::util::automaton::Automaton result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::WildcardQuery::toAutomaton(a0));
            return ::org::apache::lucene::util::automaton::t_Automaton::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "toAutomaton", arg);
          return NULL;
        }

        static PyObject *t_WildcardQuery_toString(t_WildcardQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(WildcardQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_WildcardQuery_get__term(t_WildcardQuery *self, void *data)
        {
          ::org::apache::lucene::index::Term value((jobject) NULL);
          OBJ_CALL(value = self->object.getTerm());
          return ::org::apache::lucene::index::t_Term::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker.h"
#include "org/apache/lucene/search/spell/SuggestWord.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "org/apache/lucene/search/spell/CombineSuggestion.h"
#include "org/apache/lucene/search/spell/SuggestMode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *WordBreakSpellChecker::class$ = NULL;
          jmethodID *WordBreakSpellChecker::mids$ = NULL;
          bool WordBreakSpellChecker::live$ = false;
          ::org::apache::lucene::index::Term *WordBreakSpellChecker::SEPARATOR_TERM = NULL;

          jclass WordBreakSpellChecker::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/WordBreakSpellChecker");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getMaxChanges_54c6a179] = env->getMethodID(cls, "getMaxChanges", "()I");
              mids$[mid_getMaxCombineWordLength_54c6a179] = env->getMethodID(cls, "getMaxCombineWordLength", "()I");
              mids$[mid_getMaxEvaluations_54c6a179] = env->getMethodID(cls, "getMaxEvaluations", "()I");
              mids$[mid_getMinBreakWordLength_54c6a179] = env->getMethodID(cls, "getMinBreakWordLength", "()I");
              mids$[mid_getMinSuggestionFrequency_54c6a179] = env->getMethodID(cls, "getMinSuggestionFrequency", "()I");
              mids$[mid_setMaxChanges_39c7bd3c] = env->getMethodID(cls, "setMaxChanges", "(I)V");
              mids$[mid_setMaxCombineWordLength_39c7bd3c] = env->getMethodID(cls, "setMaxCombineWordLength", "(I)V");
              mids$[mid_setMaxEvaluations_39c7bd3c] = env->getMethodID(cls, "setMaxEvaluations", "(I)V");
              mids$[mid_setMinBreakWordLength_39c7bd3c] = env->getMethodID(cls, "setMinBreakWordLength", "(I)V");
              mids$[mid_setMinSuggestionFrequency_39c7bd3c] = env->getMethodID(cls, "setMinSuggestionFrequency", "(I)V");
              mids$[mid_suggestWordBreaks_50deeffc] = env->getMethodID(cls, "suggestWordBreaks", "(Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;)[[Lorg/apache/lucene/search/spell/SuggestWord;");
              mids$[mid_suggestWordCombinations_6d229e7f] = env->getMethodID(cls, "suggestWordCombinations", "([Lorg/apache/lucene/index/Term;ILorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/spell/SuggestMode;)[Lorg/apache/lucene/search/spell/CombineSuggestion;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              SEPARATOR_TERM = new ::org::apache::lucene::index::Term(env->getStaticObjectField(cls, "SEPARATOR_TERM", "Lorg/apache/lucene/index/Term;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordBreakSpellChecker::WordBreakSpellChecker() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint WordBreakSpellChecker::getMaxChanges() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxChanges_54c6a179]);
          }

          jint WordBreakSpellChecker::getMaxCombineWordLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxCombineWordLength_54c6a179]);
          }

          jint WordBreakSpellChecker::getMaxEvaluations() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxEvaluations_54c6a179]);
          }

          jint WordBreakSpellChecker::getMinBreakWordLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinBreakWordLength_54c6a179]);
          }

          jint WordBreakSpellChecker::getMinSuggestionFrequency() const
          {
            return env->callIntMethod(this$, mids$[mid_getMinSuggestionFrequency_54c6a179]);
          }

          void WordBreakSpellChecker::setMaxChanges(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxChanges_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMaxCombineWordLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxCombineWordLength_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMaxEvaluations(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxEvaluations_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMinBreakWordLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinBreakWordLength_39c7bd3c], a0);
          }

          void WordBreakSpellChecker::setMinSuggestionFrequency(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinSuggestionFrequency_39c7bd3c], a0);
          }

          JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > > WordBreakSpellChecker::suggestWordBreaks(const ::org::apache::lucene::index::Term & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3, const ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod & a4) const
          {
            return JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > >(env->callObjectMethod(this$, mids$[mid_suggestWordBreaks_50deeffc], a0.this$, a1, a2.this$, a3.this$, a4.this$));
          }

          JArray< ::org::apache::lucene::search::spell::CombineSuggestion > WordBreakSpellChecker::suggestWordCombinations(const JArray< ::org::apache::lucene::index::Term > & a0, jint a1, const ::org::apache::lucene::index::IndexReader & a2, const ::org::apache::lucene::search::spell::SuggestMode & a3) const
          {
            return JArray< ::org::apache::lucene::search::spell::CombineSuggestion >(env->callObjectMethod(this$, mids$[mid_suggestWordCombinations_6d229e7f], a0.this$, a1, a2.this$, a3.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_WordBreakSpellChecker_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WordBreakSpellChecker_init_(t_WordBreakSpellChecker *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WordBreakSpellChecker_getMaxChanges(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMaxCombineWordLength(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMaxEvaluations(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMinBreakWordLength(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_getMinSuggestionFrequency(t_WordBreakSpellChecker *self);
          static PyObject *t_WordBreakSpellChecker_setMaxChanges(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMaxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMaxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMinBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_setMinSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker_suggestWordBreaks(t_WordBreakSpellChecker *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker_suggestWordCombinations(t_WordBreakSpellChecker *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker_get__maxChanges(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxChanges(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__maxCombineWordLength(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__maxEvaluations(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__maxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__minBreakWordLength(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__minBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyObject *t_WordBreakSpellChecker_get__minSuggestionFrequency(t_WordBreakSpellChecker *self, void *data);
          static int t_WordBreakSpellChecker_set__minSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg, void *data);
          static PyGetSetDef t_WordBreakSpellChecker__fields_[] = {
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxChanges),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxCombineWordLength),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, maxEvaluations),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, minBreakWordLength),
            DECLARE_GETSET_FIELD(t_WordBreakSpellChecker, minSuggestionFrequency),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WordBreakSpellChecker__methods_[] = {
            DECLARE_METHOD(t_WordBreakSpellChecker, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxChanges, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxCombineWordLength, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMaxEvaluations, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMinBreakWordLength, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, getMinSuggestionFrequency, METH_NOARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxChanges, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxCombineWordLength, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMaxEvaluations, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMinBreakWordLength, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, setMinSuggestionFrequency, METH_O),
            DECLARE_METHOD(t_WordBreakSpellChecker, suggestWordBreaks, METH_VARARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker, suggestWordCombinations, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordBreakSpellChecker, t_WordBreakSpellChecker, ::java::lang::Object, WordBreakSpellChecker, t_WordBreakSpellChecker_init_, 0, 0, t_WordBreakSpellChecker__fields_, 0, 0);

          void t_WordBreakSpellChecker::install(PyObject *module)
          {
            installType(&PY_TYPE(WordBreakSpellChecker), module, "WordBreakSpellChecker", 0);
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "BreakSuggestionSortMethod", make_descriptor(&PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod)));
          }

          void t_WordBreakSpellChecker::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "class_", make_descriptor(WordBreakSpellChecker::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "wrapfn_", make_descriptor(t_WordBreakSpellChecker::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordBreakSpellChecker::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker).tp_dict, "SEPARATOR_TERM", make_descriptor(::org::apache::lucene::index::t_Term::wrap_Object(*WordBreakSpellChecker::SEPARATOR_TERM)));
          }

          static PyObject *t_WordBreakSpellChecker_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordBreakSpellChecker::initializeClass, 1)))
              return NULL;
            return t_WordBreakSpellChecker::wrap_Object(WordBreakSpellChecker(((t_WordBreakSpellChecker *) arg)->object.this$));
          }
          static PyObject *t_WordBreakSpellChecker_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordBreakSpellChecker::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WordBreakSpellChecker_init_(t_WordBreakSpellChecker *self, PyObject *args, PyObject *kwds)
          {
            WordBreakSpellChecker object((jobject) NULL);

            INT_CALL(object = WordBreakSpellChecker());
            self->object = object;

            return 0;
          }

          static PyObject *t_WordBreakSpellChecker_getMaxChanges(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxChanges());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMaxCombineWordLength(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxCombineWordLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMaxEvaluations(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxEvaluations());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMinBreakWordLength(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinBreakWordLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_getMinSuggestionFrequency(t_WordBreakSpellChecker *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMinSuggestionFrequency());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_WordBreakSpellChecker_setMaxChanges(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxChanges(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxChanges", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMaxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxCombineWordLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxCombineWordLength", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMaxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxEvaluations(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxEvaluations", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMinBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinBreakWordLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinBreakWordLength", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_setMinSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinSuggestionFrequency(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinSuggestionFrequency", arg);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_suggestWordBreaks(t_WordBreakSpellChecker *self, PyObject *args)
          {
            ::org::apache::lucene::index::Term a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod a4((jobject) NULL);
            PyTypeObject **p4;
            JArray< JArray< ::org::apache::lucene::search::spell::SuggestWord > > result((jobject) NULL);

            if (!parseArgs(args, "kIkKK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_, &a4, &p4, ::org::apache::lucene::search::spell::t_WordBreakSpellChecker$BreakSuggestionSortMethod::parameters_))
            {
              OBJ_CALL(result = self->object.suggestWordBreaks(a0, a1, a2, a3, a4));
              return JArray<jobject>(result.this$).wrap(NULL);
            }

            PyErr_SetArgsError((PyObject *) self, "suggestWordBreaks", args);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_suggestWordCombinations(t_WordBreakSpellChecker *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::index::Term > a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::index::IndexReader a2((jobject) NULL);
            ::org::apache::lucene::search::spell::SuggestMode a3((jobject) NULL);
            PyTypeObject **p3;
            JArray< ::org::apache::lucene::search::spell::CombineSuggestion > result((jobject) NULL);

            if (!parseArgs(args, "[kIkK", ::org::apache::lucene::index::Term::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::spell::SuggestMode::initializeClass, &a0, &a1, &a2, &a3, &p3, ::org::apache::lucene::search::spell::t_SuggestMode::parameters_))
            {
              OBJ_CALL(result = self->object.suggestWordCombinations(a0, a1, a2, a3));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spell::t_CombineSuggestion::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "suggestWordCombinations", args);
            return NULL;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxChanges(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxChanges());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxChanges(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxChanges(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxChanges", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxCombineWordLength(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxCombineWordLength());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxCombineWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxCombineWordLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxCombineWordLength", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__maxEvaluations(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxEvaluations());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__maxEvaluations(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxEvaluations(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxEvaluations", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__minBreakWordLength(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinBreakWordLength());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__minBreakWordLength(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinBreakWordLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minBreakWordLength", arg);
            return -1;
          }

          static PyObject *t_WordBreakSpellChecker_get__minSuggestionFrequency(t_WordBreakSpellChecker *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMinSuggestionFrequency());
            return PyInt_FromLong((long) value);
          }
          static int t_WordBreakSpellChecker_set__minSuggestionFrequency(t_WordBreakSpellChecker *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinSuggestionFrequency(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minSuggestionFrequency", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40FieldInfosFormat::class$ = NULL;
          jmethodID *Lucene40FieldInfosFormat::mids$ = NULL;
          bool Lucene40FieldInfosFormat::live$ = false;

          jclass Lucene40FieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40FieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
              mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40FieldInfosFormat::Lucene40FieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldInfosReader Lucene40FieldInfosFormat::getFieldInfosReader() const
          {
            return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
          }

          ::org::apache::lucene::codecs::FieldInfosWriter Lucene40FieldInfosFormat::getFieldInfosWriter() const
          {
            return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40FieldInfosFormat_init_(t_Lucene40FieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosReader(t_Lucene40FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosWriter(t_Lucene40FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosReader(t_Lucene40FieldInfosFormat *self, void *data);
          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosWriter(t_Lucene40FieldInfosFormat *self, void *data);
          static PyGetSetDef t_Lucene40FieldInfosFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40FieldInfosFormat, fieldInfosReader),
            DECLARE_GET_FIELD(t_Lucene40FieldInfosFormat, fieldInfosWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40FieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, getFieldInfosReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, getFieldInfosWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40FieldInfosFormat, t_Lucene40FieldInfosFormat, ::org::apache::lucene::codecs::FieldInfosFormat, Lucene40FieldInfosFormat, t_Lucene40FieldInfosFormat_init_, 0, 0, t_Lucene40FieldInfosFormat__fields_, 0, 0);

          void t_Lucene40FieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40FieldInfosFormat), module, "Lucene40FieldInfosFormat", 0);
          }

          void t_Lucene40FieldInfosFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40FieldInfosFormat).tp_dict, "class_", make_descriptor(Lucene40FieldInfosFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40FieldInfosFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40FieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40FieldInfosFormat::wrap_Object(Lucene40FieldInfosFormat(((t_Lucene40FieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40FieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40FieldInfosFormat_init_(t_Lucene40FieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40FieldInfosFormat object((jobject) NULL);

            INT_CALL(object = Lucene40FieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosReader(t_Lucene40FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosReader());
              return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40FieldInfosFormat), (PyObject *) self, "getFieldInfosReader", args, 2);
          }

          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosWriter(t_Lucene40FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosWriter());
              return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40FieldInfosFormat), (PyObject *) self, "getFieldInfosWriter", args, 2);
          }

          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosReader(t_Lucene40FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosReader());
            return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
          }

          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosWriter(t_Lucene40FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosWriter());
            return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/no/NorwegianMinimalStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {

          ::java::lang::Class *NorwegianMinimalStemFilterFactory::class$ = NULL;
          jmethodID *NorwegianMinimalStemFilterFactory::mids$ = NULL;
          bool NorwegianMinimalStemFilterFactory::live$ = false;

          jclass NorwegianMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/no/NorwegianMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NorwegianMinimalStemFilterFactory::NorwegianMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream NorwegianMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace no {
          static PyObject *t_NorwegianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NorwegianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NorwegianMinimalStemFilterFactory_init_(t_NorwegianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NorwegianMinimalStemFilterFactory_create(t_NorwegianMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_NorwegianMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NorwegianMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NorwegianMinimalStemFilterFactory, t_NorwegianMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, NorwegianMinimalStemFilterFactory, t_NorwegianMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_NorwegianMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(NorwegianMinimalStemFilterFactory), module, "NorwegianMinimalStemFilterFactory", 0);
          }

          void t_NorwegianMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(NorwegianMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_NorwegianMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NorwegianMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NorwegianMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NorwegianMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_NorwegianMinimalStemFilterFactory::wrap_Object(NorwegianMinimalStemFilterFactory(((t_NorwegianMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_NorwegianMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NorwegianMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NorwegianMinimalStemFilterFactory_init_(t_NorwegianMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            NorwegianMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = NorwegianMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NorwegianMinimalStemFilterFactory_create(t_NorwegianMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(NorwegianMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/NGramTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *NGramTokenFilter::class$ = NULL;
          jmethodID *NGramTokenFilter::mids$ = NULL;
          bool NGramTokenFilter::live$ = false;
          jint NGramTokenFilter::DEFAULT_MAX_NGRAM_SIZE = (jint) 0;
          jint NGramTokenFilter::DEFAULT_MIN_NGRAM_SIZE = (jint) 0;

          jclass NGramTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/NGramTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_46a9ddd5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_NGRAM_SIZE");
              DEFAULT_MIN_NGRAM_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_NGRAM_SIZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NGramTokenFilter::NGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

          NGramTokenFilter::NGramTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, jint a2, jint a3) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_46a9ddd5, a0.this$, a1.this$, a2, a3)) {}

          jboolean NGramTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void NGramTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_NGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NGramTokenFilter_init_(t_NGramTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NGramTokenFilter_incrementToken(t_NGramTokenFilter *self, PyObject *args);
          static PyObject *t_NGramTokenFilter_reset(t_NGramTokenFilter *self, PyObject *args);

          static PyMethodDef t_NGramTokenFilter__methods_[] = {
            DECLARE_METHOD(t_NGramTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NGramTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_NGramTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NGramTokenFilter, t_NGramTokenFilter, ::org::apache::lucene::analysis::TokenFilter, NGramTokenFilter, t_NGramTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_NGramTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(NGramTokenFilter), module, "NGramTokenFilter", 0);
          }

          void t_NGramTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "class_", make_descriptor(NGramTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_NGramTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(NGramTokenFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "DEFAULT_MAX_NGRAM_SIZE", make_descriptor(NGramTokenFilter::DEFAULT_MAX_NGRAM_SIZE));
            PyDict_SetItemString(PY_TYPE(NGramTokenFilter).tp_dict, "DEFAULT_MIN_NGRAM_SIZE", make_descriptor(NGramTokenFilter::DEFAULT_MIN_NGRAM_SIZE));
          }

          static PyObject *t_NGramTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NGramTokenFilter::initializeClass, 1)))
              return NULL;
            return t_NGramTokenFilter::wrap_Object(NGramTokenFilter(((t_NGramTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_NGramTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NGramTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NGramTokenFilter_init_(t_NGramTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                NGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
                {
                  INT_CALL(object = NGramTokenFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                jint a2;
                jint a3;
                NGramTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkII", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3))
                {
                  INT_CALL(object = NGramTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NGramTokenFilter_incrementToken(t_NGramTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(NGramTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_NGramTokenFilter_reset(t_NGramTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(NGramTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "java/lang/String.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *Token::class$ = NULL;
          jmethodID *Token::mids$ = NULL;
          jfieldID *Token::fids$ = NULL;
          bool Token::live$ = false;

          jclass Token::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/Token");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
              mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
              mids$[mid_newToken_61c98f04] = env->getStaticMethodID(cls, "newToken", "(I)Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_newToken_73220176] = env->getStaticMethodID(cls, "newToken", "(ILjava/lang/String;)Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_beginColumn] = env->getFieldID(cls, "beginColumn", "I");
              fids$[fid_beginLine] = env->getFieldID(cls, "beginLine", "I");
              fids$[fid_endColumn] = env->getFieldID(cls, "endColumn", "I");
              fids$[fid_endLine] = env->getFieldID(cls, "endLine", "I");
              fids$[fid_image] = env->getFieldID(cls, "image", "Ljava/lang/String;");
              fids$[fid_kind] = env->getFieldID(cls, "kind", "I");
              fids$[fid_next] = env->getFieldID(cls, "next", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_specialToken] = env->getFieldID(cls, "specialToken", "Lorg/apache/lucene/queryparser/classic/Token;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          Token::Token(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          Token::Token(jint a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

          ::java::lang::Object Token::getValue() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
          }

          Token Token::newToken(jint a0)
          {
            jclass cls = env->getClass(initializeClass);
            return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_61c98f04], a0));
          }

          Token Token::newToken(jint a0, const ::java::lang::String & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return Token(env->callStaticObjectMethod(cls, mids$[mid_newToken_73220176], a0, a1.this$));
          }

          ::java::lang::String Token::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jint Token::_get_beginColumn() const
          {
            return env->getIntField(this$, fids$[fid_beginColumn]);
          }

          void Token::_set_beginColumn(jint a0) const
          {
            env->setIntField(this$, fids$[fid_beginColumn], a0);
          }

          jint Token::_get_beginLine() const
          {
            return env->getIntField(this$, fids$[fid_beginLine]);
          }

          void Token::_set_beginLine(jint a0) const
          {
            env->setIntField(this$, fids$[fid_beginLine], a0);
          }

          jint Token::_get_endColumn() const
          {
            return env->getIntField(this$, fids$[fid_endColumn]);
          }

          void Token::_set_endColumn(jint a0) const
          {
            env->setIntField(this$, fids$[fid_endColumn], a0);
          }

          jint Token::_get_endLine() const
          {
            return env->getIntField(this$, fids$[fid_endLine]);
          }

          void Token::_set_endLine(jint a0) const
          {
            env->setIntField(this$, fids$[fid_endLine], a0);
          }

          ::java::lang::String Token::_get_image() const
          {
            return ::java::lang::String(env->getObjectField(this$, fids$[fid_image]));
          }

          void Token::_set_image(const ::java::lang::String & a0) const
          {
            env->setObjectField(this$, fids$[fid_image], a0.this$);
          }

          jint Token::_get_kind() const
          {
            return env->getIntField(this$, fids$[fid_kind]);
          }

          void Token::_set_kind(jint a0) const
          {
            env->setIntField(this$, fids$[fid_kind], a0);
          }

          Token Token::_get_next() const
          {
            return Token(env->getObjectField(this$, fids$[fid_next]));
          }

          void Token::_set_next(const Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_next], a0.this$);
          }

          Token Token::_get_specialToken() const
          {
            return Token(env->getObjectField(this$, fids$[fid_specialToken]));
          }

          void Token::_set_specialToken(const Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_specialToken], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Token_getValue(t_Token *self);
          static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args);
          static PyObject *t_Token_toString(t_Token *self, PyObject *args);
          static PyObject *t_Token_get__beginColumn(t_Token *self, void *data);
          static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__beginLine(t_Token *self, void *data);
          static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__endColumn(t_Token *self, void *data);
          static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__endLine(t_Token *self, void *data);
          static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__image(t_Token *self, void *data);
          static int t_Token_set__image(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__kind(t_Token *self, void *data);
          static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__next(t_Token *self, void *data);
          static int t_Token_set__next(t_Token *self, PyObject *arg, void *data);
          static PyObject *t_Token_get__specialToken(t_Token *self, void *data);
          static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data);

          static PyObject *t_Token_get__value(t_Token *self, void *data);
          static PyGetSetDef t_Token__fields_[] = {
            DECLARE_GETSET_FIELD(t_Token, beginColumn),
            DECLARE_GETSET_FIELD(t_Token, beginLine),
            DECLARE_GETSET_FIELD(t_Token, endColumn),
            DECLARE_GETSET_FIELD(t_Token, endLine),
            DECLARE_GETSET_FIELD(t_Token, image),
            DECLARE_GETSET_FIELD(t_Token, kind),
            DECLARE_GETSET_FIELD(t_Token, next),
            DECLARE_GETSET_FIELD(t_Token, specialToken),
            DECLARE_GET_FIELD(t_Token, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Token__methods_[] = {
            DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Token, getValue, METH_NOARGS),
            DECLARE_METHOD(t_Token, newToken, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Token, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Token, t_Token, ::java::lang::Object, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

          void t_Token::install(PyObject *module)
          {
            installType(&PY_TYPE(Token), module, "Token", 0);
          }

          void t_Token::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Token::initializeClass, 1)))
              return NULL;
            return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
          }
          static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Token::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                Token object((jobject) NULL);

                INT_CALL(object = Token());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                Token object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = Token(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                jint a0;
                ::java::lang::String a1((jobject) NULL);
                Token object((jobject) NULL);

                if (!parseArgs(args, "Is", &a0, &a1))
                {
                  INT_CALL(object = Token(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Token_getValue(t_Token *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_Token_newToken(PyTypeObject *type, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                Token result((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::Token::newToken(a0));
                  return t_Token::wrap_Object(result);
                }
              }
              break;
             case 2:
              {
                jint a0;
                ::java::lang::String a1((jobject) NULL);
                Token result((jobject) NULL);

                if (!parseArgs(args, "Is", &a0, &a1))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::classic::Token::newToken(a0, a1));
                  return t_Token::wrap_Object(result);
                }
              }
            }

            PyErr_SetArgsError(type, "newToken", args);
            return NULL;
          }

          static PyObject *t_Token_toString(t_Token *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Token_get__beginColumn(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_beginColumn());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__beginColumn(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_beginColumn(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "beginColumn", arg);
            return -1;
          }

          static PyObject *t_Token_get__beginLine(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_beginLine());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__beginLine(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_beginLine(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "beginLine", arg);
            return -1;
          }

          static PyObject *t_Token_get__endColumn(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_endColumn());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__endColumn(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_endColumn(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "endColumn", arg);
            return -1;
          }

          static PyObject *t_Token_get__endLine(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_endLine());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__endLine(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_endLine(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "endLine", arg);
            return -1;
          }

          static PyObject *t_Token_get__image(t_Token *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object._get_image());
            return j2p(value);
          }
          static int t_Token_set__image(t_Token *self, PyObject *arg, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object._set_image(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "image", arg);
            return -1;
          }

          static PyObject *t_Token_get__kind(t_Token *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_kind());
            return PyInt_FromLong((long) value);
          }
          static int t_Token_set__kind(t_Token *self, PyObject *arg, void *data)
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object._set_kind(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "kind", arg);
            return -1;
          }

          static PyObject *t_Token_get__next(t_Token *self, void *data)
          {
            Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_next());
            return t_Token::wrap_Object(value);
          }
          static int t_Token_set__next(t_Token *self, PyObject *arg, void *data)
          {
            Token value((jobject) NULL);
            if (!parseArg(arg, "k", Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_next(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "next", arg);
            return -1;
          }

          static PyObject *t_Token_get__specialToken(t_Token *self, void *data)
          {
            Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_specialToken());
            return t_Token::wrap_Object(value);
          }
          static int t_Token_set__specialToken(t_Token *self, PyObject *arg, void *data)
          {
            Token value((jobject) NULL);
            if (!parseArg(arg, "k", Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_specialToken(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "specialToken", arg);
            return -1;
          }

          static PyObject *t_Token_get__value(t_Token *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardBooleanQueryNodeBuilder.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *StandardBooleanQueryNodeBuilder::class$ = NULL;
              jmethodID *StandardBooleanQueryNodeBuilder::mids$ = NULL;
              bool StandardBooleanQueryNodeBuilder::live$ = false;

              jclass StandardBooleanQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/StandardBooleanQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardBooleanQueryNodeBuilder::StandardBooleanQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery StandardBooleanQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_StandardBooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardBooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardBooleanQueryNodeBuilder_init_(t_StandardBooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardBooleanQueryNodeBuilder_build(t_StandardBooleanQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_StandardBooleanQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_StandardBooleanQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardBooleanQueryNodeBuilder, t_StandardBooleanQueryNodeBuilder, ::java::lang::Object, StandardBooleanQueryNodeBuilder, t_StandardBooleanQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_StandardBooleanQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardBooleanQueryNodeBuilder), module, "StandardBooleanQueryNodeBuilder", 0);
              }

              void t_StandardBooleanQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNodeBuilder).tp_dict, "class_", make_descriptor(StandardBooleanQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_StandardBooleanQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardBooleanQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardBooleanQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_StandardBooleanQueryNodeBuilder::wrap_Object(StandardBooleanQueryNodeBuilder(((t_StandardBooleanQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_StandardBooleanQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardBooleanQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardBooleanQueryNodeBuilder_init_(t_StandardBooleanQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                StandardBooleanQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = StandardBooleanQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_StandardBooleanQueryNodeBuilder_build(t_StandardBooleanQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SortedSetSortField$Selector.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SortedSetSortField$Selector::class$ = NULL;
          jmethodID *SortedSetSortField$Selector::mids$ = NULL;
          bool SortedSetSortField$Selector::live$ = false;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MAX = NULL;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MIDDLE_MAX = NULL;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MIDDLE_MIN = NULL;
          SortedSetSortField$Selector *SortedSetSortField$Selector::MIN = NULL;

          jclass SortedSetSortField$Selector::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SortedSetSortField$Selector");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_1826b9b5] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;");
              mids$[mid_values_ab359d3f] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MAX", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              MIDDLE_MAX = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MIDDLE_MAX", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              MIDDLE_MIN = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MIDDLE_MIN", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              MIN = new SortedSetSortField$Selector(env->getStaticObjectField(cls, "MIN", "Lorg/apache/lucene/sandbox/queries/SortedSetSortField$Selector;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SortedSetSortField$Selector SortedSetSortField$Selector::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return SortedSetSortField$Selector(env->callStaticObjectMethod(cls, mids$[mid_valueOf_1826b9b5], a0.this$));
          }

          JArray< SortedSetSortField$Selector > SortedSetSortField$Selector::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< SortedSetSortField$Selector >(env->callStaticObjectMethod(cls, mids$[mid_values_ab359d3f]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SortedSetSortField$Selector_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetSortField$Selector_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SortedSetSortField$Selector_of_(t_SortedSetSortField$Selector *self, PyObject *args);
          static PyObject *t_SortedSetSortField$Selector_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_SortedSetSortField$Selector_values(PyTypeObject *type);
          static PyObject *t_SortedSetSortField$Selector_get__parameters_(t_SortedSetSortField$Selector *self, void *data);
          static PyGetSetDef t_SortedSetSortField$Selector__fields_[] = {
            DECLARE_GET_FIELD(t_SortedSetSortField$Selector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SortedSetSortField$Selector__methods_[] = {
            DECLARE_METHOD(t_SortedSetSortField$Selector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, of_, METH_VARARGS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SortedSetSortField$Selector, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SortedSetSortField$Selector, t_SortedSetSortField$Selector, ::java::lang::Enum, SortedSetSortField$Selector, abstract_init, 0, 0, t_SortedSetSortField$Selector__fields_, 0, 0);
          PyObject *t_SortedSetSortField$Selector::wrap_Object(const SortedSetSortField$Selector& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SortedSetSortField$Selector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SortedSetSortField$Selector *self = (t_SortedSetSortField$Selector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SortedSetSortField$Selector::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SortedSetSortField$Selector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SortedSetSortField$Selector *self = (t_SortedSetSortField$Selector *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SortedSetSortField$Selector::install(PyObject *module)
          {
            installType(&PY_TYPE(SortedSetSortField$Selector), module, "SortedSetSortField$Selector", 0);
          }

          void t_SortedSetSortField$Selector::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "class_", make_descriptor(SortedSetSortField$Selector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "wrapfn_", make_descriptor(t_SortedSetSortField$Selector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SortedSetSortField$Selector::initializeClass);
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MAX", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MAX)));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MIDDLE_MAX", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MIDDLE_MAX)));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MIDDLE_MIN", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MIDDLE_MIN)));
            PyDict_SetItemString(PY_TYPE(SortedSetSortField$Selector).tp_dict, "MIN", make_descriptor(t_SortedSetSortField$Selector::wrap_Object(*SortedSetSortField$Selector::MIN)));
          }

          static PyObject *t_SortedSetSortField$Selector_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SortedSetSortField$Selector::initializeClass, 1)))
              return NULL;
            return t_SortedSetSortField$Selector::wrap_Object(SortedSetSortField$Selector(((t_SortedSetSortField$Selector *) arg)->object.this$));
          }
          static PyObject *t_SortedSetSortField$Selector_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SortedSetSortField$Selector::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SortedSetSortField$Selector_of_(t_SortedSetSortField$Selector *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_SortedSetSortField$Selector_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            SortedSetSortField$Selector result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector::valueOf(a0));
              return t_SortedSetSortField$Selector::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_SortedSetSortField$Selector_values(PyTypeObject *type)
          {
            JArray< SortedSetSortField$Selector > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::sandbox::queries::SortedSetSortField$Selector::values());
            return JArray<jobject>(result.this$).wrap(t_SortedSetSortField$Selector::wrap_jobject);
          }
          static PyObject *t_SortedSetSortField$Selector_get__parameters_(t_SortedSetSortField$Selector *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/id/IndonesianStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {

          ::java::lang::Class *IndonesianStemFilterFactory::class$ = NULL;
          jmethodID *IndonesianStemFilterFactory::mids$ = NULL;
          bool IndonesianStemFilterFactory::live$ = false;

          jclass IndonesianStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/id/IndonesianStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IndonesianStemFilterFactory::IndonesianStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream IndonesianStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace id {
          static PyObject *t_IndonesianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IndonesianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IndonesianStemFilterFactory_init_(t_IndonesianStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IndonesianStemFilterFactory_create(t_IndonesianStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_IndonesianStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_IndonesianStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IndonesianStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IndonesianStemFilterFactory, t_IndonesianStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, IndonesianStemFilterFactory, t_IndonesianStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_IndonesianStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(IndonesianStemFilterFactory), module, "IndonesianStemFilterFactory", 0);
          }

          void t_IndonesianStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilterFactory).tp_dict, "class_", make_descriptor(IndonesianStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_IndonesianStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IndonesianStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IndonesianStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IndonesianStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_IndonesianStemFilterFactory::wrap_Object(IndonesianStemFilterFactory(((t_IndonesianStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_IndonesianStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IndonesianStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IndonesianStemFilterFactory_init_(t_IndonesianStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            IndonesianStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = IndonesianStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IndonesianStemFilterFactory_create(t_IndonesianStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(IndonesianStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseLightStemFilterFactory::class$ = NULL;
          jmethodID *PortugueseLightStemFilterFactory::mids$ = NULL;
          bool PortugueseLightStemFilterFactory::live$ = false;

          jclass PortugueseLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseLightStemFilterFactory::PortugueseLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream PortugueseLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseLightStemFilterFactory_init_(t_PortugueseLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseLightStemFilterFactory_create(t_PortugueseLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_PortugueseLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseLightStemFilterFactory, t_PortugueseLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, PortugueseLightStemFilterFactory, t_PortugueseLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_PortugueseLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseLightStemFilterFactory), module, "PortugueseLightStemFilterFactory", 0);
          }

          void t_PortugueseLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilterFactory).tp_dict, "class_", make_descriptor(PortugueseLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_PortugueseLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_PortugueseLightStemFilterFactory::wrap_Object(PortugueseLightStemFilterFactory(((t_PortugueseLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_PortugueseLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseLightStemFilterFactory_init_(t_PortugueseLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            PortugueseLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = PortugueseLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseLightStemFilterFactory_create(t_PortugueseLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PortugueseLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40PostingsBaseFormat::class$ = NULL;
          jmethodID *Lucene40PostingsBaseFormat::mids$ = NULL;
          bool Lucene40PostingsBaseFormat::live$ = false;

          jclass Lucene40PostingsBaseFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40PostingsBaseFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_postingsReaderBase_927fb3f2] = env->getMethodID(cls, "postingsReaderBase", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PostingsReaderBase;");
              mids$[mid_postingsWriterBase_c1fe85c2] = env->getMethodID(cls, "postingsWriterBase", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PostingsWriterBase;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40PostingsBaseFormat::Lucene40PostingsBaseFormat() : ::org::apache::lucene::codecs::PostingsBaseFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::PostingsReaderBase Lucene40PostingsBaseFormat::postingsReaderBase(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsReaderBase(env->callObjectMethod(this$, mids$[mid_postingsReaderBase_927fb3f2], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsWriterBase Lucene40PostingsBaseFormat::postingsWriterBase(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsWriterBase(env->callObjectMethod(this$, mids$[mid_postingsWriterBase_c1fe85c2], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40PostingsBaseFormat_init_(t_Lucene40PostingsBaseFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40PostingsBaseFormat_postingsReaderBase(t_Lucene40PostingsBaseFormat *self, PyObject *args);
          static PyObject *t_Lucene40PostingsBaseFormat_postingsWriterBase(t_Lucene40PostingsBaseFormat *self, PyObject *args);

          static PyMethodDef t_Lucene40PostingsBaseFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, postingsReaderBase, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40PostingsBaseFormat, postingsWriterBase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40PostingsBaseFormat, t_Lucene40PostingsBaseFormat, ::org::apache::lucene::codecs::PostingsBaseFormat, Lucene40PostingsBaseFormat, t_Lucene40PostingsBaseFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene40PostingsBaseFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40PostingsBaseFormat), module, "Lucene40PostingsBaseFormat", 0);
          }

          void t_Lucene40PostingsBaseFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsBaseFormat).tp_dict, "class_", make_descriptor(Lucene40PostingsBaseFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsBaseFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40PostingsBaseFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40PostingsBaseFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40PostingsBaseFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40PostingsBaseFormat::wrap_Object(Lucene40PostingsBaseFormat(((t_Lucene40PostingsBaseFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40PostingsBaseFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40PostingsBaseFormat_init_(t_Lucene40PostingsBaseFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40PostingsBaseFormat object((jobject) NULL);

            INT_CALL(object = Lucene40PostingsBaseFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40PostingsBaseFormat_postingsReaderBase(t_Lucene40PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsReaderBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsReaderBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsBaseFormat), (PyObject *) self, "postingsReaderBase", args, 2);
          }

          static PyObject *t_Lucene40PostingsBaseFormat_postingsWriterBase(t_Lucene40PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsWriterBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsWriterBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40PostingsBaseFormat), (PyObject *) self, "postingsWriterBase", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortField.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/search/FieldComparatorSource.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortField::class$ = NULL;
        jmethodID *SortField::mids$ = NULL;
        jfieldID *SortField::fids$ = NULL;
        bool SortField::live$ = false;
        SortField *SortField::FIELD_DOC = NULL;
        SortField *SortField::FIELD_SCORE = NULL;
        ::java::lang::Object *SortField::STRING_FIRST = NULL;
        ::java::lang::Object *SortField::STRING_LAST = NULL;

        jclass SortField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a9ca3e5c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldComparatorSource;)V");
            mids$[mid_init$_b65c884e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;)V");
            mids$[mid_init$_37ee6f9c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;)V");
            mids$[mid_init$_3e864231] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldComparatorSource;Z)V");
            mids$[mid_init$_082cc791] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Z)V");
            mids$[mid_init$_28dc1d67] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;Z)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getBytesComparator_5a7ff2fc] = env->getMethodID(cls, "getBytesComparator", "()Ljava/util/Comparator;");
            mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getComparatorSource_3ca10de3] = env->getMethodID(cls, "getComparatorSource", "()Lorg/apache/lucene/search/FieldComparatorSource;");
            mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
            mids$[mid_getParser_6ee4ab67] = env->getMethodID(cls, "getParser", "()Lorg/apache/lucene/search/FieldCache$Parser;");
            mids$[mid_getReverse_54c6a16a] = env->getMethodID(cls, "getReverse", "()Z");
            mids$[mid_getType_e5057cd5] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/search/SortField$Type;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_needsScores_54c6a16a] = env->getMethodID(cls, "needsScores", "()Z");
            mids$[mid_rewrite_da4dd7ac] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/search/IndexSearcher;)Lorg/apache/lucene/search/SortField;");
            mids$[mid_setBytesComparator_6ffdd545] = env->getMethodID(cls, "setBytesComparator", "(Ljava/util/Comparator;)V");
            mids$[mid_setMissingValue_290588ee] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_missingValue] = env->getFieldID(cls, "missingValue", "Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            FIELD_DOC = new SortField(env->getStaticObjectField(cls, "FIELD_DOC", "Lorg/apache/lucene/search/SortField;"));
            FIELD_SCORE = new SortField(env->getStaticObjectField(cls, "FIELD_SCORE", "Lorg/apache/lucene/search/SortField;"));
            STRING_FIRST = new ::java::lang::Object(env->getStaticObjectField(cls, "STRING_FIRST", "Ljava/lang/Object;"));
            STRING_LAST = new ::java::lang::Object(env->getStaticObjectField(cls, "STRING_LAST", "Ljava/lang/Object;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldComparatorSource & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a9ca3e5c, a0.this$, a1.this$)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b65c884e, a0.this$, a1.this$)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$Parser & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_37ee6f9c, a0.this$, a1.this$)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldComparatorSource & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e864231, a0.this$, a1.this$, a2)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::FieldCache$Parser & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_082cc791, a0.this$, a1.this$, a2)) {}

        SortField::SortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_28dc1d67, a0.this$, a1.this$, a2)) {}

        jboolean SortField::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Comparator SortField::getBytesComparator() const
        {
          return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getBytesComparator_5a7ff2fc]));
        }

        ::org::apache::lucene::search::FieldComparator SortField::getComparator(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
        }

        ::org::apache::lucene::search::FieldComparatorSource SortField::getComparatorSource() const
        {
          return ::org::apache::lucene::search::FieldComparatorSource(env->callObjectMethod(this$, mids$[mid_getComparatorSource_3ca10de3]));
        }

        ::java::lang::String SortField::getField() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
        }

        ::org::apache::lucene::search::FieldCache$Parser SortField::getParser() const
        {
          return ::org::apache::lucene::search::FieldCache$Parser(env->callObjectMethod(this$, mids$[mid_getParser_6ee4ab67]));
        }

        jboolean SortField::getReverse() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getReverse_54c6a16a]);
        }

        ::org::apache::lucene::search::SortField$Type SortField::getType() const
        {
          return ::org::apache::lucene::search::SortField$Type(env->callObjectMethod(this$, mids$[mid_getType_e5057cd5]));
        }

        jint SortField::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean SortField::needsScores() const
        {
          return env->callBooleanMethod(this$, mids$[mid_needsScores_54c6a16a]);
        }

        SortField SortField::rewrite(const ::org::apache::lucene::search::IndexSearcher & a0) const
        {
          return SortField(env->callObjectMethod(this$, mids$[mid_rewrite_da4dd7ac], a0.this$));
        }

        void SortField::setBytesComparator(const ::java::util::Comparator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBytesComparator_6ffdd545], a0.this$);
        }

        void SortField::setMissingValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMissingValue_290588ee], a0.this$);
        }

        ::java::lang::String SortField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::Object SortField::_get_missingValue() const
        {
          return ::java::lang::Object(env->getObjectField(this$, fids$[fid_missingValue]));
        }

        void SortField::_set_missingValue(const ::java::lang::Object & a0) const
        {
          env->setObjectField(this$, fids$[fid_missingValue], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortField_init_(t_SortField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortField_equals(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_getBytesComparator(t_SortField *self);
        static PyObject *t_SortField_getComparator(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_getComparatorSource(t_SortField *self);
        static PyObject *t_SortField_getField(t_SortField *self);
        static PyObject *t_SortField_getParser(t_SortField *self);
        static PyObject *t_SortField_getReverse(t_SortField *self);
        static PyObject *t_SortField_getType(t_SortField *self);
        static PyObject *t_SortField_hashCode(t_SortField *self, PyObject *args);
        static PyObject *t_SortField_needsScores(t_SortField *self);
        static PyObject *t_SortField_rewrite(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_setBytesComparator(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_setMissingValue(t_SortField *self, PyObject *arg);
        static PyObject *t_SortField_toString(t_SortField *self, PyObject *args);

        static PyObject *t_SortField_get__bytesComparator(t_SortField *self, void *data);
        static int t_SortField_set__bytesComparator(t_SortField *self, PyObject *arg, void *data);
        static PyObject *t_SortField_get__comparatorSource(t_SortField *self, void *data);
        static PyObject *t_SortField_get__field(t_SortField *self, void *data);
        static int t_SortField_set__missingValue(t_SortField *self, PyObject *arg, void *data);
        static PyObject *t_SortField_get__parser(t_SortField *self, void *data);
        static PyObject *t_SortField_get__reverse(t_SortField *self, void *data);
        static PyObject *t_SortField_get__type(t_SortField *self, void *data);
        static PyGetSetDef t_SortField__fields_[] = {
          DECLARE_GETSET_FIELD(t_SortField, bytesComparator),
          DECLARE_GET_FIELD(t_SortField, comparatorSource),
          DECLARE_GET_FIELD(t_SortField, field),
          DECLARE_SET_FIELD(t_SortField, missingValue),
          DECLARE_GET_FIELD(t_SortField, parser),
          DECLARE_GET_FIELD(t_SortField, reverse),
          DECLARE_GET_FIELD(t_SortField, type),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortField__methods_[] = {
          DECLARE_METHOD(t_SortField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortField, equals, METH_VARARGS),
          DECLARE_METHOD(t_SortField, getBytesComparator, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_SortField, getComparatorSource, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getField, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getParser, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getReverse, METH_NOARGS),
          DECLARE_METHOD(t_SortField, getType, METH_NOARGS),
          DECLARE_METHOD(t_SortField, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SortField, needsScores, METH_NOARGS),
          DECLARE_METHOD(t_SortField, rewrite, METH_O),
          DECLARE_METHOD(t_SortField, setBytesComparator, METH_O),
          DECLARE_METHOD(t_SortField, setMissingValue, METH_O),
          DECLARE_METHOD(t_SortField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortField, t_SortField, ::java::lang::Object, SortField, t_SortField_init_, 0, 0, t_SortField__fields_, 0, 0);

        void t_SortField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortField), module, "SortField", 0);
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "Type", make_descriptor(&PY_TYPE(SortField$Type)));
        }

        void t_SortField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "class_", make_descriptor(SortField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "wrapfn_", make_descriptor(t_SortField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SortField::initializeClass);
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "FIELD_DOC", make_descriptor(t_SortField::wrap_Object(*SortField::FIELD_DOC)));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "FIELD_SCORE", make_descriptor(t_SortField::wrap_Object(*SortField::FIELD_SCORE)));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "STRING_FIRST", make_descriptor(::java::lang::t_Object::wrap_Object(*SortField::STRING_FIRST)));
          PyDict_SetItemString(PY_TYPE(SortField).tp_dict, "STRING_LAST", make_descriptor(::java::lang::t_Object::wrap_Object(*SortField::STRING_LAST)));
        }

        static PyObject *t_SortField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortField::initializeClass, 1)))
            return NULL;
          return t_SortField::wrap_Object(SortField(((t_SortField *) arg)->object.this$));
        }
        static PyObject *t_SortField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortField_init_(t_SortField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldComparatorSource a1((jobject) NULL);
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldComparatorSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SortField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_))
              {
                INT_CALL(object = SortField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$Parser a1((jobject) NULL);
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SortField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldComparatorSource a1((jobject) NULL);
              jboolean a2;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::search::FieldComparatorSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$Parser a1((jobject) NULL);
              jboolean a2;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "skZ", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = SortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              SortField object((jobject) NULL);

              if (!parseArgs(args, "sKZ", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2))
              {
                INT_CALL(object = SortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortField_equals(t_SortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SortField), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SortField_getBytesComparator(t_SortField *self)
        {
          ::java::util::Comparator result((jobject) NULL);
          OBJ_CALL(result = self->object.getBytesComparator());
          return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
        }

        static PyObject *t_SortField_getComparator(t_SortField *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getComparator(a0, a1));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getComparator", args);
          return NULL;
        }

        static PyObject *t_SortField_getComparatorSource(t_SortField *self)
        {
          ::org::apache::lucene::search::FieldComparatorSource result((jobject) NULL);
          OBJ_CALL(result = self->object.getComparatorSource());
          return ::org::apache::lucene::search::t_FieldComparatorSource::wrap_Object(result);
        }

        static PyObject *t_SortField_getField(t_SortField *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getField());
          return j2p(result);
        }

        static PyObject *t_SortField_getParser(t_SortField *self)
        {
          ::org::apache::lucene::search::FieldCache$Parser result((jobject) NULL);
          OBJ_CALL(result = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(result);
        }

        static PyObject *t_SortField_getReverse(t_SortField *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getReverse());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SortField_getType(t_SortField *self)
        {
          ::org::apache::lucene::search::SortField$Type result((jobject) NULL);
          OBJ_CALL(result = self->object.getType());
          return ::org::apache::lucene::search::t_SortField$Type::wrap_Object(result);
        }

        static PyObject *t_SortField_hashCode(t_SortField *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SortField), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SortField_needsScores(t_SortField *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.needsScores());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SortField_rewrite(t_SortField *self, PyObject *arg)
        {
          ::org::apache::lucene::search::IndexSearcher a0((jobject) NULL);
          SortField result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return t_SortField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "rewrite", arg);
          return NULL;
        }

        static PyObject *t_SortField_setBytesComparator(t_SortField *self, PyObject *arg)
        {
          ::java::util::Comparator a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
          {
            OBJ_CALL(self->object.setBytesComparator(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setBytesComparator", arg);
          return NULL;
        }

        static PyObject *t_SortField_setMissingValue(t_SortField *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.setMissingValue(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setMissingValue", arg);
          return NULL;
        }

        static PyObject *t_SortField_toString(t_SortField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SortField), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SortField_get__bytesComparator(t_SortField *self, void *data)
        {
          ::java::util::Comparator value((jobject) NULL);
          OBJ_CALL(value = self->object.getBytesComparator());
          return ::java::util::t_Comparator::wrap_Object(value);
        }
        static int t_SortField_set__bytesComparator(t_SortField *self, PyObject *arg, void *data)
        {
          {
            ::java::util::Comparator value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::util::Comparator::initializeClass, &value))
            {
              INT_CALL(self->object.setBytesComparator(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bytesComparator", arg);
          return -1;
        }

        static PyObject *t_SortField_get__comparatorSource(t_SortField *self, void *data)
        {
          ::org::apache::lucene::search::FieldComparatorSource value((jobject) NULL);
          OBJ_CALL(value = self->object.getComparatorSource());
          return ::org::apache::lucene::search::t_FieldComparatorSource::wrap_Object(value);
        }

        static PyObject *t_SortField_get__field(t_SortField *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getField());
          return j2p(value);
        }

        static int t_SortField_set__missingValue(t_SortField *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setMissingValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
          return -1;
        }

        static PyObject *t_SortField_get__parser(t_SortField *self, void *data)
        {
          ::org::apache::lucene::search::FieldCache$Parser value((jobject) NULL);
          OBJ_CALL(value = self->object.getParser());
          return ::org::apache::lucene::search::t_FieldCache$Parser::wrap_Object(value);
        }

        static PyObject *t_SortField_get__reverse(t_SortField *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getReverse());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_SortField_get__type(t_SortField *self, void *data)
        {
          ::org::apache::lucene::search::SortField$Type value((jobject) NULL);
          OBJ_CALL(value = self->object.getType());
          return ::org::apache::lucene::search::t_SortField$Type::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/RecyclingIntBlockAllocator.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *RecyclingIntBlockAllocator::class$ = NULL;
        jmethodID *RecyclingIntBlockAllocator::mids$ = NULL;
        bool RecyclingIntBlockAllocator::live$ = false;
        jint RecyclingIntBlockAllocator::DEFAULT_BUFFERED_BLOCKS = (jint) 0;

        jclass RecyclingIntBlockAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/RecyclingIntBlockAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
            mids$[mid_init$_bdd89aab] = env->getMethodID(cls, "<init>", "(IILorg/apache/lucene/util/Counter;)V");
            mids$[mid_bytesUsed_54c6a17a] = env->getMethodID(cls, "bytesUsed", "()J");
            mids$[mid_freeBlocks_39c7bd23] = env->getMethodID(cls, "freeBlocks", "(I)I");
            mids$[mid_getIntBlock_dab10e75] = env->getMethodID(cls, "getIntBlock", "()[I");
            mids$[mid_maxBufferedBlocks_54c6a179] = env->getMethodID(cls, "maxBufferedBlocks", "()I");
            mids$[mid_numBufferedBlocks_54c6a179] = env->getMethodID(cls, "numBufferedBlocks", "()I");
            mids$[mid_recycleIntBlocks_9f62f13c] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_BUFFERED_BLOCKS = env->getStaticIntField(cls, "DEFAULT_BUFFERED_BLOCKS");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator() : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator(jint a0, jint a1) : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        RecyclingIntBlockAllocator::RecyclingIntBlockAllocator(jint a0, jint a1, const ::org::apache::lucene::util::Counter & a2) : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_bdd89aab, a0, a1, a2.this$)) {}

        jlong RecyclingIntBlockAllocator::bytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_bytesUsed_54c6a17a]);
        }

        jint RecyclingIntBlockAllocator::freeBlocks(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_freeBlocks_39c7bd23], a0);
        }

        JArray< jint > RecyclingIntBlockAllocator::getIntBlock() const
        {
          return JArray< jint >(env->callObjectMethod(this$, mids$[mid_getIntBlock_dab10e75]));
        }

        jint RecyclingIntBlockAllocator::maxBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_maxBufferedBlocks_54c6a179]);
        }

        jint RecyclingIntBlockAllocator::numBufferedBlocks() const
        {
          return env->callIntMethod(this$, mids$[mid_numBufferedBlocks_54c6a179]);
        }

        void RecyclingIntBlockAllocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_9f62f13c], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_RecyclingIntBlockAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RecyclingIntBlockAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RecyclingIntBlockAllocator_init_(t_RecyclingIntBlockAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RecyclingIntBlockAllocator_bytesUsed(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_freeBlocks(t_RecyclingIntBlockAllocator *self, PyObject *arg);
        static PyObject *t_RecyclingIntBlockAllocator_getIntBlock(t_RecyclingIntBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingIntBlockAllocator_maxBufferedBlocks(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_numBufferedBlocks(t_RecyclingIntBlockAllocator *self);
        static PyObject *t_RecyclingIntBlockAllocator_recycleIntBlocks(t_RecyclingIntBlockAllocator *self, PyObject *args);
        static PyObject *t_RecyclingIntBlockAllocator_get__intBlock(t_RecyclingIntBlockAllocator *self, void *data);
        static PyGetSetDef t_RecyclingIntBlockAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_RecyclingIntBlockAllocator, intBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RecyclingIntBlockAllocator__methods_[] = {
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, bytesUsed, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, freeBlocks, METH_O),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, getIntBlock, METH_VARARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, maxBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, numBufferedBlocks, METH_NOARGS),
          DECLARE_METHOD(t_RecyclingIntBlockAllocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RecyclingIntBlockAllocator, t_RecyclingIntBlockAllocator, ::org::apache::lucene::util::IntBlockPool$Allocator, RecyclingIntBlockAllocator, t_RecyclingIntBlockAllocator_init_, 0, 0, t_RecyclingIntBlockAllocator__fields_, 0, 0);

        void t_RecyclingIntBlockAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(RecyclingIntBlockAllocator), module, "RecyclingIntBlockAllocator", 0);
        }

        void t_RecyclingIntBlockAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "class_", make_descriptor(RecyclingIntBlockAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "wrapfn_", make_descriptor(t_RecyclingIntBlockAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(RecyclingIntBlockAllocator::initializeClass);
          PyDict_SetItemString(PY_TYPE(RecyclingIntBlockAllocator).tp_dict, "DEFAULT_BUFFERED_BLOCKS", make_descriptor(RecyclingIntBlockAllocator::DEFAULT_BUFFERED_BLOCKS));
        }

        static PyObject *t_RecyclingIntBlockAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RecyclingIntBlockAllocator::initializeClass, 1)))
            return NULL;
          return t_RecyclingIntBlockAllocator::wrap_Object(RecyclingIntBlockAllocator(((t_RecyclingIntBlockAllocator *) arg)->object.this$));
        }
        static PyObject *t_RecyclingIntBlockAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RecyclingIntBlockAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RecyclingIntBlockAllocator_init_(t_RecyclingIntBlockAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              RecyclingIntBlockAllocator object((jobject) NULL);

              INT_CALL(object = RecyclingIntBlockAllocator());
              self->object = object;
              break;
            }
            goto err;
           case 2:
            {
              jint a0;
              jint a1;
              RecyclingIntBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                INT_CALL(object = RecyclingIntBlockAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::util::Counter a2((jobject) NULL);
              RecyclingIntBlockAllocator object((jobject) NULL);

              if (!parseArgs(args, "IIk", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = RecyclingIntBlockAllocator(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RecyclingIntBlockAllocator_bytesUsed(t_RecyclingIntBlockAllocator *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.bytesUsed());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_freeBlocks(t_RecyclingIntBlockAllocator *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.freeBlocks(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "freeBlocks", arg);
          return NULL;
        }

        static PyObject *t_RecyclingIntBlockAllocator_getIntBlock(t_RecyclingIntBlockAllocator *self, PyObject *args)
        {
          JArray< jint > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getIntBlock());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(RecyclingIntBlockAllocator), (PyObject *) self, "getIntBlock", args, 2);
        }

        static PyObject *t_RecyclingIntBlockAllocator_maxBufferedBlocks(t_RecyclingIntBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_numBufferedBlocks(t_RecyclingIntBlockAllocator *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numBufferedBlocks());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RecyclingIntBlockAllocator_recycleIntBlocks(t_RecyclingIntBlockAllocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RecyclingIntBlockAllocator), (PyObject *) self, "recycleIntBlocks", args, 2);
        }

        static PyObject *t_RecyclingIntBlockAllocator_get__intBlock(t_RecyclingIntBlockAllocator *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object.getIntBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OpenBitSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/Cloneable.h"
#include "org/apache/lucene/util/Bits.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OpenBitSet::class$ = NULL;
        jmethodID *OpenBitSet::mids$ = NULL;
        bool OpenBitSet::live$ = false;

        jclass OpenBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OpenBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_0ee6df2f] = env->getMethodID(cls, "<init>", "(J)V");
            mids$[mid_init$_ce93dbcb] = env->getMethodID(cls, "<init>", "([JI)V");
            mids$[mid_and_c2540e4f] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_andNot_c2540e4f] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_andNotCount_52061930] = env->getStaticMethodID(cls, "andNotCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_bits2words_0ee6df30] = env->getStaticMethodID(cls, "bits2words", "(J)I");
            mids$[mid_capacity_54c6a17a] = env->getMethodID(cls, "capacity", "()J");
            mids$[mid_cardinality_54c6a17a] = env->getMethodID(cls, "cardinality", "()J");
            mids$[mid_clear_0ee6df2f] = env->getMethodID(cls, "clear", "(J)V");
            mids$[mid_clear_a7e12ca4] = env->getMethodID(cls, "clear", "(JJ)V");
            mids$[mid_clear_d8d154a6] = env->getMethodID(cls, "clear", "(II)V");
            mids$[mid_clone_23f9e142] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/OpenBitSet;");
            mids$[mid_ensureCapacity_0ee6df2f] = env->getMethodID(cls, "ensureCapacity", "(J)V");
            mids$[mid_ensureCapacityWords_39c7bd3c] = env->getMethodID(cls, "ensureCapacityWords", "(I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_fastClear_39c7bd3c] = env->getMethodID(cls, "fastClear", "(I)V");
            mids$[mid_fastClear_0ee6df2f] = env->getMethodID(cls, "fastClear", "(J)V");
            mids$[mid_fastFlip_0ee6df2f] = env->getMethodID(cls, "fastFlip", "(J)V");
            mids$[mid_fastFlip_39c7bd3c] = env->getMethodID(cls, "fastFlip", "(I)V");
            mids$[mid_fastGet_39c7bd30] = env->getMethodID(cls, "fastGet", "(I)Z");
            mids$[mid_fastGet_0ee6df23] = env->getMethodID(cls, "fastGet", "(J)Z");
            mids$[mid_fastSet_39c7bd3c] = env->getMethodID(cls, "fastSet", "(I)V");
            mids$[mid_fastSet_0ee6df2f] = env->getMethodID(cls, "fastSet", "(J)V");
            mids$[mid_flip_0ee6df2f] = env->getMethodID(cls, "flip", "(J)V");
            mids$[mid_flip_a7e12ca4] = env->getMethodID(cls, "flip", "(JJ)V");
            mids$[mid_flipAndGet_0ee6df23] = env->getMethodID(cls, "flipAndGet", "(J)Z");
            mids$[mid_flipAndGet_39c7bd30] = env->getMethodID(cls, "flipAndGet", "(I)Z");
            mids$[mid_get_0ee6df23] = env->getMethodID(cls, "get", "(J)Z");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_getAndSet_0ee6df23] = env->getMethodID(cls, "getAndSet", "(J)Z");
            mids$[mid_getAndSet_39c7bd30] = env->getMethodID(cls, "getAndSet", "(I)Z");
            mids$[mid_getBit_39c7bd23] = env->getMethodID(cls, "getBit", "(I)I");
            mids$[mid_getBits_dab10e76] = env->getMethodID(cls, "getBits", "()[J");
            mids$[mid_getNumWords_54c6a179] = env->getMethodID(cls, "getNumWords", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intersect_c2540e4f] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_intersectionCount_52061930] = env->getStaticMethodID(cls, "intersectionCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_intersects_c2540e43] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/util/OpenBitSet;)Z");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_nextSetBit_39c7bd23] = env->getMethodID(cls, "nextSetBit", "(I)I");
            mids$[mid_nextSetBit_0ee6df33] = env->getMethodID(cls, "nextSetBit", "(J)J");
            mids$[mid_or_c2540e4f] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_prevSetBit_0ee6df33] = env->getMethodID(cls, "prevSetBit", "(J)J");
            mids$[mid_prevSetBit_39c7bd23] = env->getMethodID(cls, "prevSetBit", "(I)I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_remove_c2540e4f] = env->getMethodID(cls, "remove", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_set_0ee6df2f] = env->getMethodID(cls, "set", "(J)V");
            mids$[mid_set_a7e12ca4] = env->getMethodID(cls, "set", "(JJ)V");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");
            mids$[mid_trimTrailingZeros_54c6a166] = env->getMethodID(cls, "trimTrailingZeros", "()V");
            mids$[mid_union_c2540e4f] = env->getMethodID(cls, "union", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_unionCount_52061930] = env->getStaticMethodID(cls, "unionCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_xor_c2540e4f] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_xorCount_52061930] = env->getStaticMethodID(cls, "xorCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_expandingWordNum_0ee6df30] = env->getMethodID(cls, "expandingWordNum", "(J)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OpenBitSet::OpenBitSet() : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        OpenBitSet::OpenBitSet(jlong a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_0ee6df2f, a0)) {}

        OpenBitSet::OpenBitSet(const JArray< jlong > & a0, jint a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_ce93dbcb, a0.this$, a1)) {}

        void OpenBitSet::and$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_c2540e4f], a0.this$);
        }

        void OpenBitSet::andNot(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::andNotCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_andNotCount_52061930], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::Bits OpenBitSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jint OpenBitSet::bits2words(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bits2words_0ee6df30], a0);
        }

        jlong OpenBitSet::capacity() const
        {
          return env->callLongMethod(this$, mids$[mid_capacity_54c6a17a]);
        }

        jlong OpenBitSet::cardinality() const
        {
          return env->callLongMethod(this$, mids$[mid_cardinality_54c6a17a]);
        }

        void OpenBitSet::clear(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_0ee6df2f], a0);
        }

        void OpenBitSet::clear(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_a7e12ca4], a0, a1);
        }

        void OpenBitSet::clear(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_d8d154a6], a0, a1);
        }

        OpenBitSet OpenBitSet::clone() const
        {
          return OpenBitSet(env->callObjectMethod(this$, mids$[mid_clone_23f9e142]));
        }

        void OpenBitSet::ensureCapacity(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_ensureCapacity_0ee6df2f], a0);
        }

        void OpenBitSet::ensureCapacityWords(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_ensureCapacityWords_39c7bd3c], a0);
        }

        jboolean OpenBitSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void OpenBitSet::fastClear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastClear_39c7bd3c], a0);
        }

        void OpenBitSet::fastClear(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastClear_0ee6df2f], a0);
        }

        void OpenBitSet::fastFlip(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastFlip_0ee6df2f], a0);
        }

        void OpenBitSet::fastFlip(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastFlip_39c7bd3c], a0);
        }

        jboolean OpenBitSet::fastGet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fastGet_39c7bd30], a0);
        }

        jboolean OpenBitSet::fastGet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fastGet_0ee6df23], a0);
        }

        void OpenBitSet::fastSet(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastSet_39c7bd3c], a0);
        }

        void OpenBitSet::fastSet(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastSet_0ee6df2f], a0);
        }

        void OpenBitSet::flip(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_0ee6df2f], a0);
        }

        void OpenBitSet::flip(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_a7e12ca4], a0, a1);
        }

        jboolean OpenBitSet::flipAndGet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_flipAndGet_0ee6df23], a0);
        }

        jboolean OpenBitSet::flipAndGet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_flipAndGet_39c7bd30], a0);
        }

        jboolean OpenBitSet::get(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_0ee6df23], a0);
        }

        jboolean OpenBitSet::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jboolean OpenBitSet::getAndSet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_0ee6df23], a0);
        }

        jboolean OpenBitSet::getAndSet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_39c7bd30], a0);
        }

        jint OpenBitSet::getBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getBit_39c7bd23], a0);
        }

        JArray< jlong > OpenBitSet::getBits() const
        {
          return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getBits_dab10e76]));
        }

        jint OpenBitSet::getNumWords() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumWords_54c6a179]);
        }

        jint OpenBitSet::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void OpenBitSet::intersect(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_intersect_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::intersectionCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_intersectionCount_52061930], a0.this$, a1.this$);
        }

        jboolean OpenBitSet::intersects(const OpenBitSet & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersects_c2540e43], a0.this$);
        }

        jboolean OpenBitSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        jboolean OpenBitSet::isEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator OpenBitSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jint OpenBitSet::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jint OpenBitSet::nextSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_nextSetBit_39c7bd23], a0);
        }

        jlong OpenBitSet::nextSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_nextSetBit_0ee6df33], a0);
        }

        void OpenBitSet::or$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::prevSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_prevSetBit_0ee6df33], a0);
        }

        jint OpenBitSet::prevSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_prevSetBit_39c7bd23], a0);
        }

        jlong OpenBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void OpenBitSet::remove(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_remove_c2540e4f], a0.this$);
        }

        void OpenBitSet::set(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_0ee6df2f], a0);
        }

        void OpenBitSet::set(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_set_a7e12ca4], a0, a1);
        }

        jlong OpenBitSet::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }

        void OpenBitSet::trimTrailingZeros() const
        {
          env->callVoidMethod(this$, mids$[mid_trimTrailingZeros_54c6a166]);
        }

        void OpenBitSet::union$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_union_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::unionCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_unionCount_52061930], a0.this$, a1.this$);
        }

        void OpenBitSet::xor$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::xorCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_xorCount_52061930], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OpenBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OpenBitSet_init_(t_OpenBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OpenBitSet_and(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_andNot(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_andNotCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_bits(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_bits2words(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSet_capacity(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_cardinality(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_clear(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_clone(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_ensureCapacity(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_ensureCapacityWords(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_equals(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastClear(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastFlip(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastGet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastSet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_flip(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_flipAndGet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_get(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_getAndSet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_getBit(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_getBits(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_getNumWords(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_hashCode(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_intersect(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_intersectionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_intersects(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_isCacheable(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_isEmpty(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_iterator(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_length(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_nextSetBit(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_or(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_prevSetBit(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_ramBytesUsed(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_remove(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_set(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_size(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_trimTrailingZeros(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_union(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_unionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_xor(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_xorCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_get__cacheable(t_OpenBitSet *self, void *data);
        static PyObject *t_OpenBitSet_get__empty(t_OpenBitSet *self, void *data);
        static PyObject *t_OpenBitSet_get__numWords(t_OpenBitSet *self, void *data);
        static PyGetSetDef t_OpenBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_OpenBitSet, cacheable),
          DECLARE_GET_FIELD(t_OpenBitSet, empty),
          DECLARE_GET_FIELD(t_OpenBitSet, numWords),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OpenBitSet__methods_[] = {
          DECLARE_METHOD(t_OpenBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, and, METH_O),
          DECLARE_METHOD(t_OpenBitSet, andNot, METH_O),
          DECLARE_METHOD(t_OpenBitSet, andNotCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, bits2words, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, capacity, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, clone, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, ensureCapacity, METH_O),
          DECLARE_METHOD(t_OpenBitSet, ensureCapacityWords, METH_O),
          DECLARE_METHOD(t_OpenBitSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastClear, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastFlip, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastGet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastSet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, flip, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, flipAndGet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, get, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, getAndSet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, getBit, METH_O),
          DECLARE_METHOD(t_OpenBitSet, getBits, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, getNumWords, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, intersect, METH_O),
          DECLARE_METHOD(t_OpenBitSet, intersectionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, intersects, METH_O),
          DECLARE_METHOD(t_OpenBitSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, isEmpty, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, nextSetBit, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, or, METH_O),
          DECLARE_METHOD(t_OpenBitSet, prevSetBit, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, remove, METH_O),
          DECLARE_METHOD(t_OpenBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, size, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, trimTrailingZeros, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, union, METH_O),
          DECLARE_METHOD(t_OpenBitSet, unionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, xor, METH_O),
          DECLARE_METHOD(t_OpenBitSet, xorCount, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OpenBitSet, t_OpenBitSet, ::org::apache::lucene::search::DocIdSet, OpenBitSet, t_OpenBitSet_init_, 0, 0, t_OpenBitSet__fields_, 0, 0);

        void t_OpenBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(OpenBitSet), module, "OpenBitSet", 0);
        }

        void t_OpenBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OpenBitSet).tp_dict, "class_", make_descriptor(OpenBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OpenBitSet).tp_dict, "wrapfn_", make_descriptor(t_OpenBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OpenBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OpenBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OpenBitSet::initializeClass, 1)))
            return NULL;
          return t_OpenBitSet::wrap_Object(OpenBitSet(((t_OpenBitSet *) arg)->object.this$));
        }
        static PyObject *t_OpenBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OpenBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OpenBitSet_init_(t_OpenBitSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OpenBitSet object((jobject) NULL);

              INT_CALL(object = OpenBitSet());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jlong a0;
              OpenBitSet object((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                INT_CALL(object = OpenBitSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              OpenBitSet object((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                INT_CALL(object = OpenBitSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OpenBitSet_and(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.and$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "and", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_andNot(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.andNot(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "andNot", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_andNotCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::andNotCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "andNotCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_bits(t_OpenBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_OpenBitSet_bits2words(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::bits2words(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bits2words", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_capacity(t_OpenBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.capacity());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_OpenBitSet_cardinality(t_OpenBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cardinality());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_OpenBitSet_clear(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_clone(t_OpenBitSet *self)
        {
          OpenBitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_OpenBitSet::wrap_Object(result);
        }

        static PyObject *t_OpenBitSet_ensureCapacity(t_OpenBitSet *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.ensureCapacity(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "ensureCapacity", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_ensureCapacityWords(t_OpenBitSet *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.ensureCapacityWords(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "ensureCapacityWords", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_equals(t_OpenBitSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_OpenBitSet_fastClear(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.fastClear(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.fastClear(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastClear", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_fastFlip(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.fastFlip(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.fastFlip(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastFlip", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_fastGet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.fastGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.fastGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastGet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_fastSet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.fastSet(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.fastSet(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastSet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_flip(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.flip(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.flip(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "flip", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_flipAndGet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.flipAndGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.flipAndGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "flipAndGet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_get(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "get", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_getAndSet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.getAndSet(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getAndSet(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getAndSet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_getBit(t_OpenBitSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getBit(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBit", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_getBits(t_OpenBitSet *self)
        {
          JArray< jlong > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBits());
          return result.wrap();
        }

        static PyObject *t_OpenBitSet_getNumWords(t_OpenBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumWords());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_OpenBitSet_hashCode(t_OpenBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_OpenBitSet_intersect(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.intersect(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "intersect", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_intersectionCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::intersectionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "intersectionCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_intersects(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersects(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersects", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_isCacheable(t_OpenBitSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_OpenBitSet_isEmpty(t_OpenBitSet *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_OpenBitSet_iterator(t_OpenBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_OpenBitSet_length(t_OpenBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_OpenBitSet_nextSetBit(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.nextSetBit(a0));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.nextSetBit(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "nextSetBit", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_or(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.or$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "or", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_prevSetBit(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.prevSetBit(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.prevSetBit(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "prevSetBit", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_ramBytesUsed(t_OpenBitSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_OpenBitSet_remove(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.remove(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_set(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.set(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "set", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_size(t_OpenBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_OpenBitSet_trimTrailingZeros(t_OpenBitSet *self)
        {
          OBJ_CALL(self->object.trimTrailingZeros());
          Py_RETURN_NONE;
        }

        static PyObject *t_OpenBitSet_union(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.union$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "union", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_unionCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::unionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "unionCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_xor(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.xor$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "xor", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_xorCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::xorCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "xorCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_get__cacheable(t_OpenBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_OpenBitSet_get__empty(t_OpenBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isEmpty());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_OpenBitSet_get__numWords(t_OpenBitSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumWords());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/RandomAccessOrds.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *RandomAccessOrds::class$ = NULL;
        jmethodID *RandomAccessOrds::mids$ = NULL;
        bool RandomAccessOrds::live$ = false;

        jclass RandomAccessOrds::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/RandomAccessOrds");

            mids$ = new jmethodID[max_mid];
            mids$[mid_cardinality_54c6a179] = env->getMethodID(cls, "cardinality", "()I");
            mids$[mid_ordAt_39c7bd20] = env->getMethodID(cls, "ordAt", "(I)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint RandomAccessOrds::cardinality() const
        {
          return env->callIntMethod(this$, mids$[mid_cardinality_54c6a179]);
        }

        jlong RandomAccessOrds::ordAt(jint a0) const
        {
          return env->callLongMethod(this$, mids$[mid_ordAt_39c7bd20], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_RandomAccessOrds_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessOrds_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccessOrds_cardinality(t_RandomAccessOrds *self);
        static PyObject *t_RandomAccessOrds_ordAt(t_RandomAccessOrds *self, PyObject *arg);

        static PyMethodDef t_RandomAccessOrds__methods_[] = {
          DECLARE_METHOD(t_RandomAccessOrds, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessOrds, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RandomAccessOrds, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_RandomAccessOrds, ordAt, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RandomAccessOrds, t_RandomAccessOrds, ::org::apache::lucene::index::SortedSetDocValues, RandomAccessOrds, abstract_init, 0, 0, 0, 0, 0);

        void t_RandomAccessOrds::install(PyObject *module)
        {
          installType(&PY_TYPE(RandomAccessOrds), module, "RandomAccessOrds", 0);
        }

        void t_RandomAccessOrds::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RandomAccessOrds).tp_dict, "class_", make_descriptor(RandomAccessOrds::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RandomAccessOrds).tp_dict, "wrapfn_", make_descriptor(t_RandomAccessOrds::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RandomAccessOrds).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomAccessOrds_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RandomAccessOrds::initializeClass, 1)))
            return NULL;
          return t_RandomAccessOrds::wrap_Object(RandomAccessOrds(((t_RandomAccessOrds *) arg)->object.this$));
        }
        static PyObject *t_RandomAccessOrds_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RandomAccessOrds::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_RandomAccessOrds_cardinality(t_RandomAccessOrds *self)
        {
          jint result;
          OBJ_CALL(result = self->object.cardinality());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_RandomAccessOrds_ordAt(t_RandomAccessOrds *self, PyObject *arg)
        {
          jint a0;
          jlong result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.ordAt(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "ordAt", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/PorterStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *PorterStemmer::class$ = NULL;
        jmethodID *PorterStemmer::mids$ = NULL;
        bool PorterStemmer::live$ = false;

        jclass PorterStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/PorterStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PorterStemmer::PorterStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PorterStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint PorterStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean PorterStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_PorterStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PorterStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PorterStemmer_init_(t_PorterStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PorterStemmer_equals(t_PorterStemmer *self, PyObject *args);
        static PyObject *t_PorterStemmer_hashCode(t_PorterStemmer *self, PyObject *args);
        static PyObject *t_PorterStemmer_stem(t_PorterStemmer *self, PyObject *args);

        static PyMethodDef t_PorterStemmer__methods_[] = {
          DECLARE_METHOD(t_PorterStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PorterStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PorterStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_PorterStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_PorterStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PorterStemmer, t_PorterStemmer, ::org::tartarus::snowball::SnowballProgram, PorterStemmer, t_PorterStemmer_init_, 0, 0, 0, 0, 0);

        void t_PorterStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(PorterStemmer), module, "PorterStemmer", 0);
        }

        void t_PorterStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PorterStemmer).tp_dict, "class_", make_descriptor(PorterStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PorterStemmer).tp_dict, "wrapfn_", make_descriptor(t_PorterStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PorterStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PorterStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PorterStemmer::initializeClass, 1)))
            return NULL;
          return t_PorterStemmer::wrap_Object(PorterStemmer(((t_PorterStemmer *) arg)->object.this$));
        }
        static PyObject *t_PorterStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PorterStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PorterStemmer_init_(t_PorterStemmer *self, PyObject *args, PyObject *kwds)
        {
          PorterStemmer object((jobject) NULL);

          INT_CALL(object = PorterStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_PorterStemmer_equals(t_PorterStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PorterStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PorterStemmer_hashCode(t_PorterStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(PorterStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_PorterStemmer_stem(t_PorterStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PorterStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Highlighter.h"
#include "org/apache/lucene/search/highlight/InvalidTokenOffsetsException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Highlighter::class$ = NULL;
          jmethodID *Highlighter::mids$ = NULL;
          bool Highlighter::live$ = false;
          jint Highlighter::DEFAULT_MAX_CHARS_TO_ANALYZE = (jint) 0;

          jclass Highlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Highlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bd3ff73] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_init$_f1844869] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Formatter;Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_init$_154db1db] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Formatter;Lorg/apache/lucene/search/highlight/Encoder;Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_getBestFragment_36cba2a5] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragment_87f832fb] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragments_9d06cc93] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_getBestFragments_eafe1ad1] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragments_652768f5] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_getBestTextFragments_d795d3a4] = env->getMethodID(cls, "getBestTextFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;ZI)[Lorg/apache/lucene/search/highlight/TextFragment;");
              mids$[mid_getEncoder_e179b145] = env->getMethodID(cls, "getEncoder", "()Lorg/apache/lucene/search/highlight/Encoder;");
              mids$[mid_getFragmentScorer_0eb4d65e] = env->getMethodID(cls, "getFragmentScorer", "()Lorg/apache/lucene/search/highlight/Scorer;");
              mids$[mid_getMaxDocCharsToAnalyze_54c6a179] = env->getMethodID(cls, "getMaxDocCharsToAnalyze", "()I");
              mids$[mid_getTextFragmenter_c9a72455] = env->getMethodID(cls, "getTextFragmenter", "()Lorg/apache/lucene/search/highlight/Fragmenter;");
              mids$[mid_setEncoder_8b781108] = env->getMethodID(cls, "setEncoder", "(Lorg/apache/lucene/search/highlight/Encoder;)V");
              mids$[mid_setFragmentScorer_9bd3ff73] = env->getMethodID(cls, "setFragmentScorer", "(Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");
              mids$[mid_setTextFragmenter_d6ed4d20] = env->getMethodID(cls, "setTextFragmenter", "(Lorg/apache/lucene/search/highlight/Fragmenter;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_CHARS_TO_ANALYZE = env->getStaticIntField(cls, "DEFAULT_MAX_CHARS_TO_ANALYZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Scorer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9bd3ff73, a0.this$)) {}

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Formatter & a0, const ::org::apache::lucene::search::highlight::Scorer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f1844869, a0.this$, a1.this$)) {}

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Formatter & a0, const ::org::apache::lucene::search::highlight::Encoder & a1, const ::org::apache::lucene::search::highlight::Scorer & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_154db1db, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String Highlighter::getBestFragment(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_36cba2a5], a0.this$, a1.this$));
          }

          ::java::lang::String Highlighter::getBestFragment(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_87f832fb], a0.this$, a1.this$, a2.this$));
          }

          JArray< ::java::lang::String > Highlighter::getBestFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jint a2) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_9d06cc93], a0.this$, a1.this$, a2));
          }

          ::java::lang::String Highlighter::getBestFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jint a2, const ::java::lang::String & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragments_eafe1ad1], a0.this$, a1.this$, a2, a3.this$));
          }

          JArray< ::java::lang::String > Highlighter::getBestFragments(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_652768f5], a0.this$, a1.this$, a2.this$, a3));
          }

          JArray< ::org::apache::lucene::search::highlight::TextFragment > Highlighter::getBestTextFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jboolean a2, jint a3) const
          {
            return JArray< ::org::apache::lucene::search::highlight::TextFragment >(env->callObjectMethod(this$, mids$[mid_getBestTextFragments_d795d3a4], a0.this$, a1.this$, a2, a3));
          }

          ::org::apache::lucene::search::highlight::Encoder Highlighter::getEncoder() const
          {
            return ::org::apache::lucene::search::highlight::Encoder(env->callObjectMethod(this$, mids$[mid_getEncoder_e179b145]));
          }

          ::org::apache::lucene::search::highlight::Scorer Highlighter::getFragmentScorer() const
          {
            return ::org::apache::lucene::search::highlight::Scorer(env->callObjectMethod(this$, mids$[mid_getFragmentScorer_0eb4d65e]));
          }

          jint Highlighter::getMaxDocCharsToAnalyze() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxDocCharsToAnalyze_54c6a179]);
          }

          ::org::apache::lucene::search::highlight::Fragmenter Highlighter::getTextFragmenter() const
          {
            return ::org::apache::lucene::search::highlight::Fragmenter(env->callObjectMethod(this$, mids$[mid_getTextFragmenter_c9a72455]));
          }

          void Highlighter::setEncoder(const ::org::apache::lucene::search::highlight::Encoder & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEncoder_8b781108], a0.this$);
          }

          void Highlighter::setFragmentScorer(const ::org::apache::lucene::search::highlight::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFragmentScorer_9bd3ff73], a0.this$);
          }

          void Highlighter::setMaxDocCharsToAnalyze(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c], a0);
          }

          void Highlighter::setTextFragmenter(const ::org::apache::lucene::search::highlight::Fragmenter & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTextFragmenter_d6ed4d20], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Highlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Highlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Highlighter_init_(t_Highlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Highlighter_getBestFragment(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getBestFragments(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getBestTextFragments(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getEncoder(t_Highlighter *self);
          static PyObject *t_Highlighter_getFragmentScorer(t_Highlighter *self);
          static PyObject *t_Highlighter_getMaxDocCharsToAnalyze(t_Highlighter *self);
          static PyObject *t_Highlighter_getTextFragmenter(t_Highlighter *self);
          static PyObject *t_Highlighter_setEncoder(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setFragmentScorer(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setMaxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setTextFragmenter(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_get__encoder(t_Highlighter *self, void *data);
          static int t_Highlighter_set__encoder(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__fragmentScorer(t_Highlighter *self, void *data);
          static int t_Highlighter_set__fragmentScorer(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__maxDocCharsToAnalyze(t_Highlighter *self, void *data);
          static int t_Highlighter_set__maxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__textFragmenter(t_Highlighter *self, void *data);
          static int t_Highlighter_set__textFragmenter(t_Highlighter *self, PyObject *arg, void *data);
          static PyGetSetDef t_Highlighter__fields_[] = {
            DECLARE_GETSET_FIELD(t_Highlighter, encoder),
            DECLARE_GETSET_FIELD(t_Highlighter, fragmentScorer),
            DECLARE_GETSET_FIELD(t_Highlighter, maxDocCharsToAnalyze),
            DECLARE_GETSET_FIELD(t_Highlighter, textFragmenter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Highlighter__methods_[] = {
            DECLARE_METHOD(t_Highlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Highlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Highlighter, getBestFragment, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getBestFragments, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getBestTextFragments, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getEncoder, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getFragmentScorer, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getMaxDocCharsToAnalyze, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getTextFragmenter, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, setEncoder, METH_O),
            DECLARE_METHOD(t_Highlighter, setFragmentScorer, METH_O),
            DECLARE_METHOD(t_Highlighter, setMaxDocCharsToAnalyze, METH_O),
            DECLARE_METHOD(t_Highlighter, setTextFragmenter, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Highlighter, t_Highlighter, ::java::lang::Object, Highlighter, t_Highlighter_init_, 0, 0, t_Highlighter__fields_, 0, 0);

          void t_Highlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(Highlighter), module, "Highlighter", 0);
          }

          void t_Highlighter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "class_", make_descriptor(Highlighter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "wrapfn_", make_descriptor(t_Highlighter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Highlighter::initializeClass);
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "DEFAULT_MAX_CHARS_TO_ANALYZE", make_descriptor(Highlighter::DEFAULT_MAX_CHARS_TO_ANALYZE));
          }

          static PyObject *t_Highlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Highlighter::initializeClass, 1)))
              return NULL;
            return t_Highlighter::wrap_Object(Highlighter(((t_Highlighter *) arg)->object.this$));
          }
          static PyObject *t_Highlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Highlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Highlighter_init_(t_Highlighter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::highlight::Scorer a0((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0))
                {
                  INT_CALL(object = Highlighter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::highlight::Formatter a0((jobject) NULL);
                ::org::apache::lucene::search::highlight::Scorer a1((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::highlight::Formatter::initializeClass, ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Highlighter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::highlight::Formatter a0((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a1((jobject) NULL);
                ::org::apache::lucene::search::highlight::Scorer a2((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::search::highlight::Formatter::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Highlighter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Highlighter_getBestFragment(t_Highlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragment", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getBestFragments(t_Highlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "ksI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ksIs", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jint a3;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kssI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragments", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getBestTextFragments(t_Highlighter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            jint a3;
            JArray< ::org::apache::lucene::search::highlight::TextFragment > result((jobject) NULL);

            if (!parseArgs(args, "ksZI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.getBestTextFragments(a0, a1, a2, a3));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_TextFragment::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "getBestTextFragments", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getEncoder(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Encoder result((jobject) NULL);
            OBJ_CALL(result = self->object.getEncoder());
            return ::org::apache::lucene::search::highlight::t_Encoder::wrap_Object(result);
          }

          static PyObject *t_Highlighter_getFragmentScorer(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Scorer result((jobject) NULL);
            OBJ_CALL(result = self->object.getFragmentScorer());
            return ::org::apache::lucene::search::highlight::t_Scorer::wrap_Object(result);
          }

          static PyObject *t_Highlighter_getMaxDocCharsToAnalyze(t_Highlighter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxDocCharsToAnalyze());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Highlighter_getTextFragmenter(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Fragmenter result((jobject) NULL);
            OBJ_CALL(result = self->object.getTextFragmenter());
            return ::org::apache::lucene::search::highlight::t_Fragmenter::wrap_Object(result);
          }

          static PyObject *t_Highlighter_setEncoder(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Encoder a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setEncoder(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEncoder", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setFragmentScorer(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Scorer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setFragmentScorer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFragmentScorer", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setMaxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocCharsToAnalyze(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocCharsToAnalyze", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setTextFragmenter(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Fragmenter a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Fragmenter::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setTextFragmenter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTextFragmenter", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_get__encoder(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Encoder value((jobject) NULL);
            OBJ_CALL(value = self->object.getEncoder());
            return ::org::apache::lucene::search::highlight::t_Encoder::wrap_Object(value);
          }
          static int t_Highlighter_set__encoder(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Encoder value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Encoder::initializeClass, &value))
              {
                INT_CALL(self->object.setEncoder(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "encoder", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__fragmentScorer(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Scorer value((jobject) NULL);
            OBJ_CALL(value = self->object.getFragmentScorer());
            return ::org::apache::lucene::search::highlight::t_Scorer::wrap_Object(value);
          }
          static int t_Highlighter_set__fragmentScorer(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setFragmentScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fragmentScorer", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__maxDocCharsToAnalyze(t_Highlighter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxDocCharsToAnalyze());
            return PyInt_FromLong((long) value);
          }
          static int t_Highlighter_set__maxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocCharsToAnalyze(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocCharsToAnalyze", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__textFragmenter(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Fragmenter value((jobject) NULL);
            OBJ_CALL(value = self->object.getTextFragmenter());
            return ::org::apache::lucene::search::highlight::t_Fragmenter::wrap_Object(value);
          }
          static int t_Highlighter_set__textFragmenter(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Fragmenter value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Fragmenter::initializeClass, &value))
              {
                INT_CALL(self->object.setTextFragmenter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "textFragmenter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/eu/BasqueAnalyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace eu {

          ::java::lang::Class *BasqueAnalyzer::class$ = NULL;
          jmethodID *BasqueAnalyzer::mids$ = NULL;
          bool BasqueAnalyzer::live$ = false;
          ::java::lang::String *BasqueAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass BasqueAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/eu/BasqueAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          BasqueAnalyzer::BasqueAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet BasqueAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace eu {
          static PyObject *t_BasqueAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasqueAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasqueAnalyzer_init_(t_BasqueAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasqueAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_BasqueAnalyzer_get__defaultStopSet(t_BasqueAnalyzer *self, void *data);
          static PyGetSetDef t_BasqueAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_BasqueAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_BasqueAnalyzer__methods_[] = {
            DECLARE_METHOD(t_BasqueAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasqueAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasqueAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasqueAnalyzer, t_BasqueAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, BasqueAnalyzer, t_BasqueAnalyzer_init_, 0, 0, t_BasqueAnalyzer__fields_, 0, 0);

          void t_BasqueAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(BasqueAnalyzer), module, "BasqueAnalyzer", 0);
          }

          void t_BasqueAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "class_", make_descriptor(BasqueAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_BasqueAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(BasqueAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(BasqueAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*BasqueAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_BasqueAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasqueAnalyzer::initializeClass, 1)))
              return NULL;
            return t_BasqueAnalyzer::wrap_Object(BasqueAnalyzer(((t_BasqueAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_BasqueAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasqueAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasqueAnalyzer_init_(t_BasqueAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                BasqueAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = BasqueAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BasqueAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::eu::BasqueAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_BasqueAnalyzer_get__defaultStopSet(t_BasqueAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/LRUHashMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *LRUHashMap::class$ = NULL;
          jmethodID *LRUHashMap::mids$ = NULL;
          bool LRUHashMap::live$ = false;

          jclass LRUHashMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/LRUHashMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_clone_544babe9] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/facet/taxonomy/LRUHashMap;");
              mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");
              mids$[mid_setMaxSize_39c7bd3c] = env->getMethodID(cls, "setMaxSize", "(I)V");
              mids$[mid_removeEldestEntry_8e61453a] = env->getMethodID(cls, "removeEldestEntry", "(Ljava/util/Map$Entry;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LRUHashMap::LRUHashMap(jint a0) : ::java::util::LinkedHashMap(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          LRUHashMap LRUHashMap::clone() const
          {
            return LRUHashMap(env->callObjectMethod(this$, mids$[mid_clone_544babe9]));
          }

          jint LRUHashMap::getMaxSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxSize_54c6a179]);
          }

          void LRUHashMap::setMaxSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxSize_39c7bd3c], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_LRUHashMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LRUHashMap_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LRUHashMap_of_(t_LRUHashMap *self, PyObject *args);
          static int t_LRUHashMap_init_(t_LRUHashMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LRUHashMap_clone(t_LRUHashMap *self, PyObject *args);
          static PyObject *t_LRUHashMap_getMaxSize(t_LRUHashMap *self);
          static PyObject *t_LRUHashMap_setMaxSize(t_LRUHashMap *self, PyObject *arg);
          static PyObject *t_LRUHashMap_get__maxSize(t_LRUHashMap *self, void *data);
          static int t_LRUHashMap_set__maxSize(t_LRUHashMap *self, PyObject *arg, void *data);
          static PyObject *t_LRUHashMap_get__parameters_(t_LRUHashMap *self, void *data);
          static PyGetSetDef t_LRUHashMap__fields_[] = {
            DECLARE_GETSET_FIELD(t_LRUHashMap, maxSize),
            DECLARE_GET_FIELD(t_LRUHashMap, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_LRUHashMap__methods_[] = {
            DECLARE_METHOD(t_LRUHashMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LRUHashMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LRUHashMap, of_, METH_VARARGS),
            DECLARE_METHOD(t_LRUHashMap, clone, METH_VARARGS),
            DECLARE_METHOD(t_LRUHashMap, getMaxSize, METH_NOARGS),
            DECLARE_METHOD(t_LRUHashMap, setMaxSize, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LRUHashMap, t_LRUHashMap, ::java::util::LinkedHashMap, LRUHashMap, t_LRUHashMap_init_, 0, 0, t_LRUHashMap__fields_, 0, 0);
          PyObject *t_LRUHashMap::wrap_Object(const LRUHashMap& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_LRUHashMap::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LRUHashMap *self = (t_LRUHashMap *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          PyObject *t_LRUHashMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
          {
            PyObject *obj = t_LRUHashMap::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_LRUHashMap *self = (t_LRUHashMap *) obj;
              self->parameters[0] = p0;
              self->parameters[1] = p1;
            }
            return obj;
          }

          void t_LRUHashMap::install(PyObject *module)
          {
            installType(&PY_TYPE(LRUHashMap), module, "LRUHashMap", 0);
          }

          void t_LRUHashMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LRUHashMap).tp_dict, "class_", make_descriptor(LRUHashMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LRUHashMap).tp_dict, "wrapfn_", make_descriptor(t_LRUHashMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LRUHashMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LRUHashMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LRUHashMap::initializeClass, 1)))
              return NULL;
            return t_LRUHashMap::wrap_Object(LRUHashMap(((t_LRUHashMap *) arg)->object.this$));
          }
          static PyObject *t_LRUHashMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LRUHashMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_LRUHashMap_of_(t_LRUHashMap *self, PyObject *args)
          {
            if (!parseArg(args, "T", 2, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_LRUHashMap_init_(t_LRUHashMap *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            LRUHashMap object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = LRUHashMap(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LRUHashMap_clone(t_LRUHashMap *self, PyObject *args)
          {
            LRUHashMap result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_LRUHashMap::wrap_Object(result, self->parameters[0], self->parameters[1]);
            }

            return callSuper(&PY_TYPE(LRUHashMap), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_LRUHashMap_getMaxSize(t_LRUHashMap *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_LRUHashMap_setMaxSize(t_LRUHashMap *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxSize", arg);
            return NULL;
          }
          static PyObject *t_LRUHashMap_get__parameters_(t_LRUHashMap *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_LRUHashMap_get__maxSize(t_LRUHashMap *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxSize());
            return PyInt_FromLong((long) value);
          }
          static int t_LRUHashMap_set__maxSize(t_LRUHashMap *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxSize", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "java/lang/Number.h"
#include "org/apache/lucene/search/NumericRangeQuery.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *NumericRangeQueryNodeBuilder::class$ = NULL;
              jmethodID *NumericRangeQueryNodeBuilder::mids$ = NULL;
              bool NumericRangeQueryNodeBuilder::live$ = false;

              jclass NumericRangeQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/NumericRangeQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_ff2bff6d] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/NumericRangeQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericRangeQueryNodeBuilder::NumericRangeQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::NumericRangeQuery NumericRangeQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::NumericRangeQuery(env->callObjectMethod(this$, mids$[mid_build_ff2bff6d], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_NumericRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericRangeQueryNodeBuilder_init_(t_NumericRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericRangeQueryNodeBuilder_build(t_NumericRangeQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_NumericRangeQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_NumericRangeQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericRangeQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericRangeQueryNodeBuilder, t_NumericRangeQueryNodeBuilder, ::java::lang::Object, NumericRangeQueryNodeBuilder, t_NumericRangeQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_NumericRangeQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericRangeQueryNodeBuilder), module, "NumericRangeQueryNodeBuilder", 0);
              }

              void t_NumericRangeQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeBuilder).tp_dict, "class_", make_descriptor(NumericRangeQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericRangeQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericRangeQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericRangeQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericRangeQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_NumericRangeQueryNodeBuilder::wrap_Object(NumericRangeQueryNodeBuilder(((t_NumericRangeQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_NumericRangeQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericRangeQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericRangeQueryNodeBuilder_init_(t_NumericRangeQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                NumericRangeQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = NumericRangeQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_NumericRangeQueryNodeBuilder_build(t_NumericRangeQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::NumericRangeQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_NumericRangeQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SimpleMergedSegmentWarmer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SimpleMergedSegmentWarmer::class$ = NULL;
        jmethodID *SimpleMergedSegmentWarmer::mids$ = NULL;
        bool SimpleMergedSegmentWarmer::live$ = false;

        jclass SimpleMergedSegmentWarmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SimpleMergedSegmentWarmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a5e6dfa2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/InfoStream;)V");
            mids$[mid_warm_c9e29579] = env->getMethodID(cls, "warm", "(Lorg/apache/lucene/index/AtomicReader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SimpleMergedSegmentWarmer::SimpleMergedSegmentWarmer(const ::org::apache::lucene::util::InfoStream & a0) : ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer(env->newObject(initializeClass, &mids$, mid_init$_a5e6dfa2, a0.this$)) {}

        void SimpleMergedSegmentWarmer::warm(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_warm_c9e29579], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SimpleMergedSegmentWarmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SimpleMergedSegmentWarmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SimpleMergedSegmentWarmer_init_(t_SimpleMergedSegmentWarmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SimpleMergedSegmentWarmer_warm(t_SimpleMergedSegmentWarmer *self, PyObject *args);

        static PyMethodDef t_SimpleMergedSegmentWarmer__methods_[] = {
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SimpleMergedSegmentWarmer, warm, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SimpleMergedSegmentWarmer, t_SimpleMergedSegmentWarmer, ::org::apache::lucene::index::IndexWriter$IndexReaderWarmer, SimpleMergedSegmentWarmer, t_SimpleMergedSegmentWarmer_init_, 0, 0, 0, 0, 0);

        void t_SimpleMergedSegmentWarmer::install(PyObject *module)
        {
          installType(&PY_TYPE(SimpleMergedSegmentWarmer), module, "SimpleMergedSegmentWarmer", 0);
        }

        void t_SimpleMergedSegmentWarmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SimpleMergedSegmentWarmer).tp_dict, "class_", make_descriptor(SimpleMergedSegmentWarmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SimpleMergedSegmentWarmer).tp_dict, "wrapfn_", make_descriptor(t_SimpleMergedSegmentWarmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SimpleMergedSegmentWarmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SimpleMergedSegmentWarmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SimpleMergedSegmentWarmer::initializeClass, 1)))
            return NULL;
          return t_SimpleMergedSegmentWarmer::wrap_Object(SimpleMergedSegmentWarmer(((t_SimpleMergedSegmentWarmer *) arg)->object.this$));
        }
        static PyObject *t_SimpleMergedSegmentWarmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SimpleMergedSegmentWarmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SimpleMergedSegmentWarmer_init_(t_SimpleMergedSegmentWarmer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::InfoStream a0((jobject) NULL);
          SimpleMergedSegmentWarmer object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::InfoStream::initializeClass, &a0))
          {
            INT_CALL(object = SimpleMergedSegmentWarmer(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SimpleMergedSegmentWarmer_warm(t_SimpleMergedSegmentWarmer *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.warm(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SimpleMergedSegmentWarmer), (PyObject *) self, "warm", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/RAMInputStream.h"
#include "org/apache/lucene/store/RAMFile.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *RAMInputStream::class$ = NULL;
        jmethodID *RAMInputStream::mids$ = NULL;
        bool RAMInputStream::live$ = false;

        jclass RAMInputStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/RAMInputStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4d2db83b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/store/RAMFile;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getFilePointer_54c6a17a] = env->getMethodID(cls, "getFilePointer", "()J");
            mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
            mids$[mid_readByte_54c6a172] = env->getMethodID(cls, "readByte", "()B");
            mids$[mid_readBytes_86f4435f] = env->getMethodID(cls, "readBytes", "([BII)V");
            mids$[mid_seek_0ee6df2f] = env->getMethodID(cls, "seek", "(J)V");
            mids$[mid_slice_d00c83eb] = env->getMethodID(cls, "slice", "(Ljava/lang/String;JJ)Lorg/apache/lucene/store/IndexInput;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        RAMInputStream::RAMInputStream(const ::java::lang::String & a0, const ::org::apache::lucene::store::RAMFile & a1) : ::org::apache::lucene::store::IndexInput(env->newObject(initializeClass, &mids$, mid_init$_4d2db83b, a0.this$, a1.this$)) {}

        void RAMInputStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jlong RAMInputStream::getFilePointer() const
        {
          return env->callLongMethod(this$, mids$[mid_getFilePointer_54c6a17a]);
        }

        jlong RAMInputStream::length() const
        {
          return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        jbyte RAMInputStream::readByte() const
        {
          return env->callByteMethod(this$, mids$[mid_readByte_54c6a172]);
        }

        void RAMInputStream::readBytes(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_readBytes_86f4435f], a0.this$, a1, a2);
        }

        void RAMInputStream::seek(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seek_0ee6df2f], a0);
        }

        ::org::apache::lucene::store::IndexInput RAMInputStream::slice(const ::java::lang::String & a0, jlong a1, jlong a2) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_slice_d00c83eb], a0.this$, a1, a2));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_RAMInputStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RAMInputStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RAMInputStream_init_(t_RAMInputStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_RAMInputStream_close(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_getFilePointer(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_length(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_readByte(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_readBytes(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_seek(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_slice(t_RAMInputStream *self, PyObject *args);
        static PyObject *t_RAMInputStream_get__filePointer(t_RAMInputStream *self, void *data);
        static PyGetSetDef t_RAMInputStream__fields_[] = {
          DECLARE_GET_FIELD(t_RAMInputStream, filePointer),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_RAMInputStream__methods_[] = {
          DECLARE_METHOD(t_RAMInputStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMInputStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_RAMInputStream, close, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, getFilePointer, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, length, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, readByte, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, readBytes, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, seek, METH_VARARGS),
          DECLARE_METHOD(t_RAMInputStream, slice, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RAMInputStream, t_RAMInputStream, ::org::apache::lucene::store::IndexInput, RAMInputStream, t_RAMInputStream_init_, 0, 0, t_RAMInputStream__fields_, 0, 0);

        void t_RAMInputStream::install(PyObject *module)
        {
          installType(&PY_TYPE(RAMInputStream), module, "RAMInputStream", 0);
        }

        void t_RAMInputStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(RAMInputStream).tp_dict, "class_", make_descriptor(RAMInputStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(RAMInputStream).tp_dict, "wrapfn_", make_descriptor(t_RAMInputStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(RAMInputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RAMInputStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, RAMInputStream::initializeClass, 1)))
            return NULL;
          return t_RAMInputStream::wrap_Object(RAMInputStream(((t_RAMInputStream *) arg)->object.this$));
        }
        static PyObject *t_RAMInputStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, RAMInputStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_RAMInputStream_init_(t_RAMInputStream *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::RAMFile a1((jobject) NULL);
          RAMInputStream object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::RAMFile::initializeClass, &a0, &a1))
          {
            INT_CALL(object = RAMInputStream(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_RAMInputStream_close(t_RAMInputStream *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_RAMInputStream_getFilePointer(t_RAMInputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getFilePointer());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "getFilePointer", args, 2);
        }

        static PyObject *t_RAMInputStream_length(t_RAMInputStream *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_RAMInputStream_readByte(t_RAMInputStream *self, PyObject *args)
        {
          jbyte result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.readByte());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "readByte", args, 2);
        }

        static PyObject *t_RAMInputStream_readBytes(t_RAMInputStream *self, PyObject *args)
        {
          JArray< jbyte > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.readBytes(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "readBytes", args, 2);
        }

        static PyObject *t_RAMInputStream_seek(t_RAMInputStream *self, PyObject *args)
        {
          jlong a0;

          if (!parseArgs(args, "J", &a0))
          {
            OBJ_CALL(self->object.seek(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "seek", args, 2);
        }

        static PyObject *t_RAMInputStream_slice(t_RAMInputStream *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong a1;
          jlong a2;
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sJJ", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.slice(a0, a1, a2));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(RAMInputStream), (PyObject *) self, "slice", args, 2);
        }

        static PyObject *t_RAMInputStream_get__filePointer(t_RAMInputStream *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object.getFilePointer());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizerImpl40.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/io/Reader.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {

            ::java::lang::Class *UAX29URLEmailTokenizerImpl40::class$ = NULL;
            jmethodID *UAX29URLEmailTokenizerImpl40::mids$ = NULL;
            bool UAX29URLEmailTokenizerImpl40::live$ = false;
            jint UAX29URLEmailTokenizerImpl40::EMAIL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::HANGUL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::HIRAGANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::IDEOGRAPHIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::KATAKANA_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::NUMERIC_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::URL_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::WORD_TYPE = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::YYEOF = (jint) 0;
            jint UAX29URLEmailTokenizerImpl40::YYINITIAL = (jint) 0;

            jclass UAX29URLEmailTokenizerImpl40::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std40/UAX29URLEmailTokenizerImpl40");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                EMAIL_TYPE = env->getStaticIntField(cls, "EMAIL_TYPE");
                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                URL_TYPE = env->getStaticIntField(cls, "URL_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            UAX29URLEmailTokenizerImpl40::UAX29URLEmailTokenizerImpl40(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint UAX29URLEmailTokenizerImpl40::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl40::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void UAX29URLEmailTokenizerImpl40::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint UAX29URLEmailTokenizerImpl40::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar UAX29URLEmailTokenizerImpl40::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void UAX29URLEmailTokenizerImpl40::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint UAX29URLEmailTokenizerImpl40::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void UAX29URLEmailTokenizerImpl40::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void UAX29URLEmailTokenizerImpl40::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint UAX29URLEmailTokenizerImpl40::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String UAX29URLEmailTokenizerImpl40::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std40 {
            static PyObject *t_UAX29URLEmailTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg);
            static int t_UAX29URLEmailTokenizerImpl40_init_(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_getNextToken(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_getText(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yybegin(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yychar(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yycharat(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyclose(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yylength(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yypushback(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyreset(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yystate(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_yytext(t_UAX29URLEmailTokenizerImpl40 *self);
            static PyObject *t_UAX29URLEmailTokenizerImpl40_get__nextToken(t_UAX29URLEmailTokenizerImpl40 *self, void *data);
            static PyGetSetDef t_UAX29URLEmailTokenizerImpl40__fields_[] = {
              DECLARE_GET_FIELD(t_UAX29URLEmailTokenizerImpl40, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_UAX29URLEmailTokenizerImpl40__methods_[] = {
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, getText, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yybegin, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yychar, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yycharat, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yylength, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yypushback, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yyreset, METH_O),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yystate, METH_NOARGS),
              DECLARE_METHOD(t_UAX29URLEmailTokenizerImpl40, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(UAX29URLEmailTokenizerImpl40, t_UAX29URLEmailTokenizerImpl40, ::java::lang::Object, UAX29URLEmailTokenizerImpl40, t_UAX29URLEmailTokenizerImpl40_init_, 0, 0, t_UAX29URLEmailTokenizerImpl40__fields_, 0, 0);

            void t_UAX29URLEmailTokenizerImpl40::install(PyObject *module)
            {
              installType(&PY_TYPE(UAX29URLEmailTokenizerImpl40), module, "UAX29URLEmailTokenizerImpl40", 0);
            }

            void t_UAX29URLEmailTokenizerImpl40::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerImpl40::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerImpl40::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(UAX29URLEmailTokenizerImpl40::initializeClass);
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "EMAIL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::EMAIL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "HANGUL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "HIRAGANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "KATAKANA_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "NUMERIC_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "URL_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::URL_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "WORD_TYPE", make_descriptor(UAX29URLEmailTokenizerImpl40::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "YYEOF", make_descriptor(UAX29URLEmailTokenizerImpl40::YYEOF));
              PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerImpl40).tp_dict, "YYINITIAL", make_descriptor(UAX29URLEmailTokenizerImpl40::YYINITIAL));
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, UAX29URLEmailTokenizerImpl40::initializeClass, 1)))
                return NULL;
              return t_UAX29URLEmailTokenizerImpl40::wrap_Object(UAX29URLEmailTokenizerImpl40(((t_UAX29URLEmailTokenizerImpl40 *) arg)->object.this$));
            }
            static PyObject *t_UAX29URLEmailTokenizerImpl40_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, UAX29URLEmailTokenizerImpl40::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_UAX29URLEmailTokenizerImpl40_init_(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              UAX29URLEmailTokenizerImpl40 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = UAX29URLEmailTokenizerImpl40(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_getNextToken(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_getText(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yybegin(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yychar(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yycharat(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyclose(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yylength(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yypushback(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yyreset(t_UAX29URLEmailTokenizerImpl40 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yystate(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_yytext(t_UAX29URLEmailTokenizerImpl40 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_UAX29URLEmailTokenizerImpl40_get__nextToken(t_UAX29URLEmailTokenizerImpl40 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *KeywordRepeatFilter::class$ = NULL;
          jmethodID *KeywordRepeatFilter::mids$ = NULL;
          bool KeywordRepeatFilter::live$ = false;

          jclass KeywordRepeatFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/KeywordRepeatFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          KeywordRepeatFilter::KeywordRepeatFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean KeywordRepeatFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void KeywordRepeatFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_KeywordRepeatFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_KeywordRepeatFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_KeywordRepeatFilter_init_(t_KeywordRepeatFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_KeywordRepeatFilter_incrementToken(t_KeywordRepeatFilter *self, PyObject *args);
          static PyObject *t_KeywordRepeatFilter_reset(t_KeywordRepeatFilter *self, PyObject *args);

          static PyMethodDef t_KeywordRepeatFilter__methods_[] = {
            DECLARE_METHOD(t_KeywordRepeatFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_KeywordRepeatFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_KeywordRepeatFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(KeywordRepeatFilter, t_KeywordRepeatFilter, ::org::apache::lucene::analysis::TokenFilter, KeywordRepeatFilter, t_KeywordRepeatFilter_init_, 0, 0, 0, 0, 0);

          void t_KeywordRepeatFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(KeywordRepeatFilter), module, "KeywordRepeatFilter", 0);
          }

          void t_KeywordRepeatFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilter).tp_dict, "class_", make_descriptor(KeywordRepeatFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilter).tp_dict, "wrapfn_", make_descriptor(t_KeywordRepeatFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(KeywordRepeatFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_KeywordRepeatFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, KeywordRepeatFilter::initializeClass, 1)))
              return NULL;
            return t_KeywordRepeatFilter::wrap_Object(KeywordRepeatFilter(((t_KeywordRepeatFilter *) arg)->object.this$));
          }
          static PyObject *t_KeywordRepeatFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, KeywordRepeatFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_KeywordRepeatFilter_init_(t_KeywordRepeatFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            KeywordRepeatFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = KeywordRepeatFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_KeywordRepeatFilter_incrementToken(t_KeywordRepeatFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(KeywordRepeatFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_KeywordRepeatFilter_reset(t_KeywordRepeatFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(KeywordRepeatFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchLightStemFilter::class$ = NULL;
          jmethodID *FrenchLightStemFilter::mids$ = NULL;
          bool FrenchLightStemFilter::live$ = false;

          jclass FrenchLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchLightStemFilter::FrenchLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FrenchLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchLightStemFilter_init_(t_FrenchLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchLightStemFilter_incrementToken(t_FrenchLightStemFilter *self, PyObject *args);

          static PyMethodDef t_FrenchLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_FrenchLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchLightStemFilter, t_FrenchLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, FrenchLightStemFilter, t_FrenchLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_FrenchLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchLightStemFilter), module, "FrenchLightStemFilter", 0);
          }

          void t_FrenchLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilter).tp_dict, "class_", make_descriptor(FrenchLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FrenchLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_FrenchLightStemFilter::wrap_Object(FrenchLightStemFilter(((t_FrenchLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FrenchLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchLightStemFilter_init_(t_FrenchLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FrenchLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FrenchLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchLightStemFilter_incrementToken(t_FrenchLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FrenchLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/builders/QueryBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {

              ::java::lang::Class *QueryTreeBuilder::class$ = NULL;
              jmethodID *QueryTreeBuilder::mids$ = NULL;
              bool QueryTreeBuilder::live$ = false;
              ::java::lang::String *QueryTreeBuilder::QUERY_TREE_BUILDER_TAGID = NULL;

              jclass QueryTreeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/builders/QueryTreeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_30efaf9c] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Ljava/lang/Object;");
                  mids$[mid_setBuilder_868de661] = env->getMethodID(cls, "setBuilder", "(Ljava/lang/CharSequence;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");
                  mids$[mid_setBuilder_ba566e4f] = env->getMethodID(cls, "setBuilder", "(Ljava/lang/Class;Lorg/apache/lucene/queryparser/flexible/core/builders/QueryBuilder;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  QUERY_TREE_BUILDER_TAGID = new ::java::lang::String(env->getStaticObjectField(cls, "QUERY_TREE_BUILDER_TAGID", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              QueryTreeBuilder::QueryTreeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::java::lang::Object QueryTreeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_build_30efaf9c], a0.this$));
              }

              void QueryTreeBuilder::setBuilder(const ::java::lang::CharSequence & a0, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setBuilder_868de661], a0.this$, a1.this$);
              }

              void QueryTreeBuilder::setBuilder(const ::java::lang::Class & a0, const ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder & a1) const
              {
                env->callVoidMethod(this$, mids$[mid_setBuilder_ba566e4f], a0.this$, a1.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace builders {
              static PyObject *t_QueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_QueryTreeBuilder_init_(t_QueryTreeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_QueryTreeBuilder_build(t_QueryTreeBuilder *self, PyObject *arg);
              static PyObject *t_QueryTreeBuilder_setBuilder(t_QueryTreeBuilder *self, PyObject *args);

              static PyMethodDef t_QueryTreeBuilder__methods_[] = {
                DECLARE_METHOD(t_QueryTreeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryTreeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryTreeBuilder, build, METH_O),
                DECLARE_METHOD(t_QueryTreeBuilder, setBuilder, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryTreeBuilder, t_QueryTreeBuilder, ::java::lang::Object, QueryTreeBuilder, t_QueryTreeBuilder_init_, 0, 0, 0, 0, 0);

              void t_QueryTreeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryTreeBuilder), module, "QueryTreeBuilder", 0);
              }

              void t_QueryTreeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "class_", make_descriptor(QueryTreeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "wrapfn_", make_descriptor(t_QueryTreeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryTreeBuilder::initializeClass);
                PyDict_SetItemString(PY_TYPE(QueryTreeBuilder).tp_dict, "QUERY_TREE_BUILDER_TAGID", make_descriptor(j2p(*QueryTreeBuilder::QUERY_TREE_BUILDER_TAGID)));
              }

              static PyObject *t_QueryTreeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryTreeBuilder::initializeClass, 1)))
                  return NULL;
                return t_QueryTreeBuilder::wrap_Object(QueryTreeBuilder(((t_QueryTreeBuilder *) arg)->object.this$));
              }
              static PyObject *t_QueryTreeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryTreeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_QueryTreeBuilder_init_(t_QueryTreeBuilder *self, PyObject *args, PyObject *kwds)
              {
                QueryTreeBuilder object((jobject) NULL);

                INT_CALL(object = QueryTreeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_QueryTreeBuilder_build(t_QueryTreeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::java::lang::t_Object::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }

              static PyObject *t_QueryTreeBuilder_setBuilder(t_QueryTreeBuilder *self, PyObject *args)
              {
                switch (PyTuple_GET_SIZE(args)) {
                 case 2:
                  {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a1((jobject) NULL);

                    if (!parseArgs(args, "Ok", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &a1))
                    {
                      OBJ_CALL(self->object.setBuilder(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                  {
                    ::java::lang::Class a0((jobject) NULL);
                    PyTypeObject **p0;
                    ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder a1((jobject) NULL);

                    if (!parseArgs(args, "Kk", ::java::lang::Class::initializeClass, ::org::apache::lucene::queryparser::flexible::core::builders::QueryBuilder::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
                    {
                      OBJ_CALL(self->object.setBuilder(a0, a1));
                      Py_RETURN_NONE;
                    }
                  }
                }

                PyErr_SetArgsError((PyObject *) self, "setBuilder", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/BinaryDocValuesField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *BinaryDocValuesField::class$ = NULL;
        jmethodID *BinaryDocValuesField::mids$ = NULL;
        bool BinaryDocValuesField::live$ = false;
        ::org::apache::lucene::document::FieldType *BinaryDocValuesField::TYPE = NULL;

        jclass BinaryDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/BinaryDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_43cce44e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BinaryDocValuesField::BinaryDocValuesField(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_43cce44e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_BinaryDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BinaryDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BinaryDocValuesField_init_(t_BinaryDocValuesField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_BinaryDocValuesField__methods_[] = {
          DECLARE_METHOD(t_BinaryDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BinaryDocValuesField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BinaryDocValuesField, t_BinaryDocValuesField, ::org::apache::lucene::document::Field, BinaryDocValuesField, t_BinaryDocValuesField_init_, 0, 0, 0, 0, 0);

        void t_BinaryDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(BinaryDocValuesField), module, "BinaryDocValuesField", 0);
        }

        void t_BinaryDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "class_", make_descriptor(BinaryDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_BinaryDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(BinaryDocValuesField::initializeClass);
          PyDict_SetItemString(PY_TYPE(BinaryDocValuesField).tp_dict, "TYPE", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*BinaryDocValuesField::TYPE)));
        }

        static PyObject *t_BinaryDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BinaryDocValuesField::initializeClass, 1)))
            return NULL;
          return t_BinaryDocValuesField::wrap_Object(BinaryDocValuesField(((t_BinaryDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_BinaryDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BinaryDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BinaryDocValuesField_init_(t_BinaryDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          BinaryDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BinaryDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NativeFSLockFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NativeFSLockFactory::class$ = NULL;
        jmethodID *NativeFSLockFactory::mids$ = NULL;
        bool NativeFSLockFactory::live$ = false;

        jclass NativeFSLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NativeFSLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NativeFSLockFactory::NativeFSLockFactory() : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        NativeFSLockFactory::NativeFSLockFactory(const ::java::io::File & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        NativeFSLockFactory::NativeFSLockFactory(const ::java::lang::String & a0) : ::org::apache::lucene::store::FSLockFactory(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        void NativeFSLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock NativeFSLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NativeFSLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NativeFSLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NativeFSLockFactory_init_(t_NativeFSLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NativeFSLockFactory_clearLock(t_NativeFSLockFactory *self, PyObject *args);
        static PyObject *t_NativeFSLockFactory_makeLock(t_NativeFSLockFactory *self, PyObject *args);

        static PyMethodDef t_NativeFSLockFactory__methods_[] = {
          DECLARE_METHOD(t_NativeFSLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NativeFSLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NativeFSLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_NativeFSLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NativeFSLockFactory, t_NativeFSLockFactory, ::org::apache::lucene::store::FSLockFactory, NativeFSLockFactory, t_NativeFSLockFactory_init_, 0, 0, 0, 0, 0);

        void t_NativeFSLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NativeFSLockFactory), module, "NativeFSLockFactory", 0);
        }

        void t_NativeFSLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NativeFSLockFactory).tp_dict, "class_", make_descriptor(NativeFSLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NativeFSLockFactory).tp_dict, "wrapfn_", make_descriptor(t_NativeFSLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NativeFSLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NativeFSLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NativeFSLockFactory::initializeClass, 1)))
            return NULL;
          return t_NativeFSLockFactory::wrap_Object(NativeFSLockFactory(((t_NativeFSLockFactory *) arg)->object.this$));
        }
        static PyObject *t_NativeFSLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NativeFSLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NativeFSLockFactory_init_(t_NativeFSLockFactory *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              NativeFSLockFactory object((jobject) NULL);

              INT_CALL(object = NativeFSLockFactory());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              ::java::io::File a0((jobject) NULL);
              NativeFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
              {
                INT_CALL(object = NativeFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              NativeFSLockFactory object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = NativeFSLockFactory(a0));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_NativeFSLockFactory_clearLock(t_NativeFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NativeFSLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_NativeFSLockFactory_makeLock(t_NativeFSLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NativeFSLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *TaxonomyWriterCache::class$ = NULL;
            jmethodID *TaxonomyWriterCache::mids$ = NULL;
            bool TaxonomyWriterCache::live$ = false;

            jclass TaxonomyWriterCache::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache");

                mids$ = new jmethodID[max_mid];
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_get_283f83f5] = env->getMethodID(cls, "get", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_isFull_54c6a16a] = env->getMethodID(cls, "isFull", "()Z");
                mids$[mid_put_7ba580a4] = env->getMethodID(cls, "put", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;I)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TaxonomyWriterCache::clear() const
            {
              env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
            }

            void TaxonomyWriterCache::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            jint TaxonomyWriterCache::get(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_get_283f83f5], a0.this$);
            }

            jboolean TaxonomyWriterCache::isFull() const
            {
              return env->callBooleanMethod(this$, mids$[mid_isFull_54c6a16a]);
            }

            jboolean TaxonomyWriterCache::put(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0, jint a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_put_7ba580a4], a0.this$, a1);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_TaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_clear(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_close(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_get(t_TaxonomyWriterCache *self, PyObject *arg);
            static PyObject *t_TaxonomyWriterCache_isFull(t_TaxonomyWriterCache *self);
            static PyObject *t_TaxonomyWriterCache_put(t_TaxonomyWriterCache *self, PyObject *args);
            static PyObject *t_TaxonomyWriterCache_get__full(t_TaxonomyWriterCache *self, void *data);
            static PyGetSetDef t_TaxonomyWriterCache__fields_[] = {
              DECLARE_GET_FIELD(t_TaxonomyWriterCache, full),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TaxonomyWriterCache__methods_[] = {
              DECLARE_METHOD(t_TaxonomyWriterCache, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TaxonomyWriterCache, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TaxonomyWriterCache, clear, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, close, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, get, METH_O),
              DECLARE_METHOD(t_TaxonomyWriterCache, isFull, METH_NOARGS),
              DECLARE_METHOD(t_TaxonomyWriterCache, put, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TaxonomyWriterCache, t_TaxonomyWriterCache, ::java::lang::Object, TaxonomyWriterCache, abstract_init, 0, 0, t_TaxonomyWriterCache__fields_, 0, 0);

            void t_TaxonomyWriterCache::install(PyObject *module)
            {
              installType(&PY_TYPE(TaxonomyWriterCache), module, "TaxonomyWriterCache", 0);
            }

            void t_TaxonomyWriterCache::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TaxonomyWriterCache).tp_dict, "class_", make_descriptor(TaxonomyWriterCache::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TaxonomyWriterCache).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyWriterCache::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TaxonomyWriterCache).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TaxonomyWriterCache_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TaxonomyWriterCache::initializeClass, 1)))
                return NULL;
              return t_TaxonomyWriterCache::wrap_Object(TaxonomyWriterCache(((t_TaxonomyWriterCache *) arg)->object.this$));
            }
            static PyObject *t_TaxonomyWriterCache_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TaxonomyWriterCache::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TaxonomyWriterCache_clear(t_TaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            static PyObject *t_TaxonomyWriterCache_close(t_TaxonomyWriterCache *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_TaxonomyWriterCache_get(t_TaxonomyWriterCache *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_TaxonomyWriterCache_isFull(t_TaxonomyWriterCache *self)
            {
              jboolean result;
              OBJ_CALL(result = self->object.isFull());
              Py_RETURN_BOOL(result);
            }

            static PyObject *t_TaxonomyWriterCache_put(t_TaxonomyWriterCache *self, PyObject *args)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.put(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_TaxonomyWriterCache_get__full(t_TaxonomyWriterCache *self, void *data)
            {
              jboolean value;
              OBJ_CALL(value = self->object.isFull());
              Py_RETURN_BOOL(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ckb/SoraniStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {

          ::java::lang::Class *SoraniStemmer::class$ = NULL;
          jmethodID *SoraniStemmer::mids$ = NULL;
          bool SoraniStemmer::live$ = false;

          jclass SoraniStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ckb/SoraniStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SoraniStemmer::SoraniStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SoraniStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ckb {
          static PyObject *t_SoraniStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SoraniStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SoraniStemmer_init_(t_SoraniStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SoraniStemmer_stem(t_SoraniStemmer *self, PyObject *args);

          static PyMethodDef t_SoraniStemmer__methods_[] = {
            DECLARE_METHOD(t_SoraniStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SoraniStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SoraniStemmer, t_SoraniStemmer, ::java::lang::Object, SoraniStemmer, t_SoraniStemmer_init_, 0, 0, 0, 0, 0);

          void t_SoraniStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SoraniStemmer), module, "SoraniStemmer", 0);
          }

          void t_SoraniStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SoraniStemmer).tp_dict, "class_", make_descriptor(SoraniStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SoraniStemmer).tp_dict, "wrapfn_", make_descriptor(t_SoraniStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SoraniStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SoraniStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SoraniStemmer::initializeClass, 1)))
              return NULL;
            return t_SoraniStemmer::wrap_Object(SoraniStemmer(((t_SoraniStemmer *) arg)->object.this$));
          }
          static PyObject *t_SoraniStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SoraniStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SoraniStemmer_init_(t_SoraniStemmer *self, PyObject *args, PyObject *kwds)
          {
            SoraniStemmer object((jobject) NULL);

            INT_CALL(object = SoraniStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SoraniStemmer_stem(t_SoraniStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/QueryParser.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/classic/QueryParserTokenManager.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "org/apache/lucene/queryparser/classic/QueryParserConstants.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/classic/Token.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *QueryParser::class$ = NULL;
          jmethodID *QueryParser::mids$ = NULL;
          jfieldID *QueryParser::fids$ = NULL;
          bool QueryParser::live$ = false;

          jclass QueryParser::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/QueryParser");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_504c192d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer;)V");
              mids$[mid_Clause_fbed2634] = env->getMethodID(cls, "Clause", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_Conjunction_54c6a179] = env->getMethodID(cls, "Conjunction", "()I");
              mids$[mid_Modifiers_54c6a179] = env->getMethodID(cls, "Modifiers", "()I");
              mids$[mid_Query_fbed2634] = env->getMethodID(cls, "Query", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_ReInit_52865dcf] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/QueryParserTokenManager;)V");
              mids$[mid_ReInit_24bde9d3] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/classic/CharStream;)V");
              mids$[mid_Term_fbed2634] = env->getMethodID(cls, "Term", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_TopLevelQuery_fbed2634] = env->getMethodID(cls, "TopLevelQuery", "(Ljava/lang/String;)Lorg/apache/lucene/search/Query;");
              mids$[mid_disable_tracing_54c6a166] = env->getMethodID(cls, "disable_tracing", "()V");
              mids$[mid_enable_tracing_54c6a166] = env->getMethodID(cls, "enable_tracing", "()V");
              mids$[mid_generateParseException_3c5b7efe] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/classic/ParseException;");
              mids$[mid_getNextToken_1983cf96] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/classic/Token;");
              mids$[mid_getToken_61c98f04] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/classic/Token;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/classic/Token;");
              fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/classic/QueryParserTokenManager;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryParser::QueryParser(const ::org::apache::lucene::util::Version & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer & a2) : ::org::apache::lucene::queryparser::classic::QueryParserBase(env->newObject(initializeClass, &mids$, mid_init$_504c192d, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::Query QueryParser::Clause(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Clause_fbed2634], a0.this$));
          }

          jint QueryParser::Conjunction() const
          {
            return env->callIntMethod(this$, mids$[mid_Conjunction_54c6a179]);
          }

          jint QueryParser::Modifiers() const
          {
            return env->callIntMethod(this$, mids$[mid_Modifiers_54c6a179]);
          }

          ::org::apache::lucene::search::Query QueryParser::Query(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Query_fbed2634], a0.this$));
          }

          void QueryParser::ReInit(const ::org::apache::lucene::queryparser::classic::QueryParserTokenManager & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_52865dcf], a0.this$);
          }

          void QueryParser::ReInit(const ::org::apache::lucene::queryparser::classic::CharStream & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_ReInit_24bde9d3], a0.this$);
          }

          ::org::apache::lucene::search::Query QueryParser::Term(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_Term_fbed2634], a0.this$));
          }

          ::org::apache::lucene::search::Query QueryParser::TopLevelQuery(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_TopLevelQuery_fbed2634], a0.this$));
          }

          void QueryParser::disable_tracing() const
          {
            env->callVoidMethod(this$, mids$[mid_disable_tracing_54c6a166]);
          }

          void QueryParser::enable_tracing() const
          {
            env->callVoidMethod(this$, mids$[mid_enable_tracing_54c6a166]);
          }

          ::org::apache::lucene::queryparser::classic::ParseException QueryParser::generateParseException() const
          {
            return ::org::apache::lucene::queryparser::classic::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_3c5b7efe]));
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::getNextToken() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_1983cf96]));
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::getToken(jint a0) const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->callObjectMethod(this$, mids$[mid_getToken_61c98f04], a0));
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::_get_jj_nt() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
          }

          void QueryParser::_set_jj_nt(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
          }

          ::org::apache::lucene::queryparser::classic::Token QueryParser::_get_token() const
          {
            return ::org::apache::lucene::queryparser::classic::Token(env->getObjectField(this$, fids$[fid_token]));
          }

          void QueryParser::_set_token(const ::org::apache::lucene::queryparser::classic::Token & a0) const
          {
            env->setObjectField(this$, fids$[fid_token], a0.this$);
          }

          ::org::apache::lucene::queryparser::classic::QueryParserTokenManager QueryParser::_get_token_source() const
          {
            return ::org::apache::lucene::queryparser::classic::QueryParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
          }

          void QueryParser::_set_token_source(const ::org::apache::lucene::queryparser::classic::QueryParserTokenManager & a0) const
          {
            env->setObjectField(this$, fids$[fid_token_source], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queryparser/classic/QueryParser$Operator.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryParser_Clause(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_Conjunction(t_QueryParser *self);
          static PyObject *t_QueryParser_Modifiers(t_QueryParser *self);
          static PyObject *t_QueryParser_Query(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args);
          static PyObject *t_QueryParser_Term(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_TopLevelQuery(t_QueryParser *self, PyObject *args);
          static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self);
          static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self);
          static PyObject *t_QueryParser_generateParseException(t_QueryParser *self);
          static PyObject *t_QueryParser_getNextToken(t_QueryParser *self);
          static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg);
          static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data);
          static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data);
          static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data);
          static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data);
          static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data);
          static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data);

          static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data);
          static PyGetSetDef t_QueryParser__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryParser, jj_nt),
            DECLARE_GETSET_FIELD(t_QueryParser, token),
            DECLARE_GETSET_FIELD(t_QueryParser, token_source),
            DECLARE_GET_FIELD(t_QueryParser, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryParser__methods_[] = {
            DECLARE_METHOD(t_QueryParser, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryParser, Clause, METH_O),
            DECLARE_METHOD(t_QueryParser, Conjunction, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, Modifiers, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, Query, METH_O),
            DECLARE_METHOD(t_QueryParser, ReInit, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser, Term, METH_O),
            DECLARE_METHOD(t_QueryParser, TopLevelQuery, METH_VARARGS),
            DECLARE_METHOD(t_QueryParser, disable_tracing, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, enable_tracing, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, generateParseException, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_QueryParser, getToken, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryParser, t_QueryParser, ::org::apache::lucene::queryparser::classic::QueryParserBase, QueryParser, t_QueryParser_init_, 0, 0, t_QueryParser__fields_, 0, 0);

          void t_QueryParser::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryParser), module, "QueryParser", 0);
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "Operator", make_descriptor(&PY_TYPE(QueryParser$Operator)));
          }

          void t_QueryParser::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "class_", make_descriptor(QueryParser::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "wrapfn_", make_descriptor(t_QueryParser::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryParser::initializeClass, 1)))
              return NULL;
            return t_QueryParser::wrap_Object(QueryParser(((t_QueryParser *) arg)->object.this$));
          }
          static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryParser::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::analysis::Analyzer a2((jobject) NULL);
            QueryParser object((jobject) NULL);

            if (!parseArgs(args, "Ksk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
            {
              INT_CALL(object = QueryParser(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryParser_Clause(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Clause(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Clause", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_Conjunction(t_QueryParser *self)
          {
            jint result;
            OBJ_CALL(result = self->object.Conjunction());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParser_Modifiers(t_QueryParser *self)
          {
            jint result;
            OBJ_CALL(result = self->object.Modifiers());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_QueryParser_Query(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Query(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Query", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::queryparser::classic::QueryParserTokenManager a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::QueryParserTokenManager::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::queryparser::classic::CharStream a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::classic::CharStream::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.ReInit(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            return callSuper(&PY_TYPE(QueryParser), (PyObject *) self, "ReInit", args, 2);
          }

          static PyObject *t_QueryParser_Term(t_QueryParser *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.Term(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "Term", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_TopLevelQuery(t_QueryParser *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.TopLevelQuery(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(QueryParser), (PyObject *) self, "TopLevelQuery", args, 2);
          }

          static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self)
          {
            OBJ_CALL(self->object.disable_tracing());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self)
          {
            OBJ_CALL(self->object.enable_tracing());
            Py_RETURN_NONE;
          }

          static PyObject *t_QueryParser_generateParseException(t_QueryParser *self)
          {
            ::org::apache::lucene::queryparser::classic::ParseException result((jobject) NULL);
            OBJ_CALL(result = self->object.generateParseException());
            return ::org::apache::lucene::queryparser::classic::t_ParseException::wrap_Object(result);
          }

          static PyObject *t_QueryParser_getNextToken(t_QueryParser *self)
          {
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);
            OBJ_CALL(result = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
          }

          static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::queryparser::classic::Token result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getToken(a0));
              return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getToken", arg);
            return NULL;
          }

          static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_jj_nt());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_jj_nt(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object._get_token());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
          static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::Token::initializeClass, &value))
            {
              INT_CALL(self->object._set_token(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "token", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParserTokenManager value((jobject) NULL);
            OBJ_CALL(value = self->object._get_token_source());
            return ::org::apache::lucene::queryparser::classic::t_QueryParserTokenManager::wrap_Object(value);
          }
          static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::queryparser::classic::QueryParserTokenManager value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::classic::QueryParserTokenManager::initializeClass, &value))
            {
              INT_CALL(self->object._set_token_source(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "token_source", arg);
            return -1;
          }

          static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data)
          {
            ::org::apache::lucene::queryparser::classic::Token value((jobject) NULL);
            OBJ_CALL(value = self->object.getNextToken());
            return ::org::apache::lucene::queryparser::classic::t_Token::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/CommonTermsQuery.h"
#include "org/apache/lucene/index/TermContext.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/BooleanClause$Occur.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {

        ::java::lang::Class *CommonTermsQuery::class$ = NULL;
        jmethodID *CommonTermsQuery::mids$ = NULL;
        bool CommonTermsQuery::live$ = false;

        jclass CommonTermsQuery::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/queries/CommonTermsQuery");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_689325ef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/search/BooleanClause$Occur;F)V");
            mids$[mid_init$_5975764c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/BooleanClause$Occur;Lorg/apache/lucene/search/BooleanClause$Occur;FZ)V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");
            mids$[mid_collectTermContext_ca4f0fd0] = env->getMethodID(cls, "collectTermContext", "(Lorg/apache/lucene/index/IndexReader;Ljava/util/List;[Lorg/apache/lucene/index/TermContext;[Lorg/apache/lucene/index/Term;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
            mids$[mid_getHighFreqMinimumNumberShouldMatch_54c6a176] = env->getMethodID(cls, "getHighFreqMinimumNumberShouldMatch", "()F");
            mids$[mid_getLowFreqMinimumNumberShouldMatch_54c6a176] = env->getMethodID(cls, "getLowFreqMinimumNumberShouldMatch", "()F");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_isCoordDisabled_54c6a16a] = env->getMethodID(cls, "isCoordDisabled", "()Z");
            mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setHighFreqMinimumNumberShouldMatch_06298cab] = env->getMethodID(cls, "setHighFreqMinimumNumberShouldMatch", "(F)V");
            mids$[mid_setLowFreqMinimumNumberShouldMatch_06298cab] = env->getMethodID(cls, "setLowFreqMinimumNumberShouldMatch", "(F)V");
            mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_newTermQuery_516e731e] = env->getMethodID(cls, "newTermQuery", "(Lorg/apache/lucene/index/Term;Lorg/apache/lucene/index/TermContext;)Lorg/apache/lucene/search/Query;");
            mids$[mid_calcLowFreqMinimumNumberShouldMatch_39c7bd23] = env->getMethodID(cls, "calcLowFreqMinimumNumberShouldMatch", "(I)I");
            mids$[mid_calcHighFreqMinimumNumberShouldMatch_39c7bd23] = env->getMethodID(cls, "calcHighFreqMinimumNumberShouldMatch", "(I)I");
            mids$[mid_buildQuery_4123263c] = env->getMethodID(cls, "buildQuery", "(I[Lorg/apache/lucene/index/TermContext;[Lorg/apache/lucene/index/Term;)Lorg/apache/lucene/search/Query;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CommonTermsQuery::CommonTermsQuery(const ::org::apache::lucene::search::BooleanClause$Occur & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1, jfloat a2) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_689325ef, a0.this$, a1.this$, a2)) {}

        CommonTermsQuery::CommonTermsQuery(const ::org::apache::lucene::search::BooleanClause$Occur & a0, const ::org::apache::lucene::search::BooleanClause$Occur & a1, jfloat a2, jboolean a3) : ::org::apache::lucene::search::Query(env->newObject(initializeClass, &mids$, mid_init$_5975764c, a0.this$, a1.this$, a2, a3)) {}

        void CommonTermsQuery::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }

        void CommonTermsQuery::collectTermContext(const ::org::apache::lucene::index::IndexReader & a0, const ::java::util::List & a1, const JArray< ::org::apache::lucene::index::TermContext > & a2, const JArray< ::org::apache::lucene::index::Term > & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_collectTermContext_ca4f0fd0], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        jboolean CommonTermsQuery::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void CommonTermsQuery::extractTerms(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
        }

        jfloat CommonTermsQuery::getHighFreqMinimumNumberShouldMatch() const
        {
          return env->callFloatMethod(this$, mids$[mid_getHighFreqMinimumNumberShouldMatch_54c6a176]);
        }

        jfloat CommonTermsQuery::getLowFreqMinimumNumberShouldMatch() const
        {
          return env->callFloatMethod(this$, mids$[mid_getLowFreqMinimumNumberShouldMatch_54c6a176]);
        }

        jint CommonTermsQuery::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean CommonTermsQuery::isCoordDisabled() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCoordDisabled_54c6a16a]);
        }

        ::org::apache::lucene::search::Query CommonTermsQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
        }

        void CommonTermsQuery::setHighFreqMinimumNumberShouldMatch(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setHighFreqMinimumNumberShouldMatch_06298cab], a0);
        }

        void CommonTermsQuery::setLowFreqMinimumNumberShouldMatch(jfloat a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setLowFreqMinimumNumberShouldMatch_06298cab], a0);
        }

        ::java::lang::String CommonTermsQuery::toString(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        static PyObject *t_CommonTermsQuery_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CommonTermsQuery_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CommonTermsQuery_init_(t_CommonTermsQuery *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CommonTermsQuery_add(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_collectTermContext(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_equals(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_extractTerms(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_getHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_getLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_hashCode(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_isCoordDisabled(t_CommonTermsQuery *self);
        static PyObject *t_CommonTermsQuery_rewrite(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_setHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_setLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg);
        static PyObject *t_CommonTermsQuery_toString(t_CommonTermsQuery *self, PyObject *args);
        static PyObject *t_CommonTermsQuery_get__coordDisabled(t_CommonTermsQuery *self, void *data);
        static PyObject *t_CommonTermsQuery_get__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data);
        static int t_CommonTermsQuery_set__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data);
        static PyObject *t_CommonTermsQuery_get__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data);
        static int t_CommonTermsQuery_set__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data);
        static PyGetSetDef t_CommonTermsQuery__fields_[] = {
          DECLARE_GET_FIELD(t_CommonTermsQuery, coordDisabled),
          DECLARE_GETSET_FIELD(t_CommonTermsQuery, highFreqMinimumNumberShouldMatch),
          DECLARE_GETSET_FIELD(t_CommonTermsQuery, lowFreqMinimumNumberShouldMatch),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CommonTermsQuery__methods_[] = {
          DECLARE_METHOD(t_CommonTermsQuery, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommonTermsQuery, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CommonTermsQuery, add, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, collectTermContext, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, equals, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, extractTerms, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getHighFreqMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, getLowFreqMinimumNumberShouldMatch, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, isCoordDisabled, METH_NOARGS),
          DECLARE_METHOD(t_CommonTermsQuery, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_CommonTermsQuery, setHighFreqMinimumNumberShouldMatch, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, setLowFreqMinimumNumberShouldMatch, METH_O),
          DECLARE_METHOD(t_CommonTermsQuery, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CommonTermsQuery, t_CommonTermsQuery, ::org::apache::lucene::search::Query, CommonTermsQuery, t_CommonTermsQuery_init_, 0, 0, t_CommonTermsQuery__fields_, 0, 0);

        void t_CommonTermsQuery::install(PyObject *module)
        {
          installType(&PY_TYPE(CommonTermsQuery), module, "CommonTermsQuery", 0);
        }

        void t_CommonTermsQuery::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CommonTermsQuery).tp_dict, "class_", make_descriptor(CommonTermsQuery::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CommonTermsQuery).tp_dict, "wrapfn_", make_descriptor(t_CommonTermsQuery::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CommonTermsQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CommonTermsQuery_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CommonTermsQuery::initializeClass, 1)))
            return NULL;
          return t_CommonTermsQuery::wrap_Object(CommonTermsQuery(((t_CommonTermsQuery *) arg)->object.this$));
        }
        static PyObject *t_CommonTermsQuery_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CommonTermsQuery::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CommonTermsQuery_init_(t_CommonTermsQuery *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;
              jfloat a2;
              CommonTermsQuery object((jobject) NULL);

              if (!parseArgs(args, "KKF", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a2))
              {
                INT_CALL(object = CommonTermsQuery(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::org::apache::lucene::search::BooleanClause$Occur a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::BooleanClause$Occur a1((jobject) NULL);
              PyTypeObject **p1;
              jfloat a2;
              jboolean a3;
              CommonTermsQuery object((jobject) NULL);

              if (!parseArgs(args, "KKFZ", ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, ::org::apache::lucene::search::BooleanClause$Occur::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a1, &p1, ::org::apache::lucene::search::t_BooleanClause$Occur::parameters_, &a2, &a3))
              {
                INT_CALL(object = CommonTermsQuery(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CommonTermsQuery_add(t_CommonTermsQuery *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_collectTermContext(t_CommonTermsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::java::util::List a1((jobject) NULL);
          PyTypeObject **p1;
          JArray< ::org::apache::lucene::index::TermContext > a2((jobject) NULL);
          JArray< ::org::apache::lucene::index::Term > a3((jobject) NULL);

          if (!parseArgs(args, "kK[k[k", ::org::apache::lucene::index::IndexReader::initializeClass, ::java::util::List::initializeClass, ::org::apache::lucene::index::TermContext::initializeClass, ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &p1, ::java::util::t_List::parameters_, &a2, &a3))
          {
            OBJ_CALL(self->object.collectTermContext(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "collectTermContext", args);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_equals(t_CommonTermsQuery *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_CommonTermsQuery_extractTerms(t_CommonTermsQuery *self, PyObject *args)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.extractTerms(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "extractTerms", args, 2);
        }

        static PyObject *t_CommonTermsQuery_getHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getHighFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_CommonTermsQuery_getLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self)
        {
          jfloat result;
          OBJ_CALL(result = self->object.getLowFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_CommonTermsQuery_hashCode(t_CommonTermsQuery *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_CommonTermsQuery_isCoordDisabled(t_CommonTermsQuery *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isCoordDisabled());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_CommonTermsQuery_rewrite(t_CommonTermsQuery *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.rewrite(a0));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_CommonTermsQuery_setHighFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setHighFreqMinimumNumberShouldMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setHighFreqMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_setLowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg)
        {
          jfloat a0;

          if (!parseArg(arg, "F", &a0))
          {
            OBJ_CALL(self->object.setLowFreqMinimumNumberShouldMatch(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setLowFreqMinimumNumberShouldMatch", arg);
          return NULL;
        }

        static PyObject *t_CommonTermsQuery_toString(t_CommonTermsQuery *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.toString(a0));
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CommonTermsQuery), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CommonTermsQuery_get__coordDisabled(t_CommonTermsQuery *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCoordDisabled());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_CommonTermsQuery_get__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getHighFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CommonTermsQuery_set__highFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setHighFreqMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "highFreqMinimumNumberShouldMatch", arg);
          return -1;
        }

        static PyObject *t_CommonTermsQuery_get__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, void *data)
        {
          jfloat value;
          OBJ_CALL(value = self->object.getLowFreqMinimumNumberShouldMatch());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CommonTermsQuery_set__lowFreqMinimumNumberShouldMatch(t_CommonTermsQuery *self, PyObject *arg, void *data)
        {
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object.setLowFreqMinimumNumberShouldMatch(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "lowFreqMinimumNumberShouldMatch", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/Analyzer$GlobalReuseStrategy.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/Analyzer$TokenStreamComponents.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *Analyzer$GlobalReuseStrategy::class$ = NULL;
        jmethodID *Analyzer$GlobalReuseStrategy::mids$ = NULL;
        bool Analyzer$GlobalReuseStrategy::live$ = false;

        jclass Analyzer$GlobalReuseStrategy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/Analyzer$GlobalReuseStrategy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getReusableComponents_19769f4a] = env->getMethodID(cls, "getReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");
            mids$[mid_setReusableComponents_66577a3f] = env->getMethodID(cls, "setReusableComponents", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Analyzer$GlobalReuseStrategy::Analyzer$GlobalReuseStrategy() : ::org::apache::lucene::analysis::Analyzer$ReuseStrategy(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents Analyzer$GlobalReuseStrategy::getReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents(env->callObjectMethod(this$, mids$[mid_getReusableComponents_19769f4a], a0.this$, a1.this$));
        }

        void Analyzer$GlobalReuseStrategy::setReusableComponents(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_setReusableComponents_66577a3f], a0.this$, a1.this$, a2.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_Analyzer$GlobalReuseStrategy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Analyzer$GlobalReuseStrategy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Analyzer$GlobalReuseStrategy_init_(t_Analyzer$GlobalReuseStrategy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Analyzer$GlobalReuseStrategy_getReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args);
        static PyObject *t_Analyzer$GlobalReuseStrategy_setReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args);

        static PyMethodDef t_Analyzer$GlobalReuseStrategy__methods_[] = {
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, getReusableComponents, METH_VARARGS),
          DECLARE_METHOD(t_Analyzer$GlobalReuseStrategy, setReusableComponents, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Analyzer$GlobalReuseStrategy, t_Analyzer$GlobalReuseStrategy, ::org::apache::lucene::analysis::Analyzer$ReuseStrategy, Analyzer$GlobalReuseStrategy, t_Analyzer$GlobalReuseStrategy_init_, 0, 0, 0, 0, 0);

        void t_Analyzer$GlobalReuseStrategy::install(PyObject *module)
        {
          installType(&PY_TYPE(Analyzer$GlobalReuseStrategy), module, "Analyzer$GlobalReuseStrategy", 0);
        }

        void t_Analyzer$GlobalReuseStrategy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Analyzer$GlobalReuseStrategy).tp_dict, "class_", make_descriptor(Analyzer$GlobalReuseStrategy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Analyzer$GlobalReuseStrategy).tp_dict, "wrapfn_", make_descriptor(t_Analyzer$GlobalReuseStrategy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Analyzer$GlobalReuseStrategy).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Analyzer$GlobalReuseStrategy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Analyzer$GlobalReuseStrategy::initializeClass, 1)))
            return NULL;
          return t_Analyzer$GlobalReuseStrategy::wrap_Object(Analyzer$GlobalReuseStrategy(((t_Analyzer$GlobalReuseStrategy *) arg)->object.this$));
        }
        static PyObject *t_Analyzer$GlobalReuseStrategy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Analyzer$GlobalReuseStrategy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Analyzer$GlobalReuseStrategy_init_(t_Analyzer$GlobalReuseStrategy *self, PyObject *args, PyObject *kwds)
        {
          Analyzer$GlobalReuseStrategy object((jobject) NULL);

          INT_CALL(object = Analyzer$GlobalReuseStrategy());
          self->object = object;

          return 0;
        }

        static PyObject *t_Analyzer$GlobalReuseStrategy_getReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getReusableComponents(a0, a1));
            return ::org::apache::lucene::analysis::t_Analyzer$TokenStreamComponents::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(Analyzer$GlobalReuseStrategy), (PyObject *) self, "getReusableComponents", args, 2);
        }

        static PyObject *t_Analyzer$GlobalReuseStrategy_setReusableComponents(t_Analyzer$GlobalReuseStrategy *self, PyObject *args)
        {
          ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents a2((jobject) NULL);

          if (!parseArgs(args, "ksk", ::org::apache::lucene::analysis::Analyzer::initializeClass, ::org::apache::lucene::analysis::Analyzer$TokenStreamComponents::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.setReusableComponents(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(Analyzer$GlobalReuseStrategy), (PyObject *) self, "setReusableComponents", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/NumericUtils$LongRangeBuilder.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *NumericUtils$LongRangeBuilder::class$ = NULL;
        jmethodID *NumericUtils$LongRangeBuilder::mids$ = NULL;
        bool NumericUtils$LongRangeBuilder::live$ = false;

        jclass NumericUtils$LongRangeBuilder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/NumericUtils$LongRangeBuilder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_addRange_594e5ee6] = env->getMethodID(cls, "addRange", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_addRange_42663baa] = env->getMethodID(cls, "addRange", "(JJI)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        NumericUtils$LongRangeBuilder::NumericUtils$LongRangeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void NumericUtils$LongRangeBuilder::addRange(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_594e5ee6], a0.this$, a1.this$);
        }

        void NumericUtils$LongRangeBuilder::addRange(jlong a0, jlong a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addRange_42663baa], a0, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_NumericUtils$LongRangeBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumericUtils$LongRangeBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumericUtils$LongRangeBuilder_init_(t_NumericUtils$LongRangeBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_NumericUtils$LongRangeBuilder_addRange(t_NumericUtils$LongRangeBuilder *self, PyObject *args);

        static PyMethodDef t_NumericUtils$LongRangeBuilder__methods_[] = {
          DECLARE_METHOD(t_NumericUtils$LongRangeBuilder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$LongRangeBuilder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NumericUtils$LongRangeBuilder, addRange, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumericUtils$LongRangeBuilder, t_NumericUtils$LongRangeBuilder, ::java::lang::Object, NumericUtils$LongRangeBuilder, t_NumericUtils$LongRangeBuilder_init_, 0, 0, 0, 0, 0);

        void t_NumericUtils$LongRangeBuilder::install(PyObject *module)
        {
          installType(&PY_TYPE(NumericUtils$LongRangeBuilder), module, "NumericUtils$LongRangeBuilder", 0);
        }

        void t_NumericUtils$LongRangeBuilder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NumericUtils$LongRangeBuilder).tp_dict, "class_", make_descriptor(NumericUtils$LongRangeBuilder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NumericUtils$LongRangeBuilder).tp_dict, "wrapfn_", make_descriptor(t_NumericUtils$LongRangeBuilder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NumericUtils$LongRangeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumericUtils$LongRangeBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NumericUtils$LongRangeBuilder::initializeClass, 1)))
            return NULL;
          return t_NumericUtils$LongRangeBuilder::wrap_Object(NumericUtils$LongRangeBuilder(((t_NumericUtils$LongRangeBuilder *) arg)->object.this$));
        }
        static PyObject *t_NumericUtils$LongRangeBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NumericUtils$LongRangeBuilder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_NumericUtils$LongRangeBuilder_init_(t_NumericUtils$LongRangeBuilder *self, PyObject *args, PyObject *kwds)
        {
          NumericUtils$LongRangeBuilder object((jobject) NULL);

          INT_CALL(object = NumericUtils$LongRangeBuilder());
          self->object = object;

          return 0;
        }

        static PyObject *t_NumericUtils$LongRangeBuilder_addRange(t_NumericUtils$LongRangeBuilder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addRange(a0, a1));
                Py_RETURN_NONE;
              }
            }
            break;
           case 3:
            {
              jlong a0;
              jlong a1;
              jint a2;

              if (!parseArgs(args, "JJI", &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.addRange(a0, a1, a2));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "addRange", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ConstantScoreAutoRewrite.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ConstantScoreAutoRewrite::class$ = NULL;
        jmethodID *ConstantScoreAutoRewrite::mids$ = NULL;
        bool ConstantScoreAutoRewrite::live$ = false;
        jdouble ConstantScoreAutoRewrite::DEFAULT_DOC_COUNT_PERCENT = (jdouble) 0;
        jint ConstantScoreAutoRewrite::DEFAULT_TERM_COUNT_CUTOFF = (jint) 0;

        jclass ConstantScoreAutoRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ConstantScoreAutoRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getDocCountPercent_54c6a174] = env->getMethodID(cls, "getDocCountPercent", "()D");
            mids$[mid_getTermCountCutoff_54c6a179] = env->getMethodID(cls, "getTermCountCutoff", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_setDocCountPercent_5d1c7645] = env->getMethodID(cls, "setDocCountPercent", "(D)V");
            mids$[mid_setTermCountCutoff_39c7bd3c] = env->getMethodID(cls, "setTermCountCutoff", "(I)V");
            mids$[mid_addClause_82a56efb] = env->getMethodID(cls, "addClause", "(Lorg/apache/lucene/search/BooleanQuery;Lorg/apache/lucene/index/Term;IFLorg/apache/lucene/index/TermContext;)V");
            mids$[mid_getTopLevelQuery_6f9339e7] = env->getMethodID(cls, "getTopLevelQuery", "()Lorg/apache/lucene/search/BooleanQuery;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_DOC_COUNT_PERCENT = env->getStaticDoubleField(cls, "DEFAULT_DOC_COUNT_PERCENT");
            DEFAULT_TERM_COUNT_CUTOFF = env->getStaticIntField(cls, "DEFAULT_TERM_COUNT_CUTOFF");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jboolean ConstantScoreAutoRewrite::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jdouble ConstantScoreAutoRewrite::getDocCountPercent() const
        {
          return env->callDoubleMethod(this$, mids$[mid_getDocCountPercent_54c6a174]);
        }

        jint ConstantScoreAutoRewrite::getTermCountCutoff() const
        {
          return env->callIntMethod(this$, mids$[mid_getTermCountCutoff_54c6a179]);
        }

        jint ConstantScoreAutoRewrite::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query ConstantScoreAutoRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }

        void ConstantScoreAutoRewrite::setDocCountPercent(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setDocCountPercent_5d1c7645], a0);
        }

        void ConstantScoreAutoRewrite::setTermCountCutoff(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTermCountCutoff_39c7bd3c], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_of_(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_equals(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_getDocCountPercent(t_ConstantScoreAutoRewrite *self);
        static PyObject *t_ConstantScoreAutoRewrite_getTermCountCutoff(t_ConstantScoreAutoRewrite *self);
        static PyObject *t_ConstantScoreAutoRewrite_hashCode(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_rewrite(t_ConstantScoreAutoRewrite *self, PyObject *args);
        static PyObject *t_ConstantScoreAutoRewrite_setDocCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_setTermCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg);
        static PyObject *t_ConstantScoreAutoRewrite_get__docCountPercent(t_ConstantScoreAutoRewrite *self, void *data);
        static int t_ConstantScoreAutoRewrite_set__docCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data);
        static PyObject *t_ConstantScoreAutoRewrite_get__termCountCutoff(t_ConstantScoreAutoRewrite *self, void *data);
        static int t_ConstantScoreAutoRewrite_set__termCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data);
        static PyObject *t_ConstantScoreAutoRewrite_get__parameters_(t_ConstantScoreAutoRewrite *self, void *data);
        static PyGetSetDef t_ConstantScoreAutoRewrite__fields_[] = {
          DECLARE_GETSET_FIELD(t_ConstantScoreAutoRewrite, docCountPercent),
          DECLARE_GETSET_FIELD(t_ConstantScoreAutoRewrite, termCountCutoff),
          DECLARE_GET_FIELD(t_ConstantScoreAutoRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ConstantScoreAutoRewrite__methods_[] = {
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, of_, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, equals, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, getDocCountPercent, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, getTermCountCutoff, METH_NOARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, rewrite, METH_VARARGS),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, setDocCountPercent, METH_O),
          DECLARE_METHOD(t_ConstantScoreAutoRewrite, setTermCountCutoff, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ConstantScoreAutoRewrite, t_ConstantScoreAutoRewrite, ::org::apache::lucene::search::TermCollectingRewrite, ConstantScoreAutoRewrite, abstract_init, 0, 0, t_ConstantScoreAutoRewrite__fields_, 0, 0);
        PyObject *t_ConstantScoreAutoRewrite::wrap_Object(const ConstantScoreAutoRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ConstantScoreAutoRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ConstantScoreAutoRewrite *self = (t_ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ConstantScoreAutoRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ConstantScoreAutoRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ConstantScoreAutoRewrite *self = (t_ConstantScoreAutoRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ConstantScoreAutoRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(ConstantScoreAutoRewrite), module, "ConstantScoreAutoRewrite", 0);
        }

        void t_ConstantScoreAutoRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "class_", make_descriptor(ConstantScoreAutoRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "wrapfn_", make_descriptor(t_ConstantScoreAutoRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(ConstantScoreAutoRewrite::initializeClass);
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "DEFAULT_DOC_COUNT_PERCENT", make_descriptor(ConstantScoreAutoRewrite::DEFAULT_DOC_COUNT_PERCENT));
          PyDict_SetItemString(PY_TYPE(ConstantScoreAutoRewrite).tp_dict, "DEFAULT_TERM_COUNT_CUTOFF", make_descriptor(ConstantScoreAutoRewrite::DEFAULT_TERM_COUNT_CUTOFF));
        }

        static PyObject *t_ConstantScoreAutoRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ConstantScoreAutoRewrite::initializeClass, 1)))
            return NULL;
          return t_ConstantScoreAutoRewrite::wrap_Object(ConstantScoreAutoRewrite(((t_ConstantScoreAutoRewrite *) arg)->object.this$));
        }
        static PyObject *t_ConstantScoreAutoRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ConstantScoreAutoRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ConstantScoreAutoRewrite_of_(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_ConstantScoreAutoRewrite_equals(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreAutoRewrite), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ConstantScoreAutoRewrite_getDocCountPercent(t_ConstantScoreAutoRewrite *self)
        {
          jdouble result;
          OBJ_CALL(result = self->object.getDocCountPercent());
          return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_ConstantScoreAutoRewrite_getTermCountCutoff(t_ConstantScoreAutoRewrite *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTermCountCutoff());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_ConstantScoreAutoRewrite_hashCode(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ConstantScoreAutoRewrite), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ConstantScoreAutoRewrite_rewrite(t_ConstantScoreAutoRewrite *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(ConstantScoreAutoRewrite), (PyObject *) self, "rewrite", args, 2);
        }

        static PyObject *t_ConstantScoreAutoRewrite_setDocCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.setDocCountPercent(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setDocCountPercent", arg);
          return NULL;
        }

        static PyObject *t_ConstantScoreAutoRewrite_setTermCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.setTermCountCutoff(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setTermCountCutoff", arg);
          return NULL;
        }
        static PyObject *t_ConstantScoreAutoRewrite_get__parameters_(t_ConstantScoreAutoRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_ConstantScoreAutoRewrite_get__docCountPercent(t_ConstantScoreAutoRewrite *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object.getDocCountPercent());
          return PyFloat_FromDouble((double) value);
        }
        static int t_ConstantScoreAutoRewrite_set__docCountPercent(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data)
        {
          {
            jdouble value;
            if (!parseArg(arg, "D", &value))
            {
              INT_CALL(self->object.setDocCountPercent(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "docCountPercent", arg);
          return -1;
        }

        static PyObject *t_ConstantScoreAutoRewrite_get__termCountCutoff(t_ConstantScoreAutoRewrite *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTermCountCutoff());
          return PyInt_FromLong((long) value);
        }
        static int t_ConstantScoreAutoRewrite_set__termCountCutoff(t_ConstantScoreAutoRewrite *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setTermCountCutoff(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "termCountCutoff", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/Lock$With.h"
#include "org/apache/lucene/store/Lock.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *Lock$With::class$ = NULL;
        jmethodID *Lock$With::mids$ = NULL;
        bool Lock$With::live$ = false;

        jclass Lock$With::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/Lock$With");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_6e48139c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Lock;J)V");
            mids$[mid_run_846352c3] = env->getMethodID(cls, "run", "()Ljava/lang/Object;");
            mids$[mid_doBody_846352c3] = env->getMethodID(cls, "doBody", "()Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Lock$With::Lock$With(const ::org::apache::lucene::store::Lock & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e48139c, a0.this$, a1)) {}

        ::java::lang::Object Lock$With::run() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_run_846352c3]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_Lock$With_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Lock$With_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Lock$With_init_(t_Lock$With *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Lock$With_run(t_Lock$With *self);

        static PyMethodDef t_Lock$With__methods_[] = {
          DECLARE_METHOD(t_Lock$With, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock$With, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Lock$With, run, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Lock$With, t_Lock$With, ::java::lang::Object, Lock$With, t_Lock$With_init_, 0, 0, 0, 0, 0);

        void t_Lock$With::install(PyObject *module)
        {
          installType(&PY_TYPE(Lock$With), module, "Lock$With", 0);
        }

        void t_Lock$With::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Lock$With).tp_dict, "class_", make_descriptor(Lock$With::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Lock$With).tp_dict, "wrapfn_", make_descriptor(t_Lock$With::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Lock$With).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Lock$With_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Lock$With::initializeClass, 1)))
            return NULL;
          return t_Lock$With::wrap_Object(Lock$With(((t_Lock$With *) arg)->object.this$));
        }
        static PyObject *t_Lock$With_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Lock$With::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Lock$With_init_(t_Lock$With *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Lock a0((jobject) NULL);
          jlong a1;
          Lock$With object((jobject) NULL);

          if (!parseArgs(args, "kJ", ::org::apache::lucene::store::Lock::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Lock$With(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Lock$With_run(t_Lock$With *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.run());
          return ::java::lang::t_Object::wrap_Object(result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/es/SpanishLightStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {

          ::java::lang::Class *SpanishLightStemFilterFactory::class$ = NULL;
          jmethodID *SpanishLightStemFilterFactory::mids$ = NULL;
          bool SpanishLightStemFilterFactory::live$ = false;

          jclass SpanishLightStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/es/SpanishLightStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanishLightStemFilterFactory::SpanishLightStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream SpanishLightStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace es {
          static PyObject *t_SpanishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanishLightStemFilterFactory_init_(t_SpanishLightStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanishLightStemFilterFactory_create(t_SpanishLightStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_SpanishLightStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanishLightStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanishLightStemFilterFactory, t_SpanishLightStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, SpanishLightStemFilterFactory, t_SpanishLightStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_SpanishLightStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanishLightStemFilterFactory), module, "SpanishLightStemFilterFactory", 0);
          }

          void t_SpanishLightStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilterFactory).tp_dict, "class_", make_descriptor(SpanishLightStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_SpanishLightStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanishLightStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanishLightStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanishLightStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_SpanishLightStemFilterFactory::wrap_Object(SpanishLightStemFilterFactory(((t_SpanishLightStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_SpanishLightStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanishLightStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanishLightStemFilterFactory_init_(t_SpanishLightStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            SpanishLightStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = SpanishLightStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanishLightStemFilterFactory_create(t_SpanishLightStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanishLightStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/compressing/CompressionMode.h"
#include "org/apache/lucene/codecs/compressing/Decompressor.h"
#include "org/apache/lucene/codecs/compressing/Compressor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {

          ::java::lang::Class *CompressionMode::class$ = NULL;
          jmethodID *CompressionMode::mids$ = NULL;
          bool CompressionMode::live$ = false;
          CompressionMode *CompressionMode::FAST = NULL;
          CompressionMode *CompressionMode::FAST_DECOMPRESSION = NULL;
          CompressionMode *CompressionMode::HIGH_COMPRESSION = NULL;

          jclass CompressionMode::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/compressing/CompressionMode");

              mids$ = new jmethodID[max_mid];
              mids$[mid_newCompressor_eb04ef38] = env->getMethodID(cls, "newCompressor", "()Lorg/apache/lucene/codecs/compressing/Compressor;");
              mids$[mid_newDecompressor_7b8f1b1d] = env->getMethodID(cls, "newDecompressor", "()Lorg/apache/lucene/codecs/compressing/Decompressor;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              FAST = new CompressionMode(env->getStaticObjectField(cls, "FAST", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              FAST_DECOMPRESSION = new CompressionMode(env->getStaticObjectField(cls, "FAST_DECOMPRESSION", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              HIGH_COMPRESSION = new CompressionMode(env->getStaticObjectField(cls, "HIGH_COMPRESSION", "Lorg/apache/lucene/codecs/compressing/CompressionMode;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::codecs::compressing::Compressor CompressionMode::newCompressor() const
          {
            return ::org::apache::lucene::codecs::compressing::Compressor(env->callObjectMethod(this$, mids$[mid_newCompressor_eb04ef38]));
          }

          ::org::apache::lucene::codecs::compressing::Decompressor CompressionMode::newDecompressor() const
          {
            return ::org::apache::lucene::codecs::compressing::Decompressor(env->callObjectMethod(this$, mids$[mid_newDecompressor_7b8f1b1d]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace compressing {
          static PyObject *t_CompressionMode_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressionMode_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CompressionMode_newCompressor(t_CompressionMode *self);
          static PyObject *t_CompressionMode_newDecompressor(t_CompressionMode *self);

          static PyMethodDef t_CompressionMode__methods_[] = {
            DECLARE_METHOD(t_CompressionMode, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressionMode, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CompressionMode, newCompressor, METH_NOARGS),
            DECLARE_METHOD(t_CompressionMode, newDecompressor, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CompressionMode, t_CompressionMode, ::java::lang::Object, CompressionMode, abstract_init, 0, 0, 0, 0, 0);

          void t_CompressionMode::install(PyObject *module)
          {
            installType(&PY_TYPE(CompressionMode), module, "CompressionMode", 0);
          }

          void t_CompressionMode::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "class_", make_descriptor(CompressionMode::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "wrapfn_", make_descriptor(t_CompressionMode::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CompressionMode::initializeClass);
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "FAST", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::FAST)));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "FAST_DECOMPRESSION", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::FAST_DECOMPRESSION)));
            PyDict_SetItemString(PY_TYPE(CompressionMode).tp_dict, "HIGH_COMPRESSION", make_descriptor(t_CompressionMode::wrap_Object(*CompressionMode::HIGH_COMPRESSION)));
          }

          static PyObject *t_CompressionMode_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CompressionMode::initializeClass, 1)))
              return NULL;
            return t_CompressionMode::wrap_Object(CompressionMode(((t_CompressionMode *) arg)->object.this$));
          }
          static PyObject *t_CompressionMode_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CompressionMode::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CompressionMode_newCompressor(t_CompressionMode *self)
          {
            ::org::apache::lucene::codecs::compressing::Compressor result((jobject) NULL);
            OBJ_CALL(result = self->object.newCompressor());
            return ::org::apache::lucene::codecs::compressing::t_Compressor::wrap_Object(result);
          }

          static PyObject *t_CompressionMode_newDecompressor(t_CompressionMode *self)
          {
            ::org::apache::lucene::codecs::compressing::Decompressor result((jobject) NULL);
            OBJ_CALL(result = self->object.newDecompressor());
            return ::org::apache::lucene::codecs::compressing::t_Decompressor::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *AbstractGroupFacetCollector$FacetEntry::class$ = NULL;
          jmethodID *AbstractGroupFacetCollector$FacetEntry::mids$ = NULL;
          bool AbstractGroupFacetCollector$FacetEntry::live$ = false;

          jclass AbstractGroupFacetCollector$FacetEntry::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/AbstractGroupFacetCollector$FacetEntry");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_738fc2ce] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/BytesRef;I)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getCount_54c6a179] = env->getMethodID(cls, "getCount", "()I");
              mids$[mid_getValue_4ae19461] = env->getMethodID(cls, "getValue", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AbstractGroupFacetCollector$FacetEntry::AbstractGroupFacetCollector$FacetEntry(const ::org::apache::lucene::util::BytesRef & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_738fc2ce, a0.this$, a1)) {}

          jboolean AbstractGroupFacetCollector$FacetEntry::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint AbstractGroupFacetCollector$FacetEntry::getCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getCount_54c6a179]);
          }

          ::org::apache::lucene::util::BytesRef AbstractGroupFacetCollector$FacetEntry::getValue() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getValue_4ae19461]));
          }

          jint AbstractGroupFacetCollector$FacetEntry::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String AbstractGroupFacetCollector$FacetEntry::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AbstractGroupFacetCollector$FacetEntry_init_(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_equals(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getCount(t_AbstractGroupFacetCollector$FacetEntry *self);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getValue(t_AbstractGroupFacetCollector$FacetEntry *self);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_hashCode(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_toString(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__count(t_AbstractGroupFacetCollector$FacetEntry *self, void *data);
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__value(t_AbstractGroupFacetCollector$FacetEntry *self, void *data);
          static PyGetSetDef t_AbstractGroupFacetCollector$FacetEntry__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$FacetEntry, count),
            DECLARE_GET_FIELD(t_AbstractGroupFacetCollector$FacetEntry, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractGroupFacetCollector$FacetEntry__methods_[] = {
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, equals, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, getCount, METH_NOARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, getValue, METH_NOARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_AbstractGroupFacetCollector$FacetEntry, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractGroupFacetCollector$FacetEntry, t_AbstractGroupFacetCollector$FacetEntry, ::java::lang::Object, AbstractGroupFacetCollector$FacetEntry, t_AbstractGroupFacetCollector$FacetEntry_init_, 0, 0, t_AbstractGroupFacetCollector$FacetEntry__fields_, 0, 0);

          void t_AbstractGroupFacetCollector$FacetEntry::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), module, "AbstractGroupFacetCollector$FacetEntry", 0);
          }

          void t_AbstractGroupFacetCollector$FacetEntry::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$FacetEntry).tp_dict, "class_", make_descriptor(AbstractGroupFacetCollector$FacetEntry::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$FacetEntry).tp_dict, "wrapfn_", make_descriptor(t_AbstractGroupFacetCollector$FacetEntry::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractGroupFacetCollector$FacetEntry).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractGroupFacetCollector$FacetEntry::initializeClass, 1)))
              return NULL;
            return t_AbstractGroupFacetCollector$FacetEntry::wrap_Object(AbstractGroupFacetCollector$FacetEntry(((t_AbstractGroupFacetCollector$FacetEntry *) arg)->object.this$));
          }
          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractGroupFacetCollector$FacetEntry::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AbstractGroupFacetCollector$FacetEntry_init_(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
            jint a1;
            AbstractGroupFacetCollector$FacetEntry object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              INT_CALL(object = AbstractGroupFacetCollector$FacetEntry(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_equals(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getCount(t_AbstractGroupFacetCollector$FacetEntry *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_getValue(t_AbstractGroupFacetCollector$FacetEntry *self)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_hashCode(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_toString(t_AbstractGroupFacetCollector$FacetEntry *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AbstractGroupFacetCollector$FacetEntry), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__count(t_AbstractGroupFacetCollector$FacetEntry *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_AbstractGroupFacetCollector$FacetEntry_get__value(t_AbstractGroupFacetCollector$FacetEntry *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemFilterFactory.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemFilterFactory::class$ = NULL;
          jmethodID *GermanMinimalStemFilterFactory::mids$ = NULL;
          bool GermanMinimalStemFilterFactory::live$ = false;

          jclass GermanMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemFilterFactory::GermanMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemFilterFactory_init_(t_GermanMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemFilterFactory_create(t_GermanMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanMinimalStemFilterFactory, t_GermanMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanMinimalStemFilterFactory, t_GermanMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GermanMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemFilterFactory), module, "GermanMinimalStemFilterFactory", 0);
          }

          void t_GermanMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(GermanMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemFilterFactory::wrap_Object(GermanMinimalStemFilterFactory(((t_GermanMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemFilterFactory_init_(t_GermanMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanMinimalStemFilterFactory_create(t_GermanMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter.h"
#include "org/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyWriter.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {

            ::java::lang::Class *DirectoryTaxonomyWriter::class$ = NULL;
            jmethodID *DirectoryTaxonomyWriter::mids$ = NULL;
            bool DirectoryTaxonomyWriter::live$ = false;
            ::java::lang::String *DirectoryTaxonomyWriter::INDEX_EPOCH = NULL;

            jclass DirectoryTaxonomyWriter::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_init$_288989fd] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)V");
                mids$[mid_init$_c98cdfb3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;Lorg/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache;)V");
                mids$[mid_addCategory_283f83f5] = env->getMethodID(cls, "addCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
                mids$[mid_addTaxonomy_0e53fb1b] = env->getMethodID(cls, "addTaxonomy", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$OrdinalMap;)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_commit_54c6a166] = env->getMethodID(cls, "commit", "()V");
                mids$[mid_defaultTaxonomyWriterCache_3cef12bd] = env->getStaticMethodID(cls, "defaultTaxonomyWriterCache", "()Lorg/apache/lucene/facet/taxonomy/writercache/TaxonomyWriterCache;");
                mids$[mid_getCommitData_db60befd] = env->getMethodID(cls, "getCommitData", "()Ljava/util/Map;");
                mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
                mids$[mid_getParent_39c7bd23] = env->getMethodID(cls, "getParent", "(I)I");
                mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
                mids$[mid_getTaxonomyEpoch_54c6a17a] = env->getMethodID(cls, "getTaxonomyEpoch", "()J");
                mids$[mid_prepareCommit_54c6a166] = env->getMethodID(cls, "prepareCommit", "()V");
                mids$[mid_replaceTaxonomy_2e261ef2] = env->getMethodID(cls, "replaceTaxonomy", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_rollback_54c6a166] = env->getMethodID(cls, "rollback", "()V");
                mids$[mid_setCacheMissesUntilFill_39c7bd3c] = env->getMethodID(cls, "setCacheMissesUntilFill", "(I)V");
                mids$[mid_setCommitData_4c9e2b1c] = env->getMethodID(cls, "setCommitData", "(Ljava/util/Map;)V");
                mids$[mid_unlock_2e261ef2] = env->getStaticMethodID(cls, "unlock", "(Lorg/apache/lucene/store/Directory;)V");
                mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
                mids$[mid_openIndexWriter_cd637c77] = env->getMethodID(cls, "openIndexWriter", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig;)Lorg/apache/lucene/index/IndexWriter;");
                mids$[mid_createIndexWriterConfig_ecf4c6f7] = env->getMethodID(cls, "createIndexWriterConfig", "(Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)Lorg/apache/lucene/index/IndexWriterConfig;");
                mids$[mid_closeResources_54c6a166] = env->getMethodID(cls, "closeResources", "()V");
                mids$[mid_findCategory_283f83f5] = env->getMethodID(cls, "findCategory", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                INDEX_EPOCH = new ::java::lang::String(env->getStaticObjectField(cls, "INDEX_EPOCH", "Ljava/lang/String;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_288989fd, a0.this$, a1.this$)) {}

            DirectoryTaxonomyWriter::DirectoryTaxonomyWriter(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a1, const ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c98cdfb3, a0.this$, a1.this$, a2.this$)) {}

            jint DirectoryTaxonomyWriter::addCategory(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
            {
              return env->callIntMethod(this$, mids$[mid_addCategory_283f83f5], a0.this$);
            }

            void DirectoryTaxonomyWriter::addTaxonomy(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_addTaxonomy_0e53fb1b], a0.this$, a1.this$);
            }

            void DirectoryTaxonomyWriter::close() const
            {
              env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
            }

            void DirectoryTaxonomyWriter::commit() const
            {
              env->callVoidMethod(this$, mids$[mid_commit_54c6a166]);
            }

            ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache DirectoryTaxonomyWriter::defaultTaxonomyWriterCache()
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache(env->callStaticObjectMethod(cls, mids$[mid_defaultTaxonomyWriterCache_3cef12bd]));
            }

            ::java::util::Map DirectoryTaxonomyWriter::getCommitData() const
            {
              return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitData_db60befd]));
            }

            ::org::apache::lucene::store::Directory DirectoryTaxonomyWriter::getDirectory() const
            {
              return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
            }

            jint DirectoryTaxonomyWriter::getParent(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_getParent_39c7bd23], a0);
            }

            jint DirectoryTaxonomyWriter::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
            }

            jlong DirectoryTaxonomyWriter::getTaxonomyEpoch() const
            {
              return env->callLongMethod(this$, mids$[mid_getTaxonomyEpoch_54c6a17a]);
            }

            void DirectoryTaxonomyWriter::prepareCommit() const
            {
              env->callVoidMethod(this$, mids$[mid_prepareCommit_54c6a166]);
            }

            void DirectoryTaxonomyWriter::replaceTaxonomy(const ::org::apache::lucene::store::Directory & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_replaceTaxonomy_2e261ef2], a0.this$);
            }

            void DirectoryTaxonomyWriter::rollback() const
            {
              env->callVoidMethod(this$, mids$[mid_rollback_54c6a166]);
            }

            void DirectoryTaxonomyWriter::setCacheMissesUntilFill(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setCacheMissesUntilFill_39c7bd3c], a0);
            }

            void DirectoryTaxonomyWriter::setCommitData(const ::java::util::Map & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setCommitData_4c9e2b1c], a0.this$);
            }

            void DirectoryTaxonomyWriter::unlock(const ::org::apache::lucene::store::Directory & a0)
            {
              jclass cls = env->getClass(initializeClass);
              env->callStaticVoidMethod(cls, mids$[mid_unlock_2e261ef2], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$DiskOrdinalMap.h"
#include "org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter$MemoryOrdinalMap.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace directory {
            static PyObject *t_DirectoryTaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter_init_(t_DirectoryTaxonomyWriter *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DirectoryTaxonomyWriter_addCategory(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_addTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *args);
            static PyObject *t_DirectoryTaxonomyWriter_close(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_commit(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_defaultTaxonomyWriterCache(PyTypeObject *type);
            static PyObject *t_DirectoryTaxonomyWriter_getCommitData(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getDirectory(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getParent(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_getSize(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_getTaxonomyEpoch(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_prepareCommit(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_replaceTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_rollback(t_DirectoryTaxonomyWriter *self);
            static PyObject *t_DirectoryTaxonomyWriter_setCacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_setCommitData(t_DirectoryTaxonomyWriter *self, PyObject *arg);
            static PyObject *t_DirectoryTaxonomyWriter_unlock(PyTypeObject *type, PyObject *arg);
            static int t_DirectoryTaxonomyWriter_set__cacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__commitData(t_DirectoryTaxonomyWriter *self, void *data);
            static int t_DirectoryTaxonomyWriter_set__commitData(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__directory(t_DirectoryTaxonomyWriter *self, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__size(t_DirectoryTaxonomyWriter *self, void *data);
            static PyObject *t_DirectoryTaxonomyWriter_get__taxonomyEpoch(t_DirectoryTaxonomyWriter *self, void *data);
            static PyGetSetDef t_DirectoryTaxonomyWriter__fields_[] = {
              DECLARE_SET_FIELD(t_DirectoryTaxonomyWriter, cacheMissesUntilFill),
              DECLARE_GETSET_FIELD(t_DirectoryTaxonomyWriter, commitData),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, directory),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, size),
              DECLARE_GET_FIELD(t_DirectoryTaxonomyWriter, taxonomyEpoch),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DirectoryTaxonomyWriter__methods_[] = {
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, addCategory, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, addTaxonomy, METH_VARARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, close, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, commit, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, defaultTaxonomyWriterCache, METH_NOARGS | METH_CLASS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getCommitData, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getDirectory, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getParent, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getSize, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, getTaxonomyEpoch, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, prepareCommit, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, replaceTaxonomy, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, rollback, METH_NOARGS),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, setCacheMissesUntilFill, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, setCommitData, METH_O),
              DECLARE_METHOD(t_DirectoryTaxonomyWriter, unlock, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DirectoryTaxonomyWriter, t_DirectoryTaxonomyWriter, ::java::lang::Object, DirectoryTaxonomyWriter, t_DirectoryTaxonomyWriter_init_, 0, 0, t_DirectoryTaxonomyWriter__fields_, 0, 0);

            void t_DirectoryTaxonomyWriter::install(PyObject *module)
            {
              installType(&PY_TYPE(DirectoryTaxonomyWriter), module, "DirectoryTaxonomyWriter", 0);
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "DiskOrdinalMap", make_descriptor(&PY_TYPE(DirectoryTaxonomyWriter$DiskOrdinalMap)));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "MemoryOrdinalMap", make_descriptor(&PY_TYPE(DirectoryTaxonomyWriter$MemoryOrdinalMap)));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "OrdinalMap", make_descriptor(&PY_TYPE(DirectoryTaxonomyWriter$OrdinalMap)));
            }

            void t_DirectoryTaxonomyWriter::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "class_", make_descriptor(DirectoryTaxonomyWriter::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "wrapfn_", make_descriptor(t_DirectoryTaxonomyWriter::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(DirectoryTaxonomyWriter::initializeClass);
              PyDict_SetItemString(PY_TYPE(DirectoryTaxonomyWriter).tp_dict, "INDEX_EPOCH", make_descriptor(j2p(*DirectoryTaxonomyWriter::INDEX_EPOCH)));
            }

            static PyObject *t_DirectoryTaxonomyWriter_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DirectoryTaxonomyWriter::initializeClass, 1)))
                return NULL;
              return t_DirectoryTaxonomyWriter::wrap_Object(DirectoryTaxonomyWriter(((t_DirectoryTaxonomyWriter *) arg)->object.this$));
            }
            static PyObject *t_DirectoryTaxonomyWriter_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DirectoryTaxonomyWriter::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DirectoryTaxonomyWriter_init_(t_DirectoryTaxonomyWriter *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::index::IndexWriterConfig$OpenMode a1((jobject) NULL);
                  PyTypeObject **p1;
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "kK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0, a1));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::store::Directory a0((jobject) NULL);
                  ::org::apache::lucene::index::IndexWriterConfig$OpenMode a1((jobject) NULL);
                  PyTypeObject **p1;
                  ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache a2((jobject) NULL);
                  DirectoryTaxonomyWriter object((jobject) NULL);

                  if (!parseArgs(args, "kKk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_, &a2))
                  {
                    INT_CALL(object = DirectoryTaxonomyWriter(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DirectoryTaxonomyWriter_addCategory(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
              jint result;

              if (!parseArg(arg, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.addCategory(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "addCategory", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_addTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *args)
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter$OrdinalMap::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.addTaxonomy(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "addTaxonomy", args);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_close(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_commit(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.commit());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_defaultTaxonomyWriterCache(PyTypeObject *type)
            {
              ::org::apache::lucene::facet::taxonomy::writercache::TaxonomyWriterCache result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::defaultTaxonomyWriterCache());
              return ::org::apache::lucene::facet::taxonomy::writercache::t_TaxonomyWriterCache::wrap_Object(result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getCommitData(t_DirectoryTaxonomyWriter *self)
            {
              ::java::util::Map result((jobject) NULL);
              OBJ_CALL(result = self->object.getCommitData());
              return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_DirectoryTaxonomyWriter_getDirectory(t_DirectoryTaxonomyWriter *self)
            {
              ::org::apache::lucene::store::Directory result((jobject) NULL);
              OBJ_CALL(result = self->object.getDirectory());
              return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getParent(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              jint a0;
              jint result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getParent(a0));
                return PyInt_FromLong((long) result);
              }

              PyErr_SetArgsError((PyObject *) self, "getParent", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_getSize(t_DirectoryTaxonomyWriter *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getSize());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_getTaxonomyEpoch(t_DirectoryTaxonomyWriter *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.getTaxonomyEpoch());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_DirectoryTaxonomyWriter_prepareCommit(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.prepareCommit());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_replaceTaxonomy(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(self->object.replaceTaxonomy(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "replaceTaxonomy", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_rollback(t_DirectoryTaxonomyWriter *self)
            {
              OBJ_CALL(self->object.rollback());
              Py_RETURN_NONE;
            }

            static PyObject *t_DirectoryTaxonomyWriter_setCacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setCacheMissesUntilFill(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setCacheMissesUntilFill", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_setCommitData(t_DirectoryTaxonomyWriter *self, PyObject *arg)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;

              if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
              {
                OBJ_CALL(self->object.setCommitData(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setCommitData", arg);
              return NULL;
            }

            static PyObject *t_DirectoryTaxonomyWriter_unlock(PyTypeObject *type, PyObject *arg)
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(::org::apache::lucene::facet::taxonomy::directory::DirectoryTaxonomyWriter::unlock(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError(type, "unlock", arg);
              return NULL;
            }

            static int t_DirectoryTaxonomyWriter_set__cacheMissesUntilFill(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setCacheMissesUntilFill(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "cacheMissesUntilFill", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__commitData(t_DirectoryTaxonomyWriter *self, void *data)
            {
              ::java::util::Map value((jobject) NULL);
              OBJ_CALL(value = self->object.getCommitData());
              return ::java::util::t_Map::wrap_Object(value);
            }
            static int t_DirectoryTaxonomyWriter_set__commitData(t_DirectoryTaxonomyWriter *self, PyObject *arg, void *data)
            {
              {
                ::java::util::Map value((jobject) NULL);
                if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
                {
                  INT_CALL(self->object.setCommitData(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "commitData", arg);
              return -1;
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__directory(t_DirectoryTaxonomyWriter *self, void *data)
            {
              ::org::apache::lucene::store::Directory value((jobject) NULL);
              OBJ_CALL(value = self->object.getDirectory());
              return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__size(t_DirectoryTaxonomyWriter *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_DirectoryTaxonomyWriter_get__taxonomyEpoch(t_DirectoryTaxonomyWriter *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getTaxonomyEpoch());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonCharTokenizer.h"
#include "java/lang/Throwable.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonCharTokenizer::class$ = NULL;
        jmethodID *PythonCharTokenizer::mids$ = NULL;
        bool PythonCharTokenizer::live$ = false;

        jclass PythonCharTokenizer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonCharTokenizer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7997a391] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/io/Reader;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_isTokenChar_39c7bd30] = env->getMethodID(cls, "isTokenChar", "(I)Z");
            mids$[mid_normalize_39c7bd23] = env->getMethodID(cls, "normalize", "(I)I");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonCharTokenizer::PythonCharTokenizer(const ::org::apache::lucene::util::Version & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::analysis::util::CharTokenizer(env->newObject(initializeClass, &mids$, mid_init$_7997a391, a0.this$, a1.this$)) {}

        void PythonCharTokenizer::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jint PythonCharTokenizer::normalize(jint a0) const
        {
          return env->callNonvirtualIntMethod(this$, (jclass) ::org::apache::lucene::analysis::util::CharTokenizer::class$->this$, ::org::apache::lucene::analysis::util::CharTokenizer::mids$[::org::apache::lucene::analysis::util::CharTokenizer::mid_normalize_39c7bd23], a0);
        }

        jlong PythonCharTokenizer::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonCharTokenizer::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonCharTokenizer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonCharTokenizer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonCharTokenizer_init_(t_PythonCharTokenizer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonCharTokenizer_finalize(t_PythonCharTokenizer *self);
        static PyObject *t_PythonCharTokenizer_normalize(t_PythonCharTokenizer *self, PyObject *arg);
        static PyObject *t_PythonCharTokenizer_pythonExtension(t_PythonCharTokenizer *self, PyObject *args);
        static jboolean JNICALL t_PythonCharTokenizer_isTokenChar0(JNIEnv *jenv, jobject jobj, jint a0);
        static jint JNICALL t_PythonCharTokenizer_normalize1(JNIEnv *jenv, jobject jobj, jint a0);
        static void JNICALL t_PythonCharTokenizer_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonCharTokenizer_get__self(t_PythonCharTokenizer *self, void *data);
        static PyGetSetDef t_PythonCharTokenizer__fields_[] = {
          DECLARE_GET_FIELD(t_PythonCharTokenizer, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonCharTokenizer__methods_[] = {
          DECLARE_METHOD(t_PythonCharTokenizer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCharTokenizer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonCharTokenizer, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonCharTokenizer, normalize, METH_O),
          DECLARE_METHOD(t_PythonCharTokenizer, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonCharTokenizer, t_PythonCharTokenizer, ::org::apache::lucene::analysis::util::CharTokenizer, PythonCharTokenizer, t_PythonCharTokenizer_init_, 0, 0, t_PythonCharTokenizer__fields_, 0, 0);

        void t_PythonCharTokenizer::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonCharTokenizer), module, "PythonCharTokenizer", 1);
        }

        void t_PythonCharTokenizer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonCharTokenizer).tp_dict, "class_", make_descriptor(PythonCharTokenizer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonCharTokenizer).tp_dict, "wrapfn_", make_descriptor(t_PythonCharTokenizer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonCharTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonCharTokenizer::initializeClass);
          JNINativeMethod methods[] = {
            { "isTokenChar", "(I)Z", (void *) t_PythonCharTokenizer_isTokenChar0 },
            { "normalize", "(I)I", (void *) t_PythonCharTokenizer_normalize1 },
            { "pythonDecRef", "()V", (void *) t_PythonCharTokenizer_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonCharTokenizer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonCharTokenizer::initializeClass, 1)))
            return NULL;
          return t_PythonCharTokenizer::wrap_Object(PythonCharTokenizer(((t_PythonCharTokenizer *) arg)->object.this$));
        }
        static PyObject *t_PythonCharTokenizer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonCharTokenizer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonCharTokenizer_init_(t_PythonCharTokenizer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::io::Reader a1((jobject) NULL);
          PythonCharTokenizer object((jobject) NULL);

          if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::java::io::Reader::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
          {
            INT_CALL(object = PythonCharTokenizer(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonCharTokenizer_finalize(t_PythonCharTokenizer *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonCharTokenizer_normalize(t_PythonCharTokenizer *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.normalize(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "normalize", arg);
          return NULL;
        }

        static PyObject *t_PythonCharTokenizer_pythonExtension(t_PythonCharTokenizer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonCharTokenizer_isTokenChar0(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isTokenChar", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isTokenChar", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jint JNICALL t_PythonCharTokenizer_normalize1(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "normalize", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("normalize", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static void JNICALL t_PythonCharTokenizer_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonCharTokenizer::mids$[PythonCharTokenizer::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonCharTokenizer_get__self(t_PythonCharTokenizer *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/BasicModelIn.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *BasicModelIn::class$ = NULL;
          jmethodID *BasicModelIn::mids$ = NULL;
          bool BasicModelIn::live$ = false;

          jclass BasicModelIn::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/BasicModelIn");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BasicModelIn::BasicModelIn() : ::org::apache::lucene::search::similarities::BasicModel(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation BasicModelIn::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat BasicModelIn::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String BasicModelIn::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_BasicModelIn_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BasicModelIn_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BasicModelIn_init_(t_BasicModelIn *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BasicModelIn_explain(t_BasicModelIn *self, PyObject *args);
          static PyObject *t_BasicModelIn_score(t_BasicModelIn *self, PyObject *args);
          static PyObject *t_BasicModelIn_toString(t_BasicModelIn *self, PyObject *args);

          static PyMethodDef t_BasicModelIn__methods_[] = {
            DECLARE_METHOD(t_BasicModelIn, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIn, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BasicModelIn, explain, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIn, score, METH_VARARGS),
            DECLARE_METHOD(t_BasicModelIn, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BasicModelIn, t_BasicModelIn, ::org::apache::lucene::search::similarities::BasicModel, BasicModelIn, t_BasicModelIn_init_, 0, 0, 0, 0, 0);

          void t_BasicModelIn::install(PyObject *module)
          {
            installType(&PY_TYPE(BasicModelIn), module, "BasicModelIn", 0);
          }

          void t_BasicModelIn::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BasicModelIn).tp_dict, "class_", make_descriptor(BasicModelIn::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BasicModelIn).tp_dict, "wrapfn_", make_descriptor(t_BasicModelIn::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BasicModelIn).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BasicModelIn_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BasicModelIn::initializeClass, 1)))
              return NULL;
            return t_BasicModelIn::wrap_Object(BasicModelIn(((t_BasicModelIn *) arg)->object.this$));
          }
          static PyObject *t_BasicModelIn_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BasicModelIn::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BasicModelIn_init_(t_BasicModelIn *self, PyObject *args, PyObject *kwds)
          {
            BasicModelIn object((jobject) NULL);

            INT_CALL(object = BasicModelIn());
            self->object = object;

            return 0;
          }

          static PyObject *t_BasicModelIn_explain(t_BasicModelIn *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BasicModelIn), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_BasicModelIn_score(t_BasicModelIn *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(BasicModelIn), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_BasicModelIn_toString(t_BasicModelIn *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(BasicModelIn), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/perfield/PerFieldPostingsFormat.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/FieldsConsumer.h"
#include "org/apache/lucene/codecs/FieldsProducer.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {

          ::java::lang::Class *PerFieldPostingsFormat::class$ = NULL;
          jmethodID *PerFieldPostingsFormat::mids$ = NULL;
          bool PerFieldPostingsFormat::live$ = false;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_FORMAT_KEY = NULL;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_NAME = NULL;
          ::java::lang::String *PerFieldPostingsFormat::PER_FIELD_SUFFIX_KEY = NULL;

          jclass PerFieldPostingsFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/perfield/PerFieldPostingsFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_fieldsConsumer_a15793c6] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/FieldsConsumer;");
              mids$[mid_fieldsProducer_c86c62bc] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/FieldsProducer;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              PER_FIELD_FORMAT_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_FORMAT_KEY", "Ljava/lang/String;"));
              PER_FIELD_NAME = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_NAME", "Ljava/lang/String;"));
              PER_FIELD_SUFFIX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "PER_FIELD_SUFFIX_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PerFieldPostingsFormat::PerFieldPostingsFormat() : ::org::apache::lucene::codecs::PostingsFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldsConsumer PerFieldPostingsFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_a15793c6], a0.this$));
          }

          ::org::apache::lucene::codecs::FieldsProducer PerFieldPostingsFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::FieldsProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_c86c62bc], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat PerFieldPostingsFormat::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace perfield {
          static PyObject *t_PerFieldPostingsFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PerFieldPostingsFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PerFieldPostingsFormat_init_(t_PerFieldPostingsFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PerFieldPostingsFormat_fieldsConsumer(t_PerFieldPostingsFormat *self, PyObject *args);
          static PyObject *t_PerFieldPostingsFormat_fieldsProducer(t_PerFieldPostingsFormat *self, PyObject *args);
          static PyObject *t_PerFieldPostingsFormat_getPostingsFormatForField(t_PerFieldPostingsFormat *self, PyObject *arg);

          static PyMethodDef t_PerFieldPostingsFormat__methods_[] = {
            DECLARE_METHOD(t_PerFieldPostingsFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, fieldsConsumer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, fieldsProducer, METH_VARARGS),
            DECLARE_METHOD(t_PerFieldPostingsFormat, getPostingsFormatForField, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PerFieldPostingsFormat, t_PerFieldPostingsFormat, ::org::apache::lucene::codecs::PostingsFormat, PerFieldPostingsFormat, t_PerFieldPostingsFormat_init_, 0, 0, 0, 0, 0);

          void t_PerFieldPostingsFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(PerFieldPostingsFormat), module, "PerFieldPostingsFormat", 0);
          }

          void t_PerFieldPostingsFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "class_", make_descriptor(PerFieldPostingsFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "wrapfn_", make_descriptor(t_PerFieldPostingsFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PerFieldPostingsFormat::initializeClass);
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "PER_FIELD_FORMAT_KEY", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_FORMAT_KEY)));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "PER_FIELD_NAME", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_NAME)));
            PyDict_SetItemString(PY_TYPE(PerFieldPostingsFormat).tp_dict, "PER_FIELD_SUFFIX_KEY", make_descriptor(j2p(*PerFieldPostingsFormat::PER_FIELD_SUFFIX_KEY)));
          }

          static PyObject *t_PerFieldPostingsFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PerFieldPostingsFormat::initializeClass, 1)))
              return NULL;
            return t_PerFieldPostingsFormat::wrap_Object(PerFieldPostingsFormat(((t_PerFieldPostingsFormat *) arg)->object.this$));
          }
          static PyObject *t_PerFieldPostingsFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PerFieldPostingsFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PerFieldPostingsFormat_init_(t_PerFieldPostingsFormat *self, PyObject *args, PyObject *kwds)
          {
            PerFieldPostingsFormat object((jobject) NULL);

            INT_CALL(object = PerFieldPostingsFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_PerFieldPostingsFormat_fieldsConsumer(t_PerFieldPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsConsumer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsConsumer(a0));
              return ::org::apache::lucene::codecs::t_FieldsConsumer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldPostingsFormat), (PyObject *) self, "fieldsConsumer", args, 2);
          }

          static PyObject *t_PerFieldPostingsFormat_fieldsProducer(t_PerFieldPostingsFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::FieldsProducer result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.fieldsProducer(a0));
              return ::org::apache::lucene::codecs::t_FieldsProducer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PerFieldPostingsFormat), (PyObject *) self, "fieldsProducer", args, 2);
          }

          static PyObject *t_PerFieldPostingsFormat_getPostingsFormatForField(t_PerFieldPostingsFormat *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/CategoryPath.h"
#include "java/lang/String.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *CategoryPath::class$ = NULL;
          jmethodID *CategoryPath::mids$ = NULL;
          jfieldID *CategoryPath::fids$ = NULL;
          bool CategoryPath::live$ = false;
          CategoryPath *CategoryPath::EMPTY = NULL;

          jclass CategoryPath::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/CategoryPath");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4dd4540c] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;)V");
              mids$[mid_init$_7420ac50] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;C)V");
              mids$[mid_compareTo_07b9a56f] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/facet/taxonomy/CategoryPath;)I");
              mids$[mid_copyFullPath_6d37715f] = env->getMethodID(cls, "copyFullPath", "([CIC)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_fullPathLength_54c6a179] = env->getMethodID(cls, "fullPathLength", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_longHashCode_54c6a17a] = env->getMethodID(cls, "longHashCode", "()J");
              mids$[mid_subpath_33144d83] = env->getMethodID(cls, "subpath", "(I)Lorg/apache/lucene/facet/taxonomy/CategoryPath;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_toString_7611a535] = env->getMethodID(cls, "toString", "(C)Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_components] = env->getFieldID(cls, "components", "[Ljava/lang/String;");
              fids$[fid_length] = env->getFieldID(cls, "length", "I");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              EMPTY = new CategoryPath(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/facet/taxonomy/CategoryPath;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CategoryPath::CategoryPath(const JArray< ::java::lang::String > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4dd4540c, a0.this$)) {}

          CategoryPath::CategoryPath(const ::java::lang::String & a0, jchar a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7420ac50, a0.this$, a1)) {}

          jint CategoryPath::compareTo(const CategoryPath & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_07b9a56f], a0.this$);
          }

          jint CategoryPath::copyFullPath(const JArray< jchar > & a0, jint a1, jchar a2) const
          {
            return env->callIntMethod(this$, mids$[mid_copyFullPath_6d37715f], a0.this$, a1, a2);
          }

          jboolean CategoryPath::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint CategoryPath::fullPathLength() const
          {
            return env->callIntMethod(this$, mids$[mid_fullPathLength_54c6a179]);
          }

          jint CategoryPath::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jlong CategoryPath::longHashCode() const
          {
            return env->callLongMethod(this$, mids$[mid_longHashCode_54c6a17a]);
          }

          CategoryPath CategoryPath::subpath(jint a0) const
          {
            return CategoryPath(env->callObjectMethod(this$, mids$[mid_subpath_33144d83], a0));
          }

          ::java::lang::String CategoryPath::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::String CategoryPath::toString(jchar a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_7611a535], a0));
          }

          JArray< ::java::lang::String > CategoryPath::_get_components() const
          {
            return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_components]));
          }

          jint CategoryPath::_get_length() const
          {
            return env->getIntField(this$, fids$[fid_length]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_CategoryPath_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CategoryPath_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CategoryPath_init_(t_CategoryPath *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CategoryPath_compareTo(t_CategoryPath *self, PyObject *arg);
          static PyObject *t_CategoryPath_copyFullPath(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_equals(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_fullPathLength(t_CategoryPath *self);
          static PyObject *t_CategoryPath_hashCode(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_longHashCode(t_CategoryPath *self);
          static PyObject *t_CategoryPath_subpath(t_CategoryPath *self, PyObject *arg);
          static PyObject *t_CategoryPath_toString(t_CategoryPath *self, PyObject *args);
          static PyObject *t_CategoryPath_get__components(t_CategoryPath *self, void *data);
          static PyObject *t_CategoryPath_get__length(t_CategoryPath *self, void *data);

          static PyGetSetDef t_CategoryPath__fields_[] = {
            DECLARE_GET_FIELD(t_CategoryPath, components),
            DECLARE_GET_FIELD(t_CategoryPath, length),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CategoryPath__methods_[] = {
            DECLARE_METHOD(t_CategoryPath, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CategoryPath, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CategoryPath, compareTo, METH_O),
            DECLARE_METHOD(t_CategoryPath, copyFullPath, METH_VARARGS),
            DECLARE_METHOD(t_CategoryPath, equals, METH_VARARGS),
            DECLARE_METHOD(t_CategoryPath, fullPathLength, METH_NOARGS),
            DECLARE_METHOD(t_CategoryPath, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_CategoryPath, longHashCode, METH_NOARGS),
            DECLARE_METHOD(t_CategoryPath, subpath, METH_O),
            DECLARE_METHOD(t_CategoryPath, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CategoryPath, t_CategoryPath, ::java::lang::Object, CategoryPath, t_CategoryPath_init_, 0, 0, t_CategoryPath__fields_, 0, 0);

          void t_CategoryPath::install(PyObject *module)
          {
            installType(&PY_TYPE(CategoryPath), module, "CategoryPath", 0);
          }

          void t_CategoryPath::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "class_", make_descriptor(CategoryPath::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "wrapfn_", make_descriptor(t_CategoryPath::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CategoryPath::initializeClass);
            PyDict_SetItemString(PY_TYPE(CategoryPath).tp_dict, "EMPTY", make_descriptor(t_CategoryPath::wrap_Object(*CategoryPath::EMPTY)));
          }

          static PyObject *t_CategoryPath_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CategoryPath::initializeClass, 1)))
              return NULL;
            return t_CategoryPath::wrap_Object(CategoryPath(((t_CategoryPath *) arg)->object.this$));
          }
          static PyObject *t_CategoryPath_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CategoryPath::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CategoryPath_init_(t_CategoryPath *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                CategoryPath object((jobject) NULL);

                if (!parseArgs(args, "[s", &a0))
                {
                  INT_CALL(object = CategoryPath(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                jchar a1;
                CategoryPath object((jobject) NULL);

                if (!parseArgs(args, "sC", &a0, &a1))
                {
                  INT_CALL(object = CategoryPath(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CategoryPath_compareTo(t_CategoryPath *self, PyObject *arg)
          {
            CategoryPath a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", CategoryPath::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_CategoryPath_copyFullPath(t_CategoryPath *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jchar a2;
            jint result;

            if (!parseArgs(args, "[CIC", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.copyFullPath(a0, a1, a2));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "copyFullPath", args);
            return NULL;
          }

          static PyObject *t_CategoryPath_equals(t_CategoryPath *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CategoryPath), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_CategoryPath_fullPathLength(t_CategoryPath *self)
          {
            jint result;
            OBJ_CALL(result = self->object.fullPathLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CategoryPath_hashCode(t_CategoryPath *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CategoryPath), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_CategoryPath_longHashCode(t_CategoryPath *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.longHashCode());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_CategoryPath_subpath(t_CategoryPath *self, PyObject *arg)
          {
            jint a0;
            CategoryPath result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.subpath(a0));
              return t_CategoryPath::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subpath", arg);
            return NULL;
          }

          static PyObject *t_CategoryPath_toString(t_CategoryPath *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }
              break;
             case 1:
              {
                jchar a0;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "C", &a0))
                {
                  OBJ_CALL(result = self->object.toString(a0));
                  return j2p(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CategoryPath), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CategoryPath_get__components(t_CategoryPath *self, void *data)
          {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_components());
            return JArray<jstring>(value.this$).wrap();
          }

          static PyObject *t_CategoryPath_get__length(t_CategoryPath *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object._get_length());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/IntField.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/FieldType.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *IntField::class$ = NULL;
        jmethodID *IntField::mids$ = NULL;
        bool IntField::live$ = false;
        ::org::apache::lucene::document::FieldType *IntField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *IntField::TYPE_STORED = NULL;

        jclass IntField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/IntField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_80deeaab] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_919d88bc] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntField::IntField(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_80deeaab, a0.this$, a1, a2.this$)) {}

        IntField::IntField(const ::java::lang::String & a0, jint a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_919d88bc, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_IntField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntField_init_(t_IntField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IntField__methods_[] = {
          DECLARE_METHOD(t_IntField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntField, t_IntField, ::org::apache::lucene::document::Field, IntField, t_IntField_init_, 0, 0, 0, 0, 0);

        void t_IntField::install(PyObject *module)
        {
          installType(&PY_TYPE(IntField), module, "IntField", 0);
        }

        void t_IntField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "class_", make_descriptor(IntField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "wrapfn_", make_descriptor(t_IntField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IntField::initializeClass);
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*IntField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(IntField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*IntField::TYPE_STORED)));
        }

        static PyObject *t_IntField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntField::initializeClass, 1)))
            return NULL;
          return t_IntField::wrap_Object(IntField(((t_IntField *) arg)->object.this$));
        }
        static PyObject *t_IntField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntField_init_(t_IntField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              IntField object((jobject) NULL);

              if (!parseArgs(args, "sIK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = IntField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              IntField object((jobject) NULL);

              if (!parseArgs(args, "sIk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IntField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator.h"
#include "org/apache/lucene/util/Counter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *ByteBlockPool$DirectTrackingAllocator::class$ = NULL;
        jmethodID *ByteBlockPool$DirectTrackingAllocator::mids$ = NULL;
        bool ByteBlockPool$DirectTrackingAllocator::live$ = false;

        jclass ByteBlockPool$DirectTrackingAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/ByteBlockPool$DirectTrackingAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_4ae88947] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Counter;)V");
            mids$[mid_init$_395956a1] = env->getMethodID(cls, "<init>", "(ILorg/apache/lucene/util/Counter;)V");
            mids$[mid_getByteBlock_dab10e7e] = env->getMethodID(cls, "getByteBlock", "()[B");
            mids$[mid_recycleByteBlocks_d3ffa89f] = env->getMethodID(cls, "recycleByteBlocks", "([[BII)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteBlockPool$DirectTrackingAllocator::ByteBlockPool$DirectTrackingAllocator(const ::org::apache::lucene::util::Counter & a0) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_4ae88947, a0.this$)) {}

        ByteBlockPool$DirectTrackingAllocator::ByteBlockPool$DirectTrackingAllocator(jint a0, const ::org::apache::lucene::util::Counter & a1) : ::org::apache::lucene::util::ByteBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_395956a1, a0, a1.this$)) {}

        JArray< jbyte > ByteBlockPool$DirectTrackingAllocator::getByteBlock() const
        {
          return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getByteBlock_dab10e7e]));
        }

        void ByteBlockPool$DirectTrackingAllocator::recycleByteBlocks(const JArray< JArray< jbyte > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleByteBlocks_d3ffa89f], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteBlockPool$DirectTrackingAllocator_init_(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_getByteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_recycleByteBlocks(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args);
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_get__byteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, void *data);
        static PyGetSetDef t_ByteBlockPool$DirectTrackingAllocator__fields_[] = {
          DECLARE_GET_FIELD(t_ByteBlockPool$DirectTrackingAllocator, byteBlock),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteBlockPool$DirectTrackingAllocator__methods_[] = {
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, getByteBlock, METH_VARARGS),
          DECLARE_METHOD(t_ByteBlockPool$DirectTrackingAllocator, recycleByteBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteBlockPool$DirectTrackingAllocator, t_ByteBlockPool$DirectTrackingAllocator, ::org::apache::lucene::util::ByteBlockPool$Allocator, ByteBlockPool$DirectTrackingAllocator, t_ByteBlockPool$DirectTrackingAllocator_init_, 0, 0, t_ByteBlockPool$DirectTrackingAllocator__fields_, 0, 0);

        void t_ByteBlockPool$DirectTrackingAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator), module, "ByteBlockPool$DirectTrackingAllocator", 0);
        }

        void t_ByteBlockPool$DirectTrackingAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectTrackingAllocator).tp_dict, "class_", make_descriptor(ByteBlockPool$DirectTrackingAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectTrackingAllocator).tp_dict, "wrapfn_", make_descriptor(t_ByteBlockPool$DirectTrackingAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteBlockPool$DirectTrackingAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteBlockPool$DirectTrackingAllocator::initializeClass, 1)))
            return NULL;
          return t_ByteBlockPool$DirectTrackingAllocator::wrap_Object(ByteBlockPool$DirectTrackingAllocator(((t_ByteBlockPool$DirectTrackingAllocator *) arg)->object.this$));
        }
        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteBlockPool$DirectTrackingAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteBlockPool$DirectTrackingAllocator_init_(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::Counter a0((jobject) NULL);
              ByteBlockPool$DirectTrackingAllocator object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::util::Counter::initializeClass, &a0))
              {
                INT_CALL(object = ByteBlockPool$DirectTrackingAllocator(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              jint a0;
              ::org::apache::lucene::util::Counter a1((jobject) NULL);
              ByteBlockPool$DirectTrackingAllocator object((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::Counter::initializeClass, &a0, &a1))
              {
                INT_CALL(object = ByteBlockPool$DirectTrackingAllocator(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_getByteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args)
        {
          JArray< jbyte > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.getByteBlock());
            return result.wrap();
          }

          return callSuper(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator), (PyObject *) self, "getByteBlock", args, 2);
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_recycleByteBlocks(t_ByteBlockPool$DirectTrackingAllocator *self, PyObject *args)
        {
          JArray< JArray< jbyte > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[BII", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleByteBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteBlockPool$DirectTrackingAllocator), (PyObject *) self, "recycleByteBlocks", args, 2);
        }

        static PyObject *t_ByteBlockPool$DirectTrackingAllocator_get__byteBlock(t_ByteBlockPool$DirectTrackingAllocator *self, void *data)
        {
          JArray< jbyte > value((jobject) NULL);
          OBJ_CALL(value = self->object.getByteBlock());
          return value.wrap();
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/TextField.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/document/FieldType.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *TextField::class$ = NULL;
        jmethodID *TextField::mids$ = NULL;
        bool TextField::live$ = false;
        ::org::apache::lucene::document::FieldType *TextField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *TextField::TYPE_STORED = NULL;

        jclass TextField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/TextField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_7d0c5392] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_init$_23e5278e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/io/Reader;)V");
            mids$[mid_init$_064fa087] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/document/Field$Store;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TextField::TextField(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_7d0c5392, a0.this$, a1.this$)) {}

        TextField::TextField(const ::java::lang::String & a0, const ::java::io::Reader & a1) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_23e5278e, a0.this$, a1.this$)) {}

        TextField::TextField(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_064fa087, a0.this$, a1.this$, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_TextField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TextField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_TextField_init_(t_TextField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_TextField__methods_[] = {
          DECLARE_METHOD(t_TextField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TextField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TextField, t_TextField, ::org::apache::lucene::document::Field, TextField, t_TextField_init_, 0, 0, 0, 0, 0);

        void t_TextField::install(PyObject *module)
        {
          installType(&PY_TYPE(TextField), module, "TextField", 0);
        }

        void t_TextField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "class_", make_descriptor(TextField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "wrapfn_", make_descriptor(t_TextField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TextField::initializeClass);
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*TextField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(TextField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*TextField::TYPE_STORED)));
        }

        static PyObject *t_TextField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TextField::initializeClass, 1)))
            return NULL;
          return t_TextField::wrap_Object(TextField(((t_TextField *) arg)->object.this$));
        }
        static PyObject *t_TextField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TextField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_TextField_init_(t_TextField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
              TextField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TextField(a0, a1));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::io::Reader a1((jobject) NULL);
              TextField object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::io::Reader::initializeClass, &a0, &a1))
              {
                INT_CALL(object = TextField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              TextField object((jobject) NULL);

              if (!parseArgs(args, "ssK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = TextField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/PositionSpan.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PositionSpan::class$ = NULL;
          jmethodID *PositionSpan::mids$ = NULL;
          bool PositionSpan::live$ = false;

          jclass PositionSpan::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/PositionSpan");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PositionSpan::PositionSpan(jint a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PositionSpan_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PositionSpan_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PositionSpan_init_(t_PositionSpan *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_PositionSpan__methods_[] = {
            DECLARE_METHOD(t_PositionSpan, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PositionSpan, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PositionSpan, t_PositionSpan, ::java::lang::Object, PositionSpan, t_PositionSpan_init_, 0, 0, 0, 0, 0);

          void t_PositionSpan::install(PyObject *module)
          {
            installType(&PY_TYPE(PositionSpan), module, "PositionSpan", 0);
          }

          void t_PositionSpan::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PositionSpan).tp_dict, "class_", make_descriptor(PositionSpan::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PositionSpan).tp_dict, "wrapfn_", make_descriptor(t_PositionSpan::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PositionSpan).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PositionSpan_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PositionSpan::initializeClass, 1)))
              return NULL;
            return t_PositionSpan::wrap_Object(PositionSpan(((t_PositionSpan *) arg)->object.this$));
          }
          static PyObject *t_PositionSpan_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PositionSpan::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PositionSpan_init_(t_PositionSpan *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            PositionSpan object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = PositionSpan(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
