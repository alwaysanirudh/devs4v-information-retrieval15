#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/WeightedFragListBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *WeightedFragListBuilder::class$ = NULL;
          jmethodID *WeightedFragListBuilder::mids$ = NULL;
          bool WeightedFragListBuilder::live$ = false;

          jclass WeightedFragListBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/WeightedFragListBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_createFieldFragList_f54fd6ce] = env->getMethodID(cls, "createFieldFragList", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList;I)Lorg/apache/lucene/search/vectorhighlight/FieldFragList;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WeightedFragListBuilder::WeightedFragListBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          WeightedFragListBuilder::WeightedFragListBuilder(jint a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          ::org::apache::lucene::search::vectorhighlight::FieldFragList WeightedFragListBuilder::createFieldFragList(const ::org::apache::lucene::search::vectorhighlight::FieldPhraseList & a0, jint a1) const
          {
            return ::org::apache::lucene::search::vectorhighlight::FieldFragList(env->callObjectMethod(this$, mids$[mid_createFieldFragList_f54fd6ce], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_WeightedFragListBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WeightedFragListBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WeightedFragListBuilder_init_(t_WeightedFragListBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WeightedFragListBuilder_createFieldFragList(t_WeightedFragListBuilder *self, PyObject *args);

          static PyMethodDef t_WeightedFragListBuilder__methods_[] = {
            DECLARE_METHOD(t_WeightedFragListBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFragListBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WeightedFragListBuilder, createFieldFragList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WeightedFragListBuilder, t_WeightedFragListBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragListBuilder, WeightedFragListBuilder, t_WeightedFragListBuilder_init_, 0, 0, 0, 0, 0);

          void t_WeightedFragListBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(WeightedFragListBuilder), module, "WeightedFragListBuilder", 0);
          }

          void t_WeightedFragListBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WeightedFragListBuilder).tp_dict, "class_", make_descriptor(WeightedFragListBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WeightedFragListBuilder).tp_dict, "wrapfn_", make_descriptor(t_WeightedFragListBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WeightedFragListBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WeightedFragListBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WeightedFragListBuilder::initializeClass, 1)))
              return NULL;
            return t_WeightedFragListBuilder::wrap_Object(WeightedFragListBuilder(((t_WeightedFragListBuilder *) arg)->object.this$));
          }
          static PyObject *t_WeightedFragListBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WeightedFragListBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WeightedFragListBuilder_init_(t_WeightedFragListBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                WeightedFragListBuilder object((jobject) NULL);

                INT_CALL(object = WeightedFragListBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                WeightedFragListBuilder object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = WeightedFragListBuilder(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WeightedFragListBuilder_createFieldFragList(t_WeightedFragListBuilder *self, PyObject *args)
          {
            ::org::apache::lucene::search::vectorhighlight::FieldPhraseList a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::search::vectorhighlight::FieldFragList result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::search::vectorhighlight::FieldPhraseList::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.createFieldFragList(a0, a1));
              return ::org::apache::lucene::search::vectorhighlight::t_FieldFragList::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WeightedFragListBuilder), (PyObject *) self, "createFieldFragList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {

        ::java::lang::Class *TokenStream::class$ = NULL;
        jmethodID *TokenStream::mids$ = NULL;
        bool TokenStream::live$ = false;
        ::org::apache::lucene::util::AttributeFactory *TokenStream::DEFAULT_TOKEN_ATTRIBUTE_FACTORY = NULL;

        jclass TokenStream::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/TokenStream");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
            mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
            mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT_TOKEN_ATTRIBUTE_FACTORY = new ::org::apache::lucene::util::AttributeFactory(env->getStaticObjectField(cls, "DEFAULT_TOKEN_ATTRIBUTE_FACTORY", "Lorg/apache/lucene/util/AttributeFactory;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void TokenStream::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void TokenStream::end() const
        {
          env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
        }

        jboolean TokenStream::incrementToken() const
        {
          return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
        }

        void TokenStream::reset() const
        {
          env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        static PyObject *t_TokenStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStream_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TokenStream_close(t_TokenStream *self);
        static PyObject *t_TokenStream_end(t_TokenStream *self);
        static PyObject *t_TokenStream_incrementToken(t_TokenStream *self);
        static PyObject *t_TokenStream_reset(t_TokenStream *self);

        static PyMethodDef t_TokenStream__methods_[] = {
          DECLARE_METHOD(t_TokenStream, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStream, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TokenStream, close, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, end, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, incrementToken, METH_NOARGS),
          DECLARE_METHOD(t_TokenStream, reset, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TokenStream, t_TokenStream, ::org::apache::lucene::util::AttributeSource, TokenStream, abstract_init, 0, 0, 0, 0, 0);

        void t_TokenStream::install(PyObject *module)
        {
          installType(&PY_TYPE(TokenStream), module, "TokenStream", 0);
        }

        void t_TokenStream::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "class_", make_descriptor(TokenStream::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "wrapfn_", make_descriptor(t_TokenStream::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TokenStream::initializeClass);
          PyDict_SetItemString(PY_TYPE(TokenStream).tp_dict, "DEFAULT_TOKEN_ATTRIBUTE_FACTORY", make_descriptor(::org::apache::lucene::util::t_AttributeFactory::wrap_Object(*TokenStream::DEFAULT_TOKEN_ATTRIBUTE_FACTORY)));
        }

        static PyObject *t_TokenStream_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TokenStream::initializeClass, 1)))
            return NULL;
          return t_TokenStream::wrap_Object(TokenStream(((t_TokenStream *) arg)->object.this$));
        }
        static PyObject *t_TokenStream_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TokenStream::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TokenStream_close(t_TokenStream *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_TokenStream_end(t_TokenStream *self)
        {
          OBJ_CALL(self->object.end());
          Py_RETURN_NONE;
        }

        static PyObject *t_TokenStream_incrementToken(t_TokenStream *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.incrementToken());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TokenStream_reset(t_TokenStream *self)
        {
          OBJ_CALL(self->object.reset());
          Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OpenBitSetDISI.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OpenBitSetDISI::class$ = NULL;
        jmethodID *OpenBitSetDISI::mids$ = NULL;
        bool OpenBitSetDISI::live$ = false;

        jclass OpenBitSetDISI::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OpenBitSetDISI");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_init$_3742065d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSetIterator;I)V");
            mids$[mid_inPlaceAnd_c2b5607d] = env->getMethodID(cls, "inPlaceAnd", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_inPlaceNot_c2b5607d] = env->getMethodID(cls, "inPlaceNot", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_inPlaceOr_c2b5607d] = env->getMethodID(cls, "inPlaceOr", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
            mids$[mid_inPlaceXor_c2b5607d] = env->getMethodID(cls, "inPlaceXor", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OpenBitSetDISI::OpenBitSetDISI(jint a0) : ::org::apache::lucene::util::OpenBitSet(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        OpenBitSetDISI::OpenBitSetDISI(const ::org::apache::lucene::search::DocIdSetIterator & a0, jint a1) : ::org::apache::lucene::util::OpenBitSet(env->newObject(initializeClass, &mids$, mid_init$_3742065d, a0.this$, a1)) {}

        void OpenBitSetDISI::inPlaceAnd(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceAnd_c2b5607d], a0.this$);
        }

        void OpenBitSetDISI::inPlaceNot(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceNot_c2b5607d], a0.this$);
        }

        void OpenBitSetDISI::inPlaceOr(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceOr_c2b5607d], a0.this$);
        }

        void OpenBitSetDISI::inPlaceXor(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_inPlaceXor_c2b5607d], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OpenBitSetDISI_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OpenBitSetDISI_init_(t_OpenBitSetDISI *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OpenBitSetDISI_inPlaceAnd(t_OpenBitSetDISI *self, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_inPlaceNot(t_OpenBitSetDISI *self, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_inPlaceOr(t_OpenBitSetDISI *self, PyObject *arg);
        static PyObject *t_OpenBitSetDISI_inPlaceXor(t_OpenBitSetDISI *self, PyObject *arg);

        static PyMethodDef t_OpenBitSetDISI__methods_[] = {
          DECLARE_METHOD(t_OpenBitSetDISI, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetDISI, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceAnd, METH_O),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceNot, METH_O),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceOr, METH_O),
          DECLARE_METHOD(t_OpenBitSetDISI, inPlaceXor, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OpenBitSetDISI, t_OpenBitSetDISI, ::org::apache::lucene::util::OpenBitSet, OpenBitSetDISI, t_OpenBitSetDISI_init_, 0, 0, 0, 0, 0);

        void t_OpenBitSetDISI::install(PyObject *module)
        {
          installType(&PY_TYPE(OpenBitSetDISI), module, "OpenBitSetDISI", 0);
        }

        void t_OpenBitSetDISI::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OpenBitSetDISI).tp_dict, "class_", make_descriptor(OpenBitSetDISI::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OpenBitSetDISI).tp_dict, "wrapfn_", make_descriptor(t_OpenBitSetDISI::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OpenBitSetDISI).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OpenBitSetDISI_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OpenBitSetDISI::initializeClass, 1)))
            return NULL;
          return t_OpenBitSetDISI::wrap_Object(OpenBitSetDISI(((t_OpenBitSetDISI *) arg)->object.this$));
        }
        static PyObject *t_OpenBitSetDISI_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OpenBitSetDISI::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OpenBitSetDISI_init_(t_OpenBitSetDISI *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              OpenBitSetDISI object((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                INT_CALL(object = OpenBitSetDISI(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
              jint a1;
              OpenBitSetDISI object((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0, &a1))
              {
                INT_CALL(object = OpenBitSetDISI(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceAnd(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceAnd(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceAnd", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceNot(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceNot(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceNot", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceOr(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceOr(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceOr", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSetDISI_inPlaceXor(t_OpenBitSetDISI *self, PyObject *arg)
        {
          ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
          {
            OBJ_CALL(self->object.inPlaceXor(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "inPlaceXor", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerImpl.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizerImpl::class$ = NULL;
          jmethodID *StandardTokenizerImpl::mids$ = NULL;
          bool StandardTokenizerImpl::live$ = false;
          jint StandardTokenizerImpl::HANGUL_TYPE = (jint) 0;
          jint StandardTokenizerImpl::HIRAGANA_TYPE = (jint) 0;
          jint StandardTokenizerImpl::IDEOGRAPHIC_TYPE = (jint) 0;
          jint StandardTokenizerImpl::KATAKANA_TYPE = (jint) 0;
          jint StandardTokenizerImpl::NUMERIC_TYPE = (jint) 0;
          jint StandardTokenizerImpl::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
          jint StandardTokenizerImpl::WORD_TYPE = (jint) 0;
          jint StandardTokenizerImpl::YYEOF = (jint) 0;
          jint StandardTokenizerImpl::YYINITIAL = (jint) 0;

          jclass StandardTokenizerImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizerImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
              mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
              mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
              mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
              mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
              mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
              mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
              mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
              mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
              mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
              mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
              HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
              IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
              KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
              NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
              SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
              WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
              YYEOF = env->getStaticIntField(cls, "YYEOF");
              YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          StandardTokenizerImpl::StandardTokenizerImpl(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jint StandardTokenizerImpl::getNextToken() const
          {
            return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
          }

          void StandardTokenizerImpl::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
          }

          void StandardTokenizerImpl::yybegin(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
          }

          jint StandardTokenizerImpl::yychar() const
          {
            return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
          }

          jchar StandardTokenizerImpl::yycharat(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
          }

          void StandardTokenizerImpl::yyclose() const
          {
            env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
          }

          jint StandardTokenizerImpl::yylength() const
          {
            return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
          }

          void StandardTokenizerImpl::yypushback(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
          }

          void StandardTokenizerImpl::yyreset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
          }

          jint StandardTokenizerImpl::yystate() const
          {
            return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
          }

          ::java::lang::String StandardTokenizerImpl::yytext() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_StandardTokenizerImpl_init_(t_StandardTokenizerImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_StandardTokenizerImpl_getNextToken(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_getText(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yybegin(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yychar(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yycharat(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yyclose(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yylength(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yypushback(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yyreset(t_StandardTokenizerImpl *self, PyObject *arg);
          static PyObject *t_StandardTokenizerImpl_yystate(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_yytext(t_StandardTokenizerImpl *self);
          static PyObject *t_StandardTokenizerImpl_get__nextToken(t_StandardTokenizerImpl *self, void *data);
          static PyGetSetDef t_StandardTokenizerImpl__fields_[] = {
            DECLARE_GET_FIELD(t_StandardTokenizerImpl, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardTokenizerImpl__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizerImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerImpl, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, getText, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yybegin, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yychar, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yycharat, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yyclose, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yylength, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yypushback, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yyreset, METH_O),
            DECLARE_METHOD(t_StandardTokenizerImpl, yystate, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerImpl, yytext, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizerImpl, t_StandardTokenizerImpl, ::java::lang::Object, StandardTokenizerImpl, t_StandardTokenizerImpl_init_, 0, 0, t_StandardTokenizerImpl__fields_, 0, 0);

          void t_StandardTokenizerImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizerImpl), module, "StandardTokenizerImpl", 0);
          }

          void t_StandardTokenizerImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "class_", make_descriptor(StandardTokenizerImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizerImpl::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl::HANGUL_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl::HIRAGANA_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl::IDEOGRAPHIC_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl::KATAKANA_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl::NUMERIC_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl::SOUTH_EAST_ASIAN_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl::WORD_TYPE));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl::YYEOF));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl::YYINITIAL));
          }

          static PyObject *t_StandardTokenizerImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizerImpl::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizerImpl::wrap_Object(StandardTokenizerImpl(((t_StandardTokenizerImpl *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizerImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizerImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_StandardTokenizerImpl_init_(t_StandardTokenizerImpl *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            StandardTokenizerImpl object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = StandardTokenizerImpl(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_StandardTokenizerImpl_getNextToken(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNextToken());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_getText(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getText", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yybegin(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yybegin(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yychar(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yychar());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yycharat(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.yycharat(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yyclose(t_StandardTokenizerImpl *self)
          {
            OBJ_CALL(self->object.yyclose());
            Py_RETURN_NONE;
          }

          static PyObject *t_StandardTokenizerImpl_yylength(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yylength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yypushback(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.yypushback(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yyreset(t_StandardTokenizerImpl *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.yyreset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerImpl_yystate(t_StandardTokenizerImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yystate());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerImpl_yytext(t_StandardTokenizerImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.yytext());
            return j2p(result);
          }

          static PyObject *t_StandardTokenizerImpl_get__nextToken(t_StandardTokenizerImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNextToken());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriter$IndexReaderWarmer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriter$IndexReaderWarmer::class$ = NULL;
        jmethodID *IndexWriter$IndexReaderWarmer::mids$ = NULL;
        bool IndexWriter$IndexReaderWarmer::live$ = false;

        jclass IndexWriter$IndexReaderWarmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriter$IndexReaderWarmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_warm_c9e29579] = env->getMethodID(cls, "warm", "(Lorg/apache/lucene/index/AtomicReader;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexWriter$IndexReaderWarmer::warm(const ::org::apache::lucene::index::AtomicReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_warm_c9e29579], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriter$IndexReaderWarmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter$IndexReaderWarmer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriter$IndexReaderWarmer_warm(t_IndexWriter$IndexReaderWarmer *self, PyObject *arg);

        static PyMethodDef t_IndexWriter$IndexReaderWarmer__methods_[] = {
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriter$IndexReaderWarmer, warm, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriter$IndexReaderWarmer, t_IndexWriter$IndexReaderWarmer, ::java::lang::Object, IndexWriter$IndexReaderWarmer, abstract_init, 0, 0, 0, 0, 0);

        void t_IndexWriter$IndexReaderWarmer::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriter$IndexReaderWarmer), module, "IndexWriter$IndexReaderWarmer", 0);
        }

        void t_IndexWriter$IndexReaderWarmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriter$IndexReaderWarmer).tp_dict, "class_", make_descriptor(IndexWriter$IndexReaderWarmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriter$IndexReaderWarmer).tp_dict, "wrapfn_", make_descriptor(t_IndexWriter$IndexReaderWarmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriter$IndexReaderWarmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexWriter$IndexReaderWarmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriter$IndexReaderWarmer::initializeClass, 1)))
            return NULL;
          return t_IndexWriter$IndexReaderWarmer::wrap_Object(IndexWriter$IndexReaderWarmer(((t_IndexWriter$IndexReaderWarmer *) arg)->object.this$));
        }
        static PyObject *t_IndexWriter$IndexReaderWarmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriter$IndexReaderWarmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexWriter$IndexReaderWarmer_warm(t_IndexWriter$IndexReaderWarmer *self, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.warm(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "warm", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/de/GermanMinimalStemFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {

          ::java::lang::Class *GermanMinimalStemFilterFactory::class$ = NULL;
          jmethodID *GermanMinimalStemFilterFactory::mids$ = NULL;
          bool GermanMinimalStemFilterFactory::live$ = false;

          jclass GermanMinimalStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/de/GermanMinimalStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GermanMinimalStemFilterFactory::GermanMinimalStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream GermanMinimalStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace de {
          static PyObject *t_GermanMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GermanMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GermanMinimalStemFilterFactory_init_(t_GermanMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GermanMinimalStemFilterFactory_create(t_GermanMinimalStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_GermanMinimalStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GermanMinimalStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GermanMinimalStemFilterFactory, t_GermanMinimalStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GermanMinimalStemFilterFactory, t_GermanMinimalStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_GermanMinimalStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GermanMinimalStemFilterFactory), module, "GermanMinimalStemFilterFactory", 0);
          }

          void t_GermanMinimalStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilterFactory).tp_dict, "class_", make_descriptor(GermanMinimalStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GermanMinimalStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GermanMinimalStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GermanMinimalStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GermanMinimalStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GermanMinimalStemFilterFactory::wrap_Object(GermanMinimalStemFilterFactory(((t_GermanMinimalStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GermanMinimalStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GermanMinimalStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GermanMinimalStemFilterFactory_init_(t_GermanMinimalStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GermanMinimalStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GermanMinimalStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GermanMinimalStemFilterFactory_create(t_GermanMinimalStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GermanMinimalStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/Bits$MatchNoBits.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *Bits$MatchNoBits::class$ = NULL;
        jmethodID *Bits$MatchNoBits::mids$ = NULL;
        bool Bits$MatchNoBits::live$ = false;

        jclass Bits$MatchNoBits::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/Bits$MatchNoBits");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Bits$MatchNoBits::Bits$MatchNoBits(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean Bits$MatchNoBits::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jint Bits$MatchNoBits::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_Bits$MatchNoBits_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Bits$MatchNoBits_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Bits$MatchNoBits_init_(t_Bits$MatchNoBits *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Bits$MatchNoBits_get(t_Bits$MatchNoBits *self, PyObject *arg);
        static PyObject *t_Bits$MatchNoBits_length(t_Bits$MatchNoBits *self);

        static PyMethodDef t_Bits$MatchNoBits__methods_[] = {
          DECLARE_METHOD(t_Bits$MatchNoBits, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchNoBits, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Bits$MatchNoBits, get, METH_O),
          DECLARE_METHOD(t_Bits$MatchNoBits, length, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Bits$MatchNoBits, t_Bits$MatchNoBits, ::java::lang::Object, Bits$MatchNoBits, t_Bits$MatchNoBits_init_, 0, 0, 0, 0, 0);

        void t_Bits$MatchNoBits::install(PyObject *module)
        {
          installType(&PY_TYPE(Bits$MatchNoBits), module, "Bits$MatchNoBits", 0);
        }

        void t_Bits$MatchNoBits::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Bits$MatchNoBits).tp_dict, "class_", make_descriptor(Bits$MatchNoBits::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Bits$MatchNoBits).tp_dict, "wrapfn_", make_descriptor(t_Bits$MatchNoBits::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Bits$MatchNoBits).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Bits$MatchNoBits_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Bits$MatchNoBits::initializeClass, 1)))
            return NULL;
          return t_Bits$MatchNoBits::wrap_Object(Bits$MatchNoBits(((t_Bits$MatchNoBits *) arg)->object.this$));
        }
        static PyObject *t_Bits$MatchNoBits_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Bits$MatchNoBits::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Bits$MatchNoBits_init_(t_Bits$MatchNoBits *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          Bits$MatchNoBits object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = Bits$MatchNoBits(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Bits$MatchNoBits_get(t_Bits$MatchNoBits *self, PyObject *arg)
        {
          jint a0;
          jboolean result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Bits$MatchNoBits_length(t_Bits$MatchNoBits *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/FloatField.h"
#include "org/apache/lucene/document/FieldType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/document/Field$Store.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *FloatField::class$ = NULL;
        jmethodID *FloatField::mids$ = NULL;
        bool FloatField::live$ = false;
        ::org::apache::lucene::document::FieldType *FloatField::TYPE_NOT_STORED = NULL;
        ::org::apache::lucene::document::FieldType *FloatField::TYPE_STORED = NULL;

        jclass FloatField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/FloatField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_866c7d94] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;FLorg/apache/lucene/document/Field$Store;)V");
            mids$[mid_init$_49ba27a3] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;FLorg/apache/lucene/document/FieldType;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            TYPE_NOT_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_NOT_STORED", "Lorg/apache/lucene/document/FieldType;"));
            TYPE_STORED = new ::org::apache::lucene::document::FieldType(env->getStaticObjectField(cls, "TYPE_STORED", "Lorg/apache/lucene/document/FieldType;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FloatField::FloatField(const ::java::lang::String & a0, jfloat a1, const ::org::apache::lucene::document::Field$Store & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_866c7d94, a0.this$, a1, a2.this$)) {}

        FloatField::FloatField(const ::java::lang::String & a0, jfloat a1, const ::org::apache::lucene::document::FieldType & a2) : ::org::apache::lucene::document::Field(env->newObject(initializeClass, &mids$, mid_init$_49ba27a3, a0.this$, a1, a2.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_FloatField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FloatField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FloatField_init_(t_FloatField *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_FloatField__methods_[] = {
          DECLARE_METHOD(t_FloatField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FloatField, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FloatField, t_FloatField, ::org::apache::lucene::document::Field, FloatField, t_FloatField_init_, 0, 0, 0, 0, 0);

        void t_FloatField::install(PyObject *module)
        {
          installType(&PY_TYPE(FloatField), module, "FloatField", 0);
        }

        void t_FloatField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "class_", make_descriptor(FloatField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "wrapfn_", make_descriptor(t_FloatField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FloatField::initializeClass);
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "TYPE_NOT_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*FloatField::TYPE_NOT_STORED)));
          PyDict_SetItemString(PY_TYPE(FloatField).tp_dict, "TYPE_STORED", make_descriptor(::org::apache::lucene::document::t_FieldType::wrap_Object(*FloatField::TYPE_STORED)));
        }

        static PyObject *t_FloatField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FloatField::initializeClass, 1)))
            return NULL;
          return t_FloatField::wrap_Object(FloatField(((t_FloatField *) arg)->object.this$));
        }
        static PyObject *t_FloatField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FloatField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FloatField_init_(t_FloatField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              ::org::apache::lucene::document::Field$Store a2((jobject) NULL);
              PyTypeObject **p2;
              FloatField object((jobject) NULL);

              if (!parseArgs(args, "sFK", ::org::apache::lucene::document::Field$Store::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_Field$Store::parameters_))
              {
                INT_CALL(object = FloatField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              jfloat a1;
              ::org::apache::lucene::document::FieldType a2((jobject) NULL);
              FloatField object((jobject) NULL);

              if (!parseArgs(args, "sFk", ::org::apache::lucene::document::FieldType::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = FloatField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/MultiLevelSkipListReader.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *MultiLevelSkipListReader::class$ = NULL;
        jmethodID *MultiLevelSkipListReader::mids$ = NULL;
        bool MultiLevelSkipListReader::live$ = false;

        jclass MultiLevelSkipListReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/MultiLevelSkipListReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_getDoc_54c6a179] = env->getMethodID(cls, "getDoc", "()I");
            mids$[mid_init_25d05c8f] = env->getMethodID(cls, "init", "(JI)V");
            mids$[mid_skipTo_39c7bd23] = env->getMethodID(cls, "skipTo", "(I)I");
            mids$[mid_seekChild_39c7bd3c] = env->getMethodID(cls, "seekChild", "(I)V");
            mids$[mid_setLastSkipData_39c7bd3c] = env->getMethodID(cls, "setLastSkipData", "(I)V");
            mids$[mid_readSkipData_5203bb2b] = env->getMethodID(cls, "readSkipData", "(ILorg/apache/lucene/store/IndexInput;)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void MultiLevelSkipListReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        jint MultiLevelSkipListReader::getDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_getDoc_54c6a179]);
        }

        void MultiLevelSkipListReader::init(jlong a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_init_25d05c8f], a0, a1);
        }

        jint MultiLevelSkipListReader::skipTo(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_skipTo_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_MultiLevelSkipListReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_close(t_MultiLevelSkipListReader *self);
        static PyObject *t_MultiLevelSkipListReader_getDoc(t_MultiLevelSkipListReader *self);
        static PyObject *t_MultiLevelSkipListReader_init(t_MultiLevelSkipListReader *self, PyObject *args);
        static PyObject *t_MultiLevelSkipListReader_skipTo(t_MultiLevelSkipListReader *self, PyObject *arg);
        static PyObject *t_MultiLevelSkipListReader_get__doc(t_MultiLevelSkipListReader *self, void *data);
        static PyGetSetDef t_MultiLevelSkipListReader__fields_[] = {
          DECLARE_GET_FIELD(t_MultiLevelSkipListReader, doc),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MultiLevelSkipListReader__methods_[] = {
          DECLARE_METHOD(t_MultiLevelSkipListReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, close, METH_NOARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, getDoc, METH_NOARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, init, METH_VARARGS),
          DECLARE_METHOD(t_MultiLevelSkipListReader, skipTo, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MultiLevelSkipListReader, t_MultiLevelSkipListReader, ::java::lang::Object, MultiLevelSkipListReader, abstract_init, 0, 0, t_MultiLevelSkipListReader__fields_, 0, 0);

        void t_MultiLevelSkipListReader::install(PyObject *module)
        {
          installType(&PY_TYPE(MultiLevelSkipListReader), module, "MultiLevelSkipListReader", 0);
        }

        void t_MultiLevelSkipListReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListReader).tp_dict, "class_", make_descriptor(MultiLevelSkipListReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListReader).tp_dict, "wrapfn_", make_descriptor(t_MultiLevelSkipListReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MultiLevelSkipListReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MultiLevelSkipListReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MultiLevelSkipListReader::initializeClass, 1)))
            return NULL;
          return t_MultiLevelSkipListReader::wrap_Object(MultiLevelSkipListReader(((t_MultiLevelSkipListReader *) arg)->object.this$));
        }
        static PyObject *t_MultiLevelSkipListReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MultiLevelSkipListReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MultiLevelSkipListReader_close(t_MultiLevelSkipListReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_MultiLevelSkipListReader_getDoc(t_MultiLevelSkipListReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MultiLevelSkipListReader_init(t_MultiLevelSkipListReader *self, PyObject *args)
        {
          jlong a0;
          jint a1;

          if (!parseArgs(args, "JI", &a0, &a1))
          {
            OBJ_CALL(self->object.init(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "init", args);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListReader_skipTo(t_MultiLevelSkipListReader *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.skipTo(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "skipTo", arg);
          return NULL;
        }

        static PyObject *t_MultiLevelSkipListReader_get__doc(t_MultiLevelSkipListReader *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDoc());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/IfFunction.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *IfFunction::class$ = NULL;
            jmethodID *IfFunction::mids$ = NULL;
            bool IfFunction::live$ = false;

            jclass IfFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/IfFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b33eec32] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            IfFunction::IfFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1, const ::org::apache::lucene::queries::function::ValueSource & a2) : ::org::apache::lucene::queries::function::valuesource::BoolFunction(env->newObject(initializeClass, &mids$, mid_init$_b33eec32, a0.this$, a1.this$, a2.this$)) {}

            void IfFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String IfFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean IfFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues IfFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint IfFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_IfFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_IfFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_IfFunction_init_(t_IfFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_IfFunction_createWeight(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_description(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_equals(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_getValues(t_IfFunction *self, PyObject *args);
            static PyObject *t_IfFunction_hashCode(t_IfFunction *self, PyObject *args);

            static PyMethodDef t_IfFunction__methods_[] = {
              DECLARE_METHOD(t_IfFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IfFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_IfFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_IfFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(IfFunction, t_IfFunction, ::org::apache::lucene::queries::function::valuesource::BoolFunction, IfFunction, t_IfFunction_init_, 0, 0, 0, 0, 0);

            void t_IfFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(IfFunction), module, "IfFunction", 0);
            }

            void t_IfFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(IfFunction).tp_dict, "class_", make_descriptor(IfFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(IfFunction).tp_dict, "wrapfn_", make_descriptor(t_IfFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(IfFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_IfFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, IfFunction::initializeClass, 1)))
                return NULL;
              return t_IfFunction::wrap_Object(IfFunction(((t_IfFunction *) arg)->object.this$));
            }
            static PyObject *t_IfFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, IfFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_IfFunction_init_(t_IfFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a2((jobject) NULL);
              IfFunction object((jobject) NULL);

              if (!parseArgs(args, "kkk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = IfFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_IfFunction_createWeight(t_IfFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_IfFunction_description(t_IfFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_IfFunction_equals(t_IfFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_IfFunction_getValues(t_IfFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_IfFunction_hashCode(t_IfFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(IfFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/InMemorySorter.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/fst/BytesRefSorter.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *InMemorySorter::class$ = NULL;
          jmethodID *InMemorySorter::mids$ = NULL;
          bool InMemorySorter::live$ = false;

          jclass InMemorySorter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/InMemorySorter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_6ffdd545] = env->getMethodID(cls, "<init>", "(Ljava/util/Comparator;)V");
              mids$[mid_add_7bc03dc4] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_iterator_534dea83] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/util/BytesRefIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          InMemorySorter::InMemorySorter(const ::java::util::Comparator & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6ffdd545, a0.this$)) {}

          void InMemorySorter::add(const ::org::apache::lucene::util::BytesRef & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_add_7bc03dc4], a0.this$);
          }

          ::java::util::Comparator InMemorySorter::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          ::org::apache::lucene::util::BytesRefIterator InMemorySorter::iterator() const
          {
            return ::org::apache::lucene::util::BytesRefIterator(env->callObjectMethod(this$, mids$[mid_iterator_534dea83]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_InMemorySorter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_InMemorySorter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_InMemorySorter_init_(t_InMemorySorter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_InMemorySorter_add(t_InMemorySorter *self, PyObject *arg);
          static PyObject *t_InMemorySorter_getComparator(t_InMemorySorter *self);
          static PyObject *t_InMemorySorter_iterator(t_InMemorySorter *self);
          static PyObject *t_InMemorySorter_get__comparator(t_InMemorySorter *self, void *data);
          static PyGetSetDef t_InMemorySorter__fields_[] = {
            DECLARE_GET_FIELD(t_InMemorySorter, comparator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_InMemorySorter__methods_[] = {
            DECLARE_METHOD(t_InMemorySorter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InMemorySorter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InMemorySorter, add, METH_O),
            DECLARE_METHOD(t_InMemorySorter, getComparator, METH_NOARGS),
            DECLARE_METHOD(t_InMemorySorter, iterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(InMemorySorter, t_InMemorySorter, ::java::lang::Object, InMemorySorter, t_InMemorySorter_init_, 0, 0, t_InMemorySorter__fields_, 0, 0);

          void t_InMemorySorter::install(PyObject *module)
          {
            installType(&PY_TYPE(InMemorySorter), module, "InMemorySorter", 0);
          }

          void t_InMemorySorter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(InMemorySorter).tp_dict, "class_", make_descriptor(InMemorySorter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InMemorySorter).tp_dict, "wrapfn_", make_descriptor(t_InMemorySorter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InMemorySorter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_InMemorySorter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, InMemorySorter::initializeClass, 1)))
              return NULL;
            return t_InMemorySorter::wrap_Object(InMemorySorter(((t_InMemorySorter *) arg)->object.this$));
          }
          static PyObject *t_InMemorySorter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, InMemorySorter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_InMemorySorter_init_(t_InMemorySorter *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Comparator a0((jobject) NULL);
            PyTypeObject **p0;
            InMemorySorter object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Comparator::initializeClass, &a0, &p0, ::java::util::t_Comparator::parameters_))
            {
              INT_CALL(object = InMemorySorter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_InMemorySorter_add(t_InMemorySorter *self, PyObject *arg)
          {
            ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
            {
              OBJ_CALL(self->object.add(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
          }

          static PyObject *t_InMemorySorter_getComparator(t_InMemorySorter *self)
          {
            ::java::util::Comparator result((jobject) NULL);
            OBJ_CALL(result = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          static PyObject *t_InMemorySorter_iterator(t_InMemorySorter *self)
          {
            ::org::apache::lucene::util::BytesRefIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::util::t_BytesRefIterator::wrap_Object(result);
          }

          static PyObject *t_InMemorySorter_get__comparator(t_InMemorySorter *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene46/Lucene46Codec.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {

          ::java::lang::Class *Lucene46Codec::class$ = NULL;
          jmethodID *Lucene46Codec::mids$ = NULL;
          bool Lucene46Codec::live$ = false;

          jclass Lucene46Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene46/Lucene46Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene46Codec::Lucene46Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene46Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene46Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene46Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene46Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene46Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene46Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene46Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene46Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene46Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene46Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene46 {
          static PyObject *t_Lucene46Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene46Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene46Codec_init_(t_Lucene46Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene46Codec_docValuesFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_fieldInfosFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_getDocValuesFormatForField(t_Lucene46Codec *self, PyObject *arg);
          static PyObject *t_Lucene46Codec_getPostingsFormatForField(t_Lucene46Codec *self, PyObject *arg);
          static PyObject *t_Lucene46Codec_liveDocsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_normsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_postingsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_segmentInfoFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_storedFieldsFormat(t_Lucene46Codec *self, PyObject *args);
          static PyObject *t_Lucene46Codec_termVectorsFormat(t_Lucene46Codec *self, PyObject *args);

          static PyMethodDef t_Lucene46Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene46Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene46Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene46Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene46Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene46Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene46Codec, t_Lucene46Codec, ::org::apache::lucene::codecs::Codec, Lucene46Codec, t_Lucene46Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene46Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene46Codec), module, "Lucene46Codec", 0);
          }

          void t_Lucene46Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene46Codec).tp_dict, "class_", make_descriptor(Lucene46Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene46Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene46Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene46Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene46Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene46Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene46Codec::wrap_Object(Lucene46Codec(((t_Lucene46Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene46Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene46Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene46Codec_init_(t_Lucene46Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene46Codec object((jobject) NULL);

            INT_CALL(object = Lucene46Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene46Codec_docValuesFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_fieldInfosFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_getDocValuesFormatForField(t_Lucene46Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene46Codec_getPostingsFormatForField(t_Lucene46Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene46Codec_liveDocsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_normsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_postingsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_segmentInfoFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_storedFieldsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene46Codec_termVectorsFormat(t_Lucene46Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene46Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/Attribute.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeFactory$StaticImplementationAttributeFactory::class$ = NULL;
        jmethodID *AttributeFactory$StaticImplementationAttributeFactory::mids$ = NULL;
        bool AttributeFactory$StaticImplementationAttributeFactory::live$ = false;

        jclass AttributeFactory$StaticImplementationAttributeFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeFactory$StaticImplementationAttributeFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a612bb24] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/lang/Class;)V");
            mids$[mid_createAttributeInstance_4f9d0910] = env->getMethodID(cls, "createAttributeInstance", "(Ljava/lang/Class;)Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_createInstance_a200d3c2] = env->getMethodID(cls, "createInstance", "()Lorg/apache/lucene/util/AttributeImpl;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeFactory$StaticImplementationAttributeFactory::AttributeFactory$StaticImplementationAttributeFactory(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::lang::Class & a1) : ::org::apache::lucene::util::AttributeFactory(env->newObject(initializeClass, &mids$, mid_init$_a612bb24, a0.this$, a1.this$)) {}

        ::org::apache::lucene::util::AttributeImpl AttributeFactory$StaticImplementationAttributeFactory::createAttributeInstance(const ::java::lang::Class & a0) const
        {
          return ::org::apache::lucene::util::AttributeImpl(env->callObjectMethod(this$, mids$[mid_createAttributeInstance_4f9d0910], a0.this$));
        }

        jboolean AttributeFactory$StaticImplementationAttributeFactory::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint AttributeFactory$StaticImplementationAttributeFactory::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_of_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static int t_AttributeFactory$StaticImplementationAttributeFactory_init_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_createAttributeInstance(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_equals(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_hashCode(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args);
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_get__parameters_(t_AttributeFactory$StaticImplementationAttributeFactory *self, void *data);
        static PyGetSetDef t_AttributeFactory$StaticImplementationAttributeFactory__fields_[] = {
          DECLARE_GET_FIELD(t_AttributeFactory$StaticImplementationAttributeFactory, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AttributeFactory$StaticImplementationAttributeFactory__methods_[] = {
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, of_, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, createAttributeInstance, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, equals, METH_VARARGS),
          DECLARE_METHOD(t_AttributeFactory$StaticImplementationAttributeFactory, hashCode, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeFactory$StaticImplementationAttributeFactory, t_AttributeFactory$StaticImplementationAttributeFactory, ::org::apache::lucene::util::AttributeFactory, AttributeFactory$StaticImplementationAttributeFactory, t_AttributeFactory$StaticImplementationAttributeFactory_init_, 0, 0, t_AttributeFactory$StaticImplementationAttributeFactory__fields_, 0, 0);
        PyObject *t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(const AttributeFactory$StaticImplementationAttributeFactory& object, PyTypeObject *p0)
        {
          PyObject *obj = t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_AttributeFactory$StaticImplementationAttributeFactory *self = (t_AttributeFactory$StaticImplementationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_AttributeFactory$StaticImplementationAttributeFactory *self = (t_AttributeFactory$StaticImplementationAttributeFactory *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_AttributeFactory$StaticImplementationAttributeFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), module, "AttributeFactory$StaticImplementationAttributeFactory", 0);
        }

        void t_AttributeFactory$StaticImplementationAttributeFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory).tp_dict, "class_", make_descriptor(AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory).tp_dict, "wrapfn_", make_descriptor(t_AttributeFactory$StaticImplementationAttributeFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 1)))
            return NULL;
          return t_AttributeFactory$StaticImplementationAttributeFactory::wrap_Object(AttributeFactory$StaticImplementationAttributeFactory(((t_AttributeFactory$StaticImplementationAttributeFactory *) arg)->object.this$));
        }
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeFactory$StaticImplementationAttributeFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_of_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_AttributeFactory$StaticImplementationAttributeFactory_init_(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
          ::java::lang::Class a1((jobject) NULL);
          PyTypeObject **p1;
          AttributeFactory$StaticImplementationAttributeFactory object((jobject) NULL);

          if (!parseArgs(args, "kK", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
          {
            INT_CALL(object = AttributeFactory$StaticImplementationAttributeFactory(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_createAttributeInstance(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          ::java::lang::Class a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::util::AttributeImpl result((jobject) NULL);

          if (!parseArgs(args, "K", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_))
          {
            OBJ_CALL(result = self->object.createAttributeInstance(a0));
            return ::org::apache::lucene::util::t_AttributeImpl::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "createAttributeInstance", args, 2);
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_equals(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_hashCode(t_AttributeFactory$StaticImplementationAttributeFactory *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(AttributeFactory$StaticImplementationAttributeFactory), (PyObject *) self, "hashCode", args, 2);
        }
        static PyObject *t_AttributeFactory$StaticImplementationAttributeFactory_get__parameters_(t_AttributeFactory$StaticImplementationAttributeFactory *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/miscellaneous/CodepointCountFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *CodepointCountFilterFactory::class$ = NULL;
          jmethodID *CodepointCountFilterFactory::mids$ = NULL;
          bool CodepointCountFilterFactory::live$ = false;
          ::java::lang::String *CodepointCountFilterFactory::MAX_KEY = NULL;
          ::java::lang::String *CodepointCountFilterFactory::MIN_KEY = NULL;

          jclass CodepointCountFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/CodepointCountFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_0d6a0318] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/miscellaneous/CodepointCountFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              MAX_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MAX_KEY", "Ljava/lang/String;"));
              MIN_KEY = new ::java::lang::String(env->getStaticObjectField(cls, "MIN_KEY", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CodepointCountFilterFactory::CodepointCountFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter CodepointCountFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter(env->callObjectMethod(this$, mids$[mid_create_0d6a0318], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_CodepointCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CodepointCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CodepointCountFilterFactory_init_(t_CodepointCountFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CodepointCountFilterFactory_create(t_CodepointCountFilterFactory *self, PyObject *args);

          static PyMethodDef t_CodepointCountFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CodepointCountFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CodepointCountFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CodepointCountFilterFactory, t_CodepointCountFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CodepointCountFilterFactory, t_CodepointCountFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_CodepointCountFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CodepointCountFilterFactory), module, "CodepointCountFilterFactory", 0);
          }

          void t_CodepointCountFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "class_", make_descriptor(CodepointCountFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CodepointCountFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CodepointCountFilterFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "MAX_KEY", make_descriptor(j2p(*CodepointCountFilterFactory::MAX_KEY)));
            PyDict_SetItemString(PY_TYPE(CodepointCountFilterFactory).tp_dict, "MIN_KEY", make_descriptor(j2p(*CodepointCountFilterFactory::MIN_KEY)));
          }

          static PyObject *t_CodepointCountFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CodepointCountFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CodepointCountFilterFactory::wrap_Object(CodepointCountFilterFactory(((t_CodepointCountFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CodepointCountFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CodepointCountFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CodepointCountFilterFactory_init_(t_CodepointCountFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CodepointCountFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CodepointCountFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CodepointCountFilterFactory_create(t_CodepointCountFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::miscellaneous::CodepointCountFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::miscellaneous::t_CodepointCountFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CodepointCountFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *FieldInfosWriter::class$ = NULL;
        jmethodID *FieldInfosWriter::mids$ = NULL;
        bool FieldInfosWriter::live$ = false;

        jclass FieldInfosWriter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/FieldInfosWriter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_write_e0613aa0] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void FieldInfosWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::index::FieldInfos & a3, const ::org::apache::lucene::store::IOContext & a4) const
        {
          env->callVoidMethod(this$, mids$[mid_write_e0613aa0], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_FieldInfosWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosWriter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfosWriter_write(t_FieldInfosWriter *self, PyObject *args);

        static PyMethodDef t_FieldInfosWriter__methods_[] = {
          DECLARE_METHOD(t_FieldInfosWriter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosWriter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfosWriter, write, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfosWriter, t_FieldInfosWriter, ::java::lang::Object, FieldInfosWriter, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldInfosWriter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfosWriter), module, "FieldInfosWriter", 0);
        }

        void t_FieldInfosWriter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfosWriter).tp_dict, "class_", make_descriptor(FieldInfosWriter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfosWriter).tp_dict, "wrapfn_", make_descriptor(t_FieldInfosWriter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfosWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfosWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfosWriter::initializeClass, 1)))
            return NULL;
          return t_FieldInfosWriter::wrap_Object(FieldInfosWriter(((t_FieldInfosWriter *) arg)->object.this$));
        }
        static PyObject *t_FieldInfosWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfosWriter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldInfosWriter_write(t_FieldInfosWriter *self, PyObject *args)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          ::org::apache::lucene::index::FieldInfos a3((jobject) NULL);
          ::org::apache::lucene::store::IOContext a4((jobject) NULL);

          if (!parseArgs(args, "ksskk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(self->object.write(a0, a1, a2, a3, a4));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "write", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/OffsetLimitTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *OffsetLimitTokenFilter::class$ = NULL;
          jmethodID *OffsetLimitTokenFilter::mids$ = NULL;
          bool OffsetLimitTokenFilter::live$ = false;

          jclass OffsetLimitTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/OffsetLimitTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          OffsetLimitTokenFilter::OffsetLimitTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean OffsetLimitTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void OffsetLimitTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_OffsetLimitTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_OffsetLimitTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_OffsetLimitTokenFilter_init_(t_OffsetLimitTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_OffsetLimitTokenFilter_incrementToken(t_OffsetLimitTokenFilter *self, PyObject *args);
          static PyObject *t_OffsetLimitTokenFilter_reset(t_OffsetLimitTokenFilter *self, PyObject *args);

          static PyMethodDef t_OffsetLimitTokenFilter__methods_[] = {
            DECLARE_METHOD(t_OffsetLimitTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_OffsetLimitTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(OffsetLimitTokenFilter, t_OffsetLimitTokenFilter, ::org::apache::lucene::analysis::TokenFilter, OffsetLimitTokenFilter, t_OffsetLimitTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_OffsetLimitTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(OffsetLimitTokenFilter), module, "OffsetLimitTokenFilter", 0);
          }

          void t_OffsetLimitTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(OffsetLimitTokenFilter).tp_dict, "class_", make_descriptor(OffsetLimitTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OffsetLimitTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_OffsetLimitTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OffsetLimitTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_OffsetLimitTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, OffsetLimitTokenFilter::initializeClass, 1)))
              return NULL;
            return t_OffsetLimitTokenFilter::wrap_Object(OffsetLimitTokenFilter(((t_OffsetLimitTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_OffsetLimitTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, OffsetLimitTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_OffsetLimitTokenFilter_init_(t_OffsetLimitTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jint a1;
            OffsetLimitTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = OffsetLimitTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_OffsetLimitTokenFilter_incrementToken(t_OffsetLimitTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(OffsetLimitTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_OffsetLimitTokenFilter_reset(t_OffsetLimitTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(OffsetLimitTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentReadState::class$ = NULL;
        jmethodID *SegmentReadState::mids$ = NULL;
        jfieldID *SegmentReadState::fids$ = NULL;
        bool SegmentReadState::live$ = false;

        jclass SegmentReadState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentReadState");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_de7693af] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/SegmentReadState;Ljava/lang/String;)V");
            mids$[mid_init$_2ca58583] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;I)V");
            mids$[mid_init$_29b19e65] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;ILjava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_context] = env->getFieldID(cls, "context", "Lorg/apache/lucene/store/IOContext;");
            fids$[fid_directory] = env->getFieldID(cls, "directory", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");
            fids$[fid_segmentSuffix] = env->getFieldID(cls, "segmentSuffix", "Ljava/lang/String;");
            fids$[fid_termsIndexDivisor] = env->getFieldID(cls, "termsIndexDivisor", "I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentReadState::SegmentReadState(const SegmentReadState & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_de7693af, a0.this$, a1.this$)) {}

        SegmentReadState::SegmentReadState(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3, jint a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2ca58583, a0.this$, a1.this$, a2.this$, a3.this$, a4)) {}

        SegmentReadState::SegmentReadState(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3, jint a4, const ::java::lang::String & a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_29b19e65, a0.this$, a1.this$, a2.this$, a3.this$, a4, a5.this$)) {}

        ::org::apache::lucene::store::IOContext SegmentReadState::_get_context() const
        {
          return ::org::apache::lucene::store::IOContext(env->getObjectField(this$, fids$[fid_context]));
        }

        ::org::apache::lucene::store::Directory SegmentReadState::_get_directory() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_directory]));
        }

        ::org::apache::lucene::index::FieldInfos SegmentReadState::_get_fieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        ::org::apache::lucene::index::SegmentInfo SegmentReadState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }

        ::java::lang::String SegmentReadState::_get_segmentSuffix() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_segmentSuffix]));
        }

        jint SegmentReadState::_get_termsIndexDivisor() const
        {
          return env->getIntField(this$, fids$[fid_termsIndexDivisor]);
        }

        void SegmentReadState::_set_termsIndexDivisor(jint a0) const
        {
          env->setIntField(this$, fids$[fid_termsIndexDivisor], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentReadState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentReadState_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentReadState_init_(t_SegmentReadState *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentReadState_get__context(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__directory(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__fieldInfos(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__segmentInfo(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__segmentSuffix(t_SegmentReadState *self, void *data);
        static PyObject *t_SegmentReadState_get__termsIndexDivisor(t_SegmentReadState *self, void *data);
        static int t_SegmentReadState_set__termsIndexDivisor(t_SegmentReadState *self, PyObject *arg, void *data);

        static PyGetSetDef t_SegmentReadState__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentReadState, context),
          DECLARE_GET_FIELD(t_SegmentReadState, directory),
          DECLARE_GET_FIELD(t_SegmentReadState, fieldInfos),
          DECLARE_GET_FIELD(t_SegmentReadState, segmentInfo),
          DECLARE_GET_FIELD(t_SegmentReadState, segmentSuffix),
          DECLARE_GETSET_FIELD(t_SegmentReadState, termsIndexDivisor),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentReadState__methods_[] = {
          DECLARE_METHOD(t_SegmentReadState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentReadState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentReadState, t_SegmentReadState, ::java::lang::Object, SegmentReadState, t_SegmentReadState_init_, 0, 0, t_SegmentReadState__fields_, 0, 0);

        void t_SegmentReadState::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentReadState), module, "SegmentReadState", 0);
        }

        void t_SegmentReadState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentReadState).tp_dict, "class_", make_descriptor(SegmentReadState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentReadState).tp_dict, "wrapfn_", make_descriptor(t_SegmentReadState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentReadState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentReadState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentReadState::initializeClass, 1)))
            return NULL;
          return t_SegmentReadState::wrap_Object(SegmentReadState(((t_SegmentReadState *) arg)->object.this$));
        }
        static PyObject *t_SegmentReadState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentReadState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentReadState_init_(t_SegmentReadState *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              SegmentReadState a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "ks", SegmentReadState::initializeClass, &a0, &a1))
              {
                INT_CALL(object = SegmentReadState(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 5:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
              ::org::apache::lucene::store::IOContext a3((jobject) NULL);
              jint a4;
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "kkkkI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                INT_CALL(object = SegmentReadState(a0, a1, a2, a3, a4));
                self->object = object;
                break;
              }
            }
            goto err;
           case 6:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
              ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
              ::org::apache::lucene::store::IOContext a3((jobject) NULL);
              jint a4;
              ::java::lang::String a5((jobject) NULL);
              SegmentReadState object((jobject) NULL);

              if (!parseArgs(args, "kkkkIs", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
              {
                INT_CALL(object = SegmentReadState(a0, a1, a2, a3, a4, a5));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentReadState_get__context(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::store::IOContext value((jobject) NULL);
          OBJ_CALL(value = self->object._get_context());
          return ::org::apache::lucene::store::t_IOContext::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__directory(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_directory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__fieldInfos(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__segmentInfo(t_SegmentReadState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }

        static PyObject *t_SegmentReadState_get__segmentSuffix(t_SegmentReadState *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentSuffix());
          return j2p(value);
        }

        static PyObject *t_SegmentReadState_get__termsIndexDivisor(t_SegmentReadState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_termsIndexDivisor());
          return PyInt_FromLong((long) value);
        }
        static int t_SegmentReadState_set__termsIndexDivisor(t_SegmentReadState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_termsIndexDivisor(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termsIndexDivisor", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tr/ApostropheFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {

          ::java::lang::Class *ApostropheFilterFactory::class$ = NULL;
          jmethodID *ApostropheFilterFactory::mids$ = NULL;
          bool ApostropheFilterFactory::live$ = false;

          jclass ApostropheFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tr/ApostropheFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ApostropheFilterFactory::ApostropheFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream ApostropheFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tr {
          static PyObject *t_ApostropheFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ApostropheFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ApostropheFilterFactory_init_(t_ApostropheFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ApostropheFilterFactory_create(t_ApostropheFilterFactory *self, PyObject *args);

          static PyMethodDef t_ApostropheFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ApostropheFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ApostropheFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ApostropheFilterFactory, t_ApostropheFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ApostropheFilterFactory, t_ApostropheFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ApostropheFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ApostropheFilterFactory), module, "ApostropheFilterFactory", 0);
          }

          void t_ApostropheFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ApostropheFilterFactory).tp_dict, "class_", make_descriptor(ApostropheFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ApostropheFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ApostropheFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ApostropheFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ApostropheFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ApostropheFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ApostropheFilterFactory::wrap_Object(ApostropheFilterFactory(((t_ApostropheFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ApostropheFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ApostropheFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ApostropheFilterFactory_init_(t_ApostropheFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ApostropheFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ApostropheFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ApostropheFilterFactory_create(t_ApostropheFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ApostropheFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41Codec.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41Codec::class$ = NULL;
          jmethodID *Lucene41Codec::mids$ = NULL;
          bool Lucene41Codec::live$ = false;

          jclass Lucene41Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41Codec::Lucene41Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene41Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene41Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene41Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene41Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene41Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene41Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene41Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene41Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene41Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41Codec_init_(t_Lucene41Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41Codec_docValuesFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_fieldInfosFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_getPostingsFormatForField(t_Lucene41Codec *self, PyObject *arg);
          static PyObject *t_Lucene41Codec_liveDocsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_normsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_postingsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_segmentInfoFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_storedFieldsFormat(t_Lucene41Codec *self, PyObject *args);
          static PyObject *t_Lucene41Codec_termVectorsFormat(t_Lucene41Codec *self, PyObject *args);

          static PyMethodDef t_Lucene41Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene41Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene41Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41Codec, t_Lucene41Codec, ::org::apache::lucene::codecs::Codec, Lucene41Codec, t_Lucene41Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene41Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41Codec), module, "Lucene41Codec", 0);
          }

          void t_Lucene41Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41Codec).tp_dict, "class_", make_descriptor(Lucene41Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene41Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene41Codec::wrap_Object(Lucene41Codec(((t_Lucene41Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene41Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41Codec_init_(t_Lucene41Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene41Codec object((jobject) NULL);

            INT_CALL(object = Lucene41Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene41Codec_docValuesFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_fieldInfosFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_getPostingsFormatForField(t_Lucene41Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene41Codec_liveDocsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_normsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_postingsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_segmentInfoFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_storedFieldsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene41Codec_termVectorsFormat(t_Lucene41Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/TypeTokenFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "java/util/Set.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *TypeTokenFilter::class$ = NULL;
          jmethodID *TypeTokenFilter::mids$ = NULL;
          bool TypeTokenFilter::live$ = false;

          jclass TypeTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/TypeTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ecce6e0b] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;)V");
              mids$[mid_init$_eb1a7514] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;Z)V");
              mids$[mid_init$_bac183a2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;)V");
              mids$[mid_init$_436958cb] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;ZLorg/apache/lucene/analysis/TokenStream;Ljava/util/Set;Z)V");
              mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::util::Set & a2) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_ecce6e0b, a0.this$, a1.this$, a2.this$)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::java::util::Set & a2, jboolean a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_eb1a7514, a0.this$, a1.this$, a2.this$, a3)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, const ::java::util::Set & a3) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_bac183a2, a0.this$, a1, a2.this$, a3.this$)) {}

          TypeTokenFilter::TypeTokenFilter(const ::org::apache::lucene::util::Version & a0, jboolean a1, const ::org::apache::lucene::analysis::TokenStream & a2, const ::java::util::Set & a3, jboolean a4) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_436958cb, a0.this$, a1, a2.this$, a3.this$, a4)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_TypeTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TypeTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TypeTokenFilter_init_(t_TypeTokenFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_TypeTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TypeTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TypeTokenFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TypeTokenFilter, t_TypeTokenFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, TypeTokenFilter, t_TypeTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TypeTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TypeTokenFilter), module, "TypeTokenFilter", 0);
          }

          void t_TypeTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TypeTokenFilter).tp_dict, "class_", make_descriptor(TypeTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TypeTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TypeTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TypeTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TypeTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TypeTokenFilter::wrap_Object(TypeTokenFilter(((t_TypeTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TypeTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TypeTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TypeTokenFilter_init_(t_TypeTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KkKZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &p2, ::java::util::t_Set::parameters_, &a3))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KZkK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                jboolean a4;
                TypeTokenFilter object((jobject) NULL);

                if (!parseArgs(args, "KZkKZ", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::Set::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_, &a4))
                {
                  INT_CALL(object = TypeTokenFilter(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/facet/taxonomy/FacetLabel.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *TaxonomyReader::class$ = NULL;
          jmethodID *TaxonomyReader::mids$ = NULL;
          bool TaxonomyReader::live$ = false;
          jint TaxonomyReader::INVALID_ORDINAL = (jint) 0;
          jint TaxonomyReader::ROOT_ORDINAL = (jint) 0;

          jclass TaxonomyReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/TaxonomyReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_decRef_54c6a166] = env->getMethodID(cls, "decRef", "()V");
              mids$[mid_getChildren_0efef1b4] = env->getMethodID(cls, "getChildren", "(I)Lorg/apache/lucene/facet/taxonomy/TaxonomyReader$ChildrenIterator;");
              mids$[mid_getCommitUserData_db60befd] = env->getMethodID(cls, "getCommitUserData", "()Ljava/util/Map;");
              mids$[mid_getOrdinal_283f83f5] = env->getMethodID(cls, "getOrdinal", "(Lorg/apache/lucene/facet/taxonomy/FacetLabel;)I");
              mids$[mid_getOrdinal_ba45d675] = env->getMethodID(cls, "getOrdinal", "(Ljava/lang/String;[Ljava/lang/String;)I");
              mids$[mid_getParallelTaxonomyArrays_306e748e] = env->getMethodID(cls, "getParallelTaxonomyArrays", "()Lorg/apache/lucene/facet/taxonomy/ParallelTaxonomyArrays;");
              mids$[mid_getPath_38cf071d] = env->getMethodID(cls, "getPath", "(I)Lorg/apache/lucene/facet/taxonomy/FacetLabel;");
              mids$[mid_getRefCount_54c6a179] = env->getMethodID(cls, "getRefCount", "()I");
              mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
              mids$[mid_incRef_54c6a166] = env->getMethodID(cls, "incRef", "()V");
              mids$[mid_openIfChanged_aed3bb6f] = env->getStaticMethodID(cls, "openIfChanged", "(Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;)Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;");
              mids$[mid_tryIncRef_54c6a16a] = env->getMethodID(cls, "tryIncRef", "()Z");
              mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
              mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");
              mids$[mid_doOpenIfChanged_f67f5c74] = env->getMethodID(cls, "doOpenIfChanged", "()Lorg/apache/lucene/facet/taxonomy/TaxonomyReader;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              INVALID_ORDINAL = env->getStaticIntField(cls, "INVALID_ORDINAL");
              ROOT_ORDINAL = env->getStaticIntField(cls, "ROOT_ORDINAL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TaxonomyReader::TaxonomyReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void TaxonomyReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void TaxonomyReader::decRef() const
          {
            env->callVoidMethod(this$, mids$[mid_decRef_54c6a166]);
          }

          ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator TaxonomyReader::getChildren(jint a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator(env->callObjectMethod(this$, mids$[mid_getChildren_0efef1b4], a0));
          }

          ::java::util::Map TaxonomyReader::getCommitUserData() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getCommitUserData_db60befd]));
          }

          jint TaxonomyReader::getOrdinal(const ::org::apache::lucene::facet::taxonomy::FacetLabel & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_getOrdinal_283f83f5], a0.this$);
          }

          jint TaxonomyReader::getOrdinal(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_getOrdinal_ba45d675], a0.this$, a1.this$);
          }

          ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays TaxonomyReader::getParallelTaxonomyArrays() const
          {
            return ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays(env->callObjectMethod(this$, mids$[mid_getParallelTaxonomyArrays_306e748e]));
          }

          ::org::apache::lucene::facet::taxonomy::FacetLabel TaxonomyReader::getPath(jint a0) const
          {
            return ::org::apache::lucene::facet::taxonomy::FacetLabel(env->callObjectMethod(this$, mids$[mid_getPath_38cf071d], a0));
          }

          jint TaxonomyReader::getRefCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getRefCount_54c6a179]);
          }

          jint TaxonomyReader::getSize() const
          {
            return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
          }

          void TaxonomyReader::incRef() const
          {
            env->callVoidMethod(this$, mids$[mid_incRef_54c6a166]);
          }

          TaxonomyReader TaxonomyReader::openIfChanged(const TaxonomyReader & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return TaxonomyReader(env->callStaticObjectMethod(cls, mids$[mid_openIfChanged_aed3bb6f], a0.this$));
          }

          jboolean TaxonomyReader::tryIncRef() const
          {
            return env->callBooleanMethod(this$, mids$[mid_tryIncRef_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_TaxonomyReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TaxonomyReader_init_(t_TaxonomyReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TaxonomyReader_close(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_decRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getChildren(t_TaxonomyReader *self, PyObject *arg);
          static PyObject *t_TaxonomyReader_getCommitUserData(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getOrdinal(t_TaxonomyReader *self, PyObject *args);
          static PyObject *t_TaxonomyReader_getParallelTaxonomyArrays(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getPath(t_TaxonomyReader *self, PyObject *arg);
          static PyObject *t_TaxonomyReader_getRefCount(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_getSize(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_incRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_openIfChanged(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TaxonomyReader_tryIncRef(t_TaxonomyReader *self);
          static PyObject *t_TaxonomyReader_get__commitUserData(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__parallelTaxonomyArrays(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__refCount(t_TaxonomyReader *self, void *data);
          static PyObject *t_TaxonomyReader_get__size(t_TaxonomyReader *self, void *data);
          static PyGetSetDef t_TaxonomyReader__fields_[] = {
            DECLARE_GET_FIELD(t_TaxonomyReader, commitUserData),
            DECLARE_GET_FIELD(t_TaxonomyReader, parallelTaxonomyArrays),
            DECLARE_GET_FIELD(t_TaxonomyReader, refCount),
            DECLARE_GET_FIELD(t_TaxonomyReader, size),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_TaxonomyReader__methods_[] = {
            DECLARE_METHOD(t_TaxonomyReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, close, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, decRef, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getChildren, METH_O),
            DECLARE_METHOD(t_TaxonomyReader, getCommitUserData, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getOrdinal, METH_VARARGS),
            DECLARE_METHOD(t_TaxonomyReader, getParallelTaxonomyArrays, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getPath, METH_O),
            DECLARE_METHOD(t_TaxonomyReader, getRefCount, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, getSize, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, incRef, METH_NOARGS),
            DECLARE_METHOD(t_TaxonomyReader, openIfChanged, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TaxonomyReader, tryIncRef, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TaxonomyReader, t_TaxonomyReader, ::java::lang::Object, TaxonomyReader, t_TaxonomyReader_init_, 0, 0, t_TaxonomyReader__fields_, 0, 0);

          void t_TaxonomyReader::install(PyObject *module)
          {
            installType(&PY_TYPE(TaxonomyReader), module, "TaxonomyReader", 0);
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "ChildrenIterator", make_descriptor(&PY_TYPE(TaxonomyReader$ChildrenIterator)));
          }

          void t_TaxonomyReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "class_", make_descriptor(TaxonomyReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "wrapfn_", make_descriptor(t_TaxonomyReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(TaxonomyReader::initializeClass);
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "INVALID_ORDINAL", make_descriptor(TaxonomyReader::INVALID_ORDINAL));
            PyDict_SetItemString(PY_TYPE(TaxonomyReader).tp_dict, "ROOT_ORDINAL", make_descriptor(TaxonomyReader::ROOT_ORDINAL));
          }

          static PyObject *t_TaxonomyReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TaxonomyReader::initializeClass, 1)))
              return NULL;
            return t_TaxonomyReader::wrap_Object(TaxonomyReader(((t_TaxonomyReader *) arg)->object.this$));
          }
          static PyObject *t_TaxonomyReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TaxonomyReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TaxonomyReader_init_(t_TaxonomyReader *self, PyObject *args, PyObject *kwds)
          {
            TaxonomyReader object((jobject) NULL);

            INT_CALL(object = TaxonomyReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_TaxonomyReader_close(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_decRef(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.decRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_getChildren(t_TaxonomyReader *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::facet::taxonomy::TaxonomyReader$ChildrenIterator result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getChildren(a0));
              return ::org::apache::lucene::facet::taxonomy::t_TaxonomyReader$ChildrenIterator::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getChildren", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getCommitUserData(t_TaxonomyReader *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getCommitUserData());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_TaxonomyReader_getOrdinal(t_TaxonomyReader *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::facet::taxonomy::FacetLabel a0((jobject) NULL);
                jint result;

                if (!parseArgs(args, "k", ::org::apache::lucene::facet::taxonomy::FacetLabel::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.getOrdinal(a0));
                  return PyInt_FromLong((long) result);
                }
              }
              break;
             case 2:
              {
                ::java::lang::String a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                jint result;

                if (!parseArgs(args, "s[s", &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getOrdinal(a0, a1));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getOrdinal", args);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getParallelTaxonomyArrays(t_TaxonomyReader *self)
          {
            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays result((jobject) NULL);
            OBJ_CALL(result = self->object.getParallelTaxonomyArrays());
            return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(result);
          }

          static PyObject *t_TaxonomyReader_getPath(t_TaxonomyReader *self, PyObject *arg)
          {
            jint a0;
            ::org::apache::lucene::facet::taxonomy::FacetLabel result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.getPath(a0));
              return ::org::apache::lucene::facet::taxonomy::t_FacetLabel::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPath", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_getRefCount(t_TaxonomyReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getRefCount());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TaxonomyReader_getSize(t_TaxonomyReader *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSize());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_TaxonomyReader_incRef(t_TaxonomyReader *self)
          {
            OBJ_CALL(self->object.incRef());
            Py_RETURN_NONE;
          }

          static PyObject *t_TaxonomyReader_openIfChanged(PyTypeObject *type, PyObject *arg)
          {
            TaxonomyReader a0((jobject) NULL);
            TaxonomyReader result((jobject) NULL);

            if (!parseArg(arg, "k", TaxonomyReader::initializeClass, &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::TaxonomyReader::openIfChanged(a0));
              return t_TaxonomyReader::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "openIfChanged", arg);
            return NULL;
          }

          static PyObject *t_TaxonomyReader_tryIncRef(t_TaxonomyReader *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.tryIncRef());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_TaxonomyReader_get__commitUserData(t_TaxonomyReader *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getCommitUserData());
            return ::java::util::t_Map::wrap_Object(value);
          }

          static PyObject *t_TaxonomyReader_get__parallelTaxonomyArrays(t_TaxonomyReader *self, void *data)
          {
            ::org::apache::lucene::facet::taxonomy::ParallelTaxonomyArrays value((jobject) NULL);
            OBJ_CALL(value = self->object.getParallelTaxonomyArrays());
            return ::org::apache::lucene::facet::taxonomy::t_ParallelTaxonomyArrays::wrap_Object(value);
          }

          static PyObject *t_TaxonomyReader_get__refCount(t_TaxonomyReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getRefCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_TaxonomyReader_get__size(t_TaxonomyReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSize());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *ResourceLoader::class$ = NULL;
          jmethodID *ResourceLoader::mids$ = NULL;
          bool ResourceLoader::live$ = false;

          jclass ResourceLoader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/ResourceLoader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_findClass_4aee1c89] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;");
              mids$[mid_newInstance_61899367] = env->getMethodID(cls, "newInstance", "(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;");
              mids$[mid_openResource_222e59eb] = env->getMethodID(cls, "openResource", "(Ljava/lang/String;)Ljava/io/InputStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Class ResourceLoader::findClass(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_findClass_4aee1c89], a0.this$, a1.this$));
          }

          ::java::lang::Object ResourceLoader::newInstance(const ::java::lang::String & a0, const ::java::lang::Class & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_61899367], a0.this$, a1.this$));
          }

          ::java::io::InputStream ResourceLoader::openResource(const ::java::lang::String & a0) const
          {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_openResource_222e59eb], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_ResourceLoader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ResourceLoader_findClass(t_ResourceLoader *self, PyObject *args);
          static PyObject *t_ResourceLoader_newInstance(t_ResourceLoader *self, PyObject *args);
          static PyObject *t_ResourceLoader_openResource(t_ResourceLoader *self, PyObject *arg);

          static PyMethodDef t_ResourceLoader__methods_[] = {
            DECLARE_METHOD(t_ResourceLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ResourceLoader, findClass, METH_VARARGS),
            DECLARE_METHOD(t_ResourceLoader, newInstance, METH_VARARGS),
            DECLARE_METHOD(t_ResourceLoader, openResource, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ResourceLoader, t_ResourceLoader, ::java::lang::Object, ResourceLoader, abstract_init, 0, 0, 0, 0, 0);

          void t_ResourceLoader::install(PyObject *module)
          {
            installType(&PY_TYPE(ResourceLoader), module, "ResourceLoader", 0);
          }

          void t_ResourceLoader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ResourceLoader).tp_dict, "class_", make_descriptor(ResourceLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ResourceLoader).tp_dict, "wrapfn_", make_descriptor(t_ResourceLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ResourceLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ResourceLoader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ResourceLoader::initializeClass, 1)))
              return NULL;
            return t_ResourceLoader::wrap_Object(ResourceLoader(((t_ResourceLoader *) arg)->object.this$));
          }
          static PyObject *t_ResourceLoader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ResourceLoader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_ResourceLoader_findClass(t_ResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Class result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.findClass(a0, a1));
              return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "findClass", args);
            return NULL;
          }

          static PyObject *t_ResourceLoader_newInstance(t_ResourceLoader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class a1((jobject) NULL);
            PyTypeObject **p1;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "sK", ::java::lang::Class::initializeClass, &a0, &a1, &p1, ::java::lang::t_Class::parameters_))
            {
              OBJ_CALL(result = self->object.newInstance(a0, a1));
              return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "newInstance", args);
            return NULL;
          }

          static PyObject *t_ResourceLoader_openResource(t_ResourceLoader *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.openResource(a0));
              return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "openResource", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/IBSimilarity.h"
#include "org/apache/lucene/search/similarities/Normalization.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/Distribution.h"
#include "org/apache/lucene/search/similarities/Lambda.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *IBSimilarity::class$ = NULL;
          jmethodID *IBSimilarity::mids$ = NULL;
          bool IBSimilarity::live$ = false;

          jclass IBSimilarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/IBSimilarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c1a9dba4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/similarities/Distribution;Lorg/apache/lucene/search/similarities/Lambda;Lorg/apache/lucene/search/similarities/Normalization;)V");
              mids$[mid_getDistribution_997d9b00] = env->getMethodID(cls, "getDistribution", "()Lorg/apache/lucene/search/similarities/Distribution;");
              mids$[mid_getLambda_c82cedff] = env->getMethodID(cls, "getLambda", "()Lorg/apache/lucene/search/similarities/Lambda;");
              mids$[mid_getNormalization_d2e76e28] = env->getMethodID(cls, "getNormalization", "()Lorg/apache/lucene/search/similarities/Normalization;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_score_63482206] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_explain_347d95f8] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/Explanation;Lorg/apache/lucene/search/similarities/BasicStats;IFF)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IBSimilarity::IBSimilarity(const ::org::apache::lucene::search::similarities::Distribution & a0, const ::org::apache::lucene::search::similarities::Lambda & a1, const ::org::apache::lucene::search::similarities::Normalization & a2) : ::org::apache::lucene::search::similarities::SimilarityBase(env->newObject(initializeClass, &mids$, mid_init$_c1a9dba4, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::search::similarities::Distribution IBSimilarity::getDistribution() const
          {
            return ::org::apache::lucene::search::similarities::Distribution(env->callObjectMethod(this$, mids$[mid_getDistribution_997d9b00]));
          }

          ::org::apache::lucene::search::similarities::Lambda IBSimilarity::getLambda() const
          {
            return ::org::apache::lucene::search::similarities::Lambda(env->callObjectMethod(this$, mids$[mid_getLambda_c82cedff]));
          }

          ::org::apache::lucene::search::similarities::Normalization IBSimilarity::getNormalization() const
          {
            return ::org::apache::lucene::search::similarities::Normalization(env->callObjectMethod(this$, mids$[mid_getNormalization_d2e76e28]));
          }

          ::java::lang::String IBSimilarity::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_IBSimilarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IBSimilarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_IBSimilarity_init_(t_IBSimilarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IBSimilarity_getDistribution(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_getLambda(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_getNormalization(t_IBSimilarity *self);
          static PyObject *t_IBSimilarity_toString(t_IBSimilarity *self, PyObject *args);
          static PyObject *t_IBSimilarity_get__distribution(t_IBSimilarity *self, void *data);
          static PyObject *t_IBSimilarity_get__lambda(t_IBSimilarity *self, void *data);
          static PyObject *t_IBSimilarity_get__normalization(t_IBSimilarity *self, void *data);
          static PyGetSetDef t_IBSimilarity__fields_[] = {
            DECLARE_GET_FIELD(t_IBSimilarity, distribution),
            DECLARE_GET_FIELD(t_IBSimilarity, lambda),
            DECLARE_GET_FIELD(t_IBSimilarity, normalization),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IBSimilarity__methods_[] = {
            DECLARE_METHOD(t_IBSimilarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IBSimilarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IBSimilarity, getDistribution, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, getLambda, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, getNormalization, METH_NOARGS),
            DECLARE_METHOD(t_IBSimilarity, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IBSimilarity, t_IBSimilarity, ::org::apache::lucene::search::similarities::SimilarityBase, IBSimilarity, t_IBSimilarity_init_, 0, 0, t_IBSimilarity__fields_, 0, 0);

          void t_IBSimilarity::install(PyObject *module)
          {
            installType(&PY_TYPE(IBSimilarity), module, "IBSimilarity", 0);
          }

          void t_IBSimilarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IBSimilarity).tp_dict, "class_", make_descriptor(IBSimilarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IBSimilarity).tp_dict, "wrapfn_", make_descriptor(t_IBSimilarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IBSimilarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IBSimilarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IBSimilarity::initializeClass, 1)))
              return NULL;
            return t_IBSimilarity::wrap_Object(IBSimilarity(((t_IBSimilarity *) arg)->object.this$));
          }
          static PyObject *t_IBSimilarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IBSimilarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_IBSimilarity_init_(t_IBSimilarity *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::similarities::Distribution a0((jobject) NULL);
            ::org::apache::lucene::search::similarities::Lambda a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Normalization a2((jobject) NULL);
            IBSimilarity object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::search::similarities::Distribution::initializeClass, ::org::apache::lucene::search::similarities::Lambda::initializeClass, ::org::apache::lucene::search::similarities::Normalization::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = IBSimilarity(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IBSimilarity_getDistribution(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Distribution result((jobject) NULL);
            OBJ_CALL(result = self->object.getDistribution());
            return ::org::apache::lucene::search::similarities::t_Distribution::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_getLambda(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Lambda result((jobject) NULL);
            OBJ_CALL(result = self->object.getLambda());
            return ::org::apache::lucene::search::similarities::t_Lambda::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_getNormalization(t_IBSimilarity *self)
          {
            ::org::apache::lucene::search::similarities::Normalization result((jobject) NULL);
            OBJ_CALL(result = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(result);
          }

          static PyObject *t_IBSimilarity_toString(t_IBSimilarity *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(IBSimilarity), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_IBSimilarity_get__distribution(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Distribution value((jobject) NULL);
            OBJ_CALL(value = self->object.getDistribution());
            return ::org::apache::lucene::search::similarities::t_Distribution::wrap_Object(value);
          }

          static PyObject *t_IBSimilarity_get__lambda(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Lambda value((jobject) NULL);
            OBJ_CALL(value = self->object.getLambda());
            return ::org::apache::lucene::search::similarities::t_Lambda::wrap_Object(value);
          }

          static PyObject *t_IBSimilarity_get__normalization(t_IBSimilarity *self, void *data)
          {
            ::org::apache::lucene::search::similarities::Normalization value((jobject) NULL);
            OBJ_CALL(value = self->object.getNormalization());
            return ::org::apache::lucene::search::similarities::t_Normalization::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldCache$Shorts.h"
#include "org/apache/lucene/search/FieldCache$Doubles.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "org/apache/lucene/search/FieldCache$FloatParser.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "org/apache/lucene/search/FieldCache$ShortParser.h"
#include "java/io/PrintStream.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/search/FieldCache$ByteParser.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldCache$Bytes.h"
#include "org/apache/lucene/search/FieldCache$Ints.h"
#include "org/apache/lucene/search/FieldCache$Floats.h"
#include "org/apache/lucene/search/FieldCache$IntParser.h"
#include "org/apache/lucene/search/FieldCache$Longs.h"
#include "org/apache/lucene/search/FieldCache$DoubleParser.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache::class$ = NULL;
        jmethodID *FieldCache::mids$ = NULL;
        bool FieldCache::live$ = false;
        FieldCache *FieldCache::DEFAULT = NULL;
        ::org::apache::lucene::search::FieldCache$ByteParser *FieldCache::DEFAULT_BYTE_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$DoubleParser *FieldCache::DEFAULT_DOUBLE_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$FloatParser *FieldCache::DEFAULT_FLOAT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$IntParser *FieldCache::DEFAULT_INT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$LongParser *FieldCache::DEFAULT_LONG_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$ShortParser *FieldCache::DEFAULT_SHORT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$DoubleParser *FieldCache::NUMERIC_UTILS_DOUBLE_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$FloatParser *FieldCache::NUMERIC_UTILS_FLOAT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$IntParser *FieldCache::NUMERIC_UTILS_INT_PARSER = NULL;
        ::org::apache::lucene::search::FieldCache$LongParser *FieldCache::NUMERIC_UTILS_LONG_PARSER = NULL;

        jclass FieldCache::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getBytes_5b2430b0] = env->getMethodID(cls, "getBytes", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Bytes;");
            mids$[mid_getBytes_63e2679a] = env->getMethodID(cls, "getBytes", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ByteParser;Z)Lorg/apache/lucene/search/FieldCache$Bytes;");
            mids$[mid_getCacheEntries_2bd7104e] = env->getMethodID(cls, "getCacheEntries", "()[Lorg/apache/lucene/search/FieldCache$CacheEntry;");
            mids$[mid_getDocTermOrds_1498712e] = env->getMethodID(cls, "getDocTermOrds", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getDocsWithField_b8ffc438] = env->getMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getDoubles_1da3b06b] = env->getMethodID(cls, "getDoubles", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Doubles;");
            mids$[mid_getDoubles_081c1232] = env->getMethodID(cls, "getDoubles", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$DoubleParser;Z)Lorg/apache/lucene/search/FieldCache$Doubles;");
            mids$[mid_getFloats_d56c7f61] = env->getMethodID(cls, "getFloats", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Floats;");
            mids$[mid_getFloats_16f5ff86] = env->getMethodID(cls, "getFloats", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$FloatParser;Z)Lorg/apache/lucene/search/FieldCache$Floats;");
            mids$[mid_getInfoStream_00215d9e] = env->getMethodID(cls, "getInfoStream", "()Ljava/io/PrintStream;");
            mids$[mid_getInts_09885a02] = env->getMethodID(cls, "getInts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Ints;");
            mids$[mid_getInts_428a6914] = env->getMethodID(cls, "getInts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$IntParser;Z)Lorg/apache/lucene/search/FieldCache$Ints;");
            mids$[mid_getLongs_4d412004] = env->getMethodID(cls, "getLongs", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Longs;");
            mids$[mid_getLongs_ef1b546a] = env->getMethodID(cls, "getLongs", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$LongParser;Z)Lorg/apache/lucene/search/FieldCache$Longs;");
            mids$[mid_getShorts_2d8fda45] = env->getMethodID(cls, "getShorts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/search/FieldCache$Shorts;");
            mids$[mid_getShorts_cf5b3ec2] = env->getMethodID(cls, "getShorts", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Lorg/apache/lucene/search/FieldCache$ShortParser;Z)Lorg/apache/lucene/search/FieldCache$Shorts;");
            mids$[mid_getTerms_d17729c6] = env->getMethodID(cls, "getTerms", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;Z)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getTerms_4f27b8ab] = env->getMethodID(cls, "getTerms", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;ZF)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getTermsIndex_e27a1341] = env->getMethodID(cls, "getTermsIndex", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getTermsIndex_774ad832] = env->getMethodID(cls, "getTermsIndex", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;F)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_purgeAllCaches_54c6a166] = env->getMethodID(cls, "purgeAllCaches", "()V");
            mids$[mid_purgeByCacheKey_290588ee] = env->getMethodID(cls, "purgeByCacheKey", "(Ljava/lang/Object;)V");
            mids$[mid_setInfoStream_1b7c898b] = env->getMethodID(cls, "setInfoStream", "(Ljava/io/PrintStream;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            DEFAULT = new FieldCache(env->getStaticObjectField(cls, "DEFAULT", "Lorg/apache/lucene/search/FieldCache;"));
            DEFAULT_BYTE_PARSER = new ::org::apache::lucene::search::FieldCache$ByteParser(env->getStaticObjectField(cls, "DEFAULT_BYTE_PARSER", "Lorg/apache/lucene/search/FieldCache$ByteParser;"));
            DEFAULT_DOUBLE_PARSER = new ::org::apache::lucene::search::FieldCache$DoubleParser(env->getStaticObjectField(cls, "DEFAULT_DOUBLE_PARSER", "Lorg/apache/lucene/search/FieldCache$DoubleParser;"));
            DEFAULT_FLOAT_PARSER = new ::org::apache::lucene::search::FieldCache$FloatParser(env->getStaticObjectField(cls, "DEFAULT_FLOAT_PARSER", "Lorg/apache/lucene/search/FieldCache$FloatParser;"));
            DEFAULT_INT_PARSER = new ::org::apache::lucene::search::FieldCache$IntParser(env->getStaticObjectField(cls, "DEFAULT_INT_PARSER", "Lorg/apache/lucene/search/FieldCache$IntParser;"));
            DEFAULT_LONG_PARSER = new ::org::apache::lucene::search::FieldCache$LongParser(env->getStaticObjectField(cls, "DEFAULT_LONG_PARSER", "Lorg/apache/lucene/search/FieldCache$LongParser;"));
            DEFAULT_SHORT_PARSER = new ::org::apache::lucene::search::FieldCache$ShortParser(env->getStaticObjectField(cls, "DEFAULT_SHORT_PARSER", "Lorg/apache/lucene/search/FieldCache$ShortParser;"));
            NUMERIC_UTILS_DOUBLE_PARSER = new ::org::apache::lucene::search::FieldCache$DoubleParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_DOUBLE_PARSER", "Lorg/apache/lucene/search/FieldCache$DoubleParser;"));
            NUMERIC_UTILS_FLOAT_PARSER = new ::org::apache::lucene::search::FieldCache$FloatParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_FLOAT_PARSER", "Lorg/apache/lucene/search/FieldCache$FloatParser;"));
            NUMERIC_UTILS_INT_PARSER = new ::org::apache::lucene::search::FieldCache$IntParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_INT_PARSER", "Lorg/apache/lucene/search/FieldCache$IntParser;"));
            NUMERIC_UTILS_LONG_PARSER = new ::org::apache::lucene::search::FieldCache$LongParser(env->getStaticObjectField(cls, "NUMERIC_UTILS_LONG_PARSER", "Lorg/apache/lucene/search/FieldCache$LongParser;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::search::FieldCache$Bytes FieldCache::getBytes(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Bytes(env->callObjectMethod(this$, mids$[mid_getBytes_5b2430b0], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Bytes FieldCache::getBytes(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$ByteParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Bytes(env->callObjectMethod(this$, mids$[mid_getBytes_63e2679a], a0.this$, a1.this$, a2.this$, a3));
        }

        JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > FieldCache::getCacheEntries() const
        {
          return JArray< ::org::apache::lucene::search::FieldCache$CacheEntry >(env->callObjectMethod(this$, mids$[mid_getCacheEntries_2bd7104e]));
        }

        ::org::apache::lucene::index::SortedSetDocValues FieldCache::getDocTermOrds(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::index::SortedSetDocValues(env->callObjectMethod(this$, mids$[mid_getDocTermOrds_1498712e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::Bits FieldCache::getDocsWithField(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_getDocsWithField_b8ffc438], a0.this$, a1.this$));
        }

        ::org::apache::lucene::search::FieldCache$Doubles FieldCache::getDoubles(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Doubles(env->callObjectMethod(this$, mids$[mid_getDoubles_1da3b06b], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Doubles FieldCache::getDoubles(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$DoubleParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Doubles(env->callObjectMethod(this$, mids$[mid_getDoubles_081c1232], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::FieldCache$Floats FieldCache::getFloats(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Floats(env->callObjectMethod(this$, mids$[mid_getFloats_d56c7f61], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Floats FieldCache::getFloats(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$FloatParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Floats(env->callObjectMethod(this$, mids$[mid_getFloats_16f5ff86], a0.this$, a1.this$, a2.this$, a3));
        }

        ::java::io::PrintStream FieldCache::getInfoStream() const
        {
          return ::java::io::PrintStream(env->callObjectMethod(this$, mids$[mid_getInfoStream_00215d9e]));
        }

        ::org::apache::lucene::search::FieldCache$Ints FieldCache::getInts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Ints(env->callObjectMethod(this$, mids$[mid_getInts_09885a02], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Ints FieldCache::getInts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$IntParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Ints(env->callObjectMethod(this$, mids$[mid_getInts_428a6914], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::FieldCache$Longs FieldCache::getLongs(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Longs(env->callObjectMethod(this$, mids$[mid_getLongs_4d412004], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Longs FieldCache::getLongs(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$LongParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Longs(env->callObjectMethod(this$, mids$[mid_getLongs_ef1b546a], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::search::FieldCache$Shorts FieldCache::getShorts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::search::FieldCache$Shorts(env->callObjectMethod(this$, mids$[mid_getShorts_2d8fda45], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::search::FieldCache$Shorts FieldCache::getShorts(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$ShortParser & a2, jboolean a3) const
        {
          return ::org::apache::lucene::search::FieldCache$Shorts(env->callObjectMethod(this$, mids$[mid_getShorts_cf5b3ec2], a0.this$, a1.this$, a2.this$, a3));
        }

        ::org::apache::lucene::index::BinaryDocValues FieldCache::getTerms(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getTerms_d17729c6], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::BinaryDocValues FieldCache::getTerms(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jboolean a2, jfloat a3) const
        {
          return ::org::apache::lucene::index::BinaryDocValues(env->callObjectMethod(this$, mids$[mid_getTerms_4f27b8ab], a0.this$, a1.this$, a2, a3));
        }

        ::org::apache::lucene::index::SortedDocValues FieldCache::getTermsIndex(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getTermsIndex_e27a1341], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues FieldCache::getTermsIndex(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1, jfloat a2) const
        {
          return ::org::apache::lucene::index::SortedDocValues(env->callObjectMethod(this$, mids$[mid_getTermsIndex_774ad832], a0.this$, a1.this$, a2));
        }

        void FieldCache::purgeAllCaches() const
        {
          env->callVoidMethod(this$, mids$[mid_purgeAllCaches_54c6a166]);
        }

        void FieldCache::purgeByCacheKey(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_purgeByCacheKey_290588ee], a0.this$);
        }

        void FieldCache::setInfoStream(const ::java::io::PrintStream & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setInfoStream_1b7c898b], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "org/apache/lucene/search/FieldCache$CreationPlaceholder.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache_getBytes(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getCacheEntries(t_FieldCache *self);
        static PyObject *t_FieldCache_getDocTermOrds(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getDocsWithField(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getDoubles(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getFloats(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getInfoStream(t_FieldCache *self);
        static PyObject *t_FieldCache_getInts(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getLongs(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getShorts(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getTerms(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_getTermsIndex(t_FieldCache *self, PyObject *args);
        static PyObject *t_FieldCache_purgeAllCaches(t_FieldCache *self);
        static PyObject *t_FieldCache_purgeByCacheKey(t_FieldCache *self, PyObject *arg);
        static PyObject *t_FieldCache_setInfoStream(t_FieldCache *self, PyObject *arg);
        static PyObject *t_FieldCache_get__cacheEntries(t_FieldCache *self, void *data);
        static PyObject *t_FieldCache_get__infoStream(t_FieldCache *self, void *data);
        static int t_FieldCache_set__infoStream(t_FieldCache *self, PyObject *arg, void *data);
        static PyGetSetDef t_FieldCache__fields_[] = {
          DECLARE_GET_FIELD(t_FieldCache, cacheEntries),
          DECLARE_GETSET_FIELD(t_FieldCache, infoStream),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldCache__methods_[] = {
          DECLARE_METHOD(t_FieldCache, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache, getBytes, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getCacheEntries, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache, getDocTermOrds, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getDocsWithField, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getDoubles, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getFloats, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getInfoStream, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache, getInts, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getLongs, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getShorts, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getTerms, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, getTermsIndex, METH_VARARGS),
          DECLARE_METHOD(t_FieldCache, purgeAllCaches, METH_NOARGS),
          DECLARE_METHOD(t_FieldCache, purgeByCacheKey, METH_O),
          DECLARE_METHOD(t_FieldCache, setInfoStream, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache, t_FieldCache, ::java::lang::Object, FieldCache, abstract_init, 0, 0, t_FieldCache__fields_, 0, 0);

        void t_FieldCache::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache), module, "FieldCache", 0);
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "CacheEntry", make_descriptor(&PY_TYPE(FieldCache$CacheEntry)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DoubleParser", make_descriptor(&PY_TYPE(FieldCache$DoubleParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "LongParser", make_descriptor(&PY_TYPE(FieldCache$LongParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "FloatParser", make_descriptor(&PY_TYPE(FieldCache$FloatParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "IntParser", make_descriptor(&PY_TYPE(FieldCache$IntParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "ShortParser", make_descriptor(&PY_TYPE(FieldCache$ShortParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "ByteParser", make_descriptor(&PY_TYPE(FieldCache$ByteParser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Parser", make_descriptor(&PY_TYPE(FieldCache$Parser)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "CreationPlaceholder", make_descriptor(&PY_TYPE(FieldCache$CreationPlaceholder)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Doubles", make_descriptor(&PY_TYPE(FieldCache$Doubles)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Floats", make_descriptor(&PY_TYPE(FieldCache$Floats)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Longs", make_descriptor(&PY_TYPE(FieldCache$Longs)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Ints", make_descriptor(&PY_TYPE(FieldCache$Ints)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Shorts", make_descriptor(&PY_TYPE(FieldCache$Shorts)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "Bytes", make_descriptor(&PY_TYPE(FieldCache$Bytes)));
        }

        void t_FieldCache::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "class_", make_descriptor(FieldCache::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "wrapfn_", make_descriptor(t_FieldCache::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT", make_descriptor(t_FieldCache::wrap_Object(*FieldCache::DEFAULT)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_BYTE_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$ByteParser::wrap_Object(*FieldCache::DEFAULT_BYTE_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_DOUBLE_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$DoubleParser::wrap_Object(*FieldCache::DEFAULT_DOUBLE_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_FLOAT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$FloatParser::wrap_Object(*FieldCache::DEFAULT_FLOAT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_INT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$IntParser::wrap_Object(*FieldCache::DEFAULT_INT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_LONG_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$LongParser::wrap_Object(*FieldCache::DEFAULT_LONG_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "DEFAULT_SHORT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$ShortParser::wrap_Object(*FieldCache::DEFAULT_SHORT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_DOUBLE_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$DoubleParser::wrap_Object(*FieldCache::NUMERIC_UTILS_DOUBLE_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_FLOAT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$FloatParser::wrap_Object(*FieldCache::NUMERIC_UTILS_FLOAT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_INT_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$IntParser::wrap_Object(*FieldCache::NUMERIC_UTILS_INT_PARSER)));
          PyDict_SetItemString(PY_TYPE(FieldCache).tp_dict, "NUMERIC_UTILS_LONG_PARSER", make_descriptor(::org::apache::lucene::search::t_FieldCache$LongParser::wrap_Object(*FieldCache::NUMERIC_UTILS_LONG_PARSER)));
        }

        static PyObject *t_FieldCache_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache::initializeClass, 1)))
            return NULL;
          return t_FieldCache::wrap_Object(FieldCache(((t_FieldCache *) arg)->object.this$));
        }
        static PyObject *t_FieldCache_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache_getBytes(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Bytes result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getBytes(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Bytes::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ByteParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Bytes result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$ByteParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getBytes(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Bytes::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getBytes", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getCacheEntries(t_FieldCache *self)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > result((jobject) NULL);
          OBJ_CALL(result = self->object.getCacheEntries());
          return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCache_getDocTermOrds(t_FieldCache *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocTermOrds(a0, a1));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocTermOrds", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getDocsWithField(t_FieldCache *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocsWithField(a0, a1));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocsWithField", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getDoubles(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Doubles result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getDoubles(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Doubles::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$DoubleParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Doubles result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$DoubleParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getDoubles(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Doubles::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getDoubles", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getFloats(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Floats result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getFloats(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Floats::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$FloatParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Floats result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$FloatParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getFloats(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Floats::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getFloats", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getInfoStream(t_FieldCache *self)
        {
          ::java::io::PrintStream result((jobject) NULL);
          OBJ_CALL(result = self->object.getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(result);
        }

        static PyObject *t_FieldCache_getInts(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Ints result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getInts(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Ints::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$IntParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Ints result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$IntParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getInts(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Ints::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getInts", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getLongs(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Longs result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getLongs(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Longs::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$LongParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Longs result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$LongParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getLongs(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Longs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getLongs", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getShorts(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::search::FieldCache$Shorts result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getShorts(a0, a1, a2));
                return ::org::apache::lucene::search::t_FieldCache$Shorts::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::search::FieldCache$ShortParser a2((jobject) NULL);
              jboolean a3;
              ::org::apache::lucene::search::FieldCache$Shorts result((jobject) NULL);

              if (!parseArgs(args, "kskZ", ::org::apache::lucene::index::AtomicReader::initializeClass, ::org::apache::lucene::search::FieldCache$ShortParser::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getShorts(a0, a1, a2, a3));
                return ::org::apache::lucene::search::t_FieldCache$Shorts::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getShorts", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getTerms(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

              if (!parseArgs(args, "ksZ", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getTerms(a0, a1, a2));
                return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
              }
            }
            break;
           case 4:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              jfloat a3;
              ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

              if (!parseArgs(args, "ksZF", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.getTerms(a0, a1, a2, a3));
                return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getTerms", args);
          return NULL;
        }

        static PyObject *t_FieldCache_getTermsIndex(t_FieldCache *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

              if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.getTermsIndex(a0, a1));
                return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              jfloat a2;
              ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

              if (!parseArgs(args, "ksF", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.getTermsIndex(a0, a1, a2));
                return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getTermsIndex", args);
          return NULL;
        }

        static PyObject *t_FieldCache_purgeAllCaches(t_FieldCache *self)
        {
          OBJ_CALL(self->object.purgeAllCaches());
          Py_RETURN_NONE;
        }

        static PyObject *t_FieldCache_purgeByCacheKey(t_FieldCache *self, PyObject *arg)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArg(arg, "o", &a0))
          {
            OBJ_CALL(self->object.purgeByCacheKey(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "purgeByCacheKey", arg);
          return NULL;
        }

        static PyObject *t_FieldCache_setInfoStream(t_FieldCache *self, PyObject *arg)
        {
          ::java::io::PrintStream a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setInfoStream(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setInfoStream", arg);
          return NULL;
        }

        static PyObject *t_FieldCache_get__cacheEntries(t_FieldCache *self, void *data)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > value((jobject) NULL);
          OBJ_CALL(value = self->object.getCacheEntries());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::t_FieldCache$CacheEntry::wrap_jobject);
        }

        static PyObject *t_FieldCache_get__infoStream(t_FieldCache *self, void *data)
        {
          ::java::io::PrintStream value((jobject) NULL);
          OBJ_CALL(value = self->object.getInfoStream());
          return ::java::io::t_PrintStream::wrap_Object(value);
        }
        static int t_FieldCache_set__infoStream(t_FieldCache *self, PyObject *arg, void *data)
        {
          {
            ::java::io::PrintStream value((jobject) NULL);
            if (!parseArg(arg, "k", ::java::io::PrintStream::initializeClass, &value))
            {
              INT_CALL(self->object.setInfoStream(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "infoStream", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/PackedInts$NullReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *PackedInts$NullReader::class$ = NULL;
          jmethodID *PackedInts$NullReader::mids$ = NULL;
          bool PackedInts$NullReader::live$ = false;

          jclass PackedInts$NullReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/PackedInts$NullReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_get_39c7bd20] = env->getMethodID(cls, "get", "(I)J");
              mids$[mid_get_d80d4c9e] = env->getMethodID(cls, "get", "(I[JII)I");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedInts$NullReader::PackedInts$NullReader(jint a0) : ::org::apache::lucene::util::packed::PackedInts$Reader(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          jlong PackedInts$NullReader::get(jint a0) const
          {
            return env->callLongMethod(this$, mids$[mid_get_39c7bd20], a0);
          }

          jint PackedInts$NullReader::get(jint a0, const JArray< jlong > & a1, jint a2, jint a3) const
          {
            return env->callIntMethod(this$, mids$[mid_get_d80d4c9e], a0, a1.this$, a2, a3);
          }

          jlong PackedInts$NullReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jint PackedInts$NullReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_PackedInts$NullReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedInts$NullReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedInts$NullReader_init_(t_PackedInts$NullReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedInts$NullReader_get(t_PackedInts$NullReader *self, PyObject *args);
          static PyObject *t_PackedInts$NullReader_ramBytesUsed(t_PackedInts$NullReader *self, PyObject *args);
          static PyObject *t_PackedInts$NullReader_size(t_PackedInts$NullReader *self, PyObject *args);

          static PyMethodDef t_PackedInts$NullReader__methods_[] = {
            DECLARE_METHOD(t_PackedInts$NullReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$NullReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedInts$NullReader, get, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$NullReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_PackedInts$NullReader, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedInts$NullReader, t_PackedInts$NullReader, ::org::apache::lucene::util::packed::PackedInts$Reader, PackedInts$NullReader, t_PackedInts$NullReader_init_, 0, 0, 0, 0, 0);

          void t_PackedInts$NullReader::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedInts$NullReader), module, "PackedInts$NullReader", 0);
          }

          void t_PackedInts$NullReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedInts$NullReader).tp_dict, "class_", make_descriptor(PackedInts$NullReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedInts$NullReader).tp_dict, "wrapfn_", make_descriptor(t_PackedInts$NullReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedInts$NullReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedInts$NullReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedInts$NullReader::initializeClass, 1)))
              return NULL;
            return t_PackedInts$NullReader::wrap_Object(PackedInts$NullReader(((t_PackedInts$NullReader *) arg)->object.this$));
          }
          static PyObject *t_PackedInts$NullReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedInts$NullReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedInts$NullReader_init_(t_PackedInts$NullReader *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            PackedInts$NullReader object((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
              INT_CALL(object = PackedInts$NullReader(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PackedInts$NullReader_get(t_PackedInts$NullReader *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                jint a0;
                jlong result;

                if (!parseArgs(args, "I", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return PyLong_FromLongLong((PY_LONG_LONG) result);
                }
              }
              break;
             case 4:
              {
                jint a0;
                JArray< jlong > a1((jobject) NULL);
                jint a2;
                jint a3;
                jint result;

                if (!parseArgs(args, "I[JII", &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return PyInt_FromLong((long) result);
                }
              }
            }

            return callSuper(&PY_TYPE(PackedInts$NullReader), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_PackedInts$NullReader_ramBytesUsed(t_PackedInts$NullReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(PackedInts$NullReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_PackedInts$NullReader_size(t_PackedInts$NullReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PackedInts$NullReader), (PyObject *) self, "size", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexWriterConfig$OpenMode::class$ = NULL;
        jmethodID *IndexWriterConfig$OpenMode::mids$ = NULL;
        bool IndexWriterConfig$OpenMode::live$ = false;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::APPEND = NULL;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::CREATE = NULL;
        IndexWriterConfig$OpenMode *IndexWriterConfig$OpenMode::CREATE_OR_APPEND = NULL;

        jclass IndexWriterConfig$OpenMode::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexWriterConfig$OpenMode");

            mids$ = new jmethodID[max_mid];
            mids$[mid_valueOf_0b044982] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");
            mids$[mid_values_923174e8] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            APPEND = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "APPEND", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            CREATE = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "CREATE", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            CREATE_OR_APPEND = new IndexWriterConfig$OpenMode(env->getStaticObjectField(cls, "CREATE_OR_APPEND", "Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IndexWriterConfig$OpenMode IndexWriterConfig$OpenMode::valueOf(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return IndexWriterConfig$OpenMode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0b044982], a0.this$));
        }

        JArray< IndexWriterConfig$OpenMode > IndexWriterConfig$OpenMode::values()
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< IndexWriterConfig$OpenMode >(env->callStaticObjectMethod(cls, mids$[mid_values_923174e8]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexWriterConfig$OpenMode_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig$OpenMode_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexWriterConfig$OpenMode_of_(t_IndexWriterConfig$OpenMode *self, PyObject *args);
        static PyObject *t_IndexWriterConfig$OpenMode_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexWriterConfig$OpenMode_values(PyTypeObject *type);
        static PyObject *t_IndexWriterConfig$OpenMode_get__parameters_(t_IndexWriterConfig$OpenMode *self, void *data);
        static PyGetSetDef t_IndexWriterConfig$OpenMode__fields_[] = {
          DECLARE_GET_FIELD(t_IndexWriterConfig$OpenMode, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexWriterConfig$OpenMode__methods_[] = {
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, of_, METH_VARARGS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, valueOf, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexWriterConfig$OpenMode, values, METH_NOARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexWriterConfig$OpenMode, t_IndexWriterConfig$OpenMode, ::java::lang::Enum, IndexWriterConfig$OpenMode, abstract_init, 0, 0, t_IndexWriterConfig$OpenMode__fields_, 0, 0);
        PyObject *t_IndexWriterConfig$OpenMode::wrap_Object(const IndexWriterConfig$OpenMode& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IndexWriterConfig$OpenMode::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IndexWriterConfig$OpenMode *self = (t_IndexWriterConfig$OpenMode *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_IndexWriterConfig$OpenMode::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_IndexWriterConfig$OpenMode::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_IndexWriterConfig$OpenMode *self = (t_IndexWriterConfig$OpenMode *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_IndexWriterConfig$OpenMode::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexWriterConfig$OpenMode), module, "IndexWriterConfig$OpenMode", 0);
        }

        void t_IndexWriterConfig$OpenMode::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "class_", make_descriptor(IndexWriterConfig$OpenMode::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "wrapfn_", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(IndexWriterConfig$OpenMode::initializeClass);
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "APPEND", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::APPEND)));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "CREATE", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::CREATE)));
          PyDict_SetItemString(PY_TYPE(IndexWriterConfig$OpenMode).tp_dict, "CREATE_OR_APPEND", make_descriptor(t_IndexWriterConfig$OpenMode::wrap_Object(*IndexWriterConfig$OpenMode::CREATE_OR_APPEND)));
        }

        static PyObject *t_IndexWriterConfig$OpenMode_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexWriterConfig$OpenMode::initializeClass, 1)))
            return NULL;
          return t_IndexWriterConfig$OpenMode::wrap_Object(IndexWriterConfig$OpenMode(((t_IndexWriterConfig$OpenMode *) arg)->object.this$));
        }
        static PyObject *t_IndexWriterConfig$OpenMode_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexWriterConfig$OpenMode::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexWriterConfig$OpenMode_of_(t_IndexWriterConfig$OpenMode *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_IndexWriterConfig$OpenMode_valueOf(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          IndexWriterConfig$OpenMode result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::IndexWriterConfig$OpenMode::valueOf(a0));
            return t_IndexWriterConfig$OpenMode::wrap_Object(result);
          }

          return callSuper(type, "valueOf", args, 2);
        }

        static PyObject *t_IndexWriterConfig$OpenMode_values(PyTypeObject *type)
        {
          JArray< IndexWriterConfig$OpenMode > result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::IndexWriterConfig$OpenMode::values());
          return JArray<jobject>(result.this$).wrap(t_IndexWriterConfig$OpenMode::wrap_jobject);
        }
        static PyObject *t_IndexWriterConfig$OpenMode_get__parameters_(t_IndexWriterConfig$OpenMode *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/DOMUtils.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *DOMUtils::class$ = NULL;
          jmethodID *DOMUtils::mids$ = NULL;
          bool DOMUtils::live$ = false;

          jclass DOMUtils::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/DOMUtils");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DOMUtils::DOMUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_DOMUtils_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DOMUtils_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DOMUtils_init_(t_DOMUtils *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_DOMUtils__methods_[] = {
            DECLARE_METHOD(t_DOMUtils, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DOMUtils, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DOMUtils, t_DOMUtils, ::java::lang::Object, DOMUtils, t_DOMUtils_init_, 0, 0, 0, 0, 0);

          void t_DOMUtils::install(PyObject *module)
          {
            installType(&PY_TYPE(DOMUtils), module, "DOMUtils", 0);
          }

          void t_DOMUtils::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DOMUtils).tp_dict, "class_", make_descriptor(DOMUtils::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DOMUtils).tp_dict, "wrapfn_", make_descriptor(t_DOMUtils::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DOMUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DOMUtils_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DOMUtils::initializeClass, 1)))
              return NULL;
            return t_DOMUtils::wrap_Object(DOMUtils(((t_DOMUtils *) arg)->object.this$));
          }
          static PyObject *t_DOMUtils_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DOMUtils::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DOMUtils_init_(t_DOMUtils *self, PyObject *args, PyObject *kwds)
          {
            DOMUtils object((jobject) NULL);

            INT_CALL(object = DOMUtils());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$LongParser.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$LongParser::class$ = NULL;
        jmethodID *FieldCache$LongParser::mids$ = NULL;
        bool FieldCache$LongParser::live$ = false;

        jclass FieldCache$LongParser::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$LongParser");

            mids$ = new jmethodID[max_mid];
            mids$[mid_parseLong_7bc03dd8] = env->getMethodID(cls, "parseLong", "(Lorg/apache/lucene/util/BytesRef;)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jlong FieldCache$LongParser::parseLong(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_parseLong_7bc03dd8], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$LongParser_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$LongParser_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$LongParser_parseLong(t_FieldCache$LongParser *self, PyObject *arg);

        static PyMethodDef t_FieldCache$LongParser__methods_[] = {
          DECLARE_METHOD(t_FieldCache$LongParser, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$LongParser, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$LongParser, parseLong, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$LongParser, t_FieldCache$LongParser, ::org::apache::lucene::search::FieldCache$Parser, FieldCache$LongParser, abstract_init, 0, 0, 0, 0, 0);

        void t_FieldCache$LongParser::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$LongParser), module, "FieldCache$LongParser", 0);
        }

        void t_FieldCache$LongParser::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$LongParser).tp_dict, "class_", make_descriptor(FieldCache$LongParser::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$LongParser).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$LongParser::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$LongParser).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCache$LongParser_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$LongParser::initializeClass, 1)))
            return NULL;
          return t_FieldCache$LongParser::wrap_Object(FieldCache$LongParser(((t_FieldCache$LongParser *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$LongParser_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$LongParser::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldCache$LongParser_parseLong(t_FieldCache$LongParser *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.parseLong(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "parseLong", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/NoMergeScheduler.h"
#include "org/apache/lucene/index/MergeTrigger.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *NoMergeScheduler::class$ = NULL;
        jmethodID *NoMergeScheduler::mids$ = NULL;
        bool NoMergeScheduler::live$ = false;
        ::org::apache::lucene::index::MergeScheduler *NoMergeScheduler::INSTANCE = NULL;

        jclass NoMergeScheduler::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/NoMergeScheduler");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clone_ff96d655] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/index/MergeScheduler;");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_merge_5fd7a9f9] = env->getMethodID(cls, "merge", "(Lorg/apache/lucene/index/IndexWriter;Lorg/apache/lucene/index/MergeTrigger;Z)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            INSTANCE = new ::org::apache::lucene::index::MergeScheduler(env->getStaticObjectField(cls, "INSTANCE", "Lorg/apache/lucene/index/MergeScheduler;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::MergeScheduler NoMergeScheduler::clone() const
        {
          return ::org::apache::lucene::index::MergeScheduler(env->callObjectMethod(this$, mids$[mid_clone_ff96d655]));
        }

        void NoMergeScheduler::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void NoMergeScheduler::merge(const ::org::apache::lucene::index::IndexWriter & a0, const ::org::apache::lucene::index::MergeTrigger & a1, jboolean a2) const
        {
          env->callVoidMethod(this$, mids$[mid_merge_5fd7a9f9], a0.this$, a1.this$, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_NoMergeScheduler_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergeScheduler_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoMergeScheduler_clone(t_NoMergeScheduler *self);
        static PyObject *t_NoMergeScheduler_close(t_NoMergeScheduler *self, PyObject *args);
        static PyObject *t_NoMergeScheduler_merge(t_NoMergeScheduler *self, PyObject *args);

        static PyMethodDef t_NoMergeScheduler__methods_[] = {
          DECLARE_METHOD(t_NoMergeScheduler, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergeScheduler, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoMergeScheduler, clone, METH_NOARGS),
          DECLARE_METHOD(t_NoMergeScheduler, close, METH_VARARGS),
          DECLARE_METHOD(t_NoMergeScheduler, merge, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoMergeScheduler, t_NoMergeScheduler, ::org::apache::lucene::index::MergeScheduler, NoMergeScheduler, abstract_init, 0, 0, 0, 0, 0);

        void t_NoMergeScheduler::install(PyObject *module)
        {
          installType(&PY_TYPE(NoMergeScheduler), module, "NoMergeScheduler", 0);
        }

        void t_NoMergeScheduler::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "class_", make_descriptor(NoMergeScheduler::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "wrapfn_", make_descriptor(t_NoMergeScheduler::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(NoMergeScheduler::initializeClass);
          PyDict_SetItemString(PY_TYPE(NoMergeScheduler).tp_dict, "INSTANCE", make_descriptor(::org::apache::lucene::index::t_MergeScheduler::wrap_Object(*NoMergeScheduler::INSTANCE)));
        }

        static PyObject *t_NoMergeScheduler_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoMergeScheduler::initializeClass, 1)))
            return NULL;
          return t_NoMergeScheduler::wrap_Object(NoMergeScheduler(((t_NoMergeScheduler *) arg)->object.this$));
        }
        static PyObject *t_NoMergeScheduler_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoMergeScheduler::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoMergeScheduler_clone(t_NoMergeScheduler *self)
        {
          ::org::apache::lucene::index::MergeScheduler result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return ::org::apache::lucene::index::t_MergeScheduler::wrap_Object(result);
        }

        static PyObject *t_NoMergeScheduler_close(t_NoMergeScheduler *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoMergeScheduler), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_NoMergeScheduler_merge(t_NoMergeScheduler *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
          ::org::apache::lucene::index::MergeTrigger a1((jobject) NULL);
          PyTypeObject **p1;
          jboolean a2;

          if (!parseArgs(args, "kKZ", ::org::apache::lucene::index::IndexWriter::initializeClass, ::org::apache::lucene::index::MergeTrigger::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::index::t_MergeTrigger::parameters_, &a2))
          {
            OBJ_CALL(self->object.merge(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoMergeScheduler), (PyObject *) self, "merge", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PersistentSnapshotDeletionPolicy.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/IndexWriterConfig$OpenMode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/IndexDeletionPolicy.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/store/Directory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PersistentSnapshotDeletionPolicy::class$ = NULL;
        jmethodID *PersistentSnapshotDeletionPolicy::mids$ = NULL;
        bool PersistentSnapshotDeletionPolicy::live$ = false;
        ::java::lang::String *PersistentSnapshotDeletionPolicy::SNAPSHOTS_PREFIX = NULL;

        jclass PersistentSnapshotDeletionPolicy::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PersistentSnapshotDeletionPolicy");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_12208c4a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_init$_7f5c9dc9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/IndexDeletionPolicy;Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/IndexWriterConfig$OpenMode;)V");
            mids$[mid_getLastSaveFile_14c7b5c5] = env->getMethodID(cls, "getLastSaveFile", "()Ljava/lang/String;");
            mids$[mid_release_fecc65d3] = env->getMethodID(cls, "release", "(Lorg/apache/lucene/index/IndexCommit;)V");
            mids$[mid_release_0ee6df2f] = env->getMethodID(cls, "release", "(J)V");
            mids$[mid_snapshot_09307276] = env->getMethodID(cls, "snapshot", "()Lorg/apache/lucene/index/IndexCommit;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            SNAPSHOTS_PREFIX = new ::java::lang::String(env->getStaticObjectField(cls, "SNAPSHOTS_PREFIX", "Ljava/lang/String;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PersistentSnapshotDeletionPolicy::PersistentSnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0, const ::org::apache::lucene::store::Directory & a1) : ::org::apache::lucene::index::SnapshotDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_12208c4a, a0.this$, a1.this$)) {}

        PersistentSnapshotDeletionPolicy::PersistentSnapshotDeletionPolicy(const ::org::apache::lucene::index::IndexDeletionPolicy & a0, const ::org::apache::lucene::store::Directory & a1, const ::org::apache::lucene::index::IndexWriterConfig$OpenMode & a2) : ::org::apache::lucene::index::SnapshotDeletionPolicy(env->newObject(initializeClass, &mids$, mid_init$_7f5c9dc9, a0.this$, a1.this$, a2.this$)) {}

        ::java::lang::String PersistentSnapshotDeletionPolicy::getLastSaveFile() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLastSaveFile_14c7b5c5]));
        }

        void PersistentSnapshotDeletionPolicy::release(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_fecc65d3], a0.this$);
        }

        void PersistentSnapshotDeletionPolicy::release(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_release_0ee6df2f], a0);
        }

        ::org::apache::lucene::index::IndexCommit PersistentSnapshotDeletionPolicy::snapshot() const
        {
          return ::org::apache::lucene::index::IndexCommit(env->callObjectMethod(this$, mids$[mid_snapshot_09307276]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PersistentSnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PersistentSnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PersistentSnapshotDeletionPolicy_init_(t_PersistentSnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PersistentSnapshotDeletionPolicy_getLastSaveFile(t_PersistentSnapshotDeletionPolicy *self);
        static PyObject *t_PersistentSnapshotDeletionPolicy_release(t_PersistentSnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_PersistentSnapshotDeletionPolicy_snapshot(t_PersistentSnapshotDeletionPolicy *self, PyObject *args);
        static PyObject *t_PersistentSnapshotDeletionPolicy_get__lastSaveFile(t_PersistentSnapshotDeletionPolicy *self, void *data);
        static PyGetSetDef t_PersistentSnapshotDeletionPolicy__fields_[] = {
          DECLARE_GET_FIELD(t_PersistentSnapshotDeletionPolicy, lastSaveFile),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PersistentSnapshotDeletionPolicy__methods_[] = {
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, getLastSaveFile, METH_NOARGS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, release, METH_VARARGS),
          DECLARE_METHOD(t_PersistentSnapshotDeletionPolicy, snapshot, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PersistentSnapshotDeletionPolicy, t_PersistentSnapshotDeletionPolicy, ::org::apache::lucene::index::SnapshotDeletionPolicy, PersistentSnapshotDeletionPolicy, t_PersistentSnapshotDeletionPolicy_init_, 0, 0, t_PersistentSnapshotDeletionPolicy__fields_, 0, 0);

        void t_PersistentSnapshotDeletionPolicy::install(PyObject *module)
        {
          installType(&PY_TYPE(PersistentSnapshotDeletionPolicy), module, "PersistentSnapshotDeletionPolicy", 0);
        }

        void t_PersistentSnapshotDeletionPolicy::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "class_", make_descriptor(PersistentSnapshotDeletionPolicy::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "wrapfn_", make_descriptor(t_PersistentSnapshotDeletionPolicy::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(PersistentSnapshotDeletionPolicy::initializeClass);
          PyDict_SetItemString(PY_TYPE(PersistentSnapshotDeletionPolicy).tp_dict, "SNAPSHOTS_PREFIX", make_descriptor(j2p(*PersistentSnapshotDeletionPolicy::SNAPSHOTS_PREFIX)));
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PersistentSnapshotDeletionPolicy::initializeClass, 1)))
            return NULL;
          return t_PersistentSnapshotDeletionPolicy::wrap_Object(PersistentSnapshotDeletionPolicy(((t_PersistentSnapshotDeletionPolicy *) arg)->object.this$));
        }
        static PyObject *t_PersistentSnapshotDeletionPolicy_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PersistentSnapshotDeletionPolicy::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PersistentSnapshotDeletionPolicy_init_(t_PersistentSnapshotDeletionPolicy *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              PersistentSnapshotDeletionPolicy object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PersistentSnapshotDeletionPolicy(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::org::apache::lucene::index::IndexDeletionPolicy a0((jobject) NULL);
              ::org::apache::lucene::store::Directory a1((jobject) NULL);
              ::org::apache::lucene::index::IndexWriterConfig$OpenMode a2((jobject) NULL);
              PyTypeObject **p2;
              PersistentSnapshotDeletionPolicy object((jobject) NULL);

              if (!parseArgs(args, "kkK", ::org::apache::lucene::index::IndexDeletionPolicy::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::IndexWriterConfig$OpenMode::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::index::t_IndexWriterConfig$OpenMode::parameters_))
              {
                INT_CALL(object = PersistentSnapshotDeletionPolicy(a0, a1, a2));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_getLastSaveFile(t_PersistentSnapshotDeletionPolicy *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getLastSaveFile());
          return j2p(result);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_release(t_PersistentSnapshotDeletionPolicy *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(self->object.release(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.release(a0));
                Py_RETURN_NONE;
              }
            }
          }

          return callSuper(&PY_TYPE(PersistentSnapshotDeletionPolicy), (PyObject *) self, "release", args, 2);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_snapshot(t_PersistentSnapshotDeletionPolicy *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexCommit result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.snapshot());
            return ::org::apache::lucene::index::t_IndexCommit::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(PersistentSnapshotDeletionPolicy), (PyObject *) self, "snapshot", args, 2);
        }

        static PyObject *t_PersistentSnapshotDeletionPolicy_get__lastSaveFile(t_PersistentSnapshotDeletionPolicy *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getLastSaveFile());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeError.h"
#include "org/apache/lucene/queryparser/flexible/messages/NLSException.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {

            ::java::lang::Class *QueryNodeError::class$ = NULL;
            jmethodID *QueryNodeError::mids$ = NULL;
            bool QueryNodeError::live$ = false;

            jclass QueryNodeError::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/QueryNodeError");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_1dde9d59] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;)V");
                mids$[mid_init$_41dcc0ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/messages/Message;Ljava/lang/Throwable;)V");
                mids$[mid_getMessageObject_1bceed44] = env->getMethodID(cls, "getMessageObject", "()Lorg/apache/lucene/queryparser/flexible/messages/Message;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryNodeError::QueryNodeError(const ::java::lang::Throwable & a0) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

            QueryNodeError::QueryNodeError(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_1dde9d59, a0.this$)) {}

            QueryNodeError::QueryNodeError(const ::org::apache::lucene::queryparser::flexible::messages::Message & a0, const ::java::lang::Throwable & a1) : ::java::lang::Error(env->newObject(initializeClass, &mids$, mid_init$_41dcc0ed, a0.this$, a1.this$)) {}

            ::org::apache::lucene::queryparser::flexible::messages::Message QueryNodeError::getMessageObject() const
            {
              return ::org::apache::lucene::queryparser::flexible::messages::Message(env->callObjectMethod(this$, mids$[mid_getMessageObject_1bceed44]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            static PyObject *t_QueryNodeError_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryNodeError_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryNodeError_init_(t_QueryNodeError *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryNodeError_getMessageObject(t_QueryNodeError *self);
            static PyObject *t_QueryNodeError_get__messageObject(t_QueryNodeError *self, void *data);
            static PyGetSetDef t_QueryNodeError__fields_[] = {
              DECLARE_GET_FIELD(t_QueryNodeError, messageObject),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryNodeError__methods_[] = {
              DECLARE_METHOD(t_QueryNodeError, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeError, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryNodeError, getMessageObject, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryNodeError, t_QueryNodeError, ::java::lang::Error, QueryNodeError, t_QueryNodeError_init_, 0, 0, t_QueryNodeError__fields_, 0, 0);

            void t_QueryNodeError::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryNodeError), module, "QueryNodeError", 0);
            }

            void t_QueryNodeError::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryNodeError).tp_dict, "class_", make_descriptor(QueryNodeError::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryNodeError).tp_dict, "wrapfn_", make_descriptor(t_QueryNodeError::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryNodeError).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryNodeError_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryNodeError::initializeClass, 1)))
                return NULL;
              return t_QueryNodeError::wrap_Object(QueryNodeError(((t_QueryNodeError *) arg)->object.this$));
            }
            static PyObject *t_QueryNodeError_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryNodeError::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryNodeError_init_(t_QueryNodeError *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::Throwable a0((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeError(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryNodeError(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::org::apache::lucene::queryparser::flexible::messages::Message a0((jobject) NULL);
                  ::java::lang::Throwable a1((jobject) NULL);
                  QueryNodeError object((jobject) NULL);

                  if (!parseArgs(args, "kk", ::org::apache::lucene::queryparser::flexible::messages::Message::initializeClass, ::java::lang::Throwable::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = QueryNodeError(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryNodeError_getMessageObject(t_QueryNodeError *self)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message result((jobject) NULL);
              OBJ_CALL(result = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(result);
            }

            static PyObject *t_QueryNodeError_get__messageObject(t_QueryNodeError *self, void *data)
            {
              ::org::apache::lucene::queryparser::flexible::messages::Message value((jobject) NULL);
              OBJ_CALL(value = self->object.getMessageObject());
              return ::org::apache::lucene::queryparser::flexible::messages::t_Message::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *AbstractAnalysisFactory::class$ = NULL;
          jmethodID *AbstractAnalysisFactory::mids$ = NULL;
          bool AbstractAnalysisFactory::live$ = false;
          ::java::lang::String *AbstractAnalysisFactory::LUCENE_MATCH_VERSION_PARAM = NULL;

          jclass AbstractAnalysisFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/AbstractAnalysisFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_get_4630d771] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_4be9e858] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;");
              mids$[mid_get_c717d02f] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_bc17366a] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_get_7fb22fcf] = env->getMethodID(cls, "get", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Ljava/lang/String;Z)Ljava/lang/String;");
              mids$[mid_getChar_2bcf84e7] = env->getMethodID(cls, "getChar", "(Ljava/util/Map;Ljava/lang/String;C)C");
              mids$[mid_getClassArg_14c7b5c5] = env->getMethodID(cls, "getClassArg", "()Ljava/lang/String;");
              mids$[mid_getLuceneMatchVersion_a83d688e] = env->getMethodID(cls, "getLuceneMatchVersion", "()Lorg/apache/lucene/util/Version;");
              mids$[mid_getOriginalArgs_db60befd] = env->getMethodID(cls, "getOriginalArgs", "()Ljava/util/Map;");
              mids$[mid_getSet_3ddefc5b] = env->getMethodID(cls, "getSet", "(Ljava/util/Map;Ljava/lang/String;)Ljava/util/Set;");
              mids$[mid_isExplicitLuceneMatchVersion_54c6a16a] = env->getMethodID(cls, "isExplicitLuceneMatchVersion", "()Z");
              mids$[mid_require_4630d771] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_require_4be9e858] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;)Ljava/lang/String;");
              mids$[mid_require_203fb939] = env->getMethodID(cls, "require", "(Ljava/util/Map;Ljava/lang/String;Ljava/util/Collection;Z)Ljava/lang/String;");
              mids$[mid_requireChar_68876213] = env->getMethodID(cls, "requireChar", "(Ljava/util/Map;Ljava/lang/String;)C");
              mids$[mid_setExplicitLuceneMatchVersion_bb0c767f] = env->getMethodID(cls, "setExplicitLuceneMatchVersion", "(Z)V");
              mids$[mid_getBoolean_53e7fc33] = env->getMethodID(cls, "getBoolean", "(Ljava/util/Map;Ljava/lang/String;Z)Z");
              mids$[mid_getInt_29d335db] = env->getMethodID(cls, "getInt", "(Ljava/util/Map;Ljava/lang/String;I)I");
              mids$[mid_getFloat_a7ea7213] = env->getMethodID(cls, "getFloat", "(Ljava/util/Map;Ljava/lang/String;F)F");
              mids$[mid_getWordSet_94dc101c] = env->getMethodID(cls, "getWordSet", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_assureMatchVersion_54c6a166] = env->getMethodID(cls, "assureMatchVersion", "()V");
              mids$[mid_requireInt_68876219] = env->getMethodID(cls, "requireInt", "(Ljava/util/Map;Ljava/lang/String;)I");
              mids$[mid_requireBoolean_6887620a] = env->getMethodID(cls, "requireBoolean", "(Ljava/util/Map;Ljava/lang/String;)Z");
              mids$[mid_requireFloat_68876216] = env->getMethodID(cls, "requireFloat", "(Ljava/util/Map;Ljava/lang/String;)F");
              mids$[mid_getPattern_222e4d23] = env->getMethodID(cls, "getPattern", "(Ljava/util/Map;Ljava/lang/String;)Ljava/util/regex/Pattern;");
              mids$[mid_getLines_161f664b] = env->getMethodID(cls, "getLines", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;)Ljava/util/List;");
              mids$[mid_getSnowballWordSet_94dc101c] = env->getMethodID(cls, "getSnowballWordSet", "(Lorg/apache/lucene/analysis/util/ResourceLoader;Ljava/lang/String;Z)Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_splitFileNames_0feb8f08] = env->getMethodID(cls, "splitFileNames", "(Ljava/lang/String;)Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              LUCENE_MATCH_VERSION_PARAM = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_MATCH_VERSION_PARAM", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_4630d771], a0.this$, a1.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_4be9e858], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_c717d02f], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, const ::java::lang::String & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_bc17366a], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::get(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, const ::java::lang::String & a3, jboolean a4) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_7fb22fcf], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          jchar AbstractAnalysisFactory::getChar(const ::java::util::Map & a0, const ::java::lang::String & a1, jchar a2) const
          {
            return env->callCharMethod(this$, mids$[mid_getChar_2bcf84e7], a0.this$, a1.this$, a2);
          }

          ::java::lang::String AbstractAnalysisFactory::getClassArg() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getClassArg_14c7b5c5]));
          }

          ::org::apache::lucene::util::Version AbstractAnalysisFactory::getLuceneMatchVersion() const
          {
            return ::org::apache::lucene::util::Version(env->callObjectMethod(this$, mids$[mid_getLuceneMatchVersion_a83d688e]));
          }

          ::java::util::Map AbstractAnalysisFactory::getOriginalArgs() const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getOriginalArgs_db60befd]));
          }

          ::java::util::Set AbstractAnalysisFactory::getSet(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getSet_3ddefc5b], a0.this$, a1.this$));
          }

          jboolean AbstractAnalysisFactory::isExplicitLuceneMatchVersion() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isExplicitLuceneMatchVersion_54c6a16a]);
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_4630d771], a0.this$, a1.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_4be9e858], a0.this$, a1.this$, a2.this$));
          }

          ::java::lang::String AbstractAnalysisFactory::require(const ::java::util::Map & a0, const ::java::lang::String & a1, const ::java::util::Collection & a2, jboolean a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_require_203fb939], a0.this$, a1.this$, a2.this$, a3));
          }

          jchar AbstractAnalysisFactory::requireChar(const ::java::util::Map & a0, const ::java::lang::String & a1) const
          {
            return env->callCharMethod(this$, mids$[mid_requireChar_68876213], a0.this$, a1.this$);
          }

          void AbstractAnalysisFactory::setExplicitLuceneMatchVersion(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExplicitLuceneMatchVersion_bb0c767f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_AbstractAnalysisFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_get(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_getChar(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_getClassArg(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getLuceneMatchVersion(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getOriginalArgs(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_getSet(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_isExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self);
          static PyObject *t_AbstractAnalysisFactory_require(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_requireChar(t_AbstractAnalysisFactory *self, PyObject *args);
          static PyObject *t_AbstractAnalysisFactory_setExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg);
          static PyObject *t_AbstractAnalysisFactory_get__classArg(t_AbstractAnalysisFactory *self, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, void *data);
          static int t_AbstractAnalysisFactory_set__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__luceneMatchVersion(t_AbstractAnalysisFactory *self, void *data);
          static PyObject *t_AbstractAnalysisFactory_get__originalArgs(t_AbstractAnalysisFactory *self, void *data);
          static PyGetSetDef t_AbstractAnalysisFactory__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, classArg),
            DECLARE_GETSET_FIELD(t_AbstractAnalysisFactory, explicitLuceneMatchVersion),
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, luceneMatchVersion),
            DECLARE_GET_FIELD(t_AbstractAnalysisFactory, originalArgs),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_AbstractAnalysisFactory__methods_[] = {
            DECLARE_METHOD(t_AbstractAnalysisFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, get, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getChar, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getClassArg, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getLuceneMatchVersion, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getOriginalArgs, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, getSet, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, isExplicitLuceneMatchVersion, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, require, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, requireChar, METH_VARARGS),
            DECLARE_METHOD(t_AbstractAnalysisFactory, setExplicitLuceneMatchVersion, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAnalysisFactory, t_AbstractAnalysisFactory, ::java::lang::Object, AbstractAnalysisFactory, abstract_init, 0, 0, t_AbstractAnalysisFactory__fields_, 0, 0);

          void t_AbstractAnalysisFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAnalysisFactory), module, "AbstractAnalysisFactory", 0);
          }

          void t_AbstractAnalysisFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "class_", make_descriptor(AbstractAnalysisFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "wrapfn_", make_descriptor(t_AbstractAnalysisFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(AbstractAnalysisFactory::initializeClass);
            PyDict_SetItemString(PY_TYPE(AbstractAnalysisFactory).tp_dict, "LUCENE_MATCH_VERSION_PARAM", make_descriptor(j2p(*AbstractAnalysisFactory::LUCENE_MATCH_VERSION_PARAM)));
          }

          static PyObject *t_AbstractAnalysisFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAnalysisFactory::initializeClass, 1)))
              return NULL;
            return t_AbstractAnalysisFactory::wrap_Object(AbstractAnalysisFactory(((t_AbstractAnalysisFactory *) arg)->object.this$));
          }
          static PyObject *t_AbstractAnalysisFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAnalysisFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAnalysisFactory_get(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.get(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsK", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2));
                  return j2p(result);
                }
              }
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Kss", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2));
                  return j2p(result);
                }
              }
              break;
             case 4:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKs", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              break;
             case 5:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String a3((jobject) NULL);
                jboolean a4;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKsZ", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2, a3, a4));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "get", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_getChar(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            jchar a2;
            jchar result;

            if (!parseArgs(args, "KsC", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getChar(a0, a1, a2));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "getChar", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_getClassArg(t_AbstractAnalysisFactory *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getClassArg());
            return j2p(result);
          }

          static PyObject *t_AbstractAnalysisFactory_getLuceneMatchVersion(t_AbstractAnalysisFactory *self)
          {
            ::org::apache::lucene::util::Version result((jobject) NULL);
            OBJ_CALL(result = self->object.getLuceneMatchVersion());
            return ::org::apache::lucene::util::t_Version::wrap_Object(result);
          }

          static PyObject *t_AbstractAnalysisFactory_getOriginalArgs(t_AbstractAnalysisFactory *self)
          {
            ::java::util::Map result((jobject) NULL);
            OBJ_CALL(result = self->object.getOriginalArgs());
            return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
          }

          static PyObject *t_AbstractAnalysisFactory_getSet(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            ::java::util::Set result((jobject) NULL);

            if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.getSet(a0, a1));
              return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            PyErr_SetArgsError((PyObject *) self, "getSet", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_isExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isExplicitLuceneMatchVersion());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_AbstractAnalysisFactory_require(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
                {
                  OBJ_CALL(result = self->object.require(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsK", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_))
                {
                  OBJ_CALL(result = self->object.require(a0, a1, a2));
                  return j2p(result);
                }
              }
              break;
             case 4:
              {
                ::java::util::Map a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::String a1((jobject) NULL);
                ::java::util::Collection a2((jobject) NULL);
                PyTypeObject **p2;
                jboolean a3;
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "KsKZ", ::java::util::Map::initializeClass, ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1, &a2, &p2, ::java::util::t_Collection::parameters_, &a3))
                {
                  OBJ_CALL(result = self->object.require(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "require", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_requireChar(t_AbstractAnalysisFactory *self, PyObject *args)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            jchar result;

            if (!parseArgs(args, "Ks", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
            {
              OBJ_CALL(result = self->object.requireChar(a0, a1));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "requireChar", args);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_setExplicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExplicitLuceneMatchVersion(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExplicitLuceneMatchVersion", arg);
            return NULL;
          }

          static PyObject *t_AbstractAnalysisFactory_get__classArg(t_AbstractAnalysisFactory *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getClassArg());
            return j2p(value);
          }

          static PyObject *t_AbstractAnalysisFactory_get__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isExplicitLuceneMatchVersion());
            Py_RETURN_BOOL(value);
          }
          static int t_AbstractAnalysisFactory_set__explicitLuceneMatchVersion(t_AbstractAnalysisFactory *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExplicitLuceneMatchVersion(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "explicitLuceneMatchVersion", arg);
            return -1;
          }

          static PyObject *t_AbstractAnalysisFactory_get__luceneMatchVersion(t_AbstractAnalysisFactory *self, void *data)
          {
            ::org::apache::lucene::util::Version value((jobject) NULL);
            OBJ_CALL(value = self->object.getLuceneMatchVersion());
            return ::org::apache::lucene::util::t_Version::wrap_Object(value);
          }

          static PyObject *t_AbstractAnalysisFactory_get__originalArgs(t_AbstractAnalysisFactory *self, void *data)
          {
            ::java::util::Map value((jobject) NULL);
            OBJ_CALL(value = self->object.getOriginalArgs());
            return ::java::util::t_Map::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanFirstBuilder::class$ = NULL;
            jmethodID *SpanFirstBuilder::mids$ = NULL;
            bool SpanFirstBuilder::live$ = false;

            jclass SpanFirstBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanFirstBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_d9ca31a9] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/builders/SpanQueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SpanFirstBuilder::SpanFirstBuilder(const ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder & a0) : ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase(env->newObject(initializeClass, &mids$, mid_init$_d9ca31a9, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanFirstBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanFirstBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SpanFirstBuilder_init_(t_SpanFirstBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_SpanFirstBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanFirstBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanFirstBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanFirstBuilder, t_SpanFirstBuilder, ::org::apache::lucene::queryparser::xml::builders::SpanBuilderBase, SpanFirstBuilder, t_SpanFirstBuilder_init_, 0, 0, 0, 0, 0);

            void t_SpanFirstBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanFirstBuilder), module, "SpanFirstBuilder", 0);
            }

            void t_SpanFirstBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanFirstBuilder).tp_dict, "class_", make_descriptor(SpanFirstBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanFirstBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanFirstBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanFirstBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanFirstBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanFirstBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanFirstBuilder::wrap_Object(SpanFirstBuilder(((t_SpanFirstBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanFirstBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanFirstBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SpanFirstBuilder_init_(t_SpanFirstBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder a0((jobject) NULL);
              SpanFirstBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::builders::SpanQueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = SpanFirstBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene41/Lucene41PostingsBaseFormat.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {

          ::java::lang::Class *Lucene41PostingsBaseFormat::class$ = NULL;
          jmethodID *Lucene41PostingsBaseFormat::mids$ = NULL;
          bool Lucene41PostingsBaseFormat::live$ = false;

          jclass Lucene41PostingsBaseFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene41/Lucene41PostingsBaseFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_postingsReaderBase_927fb3f2] = env->getMethodID(cls, "postingsReaderBase", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PostingsReaderBase;");
              mids$[mid_postingsWriterBase_c1fe85c2] = env->getMethodID(cls, "postingsWriterBase", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PostingsWriterBase;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene41PostingsBaseFormat::Lucene41PostingsBaseFormat() : ::org::apache::lucene::codecs::PostingsBaseFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::PostingsReaderBase Lucene41PostingsBaseFormat::postingsReaderBase(const ::org::apache::lucene::index::SegmentReadState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsReaderBase(env->callObjectMethod(this$, mids$[mid_postingsReaderBase_927fb3f2], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsWriterBase Lucene41PostingsBaseFormat::postingsWriterBase(const ::org::apache::lucene::index::SegmentWriteState & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsWriterBase(env->callObjectMethod(this$, mids$[mid_postingsWriterBase_c1fe85c2], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene41 {
          static PyObject *t_Lucene41PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene41PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene41PostingsBaseFormat_init_(t_Lucene41PostingsBaseFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene41PostingsBaseFormat_postingsReaderBase(t_Lucene41PostingsBaseFormat *self, PyObject *args);
          static PyObject *t_Lucene41PostingsBaseFormat_postingsWriterBase(t_Lucene41PostingsBaseFormat *self, PyObject *args);

          static PyMethodDef t_Lucene41PostingsBaseFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, postingsReaderBase, METH_VARARGS),
            DECLARE_METHOD(t_Lucene41PostingsBaseFormat, postingsWriterBase, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene41PostingsBaseFormat, t_Lucene41PostingsBaseFormat, ::org::apache::lucene::codecs::PostingsBaseFormat, Lucene41PostingsBaseFormat, t_Lucene41PostingsBaseFormat_init_, 0, 0, 0, 0, 0);

          void t_Lucene41PostingsBaseFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene41PostingsBaseFormat), module, "Lucene41PostingsBaseFormat", 0);
          }

          void t_Lucene41PostingsBaseFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsBaseFormat).tp_dict, "class_", make_descriptor(Lucene41PostingsBaseFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsBaseFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene41PostingsBaseFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene41PostingsBaseFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene41PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene41PostingsBaseFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene41PostingsBaseFormat::wrap_Object(Lucene41PostingsBaseFormat(((t_Lucene41PostingsBaseFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene41PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene41PostingsBaseFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene41PostingsBaseFormat_init_(t_Lucene41PostingsBaseFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene41PostingsBaseFormat object((jobject) NULL);

            INT_CALL(object = Lucene41PostingsBaseFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene41PostingsBaseFormat_postingsReaderBase(t_Lucene41PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsReaderBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsReaderBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsBaseFormat), (PyObject *) self, "postingsReaderBase", args, 2);
          }

          static PyObject *t_Lucene41PostingsBaseFormat_postingsWriterBase(t_Lucene41PostingsBaseFormat *self, PyObject *args)
          {
            ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsWriterBase result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.postingsWriterBase(a0));
              return ::org::apache::lucene::codecs::t_PostingsWriterBase::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene41PostingsBaseFormat), (PyObject *) self, "postingsWriterBase", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/PostingsBaseFormat.h"
#include "org/apache/lucene/codecs/PostingsWriterBase.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *PostingsBaseFormat::class$ = NULL;
        jmethodID *PostingsBaseFormat::mids$ = NULL;
        jfieldID *PostingsBaseFormat::fids$ = NULL;
        bool PostingsBaseFormat::live$ = false;

        jclass PostingsBaseFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/PostingsBaseFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_postingsReaderBase_927fb3f2] = env->getMethodID(cls, "postingsReaderBase", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/PostingsReaderBase;");
            mids$[mid_postingsWriterBase_c1fe85c2] = env->getMethodID(cls, "postingsWriterBase", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/PostingsWriterBase;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::PostingsReaderBase PostingsBaseFormat::postingsReaderBase(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::PostingsReaderBase(env->callObjectMethod(this$, mids$[mid_postingsReaderBase_927fb3f2], a0.this$));
        }

        ::org::apache::lucene::codecs::PostingsWriterBase PostingsBaseFormat::postingsWriterBase(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::PostingsWriterBase(env->callObjectMethod(this$, mids$[mid_postingsWriterBase_c1fe85c2], a0.this$));
        }

        ::java::lang::String PostingsBaseFormat::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_postingsReaderBase(t_PostingsBaseFormat *self, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_postingsWriterBase(t_PostingsBaseFormat *self, PyObject *arg);
        static PyObject *t_PostingsBaseFormat_get__name(t_PostingsBaseFormat *self, void *data);

        static PyGetSetDef t_PostingsBaseFormat__fields_[] = {
          DECLARE_GET_FIELD(t_PostingsBaseFormat, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PostingsBaseFormat__methods_[] = {
          DECLARE_METHOD(t_PostingsBaseFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsBaseFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PostingsBaseFormat, postingsReaderBase, METH_O),
          DECLARE_METHOD(t_PostingsBaseFormat, postingsWriterBase, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PostingsBaseFormat, t_PostingsBaseFormat, ::java::lang::Object, PostingsBaseFormat, abstract_init, 0, 0, t_PostingsBaseFormat__fields_, 0, 0);

        void t_PostingsBaseFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(PostingsBaseFormat), module, "PostingsBaseFormat", 0);
        }

        void t_PostingsBaseFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PostingsBaseFormat).tp_dict, "class_", make_descriptor(PostingsBaseFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PostingsBaseFormat).tp_dict, "wrapfn_", make_descriptor(t_PostingsBaseFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PostingsBaseFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PostingsBaseFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PostingsBaseFormat::initializeClass, 1)))
            return NULL;
          return t_PostingsBaseFormat::wrap_Object(PostingsBaseFormat(((t_PostingsBaseFormat *) arg)->object.this$));
        }
        static PyObject *t_PostingsBaseFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PostingsBaseFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_PostingsBaseFormat_postingsReaderBase(t_PostingsBaseFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::PostingsReaderBase result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.postingsReaderBase(a0));
            return ::org::apache::lucene::codecs::t_PostingsReaderBase::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "postingsReaderBase", arg);
          return NULL;
        }

        static PyObject *t_PostingsBaseFormat_postingsWriterBase(t_PostingsBaseFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::PostingsWriterBase result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.postingsWriterBase(a0));
            return ::org::apache::lucene::codecs::t_PostingsWriterBase::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "postingsWriterBase", arg);
          return NULL;
        }

        static PyObject *t_PostingsBaseFormat_get__name(t_PostingsBaseFormat *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldValueFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldValueFilter::class$ = NULL;
        jmethodID *FieldValueFilter::mids$ = NULL;
        bool FieldValueFilter::live$ = false;

        jclass FieldValueFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldValueFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_field_14c7b5c5] = env->getMethodID(cls, "field", "()Ljava/lang/String;");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_negate_54c6a16a] = env->getMethodID(cls, "negate", "()Z");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldValueFilter::FieldValueFilter(const ::java::lang::String & a0) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        FieldValueFilter::FieldValueFilter(const ::java::lang::String & a0, jboolean a1) : ::org::apache::lucene::search::Filter(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

        jboolean FieldValueFilter::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::String FieldValueFilter::field() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_field_14c7b5c5]));
        }

        ::org::apache::lucene::search::DocIdSet FieldValueFilter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }

        jint FieldValueFilter::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean FieldValueFilter::negate() const
        {
          return env->callBooleanMethod(this$, mids$[mid_negate_54c6a16a]);
        }

        ::java::lang::String FieldValueFilter::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldValueFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldValueFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldValueFilter_init_(t_FieldValueFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldValueFilter_equals(t_FieldValueFilter *self, PyObject *args);
        static PyObject *t_FieldValueFilter_field(t_FieldValueFilter *self);
        static PyObject *t_FieldValueFilter_getDocIdSet(t_FieldValueFilter *self, PyObject *args);
        static PyObject *t_FieldValueFilter_hashCode(t_FieldValueFilter *self, PyObject *args);
        static PyObject *t_FieldValueFilter_negate(t_FieldValueFilter *self);
        static PyObject *t_FieldValueFilter_toString(t_FieldValueFilter *self, PyObject *args);

        static PyMethodDef t_FieldValueFilter__methods_[] = {
          DECLARE_METHOD(t_FieldValueFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldValueFilter, equals, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueFilter, field, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueFilter, getDocIdSet, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueFilter, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_FieldValueFilter, negate, METH_NOARGS),
          DECLARE_METHOD(t_FieldValueFilter, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldValueFilter, t_FieldValueFilter, ::org::apache::lucene::search::Filter, FieldValueFilter, t_FieldValueFilter_init_, 0, 0, 0, 0, 0);

        void t_FieldValueFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldValueFilter), module, "FieldValueFilter", 0);
        }

        void t_FieldValueFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldValueFilter).tp_dict, "class_", make_descriptor(FieldValueFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldValueFilter).tp_dict, "wrapfn_", make_descriptor(t_FieldValueFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldValueFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldValueFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldValueFilter::initializeClass, 1)))
            return NULL;
          return t_FieldValueFilter::wrap_Object(FieldValueFilter(((t_FieldValueFilter *) arg)->object.this$));
        }
        static PyObject *t_FieldValueFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldValueFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldValueFilter_init_(t_FieldValueFilter *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              FieldValueFilter object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = FieldValueFilter(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              FieldValueFilter object((jobject) NULL);

              if (!parseArgs(args, "sZ", &a0, &a1))
              {
                INT_CALL(object = FieldValueFilter(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldValueFilter_equals(t_FieldValueFilter *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_FieldValueFilter_field(t_FieldValueFilter *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.field());
          return j2p(result);
        }

        static PyObject *t_FieldValueFilter_getDocIdSet(t_FieldValueFilter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "getDocIdSet", args, 2);
        }

        static PyObject *t_FieldValueFilter_hashCode(t_FieldValueFilter *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_FieldValueFilter_negate(t_FieldValueFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.negate());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldValueFilter_toString(t_FieldValueFilter *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(FieldValueFilter), (PyObject *) self, "toString", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector$GroupCount.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionDistinctValuesCollector$GroupCount::class$ = NULL;
            jmethodID *FunctionDistinctValuesCollector$GroupCount::mids$ = NULL;
            bool FunctionDistinctValuesCollector$GroupCount::live$ = false;

            jclass FunctionDistinctValuesCollector$GroupCount::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionDistinctValuesCollector$GroupCount");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_of_(t_FunctionDistinctValuesCollector$GroupCount *self, PyObject *args);
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_get__parameters_(t_FunctionDistinctValuesCollector$GroupCount *self, void *data);
            static PyGetSetDef t_FunctionDistinctValuesCollector$GroupCount__fields_[] = {
              DECLARE_GET_FIELD(t_FunctionDistinctValuesCollector$GroupCount, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionDistinctValuesCollector$GroupCount__methods_[] = {
              DECLARE_METHOD(t_FunctionDistinctValuesCollector$GroupCount, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector$GroupCount, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionDistinctValuesCollector$GroupCount, of_, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionDistinctValuesCollector$GroupCount, t_FunctionDistinctValuesCollector$GroupCount, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector$GroupCount, FunctionDistinctValuesCollector$GroupCount, abstract_init, 0, 0, t_FunctionDistinctValuesCollector$GroupCount__fields_, 0, 0);
            PyObject *t_FunctionDistinctValuesCollector$GroupCount::wrap_Object(const FunctionDistinctValuesCollector$GroupCount& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector$GroupCount::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector$GroupCount *self = (t_FunctionDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionDistinctValuesCollector$GroupCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionDistinctValuesCollector$GroupCount::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionDistinctValuesCollector$GroupCount *self = (t_FunctionDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionDistinctValuesCollector$GroupCount::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionDistinctValuesCollector$GroupCount), module, "FunctionDistinctValuesCollector$GroupCount", 0);
            }

            void t_FunctionDistinctValuesCollector$GroupCount::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector$GroupCount).tp_dict, "class_", make_descriptor(FunctionDistinctValuesCollector$GroupCount::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector$GroupCount).tp_dict, "wrapfn_", make_descriptor(t_FunctionDistinctValuesCollector$GroupCount::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionDistinctValuesCollector$GroupCount).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionDistinctValuesCollector$GroupCount::initializeClass, 1)))
                return NULL;
              return t_FunctionDistinctValuesCollector$GroupCount::wrap_Object(FunctionDistinctValuesCollector$GroupCount(((t_FunctionDistinctValuesCollector$GroupCount *) arg)->object.this$));
            }
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionDistinctValuesCollector$GroupCount::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_of_(t_FunctionDistinctValuesCollector$GroupCount *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }
            static PyObject *t_FunctionDistinctValuesCollector$GroupCount_get__parameters_(t_FunctionDistinctValuesCollector$GroupCount *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/EmptyTokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *EmptyTokenStream::class$ = NULL;
          jmethodID *EmptyTokenStream::mids$ = NULL;
          bool EmptyTokenStream::live$ = false;

          jclass EmptyTokenStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/EmptyTokenStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EmptyTokenStream::EmptyTokenStream() : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean EmptyTokenStream::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_EmptyTokenStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EmptyTokenStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EmptyTokenStream_init_(t_EmptyTokenStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EmptyTokenStream_incrementToken(t_EmptyTokenStream *self, PyObject *args);

          static PyMethodDef t_EmptyTokenStream__methods_[] = {
            DECLARE_METHOD(t_EmptyTokenStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EmptyTokenStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EmptyTokenStream, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EmptyTokenStream, t_EmptyTokenStream, ::org::apache::lucene::analysis::TokenStream, EmptyTokenStream, t_EmptyTokenStream_init_, 0, 0, 0, 0, 0);

          void t_EmptyTokenStream::install(PyObject *module)
          {
            installType(&PY_TYPE(EmptyTokenStream), module, "EmptyTokenStream", 0);
          }

          void t_EmptyTokenStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EmptyTokenStream).tp_dict, "class_", make_descriptor(EmptyTokenStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EmptyTokenStream).tp_dict, "wrapfn_", make_descriptor(t_EmptyTokenStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EmptyTokenStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EmptyTokenStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EmptyTokenStream::initializeClass, 1)))
              return NULL;
            return t_EmptyTokenStream::wrap_Object(EmptyTokenStream(((t_EmptyTokenStream *) arg)->object.this$));
          }
          static PyObject *t_EmptyTokenStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EmptyTokenStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EmptyTokenStream_init_(t_EmptyTokenStream *self, PyObject *args, PyObject *kwds)
          {
            EmptyTokenStream object((jobject) NULL);

            INT_CALL(object = EmptyTokenStream());
            self->object = object;

            return 0;
          }

          static PyObject *t_EmptyTokenStream_incrementToken(t_EmptyTokenStream *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EmptyTokenStream), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/TFValueSource.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *TFValueSource::class$ = NULL;
            jmethodID *TFValueSource::mids$ = NULL;
            bool TFValueSource::live$ = false;

            jclass TFValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/TFValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b45b6622] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)V");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TFValueSource::TFValueSource(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::org::apache::lucene::util::BytesRef & a3) : ::org::apache::lucene::queries::function::valuesource::TermFreqValueSource(env->newObject(initializeClass, &mids$, mid_init$_b45b6622, a0.this$, a1.this$, a2.this$, a3.this$)) {}

            ::org::apache::lucene::queries::function::FunctionValues TFValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            ::java::lang::String TFValueSource::name() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_TFValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TFValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TFValueSource_init_(t_TFValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TFValueSource_getValues(t_TFValueSource *self, PyObject *args);
            static PyObject *t_TFValueSource_name(t_TFValueSource *self, PyObject *args);

            static PyMethodDef t_TFValueSource__methods_[] = {
              DECLARE_METHOD(t_TFValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TFValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TFValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_TFValueSource, name, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TFValueSource, t_TFValueSource, ::org::apache::lucene::queries::function::valuesource::TermFreqValueSource, TFValueSource, t_TFValueSource_init_, 0, 0, 0, 0, 0);

            void t_TFValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(TFValueSource), module, "TFValueSource", 0);
            }

            void t_TFValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TFValueSource).tp_dict, "class_", make_descriptor(TFValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TFValueSource).tp_dict, "wrapfn_", make_descriptor(t_TFValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TFValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TFValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TFValueSource::initializeClass, 1)))
                return NULL;
              return t_TFValueSource::wrap_Object(TFValueSource(((t_TFValueSource *) arg)->object.this$));
            }
            static PyObject *t_TFValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TFValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TFValueSource_init_(t_TFValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
              TFValueSource object((jobject) NULL);

              if (!parseArgs(args, "sssk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
              {
                INT_CALL(object = TFValueSource(a0, a1, a2, a3));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TFValueSource_getValues(t_TFValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(TFValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_TFValueSource_name(t_TFValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.name());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(TFValueSource), (PyObject *) self, "name", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BitsFilteredDocIdSet.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BitsFilteredDocIdSet::class$ = NULL;
        jmethodID *BitsFilteredDocIdSet::mids$ = NULL;
        bool BitsFilteredDocIdSet::live$ = false;

        jclass BitsFilteredDocIdSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BitsFilteredDocIdSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_042197af] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/util/Bits;)V");
            mids$[mid_wrap_e3d48bdb] = env->getStaticMethodID(cls, "wrap", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");
            mids$[mid_match_39c7bd30] = env->getMethodID(cls, "match", "(I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BitsFilteredDocIdSet::BitsFilteredDocIdSet(const ::org::apache::lucene::search::DocIdSet & a0, const ::org::apache::lucene::util::Bits & a1) : ::org::apache::lucene::search::FilteredDocIdSet(env->newObject(initializeClass, &mids$, mid_init$_042197af, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::DocIdSet BitsFilteredDocIdSet::wrap(const ::org::apache::lucene::search::DocIdSet & a0, const ::org::apache::lucene::util::Bits & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::search::DocIdSet(env->callStaticObjectMethod(cls, mids$[mid_wrap_e3d48bdb], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BitsFilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitsFilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BitsFilteredDocIdSet_init_(t_BitsFilteredDocIdSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BitsFilteredDocIdSet_wrap(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_BitsFilteredDocIdSet__methods_[] = {
          DECLARE_METHOD(t_BitsFilteredDocIdSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitsFilteredDocIdSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitsFilteredDocIdSet, wrap, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BitsFilteredDocIdSet, t_BitsFilteredDocIdSet, ::org::apache::lucene::search::FilteredDocIdSet, BitsFilteredDocIdSet, t_BitsFilteredDocIdSet_init_, 0, 0, 0, 0, 0);

        void t_BitsFilteredDocIdSet::install(PyObject *module)
        {
          installType(&PY_TYPE(BitsFilteredDocIdSet), module, "BitsFilteredDocIdSet", 0);
        }

        void t_BitsFilteredDocIdSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BitsFilteredDocIdSet).tp_dict, "class_", make_descriptor(BitsFilteredDocIdSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BitsFilteredDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_BitsFilteredDocIdSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BitsFilteredDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BitsFilteredDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BitsFilteredDocIdSet::initializeClass, 1)))
            return NULL;
          return t_BitsFilteredDocIdSet::wrap_Object(BitsFilteredDocIdSet(((t_BitsFilteredDocIdSet *) arg)->object.this$));
        }
        static PyObject *t_BitsFilteredDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BitsFilteredDocIdSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BitsFilteredDocIdSet_init_(t_BitsFilteredDocIdSet *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::DocIdSet a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          BitsFilteredDocIdSet object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::DocIdSet::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            INT_CALL(object = BitsFilteredDocIdSet(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_BitsFilteredDocIdSet_wrap(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSet a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::search::DocIdSet::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::BitsFilteredDocIdSet::wrap(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "wrap", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *CharStream::class$ = NULL;
            jmethodID *CharStream::mids$ = NULL;
            bool CharStream::live$ = false;

            jclass CharStream::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/CharStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
                mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
                mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
                mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
                mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
                mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
                mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
                mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
                mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
                mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
                mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
                mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jchar CharStream::BeginToken() const
            {
              return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
            }

            void CharStream::Done() const
            {
              env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
            }

            ::java::lang::String CharStream::GetImage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
            }

            JArray< jchar > CharStream::GetSuffix(jint a0) const
            {
              return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
            }

            void CharStream::backup(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
            }

            jint CharStream::getBeginColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
            }

            jint CharStream::getBeginLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
            }

            jint CharStream::getColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
            }

            jint CharStream::getEndColumn() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
            }

            jint CharStream::getEndLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
            }

            jint CharStream::getLine() const
            {
              return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
            }

            jchar CharStream::readChar() const
            {
              return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_CharStream_BeginToken(t_CharStream *self);
            static PyObject *t_CharStream_Done(t_CharStream *self);
            static PyObject *t_CharStream_GetImage(t_CharStream *self);
            static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg);
            static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg);
            static PyObject *t_CharStream_getBeginColumn(t_CharStream *self);
            static PyObject *t_CharStream_getBeginLine(t_CharStream *self);
            static PyObject *t_CharStream_getColumn(t_CharStream *self);
            static PyObject *t_CharStream_getEndColumn(t_CharStream *self);
            static PyObject *t_CharStream_getEndLine(t_CharStream *self);
            static PyObject *t_CharStream_getLine(t_CharStream *self);
            static PyObject *t_CharStream_readChar(t_CharStream *self);
            static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__column(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data);
            static PyObject *t_CharStream_get__line(t_CharStream *self, void *data);
            static PyGetSetDef t_CharStream__fields_[] = {
              DECLARE_GET_FIELD(t_CharStream, beginColumn),
              DECLARE_GET_FIELD(t_CharStream, beginLine),
              DECLARE_GET_FIELD(t_CharStream, column),
              DECLARE_GET_FIELD(t_CharStream, endColumn),
              DECLARE_GET_FIELD(t_CharStream, endLine),
              DECLARE_GET_FIELD(t_CharStream, line),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_CharStream__methods_[] = {
              DECLARE_METHOD(t_CharStream, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharStream, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_CharStream, BeginToken, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, Done, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, GetImage, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, GetSuffix, METH_O),
              DECLARE_METHOD(t_CharStream, backup, METH_O),
              DECLARE_METHOD(t_CharStream, getBeginColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getBeginLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getEndColumn, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getEndLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, getLine, METH_NOARGS),
              DECLARE_METHOD(t_CharStream, readChar, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(CharStream, t_CharStream, ::java::lang::Object, CharStream, abstract_init, 0, 0, t_CharStream__fields_, 0, 0);

            void t_CharStream::install(PyObject *module)
            {
              installType(&PY_TYPE(CharStream), module, "CharStream", 0);
            }

            void t_CharStream::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "class_", make_descriptor(CharStream::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "wrapfn_", make_descriptor(t_CharStream::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(CharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_CharStream_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, CharStream::initializeClass, 1)))
                return NULL;
              return t_CharStream::wrap_Object(CharStream(((t_CharStream *) arg)->object.this$));
            }
            static PyObject *t_CharStream_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, CharStream::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_CharStream_BeginToken(t_CharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.BeginToken());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_CharStream_Done(t_CharStream *self)
            {
              OBJ_CALL(self->object.Done());
              Py_RETURN_NONE;
            }

            static PyObject *t_CharStream_GetImage(t_CharStream *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.GetImage());
              return j2p(result);
            }

            static PyObject *t_CharStream_GetSuffix(t_CharStream *self, PyObject *arg)
            {
              jint a0;
              JArray< jchar > result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.GetSuffix(a0));
                return result.wrap();
              }

              PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
              return NULL;
            }

            static PyObject *t_CharStream_backup(t_CharStream *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.backup(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "backup", arg);
              return NULL;
            }

            static PyObject *t_CharStream_getBeginColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getBeginLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getBeginLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getEndColumn(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndColumn());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getEndLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getEndLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_getLine(t_CharStream *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getLine());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_CharStream_readChar(t_CharStream *self)
            {
              jchar result;
              OBJ_CALL(result = self->object.readChar());
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            static PyObject *t_CharStream_get__beginColumn(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__beginLine(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getBeginLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__column(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__endColumn(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndColumn());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__endLine(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getEndLine());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_CharStream_get__line(t_CharStream *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getLine());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/DocValuesProducer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/lang/ClassLoader.h"
#include "org/apache/lucene/index/SegmentReadState.h"
#include "org/apache/lucene/index/SegmentWriteState.h"
#include "org/apache/lucene/util/NamedSPILoader$NamedSPI.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesFormat::class$ = NULL;
        jmethodID *DocValuesFormat::mids$ = NULL;
        bool DocValuesFormat::live$ = false;

        jclass DocValuesFormat::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesFormat");

            mids$ = new jmethodID[max_mid];
            mids$[mid_availableDocValuesFormats_03e99967] = env->getStaticMethodID(cls, "availableDocValuesFormats", "()Ljava/util/Set;");
            mids$[mid_fieldsConsumer_025deb44] = env->getMethodID(cls, "fieldsConsumer", "(Lorg/apache/lucene/index/SegmentWriteState;)Lorg/apache/lucene/codecs/DocValuesConsumer;");
            mids$[mid_fieldsProducer_9b0d4e4a] = env->getMethodID(cls, "fieldsProducer", "(Lorg/apache/lucene/index/SegmentReadState;)Lorg/apache/lucene/codecs/DocValuesProducer;");
            mids$[mid_forName_36ef78ba] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_reloadDocValuesFormats_9110048d] = env->getStaticMethodID(cls, "reloadDocValuesFormats", "(Ljava/lang/ClassLoader;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::Set DocValuesFormat::availableDocValuesFormats()
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::util::Set(env->callStaticObjectMethod(cls, mids$[mid_availableDocValuesFormats_03e99967]));
        }

        ::org::apache::lucene::codecs::DocValuesConsumer DocValuesFormat::fieldsConsumer(const ::org::apache::lucene::index::SegmentWriteState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesConsumer(env->callObjectMethod(this$, mids$[mid_fieldsConsumer_025deb44], a0.this$));
        }

        ::org::apache::lucene::codecs::DocValuesProducer DocValuesFormat::fieldsProducer(const ::org::apache::lucene::index::SegmentReadState & a0) const
        {
          return ::org::apache::lucene::codecs::DocValuesProducer(env->callObjectMethod(this$, mids$[mid_fieldsProducer_9b0d4e4a], a0.this$));
        }

        DocValuesFormat DocValuesFormat::forName(const ::java::lang::String & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return DocValuesFormat(env->callStaticObjectMethod(cls, mids$[mid_forName_36ef78ba], a0.this$));
        }

        ::java::lang::String DocValuesFormat::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        void DocValuesFormat::reloadDocValuesFormats(const ::java::lang::ClassLoader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          env->callStaticVoidMethod(cls, mids$[mid_reloadDocValuesFormats_9110048d], a0.this$);
        }

        ::java::lang::String DocValuesFormat::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_availableDocValuesFormats(PyTypeObject *type);
        static PyObject *t_DocValuesFormat_fieldsConsumer(t_DocValuesFormat *self, PyObject *arg);
        static PyObject *t_DocValuesFormat_fieldsProducer(t_DocValuesFormat *self, PyObject *arg);
        static PyObject *t_DocValuesFormat_forName(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_getName(t_DocValuesFormat *self);
        static PyObject *t_DocValuesFormat_reloadDocValuesFormats(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesFormat_toString(t_DocValuesFormat *self, PyObject *args);
        static PyObject *t_DocValuesFormat_get__name(t_DocValuesFormat *self, void *data);
        static PyGetSetDef t_DocValuesFormat__fields_[] = {
          DECLARE_GET_FIELD(t_DocValuesFormat, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_DocValuesFormat__methods_[] = {
          DECLARE_METHOD(t_DocValuesFormat, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, availableDocValuesFormats, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, fieldsConsumer, METH_O),
          DECLARE_METHOD(t_DocValuesFormat, fieldsProducer, METH_O),
          DECLARE_METHOD(t_DocValuesFormat, forName, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, getName, METH_NOARGS),
          DECLARE_METHOD(t_DocValuesFormat, reloadDocValuesFormats, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesFormat, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValuesFormat, t_DocValuesFormat, ::java::lang::Object, DocValuesFormat, abstract_init, 0, 0, t_DocValuesFormat__fields_, 0, 0);

        void t_DocValuesFormat::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesFormat), module, "DocValuesFormat", 0);
        }

        void t_DocValuesFormat::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValuesFormat).tp_dict, "class_", make_descriptor(DocValuesFormat::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValuesFormat).tp_dict, "wrapfn_", make_descriptor(t_DocValuesFormat::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValuesFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesFormat_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesFormat::initializeClass, 1)))
            return NULL;
          return t_DocValuesFormat::wrap_Object(DocValuesFormat(((t_DocValuesFormat *) arg)->object.this$));
        }
        static PyObject *t_DocValuesFormat_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesFormat::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesFormat_availableDocValuesFormats(PyTypeObject *type)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesFormat::availableDocValuesFormats());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_DocValuesFormat_fieldsConsumer(t_DocValuesFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentWriteState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesConsumer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentWriteState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsConsumer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesConsumer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsConsumer", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_fieldsProducer(t_DocValuesFormat *self, PyObject *arg)
        {
          ::org::apache::lucene::index::SegmentReadState a0((jobject) NULL);
          ::org::apache::lucene::codecs::DocValuesProducer result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SegmentReadState::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.fieldsProducer(a0));
            return ::org::apache::lucene::codecs::t_DocValuesProducer::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "fieldsProducer", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_forName(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          DocValuesFormat result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesFormat::forName(a0));
            return t_DocValuesFormat::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "forName", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_getName(t_DocValuesFormat *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_DocValuesFormat_reloadDocValuesFormats(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::ClassLoader a0((jobject) NULL);

          if (!parseArg(arg, "k", ::java::lang::ClassLoader::initializeClass, &a0))
          {
            OBJ_CALL(::org::apache::lucene::codecs::DocValuesFormat::reloadDocValuesFormats(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError(type, "reloadDocValuesFormats", arg);
          return NULL;
        }

        static PyObject *t_DocValuesFormat_toString(t_DocValuesFormat *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(DocValuesFormat), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_DocValuesFormat_get__name(t_DocValuesFormat *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/standard/UAX29URLEmailTokenizer.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *UAX29URLEmailTokenizerFactory::class$ = NULL;
          jmethodID *UAX29URLEmailTokenizerFactory::mids$ = NULL;
          bool UAX29URLEmailTokenizerFactory::live$ = false;

          jclass UAX29URLEmailTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ca873381] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/standard/UAX29URLEmailTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UAX29URLEmailTokenizerFactory::UAX29URLEmailTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer UAX29URLEmailTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer(env->callObjectMethod(this$, mids$[mid_create_ca873381], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_UAX29URLEmailTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UAX29URLEmailTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UAX29URLEmailTokenizerFactory_init_(t_UAX29URLEmailTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UAX29URLEmailTokenizerFactory_create(t_UAX29URLEmailTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_UAX29URLEmailTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UAX29URLEmailTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UAX29URLEmailTokenizerFactory, t_UAX29URLEmailTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, UAX29URLEmailTokenizerFactory, t_UAX29URLEmailTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_UAX29URLEmailTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(UAX29URLEmailTokenizerFactory), module, "UAX29URLEmailTokenizerFactory", 0);
          }

          void t_UAX29URLEmailTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerFactory).tp_dict, "class_", make_descriptor(UAX29URLEmailTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_UAX29URLEmailTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UAX29URLEmailTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UAX29URLEmailTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UAX29URLEmailTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_UAX29URLEmailTokenizerFactory::wrap_Object(UAX29URLEmailTokenizerFactory(((t_UAX29URLEmailTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_UAX29URLEmailTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UAX29URLEmailTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UAX29URLEmailTokenizerFactory_init_(t_UAX29URLEmailTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            UAX29URLEmailTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = UAX29URLEmailTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UAX29URLEmailTokenizerFactory_create(t_UAX29URLEmailTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::standard::UAX29URLEmailTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::standard::t_UAX29URLEmailTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UAX29URLEmailTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/regex/Pattern.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {

          ::java::lang::Class *PatternCaptureGroupTokenFilter::class$ = NULL;
          jmethodID *PatternCaptureGroupTokenFilter::mids$ = NULL;
          bool PatternCaptureGroupTokenFilter::live$ = false;

          jclass PatternCaptureGroupTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pattern/PatternCaptureGroupTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d6bd0c49] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Z[Ljava/util/regex/Pattern;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PatternCaptureGroupTokenFilter::PatternCaptureGroupTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jboolean a1, const JArray< ::java::util::regex::Pattern > & a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d6bd0c49, a0.this$, a1, a2.this$)) {}

          jboolean PatternCaptureGroupTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PatternCaptureGroupTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pattern {
          static PyObject *t_PatternCaptureGroupTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PatternCaptureGroupTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PatternCaptureGroupTokenFilter_init_(t_PatternCaptureGroupTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PatternCaptureGroupTokenFilter_incrementToken(t_PatternCaptureGroupTokenFilter *self, PyObject *args);
          static PyObject *t_PatternCaptureGroupTokenFilter_reset(t_PatternCaptureGroupTokenFilter *self, PyObject *args);

          static PyMethodDef t_PatternCaptureGroupTokenFilter__methods_[] = {
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PatternCaptureGroupTokenFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PatternCaptureGroupTokenFilter, t_PatternCaptureGroupTokenFilter, ::org::apache::lucene::analysis::TokenFilter, PatternCaptureGroupTokenFilter, t_PatternCaptureGroupTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_PatternCaptureGroupTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PatternCaptureGroupTokenFilter), module, "PatternCaptureGroupTokenFilter", 0);
          }

          void t_PatternCaptureGroupTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupTokenFilter).tp_dict, "class_", make_descriptor(PatternCaptureGroupTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PatternCaptureGroupTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PatternCaptureGroupTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PatternCaptureGroupTokenFilter::initializeClass, 1)))
              return NULL;
            return t_PatternCaptureGroupTokenFilter::wrap_Object(PatternCaptureGroupTokenFilter(((t_PatternCaptureGroupTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_PatternCaptureGroupTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PatternCaptureGroupTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PatternCaptureGroupTokenFilter_init_(t_PatternCaptureGroupTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jboolean a1;
            JArray< ::java::util::regex::Pattern > a2((jobject) NULL);
            PatternCaptureGroupTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kZ[k", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::java::util::regex::Pattern::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PatternCaptureGroupTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_incrementToken(t_PatternCaptureGroupTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PatternCaptureGroupTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PatternCaptureGroupTokenFilter_reset(t_PatternCaptureGroupTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PatternCaptureGroupTokenFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/QueryScorer.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/highlight/WeightedSpanTerm.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *QueryScorer::class$ = NULL;
          jmethodID *QueryScorer::mids$ = NULL;
          bool QueryScorer::live$ = false;

          jclass QueryScorer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/QueryScorer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_848b72aa] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/highlight/WeightedSpanTerm;)V");
              mids$[mid_init$_6e301113] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;)V");
              mids$[mid_init$_036dd355] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;)V");
              mids$[mid_init$_19eb1b37] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_init$_2e1f8bd4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;)V");
              mids$[mid_init$_b85926ce] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_getFragmentScore_54c6a176] = env->getMethodID(cls, "getFragmentScore", "()F");
              mids$[mid_getMaxTermWeight_54c6a176] = env->getMethodID(cls, "getMaxTermWeight", "()F");
              mids$[mid_getTokenScore_54c6a176] = env->getMethodID(cls, "getTokenScore", "()F");
              mids$[mid_getWeightedSpanTerm_0ac17355] = env->getMethodID(cls, "getWeightedSpanTerm", "(Ljava/lang/String;)Lorg/apache/lucene/search/highlight/WeightedSpanTerm;");
              mids$[mid_init_a65cd6ab] = env->getMethodID(cls, "init", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_isExpandMultiTermQuery_54c6a16a] = env->getMethodID(cls, "isExpandMultiTermQuery", "()Z");
              mids$[mid_setExpandMultiTermQuery_bb0c767f] = env->getMethodID(cls, "setExpandMultiTermQuery", "(Z)V");
              mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");
              mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f] = env->getMethodID(cls, "setWrapIfNotCachingTokenFilter", "(Z)V");
              mids$[mid_startFragment_0335a78a] = env->getMethodID(cls, "startFragment", "(Lorg/apache/lucene/search/highlight/TextFragment;)V");
              mids$[mid_newTermExtractor_109a36a0] = env->getMethodID(cls, "newTermExtractor", "(Ljava/lang/String;)Lorg/apache/lucene/search/highlight/WeightedSpanTermExtractor;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          QueryScorer::QueryScorer(const JArray< ::org::apache::lucene::search::highlight::WeightedSpanTerm > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_848b72aa, a0.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e301113, a0.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_036dd355, a0.this$, a1.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_19eb1b37, a0.this$, a1.this$, a2.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e1f8bd4, a0.this$, a1.this$, a2.this$)) {}

          QueryScorer::QueryScorer(const ::org::apache::lucene::search::Query & a0, const ::org::apache::lucene::index::IndexReader & a1, const ::java::lang::String & a2, const ::java::lang::String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b85926ce, a0.this$, a1.this$, a2.this$, a3.this$)) {}

          jfloat QueryScorer::getFragmentScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getFragmentScore_54c6a176]);
          }

          jfloat QueryScorer::getMaxTermWeight() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMaxTermWeight_54c6a176]);
          }

          jfloat QueryScorer::getTokenScore() const
          {
            return env->callFloatMethod(this$, mids$[mid_getTokenScore_54c6a176]);
          }

          ::org::apache::lucene::search::highlight::WeightedSpanTerm QueryScorer::getWeightedSpanTerm(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::search::highlight::WeightedSpanTerm(env->callObjectMethod(this$, mids$[mid_getWeightedSpanTerm_0ac17355], a0.this$));
          }

          ::org::apache::lucene::analysis::TokenStream QueryScorer::init(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_init_a65cd6ab], a0.this$));
          }

          jboolean QueryScorer::isExpandMultiTermQuery() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isExpandMultiTermQuery_54c6a16a]);
          }

          void QueryScorer::setExpandMultiTermQuery(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setExpandMultiTermQuery_bb0c767f], a0);
          }

          void QueryScorer::setMaxDocCharsToAnalyze(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c], a0);
          }

          void QueryScorer::setWrapIfNotCachingTokenFilter(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setWrapIfNotCachingTokenFilter_bb0c767f], a0);
          }

          void QueryScorer::startFragment(const ::org::apache::lucene::search::highlight::TextFragment & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_startFragment_0335a78a], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_QueryScorer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_QueryScorer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_QueryScorer_init_(t_QueryScorer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_QueryScorer_getFragmentScore(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getMaxTermWeight(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getTokenScore(t_QueryScorer *self);
          static PyObject *t_QueryScorer_getWeightedSpanTerm(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_init(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_isExpandMultiTermQuery(t_QueryScorer *self);
          static PyObject *t_QueryScorer_setExpandMultiTermQuery(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_setMaxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_setWrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_startFragment(t_QueryScorer *self, PyObject *arg);
          static PyObject *t_QueryScorer_get__expandMultiTermQuery(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__expandMultiTermQuery(t_QueryScorer *self, PyObject *arg, void *data);
          static PyObject *t_QueryScorer_get__fragmentScore(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__maxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg, void *data);
          static PyObject *t_QueryScorer_get__maxTermWeight(t_QueryScorer *self, void *data);
          static PyObject *t_QueryScorer_get__tokenScore(t_QueryScorer *self, void *data);
          static int t_QueryScorer_set__wrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg, void *data);
          static PyGetSetDef t_QueryScorer__fields_[] = {
            DECLARE_GETSET_FIELD(t_QueryScorer, expandMultiTermQuery),
            DECLARE_GET_FIELD(t_QueryScorer, fragmentScore),
            DECLARE_SET_FIELD(t_QueryScorer, maxDocCharsToAnalyze),
            DECLARE_GET_FIELD(t_QueryScorer, maxTermWeight),
            DECLARE_GET_FIELD(t_QueryScorer, tokenScore),
            DECLARE_SET_FIELD(t_QueryScorer, wrapIfNotCachingTokenFilter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_QueryScorer__methods_[] = {
            DECLARE_METHOD(t_QueryScorer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryScorer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_QueryScorer, getFragmentScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getMaxTermWeight, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getTokenScore, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, getWeightedSpanTerm, METH_O),
            DECLARE_METHOD(t_QueryScorer, init, METH_O),
            DECLARE_METHOD(t_QueryScorer, isExpandMultiTermQuery, METH_NOARGS),
            DECLARE_METHOD(t_QueryScorer, setExpandMultiTermQuery, METH_O),
            DECLARE_METHOD(t_QueryScorer, setMaxDocCharsToAnalyze, METH_O),
            DECLARE_METHOD(t_QueryScorer, setWrapIfNotCachingTokenFilter, METH_O),
            DECLARE_METHOD(t_QueryScorer, startFragment, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(QueryScorer, t_QueryScorer, ::java::lang::Object, QueryScorer, t_QueryScorer_init_, 0, 0, t_QueryScorer__fields_, 0, 0);

          void t_QueryScorer::install(PyObject *module)
          {
            installType(&PY_TYPE(QueryScorer), module, "QueryScorer", 0);
          }

          void t_QueryScorer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(QueryScorer).tp_dict, "class_", make_descriptor(QueryScorer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(QueryScorer).tp_dict, "wrapfn_", make_descriptor(t_QueryScorer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(QueryScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_QueryScorer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, QueryScorer::initializeClass, 1)))
              return NULL;
            return t_QueryScorer::wrap_Object(QueryScorer(((t_QueryScorer *) arg)->object.this$));
          }
          static PyObject *t_QueryScorer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, QueryScorer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_QueryScorer_init_(t_QueryScorer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                JArray< ::org::apache::lucene::search::highlight::WeightedSpanTerm > a0((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "[k", ::org::apache::lucene::search::highlight::WeightedSpanTerm::initializeClass, &a0))
                {
                  INT_CALL(object = QueryScorer(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::Query::initializeClass, &a0))
                {
                  INT_CALL(object = QueryScorer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = QueryScorer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kks", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::search::Query a0((jobject) NULL);
                ::org::apache::lucene::index::IndexReader a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String a3((jobject) NULL);
                QueryScorer object((jobject) NULL);

                if (!parseArgs(args, "kkss", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = QueryScorer(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_QueryScorer_getFragmentScore(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getMaxTermWeight(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getTokenScore(t_QueryScorer *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getTokenScore());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_QueryScorer_getWeightedSpanTerm(t_QueryScorer *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::search::highlight::WeightedSpanTerm result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getWeightedSpanTerm(a0));
              return ::org::apache::lucene::search::highlight::t_WeightedSpanTerm::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getWeightedSpanTerm", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_init(t_QueryScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.init(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "init", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_isExpandMultiTermQuery(t_QueryScorer *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isExpandMultiTermQuery());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_QueryScorer_setExpandMultiTermQuery(t_QueryScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setExpandMultiTermQuery(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setExpandMultiTermQuery", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_setMaxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocCharsToAnalyze(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocCharsToAnalyze", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_setWrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setWrapIfNotCachingTokenFilter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setWrapIfNotCachingTokenFilter", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_startFragment(t_QueryScorer *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::TextFragment a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::TextFragment::initializeClass, &a0))
            {
              OBJ_CALL(self->object.startFragment(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "startFragment", arg);
            return NULL;
          }

          static PyObject *t_QueryScorer_get__expandMultiTermQuery(t_QueryScorer *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isExpandMultiTermQuery());
            Py_RETURN_BOOL(value);
          }
          static int t_QueryScorer_set__expandMultiTermQuery(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setExpandMultiTermQuery(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "expandMultiTermQuery", arg);
            return -1;
          }

          static PyObject *t_QueryScorer_get__fragmentScore(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getFragmentScore());
            return PyFloat_FromDouble((double) value);
          }

          static int t_QueryScorer_set__maxDocCharsToAnalyze(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocCharsToAnalyze(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocCharsToAnalyze", arg);
            return -1;
          }

          static PyObject *t_QueryScorer_get__maxTermWeight(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMaxTermWeight());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_QueryScorer_get__tokenScore(t_QueryScorer *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getTokenScore());
            return PyFloat_FromDouble((double) value);
          }

          static int t_QueryScorer_set__wrapIfNotCachingTokenFilter(t_QueryScorer *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setWrapIfNotCachingTokenFilter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "wrapIfNotCachingTokenFilter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/classic/FastCharStream.h"
#include "org/apache/lucene/queryparser/classic/CharStream.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {

          ::java::lang::Class *FastCharStream::class$ = NULL;
          jmethodID *FastCharStream::mids$ = NULL;
          bool FastCharStream::live$ = false;

          jclass FastCharStream::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/classic/FastCharStream");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_BeginToken_54c6a173] = env->getMethodID(cls, "BeginToken", "()C");
              mids$[mid_Done_54c6a166] = env->getMethodID(cls, "Done", "()V");
              mids$[mid_GetImage_14c7b5c5] = env->getMethodID(cls, "GetImage", "()Ljava/lang/String;");
              mids$[mid_GetSuffix_b4292e99] = env->getMethodID(cls, "GetSuffix", "(I)[C");
              mids$[mid_backup_39c7bd3c] = env->getMethodID(cls, "backup", "(I)V");
              mids$[mid_getBeginColumn_54c6a179] = env->getMethodID(cls, "getBeginColumn", "()I");
              mids$[mid_getBeginLine_54c6a179] = env->getMethodID(cls, "getBeginLine", "()I");
              mids$[mid_getColumn_54c6a179] = env->getMethodID(cls, "getColumn", "()I");
              mids$[mid_getEndColumn_54c6a179] = env->getMethodID(cls, "getEndColumn", "()I");
              mids$[mid_getEndLine_54c6a179] = env->getMethodID(cls, "getEndLine", "()I");
              mids$[mid_getLine_54c6a179] = env->getMethodID(cls, "getLine", "()I");
              mids$[mid_readChar_54c6a173] = env->getMethodID(cls, "readChar", "()C");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FastCharStream::FastCharStream(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          jchar FastCharStream::BeginToken() const
          {
            return env->callCharMethod(this$, mids$[mid_BeginToken_54c6a173]);
          }

          void FastCharStream::Done() const
          {
            env->callVoidMethod(this$, mids$[mid_Done_54c6a166]);
          }

          ::java::lang::String FastCharStream::GetImage() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_GetImage_14c7b5c5]));
          }

          JArray< jchar > FastCharStream::GetSuffix(jint a0) const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_GetSuffix_b4292e99], a0));
          }

          void FastCharStream::backup(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_backup_39c7bd3c], a0);
          }

          jint FastCharStream::getBeginColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginColumn_54c6a179]);
          }

          jint FastCharStream::getBeginLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginLine_54c6a179]);
          }

          jint FastCharStream::getColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getColumn_54c6a179]);
          }

          jint FastCharStream::getEndColumn() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndColumn_54c6a179]);
          }

          jint FastCharStream::getEndLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndLine_54c6a179]);
          }

          jint FastCharStream::getLine() const
          {
            return env->callIntMethod(this$, mids$[mid_getLine_54c6a179]);
          }

          jchar FastCharStream::readChar() const
          {
            return env->callCharMethod(this$, mids$[mid_readChar_54c6a173]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace classic {
          static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self);
          static PyObject *t_FastCharStream_Done(t_FastCharStream *self);
          static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self);
          static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg);
          static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg);
          static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_getLine(t_FastCharStream *self);
          static PyObject *t_FastCharStream_readChar(t_FastCharStream *self);
          static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data);
          static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data);
          static PyGetSetDef t_FastCharStream__fields_[] = {
            DECLARE_GET_FIELD(t_FastCharStream, beginColumn),
            DECLARE_GET_FIELD(t_FastCharStream, beginLine),
            DECLARE_GET_FIELD(t_FastCharStream, column),
            DECLARE_GET_FIELD(t_FastCharStream, endColumn),
            DECLARE_GET_FIELD(t_FastCharStream, endLine),
            DECLARE_GET_FIELD(t_FastCharStream, line),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FastCharStream__methods_[] = {
            DECLARE_METHOD(t_FastCharStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastCharStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FastCharStream, BeginToken, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, Done, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, GetImage, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, GetSuffix, METH_O),
            DECLARE_METHOD(t_FastCharStream, backup, METH_O),
            DECLARE_METHOD(t_FastCharStream, getBeginColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getBeginLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getEndColumn, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getEndLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, getLine, METH_NOARGS),
            DECLARE_METHOD(t_FastCharStream, readChar, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FastCharStream, t_FastCharStream, ::java::lang::Object, FastCharStream, t_FastCharStream_init_, 0, 0, t_FastCharStream__fields_, 0, 0);

          void t_FastCharStream::install(PyObject *module)
          {
            installType(&PY_TYPE(FastCharStream), module, "FastCharStream", 0);
          }

          void t_FastCharStream::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "class_", make_descriptor(FastCharStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "wrapfn_", make_descriptor(t_FastCharStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FastCharStream).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FastCharStream_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FastCharStream::initializeClass, 1)))
              return NULL;
            return t_FastCharStream::wrap_Object(FastCharStream(((t_FastCharStream *) arg)->object.this$));
          }
          static PyObject *t_FastCharStream_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FastCharStream::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FastCharStream_init_(t_FastCharStream *self, PyObject *args, PyObject *kwds)
          {
            ::java::io::Reader a0((jobject) NULL);
            FastCharStream object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
            {
              INT_CALL(object = FastCharStream(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FastCharStream_BeginToken(t_FastCharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.BeginToken());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_FastCharStream_Done(t_FastCharStream *self)
          {
            OBJ_CALL(self->object.Done());
            Py_RETURN_NONE;
          }

          static PyObject *t_FastCharStream_GetImage(t_FastCharStream *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.GetImage());
            return j2p(result);
          }

          static PyObject *t_FastCharStream_GetSuffix(t_FastCharStream *self, PyObject *arg)
          {
            jint a0;
            JArray< jchar > result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.GetSuffix(a0));
              return result.wrap();
            }

            PyErr_SetArgsError((PyObject *) self, "GetSuffix", arg);
            return NULL;
          }

          static PyObject *t_FastCharStream_backup(t_FastCharStream *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.backup(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "backup", arg);
            return NULL;
          }

          static PyObject *t_FastCharStream_getBeginColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getBeginLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getEndColumn(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndColumn());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getEndLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_getLine(t_FastCharStream *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLine());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FastCharStream_readChar(t_FastCharStream *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.readChar());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_FastCharStream_get__beginColumn(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__beginLine(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__column(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__endColumn(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndColumn());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__endLine(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndLine());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FastCharStream_get__line(t_FastCharStream *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLine());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/DocValuesConsumer.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/Number.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "org/apache/lucene/index/MergeState.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Iterable.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {

        ::java::lang::Class *DocValuesConsumer::class$ = NULL;
        jmethodID *DocValuesConsumer::mids$ = NULL;
        bool DocValuesConsumer::live$ = false;

        jclass DocValuesConsumer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/DocValuesConsumer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addBinaryField_1dd3fb83] = env->getMethodID(cls, "addBinaryField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;)V");
            mids$[mid_addNumericField_1dd3fb83] = env->getMethodID(cls, "addNumericField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;)V");
            mids$[mid_addSortedField_4e727c10] = env->getMethodID(cls, "addSortedField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;Ljava/lang/Iterable;)V");
            mids$[mid_addSortedNumericField_4e727c10] = env->getMethodID(cls, "addSortedNumericField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;Ljava/lang/Iterable;)V");
            mids$[mid_addSortedSetField_eef27e8b] = env->getMethodID(cls, "addSortedSetField", "(Lorg/apache/lucene/index/FieldInfo;Ljava/lang/Iterable;Ljava/lang/Iterable;Ljava/lang/Iterable;)V");
            mids$[mid_isSingleValued_d1cac209] = env->getStaticMethodID(cls, "isSingleValued", "(Ljava/lang/Iterable;)Z");
            mids$[mid_mergeBinaryField_1705fbe6] = env->getMethodID(cls, "mergeBinaryField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;Ljava/util/List;)V");
            mids$[mid_mergeNumericField_1705fbe6] = env->getMethodID(cls, "mergeNumericField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;Ljava/util/List;)V");
            mids$[mid_mergeSortedField_eba53503] = env->getMethodID(cls, "mergeSortedField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;)V");
            mids$[mid_mergeSortedNumericField_eba53503] = env->getMethodID(cls, "mergeSortedNumericField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;)V");
            mids$[mid_mergeSortedSetField_eba53503] = env->getMethodID(cls, "mergeSortedSetField", "(Lorg/apache/lucene/index/FieldInfo;Lorg/apache/lucene/index/MergeState;Ljava/util/List;)V");
            mids$[mid_singletonView_0e65223a] = env->getStaticMethodID(cls, "singletonView", "(Ljava/lang/Iterable;Ljava/lang/Iterable;Ljava/lang/Number;)Ljava/lang/Iterable;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void DocValuesConsumer::addBinaryField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addBinaryField_1dd3fb83], a0.this$, a1.this$);
        }

        void DocValuesConsumer::addNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_addNumericField_1dd3fb83], a0.this$, a1.this$);
        }

        void DocValuesConsumer::addSortedField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1, const ::java::lang::Iterable & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedField_4e727c10], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::addSortedNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1, const ::java::lang::Iterable & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedNumericField_4e727c10], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::addSortedSetField(const ::org::apache::lucene::index::FieldInfo & a0, const ::java::lang::Iterable & a1, const ::java::lang::Iterable & a2, const ::java::lang::Iterable & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_addSortedSetField_eef27e8b], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        jboolean DocValuesConsumer::isSingleValued(const ::java::lang::Iterable & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticBooleanMethod(cls, mids$[mid_isSingleValued_d1cac209], a0.this$);
        }

        void DocValuesConsumer::mergeBinaryField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2, const ::java::util::List & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeBinaryField_1705fbe6], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        void DocValuesConsumer::mergeNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2, const ::java::util::List & a3) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeNumericField_1705fbe6], a0.this$, a1.this$, a2.this$, a3.this$);
        }

        void DocValuesConsumer::mergeSortedField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedField_eba53503], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::mergeSortedNumericField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedNumericField_eba53503], a0.this$, a1.this$, a2.this$);
        }

        void DocValuesConsumer::mergeSortedSetField(const ::org::apache::lucene::index::FieldInfo & a0, const ::org::apache::lucene::index::MergeState & a1, const ::java::util::List & a2) const
        {
          env->callVoidMethod(this$, mids$[mid_mergeSortedSetField_eba53503], a0.this$, a1.this$, a2.this$);
        }

        ::java::lang::Iterable DocValuesConsumer::singletonView(const ::java::lang::Iterable & a0, const ::java::lang::Iterable & a1, const ::java::lang::Number & a2)
        {
          jclass cls = env->getClass(initializeClass);
          return ::java::lang::Iterable(env->callStaticObjectMethod(cls, mids$[mid_singletonView_0e65223a], a0.this$, a1.this$, a2.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        static PyObject *t_DocValuesConsumer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_addBinaryField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_addSortedSetField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_isSingleValued(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValuesConsumer_mergeBinaryField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedNumericField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_mergeSortedSetField(t_DocValuesConsumer *self, PyObject *args);
        static PyObject *t_DocValuesConsumer_singletonView(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_DocValuesConsumer__methods_[] = {
          DECLARE_METHOD(t_DocValuesConsumer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, addBinaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, addSortedSetField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, isSingleValued, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeBinaryField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedNumericField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, mergeSortedSetField, METH_VARARGS),
          DECLARE_METHOD(t_DocValuesConsumer, singletonView, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValuesConsumer, t_DocValuesConsumer, ::java::lang::Object, DocValuesConsumer, abstract_init, 0, 0, 0, 0, 0);

        void t_DocValuesConsumer::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValuesConsumer), module, "DocValuesConsumer", 0);
        }

        void t_DocValuesConsumer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValuesConsumer).tp_dict, "class_", make_descriptor(DocValuesConsumer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValuesConsumer).tp_dict, "wrapfn_", make_descriptor(t_DocValuesConsumer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValuesConsumer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValuesConsumer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValuesConsumer::initializeClass, 1)))
            return NULL;
          return t_DocValuesConsumer::wrap_Object(DocValuesConsumer(((t_DocValuesConsumer *) arg)->object.this$));
        }
        static PyObject *t_DocValuesConsumer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValuesConsumer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValuesConsumer_addBinaryField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addBinaryField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addBinaryField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;

          if (!parseArgs(args, "kK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addNumericField(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Iterable a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2, &p2, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addSortedField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Iterable a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2, &p2, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addSortedNumericField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_addSortedSetField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Iterable a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::lang::Iterable a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "kKKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &a0, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2, &p2, ::java::lang::t_Iterable::parameters_, &a3, &p3, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(self->object.addSortedSetField(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addSortedSetField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_isSingleValued(PyTypeObject *type, PyObject *arg)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;
          jboolean result;

          if (!parseArg(arg, "K", ::java::lang::Iterable::initializeClass, &a0, &p0, ::java::lang::t_Iterable::parameters_))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesConsumer::isSingleValued(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError(type, "isSingleValued", arg);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeBinaryField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::util::List a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "kkKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3, &p3, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeBinaryField(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeBinaryField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;
          ::java::util::List a3((jobject) NULL);
          PyTypeObject **p3;

          if (!parseArgs(args, "kkKK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_, &a3, &p3, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeNumericField(a0, a1, a2, a3));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kkK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeSortedField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedNumericField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kkK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeSortedNumericField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedNumericField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_mergeSortedSetField(t_DocValuesConsumer *self, PyObject *args)
        {
          ::org::apache::lucene::index::FieldInfo a0((jobject) NULL);
          ::org::apache::lucene::index::MergeState a1((jobject) NULL);
          ::java::util::List a2((jobject) NULL);
          PyTypeObject **p2;

          if (!parseArgs(args, "kkK", ::org::apache::lucene::index::FieldInfo::initializeClass, ::org::apache::lucene::index::MergeState::initializeClass, ::java::util::List::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_List::parameters_))
          {
            OBJ_CALL(self->object.mergeSortedSetField(a0, a1, a2));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "mergeSortedSetField", args);
          return NULL;
        }

        static PyObject *t_DocValuesConsumer_singletonView(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::Iterable a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Iterable a1((jobject) NULL);
          PyTypeObject **p1;
          ::java::lang::Number a2((jobject) NULL);
          ::java::lang::Iterable result((jobject) NULL);

          if (!parseArgs(args, "KKO", ::java::lang::Iterable::initializeClass, ::java::lang::Iterable::initializeClass, &::java::lang::PY_TYPE(Number), &a0, &p0, ::java::lang::t_Iterable::parameters_, &a1, &p1, ::java::lang::t_Iterable::parameters_, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::codecs::DocValuesConsumer::singletonView(a0, a1, a2));
            return ::java::lang::t_Iterable::wrap_Object(result, &::java::lang::PY_TYPE(Number));
          }

          PyErr_SetArgsError(type, "singletonView", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/ByteDocValuesField.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *ByteDocValuesField::class$ = NULL;
        jmethodID *ByteDocValuesField::mids$ = NULL;
        bool ByteDocValuesField::live$ = false;

        jclass ByteDocValuesField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/ByteDocValuesField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_a032b77d] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;B)V");
            mids$[mid_setByteValue_b2271687] = env->getMethodID(cls, "setByteValue", "(B)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ByteDocValuesField::ByteDocValuesField(const ::java::lang::String & a0, jbyte a1) : ::org::apache::lucene::document::NumericDocValuesField(env->newObject(initializeClass, &mids$, mid_init$_a032b77d, a0.this$, a1)) {}

        void ByteDocValuesField::setByteValue(jbyte a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setByteValue_b2271687], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_ByteDocValuesField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ByteDocValuesField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ByteDocValuesField_init_(t_ByteDocValuesField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ByteDocValuesField_setByteValue(t_ByteDocValuesField *self, PyObject *args);
        static int t_ByteDocValuesField_set__byteValue(t_ByteDocValuesField *self, PyObject *arg, void *data);
        static PyGetSetDef t_ByteDocValuesField__fields_[] = {
          DECLARE_SET_FIELD(t_ByteDocValuesField, byteValue),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ByteDocValuesField__methods_[] = {
          DECLARE_METHOD(t_ByteDocValuesField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteDocValuesField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ByteDocValuesField, setByteValue, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ByteDocValuesField, t_ByteDocValuesField, ::org::apache::lucene::document::NumericDocValuesField, ByteDocValuesField, t_ByteDocValuesField_init_, 0, 0, t_ByteDocValuesField__fields_, 0, 0);

        void t_ByteDocValuesField::install(PyObject *module)
        {
          installType(&PY_TYPE(ByteDocValuesField), module, "ByteDocValuesField", 0);
        }

        void t_ByteDocValuesField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ByteDocValuesField).tp_dict, "class_", make_descriptor(ByteDocValuesField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ByteDocValuesField).tp_dict, "wrapfn_", make_descriptor(t_ByteDocValuesField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ByteDocValuesField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ByteDocValuesField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ByteDocValuesField::initializeClass, 1)))
            return NULL;
          return t_ByteDocValuesField::wrap_Object(ByteDocValuesField(((t_ByteDocValuesField *) arg)->object.this$));
        }
        static PyObject *t_ByteDocValuesField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ByteDocValuesField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ByteDocValuesField_init_(t_ByteDocValuesField *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          jbyte a1;
          ByteDocValuesField object((jobject) NULL);

          if (!parseArgs(args, "sB", &a0, &a1))
          {
            INT_CALL(object = ByteDocValuesField(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_ByteDocValuesField_setByteValue(t_ByteDocValuesField *self, PyObject *args)
        {
          jbyte a0;

          if (!parseArgs(args, "B", &a0))
          {
            OBJ_CALL(self->object.setByteValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(ByteDocValuesField), (PyObject *) self, "setByteValue", args, 2);
        }

        static int t_ByteDocValuesField_set__byteValue(t_ByteDocValuesField *self, PyObject *arg, void *data)
        {
          {
            jbyte value;
            if (!parseArg(arg, "B", &value))
            {
              INT_CALL(self->object.setByteValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "byteValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spans/SpanNearQuery.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/Term.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/spans/Spans.h"
#include "org/apache/lucene/index/TermContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *SpanNearQuery::class$ = NULL;
          jmethodID *SpanNearQuery::mids$ = NULL;
          bool SpanNearQuery::live$ = false;

          jclass SpanNearQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spans/SpanNearQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4e7e9f44] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZ)V");
              mids$[mid_init$_ff909895] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/search/spans/SpanQuery;IZZ)V");
              mids$[mid_clone_7013cfcc] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/search/spans/SpanNearQuery;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_extractTerms_fb4f2b26] = env->getMethodID(cls, "extractTerms", "(Ljava/util/Set;)V");
              mids$[mid_getClauses_19569402] = env->getMethodID(cls, "getClauses", "()[Lorg/apache/lucene/search/spans/SpanQuery;");
              mids$[mid_getField_14c7b5c5] = env->getMethodID(cls, "getField", "()Ljava/lang/String;");
              mids$[mid_getSlop_54c6a179] = env->getMethodID(cls, "getSlop", "()I");
              mids$[mid_getSpans_f003cb44] = env->getMethodID(cls, "getSpans", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;Ljava/util/Map;)Lorg/apache/lucene/search/spans/Spans;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isInOrder_54c6a16a] = env->getMethodID(cls, "isInOrder", "()Z");
              mids$[mid_rewrite_7edcaa43] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;)Lorg/apache/lucene/search/Query;");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SpanNearQuery::SpanNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_4e7e9f44, a0.this$, a1, a2)) {}

          SpanNearQuery::SpanNearQuery(const JArray< ::org::apache::lucene::search::spans::SpanQuery > & a0, jint a1, jboolean a2, jboolean a3) : ::org::apache::lucene::search::spans::SpanQuery(env->newObject(initializeClass, &mids$, mid_init$_ff909895, a0.this$, a1, a2, a3)) {}

          SpanNearQuery SpanNearQuery::clone() const
          {
            return SpanNearQuery(env->callObjectMethod(this$, mids$[mid_clone_7013cfcc]));
          }

          jboolean SpanNearQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          void SpanNearQuery::extractTerms(const ::java::util::Set & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_extractTerms_fb4f2b26], a0.this$);
          }

          JArray< ::org::apache::lucene::search::spans::SpanQuery > SpanNearQuery::getClauses() const
          {
            return JArray< ::org::apache::lucene::search::spans::SpanQuery >(env->callObjectMethod(this$, mids$[mid_getClauses_19569402]));
          }

          ::java::lang::String SpanNearQuery::getField() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getField_14c7b5c5]));
          }

          jint SpanNearQuery::getSlop() const
          {
            return env->callIntMethod(this$, mids$[mid_getSlop_54c6a179]);
          }

          ::org::apache::lucene::search::spans::Spans SpanNearQuery::getSpans(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1, const ::java::util::Map & a2) const
          {
            return ::org::apache::lucene::search::spans::Spans(env->callObjectMethod(this$, mids$[mid_getSpans_f003cb44], a0.this$, a1.this$, a2.this$));
          }

          jint SpanNearQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean SpanNearQuery::isInOrder() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isInOrder_54c6a16a]);
          }

          ::org::apache::lucene::search::Query SpanNearQuery::rewrite(const ::org::apache::lucene::index::IndexReader & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_7edcaa43], a0.this$));
          }

          ::java::lang::String SpanNearQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spans {
          static PyObject *t_SpanNearQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SpanNearQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SpanNearQuery_init_(t_SpanNearQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SpanNearQuery_clone(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_equals(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_extractTerms(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_getClauses(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_getField(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_getSlop(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_getSpans(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_hashCode(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_isInOrder(t_SpanNearQuery *self);
          static PyObject *t_SpanNearQuery_rewrite(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_toString(t_SpanNearQuery *self, PyObject *args);
          static PyObject *t_SpanNearQuery_get__clauses(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__field(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__inOrder(t_SpanNearQuery *self, void *data);
          static PyObject *t_SpanNearQuery_get__slop(t_SpanNearQuery *self, void *data);
          static PyGetSetDef t_SpanNearQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SpanNearQuery, clauses),
            DECLARE_GET_FIELD(t_SpanNearQuery, field),
            DECLARE_GET_FIELD(t_SpanNearQuery, inOrder),
            DECLARE_GET_FIELD(t_SpanNearQuery, slop),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SpanNearQuery__methods_[] = {
            DECLARE_METHOD(t_SpanNearQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SpanNearQuery, clone, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, extractTerms, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, getClauses, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, getField, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, getSlop, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, getSpans, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, isInOrder, METH_NOARGS),
            DECLARE_METHOD(t_SpanNearQuery, rewrite, METH_VARARGS),
            DECLARE_METHOD(t_SpanNearQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SpanNearQuery, t_SpanNearQuery, ::org::apache::lucene::search::spans::SpanQuery, SpanNearQuery, t_SpanNearQuery_init_, 0, 0, t_SpanNearQuery__fields_, 0, 0);

          void t_SpanNearQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SpanNearQuery), module, "SpanNearQuery", 0);
          }

          void t_SpanNearQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SpanNearQuery).tp_dict, "class_", make_descriptor(SpanNearQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SpanNearQuery).tp_dict, "wrapfn_", make_descriptor(t_SpanNearQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SpanNearQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SpanNearQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SpanNearQuery::initializeClass, 1)))
              return NULL;
            return t_SpanNearQuery::wrap_Object(SpanNearQuery(((t_SpanNearQuery *) arg)->object.this$));
          }
          static PyObject *t_SpanNearQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SpanNearQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SpanNearQuery_init_(t_SpanNearQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                SpanNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZ", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SpanNearQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                JArray< ::org::apache::lucene::search::spans::SpanQuery > a0((jobject) NULL);
                jint a1;
                jboolean a2;
                jboolean a3;
                SpanNearQuery object((jobject) NULL);

                if (!parseArgs(args, "[kIZZ", ::org::apache::lucene::search::spans::SpanQuery::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SpanNearQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SpanNearQuery_clone(t_SpanNearQuery *self, PyObject *args)
          {
            SpanNearQuery result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_SpanNearQuery::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_SpanNearQuery_equals(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SpanNearQuery_extractTerms(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::util::Set a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArgs(args, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
            {
              OBJ_CALL(self->object.extractTerms(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "extractTerms", args, 2);
          }

          static PyObject *t_SpanNearQuery_getClauses(t_SpanNearQuery *self)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > result((jobject) NULL);
            OBJ_CALL(result = self->object.getClauses());
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanNearQuery_getField(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getField());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "getField", args, 2);
          }

          static PyObject *t_SpanNearQuery_getSlop(t_SpanNearQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSlop());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SpanNearQuery_getSpans(t_SpanNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
            ::org::apache::lucene::util::Bits a1((jobject) NULL);
            ::java::util::Map a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::search::spans::Spans result((jobject) NULL);

            if (!parseArgs(args, "kkK", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = self->object.getSpans(a0, a1, a2));
              return ::org::apache::lucene::search::spans::t_Spans::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "getSpans", args, 2);
          }

          static PyObject *t_SpanNearQuery_hashCode(t_SpanNearQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SpanNearQuery_isInOrder(t_SpanNearQuery *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isInOrder());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SpanNearQuery_rewrite(t_SpanNearQuery *self, PyObject *args)
          {
            ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexReader::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.rewrite(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "rewrite", args, 2);
          }

          static PyObject *t_SpanNearQuery_toString(t_SpanNearQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SpanNearQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SpanNearQuery_get__clauses(t_SpanNearQuery *self, void *data)
          {
            JArray< ::org::apache::lucene::search::spans::SpanQuery > value((jobject) NULL);
            OBJ_CALL(value = self->object.getClauses());
            return JArray<jobject>(value.this$).wrap(::org::apache::lucene::search::spans::t_SpanQuery::wrap_jobject);
          }

          static PyObject *t_SpanNearQuery_get__field(t_SpanNearQuery *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getField());
            return j2p(value);
          }

          static PyObject *t_SpanNearQuery_get__inOrder(t_SpanNearQuery *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isInOrder());
            Py_RETURN_BOOL(value);
          }

          static PyObject *t_SpanNearQuery_get__slop(t_SpanNearQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSlop());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Reader.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Readable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *Reader::class$ = NULL;
    jmethodID *Reader::mids$ = NULL;
    bool Reader::live$ = false;

    jclass Reader::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/Reader");

        mids$ = new jmethodID[max_mid];
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_700e23c9] = env->getMethodID(cls, "read", "([C)I");
        mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
        mids$[mid_ready_54c6a16a] = env->getMethodID(cls, "ready", "()Z");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void Reader::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void Reader::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean Reader::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint Reader::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint Reader::read(const JArray< jchar > & a0) const
    {
      return env->callIntMethod(this$, mids$[mid_read_700e23c9], a0.this$);
    }

    jint Reader::read(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
    }

    jboolean Reader::ready() const
    {
      return env->callBooleanMethod(this$, mids$[mid_ready_54c6a16a]);
    }

    void Reader::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong Reader::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_Reader_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Reader_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Reader_close(t_Reader *self);
    static PyObject *t_Reader_mark(t_Reader *self, PyObject *arg);
    static PyObject *t_Reader_markSupported(t_Reader *self);
    static PyObject *t_Reader_read(t_Reader *self, PyObject *args);
    static PyObject *t_Reader_ready(t_Reader *self);
    static PyObject *t_Reader_reset(t_Reader *self);
    static PyObject *t_Reader_skip(t_Reader *self, PyObject *arg);

    static PyMethodDef t_Reader__methods_[] = {
      DECLARE_METHOD(t_Reader, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Reader, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Reader, close, METH_NOARGS),
      DECLARE_METHOD(t_Reader, mark, METH_O),
      DECLARE_METHOD(t_Reader, markSupported, METH_NOARGS),
      DECLARE_METHOD(t_Reader, read, METH_VARARGS),
      DECLARE_METHOD(t_Reader, ready, METH_NOARGS),
      DECLARE_METHOD(t_Reader, reset, METH_NOARGS),
      DECLARE_METHOD(t_Reader, skip, METH_O),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Reader, t_Reader, ::java::lang::Object, Reader, abstract_init, 0, 0, 0, 0, 0);

    void t_Reader::install(PyObject *module)
    {
      installType(&PY_TYPE(Reader), module, "Reader", 0);
    }

    void t_Reader::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "class_", make_descriptor(Reader::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "wrapfn_", make_descriptor(t_Reader::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Reader_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Reader::initializeClass, 1)))
        return NULL;
      return t_Reader::wrap_Object(Reader(((t_Reader *) arg)->object.this$));
    }
    static PyObject *t_Reader_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Reader::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Reader_close(t_Reader *self)
    {
      OBJ_CALL(self->object.close());
      Py_RETURN_NONE;
    }

    static PyObject *t_Reader_mark(t_Reader *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "mark", arg);
      return NULL;
    }

    static PyObject *t_Reader_markSupported(t_Reader *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.markSupported());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Reader_read(t_Reader *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 1:
        {
          JArray< jchar > a0((jobject) NULL);
          jint result;

          if (!parseArgs(args, "[C", &a0))
          {
            OBJ_CALL(result = self->object.read(a0));
            return PyInt_FromLong((long) result);
          }
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      PyErr_SetArgsError((PyObject *) self, "read", args);
      return NULL;
    }

    static PyObject *t_Reader_ready(t_Reader *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.ready());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Reader_reset(t_Reader *self)
    {
      OBJ_CALL(self->object.reset());
      Py_RETURN_NONE;
    }

    static PyObject *t_Reader_skip(t_Reader *self, PyObject *arg)
    {
      jlong a0;
      jlong result;

      if (!parseArg(arg, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      PyErr_SetArgsError((PyObject *) self, "skip", arg);
      return NULL;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *RangeFilterBuilder::class$ = NULL;
            jmethodID *RangeFilterBuilder::mids$ = NULL;
            bool RangeFilterBuilder::live$ = false;

            jclass RangeFilterBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/RangeFilterBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            RangeFilterBuilder::RangeFilterBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_RangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_RangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_RangeFilterBuilder_init_(t_RangeFilterBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_RangeFilterBuilder__methods_[] = {
              DECLARE_METHOD(t_RangeFilterBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_RangeFilterBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(RangeFilterBuilder, t_RangeFilterBuilder, ::java::lang::Object, RangeFilterBuilder, t_RangeFilterBuilder_init_, 0, 0, 0, 0, 0);

            void t_RangeFilterBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(RangeFilterBuilder), module, "RangeFilterBuilder", 0);
            }

            void t_RangeFilterBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(RangeFilterBuilder).tp_dict, "class_", make_descriptor(RangeFilterBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(RangeFilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_RangeFilterBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(RangeFilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_RangeFilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, RangeFilterBuilder::initializeClass, 1)))
                return NULL;
              return t_RangeFilterBuilder::wrap_Object(RangeFilterBuilder(((t_RangeFilterBuilder *) arg)->object.this$));
            }
            static PyObject *t_RangeFilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, RangeFilterBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_RangeFilterBuilder_init_(t_RangeFilterBuilder *self, PyObject *args, PyObject *kwds)
            {
              RangeFilterBuilder object((jobject) NULL);

              INT_CALL(object = RangeFilterBuilder());
              self->object = object;

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/util/StringUtils.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {

              ::java::lang::Class *StringUtils::class$ = NULL;
              jmethodID *StringUtils::mids$ = NULL;
              bool StringUtils::live$ = false;

              jclass StringUtils::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/util/StringUtils");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_toString_c9db4eed] = env->getStaticMethodID(cls, "toString", "(Ljava/lang/Object;)Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StringUtils::StringUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::java::lang::String StringUtils::toString(const ::java::lang::Object & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_c9db4eed], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace util {
              static PyObject *t_StringUtils_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StringUtils_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StringUtils_init_(t_StringUtils *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StringUtils_toString(PyTypeObject *type, PyObject *args);

              static PyMethodDef t_StringUtils__methods_[] = {
                DECLARE_METHOD(t_StringUtils, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StringUtils, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StringUtils, toString, METH_VARARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StringUtils, t_StringUtils, ::java::lang::Object, StringUtils, t_StringUtils_init_, 0, 0, 0, 0, 0);

              void t_StringUtils::install(PyObject *module)
              {
                installType(&PY_TYPE(StringUtils), module, "StringUtils", 0);
              }

              void t_StringUtils::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StringUtils).tp_dict, "class_", make_descriptor(StringUtils::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StringUtils).tp_dict, "wrapfn_", make_descriptor(t_StringUtils::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StringUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StringUtils_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StringUtils::initializeClass, 1)))
                  return NULL;
                return t_StringUtils::wrap_Object(StringUtils(((t_StringUtils *) arg)->object.this$));
              }
              static PyObject *t_StringUtils_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StringUtils::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StringUtils_init_(t_StringUtils *self, PyObject *args, PyObject *kwds)
              {
                StringUtils object((jobject) NULL);

                INT_CALL(object = StringUtils());
                self->object = object;

                return 0;
              }

              static PyObject *t_StringUtils_toString(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::Object a0((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::util::StringUtils::toString(a0));
                  return j2p(result);
                }

                return callSuper(type, "toString", args, 2);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/spans/PythonSpans.h"
#include "java/lang/Throwable.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace spans {

          ::java::lang::Class *PythonSpans::class$ = NULL;
          jmethodID *PythonSpans::mids$ = NULL;
          bool PythonSpans::live$ = false;

          jclass PythonSpans::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/spans/PythonSpans");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_cost_54c6a17a] = env->getMethodID(cls, "cost", "()J");
              mids$[mid_doc_54c6a179] = env->getMethodID(cls, "doc", "()I");
              mids$[mid_end_54c6a179] = env->getMethodID(cls, "end", "()I");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_getPayload_2d2d7de4] = env->getMethodID(cls, "getPayload", "()Ljava/util/Collection;");
              mids$[mid_isPayloadAvailable_54c6a16a] = env->getMethodID(cls, "isPayloadAvailable", "()Z");
              mids$[mid_next_54c6a16a] = env->getMethodID(cls, "next", "()Z");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_skipTo_39c7bd30] = env->getMethodID(cls, "skipTo", "(I)Z");
              mids$[mid_start_54c6a179] = env->getMethodID(cls, "start", "()I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonSpans::PythonSpans() : ::org::apache::lucene::search::spans::Spans(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PythonSpans::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jlong PythonSpans::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonSpans::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace spans {
          static PyObject *t_PythonSpans_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonSpans_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonSpans_init_(t_PythonSpans *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonSpans_finalize(t_PythonSpans *self);
          static PyObject *t_PythonSpans_pythonExtension(t_PythonSpans *self, PyObject *args);
          static jlong JNICALL t_PythonSpans_cost0(JNIEnv *jenv, jobject jobj);
          static jint JNICALL t_PythonSpans_doc1(JNIEnv *jenv, jobject jobj);
          static jint JNICALL t_PythonSpans_end2(JNIEnv *jenv, jobject jobj);
          static jobject JNICALL t_PythonSpans_getPayload3(JNIEnv *jenv, jobject jobj);
          static jboolean JNICALL t_PythonSpans_isPayloadAvailable4(JNIEnv *jenv, jobject jobj);
          static jboolean JNICALL t_PythonSpans_next5(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonSpans_pythonDecRef6(JNIEnv *jenv, jobject jobj);
          static jboolean JNICALL t_PythonSpans_skipTo7(JNIEnv *jenv, jobject jobj, jint a0);
          static jint JNICALL t_PythonSpans_start8(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonSpans_get__self(t_PythonSpans *self, void *data);
          static PyGetSetDef t_PythonSpans__fields_[] = {
            DECLARE_GET_FIELD(t_PythonSpans, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonSpans__methods_[] = {
            DECLARE_METHOD(t_PythonSpans, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonSpans, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonSpans, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonSpans, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonSpans, t_PythonSpans, ::org::apache::lucene::search::spans::Spans, PythonSpans, t_PythonSpans_init_, 0, 0, t_PythonSpans__fields_, 0, 0);

          void t_PythonSpans::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonSpans), module, "PythonSpans", 1);
          }

          void t_PythonSpans::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonSpans).tp_dict, "class_", make_descriptor(PythonSpans::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonSpans).tp_dict, "wrapfn_", make_descriptor(t_PythonSpans::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonSpans).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonSpans::initializeClass);
            JNINativeMethod methods[] = {
              { "cost", "()J", (void *) t_PythonSpans_cost0 },
              { "doc", "()I", (void *) t_PythonSpans_doc1 },
              { "end", "()I", (void *) t_PythonSpans_end2 },
              { "getPayload", "()Ljava/util/Collection;", (void *) t_PythonSpans_getPayload3 },
              { "isPayloadAvailable", "()Z", (void *) t_PythonSpans_isPayloadAvailable4 },
              { "next", "()Z", (void *) t_PythonSpans_next5 },
              { "pythonDecRef", "()V", (void *) t_PythonSpans_pythonDecRef6 },
              { "skipTo", "(I)Z", (void *) t_PythonSpans_skipTo7 },
              { "start", "()I", (void *) t_PythonSpans_start8 },
            };
            env->registerNatives(cls, methods, 9);
          }

          static PyObject *t_PythonSpans_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonSpans::initializeClass, 1)))
              return NULL;
            return t_PythonSpans::wrap_Object(PythonSpans(((t_PythonSpans *) arg)->object.this$));
          }
          static PyObject *t_PythonSpans_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonSpans::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonSpans_init_(t_PythonSpans *self, PyObject *args, PyObject *kwds)
          {
            PythonSpans object((jobject) NULL);

            INT_CALL(object = PythonSpans());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonSpans_finalize(t_PythonSpans *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonSpans_pythonExtension(t_PythonSpans *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jlong JNICALL t_PythonSpans_cost0(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jlong value;
            PyObject *result = PyObject_CallMethod(obj, "cost", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "J", &value))
            {
              throwTypeError("cost", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jlong) 0;
          }

          static jint JNICALL t_PythonSpans_doc1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jint value;
            PyObject *result = PyObject_CallMethod(obj, "doc", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "I", &value))
            {
              throwTypeError("doc", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jint) 0;
          }

          static jint JNICALL t_PythonSpans_end2(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jint value;
            PyObject *result = PyObject_CallMethod(obj, "end", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "I", &value))
            {
              throwTypeError("end", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jint) 0;
          }

          static jobject JNICALL t_PythonSpans_getPayload3(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::java::util::Collection value((jobject) NULL);
            PyObject *result = PyObject_CallMethod(obj, "getPayload", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "k", ::java::util::Collection::initializeClass, &value))
            {
              throwTypeError("getPayload", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static jboolean JNICALL t_PythonSpans_isPayloadAvailable4(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "isPayloadAvailable", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("isPayloadAvailable", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static jboolean JNICALL t_PythonSpans_next5(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "next", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("next", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static void JNICALL t_PythonSpans_pythonDecRef6(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static jboolean JNICALL t_PythonSpans_skipTo7(JNIEnv *jenv, jobject jobj, jint a0)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "skipTo", "i", (int) a0);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("skipTo", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static jint JNICALL t_PythonSpans_start8(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonSpans::mids$[PythonSpans::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jint value;
            PyObject *result = PyObject_CallMethod(obj, "start", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "I", &value))
            {
              throwTypeError("start", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jint) 0;
          }

          static PyObject *t_PythonSpans_get__self(t_PythonSpans *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap$Builder.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/CharsRef.h"
#include "org/apache/lucene/analysis/synonym/SynonymMap.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {

          ::java::lang::Class *SynonymMap$Builder::class$ = NULL;
          jmethodID *SynonymMap$Builder::mids$ = NULL;
          bool SynonymMap$Builder::live$ = false;

          jclass SynonymMap$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/synonym/SynonymMap$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
              mids$[mid_add_2c2b250f] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/util/CharsRef;Lorg/apache/lucene/util/CharsRef;Z)V");
              mids$[mid_build_6def3d42] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/synonym/SynonymMap;");
              mids$[mid_join_215e6a35] = env->getStaticMethodID(cls, "join", "([Ljava/lang/String;Lorg/apache/lucene/util/CharsRef;)Lorg/apache/lucene/util/CharsRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SynonymMap$Builder::SynonymMap$Builder(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

          void SynonymMap$Builder::add(const ::org::apache::lucene::util::CharsRef & a0, const ::org::apache::lucene::util::CharsRef & a1, jboolean a2) const
          {
            env->callVoidMethod(this$, mids$[mid_add_2c2b250f], a0.this$, a1.this$, a2);
          }

          ::org::apache::lucene::analysis::synonym::SynonymMap SynonymMap$Builder::build() const
          {
            return ::org::apache::lucene::analysis::synonym::SynonymMap(env->callObjectMethod(this$, mids$[mid_build_6def3d42]));
          }

          ::org::apache::lucene::util::CharsRef SynonymMap$Builder::join(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::util::CharsRef & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::CharsRef(env->callStaticObjectMethod(cls, mids$[mid_join_215e6a35], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace synonym {
          static PyObject *t_SynonymMap$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SynonymMap$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SynonymMap$Builder_init_(t_SynonymMap$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SynonymMap$Builder_add(t_SynonymMap$Builder *self, PyObject *args);
          static PyObject *t_SynonymMap$Builder_build(t_SynonymMap$Builder *self);
          static PyObject *t_SynonymMap$Builder_join(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_SynonymMap$Builder__methods_[] = {
            DECLARE_METHOD(t_SynonymMap$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SynonymMap$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_SynonymMap$Builder, build, METH_NOARGS),
            DECLARE_METHOD(t_SynonymMap$Builder, join, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SynonymMap$Builder, t_SynonymMap$Builder, ::java::lang::Object, SynonymMap$Builder, t_SynonymMap$Builder_init_, 0, 0, 0, 0, 0);

          void t_SynonymMap$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(SynonymMap$Builder), module, "SynonymMap$Builder", 0);
          }

          void t_SynonymMap$Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SynonymMap$Builder).tp_dict, "class_", make_descriptor(SynonymMap$Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Builder).tp_dict, "wrapfn_", make_descriptor(t_SynonymMap$Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SynonymMap$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SynonymMap$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SynonymMap$Builder::initializeClass, 1)))
              return NULL;
            return t_SynonymMap$Builder::wrap_Object(SynonymMap$Builder(((t_SynonymMap$Builder *) arg)->object.this$));
          }
          static PyObject *t_SynonymMap$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SynonymMap$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SynonymMap$Builder_init_(t_SynonymMap$Builder *self, PyObject *args, PyObject *kwds)
          {
            jboolean a0;
            SynonymMap$Builder object((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
              INT_CALL(object = SynonymMap$Builder(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SynonymMap$Builder_add(t_SynonymMap$Builder *self, PyObject *args)
          {
            ::org::apache::lucene::util::CharsRef a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            jboolean a2;

            if (!parseArgs(args, "kkZ", ::org::apache::lucene::util::CharsRef::initializeClass, ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.add(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_SynonymMap$Builder_build(t_SynonymMap$Builder *self)
          {
            ::org::apache::lucene::analysis::synonym::SynonymMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::synonym::t_SynonymMap::wrap_Object(result);
          }

          static PyObject *t_SynonymMap$Builder_join(PyTypeObject *type, PyObject *args)
          {
            JArray< ::java::lang::String > a0((jobject) NULL);
            ::org::apache::lucene::util::CharsRef a1((jobject) NULL);
            ::org::apache::lucene::util::CharsRef result((jobject) NULL);

            if (!parseArgs(args, "[sk", ::org::apache::lucene::util::CharsRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::synonym::SynonymMap$Builder::join(a0, a1));
              return ::org::apache::lucene::util::t_CharsRef::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "join", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfo::class$ = NULL;
        jmethodID *SegmentInfo::mids$ = NULL;
        jfieldID *SegmentInfo::fids$ = NULL;
        bool SegmentInfo::live$ = false;
        jint SegmentInfo::NO = (jint) 0;
        jint SegmentInfo::YES = (jint) 0;

        jclass SegmentInfo::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfo");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f7b2b9ed] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;IZLorg/apache/lucene/codecs/Codec;Ljava/util/Map;)V");
            mids$[mid_init$_23209bc5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Ljava/lang/String;IZLorg/apache/lucene/codecs/Codec;Ljava/util/Map;Ljava/util/Map;)V");
            mids$[mid_addFile_5fdc3f48] = env->getMethodID(cls, "addFile", "(Ljava/lang/String;)V");
            mids$[mid_addFiles_9bfb370d] = env->getMethodID(cls, "addFiles", "(Ljava/util/Collection;)V");
            mids$[mid_attributes_db60befd] = env->getMethodID(cls, "attributes", "()Ljava/util/Map;");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_files_03e99967] = env->getMethodID(cls, "files", "()Ljava/util/Set;");
            mids$[mid_getAttribute_97a5258f] = env->getMethodID(cls, "getAttribute", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getCodec_27f0a02b] = env->getMethodID(cls, "getCodec", "()Lorg/apache/lucene/codecs/Codec;");
            mids$[mid_getDiagnostics_db60befd] = env->getMethodID(cls, "getDiagnostics", "()Ljava/util/Map;");
            mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
            mids$[mid_getUseCompoundFile_54c6a16a] = env->getMethodID(cls, "getUseCompoundFile", "()Z");
            mids$[mid_getVersion_14c7b5c5] = env->getMethodID(cls, "getVersion", "()Ljava/lang/String;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_putAttribute_aacea7e9] = env->getMethodID(cls, "putAttribute", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_setCodec_848f310e] = env->getMethodID(cls, "setCodec", "(Lorg/apache/lucene/codecs/Codec;)V");
            mids$[mid_setFiles_fb4f2b26] = env->getMethodID(cls, "setFiles", "(Ljava/util/Set;)V");
            mids$[mid_setVersion_5fdc3f48] = env->getMethodID(cls, "setVersion", "(Ljava/lang/String;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
            mids$[mid_toString_889826bf] = env->getMethodID(cls, "toString", "(Lorg/apache/lucene/store/Directory;I)Ljava/lang/String;");

            fids$ = new jfieldID[max_fid];
            fids$[fid_dir] = env->getFieldID(cls, "dir", "Lorg/apache/lucene/store/Directory;");
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            NO = env->getStaticIntField(cls, "NO");
            YES = env->getStaticIntField(cls, "YES");
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfo::SegmentInfo(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3, jboolean a4, const ::org::apache::lucene::codecs::Codec & a5, const ::java::util::Map & a6) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f7b2b9ed, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$, a6.this$)) {}

        SegmentInfo::SegmentInfo(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3, jboolean a4, const ::org::apache::lucene::codecs::Codec & a5, const ::java::util::Map & a6, const ::java::util::Map & a7) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_23209bc5, a0.this$, a1.this$, a2.this$, a3, a4, a5.this$, a6.this$, a7.this$)) {}

        void SegmentInfo::addFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addFile_5fdc3f48], a0.this$);
        }

        void SegmentInfo::addFiles(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addFiles_9bfb370d], a0.this$);
        }

        ::java::util::Map SegmentInfo::attributes() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_attributes_db60befd]));
        }

        jboolean SegmentInfo::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::util::Set SegmentInfo::files() const
        {
          return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_files_03e99967]));
        }

        ::java::lang::String SegmentInfo::getAttribute(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getAttribute_97a5258f], a0.this$));
        }

        ::org::apache::lucene::codecs::Codec SegmentInfo::getCodec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->callObjectMethod(this$, mids$[mid_getCodec_27f0a02b]));
        }

        ::java::util::Map SegmentInfo::getDiagnostics() const
        {
          return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_getDiagnostics_db60befd]));
        }

        jint SegmentInfo::getDocCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
        }

        jboolean SegmentInfo::getUseCompoundFile() const
        {
          return env->callBooleanMethod(this$, mids$[mid_getUseCompoundFile_54c6a16a]);
        }

        ::java::lang::String SegmentInfo::getVersion() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getVersion_14c7b5c5]));
        }

        jint SegmentInfo::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String SegmentInfo::putAttribute(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_putAttribute_aacea7e9], a0.this$, a1.this$));
        }

        void SegmentInfo::setCodec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setCodec_848f310e], a0.this$);
        }

        void SegmentInfo::setFiles(const ::java::util::Set & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setFiles_fb4f2b26], a0.this$);
        }

        void SegmentInfo::setVersion(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setVersion_5fdc3f48], a0.this$);
        }

        ::java::lang::String SegmentInfo::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String SegmentInfo::toString(const ::org::apache::lucene::store::Directory & a0, jint a1) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_889826bf], a0.this$, a1));
        }

        ::org::apache::lucene::store::Directory SegmentInfo::_get_dir() const
        {
          return ::org::apache::lucene::store::Directory(env->getObjectField(this$, fids$[fid_dir]));
        }

        ::java::lang::String SegmentInfo::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfo_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfo_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentInfo_init_(t_SegmentInfo *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfo_addFile(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_addFiles(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_attributes(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_equals(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_files(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getAttribute(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_getCodec(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getDiagnostics(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getDocCount(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getUseCompoundFile(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_getVersion(t_SegmentInfo *self);
        static PyObject *t_SegmentInfo_hashCode(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_putAttribute(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_setCodec(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_setFiles(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_setVersion(t_SegmentInfo *self, PyObject *arg);
        static PyObject *t_SegmentInfo_toString(t_SegmentInfo *self, PyObject *args);
        static PyObject *t_SegmentInfo_get__dir(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__name(t_SegmentInfo *self, void *data);

        static PyObject *t_SegmentInfo_get__codec(t_SegmentInfo *self, void *data);
        static int t_SegmentInfo_set__codec(t_SegmentInfo *self, PyObject *arg, void *data);
        static PyObject *t_SegmentInfo_get__diagnostics(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__docCount(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__useCompoundFile(t_SegmentInfo *self, void *data);
        static PyObject *t_SegmentInfo_get__version(t_SegmentInfo *self, void *data);
        static int t_SegmentInfo_set__version(t_SegmentInfo *self, PyObject *arg, void *data);
        static PyGetSetDef t_SegmentInfo__fields_[] = {
          DECLARE_GET_FIELD(t_SegmentInfo, dir),
          DECLARE_GET_FIELD(t_SegmentInfo, name),
          DECLARE_GETSET_FIELD(t_SegmentInfo, codec),
          DECLARE_GET_FIELD(t_SegmentInfo, diagnostics),
          DECLARE_GET_FIELD(t_SegmentInfo, docCount),
          DECLARE_GET_FIELD(t_SegmentInfo, useCompoundFile),
          DECLARE_GETSET_FIELD(t_SegmentInfo, version),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SegmentInfo__methods_[] = {
          DECLARE_METHOD(t_SegmentInfo, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfo, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfo, addFile, METH_O),
          DECLARE_METHOD(t_SegmentInfo, addFiles, METH_O),
          DECLARE_METHOD(t_SegmentInfo, attributes, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, equals, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, files, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getAttribute, METH_O),
          DECLARE_METHOD(t_SegmentInfo, getCodec, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getDiagnostics, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getDocCount, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getUseCompoundFile, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, getVersion, METH_NOARGS),
          DECLARE_METHOD(t_SegmentInfo, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, putAttribute, METH_VARARGS),
          DECLARE_METHOD(t_SegmentInfo, setCodec, METH_O),
          DECLARE_METHOD(t_SegmentInfo, setFiles, METH_O),
          DECLARE_METHOD(t_SegmentInfo, setVersion, METH_O),
          DECLARE_METHOD(t_SegmentInfo, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfo, t_SegmentInfo, ::java::lang::Object, SegmentInfo, t_SegmentInfo_init_, 0, 0, t_SegmentInfo__fields_, 0, 0);

        void t_SegmentInfo::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfo), module, "SegmentInfo", 0);
        }

        void t_SegmentInfo::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "class_", make_descriptor(SegmentInfo::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfo::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(SegmentInfo::initializeClass);
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "NO", make_descriptor(SegmentInfo::NO));
          PyDict_SetItemString(PY_TYPE(SegmentInfo).tp_dict, "YES", make_descriptor(SegmentInfo::YES));
        }

        static PyObject *t_SegmentInfo_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfo::initializeClass, 1)))
            return NULL;
          return t_SegmentInfo::wrap_Object(SegmentInfo(((t_SegmentInfo *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfo_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfo::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentInfo_init_(t_SegmentInfo *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 7:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jint a3;
              jboolean a4;
              ::org::apache::lucene::codecs::Codec a5((jobject) NULL);
              ::java::util::Map a6((jobject) NULL);
              PyTypeObject **p6;
              SegmentInfo object((jobject) NULL);

              if (!parseArgs(args, "kssIZkK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::codecs::Codec::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = SegmentInfo(a0, a1, a2, a3, a4, a5, a6));
                self->object = object;
                break;
              }
            }
            goto err;
           case 8:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jint a3;
              jboolean a4;
              ::org::apache::lucene::codecs::Codec a5((jobject) NULL);
              ::java::util::Map a6((jobject) NULL);
              PyTypeObject **p6;
              ::java::util::Map a7((jobject) NULL);
              PyTypeObject **p7;
              SegmentInfo object((jobject) NULL);

              if (!parseArgs(args, "kssIZkKK", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::codecs::Codec::initializeClass, ::java::util::Map::initializeClass, ::java::util::Map::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &p6, ::java::util::t_Map::parameters_, &a7, &p7, ::java::util::t_Map::parameters_))
              {
                INT_CALL(object = SegmentInfo(a0, a1, a2, a3, a4, a5, a6, a7));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentInfo_addFile(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.addFile(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addFile", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_addFiles(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.addFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_attributes(t_SegmentInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_equals(t_SegmentInfo *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SegmentInfo), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SegmentInfo_files(t_SegmentInfo *self)
        {
          ::java::util::Set result((jobject) NULL);
          OBJ_CALL(result = self->object.files());
          return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_getAttribute(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getAttribute(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getAttribute", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_getCodec(t_SegmentInfo *self)
        {
          ::org::apache::lucene::codecs::Codec result((jobject) NULL);
          OBJ_CALL(result = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(result);
        }

        static PyObject *t_SegmentInfo_getDiagnostics(t_SegmentInfo *self)
        {
          ::java::util::Map result((jobject) NULL);
          OBJ_CALL(result = self->object.getDiagnostics());
          return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
        }

        static PyObject *t_SegmentInfo_getDocCount(t_SegmentInfo *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getDocCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_SegmentInfo_getUseCompoundFile(t_SegmentInfo *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_SegmentInfo_getVersion(t_SegmentInfo *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getVersion());
          return j2p(result);
        }

        static PyObject *t_SegmentInfo_hashCode(t_SegmentInfo *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SegmentInfo), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SegmentInfo_putAttribute(t_SegmentInfo *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(result = self->object.putAttribute(a0, a1));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "putAttribute", args);
          return NULL;
        }

        static PyObject *t_SegmentInfo_setCodec(t_SegmentInfo *self, PyObject *arg)
        {
          ::org::apache::lucene::codecs::Codec a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setCodec(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setCodec", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_setFiles(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::util::Set a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArg(arg, "K", ::java::util::Set::initializeClass, &a0, &p0, ::java::util::t_Set::parameters_))
          {
            OBJ_CALL(self->object.setFiles(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setFiles", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_setVersion(t_SegmentInfo *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.setVersion(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "setVersion", arg);
          return NULL;
        }

        static PyObject *t_SegmentInfo_toString(t_SegmentInfo *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.toString(a0, a1));
                return j2p(result);
              }
            }
          }

          return callSuper(&PY_TYPE(SegmentInfo), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_SegmentInfo_get__dir(t_SegmentInfo *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object._get_dir());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_SegmentInfo_get__name(t_SegmentInfo *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }

        static PyObject *t_SegmentInfo_get__codec(t_SegmentInfo *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object.getCodec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_SegmentInfo_set__codec(t_SegmentInfo *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::codecs::Codec value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
            {
              INT_CALL(self->object.setCodec(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static PyObject *t_SegmentInfo_get__diagnostics(t_SegmentInfo *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object.getDiagnostics());
          return ::java::util::t_Map::wrap_Object(value);
        }

        static PyObject *t_SegmentInfo_get__docCount(t_SegmentInfo *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getDocCount());
          return PyInt_FromLong((long) value);
        }

        static PyObject *t_SegmentInfo_get__useCompoundFile(t_SegmentInfo *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.getUseCompoundFile());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_SegmentInfo_get__version(t_SegmentInfo *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getVersion());
          return j2p(value);
        }
        static int t_SegmentInfo_set__version(t_SegmentInfo *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::String value((jobject) NULL);
            if (!parseArg(arg, "s", &value))
            {
              INT_CALL(self->object.setVersion(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "version", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeParseException.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {

              ::java::lang::Class *SyntaxParser::class$ = NULL;
              jmethodID *SyntaxParser::mids$ = NULL;
              bool SyntaxParser::live$ = false;

              jclass SyntaxParser::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/parser/SyntaxParser");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_parse_051054be] = env->getMethodID(cls, "parse", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode SyntaxParser::parse(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_parse_051054be], a0.this$, a1.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace parser {
              static PyObject *t_SyntaxParser_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SyntaxParser_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_SyntaxParser_parse(t_SyntaxParser *self, PyObject *args);

              static PyMethodDef t_SyntaxParser__methods_[] = {
                DECLARE_METHOD(t_SyntaxParser, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SyntaxParser, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_SyntaxParser, parse, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(SyntaxParser, t_SyntaxParser, ::java::lang::Object, SyntaxParser, abstract_init, 0, 0, 0, 0, 0);

              void t_SyntaxParser::install(PyObject *module)
              {
                installType(&PY_TYPE(SyntaxParser), module, "SyntaxParser", 0);
              }

              void t_SyntaxParser::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(SyntaxParser).tp_dict, "class_", make_descriptor(SyntaxParser::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(SyntaxParser).tp_dict, "wrapfn_", make_descriptor(t_SyntaxParser::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(SyntaxParser).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_SyntaxParser_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, SyntaxParser::initializeClass, 1)))
                  return NULL;
                return t_SyntaxParser::wrap_Object(SyntaxParser(((t_SyntaxParser *) arg)->object.this$));
              }
              static PyObject *t_SyntaxParser_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, SyntaxParser::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_SyntaxParser_parse(t_SyntaxParser *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  OBJ_CALL(result = self->object.parse(a0, a1));
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "parse", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/SingleFunction.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *SingleFunction::class$ = NULL;
            jmethodID *SingleFunction::mids$ = NULL;
            bool SingleFunction::live$ = false;

            jclass SingleFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/SingleFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SingleFunction::SingleFunction(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            void SingleFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String SingleFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean SingleFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint SingleFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_SingleFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SingleFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SingleFunction_init_(t_SingleFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SingleFunction_createWeight(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_description(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_equals(t_SingleFunction *self, PyObject *args);
            static PyObject *t_SingleFunction_hashCode(t_SingleFunction *self, PyObject *args);

            static PyMethodDef t_SingleFunction__methods_[] = {
              DECLARE_METHOD(t_SingleFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SingleFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SingleFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_SingleFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SingleFunction, t_SingleFunction, ::org::apache::lucene::queries::function::ValueSource, SingleFunction, t_SingleFunction_init_, 0, 0, 0, 0, 0);

            void t_SingleFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(SingleFunction), module, "SingleFunction", 0);
            }

            void t_SingleFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SingleFunction).tp_dict, "class_", make_descriptor(SingleFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SingleFunction).tp_dict, "wrapfn_", make_descriptor(t_SingleFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SingleFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SingleFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SingleFunction::initializeClass, 1)))
                return NULL;
              return t_SingleFunction::wrap_Object(SingleFunction(((t_SingleFunction *) arg)->object.this$));
            }
            static PyObject *t_SingleFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SingleFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SingleFunction_init_(t_SingleFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              SingleFunction object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = SingleFunction(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SingleFunction_createWeight(t_SingleFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_SingleFunction_description(t_SingleFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_SingleFunction_equals(t_SingleFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_SingleFunction_hashCode(t_SingleFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(SingleFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ngram/EdgeNGramTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {

          ::java::lang::Class *EdgeNGramTokenizerFactory::class$ = NULL;
          jmethodID *EdgeNGramTokenizerFactory::mids$ = NULL;
          bool EdgeNGramTokenizerFactory::live$ = false;

          jclass EdgeNGramTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ngram/EdgeNGramTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EdgeNGramTokenizerFactory::EdgeNGramTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer EdgeNGramTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ngram {
          static PyObject *t_EdgeNGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EdgeNGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EdgeNGramTokenizerFactory_init_(t_EdgeNGramTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EdgeNGramTokenizerFactory_create(t_EdgeNGramTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_EdgeNGramTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EdgeNGramTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EdgeNGramTokenizerFactory, t_EdgeNGramTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, EdgeNGramTokenizerFactory, t_EdgeNGramTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_EdgeNGramTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EdgeNGramTokenizerFactory), module, "EdgeNGramTokenizerFactory", 0);
          }

          void t_EdgeNGramTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizerFactory).tp_dict, "class_", make_descriptor(EdgeNGramTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_EdgeNGramTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EdgeNGramTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EdgeNGramTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EdgeNGramTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_EdgeNGramTokenizerFactory::wrap_Object(EdgeNGramTokenizerFactory(((t_EdgeNGramTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_EdgeNGramTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EdgeNGramTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EdgeNGramTokenizerFactory_init_(t_EdgeNGramTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EdgeNGramTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EdgeNGramTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EdgeNGramTokenizerFactory_create(t_EdgeNGramTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EdgeNGramTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/search/DocIdSet.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Filter::class$ = NULL;
        jmethodID *Filter::mids$ = NULL;
        bool Filter::live$ = false;

        jclass Filter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Filter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_getDocIdSet_ccce0897] = env->getMethodID(cls, "getDocIdSet", "(Lorg/apache/lucene/index/AtomicReaderContext;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/search/DocIdSet;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Filter::Filter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::org::apache::lucene::search::DocIdSet Filter::getDocIdSet(const ::org::apache::lucene::index::AtomicReaderContext & a0, const ::org::apache::lucene::util::Bits & a1) const
        {
          return ::org::apache::lucene::search::DocIdSet(env->callObjectMethod(this$, mids$[mid_getDocIdSet_ccce0897], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Filter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Filter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Filter_init_(t_Filter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Filter_getDocIdSet(t_Filter *self, PyObject *args);

        static PyMethodDef t_Filter__methods_[] = {
          DECLARE_METHOD(t_Filter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Filter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Filter, getDocIdSet, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Filter, t_Filter, ::java::lang::Object, Filter, t_Filter_init_, 0, 0, 0, 0, 0);

        void t_Filter::install(PyObject *module)
        {
          installType(&PY_TYPE(Filter), module, "Filter", 0);
        }

        void t_Filter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Filter).tp_dict, "class_", make_descriptor(Filter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Filter).tp_dict, "wrapfn_", make_descriptor(t_Filter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Filter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Filter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Filter::initializeClass, 1)))
            return NULL;
          return t_Filter::wrap_Object(Filter(((t_Filter *) arg)->object.this$));
        }
        static PyObject *t_Filter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Filter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Filter_init_(t_Filter *self, PyObject *args, PyObject *kwds)
        {
          Filter object((jobject) NULL);

          INT_CALL(object = Filter());
          self->object = object;

          return 0;
        }

        static PyObject *t_Filter_getDocIdSet(t_Filter *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::util::Bits a1((jobject) NULL);
          ::org::apache::lucene::search::DocIdSet result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.getDocIdSet(a0, a1));
            return ::org::apache::lucene::search::t_DocIdSet::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocIdSet", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/SegmentInfos$FindSegmentsFile.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *SegmentInfos$FindSegmentsFile::class$ = NULL;
        jmethodID *SegmentInfos$FindSegmentsFile::mids$ = NULL;
        bool SegmentInfos$FindSegmentsFile::live$ = false;

        jclass SegmentInfos$FindSegmentsFile::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/SegmentInfos$FindSegmentsFile");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_2e261ef2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_run_846352c3] = env->getMethodID(cls, "run", "()Ljava/lang/Object;");
            mids$[mid_run_38d34040] = env->getMethodID(cls, "run", "(Lorg/apache/lucene/index/IndexCommit;)Ljava/lang/Object;");
            mids$[mid_doBody_2a1c4d09] = env->getMethodID(cls, "doBody", "(Ljava/lang/String;)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SegmentInfos$FindSegmentsFile::SegmentInfos$FindSegmentsFile(const ::org::apache::lucene::store::Directory & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2e261ef2, a0.this$)) {}

        ::java::lang::Object SegmentInfos$FindSegmentsFile::run() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_run_846352c3]));
        }

        ::java::lang::Object SegmentInfos$FindSegmentsFile::run(const ::org::apache::lucene::index::IndexCommit & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_run_38d34040], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_SegmentInfos$FindSegmentsFile_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SegmentInfos$FindSegmentsFile_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SegmentInfos$FindSegmentsFile_init_(t_SegmentInfos$FindSegmentsFile *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SegmentInfos$FindSegmentsFile_run(t_SegmentInfos$FindSegmentsFile *self, PyObject *args);

        static PyMethodDef t_SegmentInfos$FindSegmentsFile__methods_[] = {
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SegmentInfos$FindSegmentsFile, run, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SegmentInfos$FindSegmentsFile, t_SegmentInfos$FindSegmentsFile, ::java::lang::Object, SegmentInfos$FindSegmentsFile, t_SegmentInfos$FindSegmentsFile_init_, 0, 0, 0, 0, 0);

        void t_SegmentInfos$FindSegmentsFile::install(PyObject *module)
        {
          installType(&PY_TYPE(SegmentInfos$FindSegmentsFile), module, "SegmentInfos$FindSegmentsFile", 0);
        }

        void t_SegmentInfos$FindSegmentsFile::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SegmentInfos$FindSegmentsFile).tp_dict, "class_", make_descriptor(SegmentInfos$FindSegmentsFile::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SegmentInfos$FindSegmentsFile).tp_dict, "wrapfn_", make_descriptor(t_SegmentInfos$FindSegmentsFile::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SegmentInfos$FindSegmentsFile).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SegmentInfos$FindSegmentsFile_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SegmentInfos$FindSegmentsFile::initializeClass, 1)))
            return NULL;
          return t_SegmentInfos$FindSegmentsFile::wrap_Object(SegmentInfos$FindSegmentsFile(((t_SegmentInfos$FindSegmentsFile *) arg)->object.this$));
        }
        static PyObject *t_SegmentInfos$FindSegmentsFile_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SegmentInfos$FindSegmentsFile::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SegmentInfos$FindSegmentsFile_init_(t_SegmentInfos$FindSegmentsFile *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          SegmentInfos$FindSegmentsFile object((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
          {
            INT_CALL(object = SegmentInfos$FindSegmentsFile(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SegmentInfos$FindSegmentsFile_run(t_SegmentInfos$FindSegmentsFile *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::lang::Object result((jobject) NULL);
              OBJ_CALL(result = self->object.run());
              return ::java::lang::t_Object::wrap_Object(result);
            }
            break;
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.run(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "run", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Builder$FreezeTail.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/Builder$UnCompiledNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Builder$FreezeTail::class$ = NULL;
          jmethodID *Builder$FreezeTail::mids$ = NULL;
          bool Builder$FreezeTail::live$ = false;

          jclass Builder$FreezeTail::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Builder$FreezeTail");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_freeze_d975a767] = env->getMethodID(cls, "freeze", "([Lorg/apache/lucene/util/fst/Builder$UnCompiledNode;ILorg/apache/lucene/util/IntsRef;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Builder$FreezeTail::Builder$FreezeTail() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Builder$FreezeTail::freeze(const JArray< ::org::apache::lucene::util::fst::Builder$UnCompiledNode > & a0, jint a1, const ::org::apache::lucene::util::IntsRef & a2) const
          {
            env->callVoidMethod(this$, mids$[mid_freeze_d975a767], a0.this$, a1, a2.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Builder$FreezeTail_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$FreezeTail_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Builder$FreezeTail_of_(t_Builder$FreezeTail *self, PyObject *args);
          static int t_Builder$FreezeTail_init_(t_Builder$FreezeTail *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Builder$FreezeTail_freeze(t_Builder$FreezeTail *self, PyObject *args);
          static PyObject *t_Builder$FreezeTail_get__parameters_(t_Builder$FreezeTail *self, void *data);
          static PyGetSetDef t_Builder$FreezeTail__fields_[] = {
            DECLARE_GET_FIELD(t_Builder$FreezeTail, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Builder$FreezeTail__methods_[] = {
            DECLARE_METHOD(t_Builder$FreezeTail, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$FreezeTail, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Builder$FreezeTail, of_, METH_VARARGS),
            DECLARE_METHOD(t_Builder$FreezeTail, freeze, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Builder$FreezeTail, t_Builder$FreezeTail, ::java::lang::Object, Builder$FreezeTail, t_Builder$FreezeTail_init_, 0, 0, t_Builder$FreezeTail__fields_, 0, 0);
          PyObject *t_Builder$FreezeTail::wrap_Object(const Builder$FreezeTail& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$FreezeTail::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$FreezeTail *self = (t_Builder$FreezeTail *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Builder$FreezeTail::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Builder$FreezeTail::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Builder$FreezeTail *self = (t_Builder$FreezeTail *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Builder$FreezeTail::install(PyObject *module)
          {
            installType(&PY_TYPE(Builder$FreezeTail), module, "Builder$FreezeTail", 0);
          }

          void t_Builder$FreezeTail::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Builder$FreezeTail).tp_dict, "class_", make_descriptor(Builder$FreezeTail::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Builder$FreezeTail).tp_dict, "wrapfn_", make_descriptor(t_Builder$FreezeTail::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Builder$FreezeTail).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Builder$FreezeTail_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Builder$FreezeTail::initializeClass, 1)))
              return NULL;
            return t_Builder$FreezeTail::wrap_Object(Builder$FreezeTail(((t_Builder$FreezeTail *) arg)->object.this$));
          }
          static PyObject *t_Builder$FreezeTail_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Builder$FreezeTail::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Builder$FreezeTail_of_(t_Builder$FreezeTail *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Builder$FreezeTail_init_(t_Builder$FreezeTail *self, PyObject *args, PyObject *kwds)
          {
            Builder$FreezeTail object((jobject) NULL);

            INT_CALL(object = Builder$FreezeTail());
            self->object = object;

            return 0;
          }

          static PyObject *t_Builder$FreezeTail_freeze(t_Builder$FreezeTail *self, PyObject *args)
          {
            JArray< ::org::apache::lucene::util::fst::Builder$UnCompiledNode > a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            ::org::apache::lucene::util::IntsRef a2((jobject) NULL);

            if (!parseArgs(args, "[KIk", ::org::apache::lucene::util::fst::Builder$UnCompiledNode::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_Builder$UnCompiledNode::parameters_, &a1, &a2))
            {
              OBJ_CALL(self->object.freeze(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "freeze", args);
            return NULL;
          }
          static PyObject *t_Builder$FreezeTail_get__parameters_(t_Builder$FreezeTail *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$TermOrdValComparator.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$TermOrdValComparator::class$ = NULL;
        jmethodID *FieldComparator$TermOrdValComparator::mids$ = NULL;
        bool FieldComparator$TermOrdValComparator::live$ = false;

        jclass FieldComparator$TermOrdValComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$TermOrdValComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d40a4f2e] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;)V");
            mids$[mid_init$_cab89017] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Z)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_594e5ef9] = env->getMethodID(cls, "compareValues", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_7bc03dc4] = env->getMethodID(cls, "setTopValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_value_b57e9c3f] = env->getMethodID(cls, "value", "(I)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getSortedDocValues_59a5c92f] = env->getMethodID(cls, "getSortedDocValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$TermOrdValComparator::FieldComparator$TermOrdValComparator(jint a0, const ::java::lang::String & a1) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_d40a4f2e, a0, a1.this$)) {}

        FieldComparator$TermOrdValComparator::FieldComparator$TermOrdValComparator(jint a0, const ::java::lang::String & a1, jboolean a2) : ::org::apache::lucene::search::FieldComparator(env->newObject(initializeClass, &mids$, mid_init$_cab89017, a0, a1.this$, a2)) {}

        jint FieldComparator$TermOrdValComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$TermOrdValComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$TermOrdValComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator$TermOrdValComparator::compareValues(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_594e5ef9], a0.this$, a1.this$);
        }

        void FieldComparator$TermOrdValComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$TermOrdValComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$TermOrdValComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$TermOrdValComparator::setTopValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_7bc03dc4], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef FieldComparator$TermOrdValComparator::value(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_value_b57e9c3f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$TermOrdValComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermOrdValComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermOrdValComparator_of_(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static int t_FieldComparator$TermOrdValComparator_init_(t_FieldComparator$TermOrdValComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$TermOrdValComparator_compare(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_compareBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_compareTop(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_compareValues(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_copy(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_setBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_setNextReader(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_setTopValue(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermOrdValComparator_value(t_FieldComparator$TermOrdValComparator *self, PyObject *args);
        static int t_FieldComparator$TermOrdValComparator_set__bottom(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermOrdValComparator_set__nextReader(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermOrdValComparator_set__topValue(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$TermOrdValComparator_get__parameters_(t_FieldComparator$TermOrdValComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$TermOrdValComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$TermOrdValComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$TermOrdValComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$TermOrdValComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$TermOrdValComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$TermOrdValComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermOrdValComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$TermOrdValComparator, t_FieldComparator$TermOrdValComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$TermOrdValComparator, t_FieldComparator$TermOrdValComparator_init_, 0, 0, t_FieldComparator$TermOrdValComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$TermOrdValComparator::wrap_Object(const FieldComparator$TermOrdValComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermOrdValComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermOrdValComparator *self = (t_FieldComparator$TermOrdValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$TermOrdValComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermOrdValComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermOrdValComparator *self = (t_FieldComparator$TermOrdValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$TermOrdValComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$TermOrdValComparator), module, "FieldComparator$TermOrdValComparator", 0);
        }

        void t_FieldComparator$TermOrdValComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermOrdValComparator).tp_dict, "class_", make_descriptor(FieldComparator$TermOrdValComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermOrdValComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$TermOrdValComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermOrdValComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$TermOrdValComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$TermOrdValComparator::wrap_Object(FieldComparator$TermOrdValComparator(((t_FieldComparator$TermOrdValComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$TermOrdValComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$TermOrdValComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_of_(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$TermOrdValComparator_init_(t_FieldComparator$TermOrdValComparator *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jint a0;
              ::java::lang::String a1((jobject) NULL);
              FieldComparator$TermOrdValComparator object((jobject) NULL);

              if (!parseArgs(args, "Is", &a0, &a1))
              {
                INT_CALL(object = FieldComparator$TermOrdValComparator(a0, a1));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
                break;
              }
            }
            goto err;
           case 3:
            {
              jint a0;
              ::java::lang::String a1((jobject) NULL);
              jboolean a2;
              FieldComparator$TermOrdValComparator object((jobject) NULL);

              if (!parseArgs(args, "IsZ", &a0, &a1, &a2))
              {
                INT_CALL(object = FieldComparator$TermOrdValComparator(a0, a1, a2));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compare(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compareBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compareTop(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_compareValues(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "compareValues", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_copy(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_setBottom(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_setNextReader(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_setTopValue(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$TermOrdValComparator_value(t_FieldComparator$TermOrdValComparator *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermOrdValComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$TermOrdValComparator_get__parameters_(t_FieldComparator$TermOrdValComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$TermOrdValComparator_set__bottom(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$TermOrdValComparator_set__nextReader(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$TermOrdValComparator_set__topValue(t_FieldComparator$TermOrdValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {

            ::java::lang::Class *FunctionFirstPassGroupingCollector::class$ = NULL;
            jmethodID *FunctionFirstPassGroupingCollector::mids$ = NULL;
            bool FunctionFirstPassGroupingCollector::live$ = false;

            jclass FunctionFirstPassGroupingCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/function/FunctionFirstPassGroupingCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ef44e36a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Ljava/util/Map;Lorg/apache/lucene/search/Sort;I)V");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");
                mids$[mid_getDocGroupValue_5767061f] = env->getMethodID(cls, "getDocGroupValue", "(I)Lorg/apache/lucene/util/mutable/MutableValue;");
                mids$[mid_copyDocGroupValue_25e3929d] = env->getMethodID(cls, "copyDocGroupValue", "(Lorg/apache/lucene/util/mutable/MutableValue;Lorg/apache/lucene/util/mutable/MutableValue;)Lorg/apache/lucene/util/mutable/MutableValue;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FunctionFirstPassGroupingCollector::FunctionFirstPassGroupingCollector(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::java::util::Map & a1, const ::org::apache::lucene::search::Sort & a2, jint a3) : ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector(env->newObject(initializeClass, &mids$, mid_init$_ef44e36a, a0.this$, a1.this$, a2.this$, a3)) {}

            void FunctionFirstPassGroupingCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace function {
            static PyObject *t_FunctionFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FunctionFirstPassGroupingCollector_of_(t_FunctionFirstPassGroupingCollector *self, PyObject *args);
            static int t_FunctionFirstPassGroupingCollector_init_(t_FunctionFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FunctionFirstPassGroupingCollector_setNextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *args);
            static int t_FunctionFirstPassGroupingCollector_set__nextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *arg, void *data);
            static PyObject *t_FunctionFirstPassGroupingCollector_get__parameters_(t_FunctionFirstPassGroupingCollector *self, void *data);
            static PyGetSetDef t_FunctionFirstPassGroupingCollector__fields_[] = {
              DECLARE_SET_FIELD(t_FunctionFirstPassGroupingCollector, nextReader),
              DECLARE_GET_FIELD(t_FunctionFirstPassGroupingCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FunctionFirstPassGroupingCollector__methods_[] = {
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_FunctionFirstPassGroupingCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FunctionFirstPassGroupingCollector, t_FunctionFirstPassGroupingCollector, ::org::apache::lucene::search::grouping::AbstractFirstPassGroupingCollector, FunctionFirstPassGroupingCollector, t_FunctionFirstPassGroupingCollector_init_, 0, 0, t_FunctionFirstPassGroupingCollector__fields_, 0, 0);
            PyObject *t_FunctionFirstPassGroupingCollector::wrap_Object(const FunctionFirstPassGroupingCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionFirstPassGroupingCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionFirstPassGroupingCollector *self = (t_FunctionFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_FunctionFirstPassGroupingCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_FunctionFirstPassGroupingCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_FunctionFirstPassGroupingCollector *self = (t_FunctionFirstPassGroupingCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_FunctionFirstPassGroupingCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(FunctionFirstPassGroupingCollector), module, "FunctionFirstPassGroupingCollector", 0);
            }

            void t_FunctionFirstPassGroupingCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FunctionFirstPassGroupingCollector).tp_dict, "class_", make_descriptor(FunctionFirstPassGroupingCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FunctionFirstPassGroupingCollector).tp_dict, "wrapfn_", make_descriptor(t_FunctionFirstPassGroupingCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FunctionFirstPassGroupingCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FunctionFirstPassGroupingCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FunctionFirstPassGroupingCollector::initializeClass, 1)))
                return NULL;
              return t_FunctionFirstPassGroupingCollector::wrap_Object(FunctionFirstPassGroupingCollector(((t_FunctionFirstPassGroupingCollector *) arg)->object.this$));
            }
            static PyObject *t_FunctionFirstPassGroupingCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FunctionFirstPassGroupingCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_FunctionFirstPassGroupingCollector_of_(t_FunctionFirstPassGroupingCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_FunctionFirstPassGroupingCollector_init_(t_FunctionFirstPassGroupingCollector *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::java::util::Map a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::search::Sort a2((jobject) NULL);
              jint a3;
              FunctionFirstPassGroupingCollector object((jobject) NULL);

              if (!parseArgs(args, "kKkI", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::java::util::Map::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &a1, &p1, ::java::util::t_Map::parameters_, &a2, &a3))
              {
                INT_CALL(object = FunctionFirstPassGroupingCollector(a0, a1, a2, a3));
                self->object = object;
                self->parameters[0] = &::org::apache::lucene::util::mutable$::PY_TYPE(MutableValue);
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FunctionFirstPassGroupingCollector_setNextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(FunctionFirstPassGroupingCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_FunctionFirstPassGroupingCollector_get__parameters_(t_FunctionFirstPassGroupingCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static int t_FunctionFirstPassGroupingCollector_set__nextReader(t_FunctionFirstPassGroupingCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/MathUtil.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *MathUtil::class$ = NULL;
        jmethodID *MathUtil::mids$ = NULL;
        bool MathUtil::live$ = false;

        jclass MathUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/MathUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_acosh_5d1c7657] = env->getStaticMethodID(cls, "acosh", "(D)D");
            mids$[mid_asinh_5d1c7657] = env->getStaticMethodID(cls, "asinh", "(D)D");
            mids$[mid_atanh_5d1c7657] = env->getStaticMethodID(cls, "atanh", "(D)D");
            mids$[mid_gcd_a7e12cb8] = env->getStaticMethodID(cls, "gcd", "(JJ)J");
            mids$[mid_log_b1e2866a] = env->getStaticMethodID(cls, "log", "(DD)D");
            mids$[mid_log_25d05c90] = env->getStaticMethodID(cls, "log", "(JI)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jdouble MathUtil::acosh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_acosh_5d1c7657], a0);
        }

        jdouble MathUtil::asinh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_asinh_5d1c7657], a0);
        }

        jdouble MathUtil::atanh(jdouble a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_atanh_5d1c7657], a0);
        }

        jlong MathUtil::gcd(jlong a0, jlong a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_gcd_a7e12cb8], a0, a1);
        }

        jdouble MathUtil::log(jdouble a0, jdouble a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticDoubleMethod(cls, mids$[mid_log_b1e2866a], a0, a1);
        }

        jint MathUtil::log(jlong a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_log_25d05c90], a0, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_MathUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_acosh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_asinh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_atanh(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MathUtil_gcd(PyTypeObject *type, PyObject *args);
        static PyObject *t_MathUtil_log(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_MathUtil__methods_[] = {
          DECLARE_METHOD(t_MathUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, acosh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, asinh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, atanh, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, gcd, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_MathUtil, log, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MathUtil, t_MathUtil, ::java::lang::Object, MathUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_MathUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(MathUtil), module, "MathUtil", 0);
        }

        void t_MathUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MathUtil).tp_dict, "class_", make_descriptor(MathUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MathUtil).tp_dict, "wrapfn_", make_descriptor(t_MathUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MathUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MathUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MathUtil::initializeClass, 1)))
            return NULL;
          return t_MathUtil::wrap_Object(MathUtil(((t_MathUtil *) arg)->object.this$));
        }
        static PyObject *t_MathUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MathUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MathUtil_acosh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::acosh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "acosh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_asinh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::asinh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "asinh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_atanh(PyTypeObject *type, PyObject *arg)
        {
          jdouble a0;
          jdouble result;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::atanh(a0));
            return PyFloat_FromDouble((double) result);
          }

          PyErr_SetArgsError(type, "atanh", arg);
          return NULL;
        }

        static PyObject *t_MathUtil_gcd(PyTypeObject *type, PyObject *args)
        {
          jlong a0;
          jlong a1;
          jlong result;

          if (!parseArgs(args, "JJ", &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::gcd(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "gcd", args);
          return NULL;
        }

        static PyObject *t_MathUtil_log(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              jdouble a0;
              jdouble a1;
              jdouble result;

              if (!parseArgs(args, "DD", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::log(a0, a1));
                return PyFloat_FromDouble((double) result);
              }
            }
            {
              jlong a0;
              jint a1;
              jint result;

              if (!parseArgs(args, "JI", &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::MathUtil::log(a0, a1));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "log", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Class.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/String.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/ClassLoader.h"
#include "java/io/Serializable.h"
#include "java/lang/Package.h"
#include "java/io/InputStream.h"
#include "java/lang/SecurityException.h"
#include "java/lang/IllegalAccessException.h"
#include "JArray.h"

namespace java {
  namespace lang {

    ::java::lang::Class *Class::class$ = NULL;
    jmethodID *Class::mids$ = NULL;
    bool Class::live$ = false;

    jclass Class::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/lang/Class");

        mids$ = new jmethodID[max_mid];
        mids$[mid_asSubclass_ecb22eb3] = env->getMethodID(cls, "asSubclass", "(Ljava/lang/Class;)Ljava/lang/Class;");
        mids$[mid_cast_a932a95f] = env->getMethodID(cls, "cast", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_desiredAssertionStatus_54c6a16a] = env->getMethodID(cls, "desiredAssertionStatus", "()Z");
        mids$[mid_forName_7d663d97] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Ljava/lang/Class;");
        mids$[mid_forName_4c5c10fb] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;");
        mids$[mid_getCanonicalName_14c7b5c5] = env->getMethodID(cls, "getCanonicalName", "()Ljava/lang/String;");
        mids$[mid_getClassLoader_8d2f11fc] = env->getMethodID(cls, "getClassLoader", "()Ljava/lang/ClassLoader;");
        mids$[mid_getClasses_ffb25e7d] = env->getMethodID(cls, "getClasses", "()[Ljava/lang/Class;");
        mids$[mid_getComponentType_44a5f2c9] = env->getMethodID(cls, "getComponentType", "()Ljava/lang/Class;");
        mids$[mid_getDeclaredClasses_ffb25e7d] = env->getMethodID(cls, "getDeclaredClasses", "()[Ljava/lang/Class;");
        mids$[mid_getDeclaringClass_44a5f2c9] = env->getMethodID(cls, "getDeclaringClass", "()Ljava/lang/Class;");
        mids$[mid_getEnclosingClass_44a5f2c9] = env->getMethodID(cls, "getEnclosingClass", "()Ljava/lang/Class;");
        mids$[mid_getEnumConstants_94e49c77] = env->getMethodID(cls, "getEnumConstants", "()[Ljava/lang/Object;");
        mids$[mid_getInterfaces_ffb25e7d] = env->getMethodID(cls, "getInterfaces", "()[Ljava/lang/Class;");
        mids$[mid_getModifiers_54c6a179] = env->getMethodID(cls, "getModifiers", "()I");
        mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
        mids$[mid_getPackage_b0f2f7bb] = env->getMethodID(cls, "getPackage", "()Ljava/lang/Package;");
        mids$[mid_getResourceAsStream_222e59eb] = env->getMethodID(cls, "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;");
        mids$[mid_getSigners_94e49c77] = env->getMethodID(cls, "getSigners", "()[Ljava/lang/Object;");
        mids$[mid_getSimpleName_14c7b5c5] = env->getMethodID(cls, "getSimpleName", "()Ljava/lang/String;");
        mids$[mid_getSuperclass_44a5f2c9] = env->getMethodID(cls, "getSuperclass", "()Ljava/lang/Class;");
        mids$[mid_isAnnotation_54c6a16a] = env->getMethodID(cls, "isAnnotation", "()Z");
        mids$[mid_isAnonymousClass_54c6a16a] = env->getMethodID(cls, "isAnonymousClass", "()Z");
        mids$[mid_isArray_54c6a16a] = env->getMethodID(cls, "isArray", "()Z");
        mids$[mid_isAssignableFrom_a5deaff8] = env->getMethodID(cls, "isAssignableFrom", "(Ljava/lang/Class;)Z");
        mids$[mid_isEnum_54c6a16a] = env->getMethodID(cls, "isEnum", "()Z");
        mids$[mid_isInstance_290588e2] = env->getMethodID(cls, "isInstance", "(Ljava/lang/Object;)Z");
        mids$[mid_isInterface_54c6a16a] = env->getMethodID(cls, "isInterface", "()Z");
        mids$[mid_isLocalClass_54c6a16a] = env->getMethodID(cls, "isLocalClass", "()Z");
        mids$[mid_isMemberClass_54c6a16a] = env->getMethodID(cls, "isMemberClass", "()Z");
        mids$[mid_isPrimitive_54c6a16a] = env->getMethodID(cls, "isPrimitive", "()Z");
        mids$[mid_isSynthetic_54c6a16a] = env->getMethodID(cls, "isSynthetic", "()Z");
        mids$[mid_newInstance_846352c3] = env->getMethodID(cls, "newInstance", "()Ljava/lang/Object;");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    Class Class::asSubclass(const Class & a0) const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_asSubclass_ecb22eb3], a0.this$));
    }

    ::java::lang::Object Class::cast(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_cast_a932a95f], a0.this$));
    }

    jboolean Class::desiredAssertionStatus() const
    {
      return env->callBooleanMethod(this$, mids$[mid_desiredAssertionStatus_54c6a16a]);
    }

    Class Class::forName(const ::java::lang::String & a0)
    {
      jclass cls = env->getClass(initializeClass);
      return Class(env->callStaticObjectMethod(cls, mids$[mid_forName_7d663d97], a0.this$));
    }

    Class Class::forName(const ::java::lang::String & a0, jboolean a1, const ::java::lang::ClassLoader & a2)
    {
      jclass cls = env->getClass(initializeClass);
      return Class(env->callStaticObjectMethod(cls, mids$[mid_forName_4c5c10fb], a0.this$, a1, a2.this$));
    }

    ::java::lang::String Class::getCanonicalName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCanonicalName_14c7b5c5]));
    }

    ::java::lang::ClassLoader Class::getClassLoader() const
    {
      return ::java::lang::ClassLoader(env->callObjectMethod(this$, mids$[mid_getClassLoader_8d2f11fc]));
    }

    JArray< Class > Class::getClasses() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getClasses_ffb25e7d]));
    }

    Class Class::getComponentType() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getComponentType_44a5f2c9]));
    }

    JArray< Class > Class::getDeclaredClasses() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getDeclaredClasses_ffb25e7d]));
    }

    Class Class::getDeclaringClass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getDeclaringClass_44a5f2c9]));
    }

    Class Class::getEnclosingClass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getEnclosingClass_44a5f2c9]));
    }

    JArray< ::java::lang::Object > Class::getEnumConstants() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getEnumConstants_94e49c77]));
    }

    JArray< Class > Class::getInterfaces() const
    {
      return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getInterfaces_ffb25e7d]));
    }

    jint Class::getModifiers() const
    {
      return env->callIntMethod(this$, mids$[mid_getModifiers_54c6a179]);
    }

    ::java::lang::String Class::getName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
    }

    ::java::lang::Package Class::getPackage() const
    {
      return ::java::lang::Package(env->callObjectMethod(this$, mids$[mid_getPackage_b0f2f7bb]));
    }

    ::java::io::InputStream Class::getResourceAsStream(const ::java::lang::String & a0) const
    {
      return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_getResourceAsStream_222e59eb], a0.this$));
    }

    JArray< ::java::lang::Object > Class::getSigners() const
    {
      return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getSigners_94e49c77]));
    }

    ::java::lang::String Class::getSimpleName() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSimpleName_14c7b5c5]));
    }

    Class Class::getSuperclass() const
    {
      return Class(env->callObjectMethod(this$, mids$[mid_getSuperclass_44a5f2c9]));
    }

    jboolean Class::isAnnotation() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAnnotation_54c6a16a]);
    }

    jboolean Class::isAnonymousClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAnonymousClass_54c6a16a]);
    }

    jboolean Class::isArray() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isArray_54c6a16a]);
    }

    jboolean Class::isAssignableFrom(const Class & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isAssignableFrom_a5deaff8], a0.this$);
    }

    jboolean Class::isEnum() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEnum_54c6a16a]);
    }

    jboolean Class::isInstance(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInstance_290588e2], a0.this$);
    }

    jboolean Class::isInterface() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isInterface_54c6a16a]);
    }

    jboolean Class::isLocalClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isLocalClass_54c6a16a]);
    }

    jboolean Class::isMemberClass() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isMemberClass_54c6a16a]);
    }

    jboolean Class::isPrimitive() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isPrimitive_54c6a16a]);
    }

    jboolean Class::isSynthetic() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isSynthetic_54c6a16a]);
    }

    ::java::lang::Object Class::newInstance() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_846352c3]));
    }

    ::java::lang::String Class::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace lang {
    static PyObject *t_Class_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Class_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_Class_of_(t_Class *self, PyObject *args);
    static PyObject *t_Class_asSubclass(t_Class *self, PyObject *arg);
    static PyObject *t_Class_cast(t_Class *self, PyObject *arg);
    static PyObject *t_Class_desiredAssertionStatus(t_Class *self);
    static PyObject *t_Class_forName(PyTypeObject *type, PyObject *args);
    static PyObject *t_Class_getCanonicalName(t_Class *self);
    static PyObject *t_Class_getClassLoader(t_Class *self);
    static PyObject *t_Class_getClasses(t_Class *self);
    static PyObject *t_Class_getComponentType(t_Class *self);
    static PyObject *t_Class_getDeclaredClasses(t_Class *self);
    static PyObject *t_Class_getDeclaringClass(t_Class *self);
    static PyObject *t_Class_getEnclosingClass(t_Class *self);
    static PyObject *t_Class_getEnumConstants(t_Class *self);
    static PyObject *t_Class_getInterfaces(t_Class *self);
    static PyObject *t_Class_getModifiers(t_Class *self);
    static PyObject *t_Class_getName(t_Class *self);
    static PyObject *t_Class_getPackage(t_Class *self);
    static PyObject *t_Class_getResourceAsStream(t_Class *self, PyObject *arg);
    static PyObject *t_Class_getSigners(t_Class *self);
    static PyObject *t_Class_getSimpleName(t_Class *self);
    static PyObject *t_Class_getSuperclass(t_Class *self);
    static PyObject *t_Class_isAnnotation(t_Class *self);
    static PyObject *t_Class_isAnonymousClass(t_Class *self);
    static PyObject *t_Class_isArray(t_Class *self);
    static PyObject *t_Class_isAssignableFrom(t_Class *self, PyObject *arg);
    static PyObject *t_Class_isEnum(t_Class *self);
    static PyObject *t_Class_isInstance(t_Class *self, PyObject *arg);
    static PyObject *t_Class_isInterface(t_Class *self);
    static PyObject *t_Class_isLocalClass(t_Class *self);
    static PyObject *t_Class_isMemberClass(t_Class *self);
    static PyObject *t_Class_isPrimitive(t_Class *self);
    static PyObject *t_Class_isSynthetic(t_Class *self);
    static PyObject *t_Class_newInstance(t_Class *self);
    static PyObject *t_Class_toString(t_Class *self, PyObject *args);
    static PyObject *t_Class_get__annotation(t_Class *self, void *data);
    static PyObject *t_Class_get__anonymousClass(t_Class *self, void *data);
    static PyObject *t_Class_get__array(t_Class *self, void *data);
    static PyObject *t_Class_get__canonicalName(t_Class *self, void *data);
    static PyObject *t_Class_get__classLoader(t_Class *self, void *data);
    static PyObject *t_Class_get__classes(t_Class *self, void *data);
    static PyObject *t_Class_get__componentType(t_Class *self, void *data);
    static PyObject *t_Class_get__declaredClasses(t_Class *self, void *data);
    static PyObject *t_Class_get__declaringClass(t_Class *self, void *data);
    static PyObject *t_Class_get__enclosingClass(t_Class *self, void *data);
    static PyObject *t_Class_get__enum(t_Class *self, void *data);
    static PyObject *t_Class_get__enumConstants(t_Class *self, void *data);
    static PyObject *t_Class_get__interface(t_Class *self, void *data);
    static PyObject *t_Class_get__interfaces(t_Class *self, void *data);
    static PyObject *t_Class_get__localClass(t_Class *self, void *data);
    static PyObject *t_Class_get__memberClass(t_Class *self, void *data);
    static PyObject *t_Class_get__modifiers(t_Class *self, void *data);
    static PyObject *t_Class_get__name(t_Class *self, void *data);
    static PyObject *t_Class_get__package(t_Class *self, void *data);
    static PyObject *t_Class_get__primitive(t_Class *self, void *data);
    static PyObject *t_Class_get__signers(t_Class *self, void *data);
    static PyObject *t_Class_get__simpleName(t_Class *self, void *data);
    static PyObject *t_Class_get__superclass(t_Class *self, void *data);
    static PyObject *t_Class_get__synthetic(t_Class *self, void *data);
    static PyObject *t_Class_get__parameters_(t_Class *self, void *data);
    static PyGetSetDef t_Class__fields_[] = {
      DECLARE_GET_FIELD(t_Class, annotation),
      DECLARE_GET_FIELD(t_Class, anonymousClass),
      DECLARE_GET_FIELD(t_Class, array),
      DECLARE_GET_FIELD(t_Class, canonicalName),
      DECLARE_GET_FIELD(t_Class, classLoader),
      DECLARE_GET_FIELD(t_Class, classes),
      DECLARE_GET_FIELD(t_Class, componentType),
      DECLARE_GET_FIELD(t_Class, declaredClasses),
      DECLARE_GET_FIELD(t_Class, declaringClass),
      DECLARE_GET_FIELD(t_Class, enclosingClass),
      DECLARE_GET_FIELD(t_Class, enum),
      DECLARE_GET_FIELD(t_Class, enumConstants),
      DECLARE_GET_FIELD(t_Class, interface),
      DECLARE_GET_FIELD(t_Class, interfaces),
      DECLARE_GET_FIELD(t_Class, localClass),
      DECLARE_GET_FIELD(t_Class, memberClass),
      DECLARE_GET_FIELD(t_Class, modifiers),
      DECLARE_GET_FIELD(t_Class, name),
      DECLARE_GET_FIELD(t_Class, package),
      DECLARE_GET_FIELD(t_Class, primitive),
      DECLARE_GET_FIELD(t_Class, signers),
      DECLARE_GET_FIELD(t_Class, simpleName),
      DECLARE_GET_FIELD(t_Class, superclass),
      DECLARE_GET_FIELD(t_Class, synthetic),
      DECLARE_GET_FIELD(t_Class, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_Class__methods_[] = {
      DECLARE_METHOD(t_Class, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Class, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_Class, of_, METH_VARARGS),
      DECLARE_METHOD(t_Class, asSubclass, METH_O),
      DECLARE_METHOD(t_Class, cast, METH_O),
      DECLARE_METHOD(t_Class, desiredAssertionStatus, METH_NOARGS),
      DECLARE_METHOD(t_Class, forName, METH_VARARGS | METH_CLASS),
      DECLARE_METHOD(t_Class, getCanonicalName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getClassLoader, METH_NOARGS),
      DECLARE_METHOD(t_Class, getClasses, METH_NOARGS),
      DECLARE_METHOD(t_Class, getComponentType, METH_NOARGS),
      DECLARE_METHOD(t_Class, getDeclaredClasses, METH_NOARGS),
      DECLARE_METHOD(t_Class, getDeclaringClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, getEnclosingClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, getEnumConstants, METH_NOARGS),
      DECLARE_METHOD(t_Class, getInterfaces, METH_NOARGS),
      DECLARE_METHOD(t_Class, getModifiers, METH_NOARGS),
      DECLARE_METHOD(t_Class, getName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getPackage, METH_NOARGS),
      DECLARE_METHOD(t_Class, getResourceAsStream, METH_O),
      DECLARE_METHOD(t_Class, getSigners, METH_NOARGS),
      DECLARE_METHOD(t_Class, getSimpleName, METH_NOARGS),
      DECLARE_METHOD(t_Class, getSuperclass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAnnotation, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAnonymousClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isArray, METH_NOARGS),
      DECLARE_METHOD(t_Class, isAssignableFrom, METH_O),
      DECLARE_METHOD(t_Class, isEnum, METH_NOARGS),
      DECLARE_METHOD(t_Class, isInstance, METH_O),
      DECLARE_METHOD(t_Class, isInterface, METH_NOARGS),
      DECLARE_METHOD(t_Class, isLocalClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isMemberClass, METH_NOARGS),
      DECLARE_METHOD(t_Class, isPrimitive, METH_NOARGS),
      DECLARE_METHOD(t_Class, isSynthetic, METH_NOARGS),
      DECLARE_METHOD(t_Class, newInstance, METH_NOARGS),
      DECLARE_METHOD(t_Class, toString, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(Class, t_Class, ::java::lang::Object, Class, abstract_init, 0, 0, t_Class__fields_, 0, 0);
    PyObject *t_Class::wrap_Object(const Class& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Class::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Class *self = (t_Class *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    PyObject *t_Class::wrap_jobject(const jobject& object, PyTypeObject *p0)
    {
      PyObject *obj = t_Class::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_Class *self = (t_Class *) obj;
        self->parameters[0] = p0;
      }
      return obj;
    }

    void t_Class::install(PyObject *module)
    {
      installType(&PY_TYPE(Class), module, "Class", 0);
    }

    void t_Class::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(Class).tp_dict, "class_", make_descriptor(Class::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(Class).tp_dict, "wrapfn_", make_descriptor(t_Class::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(Class).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_Class_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, Class::initializeClass, 1)))
        return NULL;
      return t_Class::wrap_Object(Class(((t_Class *) arg)->object.this$));
    }
    static PyObject *t_Class_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, Class::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_Class_of_(t_Class *self, PyObject *args)
    {
      if (!parseArg(args, "T", 1, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_Class_asSubclass(t_Class *self, PyObject *arg)
    {
      Class a0((jobject) NULL);
      PyTypeObject **p0;
      Class result((jobject) NULL);

      if (!parseArg(arg, "K", Class::initializeClass, &a0, &p0, t_Class::parameters_))
      {
        OBJ_CALL(result = self->object.asSubclass(a0));
        return t_Class::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "asSubclass", arg);
      return NULL;
    }

    static PyObject *t_Class_cast(t_Class *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.cast(a0));
        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "cast", arg);
      return NULL;
    }

    static PyObject *t_Class_desiredAssertionStatus(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.desiredAssertionStatus());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_forName(PyTypeObject *type, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          Class result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = ::java::lang::Class::forName(a0));
            return t_Class::wrap_Object(result);
          }
        }
        break;
       case 3:
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean a1;
          ::java::lang::ClassLoader a2((jobject) NULL);
          Class result((jobject) NULL);

          if (!parseArgs(args, "sZk", ::java::lang::ClassLoader::initializeClass, &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::java::lang::Class::forName(a0, a1, a2));
            return t_Class::wrap_Object(result);
          }
        }
      }

      PyErr_SetArgsError(type, "forName", args);
      return NULL;
    }

    static PyObject *t_Class_getCanonicalName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getCanonicalName());
      return j2p(result);
    }

    static PyObject *t_Class_getClassLoader(t_Class *self)
    {
      ::java::lang::ClassLoader result((jobject) NULL);
      OBJ_CALL(result = self->object.getClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(result);
    }

    static PyObject *t_Class_getClasses(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getClasses());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getComponentType(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getComponentType());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getDeclaredClasses(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaredClasses());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getDeclaringClass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getDeclaringClass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getEnclosingClass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getEnclosingClass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_getEnumConstants(t_Class *self)
    {
      JArray< ::java::lang::Object > result((jobject) NULL);
      OBJ_CALL(result = self->object.getEnumConstants());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_getInterfaces(t_Class *self)
    {
      JArray< Class > result((jobject) NULL);
      OBJ_CALL(result = self->object.getInterfaces());
      return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_getModifiers(t_Class *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getModifiers());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_Class_getName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getName());
      return j2p(result);
    }

    static PyObject *t_Class_getPackage(t_Class *self)
    {
      ::java::lang::Package result((jobject) NULL);
      OBJ_CALL(result = self->object.getPackage());
      return ::java::lang::t_Package::wrap_Object(result);
    }

    static PyObject *t_Class_getResourceAsStream(t_Class *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);
      ::java::io::InputStream result((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(result = self->object.getResourceAsStream(a0));
        return ::java::io::t_InputStream::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "getResourceAsStream", arg);
      return NULL;
    }

    static PyObject *t_Class_getSigners(t_Class *self)
    {
      JArray< ::java::lang::Object > result((jobject) NULL);
      OBJ_CALL(result = self->object.getSigners());
      return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_getSimpleName(t_Class *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getSimpleName());
      return j2p(result);
    }

    static PyObject *t_Class_getSuperclass(t_Class *self)
    {
      Class result((jobject) NULL);
      OBJ_CALL(result = self->object.getSuperclass());
      return t_Class::wrap_Object(result);
    }

    static PyObject *t_Class_isAnnotation(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAnnotation());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isAnonymousClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isAnonymousClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isArray(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isArray());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isAssignableFrom(t_Class *self, PyObject *arg)
    {
      Class a0((jobject) NULL);
      PyTypeObject **p0;
      jboolean result;

      if (!parseArg(arg, "K", Class::initializeClass, &a0, &p0, t_Class::parameters_))
      {
        OBJ_CALL(result = self->object.isAssignableFrom(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isAssignableFrom", arg);
      return NULL;
    }

    static PyObject *t_Class_isEnum(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEnum());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isInstance(t_Class *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.isInstance(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "isInstance", arg);
      return NULL;
    }

    static PyObject *t_Class_isInterface(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isInterface());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isLocalClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isLocalClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isMemberClass(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isMemberClass());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isPrimitive(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isPrimitive());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_isSynthetic(t_Class *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isSynthetic());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_Class_newInstance(t_Class *self)
    {
      ::java::lang::Object result((jobject) NULL);
      OBJ_CALL(result = self->object.newInstance());
      return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
    }

    static PyObject *t_Class_toString(t_Class *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(Class), (PyObject *) self, "toString", args, 2);
    }
    static PyObject *t_Class_get__parameters_(t_Class *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_Class_get__annotation(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAnnotation());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__anonymousClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isAnonymousClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__array(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isArray());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__canonicalName(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getCanonicalName());
      return j2p(value);
    }

    static PyObject *t_Class_get__classLoader(t_Class *self, void *data)
    {
      ::java::lang::ClassLoader value((jobject) NULL);
      OBJ_CALL(value = self->object.getClassLoader());
      return ::java::lang::t_ClassLoader::wrap_Object(value);
    }

    static PyObject *t_Class_get__classes(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getClasses());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__componentType(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getComponentType());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__declaredClasses(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaredClasses());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__declaringClass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getDeclaringClass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__enclosingClass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getEnclosingClass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__enum(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEnum());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__enumConstants(t_Class *self, void *data)
    {
      JArray< ::java::lang::Object > value((jobject) NULL);
      OBJ_CALL(value = self->object.getEnumConstants());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_get__interface(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isInterface());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__interfaces(t_Class *self, void *data)
    {
      JArray< Class > value((jobject) NULL);
      OBJ_CALL(value = self->object.getInterfaces());
      return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
    }

    static PyObject *t_Class_get__localClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isLocalClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__memberClass(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isMemberClass());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__modifiers(t_Class *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getModifiers());
      return PyInt_FromLong((long) value);
    }

    static PyObject *t_Class_get__name(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getName());
      return j2p(value);
    }

    static PyObject *t_Class_get__package(t_Class *self, void *data)
    {
      ::java::lang::Package value((jobject) NULL);
      OBJ_CALL(value = self->object.getPackage());
      return ::java::lang::t_Package::wrap_Object(value);
    }

    static PyObject *t_Class_get__primitive(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isPrimitive());
      Py_RETURN_BOOL(value);
    }

    static PyObject *t_Class_get__signers(t_Class *self, void *data)
    {
      JArray< ::java::lang::Object > value((jobject) NULL);
      OBJ_CALL(value = self->object.getSigners());
      return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
    }

    static PyObject *t_Class_get__simpleName(t_Class *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getSimpleName());
      return j2p(value);
    }

    static PyObject *t_Class_get__superclass(t_Class *self, void *data)
    {
      Class value((jobject) NULL);
      OBJ_CALL(value = self->object.getSuperclass());
      return t_Class::wrap_Object(value);
    }

    static PyObject *t_Class_get__synthetic(t_Class *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isSynthetic());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValue.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValue::class$ = NULL;
          jmethodID *MutableValue::mids$ = NULL;
          jfieldID *MutableValue::fids$ = NULL;
          bool MutableValue::live$ = false;

          jclass MutableValue::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValue");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_compareTo_d590ce63] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/util/mutable/MutableValue;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_exists_54c6a16a] = env->getMethodID(cls, "exists", "()Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_exists] = env->getFieldID(cls, "exists", "Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValue::MutableValue() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValue::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          jint MutableValue::compareTo(const MutableValue & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_d590ce63], a0.this$);
          }

          void MutableValue::copy(const MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          MutableValue MutableValue::duplicate() const
          {
            return MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValue::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jboolean MutableValue::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jboolean MutableValue::exists() const
          {
            return env->callBooleanMethod(this$, mids$[mid_exists_54c6a16a]);
          }

          jint MutableValue::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValue::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          ::java::lang::String MutableValue::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          jboolean MutableValue::_get_exists() const
          {
            return env->getBooleanField(this$, fids$[fid_exists]);
          }

          void MutableValue::_set_exists(jboolean a0) const
          {
            env->setBooleanField(this$, fids$[fid_exists], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValue_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValue_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValue_init_(t_MutableValue *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValue_compareSameType(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_compareTo(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_copy(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_duplicate(t_MutableValue *self);
          static PyObject *t_MutableValue_equals(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_equalsSameType(t_MutableValue *self, PyObject *arg);
          static PyObject *t_MutableValue_exists(t_MutableValue *self);
          static PyObject *t_MutableValue_hashCode(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_toObject(t_MutableValue *self);
          static PyObject *t_MutableValue_toString(t_MutableValue *self, PyObject *args);
          static PyObject *t_MutableValue_get__exists(t_MutableValue *self, void *data);
          static int t_MutableValue_set__exists(t_MutableValue *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValue__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValue, exists),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValue__methods_[] = {
            DECLARE_METHOD(t_MutableValue, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValue, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValue, compareSameType, METH_O),
            DECLARE_METHOD(t_MutableValue, compareTo, METH_O),
            DECLARE_METHOD(t_MutableValue, copy, METH_O),
            DECLARE_METHOD(t_MutableValue, duplicate, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, equals, METH_VARARGS),
            DECLARE_METHOD(t_MutableValue, equalsSameType, METH_O),
            DECLARE_METHOD(t_MutableValue, exists, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValue, toObject, METH_NOARGS),
            DECLARE_METHOD(t_MutableValue, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValue, t_MutableValue, ::java::lang::Object, MutableValue, t_MutableValue_init_, 0, 0, t_MutableValue__fields_, 0, 0);

          void t_MutableValue::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValue), module, "MutableValue", 0);
          }

          void t_MutableValue::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValue).tp_dict, "class_", make_descriptor(MutableValue::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValue).tp_dict, "wrapfn_", make_descriptor(t_MutableValue::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValue).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValue_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValue::initializeClass, 1)))
              return NULL;
            return t_MutableValue::wrap_Object(MutableValue(((t_MutableValue *) arg)->object.this$));
          }
          static PyObject *t_MutableValue_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValue::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValue_init_(t_MutableValue *self, PyObject *args, PyObject *kwds)
          {
            MutableValue object((jobject) NULL);

            INT_CALL(object = MutableValue());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValue_compareSameType(t_MutableValue *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareSameType", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_compareTo(t_MutableValue *self, PyObject *arg)
          {
            MutableValue a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_copy(t_MutableValue *self, PyObject *arg)
          {
            MutableValue a0((jobject) NULL);

            if (!parseArg(arg, "k", MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copy", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_duplicate(t_MutableValue *self)
          {
            MutableValue result((jobject) NULL);
            OBJ_CALL(result = self->object.duplicate());
            return t_MutableValue::wrap_Object(result);
          }

          static PyObject *t_MutableValue_equals(t_MutableValue *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValue), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_MutableValue_equalsSameType(t_MutableValue *self, PyObject *arg)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "equalsSameType", arg);
            return NULL;
          }

          static PyObject *t_MutableValue_exists(t_MutableValue *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.exists());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_MutableValue_hashCode(t_MutableValue *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValue), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValue_toObject(t_MutableValue *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.toObject());
            return ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_MutableValue_toString(t_MutableValue *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(MutableValue), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_MutableValue_get__exists(t_MutableValue *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object._get_exists());
            Py_RETURN_BOOL(value);
          }
          static int t_MutableValue_set__exists(t_MutableValue *self, PyObject *arg, void *data)
          {
            jboolean value;
            if (!parseArg(arg, "Z", &value))
            {
              INT_CALL(self->object._set_exists(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "exists", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *ProximityQueryNode$Type::class$ = NULL;
              jmethodID *ProximityQueryNode$Type::mids$ = NULL;
              bool ProximityQueryNode$Type::live$ = false;
              ProximityQueryNode$Type *ProximityQueryNode$Type::NUMBER = NULL;
              ProximityQueryNode$Type *ProximityQueryNode$Type::PARAGRAPH = NULL;
              ProximityQueryNode$Type *ProximityQueryNode$Type::SENTENCE = NULL;

              jclass ProximityQueryNode$Type::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_valueOf_e143b857] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");
                  mids$[mid_values_83915b61] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  NUMBER = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "NUMBER", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  PARAGRAPH = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "PARAGRAPH", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  SENTENCE = new ProximityQueryNode$Type(env->getStaticObjectField(cls, "SENTENCE", "Lorg/apache/lucene/queryparser/flexible/core/nodes/ProximityQueryNode$Type;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ProximityQueryNode$Type ProximityQueryNode$Type::valueOf(const ::java::lang::String & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ProximityQueryNode$Type(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e143b857], a0.this$));
              }

              JArray< ProximityQueryNode$Type > ProximityQueryNode$Type::values()
              {
                jclass cls = env->getClass(initializeClass);
                return JArray< ProximityQueryNode$Type >(env->callStaticObjectMethod(cls, mids$[mid_values_83915b61]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_ProximityQueryNode$Type_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$Type_instance_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ProximityQueryNode$Type_of_(t_ProximityQueryNode$Type *self, PyObject *args);
              static PyObject *t_ProximityQueryNode$Type_valueOf(PyTypeObject *type, PyObject *args);
              static PyObject *t_ProximityQueryNode$Type_values(PyTypeObject *type);
              static PyObject *t_ProximityQueryNode$Type_get__parameters_(t_ProximityQueryNode$Type *self, void *data);
              static PyGetSetDef t_ProximityQueryNode$Type__fields_[] = {
                DECLARE_GET_FIELD(t_ProximityQueryNode$Type, parameters_),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_ProximityQueryNode$Type__methods_[] = {
                DECLARE_METHOD(t_ProximityQueryNode$Type, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, of_, METH_VARARGS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, valueOf, METH_VARARGS | METH_CLASS),
                DECLARE_METHOD(t_ProximityQueryNode$Type, values, METH_NOARGS | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ProximityQueryNode$Type, t_ProximityQueryNode$Type, ::java::lang::Enum, ProximityQueryNode$Type, abstract_init, 0, 0, t_ProximityQueryNode$Type__fields_, 0, 0);
              PyObject *t_ProximityQueryNode$Type::wrap_Object(const ProximityQueryNode$Type& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ProximityQueryNode$Type::wrap_Object(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ProximityQueryNode$Type *self = (t_ProximityQueryNode$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              PyObject *t_ProximityQueryNode$Type::wrap_jobject(const jobject& object, PyTypeObject *p0)
              {
                PyObject *obj = t_ProximityQueryNode$Type::wrap_jobject(object);
                if (obj != NULL && obj != Py_None)
                {
                  t_ProximityQueryNode$Type *self = (t_ProximityQueryNode$Type *) obj;
                  self->parameters[0] = p0;
                }
                return obj;
              }

              void t_ProximityQueryNode$Type::install(PyObject *module)
              {
                installType(&PY_TYPE(ProximityQueryNode$Type), module, "ProximityQueryNode$Type", 0);
              }

              void t_ProximityQueryNode$Type::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "class_", make_descriptor(ProximityQueryNode$Type::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "wrapfn_", make_descriptor(t_ProximityQueryNode$Type::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(ProximityQueryNode$Type::initializeClass);
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "NUMBER", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::NUMBER)));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "PARAGRAPH", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::PARAGRAPH)));
                PyDict_SetItemString(PY_TYPE(ProximityQueryNode$Type).tp_dict, "SENTENCE", make_descriptor(t_ProximityQueryNode$Type::wrap_Object(*ProximityQueryNode$Type::SENTENCE)));
              }

              static PyObject *t_ProximityQueryNode$Type_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ProximityQueryNode$Type::initializeClass, 1)))
                  return NULL;
                return t_ProximityQueryNode$Type::wrap_Object(ProximityQueryNode$Type(((t_ProximityQueryNode$Type *) arg)->object.this$));
              }
              static PyObject *t_ProximityQueryNode$Type_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ProximityQueryNode$Type::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static PyObject *t_ProximityQueryNode$Type_of_(t_ProximityQueryNode$Type *self, PyObject *args)
              {
                if (!parseArg(args, "T", 1, &(self->parameters)))
                  Py_RETURN_SELF;
                return PyErr_SetArgsError((PyObject *) self, "of_", args);
              }

              static PyObject *t_ProximityQueryNode$Type_valueOf(PyTypeObject *type, PyObject *args)
              {
                ::java::lang::String a0((jobject) NULL);
                ProximityQueryNode$Type result((jobject) NULL);

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::valueOf(a0));
                  return t_ProximityQueryNode$Type::wrap_Object(result);
                }

                return callSuper(type, "valueOf", args, 2);
              }

              static PyObject *t_ProximityQueryNode$Type_values(PyTypeObject *type)
              {
                JArray< ProximityQueryNode$Type > result((jobject) NULL);
                OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::core::nodes::ProximityQueryNode$Type::values());
                return JArray<jobject>(result.this$).wrap(t_ProximityQueryNode$Type::wrap_jobject);
              }
              static PyObject *t_ProximityQueryNode$Type_get__parameters_(t_ProximityQueryNode$Type *self, void *data)
              {
                return typeParameters(self->parameters, sizeof(self->parameters));
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/LinearFloatFunction.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *LinearFloatFunction::class$ = NULL;
            jmethodID *LinearFloatFunction::mids$ = NULL;
            bool LinearFloatFunction::live$ = false;

            jclass LinearFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/LinearFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_bdda54b0] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;FF)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LinearFloatFunction::LinearFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, jfloat a1, jfloat a2) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_bdda54b0, a0.this$, a1, a2)) {}

            void LinearFloatFunction::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String LinearFloatFunction::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean LinearFloatFunction::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            ::org::apache::lucene::queries::function::FunctionValues LinearFloatFunction::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint LinearFloatFunction::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_LinearFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LinearFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_LinearFloatFunction_init_(t_LinearFloatFunction *self, PyObject *args, PyObject *kwds);
            static PyObject *t_LinearFloatFunction_createWeight(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_description(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_equals(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_getValues(t_LinearFloatFunction *self, PyObject *args);
            static PyObject *t_LinearFloatFunction_hashCode(t_LinearFloatFunction *self, PyObject *args);

            static PyMethodDef t_LinearFloatFunction__methods_[] = {
              DECLARE_METHOD(t_LinearFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LinearFloatFunction, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LinearFloatFunction, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, description, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, equals, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, getValues, METH_VARARGS),
              DECLARE_METHOD(t_LinearFloatFunction, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LinearFloatFunction, t_LinearFloatFunction, ::org::apache::lucene::queries::function::ValueSource, LinearFloatFunction, t_LinearFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_LinearFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(LinearFloatFunction), module, "LinearFloatFunction", 0);
            }

            void t_LinearFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LinearFloatFunction).tp_dict, "class_", make_descriptor(LinearFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LinearFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_LinearFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LinearFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_LinearFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LinearFloatFunction::initializeClass, 1)))
                return NULL;
              return t_LinearFloatFunction::wrap_Object(LinearFloatFunction(((t_LinearFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_LinearFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LinearFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_LinearFloatFunction_init_(t_LinearFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              jfloat a1;
              jfloat a2;
              LinearFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kFF", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = LinearFloatFunction(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_LinearFloatFunction_createWeight(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_LinearFloatFunction_description(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_LinearFloatFunction_equals(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_LinearFloatFunction_getValues(t_LinearFloatFunction *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_LinearFloatFunction_hashCode(t_LinearFloatFunction *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(LinearFloatFunction), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionLengthAttribute.h"
#include "org/apache/lucene/analysis/tokenattributes/OffsetAttribute.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "org/apache/lucene/analysis/tokenattributes/TypeAttribute.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {

          ::java::lang::Class *PackedTokenAttributeImpl::class$ = NULL;
          jmethodID *PackedTokenAttributeImpl::mids$ = NULL;
          bool PackedTokenAttributeImpl::live$ = false;

          jclass PackedTokenAttributeImpl::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_clone_2353e953] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/tokenattributes/PackedTokenAttributeImpl;");
              mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
              mids$[mid_endOffset_54c6a179] = env->getMethodID(cls, "endOffset", "()I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getPositionIncrement_54c6a179] = env->getMethodID(cls, "getPositionIncrement", "()I");
              mids$[mid_getPositionLength_54c6a179] = env->getMethodID(cls, "getPositionLength", "()I");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");
              mids$[mid_setOffset_d8d154a6] = env->getMethodID(cls, "setOffset", "(II)V");
              mids$[mid_setPositionIncrement_39c7bd3c] = env->getMethodID(cls, "setPositionIncrement", "(I)V");
              mids$[mid_setPositionLength_39c7bd3c] = env->getMethodID(cls, "setPositionLength", "(I)V");
              mids$[mid_setType_5fdc3f48] = env->getMethodID(cls, "setType", "(Ljava/lang/String;)V");
              mids$[mid_startOffset_54c6a179] = env->getMethodID(cls, "startOffset", "()I");
              mids$[mid_type_14c7b5c5] = env->getMethodID(cls, "type", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PackedTokenAttributeImpl::PackedTokenAttributeImpl() : ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PackedTokenAttributeImpl::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          PackedTokenAttributeImpl PackedTokenAttributeImpl::clone() const
          {
            return PackedTokenAttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_2353e953]));
          }

          void PackedTokenAttributeImpl::copyTo(const ::org::apache::lucene::util::AttributeImpl & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
          }

          jint PackedTokenAttributeImpl::endOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_endOffset_54c6a179]);
          }

          jboolean PackedTokenAttributeImpl::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint PackedTokenAttributeImpl::getPositionIncrement() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionIncrement_54c6a179]);
          }

          jint PackedTokenAttributeImpl::getPositionLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPositionLength_54c6a179]);
          }

          jint PackedTokenAttributeImpl::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          void PackedTokenAttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
          }

          void PackedTokenAttributeImpl::setOffset(jint a0, jint a1) const
          {
            env->callVoidMethod(this$, mids$[mid_setOffset_d8d154a6], a0, a1);
          }

          void PackedTokenAttributeImpl::setPositionIncrement(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionIncrement_39c7bd3c], a0);
          }

          void PackedTokenAttributeImpl::setPositionLength(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setPositionLength_39c7bd3c], a0);
          }

          void PackedTokenAttributeImpl::setType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setType_5fdc3f48], a0.this$);
          }

          jint PackedTokenAttributeImpl::startOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_startOffset_54c6a179]);
          }

          ::java::lang::String PackedTokenAttributeImpl::type() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_type_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace tokenattributes {
          static PyObject *t_PackedTokenAttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PackedTokenAttributeImpl_init_(t_PackedTokenAttributeImpl *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PackedTokenAttributeImpl_clear(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_clone(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_copyTo(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_endOffset(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_equals(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_getPositionIncrement(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_getPositionLength(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_hashCode(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_reflectWith(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_setOffset(t_PackedTokenAttributeImpl *self, PyObject *args);
          static PyObject *t_PackedTokenAttributeImpl_setPositionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_setPositionLength(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_setType(t_PackedTokenAttributeImpl *self, PyObject *arg);
          static PyObject *t_PackedTokenAttributeImpl_startOffset(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_type(t_PackedTokenAttributeImpl *self);
          static PyObject *t_PackedTokenAttributeImpl_get__positionIncrement(t_PackedTokenAttributeImpl *self, void *data);
          static int t_PackedTokenAttributeImpl_set__positionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data);
          static PyObject *t_PackedTokenAttributeImpl_get__positionLength(t_PackedTokenAttributeImpl *self, void *data);
          static int t_PackedTokenAttributeImpl_set__positionLength(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data);
          static PyGetSetDef t_PackedTokenAttributeImpl__fields_[] = {
            DECLARE_GETSET_FIELD(t_PackedTokenAttributeImpl, positionIncrement),
            DECLARE_GETSET_FIELD(t_PackedTokenAttributeImpl, positionLength),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PackedTokenAttributeImpl__methods_[] = {
            DECLARE_METHOD(t_PackedTokenAttributeImpl, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, clear, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, clone, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, copyTo, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, endOffset, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, equals, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, getPositionIncrement, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, getPositionLength, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, reflectWith, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setOffset, METH_VARARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setPositionIncrement, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setPositionLength, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, setType, METH_O),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, startOffset, METH_NOARGS),
            DECLARE_METHOD(t_PackedTokenAttributeImpl, type, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PackedTokenAttributeImpl, t_PackedTokenAttributeImpl, ::org::apache::lucene::analysis::tokenattributes::CharTermAttributeImpl, PackedTokenAttributeImpl, t_PackedTokenAttributeImpl_init_, 0, 0, t_PackedTokenAttributeImpl__fields_, 0, 0);

          void t_PackedTokenAttributeImpl::install(PyObject *module)
          {
            installType(&PY_TYPE(PackedTokenAttributeImpl), module, "PackedTokenAttributeImpl", 0);
          }

          void t_PackedTokenAttributeImpl::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PackedTokenAttributeImpl).tp_dict, "class_", make_descriptor(PackedTokenAttributeImpl::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PackedTokenAttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_PackedTokenAttributeImpl::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PackedTokenAttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PackedTokenAttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PackedTokenAttributeImpl::initializeClass, 1)))
              return NULL;
            return t_PackedTokenAttributeImpl::wrap_Object(PackedTokenAttributeImpl(((t_PackedTokenAttributeImpl *) arg)->object.this$));
          }
          static PyObject *t_PackedTokenAttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PackedTokenAttributeImpl::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PackedTokenAttributeImpl_init_(t_PackedTokenAttributeImpl *self, PyObject *args, PyObject *kwds)
          {
            PackedTokenAttributeImpl object((jobject) NULL);

            INT_CALL(object = PackedTokenAttributeImpl());
            self->object = object;

            return 0;
          }

          static PyObject *t_PackedTokenAttributeImpl_clear(t_PackedTokenAttributeImpl *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_clone(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            PackedTokenAttributeImpl result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.clone());
              return t_PackedTokenAttributeImpl::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "clone", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_copyTo(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeImpl a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeImpl::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copyTo(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "copyTo", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_endOffset(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.endOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_equals(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_getPositionIncrement(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionIncrement());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_getPositionLength(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPositionLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_hashCode(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_reflectWith(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
            {
              OBJ_CALL(self->object.reflectWith(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PackedTokenAttributeImpl), (PyObject *) self, "reflectWith", args, 2);
          }

          static PyObject *t_PackedTokenAttributeImpl_setOffset(t_PackedTokenAttributeImpl *self, PyObject *args)
          {
            jint a0;
            jint a1;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(self->object.setOffset(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOffset", args);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setPositionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionIncrement(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionIncrement", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setPositionLength(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setPositionLength(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPositionLength", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_setType(t_PackedTokenAttributeImpl *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setType", arg);
            return NULL;
          }

          static PyObject *t_PackedTokenAttributeImpl_startOffset(t_PackedTokenAttributeImpl *self)
          {
            jint result;
            OBJ_CALL(result = self->object.startOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_PackedTokenAttributeImpl_type(t_PackedTokenAttributeImpl *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.type());
            return j2p(result);
          }

          static PyObject *t_PackedTokenAttributeImpl_get__positionIncrement(t_PackedTokenAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionIncrement());
            return PyInt_FromLong((long) value);
          }
          static int t_PackedTokenAttributeImpl_set__positionIncrement(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionIncrement(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionIncrement", arg);
            return -1;
          }

          static PyObject *t_PackedTokenAttributeImpl_get__positionLength(t_PackedTokenAttributeImpl *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPositionLength());
            return PyInt_FromLong((long) value);
          }
          static int t_PackedTokenAttributeImpl_set__positionLength(t_PackedTokenAttributeImpl *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setPositionLength(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "positionLength", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *IntsRefFSTEnum::class$ = NULL;
          jmethodID *IntsRefFSTEnum::mids$ = NULL;
          bool IntsRefFSTEnum::live$ = false;

          jclass IntsRefFSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/IntsRefFSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d454d65c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/fst/FST;)V");
              mids$[mid_current_4ce4ab35] = env->getMethodID(cls, "current", "()Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_next_4ce4ab35] = env->getMethodID(cls, "next", "()Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekCeil_8b422fd3] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekExact_8b422fd3] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_seekFloor_8b422fd3] = env->getMethodID(cls, "seekFloor", "(Lorg/apache/lucene/util/IntsRef;)Lorg/apache/lucene/util/fst/IntsRefFSTEnum$InputOutput;");
              mids$[mid_grow_54c6a166] = env->getMethodID(cls, "grow", "()V");
              mids$[mid_getTargetLabel_54c6a179] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_getCurrentLabel_54c6a179] = env->getMethodID(cls, "getCurrentLabel", "()I");
              mids$[mid_setCurrentLabel_39c7bd3c] = env->getMethodID(cls, "setCurrentLabel", "(I)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          IntsRefFSTEnum::IntsRefFSTEnum(const ::org::apache::lucene::util::fst::FST & a0) : ::org::apache::lucene::util::fst::FSTEnum(env->newObject(initializeClass, &mids$, mid_init$_d454d65c, a0.this$)) {}

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::current() const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_current_4ce4ab35]));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::next() const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_next_4ce4ab35]));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekCeil(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekCeil_8b422fd3], a0.this$));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekExact(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekExact_8b422fd3], a0.this$));
          }

          ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput IntsRefFSTEnum::seekFloor(const ::org::apache::lucene::util::IntsRef & a0) const
          {
            return ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput(env->callObjectMethod(this$, mids$[mid_seekFloor_8b422fd3], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_IntsRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_of_(t_IntsRefFSTEnum *self, PyObject *args);
          static int t_IntsRefFSTEnum_init_(t_IntsRefFSTEnum *self, PyObject *args, PyObject *kwds);
          static PyObject *t_IntsRefFSTEnum_current(t_IntsRefFSTEnum *self);
          static PyObject *t_IntsRefFSTEnum_next(t_IntsRefFSTEnum *self);
          static PyObject *t_IntsRefFSTEnum_seekCeil(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_seekExact(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_seekFloor(t_IntsRefFSTEnum *self, PyObject *arg);
          static PyObject *t_IntsRefFSTEnum_get__parameters_(t_IntsRefFSTEnum *self, void *data);
          static PyGetSetDef t_IntsRefFSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_IntsRefFSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_IntsRefFSTEnum__methods_[] = {
            DECLARE_METHOD(t_IntsRefFSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IntsRefFSTEnum, of_, METH_VARARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, current, METH_NOARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, next, METH_NOARGS),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekCeil, METH_O),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekExact, METH_O),
            DECLARE_METHOD(t_IntsRefFSTEnum, seekFloor, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(IntsRefFSTEnum, t_IntsRefFSTEnum, ::org::apache::lucene::util::fst::FSTEnum, IntsRefFSTEnum, t_IntsRefFSTEnum_init_, PyObject_SelfIter, ((PyObject *(*)(t_IntsRefFSTEnum *)) get_generic_next< t_IntsRefFSTEnum,::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput,::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput >), t_IntsRefFSTEnum__fields_, 0, 0);
          PyObject *t_IntsRefFSTEnum::wrap_Object(const IntsRefFSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum *self = (t_IntsRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_IntsRefFSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_IntsRefFSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_IntsRefFSTEnum *self = (t_IntsRefFSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_IntsRefFSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(IntsRefFSTEnum), module, "IntsRefFSTEnum", 0);
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "InputOutput", make_descriptor(&PY_TYPE(IntsRefFSTEnum$InputOutput)));
          }

          void t_IntsRefFSTEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "class_", make_descriptor(IntsRefFSTEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "wrapfn_", make_descriptor(t_IntsRefFSTEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IntsRefFSTEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_IntsRefFSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, IntsRefFSTEnum::initializeClass, 1)))
              return NULL;
            return t_IntsRefFSTEnum::wrap_Object(IntsRefFSTEnum(((t_IntsRefFSTEnum *) arg)->object.this$));
          }
          static PyObject *t_IntsRefFSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, IntsRefFSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_IntsRefFSTEnum_of_(t_IntsRefFSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_IntsRefFSTEnum_init_(t_IntsRefFSTEnum *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::fst::FST a0((jobject) NULL);
            PyTypeObject **p0;
            IntsRefFSTEnum object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::fst::FST::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST::parameters_))
            {
              INT_CALL(object = IntsRefFSTEnum(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_IntsRefFSTEnum_current(t_IntsRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.current());
            return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_IntsRefFSTEnum_next(t_IntsRefFSTEnum *self)
          {
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
          }

          static PyObject *t_IntsRefFSTEnum_seekCeil(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekCeil(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
            return NULL;
          }

          static PyObject *t_IntsRefFSTEnum_seekExact(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekExact(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekExact", arg);
            return NULL;
          }

          static PyObject *t_IntsRefFSTEnum_seekFloor(t_IntsRefFSTEnum *self, PyObject *arg)
          {
            ::org::apache::lucene::util::IntsRef a0((jobject) NULL);
            ::org::apache::lucene::util::fst::IntsRefFSTEnum$InputOutput result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::IntsRef::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.seekFloor(a0));
              return ::org::apache::lucene::util::fst::t_IntsRefFSTEnum$InputOutput::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "seekFloor", arg);
            return NULL;
          }
          static PyObject *t_IntsRefFSTEnum_get__parameters_(t_IntsRefFSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder.h"
#include "org/apache/lucene/search/vectorhighlight/BoundaryScanner.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldFragList$WeightedFragInfo.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *SimpleFragmentsBuilder::class$ = NULL;
          jmethodID *SimpleFragmentsBuilder::mids$ = NULL;
          bool SimpleFragmentsBuilder::live$ = false;

          jclass SimpleFragmentsBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/SimpleFragmentsBuilder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_7f580ee7] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_init$_60fab432] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;)V");
              mids$[mid_init$_b03db8ab] = env->getMethodID(cls, "<init>", "([Ljava/lang/String;[Ljava/lang/String;Lorg/apache/lucene/search/vectorhighlight/BoundaryScanner;)V");
              mids$[mid_getWeightedFragInfoList_4f378251] = env->getMethodID(cls, "getWeightedFragInfoList", "(Ljava/util/List;)Ljava/util/List;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleFragmentsBuilder::SimpleFragmentsBuilder() : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a0) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_7f580ee7, a0.this$)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_60fab432, a0.this$, a1.this$)) {}

          SimpleFragmentsBuilder::SimpleFragmentsBuilder(const JArray< ::java::lang::String > & a0, const JArray< ::java::lang::String > & a1, const ::org::apache::lucene::search::vectorhighlight::BoundaryScanner & a2) : ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder(env->newObject(initializeClass, &mids$, mid_init$_b03db8ab, a0.this$, a1.this$, a2.this$)) {}

          ::java::util::List SimpleFragmentsBuilder::getWeightedFragInfoList(const ::java::util::List & a0) const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getWeightedFragInfoList_4f378251], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_SimpleFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleFragmentsBuilder_init_(t_SimpleFragmentsBuilder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleFragmentsBuilder_getWeightedFragInfoList(t_SimpleFragmentsBuilder *self, PyObject *args);

          static PyMethodDef t_SimpleFragmentsBuilder__methods_[] = {
            DECLARE_METHOD(t_SimpleFragmentsBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmentsBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleFragmentsBuilder, getWeightedFragInfoList, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleFragmentsBuilder, t_SimpleFragmentsBuilder, ::org::apache::lucene::search::vectorhighlight::BaseFragmentsBuilder, SimpleFragmentsBuilder, t_SimpleFragmentsBuilder_init_, 0, 0, 0, 0, 0);

          void t_SimpleFragmentsBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleFragmentsBuilder), module, "SimpleFragmentsBuilder", 0);
          }

          void t_SimpleFragmentsBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleFragmentsBuilder).tp_dict, "class_", make_descriptor(SimpleFragmentsBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleFragmentsBuilder).tp_dict, "wrapfn_", make_descriptor(t_SimpleFragmentsBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleFragmentsBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleFragmentsBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleFragmentsBuilder::initializeClass, 1)))
              return NULL;
            return t_SimpleFragmentsBuilder::wrap_Object(SimpleFragmentsBuilder(((t_SimpleFragmentsBuilder *) arg)->object.this$));
          }
          static PyObject *t_SimpleFragmentsBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleFragmentsBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleFragmentsBuilder_init_(t_SimpleFragmentsBuilder *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                SimpleFragmentsBuilder object((jobject) NULL);

                INT_CALL(object = SimpleFragmentsBuilder());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a0((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[s", &a0, &a1))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                JArray< ::java::lang::String > a1((jobject) NULL);
                ::org::apache::lucene::search::vectorhighlight::BoundaryScanner a2((jobject) NULL);
                SimpleFragmentsBuilder object((jobject) NULL);

                if (!parseArgs(args, "[s[sk", ::org::apache::lucene::search::vectorhighlight::BoundaryScanner::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SimpleFragmentsBuilder(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleFragmentsBuilder_getWeightedFragInfoList(t_SimpleFragmentsBuilder *self, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_))
            {
              OBJ_CALL(result = self->object.getWeightedFragInfoList(a0));
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldFragList$WeightedFragInfo));
            }

            return callSuper(&PY_TYPE(SimpleFragmentsBuilder), (PyObject *) self, "getWeightedFragInfoList", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/th/ThaiTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/Tokenizer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {

          ::java::lang::Class *ThaiTokenizerFactory::class$ = NULL;
          jmethodID *ThaiTokenizerFactory::mids$ = NULL;
          bool ThaiTokenizerFactory::live$ = false;

          jclass ThaiTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/th/ThaiTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_e51780e9] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ThaiTokenizerFactory::ThaiTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::Tokenizer ThaiTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::Tokenizer(env->callObjectMethod(this$, mids$[mid_create_e51780e9], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace th {
          static PyObject *t_ThaiTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ThaiTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ThaiTokenizerFactory_init_(t_ThaiTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ThaiTokenizerFactory_create(t_ThaiTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_ThaiTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_ThaiTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ThaiTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ThaiTokenizerFactory, t_ThaiTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, ThaiTokenizerFactory, t_ThaiTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_ThaiTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ThaiTokenizerFactory), module, "ThaiTokenizerFactory", 0);
          }

          void t_ThaiTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ThaiTokenizerFactory).tp_dict, "class_", make_descriptor(ThaiTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_ThaiTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ThaiTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ThaiTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ThaiTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_ThaiTokenizerFactory::wrap_Object(ThaiTokenizerFactory(((t_ThaiTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_ThaiTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ThaiTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ThaiTokenizerFactory_init_(t_ThaiTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ThaiTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ThaiTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ThaiTokenizerFactory_create(t_ThaiTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::Tokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::t_Tokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ThaiTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$DocValuesStatus.h"
#include "java/util/Map.h"
#include "org/apache/lucene/index/CheckIndex$Status$FieldNormStatus.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/Codec.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermIndexStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$SegmentInfoStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$SegmentInfoStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$SegmentInfoStatus::fids$ = NULL;
        bool CheckIndex$Status$SegmentInfoStatus::live$ = false;

        jclass CheckIndex$Status$SegmentInfoStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$SegmentInfoStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_codec] = env->getFieldID(cls, "codec", "Lorg/apache/lucene/codecs/Codec;");
            fids$[fid_compound] = env->getFieldID(cls, "compound", "Z");
            fids$[fid_deletionsGen] = env->getFieldID(cls, "deletionsGen", "J");
            fids$[fid_diagnostics] = env->getFieldID(cls, "diagnostics", "Ljava/util/Map;");
            fids$[fid_docCount] = env->getFieldID(cls, "docCount", "I");
            fids$[fid_docStoreCompoundFile] = env->getFieldID(cls, "docStoreCompoundFile", "Z");
            fids$[fid_docStoreOffset] = env->getFieldID(cls, "docStoreOffset", "I");
            fids$[fid_docStoreSegment] = env->getFieldID(cls, "docStoreSegment", "Ljava/lang/String;");
            fids$[fid_docValuesStatus] = env->getFieldID(cls, "docValuesStatus", "Lorg/apache/lucene/index/CheckIndex$Status$DocValuesStatus;");
            fids$[fid_fieldNormStatus] = env->getFieldID(cls, "fieldNormStatus", "Lorg/apache/lucene/index/CheckIndex$Status$FieldNormStatus;");
            fids$[fid_hasDeletions] = env->getFieldID(cls, "hasDeletions", "Z");
            fids$[fid_name] = env->getFieldID(cls, "name", "Ljava/lang/String;");
            fids$[fid_numDeleted] = env->getFieldID(cls, "numDeleted", "I");
            fids$[fid_numFiles] = env->getFieldID(cls, "numFiles", "I");
            fids$[fid_openReaderPassed] = env->getFieldID(cls, "openReaderPassed", "Z");
            fids$[fid_sizeMB] = env->getFieldID(cls, "sizeMB", "D");
            fids$[fid_storedFieldStatus] = env->getFieldID(cls, "storedFieldStatus", "Lorg/apache/lucene/index/CheckIndex$Status$StoredFieldStatus;");
            fids$[fid_termIndexStatus] = env->getFieldID(cls, "termIndexStatus", "Lorg/apache/lucene/index/CheckIndex$Status$TermIndexStatus;");
            fids$[fid_termVectorStatus] = env->getFieldID(cls, "termVectorStatus", "Lorg/apache/lucene/index/CheckIndex$Status$TermVectorStatus;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::codecs::Codec CheckIndex$Status$SegmentInfoStatus::_get_codec() const
        {
          return ::org::apache::lucene::codecs::Codec(env->getObjectField(this$, fids$[fid_codec]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_codec(const ::org::apache::lucene::codecs::Codec & a0) const
        {
          env->setObjectField(this$, fids$[fid_codec], a0.this$);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_compound() const
        {
          return env->getBooleanField(this$, fids$[fid_compound]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_compound(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_compound], a0);
        }

        jlong CheckIndex$Status$SegmentInfoStatus::_get_deletionsGen() const
        {
          return env->getLongField(this$, fids$[fid_deletionsGen]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_deletionsGen(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_deletionsGen], a0);
        }

        ::java::util::Map CheckIndex$Status$SegmentInfoStatus::_get_diagnostics() const
        {
          return ::java::util::Map(env->getObjectField(this$, fids$[fid_diagnostics]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_diagnostics(const ::java::util::Map & a0) const
        {
          env->setObjectField(this$, fids$[fid_diagnostics], a0.this$);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_docCount() const
        {
          return env->getIntField(this$, fids$[fid_docCount]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docCount], a0);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_docStoreCompoundFile() const
        {
          return env->getBooleanField(this$, fids$[fid_docStoreCompoundFile]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docStoreCompoundFile(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_docStoreCompoundFile], a0);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_docStoreOffset() const
        {
          return env->getIntField(this$, fids$[fid_docStoreOffset]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docStoreOffset(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docStoreOffset], a0);
        }

        ::java::lang::String CheckIndex$Status$SegmentInfoStatus::_get_docStoreSegment() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_docStoreSegment]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docStoreSegment(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_docStoreSegment], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus CheckIndex$Status$SegmentInfoStatus::_get_docValuesStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus(env->getObjectField(this$, fids$[fid_docValuesStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_docValuesStatus(const ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_docValuesStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus CheckIndex$Status$SegmentInfoStatus::_get_fieldNormStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus(env->getObjectField(this$, fids$[fid_fieldNormStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_fieldNormStatus(const ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_fieldNormStatus], a0.this$);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_hasDeletions() const
        {
          return env->getBooleanField(this$, fids$[fid_hasDeletions]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_hasDeletions(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_hasDeletions], a0);
        }

        ::java::lang::String CheckIndex$Status$SegmentInfoStatus::_get_name() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_name]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_name(const ::java::lang::String & a0) const
        {
          env->setObjectField(this$, fids$[fid_name], a0.this$);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_numDeleted() const
        {
          return env->getIntField(this$, fids$[fid_numDeleted]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_numDeleted(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numDeleted], a0);
        }

        jint CheckIndex$Status$SegmentInfoStatus::_get_numFiles() const
        {
          return env->getIntField(this$, fids$[fid_numFiles]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_numFiles(jint a0) const
        {
          env->setIntField(this$, fids$[fid_numFiles], a0);
        }

        jboolean CheckIndex$Status$SegmentInfoStatus::_get_openReaderPassed() const
        {
          return env->getBooleanField(this$, fids$[fid_openReaderPassed]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_openReaderPassed(jboolean a0) const
        {
          env->setBooleanField(this$, fids$[fid_openReaderPassed], a0);
        }

        jdouble CheckIndex$Status$SegmentInfoStatus::_get_sizeMB() const
        {
          return env->getDoubleField(this$, fids$[fid_sizeMB]);
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_sizeMB(jdouble a0) const
        {
          env->setDoubleField(this$, fids$[fid_sizeMB], a0);
        }

        ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus CheckIndex$Status$SegmentInfoStatus::_get_storedFieldStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus(env->getObjectField(this$, fids$[fid_storedFieldStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_storedFieldStatus(const ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_storedFieldStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus CheckIndex$Status$SegmentInfoStatus::_get_termIndexStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus(env->getObjectField(this$, fids$[fid_termIndexStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_termIndexStatus(const ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_termIndexStatus], a0.this$);
        }

        ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus CheckIndex$Status$SegmentInfoStatus::_get_termVectorStatus() const
        {
          return ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus(env->getObjectField(this$, fids$[fid_termVectorStatus]));
        }

        void CheckIndex$Status$SegmentInfoStatus::_set_termVectorStatus(const ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus & a0) const
        {
          env->setObjectField(this$, fids$[fid_termVectorStatus], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__codec(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__codec(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__compound(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__compound(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__name(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__name(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data);
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$SegmentInfoStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, codec),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, compound),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, deletionsGen),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, diagnostics),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docStoreCompoundFile),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docStoreOffset),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docStoreSegment),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, docValuesStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, fieldNormStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, hasDeletions),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, name),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, numDeleted),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, numFiles),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, openReaderPassed),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, sizeMB),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, storedFieldStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, termIndexStatus),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$SegmentInfoStatus, termVectorStatus),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$SegmentInfoStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$SegmentInfoStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$SegmentInfoStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$SegmentInfoStatus, t_CheckIndex$Status$SegmentInfoStatus, ::java::lang::Object, CheckIndex$Status$SegmentInfoStatus, abstract_init, 0, 0, t_CheckIndex$Status$SegmentInfoStatus__fields_, 0, 0);

        void t_CheckIndex$Status$SegmentInfoStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$SegmentInfoStatus), module, "CheckIndex$Status$SegmentInfoStatus", 0);
        }

        void t_CheckIndex$Status$SegmentInfoStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$SegmentInfoStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$SegmentInfoStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$SegmentInfoStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$SegmentInfoStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$SegmentInfoStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$SegmentInfoStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$SegmentInfoStatus::wrap_Object(CheckIndex$Status$SegmentInfoStatus(((t_CheckIndex$Status$SegmentInfoStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$SegmentInfoStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__codec(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          OBJ_CALL(value = self->object._get_codec());
          return ::org::apache::lucene::codecs::t_Codec::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__codec(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::codecs::Codec value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::codecs::Codec::initializeClass, &value))
          {
            INT_CALL(self->object._set_codec(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "codec", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__compound(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_compound());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__compound(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_compound(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "compound", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_deletionsGen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__deletionsGen(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_deletionsGen(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "deletionsGen", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          OBJ_CALL(value = self->object._get_diagnostics());
          return ::java::util::t_Map::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__diagnostics(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::util::Map value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::util::Map::initializeClass, &value))
          {
            INT_CALL(self->object._set_diagnostics(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "diagnostics", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docCount(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_docStoreCompoundFile());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreCompoundFile(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_docStoreCompoundFile(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docStoreCompoundFile", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docStoreOffset());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreOffset(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docStoreOffset(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docStoreOffset", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docStoreSegment());
          return j2p(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docStoreSegment(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_docStoreSegment(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docStoreSegment", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docValuesStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$DocValuesStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__docValuesStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$DocValuesStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_docValuesStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docValuesStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldNormStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$FieldNormStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__fieldNormStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$FieldNormStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_fieldNormStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fieldNormStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_hasDeletions());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__hasDeletions(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_hasDeletions(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "hasDeletions", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__name(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_name());
          return j2p(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__name(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          if (!parseArg(arg, "s", &value))
          {
            INT_CALL(self->object._set_name(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "name", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numDeleted());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numDeleted(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numDeleted(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numDeleted", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_numFiles());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__numFiles(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_numFiles(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "numFiles", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_openReaderPassed());
          Py_RETURN_BOOL(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__openReaderPassed(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jboolean value;
          if (!parseArg(arg, "Z", &value))
          {
            INT_CALL(self->object._set_openReaderPassed(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "openReaderPassed", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          jdouble value;
          OBJ_CALL(value = self->object._get_sizeMB());
          return PyFloat_FromDouble((double) value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__sizeMB(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          jdouble value;
          if (!parseArg(arg, "D", &value))
          {
            INT_CALL(self->object._set_sizeMB(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "sizeMB", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_storedFieldStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$StoredFieldStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__storedFieldStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$StoredFieldStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_storedFieldStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "storedFieldStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_termIndexStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$TermIndexStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termIndexStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$TermIndexStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_termIndexStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termIndexStatus", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$SegmentInfoStatus_get__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus value((jobject) NULL);
          OBJ_CALL(value = self->object._get_termVectorStatus());
          return ::org::apache::lucene::index::t_CheckIndex$Status$TermVectorStatus::wrap_Object(value);
        }
        static int t_CheckIndex$Status$SegmentInfoStatus_set__termVectorStatus(t_CheckIndex$Status$SegmentInfoStatus *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::CheckIndex$Status$TermVectorStatus::initializeClass, &value))
          {
            INT_CALL(self->object._set_termVectorStatus(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "termVectorStatus", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter.h"
#include "java/lang/String.h"
#include "java/text/DateFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *DateRecognizerSinkFilter::class$ = NULL;
          jmethodID *DateRecognizerSinkFilter::mids$ = NULL;
          bool DateRecognizerSinkFilter::live$ = false;
          ::java::lang::String *DateRecognizerSinkFilter::DATE_TYPE = NULL;

          jclass DateRecognizerSinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/DateRecognizerSinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_0105dadb] = env->getMethodID(cls, "<init>", "(Ljava/text/DateFormat;)V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DATE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DATE_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DateRecognizerSinkFilter::DateRecognizerSinkFilter() : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          DateRecognizerSinkFilter::DateRecognizerSinkFilter(const ::java::text::DateFormat & a0) : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_0105dadb, a0.this$)) {}

          jboolean DateRecognizerSinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_DateRecognizerSinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DateRecognizerSinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DateRecognizerSinkFilter_init_(t_DateRecognizerSinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DateRecognizerSinkFilter_accept(t_DateRecognizerSinkFilter *self, PyObject *args);

          static PyMethodDef t_DateRecognizerSinkFilter__methods_[] = {
            DECLARE_METHOD(t_DateRecognizerSinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DateRecognizerSinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DateRecognizerSinkFilter, accept, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DateRecognizerSinkFilter, t_DateRecognizerSinkFilter, ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter, DateRecognizerSinkFilter, t_DateRecognizerSinkFilter_init_, 0, 0, 0, 0, 0);

          void t_DateRecognizerSinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(DateRecognizerSinkFilter), module, "DateRecognizerSinkFilter", 0);
          }

          void t_DateRecognizerSinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "class_", make_descriptor(DateRecognizerSinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "wrapfn_", make_descriptor(t_DateRecognizerSinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(DateRecognizerSinkFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(DateRecognizerSinkFilter).tp_dict, "DATE_TYPE", make_descriptor(j2p(*DateRecognizerSinkFilter::DATE_TYPE)));
          }

          static PyObject *t_DateRecognizerSinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DateRecognizerSinkFilter::initializeClass, 1)))
              return NULL;
            return t_DateRecognizerSinkFilter::wrap_Object(DateRecognizerSinkFilter(((t_DateRecognizerSinkFilter *) arg)->object.this$));
          }
          static PyObject *t_DateRecognizerSinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DateRecognizerSinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DateRecognizerSinkFilter_init_(t_DateRecognizerSinkFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                DateRecognizerSinkFilter object((jobject) NULL);

                INT_CALL(object = DateRecognizerSinkFilter());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                ::java::text::DateFormat a0((jobject) NULL);
                DateRecognizerSinkFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::text::DateFormat::initializeClass, &a0))
                {
                  INT_CALL(object = DateRecognizerSinkFilter(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_DateRecognizerSinkFilter_accept(t_DateRecognizerSinkFilter *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(DateRecognizerSinkFilter), (PyObject *) self, "accept", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/regex/JavaUtilRegexCapabilities.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities.h"
#include "java/lang/String.h"
#include "org/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {

            ::java::lang::Class *JavaUtilRegexCapabilities::class$ = NULL;
            jmethodID *JavaUtilRegexCapabilities::mids$ = NULL;
            bool JavaUtilRegexCapabilities::live$ = false;
            jint JavaUtilRegexCapabilities::FLAG_CANON_EQ = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_CASE_INSENSITIVE = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_COMMENTS = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_DOTALL = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_LITERAL = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_MULTILINE = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_UNICODE_CASE = (jint) 0;
            jint JavaUtilRegexCapabilities::FLAG_UNIX_LINES = (jint) 0;

            jclass JavaUtilRegexCapabilities::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/regex/JavaUtilRegexCapabilities");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_compile_3b00aa76] = env->getMethodID(cls, "compile", "(Ljava/lang/String;)Lorg/apache/lucene/sandbox/queries/regex/RegexCapabilities$RegexMatcher;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                FLAG_CANON_EQ = env->getStaticIntField(cls, "FLAG_CANON_EQ");
                FLAG_CASE_INSENSITIVE = env->getStaticIntField(cls, "FLAG_CASE_INSENSITIVE");
                FLAG_COMMENTS = env->getStaticIntField(cls, "FLAG_COMMENTS");
                FLAG_DOTALL = env->getStaticIntField(cls, "FLAG_DOTALL");
                FLAG_LITERAL = env->getStaticIntField(cls, "FLAG_LITERAL");
                FLAG_MULTILINE = env->getStaticIntField(cls, "FLAG_MULTILINE");
                FLAG_UNICODE_CASE = env->getStaticIntField(cls, "FLAG_UNICODE_CASE");
                FLAG_UNIX_LINES = env->getStaticIntField(cls, "FLAG_UNIX_LINES");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JavaUtilRegexCapabilities::JavaUtilRegexCapabilities() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            JavaUtilRegexCapabilities::JavaUtilRegexCapabilities(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

            ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher JavaUtilRegexCapabilities::compile(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher(env->callObjectMethod(this$, mids$[mid_compile_3b00aa76], a0.this$));
            }

            jboolean JavaUtilRegexCapabilities::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jint JavaUtilRegexCapabilities::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          namespace regex {
            static PyObject *t_JavaUtilRegexCapabilities_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JavaUtilRegexCapabilities_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JavaUtilRegexCapabilities_init_(t_JavaUtilRegexCapabilities *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JavaUtilRegexCapabilities_compile(t_JavaUtilRegexCapabilities *self, PyObject *arg);
            static PyObject *t_JavaUtilRegexCapabilities_equals(t_JavaUtilRegexCapabilities *self, PyObject *args);
            static PyObject *t_JavaUtilRegexCapabilities_hashCode(t_JavaUtilRegexCapabilities *self, PyObject *args);

            static PyMethodDef t_JavaUtilRegexCapabilities__methods_[] = {
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, compile, METH_O),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, equals, METH_VARARGS),
              DECLARE_METHOD(t_JavaUtilRegexCapabilities, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JavaUtilRegexCapabilities, t_JavaUtilRegexCapabilities, ::java::lang::Object, JavaUtilRegexCapabilities, t_JavaUtilRegexCapabilities_init_, 0, 0, 0, 0, 0);

            void t_JavaUtilRegexCapabilities::install(PyObject *module)
            {
              installType(&PY_TYPE(JavaUtilRegexCapabilities), module, "JavaUtilRegexCapabilities", 0);
            }

            void t_JavaUtilRegexCapabilities::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "class_", make_descriptor(JavaUtilRegexCapabilities::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "wrapfn_", make_descriptor(t_JavaUtilRegexCapabilities::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(JavaUtilRegexCapabilities::initializeClass);
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_CANON_EQ", make_descriptor(JavaUtilRegexCapabilities::FLAG_CANON_EQ));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_CASE_INSENSITIVE", make_descriptor(JavaUtilRegexCapabilities::FLAG_CASE_INSENSITIVE));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_COMMENTS", make_descriptor(JavaUtilRegexCapabilities::FLAG_COMMENTS));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_DOTALL", make_descriptor(JavaUtilRegexCapabilities::FLAG_DOTALL));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_LITERAL", make_descriptor(JavaUtilRegexCapabilities::FLAG_LITERAL));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_MULTILINE", make_descriptor(JavaUtilRegexCapabilities::FLAG_MULTILINE));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_UNICODE_CASE", make_descriptor(JavaUtilRegexCapabilities::FLAG_UNICODE_CASE));
              PyDict_SetItemString(PY_TYPE(JavaUtilRegexCapabilities).tp_dict, "FLAG_UNIX_LINES", make_descriptor(JavaUtilRegexCapabilities::FLAG_UNIX_LINES));
            }

            static PyObject *t_JavaUtilRegexCapabilities_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JavaUtilRegexCapabilities::initializeClass, 1)))
                return NULL;
              return t_JavaUtilRegexCapabilities::wrap_Object(JavaUtilRegexCapabilities(((t_JavaUtilRegexCapabilities *) arg)->object.this$));
            }
            static PyObject *t_JavaUtilRegexCapabilities_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JavaUtilRegexCapabilities::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JavaUtilRegexCapabilities_init_(t_JavaUtilRegexCapabilities *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  JavaUtilRegexCapabilities object((jobject) NULL);

                  INT_CALL(object = JavaUtilRegexCapabilities());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  jint a0;
                  JavaUtilRegexCapabilities object((jobject) NULL);

                  if (!parseArgs(args, "I", &a0))
                  {
                    INT_CALL(object = JavaUtilRegexCapabilities(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_JavaUtilRegexCapabilities_compile(t_JavaUtilRegexCapabilities *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::sandbox::queries::regex::RegexCapabilities$RegexMatcher result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.compile(a0));
                return ::org::apache::lucene::sandbox::queries::regex::t_RegexCapabilities$RegexMatcher::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "compile", arg);
              return NULL;
            }

            static PyObject *t_JavaUtilRegexCapabilities_equals(t_JavaUtilRegexCapabilities *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(JavaUtilRegexCapabilities), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_JavaUtilRegexCapabilities_hashCode(t_JavaUtilRegexCapabilities *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(JavaUtilRegexCapabilities), (PyObject *) self, "hashCode", args, 2);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/StringReader.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
  namespace io {

    ::java::lang::Class *StringReader::class$ = NULL;
    jmethodID *StringReader::mids$ = NULL;
    bool StringReader::live$ = false;

    jclass StringReader::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/io/StringReader");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
        mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
        mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
        mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
        mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
        mids$[mid_ready_54c6a16a] = env->getMethodID(cls, "ready", "()Z");
        mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
        mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    StringReader::StringReader(const ::java::lang::String & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    void StringReader::close() const
    {
      env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
    }

    void StringReader::mark(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
    }

    jboolean StringReader::markSupported() const
    {
      return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
    }

    jint StringReader::read() const
    {
      return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
    }

    jint StringReader::read(const JArray< jchar > & a0, jint a1, jint a2) const
    {
      return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
    }

    jboolean StringReader::ready() const
    {
      return env->callBooleanMethod(this$, mids$[mid_ready_54c6a16a]);
    }

    void StringReader::reset() const
    {
      env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
    }

    jlong StringReader::skip(jlong a0) const
    {
      return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace io {
    static PyObject *t_StringReader_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_StringReader_instance_(PyTypeObject *type, PyObject *arg);
    static int t_StringReader_init_(t_StringReader *self, PyObject *args, PyObject *kwds);
    static PyObject *t_StringReader_close(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_mark(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_markSupported(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_read(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_ready(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_reset(t_StringReader *self, PyObject *args);
    static PyObject *t_StringReader_skip(t_StringReader *self, PyObject *args);

    static PyMethodDef t_StringReader__methods_[] = {
      DECLARE_METHOD(t_StringReader, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringReader, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_StringReader, close, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, mark, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, markSupported, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, read, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, ready, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, reset, METH_VARARGS),
      DECLARE_METHOD(t_StringReader, skip, METH_VARARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(StringReader, t_StringReader, ::java::io::Reader, StringReader, t_StringReader_init_, 0, 0, 0, 0, 0);

    void t_StringReader::install(PyObject *module)
    {
      installType(&PY_TYPE(StringReader), module, "StringReader", 0);
    }

    void t_StringReader::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(StringReader).tp_dict, "class_", make_descriptor(StringReader::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(StringReader).tp_dict, "wrapfn_", make_descriptor(t_StringReader::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(StringReader).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_StringReader_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, StringReader::initializeClass, 1)))
        return NULL;
      return t_StringReader::wrap_Object(StringReader(((t_StringReader *) arg)->object.this$));
    }
    static PyObject *t_StringReader_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, StringReader::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_StringReader_init_(t_StringReader *self, PyObject *args, PyObject *kwds)
    {
      ::java::lang::String a0((jobject) NULL);
      StringReader object((jobject) NULL);

      if (!parseArgs(args, "s", &a0))
      {
        INT_CALL(object = StringReader(a0));
        self->object = object;
      }
      else
      {
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_StringReader_close(t_StringReader *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.close());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "close", args, 2);
    }

    static PyObject *t_StringReader_mark(t_StringReader *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.mark(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "mark", args, 2);
    }

    static PyObject *t_StringReader_markSupported(t_StringReader *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.markSupported());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "markSupported", args, 2);
    }

    static PyObject *t_StringReader_read(t_StringReader *self, PyObject *args)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          jint result;
          OBJ_CALL(result = self->object.read());
          return PyInt_FromLong((long) result);
        }
        break;
       case 3:
        {
          JArray< jchar > a0((jobject) NULL);
          jint a1;
          jint a2;
          jint result;

          if (!parseArgs(args, "[CII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = self->object.read(a0, a1, a2));
            return PyInt_FromLong((long) result);
          }
        }
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "read", args, 2);
    }

    static PyObject *t_StringReader_ready(t_StringReader *self, PyObject *args)
    {
      jboolean result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.ready());
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "ready", args, 2);
    }

    static PyObject *t_StringReader_reset(t_StringReader *self, PyObject *args)
    {

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(self->object.reset());
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "reset", args, 2);
    }

    static PyObject *t_StringReader_skip(t_StringReader *self, PyObject *args)
    {
      jlong a0;
      jlong result;

      if (!parseArgs(args, "J", &a0))
      {
        OBJ_CALL(result = self->object.skip(a0));
        return PyLong_FromLongLong((PY_LONG_LONG) result);
      }

      return callSuper(&PY_TYPE(StringReader), (PyObject *) self, "skip", args, 2);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayMap.h"
#include "java/util/Map.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/util/CharArrayMap$EntrySet.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayMap::class$ = NULL;
          jmethodID *CharArrayMap::mids$ = NULL;
          bool CharArrayMap::live$ = false;

          jclass CharArrayMap::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayMap");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_741c8a04] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Ljava/util/Map;Z)V");
              mids$[mid_init$_b3a872e4] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;IZ)V");
              mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
              mids$[mid_containsKey_a8afc646] = env->getMethodID(cls, "containsKey", "(Ljava/lang/CharSequence;)Z");
              mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
              mids$[mid_containsKey_6f0bb35a] = env->getMethodID(cls, "containsKey", "([CII)Z");
              mids$[mid_copy_67ffa425] = env->getStaticMethodID(cls, "copy", "(Lorg/apache/lucene/util/Version;Ljava/util/Map;)Lorg/apache/lucene/analysis/util/CharArrayMap;");
              mids$[mid_emptyMap_31b01886] = env->getStaticMethodID(cls, "emptyMap", "()Lorg/apache/lucene/analysis/util/CharArrayMap;");
              mids$[mid_entrySet_9ca3e4b1] = env->getMethodID(cls, "entrySet", "()Lorg/apache/lucene/analysis/util/CharArrayMap$EntrySet;");
              mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
              mids$[mid_get_c05993cb] = env->getMethodID(cls, "get", "([CII)Ljava/lang/Object;");
              mids$[mid_keySet_d2d3505c] = env->getMethodID(cls, "keySet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_put_b85c5dc7] = env->getMethodID(cls, "put", "([CLjava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_put_84c802ab] = env->getMethodID(cls, "put", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_put_80209419] = env->getMethodID(cls, "put", "(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
              mids$[mid_unmodifiableMap_716215f5] = env->getStaticMethodID(cls, "unmodifiableMap", "(Lorg/apache/lucene/analysis/util/CharArrayMap;)Lorg/apache/lucene/analysis/util/CharArrayMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharArrayMap::CharArrayMap(const ::org::apache::lucene::util::Version & a0, const ::java::util::Map & a1, jboolean a2) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_741c8a04, a0.this$, a1.this$, a2)) {}

          CharArrayMap::CharArrayMap(const ::org::apache::lucene::util::Version & a0, jint a1, jboolean a2) : ::java::util::AbstractMap(env->newObject(initializeClass, &mids$, mid_init$_b3a872e4, a0.this$, a1, a2)) {}

          void CharArrayMap::clear() const
          {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
          }

          jboolean CharArrayMap::containsKey(const ::java::lang::CharSequence & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_containsKey_a8afc646], a0.this$);
          }

          jboolean CharArrayMap::containsKey(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
          }

          jboolean CharArrayMap::containsKey(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_containsKey_6f0bb35a], a0.this$, a1, a2);
          }

          CharArrayMap CharArrayMap::copy(const ::org::apache::lucene::util::Version & a0, const ::java::util::Map & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_copy_67ffa425], a0.this$, a1.this$));
          }

          CharArrayMap CharArrayMap::emptyMap()
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_emptyMap_31b01886]));
          }

          ::org::apache::lucene::analysis::util::CharArrayMap$EntrySet CharArrayMap::entrySet() const
          {
            return ::org::apache::lucene::analysis::util::CharArrayMap$EntrySet(env->callObjectMethod(this$, mids$[mid_entrySet_9ca3e4b1]));
          }

          ::java::lang::Object CharArrayMap::get(const ::java::lang::Object & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
          }

          ::java::lang::Object CharArrayMap::get(const ::java::lang::CharSequence & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
          }

          ::java::lang::Object CharArrayMap::get(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_c05993cb], a0.this$, a1, a2));
          }

          ::org::apache::lucene::analysis::util::CharArraySet CharArrayMap::keySet() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_keySet_d2d3505c]));
          }

          ::java::lang::Object CharArrayMap::put(const JArray< jchar > & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_b85c5dc7], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::put(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_84c802ab], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::put(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_80209419], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
          }

          ::java::lang::Object CharArrayMap::remove(const ::java::lang::Object & a0) const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
          }

          jint CharArrayMap::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::java::lang::String CharArrayMap::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          CharArrayMap CharArrayMap::unmodifiableMap(const CharArrayMap & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayMap(env->callStaticObjectMethod(cls, mids$[mid_unmodifiableMap_716215f5], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayMap_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap_of_(t_CharArrayMap *self, PyObject *args);
          static int t_CharArrayMap_init_(t_CharArrayMap *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharArrayMap_clear(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_containsKey(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_copy(PyTypeObject *type, PyObject *args);
          static PyObject *t_CharArrayMap_emptyMap(PyTypeObject *type);
          static PyObject *t_CharArrayMap_entrySet(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_get(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_keySet(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_put(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_remove(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_size(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_toString(t_CharArrayMap *self, PyObject *args);
          static PyObject *t_CharArrayMap_unmodifiableMap(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayMap_get__parameters_(t_CharArrayMap *self, void *data);
          static PyGetSetDef t_CharArrayMap__fields_[] = {
            DECLARE_GET_FIELD(t_CharArrayMap, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayMap__methods_[] = {
            DECLARE_METHOD(t_CharArrayMap, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, of_, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, clear, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, containsKey, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, copy, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, emptyMap, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayMap, entrySet, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, get, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, keySet, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, put, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, remove, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, size, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, toString, METH_VARARGS),
            DECLARE_METHOD(t_CharArrayMap, unmodifiableMap, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayMap, t_CharArrayMap, ::java::util::AbstractMap, CharArrayMap, t_CharArrayMap_init_, 0, 0, t_CharArrayMap__fields_, 0, 0);
          PyObject *t_CharArrayMap::wrap_Object(const CharArrayMap& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap *self = (t_CharArrayMap *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_CharArrayMap::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_CharArrayMap::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_CharArrayMap *self = (t_CharArrayMap *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_CharArrayMap::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayMap), module, "CharArrayMap", 0);
          }

          void t_CharArrayMap::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayMap).tp_dict, "class_", make_descriptor(CharArrayMap::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayMap).tp_dict, "wrapfn_", make_descriptor(t_CharArrayMap::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayMap).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharArrayMap_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayMap::initializeClass, 1)))
              return NULL;
            return t_CharArrayMap::wrap_Object(CharArrayMap(((t_CharArrayMap *) arg)->object.this$));
          }
          static PyObject *t_CharArrayMap_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayMap::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_CharArrayMap_of_(t_CharArrayMap *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_CharArrayMap_init_(t_CharArrayMap *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::util::Map a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                CharArrayMap object((jobject) NULL);

                if (!parseArgs(args, "KKZ", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_Map::parameters_, &a2))
                {
                  INT_CALL(object = CharArrayMap(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                jint a1;
                jboolean a2;
                CharArrayMap object((jobject) NULL);

                if (!parseArgs(args, "KIZ", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &a2))
                {
                  INT_CALL(object = CharArrayMap(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharArrayMap_clear(t_CharArrayMap *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.clear());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "clear", args, 2);
          }

          static PyObject *t_CharArrayMap_containsKey(t_CharArrayMap *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.containsKey(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.containsKey(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.containsKey(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "containsKey", args, 2);
          }

          static PyObject *t_CharArrayMap_copy(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::util::Map a1((jobject) NULL);
            PyTypeObject **p1;
            CharArrayMap result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::java::util::Map::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::java::util::t_Map::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayMap::copy(a0, a1));
              return t_CharArrayMap::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "copy", args);
            return NULL;
          }

          static PyObject *t_CharArrayMap_emptyMap(PyTypeObject *type)
          {
            CharArrayMap result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayMap::emptyMap());
            return t_CharArrayMap::wrap_Object(result);
          }

          static PyObject *t_CharArrayMap_entrySet(t_CharArrayMap *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::util::CharArrayMap$EntrySet result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.entrySet());
              return ::org::apache::lucene::analysis::util::t_CharArrayMap$EntrySet::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "entrySet", args, 2);
          }

          static PyObject *t_CharArrayMap_get(t_CharArrayMap *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::Object a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = self->object.get(a0));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.get(a0, a1, a2));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "get", args, 2);
          }

          static PyObject *t_CharArrayMap_keySet(t_CharArrayMap *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.keySet());
              return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "keySet", args, 2);
          }

          static PyObject *t_CharArrayMap_put(t_CharArrayMap *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                JArray< jchar > a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "[CO", self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::String a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "sO", self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
              {
                ::java::lang::Object a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                ::java::lang::Object result((jobject) NULL);

                if (!parseArgs(args, "oO", self->parameters[0], &a0, &a1))
                {
                  OBJ_CALL(result = self->object.put(a0, a1));
                  return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                }
              }
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "put", args, 2);
          }

          static PyObject *t_CharArrayMap_remove(t_CharArrayMap *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.remove(a0));
              return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "remove", args, 2);
          }

          static PyObject *t_CharArrayMap_size(t_CharArrayMap *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_CharArrayMap_toString(t_CharArrayMap *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(CharArrayMap), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_CharArrayMap_unmodifiableMap(PyTypeObject *type, PyObject *arg)
          {
            CharArrayMap a0((jobject) NULL);
            PyTypeObject **p0;
            CharArrayMap result((jobject) NULL);

            if (!parseArg(arg, "K", CharArrayMap::initializeClass, &a0, &p0, t_CharArrayMap::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayMap::unmodifiableMap(a0));
              return t_CharArrayMap::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "unmodifiableMap", arg);
            return NULL;
          }
          static PyObject *t_CharArrayMap_get__parameters_(t_CharArrayMap *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/TermFreqIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *TermFreqIterator::class$ = NULL;
          jmethodID *TermFreqIterator::mids$ = NULL;
          bool TermFreqIterator::live$ = false;

          jclass TermFreqIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/TermFreqIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_weight_54c6a17a] = env->getMethodID(cls, "weight", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jlong TermFreqIterator::weight() const
          {
            return env->callLongMethod(this$, mids$[mid_weight_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/search/spell/TermFreqIterator$TermFreqIteratorWrapper.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_TermFreqIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFreqIterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TermFreqIterator_weight(t_TermFreqIterator *self);

          static PyMethodDef t_TermFreqIterator__methods_[] = {
            DECLARE_METHOD(t_TermFreqIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TermFreqIterator, weight, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TermFreqIterator, t_TermFreqIterator, ::org::apache::lucene::util::BytesRefIterator, TermFreqIterator, abstract_init, 0, 0, 0, 0, 0);

          void t_TermFreqIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(TermFreqIterator), module, "TermFreqIterator", 0);
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "TermFreqIteratorWrapper", make_descriptor(&PY_TYPE(TermFreqIterator$TermFreqIteratorWrapper)));
          }

          void t_TermFreqIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "class_", make_descriptor(TermFreqIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "wrapfn_", make_descriptor(t_TermFreqIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TermFreqIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TermFreqIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TermFreqIterator::initializeClass, 1)))
              return NULL;
            return t_TermFreqIterator::wrap_Object(TermFreqIterator(((t_TermFreqIterator *) arg)->object.this$));
          }
          static PyObject *t_TermFreqIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TermFreqIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_TermFreqIterator_weight(t_TermFreqIterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.weight());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *StandardSyntaxParserConstants::class$ = NULL;
              jmethodID *StandardSyntaxParserConstants::mids$ = NULL;
              bool StandardSyntaxParserConstants::live$ = false;
              jint StandardSyntaxParserConstants::AND = (jint) 0;
              jint StandardSyntaxParserConstants::Boost = (jint) 0;
              jint StandardSyntaxParserConstants::CARAT = (jint) 0;
              jint StandardSyntaxParserConstants::DEFAULT = (jint) 0;
              jint StandardSyntaxParserConstants::EOF = (jint) 0;
              jint StandardSyntaxParserConstants::FUZZY_SLOP = (jint) 0;
              jint StandardSyntaxParserConstants::LPAREN = (jint) 0;
              jint StandardSyntaxParserConstants::MINUS = (jint) 0;
              jint StandardSyntaxParserConstants::NOT = (jint) 0;
              jint StandardSyntaxParserConstants::NUMBER = (jint) 0;
              jint StandardSyntaxParserConstants::OP_COLON = (jint) 0;
              jint StandardSyntaxParserConstants::OP_EQUAL = (jint) 0;
              jint StandardSyntaxParserConstants::OP_LESSTHAN = (jint) 0;
              jint StandardSyntaxParserConstants::OP_LESSTHANEQ = (jint) 0;
              jint StandardSyntaxParserConstants::OP_MORETHAN = (jint) 0;
              jint StandardSyntaxParserConstants::OP_MORETHANEQ = (jint) 0;
              jint StandardSyntaxParserConstants::OR = (jint) 0;
              jint StandardSyntaxParserConstants::PLUS = (jint) 0;
              jint StandardSyntaxParserConstants::QUOTED = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEEX_END = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEEX_START = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEIN_END = (jint) 0;
              jint StandardSyntaxParserConstants::RANGEIN_START = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_GOOP = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_QUOTED = (jint) 0;
              jint StandardSyntaxParserConstants::RANGE_TO = (jint) 0;
              jint StandardSyntaxParserConstants::REGEXPTERM = (jint) 0;
              jint StandardSyntaxParserConstants::RPAREN = (jint) 0;
              jint StandardSyntaxParserConstants::Range = (jint) 0;
              jint StandardSyntaxParserConstants::TERM = (jint) 0;
              jint StandardSyntaxParserConstants::_ESCAPED_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_NUM_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_QUOTED_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_TERM_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_TERM_START_CHAR = (jint) 0;
              jint StandardSyntaxParserConstants::_WHITESPACE = (jint) 0;
              JArray< ::java::lang::String > *StandardSyntaxParserConstants::tokenImage = NULL;

              jclass StandardSyntaxParserConstants::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserConstants");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  AND = env->getStaticIntField(cls, "AND");
                  Boost = env->getStaticIntField(cls, "Boost");
                  CARAT = env->getStaticIntField(cls, "CARAT");
                  DEFAULT = env->getStaticIntField(cls, "DEFAULT");
                  EOF = env->getStaticIntField(cls, "EOF");
                  FUZZY_SLOP = env->getStaticIntField(cls, "FUZZY_SLOP");
                  LPAREN = env->getStaticIntField(cls, "LPAREN");
                  MINUS = env->getStaticIntField(cls, "MINUS");
                  NOT = env->getStaticIntField(cls, "NOT");
                  NUMBER = env->getStaticIntField(cls, "NUMBER");
                  OP_COLON = env->getStaticIntField(cls, "OP_COLON");
                  OP_EQUAL = env->getStaticIntField(cls, "OP_EQUAL");
                  OP_LESSTHAN = env->getStaticIntField(cls, "OP_LESSTHAN");
                  OP_LESSTHANEQ = env->getStaticIntField(cls, "OP_LESSTHANEQ");
                  OP_MORETHAN = env->getStaticIntField(cls, "OP_MORETHAN");
                  OP_MORETHANEQ = env->getStaticIntField(cls, "OP_MORETHANEQ");
                  OR = env->getStaticIntField(cls, "OR");
                  PLUS = env->getStaticIntField(cls, "PLUS");
                  QUOTED = env->getStaticIntField(cls, "QUOTED");
                  RANGEEX_END = env->getStaticIntField(cls, "RANGEEX_END");
                  RANGEEX_START = env->getStaticIntField(cls, "RANGEEX_START");
                  RANGEIN_END = env->getStaticIntField(cls, "RANGEIN_END");
                  RANGEIN_START = env->getStaticIntField(cls, "RANGEIN_START");
                  RANGE_GOOP = env->getStaticIntField(cls, "RANGE_GOOP");
                  RANGE_QUOTED = env->getStaticIntField(cls, "RANGE_QUOTED");
                  RANGE_TO = env->getStaticIntField(cls, "RANGE_TO");
                  REGEXPTERM = env->getStaticIntField(cls, "REGEXPTERM");
                  RPAREN = env->getStaticIntField(cls, "RPAREN");
                  Range = env->getStaticIntField(cls, "Range");
                  TERM = env->getStaticIntField(cls, "TERM");
                  _ESCAPED_CHAR = env->getStaticIntField(cls, "_ESCAPED_CHAR");
                  _NUM_CHAR = env->getStaticIntField(cls, "_NUM_CHAR");
                  _QUOTED_CHAR = env->getStaticIntField(cls, "_QUOTED_CHAR");
                  _TERM_CHAR = env->getStaticIntField(cls, "_TERM_CHAR");
                  _TERM_START_CHAR = env->getStaticIntField(cls, "_TERM_START_CHAR");
                  _WHITESPACE = env->getStaticIntField(cls, "_WHITESPACE");
                  tokenImage = new JArray< ::java::lang::String >(env->getStaticObjectField(cls, "tokenImage", "[Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_StandardSyntaxParserConstants_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardSyntaxParserConstants_instance_(PyTypeObject *type, PyObject *arg);

              static PyMethodDef t_StandardSyntaxParserConstants__methods_[] = {
                DECLARE_METHOD(t_StandardSyntaxParserConstants, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardSyntaxParserConstants, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardSyntaxParserConstants, t_StandardSyntaxParserConstants, ::java::lang::Object, StandardSyntaxParserConstants, abstract_init, 0, 0, 0, 0, 0);

              void t_StandardSyntaxParserConstants::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardSyntaxParserConstants), module, "StandardSyntaxParserConstants", 0);
              }

              void t_StandardSyntaxParserConstants::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "class_", make_descriptor(StandardSyntaxParserConstants::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "wrapfn_", make_descriptor(t_StandardSyntaxParserConstants::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(StandardSyntaxParserConstants::initializeClass);
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "AND", make_descriptor(StandardSyntaxParserConstants::AND));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "Boost", make_descriptor(StandardSyntaxParserConstants::Boost));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "CARAT", make_descriptor(StandardSyntaxParserConstants::CARAT));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "DEFAULT", make_descriptor(StandardSyntaxParserConstants::DEFAULT));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "EOF", make_descriptor(StandardSyntaxParserConstants::EOF));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "FUZZY_SLOP", make_descriptor(StandardSyntaxParserConstants::FUZZY_SLOP));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "LPAREN", make_descriptor(StandardSyntaxParserConstants::LPAREN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "MINUS", make_descriptor(StandardSyntaxParserConstants::MINUS));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "NOT", make_descriptor(StandardSyntaxParserConstants::NOT));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "NUMBER", make_descriptor(StandardSyntaxParserConstants::NUMBER));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_COLON", make_descriptor(StandardSyntaxParserConstants::OP_COLON));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_EQUAL", make_descriptor(StandardSyntaxParserConstants::OP_EQUAL));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_LESSTHAN", make_descriptor(StandardSyntaxParserConstants::OP_LESSTHAN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_LESSTHANEQ", make_descriptor(StandardSyntaxParserConstants::OP_LESSTHANEQ));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_MORETHAN", make_descriptor(StandardSyntaxParserConstants::OP_MORETHAN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OP_MORETHANEQ", make_descriptor(StandardSyntaxParserConstants::OP_MORETHANEQ));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "OR", make_descriptor(StandardSyntaxParserConstants::OR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "PLUS", make_descriptor(StandardSyntaxParserConstants::PLUS));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "QUOTED", make_descriptor(StandardSyntaxParserConstants::QUOTED));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEEX_END", make_descriptor(StandardSyntaxParserConstants::RANGEEX_END));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEEX_START", make_descriptor(StandardSyntaxParserConstants::RANGEEX_START));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEIN_END", make_descriptor(StandardSyntaxParserConstants::RANGEIN_END));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGEIN_START", make_descriptor(StandardSyntaxParserConstants::RANGEIN_START));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGE_GOOP", make_descriptor(StandardSyntaxParserConstants::RANGE_GOOP));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGE_QUOTED", make_descriptor(StandardSyntaxParserConstants::RANGE_QUOTED));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RANGE_TO", make_descriptor(StandardSyntaxParserConstants::RANGE_TO));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "REGEXPTERM", make_descriptor(StandardSyntaxParserConstants::REGEXPTERM));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "RPAREN", make_descriptor(StandardSyntaxParserConstants::RPAREN));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "Range", make_descriptor(StandardSyntaxParserConstants::Range));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "TERM", make_descriptor(StandardSyntaxParserConstants::TERM));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_ESCAPED_CHAR", make_descriptor(StandardSyntaxParserConstants::_ESCAPED_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_NUM_CHAR", make_descriptor(StandardSyntaxParserConstants::_NUM_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_QUOTED_CHAR", make_descriptor(StandardSyntaxParserConstants::_QUOTED_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_TERM_CHAR", make_descriptor(StandardSyntaxParserConstants::_TERM_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_TERM_START_CHAR", make_descriptor(StandardSyntaxParserConstants::_TERM_START_CHAR));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "_WHITESPACE", make_descriptor(StandardSyntaxParserConstants::_WHITESPACE));
                PyDict_SetItemString(PY_TYPE(StandardSyntaxParserConstants).tp_dict, "tokenImage", make_descriptor(JArray<jstring>(StandardSyntaxParserConstants::tokenImage->this$).wrap()));
              }

              static PyObject *t_StandardSyntaxParserConstants_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardSyntaxParserConstants::initializeClass, 1)))
                  return NULL;
                return t_StandardSyntaxParserConstants::wrap_Object(StandardSyntaxParserConstants(((t_StandardSyntaxParserConstants *) arg)->object.this$));
              }
              static PyObject *t_StandardSyntaxParserConstants_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardSyntaxParserConstants::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker.h"
#include "org/apache/lucene/search/FieldCache.h"
#include "org/apache/lucene/search/FieldCache$CacheEntry.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$Insanity.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *FieldCacheSanityChecker::class$ = NULL;
        jmethodID *FieldCacheSanityChecker::mids$ = NULL;
        bool FieldCacheSanityChecker::live$ = false;

        jclass FieldCacheSanityChecker::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/FieldCacheSanityChecker");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_check_d93a601e] = env->getMethodID(cls, "check", "([Lorg/apache/lucene/search/FieldCache$CacheEntry;)[Lorg/apache/lucene/util/FieldCacheSanityChecker$Insanity;");
            mids$[mid_checkSanity_ad442ffd] = env->getStaticMethodID(cls, "checkSanity", "(Lorg/apache/lucene/search/FieldCache;)[Lorg/apache/lucene/util/FieldCacheSanityChecker$Insanity;");
            mids$[mid_checkSanity_d93a601e] = env->getStaticMethodID(cls, "checkSanity", "([Lorg/apache/lucene/search/FieldCache$CacheEntry;)[Lorg/apache/lucene/util/FieldCacheSanityChecker$Insanity;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCacheSanityChecker::FieldCacheSanityChecker() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > FieldCacheSanityChecker::check(const JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > & a0) const
        {
          return JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity >(env->callObjectMethod(this$, mids$[mid_check_d93a601e], a0.this$));
        }

        JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > FieldCacheSanityChecker::checkSanity(const ::org::apache::lucene::search::FieldCache & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity >(env->callStaticObjectMethod(cls, mids$[mid_checkSanity_ad442ffd], a0.this$));
        }

        JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > FieldCacheSanityChecker::checkSanity(const JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity >(env->callStaticObjectMethod(cls, mids$[mid_checkSanity_d93a601e], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/util/FieldCacheSanityChecker$InsanityType.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_FieldCacheSanityChecker_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCacheSanityChecker_init_(t_FieldCacheSanityChecker *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCacheSanityChecker_check(t_FieldCacheSanityChecker *self, PyObject *arg);
        static PyObject *t_FieldCacheSanityChecker_checkSanity(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_FieldCacheSanityChecker__methods_[] = {
          DECLARE_METHOD(t_FieldCacheSanityChecker, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCacheSanityChecker, check, METH_O),
          DECLARE_METHOD(t_FieldCacheSanityChecker, checkSanity, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCacheSanityChecker, t_FieldCacheSanityChecker, ::java::lang::Object, FieldCacheSanityChecker, t_FieldCacheSanityChecker_init_, 0, 0, 0, 0, 0);

        void t_FieldCacheSanityChecker::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCacheSanityChecker), module, "FieldCacheSanityChecker", 0);
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "InsanityType", make_descriptor(&PY_TYPE(FieldCacheSanityChecker$InsanityType)));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "Insanity", make_descriptor(&PY_TYPE(FieldCacheSanityChecker$Insanity)));
        }

        void t_FieldCacheSanityChecker::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "class_", make_descriptor(FieldCacheSanityChecker::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "wrapfn_", make_descriptor(t_FieldCacheSanityChecker::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCacheSanityChecker).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldCacheSanityChecker_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCacheSanityChecker::initializeClass, 1)))
            return NULL;
          return t_FieldCacheSanityChecker::wrap_Object(FieldCacheSanityChecker(((t_FieldCacheSanityChecker *) arg)->object.this$));
        }
        static PyObject *t_FieldCacheSanityChecker_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCacheSanityChecker::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCacheSanityChecker_init_(t_FieldCacheSanityChecker *self, PyObject *args, PyObject *kwds)
        {
          FieldCacheSanityChecker object((jobject) NULL);

          INT_CALL(object = FieldCacheSanityChecker());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCacheSanityChecker_check(t_FieldCacheSanityChecker *self, PyObject *arg)
        {
          JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > a0((jobject) NULL);
          JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > result((jobject) NULL);

          if (!parseArg(arg, "[k", ::org::apache::lucene::search::FieldCache$CacheEntry::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.check(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_FieldCacheSanityChecker$Insanity::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "check", arg);
          return NULL;
        }

        static PyObject *t_FieldCacheSanityChecker_checkSanity(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::FieldCache a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::FieldCache::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FieldCacheSanityChecker::checkSanity(a0));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_FieldCacheSanityChecker$Insanity::wrap_jobject);
              }
            }
            {
              JArray< ::org::apache::lucene::search::FieldCache$CacheEntry > a0((jobject) NULL);
              JArray< ::org::apache::lucene::util::FieldCacheSanityChecker$Insanity > result((jobject) NULL);

              if (!parseArgs(args, "[k", ::org::apache::lucene::search::FieldCache$CacheEntry::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::FieldCacheSanityChecker::checkSanity(a0));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_FieldCacheSanityChecker$Insanity::wrap_jobject);
              }
            }
          }

          PyErr_SetArgsError(type, "checkSanity", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemFilter::class$ = NULL;
          jmethodID *PortugueseMinimalStemFilter::mids$ = NULL;
          bool PortugueseMinimalStemFilter::live$ = false;

          jclass PortugueseMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemFilter::PortugueseMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PortugueseMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemFilter_init_(t_PortugueseMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemFilter_incrementToken(t_PortugueseMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseMinimalStemFilter, t_PortugueseMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, PortugueseMinimalStemFilter, t_PortugueseMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PortugueseMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemFilter), module, "PortugueseMinimalStemFilter", 0);
          }

          void t_PortugueseMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilter).tp_dict, "class_", make_descriptor(PortugueseMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PortugueseMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemFilter::wrap_Object(PortugueseMinimalStemFilter(((t_PortugueseMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemFilter_init_(t_PortugueseMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PortugueseMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PortugueseMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemFilter_incrementToken(t_PortugueseMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PortugueseMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKWidthFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKWidthFilterFactory::class$ = NULL;
          jmethodID *CJKWidthFilterFactory::mids$ = NULL;
          bool CJKWidthFilterFactory::live$ = false;

          jclass CJKWidthFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKWidthFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKWidthFilterFactory::CJKWidthFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream CJKWidthFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory CJKWidthFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKWidthFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKWidthFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKWidthFilterFactory_init_(t_CJKWidthFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKWidthFilterFactory_create(t_CJKWidthFilterFactory *self, PyObject *args);
          static PyObject *t_CJKWidthFilterFactory_getMultiTermComponent(t_CJKWidthFilterFactory *self);
          static PyObject *t_CJKWidthFilterFactory_get__multiTermComponent(t_CJKWidthFilterFactory *self, void *data);
          static PyGetSetDef t_CJKWidthFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_CJKWidthFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CJKWidthFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CJKWidthFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_CJKWidthFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKWidthFilterFactory, t_CJKWidthFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CJKWidthFilterFactory, t_CJKWidthFilterFactory_init_, 0, 0, t_CJKWidthFilterFactory__fields_, 0, 0);

          void t_CJKWidthFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKWidthFilterFactory), module, "CJKWidthFilterFactory", 0);
          }

          void t_CJKWidthFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKWidthFilterFactory).tp_dict, "class_", make_descriptor(CJKWidthFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CJKWidthFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKWidthFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CJKWidthFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKWidthFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CJKWidthFilterFactory::wrap_Object(CJKWidthFilterFactory(((t_CJKWidthFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CJKWidthFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKWidthFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKWidthFilterFactory_init_(t_CJKWidthFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CJKWidthFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CJKWidthFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKWidthFilterFactory_create(t_CJKWidthFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CJKWidthFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_CJKWidthFilterFactory_getMultiTermComponent(t_CJKWidthFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_CJKWidthFilterFactory_get__multiTermComponent(t_CJKWidthFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/bg/BulgarianStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {

          ::java::lang::Class *BulgarianStemFilter::class$ = NULL;
          jmethodID *BulgarianStemFilter::mids$ = NULL;
          bool BulgarianStemFilter::live$ = false;

          jclass BulgarianStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/bg/BulgarianStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BulgarianStemFilter::BulgarianStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean BulgarianStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace bg {
          static PyObject *t_BulgarianStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BulgarianStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BulgarianStemFilter_init_(t_BulgarianStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BulgarianStemFilter_incrementToken(t_BulgarianStemFilter *self, PyObject *args);

          static PyMethodDef t_BulgarianStemFilter__methods_[] = {
            DECLARE_METHOD(t_BulgarianStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BulgarianStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BulgarianStemFilter, t_BulgarianStemFilter, ::org::apache::lucene::analysis::TokenFilter, BulgarianStemFilter, t_BulgarianStemFilter_init_, 0, 0, 0, 0, 0);

          void t_BulgarianStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(BulgarianStemFilter), module, "BulgarianStemFilter", 0);
          }

          void t_BulgarianStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilter).tp_dict, "class_", make_descriptor(BulgarianStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilter).tp_dict, "wrapfn_", make_descriptor(t_BulgarianStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BulgarianStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BulgarianStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BulgarianStemFilter::initializeClass, 1)))
              return NULL;
            return t_BulgarianStemFilter::wrap_Object(BulgarianStemFilter(((t_BulgarianStemFilter *) arg)->object.this$));
          }
          static PyObject *t_BulgarianStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BulgarianStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BulgarianStemFilter_init_(t_BulgarianStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            BulgarianStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = BulgarianStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BulgarianStemFilter_incrementToken(t_BulgarianStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BulgarianStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/AttributeImpl.h"
#include "java/lang/Cloneable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Attribute.h"
#include "org/apache/lucene/util/AttributeReflector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *AttributeImpl::class$ = NULL;
        jmethodID *AttributeImpl::mids$ = NULL;
        bool AttributeImpl::live$ = false;

        jclass AttributeImpl::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/AttributeImpl");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_clone_a200d3c2] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/AttributeImpl;");
            mids$[mid_copyTo_d86caa9f] = env->getMethodID(cls, "copyTo", "(Lorg/apache/lucene/util/AttributeImpl;)V");
            mids$[mid_reflectAsString_445a175e] = env->getMethodID(cls, "reflectAsString", "(Z)Ljava/lang/String;");
            mids$[mid_reflectWith_5f3f5102] = env->getMethodID(cls, "reflectWith", "(Lorg/apache/lucene/util/AttributeReflector;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        AttributeImpl::AttributeImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void AttributeImpl::clear() const
        {
          env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        AttributeImpl AttributeImpl::clone() const
        {
          return AttributeImpl(env->callObjectMethod(this$, mids$[mid_clone_a200d3c2]));
        }

        void AttributeImpl::copyTo(const AttributeImpl & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_copyTo_d86caa9f], a0.this$);
        }

        ::java::lang::String AttributeImpl::reflectAsString(jboolean a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_reflectAsString_445a175e], a0));
        }

        void AttributeImpl::reflectWith(const ::org::apache::lucene::util::AttributeReflector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_reflectWith_5f3f5102], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_AttributeImpl_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AttributeImpl_instance_(PyTypeObject *type, PyObject *arg);
        static int t_AttributeImpl_init_(t_AttributeImpl *self, PyObject *args, PyObject *kwds);
        static PyObject *t_AttributeImpl_clear(t_AttributeImpl *self);
        static PyObject *t_AttributeImpl_clone(t_AttributeImpl *self);
        static PyObject *t_AttributeImpl_copyTo(t_AttributeImpl *self, PyObject *arg);
        static PyObject *t_AttributeImpl_reflectAsString(t_AttributeImpl *self, PyObject *arg);
        static PyObject *t_AttributeImpl_reflectWith(t_AttributeImpl *self, PyObject *arg);

        static PyMethodDef t_AttributeImpl__methods_[] = {
          DECLARE_METHOD(t_AttributeImpl, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeImpl, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_AttributeImpl, clear, METH_NOARGS),
          DECLARE_METHOD(t_AttributeImpl, clone, METH_NOARGS),
          DECLARE_METHOD(t_AttributeImpl, copyTo, METH_O),
          DECLARE_METHOD(t_AttributeImpl, reflectAsString, METH_O),
          DECLARE_METHOD(t_AttributeImpl, reflectWith, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AttributeImpl, t_AttributeImpl, ::java::lang::Object, AttributeImpl, t_AttributeImpl_init_, 0, 0, 0, 0, 0);

        void t_AttributeImpl::install(PyObject *module)
        {
          installType(&PY_TYPE(AttributeImpl), module, "AttributeImpl", 0);
        }

        void t_AttributeImpl::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(AttributeImpl).tp_dict, "class_", make_descriptor(AttributeImpl::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(AttributeImpl).tp_dict, "wrapfn_", make_descriptor(t_AttributeImpl::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(AttributeImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AttributeImpl_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, AttributeImpl::initializeClass, 1)))
            return NULL;
          return t_AttributeImpl::wrap_Object(AttributeImpl(((t_AttributeImpl *) arg)->object.this$));
        }
        static PyObject *t_AttributeImpl_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, AttributeImpl::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_AttributeImpl_init_(t_AttributeImpl *self, PyObject *args, PyObject *kwds)
        {
          AttributeImpl object((jobject) NULL);

          INT_CALL(object = AttributeImpl());
          self->object = object;

          return 0;
        }

        static PyObject *t_AttributeImpl_clear(t_AttributeImpl *self)
        {
          OBJ_CALL(self->object.clear());
          Py_RETURN_NONE;
        }

        static PyObject *t_AttributeImpl_clone(t_AttributeImpl *self)
        {
          AttributeImpl result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_AttributeImpl::wrap_Object(result);
        }

        static PyObject *t_AttributeImpl_copyTo(t_AttributeImpl *self, PyObject *arg)
        {
          AttributeImpl a0((jobject) NULL);

          if (!parseArg(arg, "k", AttributeImpl::initializeClass, &a0))
          {
            OBJ_CALL(self->object.copyTo(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "copyTo", arg);
          return NULL;
        }

        static PyObject *t_AttributeImpl_reflectAsString(t_AttributeImpl *self, PyObject *arg)
        {
          jboolean a0;
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(result = self->object.reflectAsString(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "reflectAsString", arg);
          return NULL;
        }

        static PyObject *t_AttributeImpl_reflectWith(t_AttributeImpl *self, PyObject *arg)
        {
          ::org::apache::lucene::util::AttributeReflector a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::AttributeReflector::initializeClass, &a0))
          {
            OBJ_CALL(self->object.reflectWith(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "reflectWith", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/EnglishPossessiveFilterFactory.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *EnglishPossessiveFilterFactory::class$ = NULL;
          jmethodID *EnglishPossessiveFilterFactory::mids$ = NULL;
          bool EnglishPossessiveFilterFactory::live$ = false;

          jclass EnglishPossessiveFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/EnglishPossessiveFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_a65cd6ab] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenStream;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EnglishPossessiveFilterFactory::EnglishPossessiveFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenStream EnglishPossessiveFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenStream(env->callObjectMethod(this$, mids$[mid_create_a65cd6ab], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_EnglishPossessiveFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EnglishPossessiveFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EnglishPossessiveFilterFactory_init_(t_EnglishPossessiveFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EnglishPossessiveFilterFactory_create(t_EnglishPossessiveFilterFactory *self, PyObject *args);

          static PyMethodDef t_EnglishPossessiveFilterFactory__methods_[] = {
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EnglishPossessiveFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EnglishPossessiveFilterFactory, t_EnglishPossessiveFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, EnglishPossessiveFilterFactory, t_EnglishPossessiveFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_EnglishPossessiveFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(EnglishPossessiveFilterFactory), module, "EnglishPossessiveFilterFactory", 0);
          }

          void t_EnglishPossessiveFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilterFactory).tp_dict, "class_", make_descriptor(EnglishPossessiveFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_EnglishPossessiveFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EnglishPossessiveFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EnglishPossessiveFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EnglishPossessiveFilterFactory::initializeClass, 1)))
              return NULL;
            return t_EnglishPossessiveFilterFactory::wrap_Object(EnglishPossessiveFilterFactory(((t_EnglishPossessiveFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_EnglishPossessiveFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EnglishPossessiveFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EnglishPossessiveFilterFactory_init_(t_EnglishPossessiveFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            EnglishPossessiveFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = EnglishPossessiveFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EnglishPossessiveFilterFactory_create(t_EnglishPossessiveFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EnglishPossessiveFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/OpenBitSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/Bits.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *OpenBitSet::class$ = NULL;
        jmethodID *OpenBitSet::mids$ = NULL;
        bool OpenBitSet::live$ = false;

        jclass OpenBitSet::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/OpenBitSet");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_init$_0ee6df2f] = env->getMethodID(cls, "<init>", "(J)V");
            mids$[mid_init$_ce93dbcb] = env->getMethodID(cls, "<init>", "([JI)V");
            mids$[mid_and_c2540e4f] = env->getMethodID(cls, "and", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_andNot_c2540e4f] = env->getMethodID(cls, "andNot", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_andNotCount_52061930] = env->getStaticMethodID(cls, "andNotCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_bits_03c2457d] = env->getMethodID(cls, "bits", "()Lorg/apache/lucene/util/Bits;");
            mids$[mid_bits2words_0ee6df30] = env->getStaticMethodID(cls, "bits2words", "(J)I");
            mids$[mid_capacity_54c6a17a] = env->getMethodID(cls, "capacity", "()J");
            mids$[mid_cardinality_54c6a17a] = env->getMethodID(cls, "cardinality", "()J");
            mids$[mid_clear_0ee6df2f] = env->getMethodID(cls, "clear", "(J)V");
            mids$[mid_clear_a7e12ca4] = env->getMethodID(cls, "clear", "(JJ)V");
            mids$[mid_clear_d8d154a6] = env->getMethodID(cls, "clear", "(II)V");
            mids$[mid_clone_23f9e142] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/util/OpenBitSet;");
            mids$[mid_ensureCapacity_0ee6df2f] = env->getMethodID(cls, "ensureCapacity", "(J)V");
            mids$[mid_ensureCapacityWords_39c7bd3c] = env->getMethodID(cls, "ensureCapacityWords", "(I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_fastClear_39c7bd3c] = env->getMethodID(cls, "fastClear", "(I)V");
            mids$[mid_fastClear_0ee6df2f] = env->getMethodID(cls, "fastClear", "(J)V");
            mids$[mid_fastFlip_0ee6df2f] = env->getMethodID(cls, "fastFlip", "(J)V");
            mids$[mid_fastFlip_39c7bd3c] = env->getMethodID(cls, "fastFlip", "(I)V");
            mids$[mid_fastGet_39c7bd30] = env->getMethodID(cls, "fastGet", "(I)Z");
            mids$[mid_fastGet_0ee6df23] = env->getMethodID(cls, "fastGet", "(J)Z");
            mids$[mid_fastSet_39c7bd3c] = env->getMethodID(cls, "fastSet", "(I)V");
            mids$[mid_fastSet_0ee6df2f] = env->getMethodID(cls, "fastSet", "(J)V");
            mids$[mid_flip_0ee6df2f] = env->getMethodID(cls, "flip", "(J)V");
            mids$[mid_flip_a7e12ca4] = env->getMethodID(cls, "flip", "(JJ)V");
            mids$[mid_flipAndGet_0ee6df23] = env->getMethodID(cls, "flipAndGet", "(J)Z");
            mids$[mid_flipAndGet_39c7bd30] = env->getMethodID(cls, "flipAndGet", "(I)Z");
            mids$[mid_get_0ee6df23] = env->getMethodID(cls, "get", "(J)Z");
            mids$[mid_get_39c7bd30] = env->getMethodID(cls, "get", "(I)Z");
            mids$[mid_getAndSet_0ee6df23] = env->getMethodID(cls, "getAndSet", "(J)Z");
            mids$[mid_getAndSet_39c7bd30] = env->getMethodID(cls, "getAndSet", "(I)Z");
            mids$[mid_getBit_39c7bd23] = env->getMethodID(cls, "getBit", "(I)I");
            mids$[mid_getBits_dab10e76] = env->getMethodID(cls, "getBits", "()[J");
            mids$[mid_getNumWords_54c6a179] = env->getMethodID(cls, "getNumWords", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_intersect_c2540e4f] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_intersectionCount_52061930] = env->getStaticMethodID(cls, "intersectionCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_intersects_c2540e43] = env->getMethodID(cls, "intersects", "(Lorg/apache/lucene/util/OpenBitSet;)Z");
            mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
            mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
            mids$[mid_nextSetBit_39c7bd23] = env->getMethodID(cls, "nextSetBit", "(I)I");
            mids$[mid_nextSetBit_0ee6df33] = env->getMethodID(cls, "nextSetBit", "(J)J");
            mids$[mid_or_c2540e4f] = env->getMethodID(cls, "or", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_prevSetBit_0ee6df33] = env->getMethodID(cls, "prevSetBit", "(J)J");
            mids$[mid_prevSetBit_39c7bd23] = env->getMethodID(cls, "prevSetBit", "(I)I");
            mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
            mids$[mid_remove_c2540e4f] = env->getMethodID(cls, "remove", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_set_0ee6df2f] = env->getMethodID(cls, "set", "(J)V");
            mids$[mid_set_a7e12ca4] = env->getMethodID(cls, "set", "(JJ)V");
            mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");
            mids$[mid_trimTrailingZeros_54c6a166] = env->getMethodID(cls, "trimTrailingZeros", "()V");
            mids$[mid_union_c2540e4f] = env->getMethodID(cls, "union", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_unionCount_52061930] = env->getStaticMethodID(cls, "unionCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_xor_c2540e4f] = env->getMethodID(cls, "xor", "(Lorg/apache/lucene/util/OpenBitSet;)V");
            mids$[mid_xorCount_52061930] = env->getStaticMethodID(cls, "xorCount", "(Lorg/apache/lucene/util/OpenBitSet;Lorg/apache/lucene/util/OpenBitSet;)J");
            mids$[mid_expandingWordNum_0ee6df30] = env->getMethodID(cls, "expandingWordNum", "(J)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        OpenBitSet::OpenBitSet() : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        OpenBitSet::OpenBitSet(jlong a0) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_0ee6df2f, a0)) {}

        OpenBitSet::OpenBitSet(const JArray< jlong > & a0, jint a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_ce93dbcb, a0.this$, a1)) {}

        void OpenBitSet::and$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_and_c2540e4f], a0.this$);
        }

        void OpenBitSet::andNot(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_andNot_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::andNotCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_andNotCount_52061930], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::Bits OpenBitSet::bits() const
        {
          return ::org::apache::lucene::util::Bits(env->callObjectMethod(this$, mids$[mid_bits_03c2457d]));
        }

        jint OpenBitSet::bits2words(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bits2words_0ee6df30], a0);
        }

        jlong OpenBitSet::capacity() const
        {
          return env->callLongMethod(this$, mids$[mid_capacity_54c6a17a]);
        }

        jlong OpenBitSet::cardinality() const
        {
          return env->callLongMethod(this$, mids$[mid_cardinality_54c6a17a]);
        }

        void OpenBitSet::clear(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_0ee6df2f], a0);
        }

        void OpenBitSet::clear(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_a7e12ca4], a0, a1);
        }

        void OpenBitSet::clear(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_clear_d8d154a6], a0, a1);
        }

        OpenBitSet OpenBitSet::clone() const
        {
          return OpenBitSet(env->callObjectMethod(this$, mids$[mid_clone_23f9e142]));
        }

        void OpenBitSet::ensureCapacity(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_ensureCapacity_0ee6df2f], a0);
        }

        void OpenBitSet::ensureCapacityWords(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_ensureCapacityWords_39c7bd3c], a0);
        }

        jboolean OpenBitSet::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        void OpenBitSet::fastClear(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastClear_39c7bd3c], a0);
        }

        void OpenBitSet::fastClear(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastClear_0ee6df2f], a0);
        }

        void OpenBitSet::fastFlip(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastFlip_0ee6df2f], a0);
        }

        void OpenBitSet::fastFlip(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastFlip_39c7bd3c], a0);
        }

        jboolean OpenBitSet::fastGet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fastGet_39c7bd30], a0);
        }

        jboolean OpenBitSet::fastGet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fastGet_0ee6df23], a0);
        }

        void OpenBitSet::fastSet(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastSet_39c7bd3c], a0);
        }

        void OpenBitSet::fastSet(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_fastSet_0ee6df2f], a0);
        }

        void OpenBitSet::flip(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_0ee6df2f], a0);
        }

        void OpenBitSet::flip(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_flip_a7e12ca4], a0, a1);
        }

        jboolean OpenBitSet::flipAndGet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_flipAndGet_0ee6df23], a0);
        }

        jboolean OpenBitSet::flipAndGet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_flipAndGet_39c7bd30], a0);
        }

        jboolean OpenBitSet::get(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_0ee6df23], a0);
        }

        jboolean OpenBitSet::get(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_get_39c7bd30], a0);
        }

        jboolean OpenBitSet::getAndSet(jlong a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_0ee6df23], a0);
        }

        jboolean OpenBitSet::getAndSet(jint a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_getAndSet_39c7bd30], a0);
        }

        jint OpenBitSet::getBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getBit_39c7bd23], a0);
        }

        JArray< jlong > OpenBitSet::getBits() const
        {
          return JArray< jlong >(env->callObjectMethod(this$, mids$[mid_getBits_dab10e76]));
        }

        jint OpenBitSet::getNumWords() const
        {
          return env->callIntMethod(this$, mids$[mid_getNumWords_54c6a179]);
        }

        jint OpenBitSet::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void OpenBitSet::intersect(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_intersect_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::intersectionCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_intersectionCount_52061930], a0.this$, a1.this$);
        }

        jboolean OpenBitSet::intersects(const OpenBitSet & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_intersects_c2540e43], a0.this$);
        }

        jboolean OpenBitSet::isCacheable() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
        }

        jboolean OpenBitSet::isEmpty() const
        {
          return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::org::apache::lucene::search::DocIdSetIterator OpenBitSet::iterator() const
        {
          return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
        }

        jint OpenBitSet::length() const
        {
          return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jint OpenBitSet::nextSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_nextSetBit_39c7bd23], a0);
        }

        jlong OpenBitSet::nextSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_nextSetBit_0ee6df33], a0);
        }

        void OpenBitSet::or$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_or_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::prevSetBit(jlong a0) const
        {
          return env->callLongMethod(this$, mids$[mid_prevSetBit_0ee6df33], a0);
        }

        jint OpenBitSet::prevSetBit(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_prevSetBit_39c7bd23], a0);
        }

        jlong OpenBitSet::ramBytesUsed() const
        {
          return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
        }

        void OpenBitSet::remove(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_remove_c2540e4f], a0.this$);
        }

        void OpenBitSet::set(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_set_0ee6df2f], a0);
        }

        void OpenBitSet::set(jlong a0, jlong a1) const
        {
          env->callVoidMethod(this$, mids$[mid_set_a7e12ca4], a0, a1);
        }

        jlong OpenBitSet::size() const
        {
          return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
        }

        void OpenBitSet::trimTrailingZeros() const
        {
          env->callVoidMethod(this$, mids$[mid_trimTrailingZeros_54c6a166]);
        }

        void OpenBitSet::union$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_union_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::unionCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_unionCount_52061930], a0.this$, a1.this$);
        }

        void OpenBitSet::xor$(const OpenBitSet & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_xor_c2540e4f], a0.this$);
        }

        jlong OpenBitSet::xorCount(const OpenBitSet & a0, const OpenBitSet & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_xorCount_52061930], a0.this$, a1.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_OpenBitSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSet_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OpenBitSet_init_(t_OpenBitSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OpenBitSet_and(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_andNot(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_andNotCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_bits(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_bits2words(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OpenBitSet_capacity(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_cardinality(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_clear(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_clone(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_ensureCapacity(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_ensureCapacityWords(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_equals(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastClear(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastFlip(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastGet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_fastSet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_flip(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_flipAndGet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_get(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_getAndSet(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_getBit(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_getBits(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_getNumWords(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_hashCode(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_intersect(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_intersectionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_intersects(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_isCacheable(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_isEmpty(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_iterator(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_length(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_nextSetBit(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_or(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_prevSetBit(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_ramBytesUsed(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_remove(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_set(t_OpenBitSet *self, PyObject *args);
        static PyObject *t_OpenBitSet_size(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_trimTrailingZeros(t_OpenBitSet *self);
        static PyObject *t_OpenBitSet_union(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_unionCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_xor(t_OpenBitSet *self, PyObject *arg);
        static PyObject *t_OpenBitSet_xorCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_OpenBitSet_get__cacheable(t_OpenBitSet *self, void *data);
        static PyObject *t_OpenBitSet_get__empty(t_OpenBitSet *self, void *data);
        static PyObject *t_OpenBitSet_get__numWords(t_OpenBitSet *self, void *data);
        static PyGetSetDef t_OpenBitSet__fields_[] = {
          DECLARE_GET_FIELD(t_OpenBitSet, cacheable),
          DECLARE_GET_FIELD(t_OpenBitSet, empty),
          DECLARE_GET_FIELD(t_OpenBitSet, numWords),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_OpenBitSet__methods_[] = {
          DECLARE_METHOD(t_OpenBitSet, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, and, METH_O),
          DECLARE_METHOD(t_OpenBitSet, andNot, METH_O),
          DECLARE_METHOD(t_OpenBitSet, andNotCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, bits, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, bits2words, METH_O | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, capacity, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, cardinality, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, clear, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, clone, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, ensureCapacity, METH_O),
          DECLARE_METHOD(t_OpenBitSet, ensureCapacityWords, METH_O),
          DECLARE_METHOD(t_OpenBitSet, equals, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastClear, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastFlip, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastGet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, fastSet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, flip, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, flipAndGet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, get, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, getAndSet, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, getBit, METH_O),
          DECLARE_METHOD(t_OpenBitSet, getBits, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, getNumWords, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, intersect, METH_O),
          DECLARE_METHOD(t_OpenBitSet, intersectionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, intersects, METH_O),
          DECLARE_METHOD(t_OpenBitSet, isCacheable, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, isEmpty, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, iterator, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, length, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, nextSetBit, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, or, METH_O),
          DECLARE_METHOD(t_OpenBitSet, prevSetBit, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, ramBytesUsed, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, remove, METH_O),
          DECLARE_METHOD(t_OpenBitSet, set, METH_VARARGS),
          DECLARE_METHOD(t_OpenBitSet, size, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, trimTrailingZeros, METH_NOARGS),
          DECLARE_METHOD(t_OpenBitSet, union, METH_O),
          DECLARE_METHOD(t_OpenBitSet, unionCount, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_OpenBitSet, xor, METH_O),
          DECLARE_METHOD(t_OpenBitSet, xorCount, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OpenBitSet, t_OpenBitSet, ::org::apache::lucene::search::DocIdSet, OpenBitSet, t_OpenBitSet_init_, 0, 0, t_OpenBitSet__fields_, 0, 0);

        void t_OpenBitSet::install(PyObject *module)
        {
          installType(&PY_TYPE(OpenBitSet), module, "OpenBitSet", 0);
        }

        void t_OpenBitSet::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(OpenBitSet).tp_dict, "class_", make_descriptor(OpenBitSet::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(OpenBitSet).tp_dict, "wrapfn_", make_descriptor(t_OpenBitSet::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(OpenBitSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OpenBitSet_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, OpenBitSet::initializeClass, 1)))
            return NULL;
          return t_OpenBitSet::wrap_Object(OpenBitSet(((t_OpenBitSet *) arg)->object.this$));
        }
        static PyObject *t_OpenBitSet_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, OpenBitSet::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_OpenBitSet_init_(t_OpenBitSet *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              OpenBitSet object((jobject) NULL);

              INT_CALL(object = OpenBitSet());
              self->object = object;
              break;
            }
            goto err;
           case 1:
            {
              jlong a0;
              OpenBitSet object((jobject) NULL);

              if (!parseArgs(args, "J", &a0))
              {
                INT_CALL(object = OpenBitSet(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              JArray< jlong > a0((jobject) NULL);
              jint a1;
              OpenBitSet object((jobject) NULL);

              if (!parseArgs(args, "[JI", &a0, &a1))
              {
                INT_CALL(object = OpenBitSet(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_OpenBitSet_and(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.and$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "and", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_andNot(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.andNot(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "andNot", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_andNotCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::andNotCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "andNotCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_bits(t_OpenBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.bits());
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "bits", args, 2);
        }

        static PyObject *t_OpenBitSet_bits2words(PyTypeObject *type, PyObject *arg)
        {
          jlong a0;
          jint result;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::bits2words(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bits2words", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_capacity(t_OpenBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.capacity());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_OpenBitSet_cardinality(t_OpenBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.cardinality());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_OpenBitSet_clear(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.clear(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
            {
              jint a0;
              jint a1;

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(self->object.clear(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "clear", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_clone(t_OpenBitSet *self)
        {
          OpenBitSet result((jobject) NULL);
          OBJ_CALL(result = self->object.clone());
          return t_OpenBitSet::wrap_Object(result);
        }

        static PyObject *t_OpenBitSet_ensureCapacity(t_OpenBitSet *self, PyObject *arg)
        {
          jlong a0;

          if (!parseArg(arg, "J", &a0))
          {
            OBJ_CALL(self->object.ensureCapacity(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "ensureCapacity", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_ensureCapacityWords(t_OpenBitSet *self, PyObject *arg)
        {
          jint a0;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(self->object.ensureCapacityWords(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "ensureCapacityWords", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_equals(t_OpenBitSet *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_OpenBitSet_fastClear(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.fastClear(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.fastClear(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastClear", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_fastFlip(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.fastFlip(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.fastFlip(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastFlip", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_fastGet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.fastGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.fastGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastGet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_fastSet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.fastSet(a0));
                Py_RETURN_NONE;
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.fastSet(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fastSet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_flip(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.flip(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.flip(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "flip", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_flipAndGet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.flipAndGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.flipAndGet(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "flipAndGet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_get(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "get", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_getAndSet(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jboolean result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.getAndSet(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.getAndSet(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getAndSet", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_getBit(t_OpenBitSet *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getBit(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBit", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_getBits(t_OpenBitSet *self)
        {
          JArray< jlong > result((jobject) NULL);
          OBJ_CALL(result = self->object.getBits());
          return result.wrap();
        }

        static PyObject *t_OpenBitSet_getNumWords(t_OpenBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getNumWords());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_OpenBitSet_hashCode(t_OpenBitSet *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_OpenBitSet_intersect(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.intersect(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "intersect", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_intersectionCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::intersectionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "intersectionCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_intersects(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);
          jboolean result;

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.intersects(a0));
            Py_RETURN_BOOL(result);
          }

          PyErr_SetArgsError((PyObject *) self, "intersects", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_isCacheable(t_OpenBitSet *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.isCacheable());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "isCacheable", args, 2);
        }

        static PyObject *t_OpenBitSet_isEmpty(t_OpenBitSet *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.isEmpty());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_OpenBitSet_iterator(t_OpenBitSet *self, PyObject *args)
        {
          ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.iterator());
            return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_OpenBitSet_length(t_OpenBitSet *self)
        {
          jint result;
          OBJ_CALL(result = self->object.length());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_OpenBitSet_nextSetBit(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.nextSetBit(a0));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.nextSetBit(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "nextSetBit", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_or(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.or$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "or", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_prevSetBit(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = self->object.prevSetBit(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.prevSetBit(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "prevSetBit", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_ramBytesUsed(t_OpenBitSet *self, PyObject *args)
        {
          jlong result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(OpenBitSet), (PyObject *) self, "ramBytesUsed", args, 2);
        }

        static PyObject *t_OpenBitSet_remove(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.remove(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "remove", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_set(t_OpenBitSet *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              jlong a0;
              jlong a1;

              if (!parseArgs(args, "JJ", &a0, &a1))
              {
                OBJ_CALL(self->object.set(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "set", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_size(t_OpenBitSet *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.size());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_OpenBitSet_trimTrailingZeros(t_OpenBitSet *self)
        {
          OBJ_CALL(self->object.trimTrailingZeros());
          Py_RETURN_NONE;
        }

        static PyObject *t_OpenBitSet_union(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.union$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "union", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_unionCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::unionCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "unionCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_xor(t_OpenBitSet *self, PyObject *arg)
        {
          OpenBitSet a0((jobject) NULL);

          if (!parseArg(arg, "k", OpenBitSet::initializeClass, &a0))
          {
            OBJ_CALL(self->object.xor$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "xor", arg);
          return NULL;
        }

        static PyObject *t_OpenBitSet_xorCount(PyTypeObject *type, PyObject *args)
        {
          OpenBitSet a0((jobject) NULL);
          OpenBitSet a1((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "kk", OpenBitSet::initializeClass, OpenBitSet::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::OpenBitSet::xorCount(a0, a1));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "xorCount", args);
          return NULL;
        }

        static PyObject *t_OpenBitSet_get__cacheable(t_OpenBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isCacheable());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_OpenBitSet_get__empty(t_OpenBitSet *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object.isEmpty());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_OpenBitSet_get__numWords(t_OpenBitSet *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getNumWords());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets.h"
#include "java/lang/Number.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/FacetResult.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {

          ::java::lang::Class *FloatTaxonomyFacets::class$ = NULL;
          jmethodID *FloatTaxonomyFacets::mids$ = NULL;
          bool FloatTaxonomyFacets::live$ = false;

          jclass FloatTaxonomyFacets::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/FloatTaxonomyFacets");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getSpecificValue_8ecbcac9] = env->getMethodID(cls, "getSpecificValue", "(Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Number;");
              mids$[mid_getTopChildren_37e8c044] = env->getMethodID(cls, "getTopChildren", "(ILjava/lang/String;[Ljava/lang/String;)Lorg/apache/lucene/facet/FacetResult;");
              mids$[mid_rollup_54c6a166] = env->getMethodID(cls, "rollup", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::java::lang::Number FloatTaxonomyFacets::getSpecificValue(const ::java::lang::String & a0, const JArray< ::java::lang::String > & a1) const
          {
            return ::java::lang::Number(env->callObjectMethod(this$, mids$[mid_getSpecificValue_8ecbcac9], a0.this$, a1.this$));
          }

          ::org::apache::lucene::facet::FacetResult FloatTaxonomyFacets::getTopChildren(jint a0, const ::java::lang::String & a1, const JArray< ::java::lang::String > & a2) const
          {
            return ::org::apache::lucene::facet::FacetResult(env->callObjectMethod(this$, mids$[mid_getTopChildren_37e8c044], a0, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          static PyObject *t_FloatTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FloatTaxonomyFacets_getSpecificValue(t_FloatTaxonomyFacets *self, PyObject *args);
          static PyObject *t_FloatTaxonomyFacets_getTopChildren(t_FloatTaxonomyFacets *self, PyObject *args);

          static PyMethodDef t_FloatTaxonomyFacets__methods_[] = {
            DECLARE_METHOD(t_FloatTaxonomyFacets, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, getSpecificValue, METH_VARARGS),
            DECLARE_METHOD(t_FloatTaxonomyFacets, getTopChildren, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FloatTaxonomyFacets, t_FloatTaxonomyFacets, ::org::apache::lucene::facet::taxonomy::TaxonomyFacets, FloatTaxonomyFacets, abstract_init, 0, 0, 0, 0, 0);

          void t_FloatTaxonomyFacets::install(PyObject *module)
          {
            installType(&PY_TYPE(FloatTaxonomyFacets), module, "FloatTaxonomyFacets", 0);
          }

          void t_FloatTaxonomyFacets::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FloatTaxonomyFacets).tp_dict, "class_", make_descriptor(FloatTaxonomyFacets::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FloatTaxonomyFacets).tp_dict, "wrapfn_", make_descriptor(t_FloatTaxonomyFacets::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FloatTaxonomyFacets).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FloatTaxonomyFacets_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FloatTaxonomyFacets::initializeClass, 1)))
              return NULL;
            return t_FloatTaxonomyFacets::wrap_Object(FloatTaxonomyFacets(((t_FloatTaxonomyFacets *) arg)->object.this$));
          }
          static PyObject *t_FloatTaxonomyFacets_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FloatTaxonomyFacets::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FloatTaxonomyFacets_getSpecificValue(t_FloatTaxonomyFacets *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            JArray< ::java::lang::String > a1((jobject) NULL);
            ::java::lang::Number result((jobject) NULL);

            if (!parseArgs(args, "s[s", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getSpecificValue(a0, a1));
              return ::java::lang::t_Number::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FloatTaxonomyFacets), (PyObject *) self, "getSpecificValue", args, 2);
          }

          static PyObject *t_FloatTaxonomyFacets_getTopChildren(t_FloatTaxonomyFacets *self, PyObject *args)
          {
            jint a0;
            ::java::lang::String a1((jobject) NULL);
            JArray< ::java::lang::String > a2((jobject) NULL);
            ::org::apache::lucene::facet::FacetResult result((jobject) NULL);

            if (!parseArgs(args, "Is[s", &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.getTopChildren(a0, a1, a2));
              return ::org::apache::lucene::facet::t_FacetResult::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FloatTaxonomyFacets), (PyObject *) self, "getTopChildren", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/reverse/ReverseStringFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {

          ::java::lang::Class *ReverseStringFilterFactory::class$ = NULL;
          jmethodID *ReverseStringFilterFactory::mids$ = NULL;
          bool ReverseStringFilterFactory::live$ = false;

          jclass ReverseStringFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/reverse/ReverseStringFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_b57d0b9a] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/reverse/ReverseStringFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ReverseStringFilterFactory::ReverseStringFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::reverse::ReverseStringFilter ReverseStringFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::reverse::ReverseStringFilter(env->callObjectMethod(this$, mids$[mid_create_b57d0b9a], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace reverse {
          static PyObject *t_ReverseStringFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ReverseStringFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ReverseStringFilterFactory_init_(t_ReverseStringFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ReverseStringFilterFactory_create(t_ReverseStringFilterFactory *self, PyObject *args);

          static PyMethodDef t_ReverseStringFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ReverseStringFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ReverseStringFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ReverseStringFilterFactory, t_ReverseStringFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ReverseStringFilterFactory, t_ReverseStringFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ReverseStringFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ReverseStringFilterFactory), module, "ReverseStringFilterFactory", 0);
          }

          void t_ReverseStringFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ReverseStringFilterFactory).tp_dict, "class_", make_descriptor(ReverseStringFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ReverseStringFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ReverseStringFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ReverseStringFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ReverseStringFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ReverseStringFilterFactory::wrap_Object(ReverseStringFilterFactory(((t_ReverseStringFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ReverseStringFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ReverseStringFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ReverseStringFilterFactory_init_(t_ReverseStringFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ReverseStringFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ReverseStringFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ReverseStringFilterFactory_create(t_ReverseStringFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::reverse::ReverseStringFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::reverse::t_ReverseStringFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ReverseStringFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/shingle/ShingleFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {

          ::java::lang::Class *ShingleFilter::class$ = NULL;
          jmethodID *ShingleFilter::mids$ = NULL;
          bool ShingleFilter::live$ = false;
          ::java::lang::String *ShingleFilter::DEFAULT_FILLER_TOKEN = NULL;
          jint ShingleFilter::DEFAULT_MAX_SHINGLE_SIZE = (jint) 0;
          jint ShingleFilter::DEFAULT_MIN_SHINGLE_SIZE = (jint) 0;
          ::java::lang::String *ShingleFilter::DEFAULT_TOKEN_SEPARATOR = NULL;
          ::java::lang::String *ShingleFilter::DEFAULT_TOKEN_TYPE = NULL;

          jclass ShingleFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/shingle/ShingleFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_be0a1066] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_7f9e10a8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;II)V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_setFillerToken_5fdc3f48] = env->getMethodID(cls, "setFillerToken", "(Ljava/lang/String;)V");
              mids$[mid_setMaxShingleSize_39c7bd3c] = env->getMethodID(cls, "setMaxShingleSize", "(I)V");
              mids$[mid_setMinShingleSize_39c7bd3c] = env->getMethodID(cls, "setMinShingleSize", "(I)V");
              mids$[mid_setOutputUnigrams_bb0c767f] = env->getMethodID(cls, "setOutputUnigrams", "(Z)V");
              mids$[mid_setOutputUnigramsIfNoShingles_bb0c767f] = env->getMethodID(cls, "setOutputUnigramsIfNoShingles", "(Z)V");
              mids$[mid_setTokenSeparator_5fdc3f48] = env->getMethodID(cls, "setTokenSeparator", "(Ljava/lang/String;)V");
              mids$[mid_setTokenType_5fdc3f48] = env->getMethodID(cls, "setTokenType", "(Ljava/lang/String;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_FILLER_TOKEN = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_FILLER_TOKEN", "Ljava/lang/String;"));
              DEFAULT_MAX_SHINGLE_SIZE = env->getStaticIntField(cls, "DEFAULT_MAX_SHINGLE_SIZE");
              DEFAULT_MIN_SHINGLE_SIZE = env->getStaticIntField(cls, "DEFAULT_MIN_SHINGLE_SIZE");
              DEFAULT_TOKEN_SEPARATOR = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TOKEN_SEPARATOR", "Ljava/lang/String;"));
              DEFAULT_TOKEN_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_TOKEN_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_be0a1066, a0.this$, a1.this$)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          ShingleFilter::ShingleFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jint a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_7f9e10a8, a0.this$, a1, a2)) {}

          void ShingleFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean ShingleFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void ShingleFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          void ShingleFilter::setFillerToken(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFillerToken_5fdc3f48], a0.this$);
          }

          void ShingleFilter::setMaxShingleSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxShingleSize_39c7bd3c], a0);
          }

          void ShingleFilter::setMinShingleSize(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMinShingleSize_39c7bd3c], a0);
          }

          void ShingleFilter::setOutputUnigrams(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setOutputUnigrams_bb0c767f], a0);
          }

          void ShingleFilter::setOutputUnigramsIfNoShingles(jboolean a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setOutputUnigramsIfNoShingles_bb0c767f], a0);
          }

          void ShingleFilter::setTokenSeparator(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTokenSeparator_5fdc3f48], a0.this$);
          }

          void ShingleFilter::setTokenType(const ::java::lang::String & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTokenType_5fdc3f48], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace shingle {
          static PyObject *t_ShingleFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ShingleFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ShingleFilter_init_(t_ShingleFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ShingleFilter_end(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_incrementToken(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_reset(t_ShingleFilter *self, PyObject *args);
          static PyObject *t_ShingleFilter_setFillerToken(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setMaxShingleSize(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setMinShingleSize(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setOutputUnigrams(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setOutputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setTokenSeparator(t_ShingleFilter *self, PyObject *arg);
          static PyObject *t_ShingleFilter_setTokenType(t_ShingleFilter *self, PyObject *arg);
          static int t_ShingleFilter_set__fillerToken(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__maxShingleSize(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__minShingleSize(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__outputUnigrams(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__outputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__tokenSeparator(t_ShingleFilter *self, PyObject *arg, void *data);
          static int t_ShingleFilter_set__tokenType(t_ShingleFilter *self, PyObject *arg, void *data);
          static PyGetSetDef t_ShingleFilter__fields_[] = {
            DECLARE_SET_FIELD(t_ShingleFilter, fillerToken),
            DECLARE_SET_FIELD(t_ShingleFilter, maxShingleSize),
            DECLARE_SET_FIELD(t_ShingleFilter, minShingleSize),
            DECLARE_SET_FIELD(t_ShingleFilter, outputUnigrams),
            DECLARE_SET_FIELD(t_ShingleFilter, outputUnigramsIfNoShingles),
            DECLARE_SET_FIELD(t_ShingleFilter, tokenSeparator),
            DECLARE_SET_FIELD(t_ShingleFilter, tokenType),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_ShingleFilter__methods_[] = {
            DECLARE_METHOD(t_ShingleFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ShingleFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_ShingleFilter, setFillerToken, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setMaxShingleSize, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setMinShingleSize, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setOutputUnigrams, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setOutputUnigramsIfNoShingles, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setTokenSeparator, METH_O),
            DECLARE_METHOD(t_ShingleFilter, setTokenType, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ShingleFilter, t_ShingleFilter, ::org::apache::lucene::analysis::TokenFilter, ShingleFilter, t_ShingleFilter_init_, 0, 0, t_ShingleFilter__fields_, 0, 0);

          void t_ShingleFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ShingleFilter), module, "ShingleFilter", 0);
          }

          void t_ShingleFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "class_", make_descriptor(ShingleFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "wrapfn_", make_descriptor(t_ShingleFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(ShingleFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_FILLER_TOKEN", make_descriptor(j2p(*ShingleFilter::DEFAULT_FILLER_TOKEN)));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_MAX_SHINGLE_SIZE", make_descriptor(ShingleFilter::DEFAULT_MAX_SHINGLE_SIZE));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_MIN_SHINGLE_SIZE", make_descriptor(ShingleFilter::DEFAULT_MIN_SHINGLE_SIZE));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_TOKEN_SEPARATOR", make_descriptor(j2p(*ShingleFilter::DEFAULT_TOKEN_SEPARATOR)));
            PyDict_SetItemString(PY_TYPE(ShingleFilter).tp_dict, "DEFAULT_TOKEN_TYPE", make_descriptor(j2p(*ShingleFilter::DEFAULT_TOKEN_TYPE)));
          }

          static PyObject *t_ShingleFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ShingleFilter::initializeClass, 1)))
              return NULL;
            return t_ShingleFilter::wrap_Object(ShingleFilter(((t_ShingleFilter *) arg)->object.this$));
          }
          static PyObject *t_ShingleFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ShingleFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ShingleFilter_init_(t_ShingleFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = ShingleFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = ShingleFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jint a2;
                ShingleFilter object((jobject) NULL);

                if (!parseArgs(args, "kII", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = ShingleFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ShingleFilter_end(t_ShingleFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ShingleFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_ShingleFilter_incrementToken(t_ShingleFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ShingleFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_ShingleFilter_reset(t_ShingleFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ShingleFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_ShingleFilter_setFillerToken(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setFillerToken(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFillerToken", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setMaxShingleSize(t_ShingleFilter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxShingleSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxShingleSize", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setMinShingleSize(t_ShingleFilter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMinShingleSize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMinShingleSize", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setOutputUnigrams(t_ShingleFilter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setOutputUnigrams(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOutputUnigrams", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setOutputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg)
          {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
              OBJ_CALL(self->object.setOutputUnigramsIfNoShingles(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setOutputUnigramsIfNoShingles", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setTokenSeparator(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTokenSeparator(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTokenSeparator", arg);
            return NULL;
          }

          static PyObject *t_ShingleFilter_setTokenType(t_ShingleFilter *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(self->object.setTokenType(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTokenType", arg);
            return NULL;
          }

          static int t_ShingleFilter_set__fillerToken(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setFillerToken(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fillerToken", arg);
            return -1;
          }

          static int t_ShingleFilter_set__maxShingleSize(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxShingleSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxShingleSize", arg);
            return -1;
          }

          static int t_ShingleFilter_set__minShingleSize(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMinShingleSize(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "minShingleSize", arg);
            return -1;
          }

          static int t_ShingleFilter_set__outputUnigrams(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setOutputUnigrams(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "outputUnigrams", arg);
            return -1;
          }

          static int t_ShingleFilter_set__outputUnigramsIfNoShingles(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              jboolean value;
              if (!parseArg(arg, "Z", &value))
              {
                INT_CALL(self->object.setOutputUnigramsIfNoShingles(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "outputUnigramsIfNoShingles", arg);
            return -1;
          }

          static int t_ShingleFilter_set__tokenSeparator(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTokenSeparator(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "tokenSeparator", arg);
            return -1;
          }

          static int t_ShingleFilter_set__tokenType(t_ShingleFilter *self, PyObject *arg, void *data)
          {
            {
              ::java::lang::String value((jobject) NULL);
              if (!parseArg(arg, "s", &value))
              {
                INT_CALL(self->object.setTokenType(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "tokenType", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.h"
#include "org/apache/lucene/search/spans/SpanQuery.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *SpanQueryBuilder::class$ = NULL;
            jmethodID *SpanQueryBuilder::mids$ = NULL;
            bool SpanQueryBuilder::live$ = false;

            jclass SpanQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_SpanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SpanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);

            static PyMethodDef t_SpanQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_SpanQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SpanQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SpanQueryBuilder, t_SpanQueryBuilder, ::org::apache::lucene::queryparser::xml::QueryBuilder, SpanQueryBuilder, abstract_init, 0, 0, 0, 0, 0);

            void t_SpanQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(SpanQueryBuilder), module, "SpanQueryBuilder", 0);
            }

            void t_SpanQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilder).tp_dict, "class_", make_descriptor(SpanQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_SpanQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SpanQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SpanQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SpanQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_SpanQueryBuilder::wrap_Object(SpanQueryBuilder(((t_SpanQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_SpanQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SpanQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/ToParentBlockJoinSortField.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/Filter.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *ToParentBlockJoinSortField::class$ = NULL;
          jmethodID *ToParentBlockJoinSortField::mids$ = NULL;
          bool ToParentBlockJoinSortField::live$ = false;

          jclass ToParentBlockJoinSortField::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/ToParentBlockJoinSortField");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_71ee501b] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZLorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_init$_f8b18760] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZZLorg/apache/lucene/search/Filter;Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ToParentBlockJoinSortField::ToParentBlockJoinSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, const ::org::apache::lucene::search::Filter & a3, const ::org::apache::lucene::search::Filter & a4) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_71ee501b, a0.this$, a1.this$, a2, a3.this$, a4.this$)) {}

          ToParentBlockJoinSortField::ToParentBlockJoinSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, jboolean a3, const ::org::apache::lucene::search::Filter & a4, const ::org::apache::lucene::search::Filter & a5) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_f8b18760, a0.this$, a1.this$, a2, a3, a4.this$, a5.this$)) {}

          ::org::apache::lucene::search::FieldComparator ToParentBlockJoinSortField::getComparator(jint a0, jint a1) const
          {
            return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_ToParentBlockJoinSortField_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ToParentBlockJoinSortField_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ToParentBlockJoinSortField_init_(t_ToParentBlockJoinSortField *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ToParentBlockJoinSortField_getComparator(t_ToParentBlockJoinSortField *self, PyObject *args);

          static PyMethodDef t_ToParentBlockJoinSortField__methods_[] = {
            DECLARE_METHOD(t_ToParentBlockJoinSortField, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinSortField, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ToParentBlockJoinSortField, getComparator, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ToParentBlockJoinSortField, t_ToParentBlockJoinSortField, ::org::apache::lucene::search::SortField, ToParentBlockJoinSortField, t_ToParentBlockJoinSortField_init_, 0, 0, 0, 0, 0);

          void t_ToParentBlockJoinSortField::install(PyObject *module)
          {
            installType(&PY_TYPE(ToParentBlockJoinSortField), module, "ToParentBlockJoinSortField", 0);
          }

          void t_ToParentBlockJoinSortField::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinSortField).tp_dict, "class_", make_descriptor(ToParentBlockJoinSortField::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinSortField).tp_dict, "wrapfn_", make_descriptor(t_ToParentBlockJoinSortField::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ToParentBlockJoinSortField).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ToParentBlockJoinSortField_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ToParentBlockJoinSortField::initializeClass, 1)))
              return NULL;
            return t_ToParentBlockJoinSortField::wrap_Object(ToParentBlockJoinSortField(((t_ToParentBlockJoinSortField *) arg)->object.this$));
          }
          static PyObject *t_ToParentBlockJoinSortField_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ToParentBlockJoinSortField::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ToParentBlockJoinSortField_init_(t_ToParentBlockJoinSortField *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                ::org::apache::lucene::search::Filter a3((jobject) NULL);
                ::org::apache::lucene::search::Filter a4((jobject) NULL);
                ToParentBlockJoinSortField object((jobject) NULL);

                if (!parseArgs(args, "sKZkk", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &a4))
                {
                  INT_CALL(object = ToParentBlockJoinSortField(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 6:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
                PyTypeObject **p1;
                jboolean a2;
                jboolean a3;
                ::org::apache::lucene::search::Filter a4((jobject) NULL);
                ::org::apache::lucene::search::Filter a5((jobject) NULL);
                ToParentBlockJoinSortField object((jobject) NULL);

                if (!parseArgs(args, "sKZZkk", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, ::org::apache::lucene::search::Filter::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &a4, &a5))
                {
                  INT_CALL(object = ToParentBlockJoinSortField(a0, a1, a2, a3, a4, a5));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ToParentBlockJoinSortField_getComparator(t_ToParentBlockJoinSortField *self, PyObject *args)
          {
            jint a0;
            jint a1;
            ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.getComparator(a0, a1));
              return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ToParentBlockJoinSortField), (PyObject *) self, "getComparator", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/Highlighter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "org/apache/lucene/search/highlight/Encoder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/Analyzer.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/highlight/Scorer.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "org/apache/lucene/search/highlight/InvalidTokenOffsetsException.h"
#include "org/apache/lucene/search/highlight/TextFragment.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *Highlighter::class$ = NULL;
          jmethodID *Highlighter::mids$ = NULL;
          bool Highlighter::live$ = false;
          jint Highlighter::DEFAULT_MAX_CHARS_TO_ANALYZE = (jint) 0;

          jclass Highlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/Highlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bd3ff73] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_init$_f1844869] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Formatter;Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_init$_154db1db] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/Formatter;Lorg/apache/lucene/search/highlight/Encoder;Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_getBestFragment_36cba2a5] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragment_87f832fb] = env->getMethodID(cls, "getBestFragment", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragments_9d06cc93] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_getBestFragments_eafe1ad1] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;");
              mids$[mid_getBestFragments_652768f5] = env->getMethodID(cls, "getBestFragments", "(Lorg/apache/lucene/analysis/Analyzer;Ljava/lang/String;Ljava/lang/String;I)[Ljava/lang/String;");
              mids$[mid_getBestTextFragments_d795d3a4] = env->getMethodID(cls, "getBestTextFragments", "(Lorg/apache/lucene/analysis/TokenStream;Ljava/lang/String;ZI)[Lorg/apache/lucene/search/highlight/TextFragment;");
              mids$[mid_getEncoder_e179b145] = env->getMethodID(cls, "getEncoder", "()Lorg/apache/lucene/search/highlight/Encoder;");
              mids$[mid_getFragmentScorer_0eb4d65e] = env->getMethodID(cls, "getFragmentScorer", "()Lorg/apache/lucene/search/highlight/Scorer;");
              mids$[mid_getMaxDocCharsToAnalyze_54c6a179] = env->getMethodID(cls, "getMaxDocCharsToAnalyze", "()I");
              mids$[mid_getTextFragmenter_c9a72455] = env->getMethodID(cls, "getTextFragmenter", "()Lorg/apache/lucene/search/highlight/Fragmenter;");
              mids$[mid_setEncoder_8b781108] = env->getMethodID(cls, "setEncoder", "(Lorg/apache/lucene/search/highlight/Encoder;)V");
              mids$[mid_setFragmentScorer_9bd3ff73] = env->getMethodID(cls, "setFragmentScorer", "(Lorg/apache/lucene/search/highlight/Scorer;)V");
              mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c] = env->getMethodID(cls, "setMaxDocCharsToAnalyze", "(I)V");
              mids$[mid_setTextFragmenter_d6ed4d20] = env->getMethodID(cls, "setTextFragmenter", "(Lorg/apache/lucene/search/highlight/Fragmenter;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_CHARS_TO_ANALYZE = env->getStaticIntField(cls, "DEFAULT_MAX_CHARS_TO_ANALYZE");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Scorer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9bd3ff73, a0.this$)) {}

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Formatter & a0, const ::org::apache::lucene::search::highlight::Scorer & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f1844869, a0.this$, a1.this$)) {}

          Highlighter::Highlighter(const ::org::apache::lucene::search::highlight::Formatter & a0, const ::org::apache::lucene::search::highlight::Encoder & a1, const ::org::apache::lucene::search::highlight::Scorer & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_154db1db, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String Highlighter::getBestFragment(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_36cba2a5], a0.this$, a1.this$));
          }

          ::java::lang::String Highlighter::getBestFragment(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragment_87f832fb], a0.this$, a1.this$, a2.this$));
          }

          JArray< ::java::lang::String > Highlighter::getBestFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jint a2) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_9d06cc93], a0.this$, a1.this$, a2));
          }

          ::java::lang::String Highlighter::getBestFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jint a2, const ::java::lang::String & a3) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getBestFragments_eafe1ad1], a0.this$, a1.this$, a2, a3.this$));
          }

          JArray< ::java::lang::String > Highlighter::getBestFragments(const ::org::apache::lucene::analysis::Analyzer & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getBestFragments_652768f5], a0.this$, a1.this$, a2.this$, a3));
          }

          JArray< ::org::apache::lucene::search::highlight::TextFragment > Highlighter::getBestTextFragments(const ::org::apache::lucene::analysis::TokenStream & a0, const ::java::lang::String & a1, jboolean a2, jint a3) const
          {
            return JArray< ::org::apache::lucene::search::highlight::TextFragment >(env->callObjectMethod(this$, mids$[mid_getBestTextFragments_d795d3a4], a0.this$, a1.this$, a2, a3));
          }

          ::org::apache::lucene::search::highlight::Encoder Highlighter::getEncoder() const
          {
            return ::org::apache::lucene::search::highlight::Encoder(env->callObjectMethod(this$, mids$[mid_getEncoder_e179b145]));
          }

          ::org::apache::lucene::search::highlight::Scorer Highlighter::getFragmentScorer() const
          {
            return ::org::apache::lucene::search::highlight::Scorer(env->callObjectMethod(this$, mids$[mid_getFragmentScorer_0eb4d65e]));
          }

          jint Highlighter::getMaxDocCharsToAnalyze() const
          {
            return env->callIntMethod(this$, mids$[mid_getMaxDocCharsToAnalyze_54c6a179]);
          }

          ::org::apache::lucene::search::highlight::Fragmenter Highlighter::getTextFragmenter() const
          {
            return ::org::apache::lucene::search::highlight::Fragmenter(env->callObjectMethod(this$, mids$[mid_getTextFragmenter_c9a72455]));
          }

          void Highlighter::setEncoder(const ::org::apache::lucene::search::highlight::Encoder & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setEncoder_8b781108], a0.this$);
          }

          void Highlighter::setFragmentScorer(const ::org::apache::lucene::search::highlight::Scorer & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setFragmentScorer_9bd3ff73], a0.this$);
          }

          void Highlighter::setMaxDocCharsToAnalyze(jint a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setMaxDocCharsToAnalyze_39c7bd3c], a0);
          }

          void Highlighter::setTextFragmenter(const ::org::apache::lucene::search::highlight::Fragmenter & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_setTextFragmenter_d6ed4d20], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_Highlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Highlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Highlighter_init_(t_Highlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Highlighter_getBestFragment(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getBestFragments(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getBestTextFragments(t_Highlighter *self, PyObject *args);
          static PyObject *t_Highlighter_getEncoder(t_Highlighter *self);
          static PyObject *t_Highlighter_getFragmentScorer(t_Highlighter *self);
          static PyObject *t_Highlighter_getMaxDocCharsToAnalyze(t_Highlighter *self);
          static PyObject *t_Highlighter_getTextFragmenter(t_Highlighter *self);
          static PyObject *t_Highlighter_setEncoder(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setFragmentScorer(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setMaxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_setTextFragmenter(t_Highlighter *self, PyObject *arg);
          static PyObject *t_Highlighter_get__encoder(t_Highlighter *self, void *data);
          static int t_Highlighter_set__encoder(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__fragmentScorer(t_Highlighter *self, void *data);
          static int t_Highlighter_set__fragmentScorer(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__maxDocCharsToAnalyze(t_Highlighter *self, void *data);
          static int t_Highlighter_set__maxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg, void *data);
          static PyObject *t_Highlighter_get__textFragmenter(t_Highlighter *self, void *data);
          static int t_Highlighter_set__textFragmenter(t_Highlighter *self, PyObject *arg, void *data);
          static PyGetSetDef t_Highlighter__fields_[] = {
            DECLARE_GETSET_FIELD(t_Highlighter, encoder),
            DECLARE_GETSET_FIELD(t_Highlighter, fragmentScorer),
            DECLARE_GETSET_FIELD(t_Highlighter, maxDocCharsToAnalyze),
            DECLARE_GETSET_FIELD(t_Highlighter, textFragmenter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Highlighter__methods_[] = {
            DECLARE_METHOD(t_Highlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Highlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Highlighter, getBestFragment, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getBestFragments, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getBestTextFragments, METH_VARARGS),
            DECLARE_METHOD(t_Highlighter, getEncoder, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getFragmentScorer, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getMaxDocCharsToAnalyze, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, getTextFragmenter, METH_NOARGS),
            DECLARE_METHOD(t_Highlighter, setEncoder, METH_O),
            DECLARE_METHOD(t_Highlighter, setFragmentScorer, METH_O),
            DECLARE_METHOD(t_Highlighter, setMaxDocCharsToAnalyze, METH_O),
            DECLARE_METHOD(t_Highlighter, setTextFragmenter, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Highlighter, t_Highlighter, ::java::lang::Object, Highlighter, t_Highlighter_init_, 0, 0, t_Highlighter__fields_, 0, 0);

          void t_Highlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(Highlighter), module, "Highlighter", 0);
          }

          void t_Highlighter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "class_", make_descriptor(Highlighter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "wrapfn_", make_descriptor(t_Highlighter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(Highlighter::initializeClass);
            PyDict_SetItemString(PY_TYPE(Highlighter).tp_dict, "DEFAULT_MAX_CHARS_TO_ANALYZE", make_descriptor(Highlighter::DEFAULT_MAX_CHARS_TO_ANALYZE));
          }

          static PyObject *t_Highlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Highlighter::initializeClass, 1)))
              return NULL;
            return t_Highlighter::wrap_Object(Highlighter(((t_Highlighter *) arg)->object.this$));
          }
          static PyObject *t_Highlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Highlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Highlighter_init_(t_Highlighter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::highlight::Scorer a0((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0))
                {
                  INT_CALL(object = Highlighter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::highlight::Formatter a0((jobject) NULL);
                ::org::apache::lucene::search::highlight::Scorer a1((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "kk", ::org::apache::lucene::search::highlight::Formatter::initializeClass, ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = Highlighter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::search::highlight::Formatter a0((jobject) NULL);
                ::org::apache::lucene::search::highlight::Encoder a1((jobject) NULL);
                ::org::apache::lucene::search::highlight::Scorer a2((jobject) NULL);
                Highlighter object((jobject) NULL);

                if (!parseArgs(args, "kkk", ::org::apache::lucene::search::highlight::Formatter::initializeClass, ::org::apache::lucene::search::highlight::Encoder::initializeClass, ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Highlighter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Highlighter_getBestFragment(t_Highlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ks", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1));
                  return j2p(result);
                }
              }
              break;
             case 3:
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "kss", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getBestFragment(a0, a1, a2));
                  return j2p(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragment", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getBestFragments(t_Highlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "ksI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 4:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                jint a2;
                ::java::lang::String a3((jobject) NULL);
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, "ksIs", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3));
                  return j2p(result);
                }
              }
              {
                ::org::apache::lucene::analysis::Analyzer a0((jobject) NULL);
                ::java::lang::String a1((jobject) NULL);
                ::java::lang::String a2((jobject) NULL);
                jint a3;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "kssI", ::org::apache::lucene::analysis::Analyzer::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.getBestFragments(a0, a1, a2, a3));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "getBestFragments", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getBestTextFragments(t_Highlighter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean a2;
            jint a3;
            JArray< ::org::apache::lucene::search::highlight::TextFragment > result((jobject) NULL);

            if (!parseArgs(args, "ksZI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(result = self->object.getBestTextFragments(a0, a1, a2, a3));
              return JArray<jobject>(result.this$).wrap(::org::apache::lucene::search::highlight::t_TextFragment::wrap_jobject);
            }

            PyErr_SetArgsError((PyObject *) self, "getBestTextFragments", args);
            return NULL;
          }

          static PyObject *t_Highlighter_getEncoder(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Encoder result((jobject) NULL);
            OBJ_CALL(result = self->object.getEncoder());
            return ::org::apache::lucene::search::highlight::t_Encoder::wrap_Object(result);
          }

          static PyObject *t_Highlighter_getFragmentScorer(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Scorer result((jobject) NULL);
            OBJ_CALL(result = self->object.getFragmentScorer());
            return ::org::apache::lucene::search::highlight::t_Scorer::wrap_Object(result);
          }

          static PyObject *t_Highlighter_getMaxDocCharsToAnalyze(t_Highlighter *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getMaxDocCharsToAnalyze());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_Highlighter_getTextFragmenter(t_Highlighter *self)
          {
            ::org::apache::lucene::search::highlight::Fragmenter result((jobject) NULL);
            OBJ_CALL(result = self->object.getTextFragmenter());
            return ::org::apache::lucene::search::highlight::t_Fragmenter::wrap_Object(result);
          }

          static PyObject *t_Highlighter_setEncoder(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Encoder a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Encoder::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setEncoder(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setEncoder", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setFragmentScorer(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Scorer a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setFragmentScorer(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setFragmentScorer", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setMaxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg)
          {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(self->object.setMaxDocCharsToAnalyze(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setMaxDocCharsToAnalyze", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_setTextFragmenter(t_Highlighter *self, PyObject *arg)
          {
            ::org::apache::lucene::search::highlight::Fragmenter a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Fragmenter::initializeClass, &a0))
            {
              OBJ_CALL(self->object.setTextFragmenter(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setTextFragmenter", arg);
            return NULL;
          }

          static PyObject *t_Highlighter_get__encoder(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Encoder value((jobject) NULL);
            OBJ_CALL(value = self->object.getEncoder());
            return ::org::apache::lucene::search::highlight::t_Encoder::wrap_Object(value);
          }
          static int t_Highlighter_set__encoder(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Encoder value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Encoder::initializeClass, &value))
              {
                INT_CALL(self->object.setEncoder(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "encoder", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__fragmentScorer(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Scorer value((jobject) NULL);
            OBJ_CALL(value = self->object.getFragmentScorer());
            return ::org::apache::lucene::search::highlight::t_Scorer::wrap_Object(value);
          }
          static int t_Highlighter_set__fragmentScorer(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Scorer value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Scorer::initializeClass, &value))
              {
                INT_CALL(self->object.setFragmentScorer(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "fragmentScorer", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__maxDocCharsToAnalyze(t_Highlighter *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getMaxDocCharsToAnalyze());
            return PyInt_FromLong((long) value);
          }
          static int t_Highlighter_set__maxDocCharsToAnalyze(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setMaxDocCharsToAnalyze(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "maxDocCharsToAnalyze", arg);
            return -1;
          }

          static PyObject *t_Highlighter_get__textFragmenter(t_Highlighter *self, void *data)
          {
            ::org::apache::lucene::search::highlight::Fragmenter value((jobject) NULL);
            OBJ_CALL(value = self->object.getTextFragmenter());
            return ::org::apache::lucene::search::highlight::t_Fragmenter::wrap_Object(value);
          }
          static int t_Highlighter_set__textFragmenter(t_Highlighter *self, PyObject *arg, void *data)
          {
            {
              ::org::apache::lucene::search::highlight::Fragmenter value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::search::highlight::Fragmenter::initializeClass, &value))
              {
                INT_CALL(self->object.setTextFragmenter(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "textFragmenter", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParser.h"
#include "java/util/ArrayList.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserTokenManager.h"
#include "org/apache/lucene/queryparser/surround/parser/QueryParserConstants.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queryparser/surround/query/SrndQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/parser/ParseException.h"
#include "org/apache/lucene/queryparser/surround/parser/CharStream.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *QueryParser::class$ = NULL;
            jmethodID *QueryParser::mids$ = NULL;
            jfieldID *QueryParser::fids$ = NULL;
            bool QueryParser::live$ = false;

            jclass QueryParser::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/QueryParser");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_c0dff4ef] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;)V");
                mids$[mid_init$_5bfa6473] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_AndQuery_26528772] = env->getMethodID(cls, "AndQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_FieldsQuery_26528772] = env->getMethodID(cls, "FieldsQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_FieldsQueryList_87851566] = env->getMethodID(cls, "FieldsQueryList", "()Ljava/util/List;");
                mids$[mid_NQuery_26528772] = env->getMethodID(cls, "NQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_NotQuery_26528772] = env->getMethodID(cls, "NotQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_OptionalFields_21eb51b0] = env->getMethodID(cls, "OptionalFields", "()Ljava/util/ArrayList;");
                mids$[mid_OptionalWeights_5e4f727f] = env->getMethodID(cls, "OptionalWeights", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;)V");
                mids$[mid_OrQuery_26528772] = env->getMethodID(cls, "OrQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_PrefixOperatorQuery_26528772] = env->getMethodID(cls, "PrefixOperatorQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_PrimaryQuery_26528772] = env->getMethodID(cls, "PrimaryQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_ReInit_c0dff4ef] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;)V");
                mids$[mid_ReInit_5bfa6473] = env->getMethodID(cls, "ReInit", "(Lorg/apache/lucene/queryparser/surround/parser/CharStream;)V");
                mids$[mid_SimpleTerm_26528772] = env->getMethodID(cls, "SimpleTerm", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_TopSrndQuery_26528772] = env->getMethodID(cls, "TopSrndQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_WQuery_26528772] = env->getMethodID(cls, "WQuery", "()Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_disable_tracing_54c6a166] = env->getMethodID(cls, "disable_tracing", "()V");
                mids$[mid_enable_tracing_54c6a166] = env->getMethodID(cls, "enable_tracing", "()V");
                mids$[mid_generateParseException_dc2be8ae] = env->getMethodID(cls, "generateParseException", "()Lorg/apache/lucene/queryparser/surround/parser/ParseException;");
                mids$[mid_getNextToken_353aefd6] = env->getMethodID(cls, "getNextToken", "()Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_getToken_1162c488] = env->getMethodID(cls, "getToken", "(I)Lorg/apache/lucene/queryparser/surround/parser/Token;");
                mids$[mid_parse_eb9ff21c] = env->getStaticMethodID(cls, "parse", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_parse2_eb9ff21c] = env->getMethodID(cls, "parse2", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getPrefixQuery_484af57f] = env->getMethodID(cls, "getPrefixQuery", "(Ljava/lang/String;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getOpDistance_5fdc3f57] = env->getStaticMethodID(cls, "getOpDistance", "(Ljava/lang/String;)I");
                mids$[mid_getFieldsQuery_4e036592] = env->getMethodID(cls, "getFieldsQuery", "(Lorg/apache/lucene/queryparser/surround/query/SrndQuery;Ljava/util/ArrayList;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getOrQuery_685e421b] = env->getMethodID(cls, "getOrQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getAndQuery_685e421b] = env->getMethodID(cls, "getAndQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getNotQuery_3a2a55ec] = env->getMethodID(cls, "getNotQuery", "(Ljava/util/List;Lorg/apache/lucene/queryparser/surround/parser/Token;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_checkDistanceSubQueries_657c42bd] = env->getStaticMethodID(cls, "checkDistanceSubQueries", "(Lorg/apache/lucene/queryparser/surround/query/DistanceQuery;Ljava/lang/String;)V");
                mids$[mid_getDistanceQuery_b401ccf2] = env->getMethodID(cls, "getDistanceQuery", "(Ljava/util/List;ZLorg/apache/lucene/queryparser/surround/parser/Token;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_getTermQuery_484af57f] = env->getMethodID(cls, "getTermQuery", "(Ljava/lang/String;Z)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");
                mids$[mid_allowedSuffix_5fdc3f44] = env->getMethodID(cls, "allowedSuffix", "(Ljava/lang/String;)Z");
                mids$[mid_allowedTruncation_5fdc3f44] = env->getMethodID(cls, "allowedTruncation", "(Ljava/lang/String;)Z");
                mids$[mid_getTruncQuery_eb9ff21c] = env->getMethodID(cls, "getTruncQuery", "(Ljava/lang/String;)Lorg/apache/lucene/queryparser/surround/query/SrndQuery;");

                fids$ = new jfieldID[max_fid];
                fids$[fid_jj_nt] = env->getFieldID(cls, "jj_nt", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_token] = env->getFieldID(cls, "token", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_token_source] = env->getFieldID(cls, "token_source", "Lorg/apache/lucene/queryparser/surround/parser/QueryParserTokenManager;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryParser::QueryParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            QueryParser::QueryParser(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c0dff4ef, a0.this$)) {}

            QueryParser::QueryParser(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5bfa6473, a0.this$)) {}

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::AndQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_AndQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::FieldsQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_FieldsQuery_26528772]));
            }

            ::java::util::List QueryParser::FieldsQueryList() const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_FieldsQueryList_87851566]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::NQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_NQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::NotQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_NotQuery_26528772]));
            }

            ::java::util::ArrayList QueryParser::OptionalFields() const
            {
              return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_OptionalFields_21eb51b0]));
            }

            void QueryParser::OptionalWeights(const ::org::apache::lucene::queryparser::surround::query::SrndQuery & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_OptionalWeights_5e4f727f], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::OrQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_OrQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::PrefixOperatorQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_PrefixOperatorQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::PrimaryQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_PrimaryQuery_26528772]));
            }

            void QueryParser::ReInit(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_c0dff4ef], a0.this$);
            }

            void QueryParser::ReInit(const ::org::apache::lucene::queryparser::surround::parser::CharStream & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_ReInit_5bfa6473], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::SimpleTerm() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_SimpleTerm_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::TopSrndQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_TopSrndQuery_26528772]));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::WQuery() const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_WQuery_26528772]));
            }

            void QueryParser::disable_tracing() const
            {
              env->callVoidMethod(this$, mids$[mid_disable_tracing_54c6a166]);
            }

            void QueryParser::enable_tracing() const
            {
              env->callVoidMethod(this$, mids$[mid_enable_tracing_54c6a166]);
            }

            ::org::apache::lucene::queryparser::surround::parser::ParseException QueryParser::generateParseException() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::ParseException(env->callObjectMethod(this$, mids$[mid_generateParseException_dc2be8ae]));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::getNextToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getNextToken_353aefd6]));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::getToken(jint a0) const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->callObjectMethod(this$, mids$[mid_getToken_1162c488], a0));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::parse(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callStaticObjectMethod(cls, mids$[mid_parse_eb9ff21c], a0.this$));
            }

            ::org::apache::lucene::queryparser::surround::query::SrndQuery QueryParser::parse2(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::queryparser::surround::query::SrndQuery(env->callObjectMethod(this$, mids$[mid_parse2_eb9ff21c], a0.this$));
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::_get_jj_nt() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_jj_nt]));
            }

            void QueryParser::_set_jj_nt(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_jj_nt], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::parser::Token QueryParser::_get_token() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_token]));
            }

            void QueryParser::_set_token(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_token], a0.this$);
            }

            ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager QueryParser::_get_token_source() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager(env->getObjectField(this$, fids$[fid_token_source]));
            }

            void QueryParser::_set_token_source(const ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager & a0) const
            {
              env->setObjectField(this$, fids$[fid_token_source], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryParser_AndQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_FieldsQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_FieldsQueryList(t_QueryParser *self);
            static PyObject *t_QueryParser_NQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_NotQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_OptionalFields(t_QueryParser *self);
            static PyObject *t_QueryParser_OptionalWeights(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_OrQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_PrefixOperatorQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_PrimaryQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args);
            static PyObject *t_QueryParser_SimpleTerm(t_QueryParser *self);
            static PyObject *t_QueryParser_TopSrndQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_WQuery(t_QueryParser *self);
            static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self);
            static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self);
            static PyObject *t_QueryParser_generateParseException(t_QueryParser *self);
            static PyObject *t_QueryParser_getNextToken(t_QueryParser *self);
            static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_parse(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryParser_parse2(t_QueryParser *self, PyObject *arg);
            static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data);
            static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data);
            static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data);
            static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data);
            static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data);
            static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data);

            static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data);
            static PyGetSetDef t_QueryParser__fields_[] = {
              DECLARE_GETSET_FIELD(t_QueryParser, jj_nt),
              DECLARE_GETSET_FIELD(t_QueryParser, token),
              DECLARE_GETSET_FIELD(t_QueryParser, token_source),
              DECLARE_GET_FIELD(t_QueryParser, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryParser__methods_[] = {
              DECLARE_METHOD(t_QueryParser, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, AndQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, FieldsQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, FieldsQueryList, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, NQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, NotQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, OptionalFields, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, OptionalWeights, METH_O),
              DECLARE_METHOD(t_QueryParser, OrQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, PrefixOperatorQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, PrimaryQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, ReInit, METH_VARARGS),
              DECLARE_METHOD(t_QueryParser, SimpleTerm, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, TopSrndQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, WQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, disable_tracing, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, enable_tracing, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, generateParseException, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_QueryParser, getToken, METH_O),
              DECLARE_METHOD(t_QueryParser, parse, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryParser, parse2, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryParser, t_QueryParser, ::java::lang::Object, QueryParser, t_QueryParser_init_, 0, 0, t_QueryParser__fields_, 0, 0);

            void t_QueryParser::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryParser), module, "QueryParser", 0);
            }

            void t_QueryParser::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "class_", make_descriptor(QueryParser::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "wrapfn_", make_descriptor(t_QueryParser::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryParser).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryParser_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryParser::initializeClass, 1)))
                return NULL;
              return t_QueryParser::wrap_Object(QueryParser(((t_QueryParser *) arg)->object.this$));
            }
            static PyObject *t_QueryParser_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryParser::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryParser_init_(t_QueryParser *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  QueryParser object((jobject) NULL);

                  INT_CALL(object = QueryParser());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager a0((jobject) NULL);
                  QueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);
                  QueryParser object((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    INT_CALL(object = QueryParser(a0));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryParser_AndQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.AndQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_FieldsQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.FieldsQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_FieldsQueryList(t_QueryParser *self)
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.FieldsQueryList());
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::queryparser::surround::query::PY_TYPE(SrndQuery));
            }

            static PyObject *t_QueryParser_NQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.NQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_NotQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.NotQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_OptionalFields(t_QueryParser *self)
            {
              ::java::util::ArrayList result((jobject) NULL);
              OBJ_CALL(result = self->object.OptionalFields());
              return ::java::util::t_ArrayList::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            static PyObject *t_QueryParser_OptionalWeights(t_QueryParser *self, PyObject *arg)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::query::SrndQuery::initializeClass, &a0))
              {
                OBJ_CALL(self->object.OptionalWeights(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "OptionalWeights", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_OrQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.OrQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_PrefixOperatorQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.PrefixOperatorQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_PrimaryQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.PrimaryQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_ReInit(t_QueryParser *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
                {
                  ::org::apache::lucene::queryparser::surround::parser::CharStream a0((jobject) NULL);

                  if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::surround::parser::CharStream::initializeClass, &a0))
                  {
                    OBJ_CALL(self->object.ReInit(a0));
                    Py_RETURN_NONE;
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "ReInit", args);
              return NULL;
            }

            static PyObject *t_QueryParser_SimpleTerm(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.SimpleTerm());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_TopSrndQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.TopSrndQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_WQuery(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);
              OBJ_CALL(result = self->object.WQuery());
              return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
            }

            static PyObject *t_QueryParser_disable_tracing(t_QueryParser *self)
            {
              OBJ_CALL(self->object.disable_tracing());
              Py_RETURN_NONE;
            }

            static PyObject *t_QueryParser_enable_tracing(t_QueryParser *self)
            {
              OBJ_CALL(self->object.enable_tracing());
              Py_RETURN_NONE;
            }

            static PyObject *t_QueryParser_generateParseException(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::ParseException result((jobject) NULL);
              OBJ_CALL(result = self->object.generateParseException());
              return ::org::apache::lucene::queryparser::surround::parser::t_ParseException::wrap_Object(result);
            }

            static PyObject *t_QueryParser_getNextToken(t_QueryParser *self)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);
              OBJ_CALL(result = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
            }

            static PyObject *t_QueryParser_getToken(t_QueryParser *self, PyObject *arg)
            {
              jint a0;
              ::org::apache::lucene::queryparser::surround::parser::Token result((jobject) NULL);

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.getToken(a0));
                return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getToken", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_parse(PyTypeObject *type, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::queryparser::surround::parser::QueryParser::parse(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError(type, "parse", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_parse2(t_QueryParser *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SrndQuery result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.parse2(a0));
                return ::org::apache::lucene::queryparser::surround::query::t_SrndQuery::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "parse2", arg);
              return NULL;
            }

            static PyObject *t_QueryParser_get__jj_nt(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_jj_nt());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_QueryParser_set__jj_nt(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_jj_nt(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "jj_nt", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__token(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_token());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_QueryParser_set__token(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_token(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "token", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__token_source(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager value((jobject) NULL);
              OBJ_CALL(value = self->object._get_token_source());
              return ::org::apache::lucene::queryparser::surround::parser::t_QueryParserTokenManager::wrap_Object(value);
            }
            static int t_QueryParser_set__token_source(t_QueryParser *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::QueryParserTokenManager::initializeClass, &value))
              {
                INT_CALL(self->object._set_token_source(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "token_source", arg);
              return -1;
            }

            static PyObject *t_QueryParser_get__nextToken(t_QueryParser *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object.getNextToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *BoostingQueryBuilder::class$ = NULL;
            jmethodID *BoostingQueryBuilder::mids$ = NULL;
            bool BoostingQueryBuilder::live$ = false;

            jclass BoostingQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/BoostingQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6566a539] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            BoostingQueryBuilder::BoostingQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6566a539, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_BoostingQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_BoostingQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_BoostingQueryBuilder_init_(t_BoostingQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_BoostingQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_BoostingQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_BoostingQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(BoostingQueryBuilder, t_BoostingQueryBuilder, ::java::lang::Object, BoostingQueryBuilder, t_BoostingQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_BoostingQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(BoostingQueryBuilder), module, "BoostingQueryBuilder", 0);
            }

            void t_BoostingQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(BoostingQueryBuilder).tp_dict, "class_", make_descriptor(BoostingQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(BoostingQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_BoostingQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(BoostingQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_BoostingQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, BoostingQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_BoostingQueryBuilder::wrap_Object(BoostingQueryBuilder(((t_BoostingQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_BoostingQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, BoostingQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_BoostingQueryBuilder_init_(t_BoostingQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilder a0((jobject) NULL);
              BoostingQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = BoostingQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldCache$Ints.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldCache$Ints::class$ = NULL;
        jmethodID *FieldCache$Ints::mids$ = NULL;
        bool FieldCache$Ints::live$ = false;
        FieldCache$Ints *FieldCache$Ints::EMPTY = NULL;

        jclass FieldCache$Ints::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldCache$Ints");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_get_39c7bd23] = env->getMethodID(cls, "get", "(I)I");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new FieldCache$Ints(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/search/FieldCache$Ints;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldCache$Ints::FieldCache$Ints() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint FieldCache$Ints::get(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_get_39c7bd23], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldCache$Ints_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldCache$Ints_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldCache$Ints_init_(t_FieldCache$Ints *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldCache$Ints_get(t_FieldCache$Ints *self, PyObject *arg);

        static PyMethodDef t_FieldCache$Ints__methods_[] = {
          DECLARE_METHOD(t_FieldCache$Ints, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Ints, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldCache$Ints, get, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldCache$Ints, t_FieldCache$Ints, ::java::lang::Object, FieldCache$Ints, t_FieldCache$Ints_init_, 0, 0, 0, 0, 0);

        void t_FieldCache$Ints::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldCache$Ints), module, "FieldCache$Ints", 0);
        }

        void t_FieldCache$Ints::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "class_", make_descriptor(FieldCache$Ints::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "wrapfn_", make_descriptor(t_FieldCache$Ints::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(FieldCache$Ints::initializeClass);
          PyDict_SetItemString(PY_TYPE(FieldCache$Ints).tp_dict, "EMPTY", make_descriptor(t_FieldCache$Ints::wrap_Object(*FieldCache$Ints::EMPTY)));
        }

        static PyObject *t_FieldCache$Ints_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldCache$Ints::initializeClass, 1)))
            return NULL;
          return t_FieldCache$Ints::wrap_Object(FieldCache$Ints(((t_FieldCache$Ints *) arg)->object.this$));
        }
        static PyObject *t_FieldCache$Ints_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldCache$Ints::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldCache$Ints_init_(t_FieldCache$Ints *self, PyObject *args, PyObject *kwds)
        {
          FieldCache$Ints object((jobject) NULL);

          INT_CALL(object = FieldCache$Ints());
          self->object = object;

          return 0;
        }

        static PyObject *t_FieldCache$Ints_get(t_FieldCache$Ints *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SegmentInfoWriter::class$ = NULL;
          jmethodID *Lucene40SegmentInfoWriter::mids$ = NULL;
          bool Lucene40SegmentInfoWriter::live$ = false;

          jclass Lucene40SegmentInfoWriter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoWriter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_write_3589180f] = env->getMethodID(cls, "write", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/store/IOContext;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SegmentInfoWriter::Lucene40SegmentInfoWriter() : ::org::apache::lucene::codecs::SegmentInfoWriter(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void Lucene40SegmentInfoWriter::write(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::SegmentInfo & a1, const ::org::apache::lucene::index::FieldInfos & a2, const ::org::apache::lucene::store::IOContext & a3) const
          {
            env->callVoidMethod(this$, mids$[mid_write_3589180f], a0.this$, a1.this$, a2.this$, a3.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SegmentInfoWriter_init_(t_Lucene40SegmentInfoWriter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SegmentInfoWriter_write(t_Lucene40SegmentInfoWriter *self, PyObject *args);

          static PyMethodDef t_Lucene40SegmentInfoWriter__methods_[] = {
            DECLARE_METHOD(t_Lucene40SegmentInfoWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SegmentInfoWriter, t_Lucene40SegmentInfoWriter, ::org::apache::lucene::codecs::SegmentInfoWriter, Lucene40SegmentInfoWriter, t_Lucene40SegmentInfoWriter_init_, 0, 0, 0, 0, 0);

          void t_Lucene40SegmentInfoWriter::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SegmentInfoWriter), module, "Lucene40SegmentInfoWriter", 0);
          }

          void t_Lucene40SegmentInfoWriter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoWriter).tp_dict, "class_", make_descriptor(Lucene40SegmentInfoWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoWriter).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SegmentInfoWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40SegmentInfoWriter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SegmentInfoWriter::initializeClass, 1)))
              return NULL;
            return t_Lucene40SegmentInfoWriter::wrap_Object(Lucene40SegmentInfoWriter(((t_Lucene40SegmentInfoWriter *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SegmentInfoWriter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SegmentInfoWriter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SegmentInfoWriter_init_(t_Lucene40SegmentInfoWriter *self, PyObject *args, PyObject *kwds)
          {
            Lucene40SegmentInfoWriter object((jobject) NULL);

            INT_CALL(object = Lucene40SegmentInfoWriter());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40SegmentInfoWriter_write(t_Lucene40SegmentInfoWriter *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a1((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a2((jobject) NULL);
            ::org::apache::lucene::store::IOContext a3((jobject) NULL);

            if (!parseArgs(args, "kkkk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
            {
              OBJ_CALL(self->object.write(a0, a1, a2, a3));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoWriter), (PyObject *) self, "write", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/WhitespaceAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *WhitespaceAnalyzer::class$ = NULL;
          jmethodID *WhitespaceAnalyzer::mids$ = NULL;
          bool WhitespaceAnalyzer::live$ = false;

          jclass WhitespaceAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/WhitespaceAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WhitespaceAnalyzer::WhitespaceAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::Analyzer(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_WhitespaceAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WhitespaceAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WhitespaceAnalyzer_init_(t_WhitespaceAnalyzer *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_WhitespaceAnalyzer__methods_[] = {
            DECLARE_METHOD(t_WhitespaceAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WhitespaceAnalyzer, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WhitespaceAnalyzer, t_WhitespaceAnalyzer, ::org::apache::lucene::analysis::Analyzer, WhitespaceAnalyzer, t_WhitespaceAnalyzer_init_, 0, 0, 0, 0, 0);

          void t_WhitespaceAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(WhitespaceAnalyzer), module, "WhitespaceAnalyzer", 0);
          }

          void t_WhitespaceAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WhitespaceAnalyzer).tp_dict, "class_", make_descriptor(WhitespaceAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WhitespaceAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_WhitespaceAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WhitespaceAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WhitespaceAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WhitespaceAnalyzer::initializeClass, 1)))
              return NULL;
            return t_WhitespaceAnalyzer::wrap_Object(WhitespaceAnalyzer(((t_WhitespaceAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_WhitespaceAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WhitespaceAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WhitespaceAnalyzer_init_(t_WhitespaceAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::Version a0((jobject) NULL);
            PyTypeObject **p0;
            WhitespaceAnalyzer object((jobject) NULL);

            if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
            {
              INT_CALL(object = WhitespaceAnalyzer(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder.h"
#include "org/apache/lucene/queryparser/xml/QueryBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {

            ::java::lang::Class *DisjunctionMaxQueryBuilder::class$ = NULL;
            jmethodID *DisjunctionMaxQueryBuilder::mids$ = NULL;
            bool DisjunctionMaxQueryBuilder::live$ = false;

            jclass DisjunctionMaxQueryBuilder::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/builders/DisjunctionMaxQueryBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_6566a539] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/xml/QueryBuilder;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DisjunctionMaxQueryBuilder::DisjunctionMaxQueryBuilder(const ::org::apache::lucene::queryparser::xml::QueryBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6566a539, a0.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          namespace builders {
            static PyObject *t_DisjunctionMaxQueryBuilder_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DisjunctionMaxQueryBuilder_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DisjunctionMaxQueryBuilder_init_(t_DisjunctionMaxQueryBuilder *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_DisjunctionMaxQueryBuilder__methods_[] = {
              DECLARE_METHOD(t_DisjunctionMaxQueryBuilder, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DisjunctionMaxQueryBuilder, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DisjunctionMaxQueryBuilder, t_DisjunctionMaxQueryBuilder, ::java::lang::Object, DisjunctionMaxQueryBuilder, t_DisjunctionMaxQueryBuilder_init_, 0, 0, 0, 0, 0);

            void t_DisjunctionMaxQueryBuilder::install(PyObject *module)
            {
              installType(&PY_TYPE(DisjunctionMaxQueryBuilder), module, "DisjunctionMaxQueryBuilder", 0);
            }

            void t_DisjunctionMaxQueryBuilder::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DisjunctionMaxQueryBuilder).tp_dict, "class_", make_descriptor(DisjunctionMaxQueryBuilder::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DisjunctionMaxQueryBuilder).tp_dict, "wrapfn_", make_descriptor(t_DisjunctionMaxQueryBuilder::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DisjunctionMaxQueryBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DisjunctionMaxQueryBuilder_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DisjunctionMaxQueryBuilder::initializeClass, 1)))
                return NULL;
              return t_DisjunctionMaxQueryBuilder::wrap_Object(DisjunctionMaxQueryBuilder(((t_DisjunctionMaxQueryBuilder *) arg)->object.this$));
            }
            static PyObject *t_DisjunctionMaxQueryBuilder_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DisjunctionMaxQueryBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DisjunctionMaxQueryBuilder_init_(t_DisjunctionMaxQueryBuilder *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queryparser::xml::QueryBuilder a0((jobject) NULL);
              DisjunctionMaxQueryBuilder object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::xml::QueryBuilder::initializeClass, &a0))
              {
                INT_CALL(object = DisjunctionMaxQueryBuilder(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/StandardBooleanQueryNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *StandardBooleanQueryNode::class$ = NULL;
              jmethodID *StandardBooleanQueryNode::mids$ = NULL;
              bool StandardBooleanQueryNode::live$ = false;

              jclass StandardBooleanQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/StandardBooleanQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_7eb182ec] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Z)V");
                  mids$[mid_isDisableCoord_54c6a16a] = env->getMethodID(cls, "isDisableCoord", "()Z");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              StandardBooleanQueryNode::StandardBooleanQueryNode(const ::java::util::List & a0, jboolean a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode(env->newObject(initializeClass, &mids$, mid_init$_7eb182ec, a0.this$, a1)) {}

              jboolean StandardBooleanQueryNode::isDisableCoord() const
              {
                return env->callBooleanMethod(this$, mids$[mid_isDisableCoord_54c6a16a]);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_StandardBooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_StandardBooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_StandardBooleanQueryNode_init_(t_StandardBooleanQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_StandardBooleanQueryNode_isDisableCoord(t_StandardBooleanQueryNode *self);
              static PyObject *t_StandardBooleanQueryNode_get__disableCoord(t_StandardBooleanQueryNode *self, void *data);
              static PyGetSetDef t_StandardBooleanQueryNode__fields_[] = {
                DECLARE_GET_FIELD(t_StandardBooleanQueryNode, disableCoord),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_StandardBooleanQueryNode__methods_[] = {
                DECLARE_METHOD(t_StandardBooleanQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_StandardBooleanQueryNode, isDisableCoord, METH_NOARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(StandardBooleanQueryNode, t_StandardBooleanQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::BooleanQueryNode, StandardBooleanQueryNode, t_StandardBooleanQueryNode_init_, 0, 0, t_StandardBooleanQueryNode__fields_, 0, 0);

              void t_StandardBooleanQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(StandardBooleanQueryNode), module, "StandardBooleanQueryNode", 0);
              }

              void t_StandardBooleanQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNode).tp_dict, "class_", make_descriptor(StandardBooleanQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNode).tp_dict, "wrapfn_", make_descriptor(t_StandardBooleanQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(StandardBooleanQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_StandardBooleanQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, StandardBooleanQueryNode::initializeClass, 1)))
                  return NULL;
                return t_StandardBooleanQueryNode::wrap_Object(StandardBooleanQueryNode(((t_StandardBooleanQueryNode *) arg)->object.this$));
              }
              static PyObject *t_StandardBooleanQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, StandardBooleanQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_StandardBooleanQueryNode_init_(t_StandardBooleanQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                jboolean a1;
                StandardBooleanQueryNode object((jobject) NULL);

                if (!parseArgs(args, "KZ", ::java::util::List::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1))
                {
                  INT_CALL(object = StandardBooleanQueryNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_StandardBooleanQueryNode_isDisableCoord(t_StandardBooleanQueryNode *self)
              {
                jboolean result;
                OBJ_CALL(result = self->object.isDisableCoord());
                Py_RETURN_BOOL(result);
              }

              static PyObject *t_StandardBooleanQueryNode_get__disableCoord(t_StandardBooleanQueryNode *self, void *data)
              {
                jboolean value;
                OBJ_CALL(value = self->object.isDisableCoord());
                Py_RETURN_BOOL(value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/ext/ParserExtension.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/ext/ExtensionQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/classic/ParseException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {

          ::java::lang::Class *ParserExtension::class$ = NULL;
          jmethodID *ParserExtension::mids$ = NULL;
          bool ParserExtension::live$ = false;

          jclass ParserExtension::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/ext/ParserExtension");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_parse_d185629b] = env->getMethodID(cls, "parse", "(Lorg/apache/lucene/queryparser/ext/ExtensionQuery;)Lorg/apache/lucene/search/Query;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ParserExtension::ParserExtension() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Query ParserExtension::parse(const ::org::apache::lucene::queryparser::ext::ExtensionQuery & a0) const
          {
            return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_parse_d185629b], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace ext {
          static PyObject *t_ParserExtension_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ParserExtension_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ParserExtension_init_(t_ParserExtension *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ParserExtension_parse(t_ParserExtension *self, PyObject *arg);

          static PyMethodDef t_ParserExtension__methods_[] = {
            DECLARE_METHOD(t_ParserExtension, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserExtension, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ParserExtension, parse, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ParserExtension, t_ParserExtension, ::java::lang::Object, ParserExtension, t_ParserExtension_init_, 0, 0, 0, 0, 0);

          void t_ParserExtension::install(PyObject *module)
          {
            installType(&PY_TYPE(ParserExtension), module, "ParserExtension", 0);
          }

          void t_ParserExtension::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ParserExtension).tp_dict, "class_", make_descriptor(ParserExtension::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ParserExtension).tp_dict, "wrapfn_", make_descriptor(t_ParserExtension::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ParserExtension).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ParserExtension_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ParserExtension::initializeClass, 1)))
              return NULL;
            return t_ParserExtension::wrap_Object(ParserExtension(((t_ParserExtension *) arg)->object.this$));
          }
          static PyObject *t_ParserExtension_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ParserExtension::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ParserExtension_init_(t_ParserExtension *self, PyObject *args, PyObject *kwds)
          {
            ParserExtension object((jobject) NULL);

            INT_CALL(object = ParserExtension());
            self->object = object;

            return 0;
          }

          static PyObject *t_ParserExtension_parse(t_ParserExtension *self, PyObject *arg)
          {
            ::org::apache::lucene::queryparser::ext::ExtensionQuery a0((jobject) NULL);
            ::org::apache::lucene::search::Query result((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::ext::ExtensionQuery::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.parse(a0));
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "parse", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TSTLookup.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TSTLookup::class$ = NULL;
            jmethodID *TSTLookup::mids$ = NULL;
            bool TSTLookup::live$ = false;

            jclass TSTLookup::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TSTLookup");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_add_cb8bea96] = env->getMethodID(cls, "add", "(Ljava/lang/CharSequence;Ljava/lang/Object;)Z");
                mids$[mid_build_1754a234] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/search/suggest/InputIterator;)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getCount_54c6a17a] = env->getMethodID(cls, "getCount", "()J");
                mids$[mid_load_f5d6a55d] = env->getMethodID(cls, "load", "(Lorg/apache/lucene/store/DataInput;)Z");
                mids$[mid_lookup_dd3e9f51] = env->getMethodID(cls, "lookup", "(Ljava/lang/CharSequence;Ljava/util/Set;ZI)Ljava/util/List;");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_store_27875f5b] = env->getMethodID(cls, "store", "(Lorg/apache/lucene/store/DataOutput;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TSTLookup::TSTLookup() : ::org::apache::lucene::search::suggest::Lookup(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            jboolean TSTLookup::add(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_add_cb8bea96], a0.this$, a1.this$);
            }

            void TSTLookup::build(const ::org::apache::lucene::search::suggest::InputIterator & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_build_1754a234], a0.this$);
            }

            ::java::lang::Object TSTLookup::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            jlong TSTLookup::getCount() const
            {
              return env->callLongMethod(this$, mids$[mid_getCount_54c6a17a]);
            }

            jboolean TSTLookup::load(const ::org::apache::lucene::store::DataInput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_load_f5d6a55d], a0.this$);
            }

            ::java::util::List TSTLookup::lookup(const ::java::lang::CharSequence & a0, const ::java::util::Set & a1, jboolean a2, jint a3) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_lookup_dd3e9f51], a0.this$, a1.this$, a2, a3));
            }

            jlong TSTLookup::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            jboolean TSTLookup::store(const ::org::apache::lucene::store::DataOutput & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_store_27875f5b], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TSTLookup_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTLookup_instance_(PyTypeObject *type, PyObject *arg);
            static int t_TSTLookup_init_(t_TSTLookup *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TSTLookup_add(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_build(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_get(t_TSTLookup *self, PyObject *arg);
            static PyObject *t_TSTLookup_getCount(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_load(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_lookup(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_ramBytesUsed(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_store(t_TSTLookup *self, PyObject *args);
            static PyObject *t_TSTLookup_get__count(t_TSTLookup *self, void *data);
            static PyGetSetDef t_TSTLookup__fields_[] = {
              DECLARE_GET_FIELD(t_TSTLookup, count),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TSTLookup__methods_[] = {
              DECLARE_METHOD(t_TSTLookup, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTLookup, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTLookup, add, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, build, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, get, METH_O),
              DECLARE_METHOD(t_TSTLookup, getCount, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, load, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, lookup, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, ramBytesUsed, METH_VARARGS),
              DECLARE_METHOD(t_TSTLookup, store, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TSTLookup, t_TSTLookup, ::org::apache::lucene::search::suggest::Lookup, TSTLookup, t_TSTLookup_init_, 0, 0, t_TSTLookup__fields_, 0, 0);

            void t_TSTLookup::install(PyObject *module)
            {
              installType(&PY_TYPE(TSTLookup), module, "TSTLookup", 0);
            }

            void t_TSTLookup::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TSTLookup).tp_dict, "class_", make_descriptor(TSTLookup::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TSTLookup).tp_dict, "wrapfn_", make_descriptor(t_TSTLookup::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TSTLookup).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TSTLookup_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TSTLookup::initializeClass, 1)))
                return NULL;
              return t_TSTLookup::wrap_Object(TSTLookup(((t_TSTLookup *) arg)->object.this$));
            }
            static PyObject *t_TSTLookup_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TSTLookup::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_TSTLookup_init_(t_TSTLookup *self, PyObject *args, PyObject *kwds)
            {
              TSTLookup object((jobject) NULL);

              INT_CALL(object = TSTLookup());
              self->object = object;

              return 0;
            }

            static PyObject *t_TSTLookup_add(t_TSTLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Oo", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(result = self->object.add(a0, a1));
                Py_RETURN_BOOL(result);
              }

              PyErr_SetArgsError((PyObject *) self, "add", args);
              return NULL;
            }

            static PyObject *t_TSTLookup_build(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::InputIterator a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::suggest::InputIterator::initializeClass, &a0))
              {
                OBJ_CALL(self->object.build(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "build", args, 2);
            }

            static PyObject *t_TSTLookup_get(t_TSTLookup *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_TSTLookup_getCount(t_TSTLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getCount());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "getCount", args, 2);
            }

            static PyObject *t_TSTLookup_load(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataInput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataInput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.load(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "load", args, 2);
            }

            static PyObject *t_TSTLookup_lookup(t_TSTLookup *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              jint a3;
              ::java::util::List result((jobject) NULL);

              if (!parseArgs(args, "OKZI", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_, &a2, &a3))
              {
                OBJ_CALL(result = self->object.lookup(a0, a1, a2, a3));
                return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::suggest::PY_TYPE(Lookup$LookupResult));
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "lookup", args, 2);
            }

            static PyObject *t_TSTLookup_ramBytesUsed(t_TSTLookup *self, PyObject *args)
            {
              jlong result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.ramBytesUsed());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "ramBytesUsed", args, 2);
            }

            static PyObject *t_TSTLookup_store(t_TSTLookup *self, PyObject *args)
            {
              ::org::apache::lucene::store::DataOutput a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.store(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(TSTLookup), (PyObject *) self, "store", args, 2);
            }

            static PyObject *t_TSTLookup_get__count(t_TSTLookup *self, void *data)
            {
              jlong value;
              OBJ_CALL(value = self->object.getCount());
              return PyLong_FromLongLong((PY_LONG_LONG) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$StoredFieldStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$StoredFieldStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$StoredFieldStatus::fids$ = NULL;
        bool CheckIndex$Status$StoredFieldStatus::live$ = false;

        jclass CheckIndex$Status$StoredFieldStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$StoredFieldStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docCount] = env->getFieldID(cls, "docCount", "I");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totFields] = env->getFieldID(cls, "totFields", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint CheckIndex$Status$StoredFieldStatus::_get_docCount() const
        {
          return env->getIntField(this$, fids$[fid_docCount]);
        }

        void CheckIndex$Status$StoredFieldStatus::_set_docCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$StoredFieldStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$StoredFieldStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$StoredFieldStatus::_get_totFields() const
        {
          return env->getLongField(this$, fids$[fid_totFields]);
        }

        void CheckIndex$Status$StoredFieldStatus::_set_totFields(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totFields], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__docCount(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__docCount(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__error(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__error(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__totFields(t_CheckIndex$Status$StoredFieldStatus *self, void *data);
        static int t_CheckIndex$Status$StoredFieldStatus_set__totFields(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$StoredFieldStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, docCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$StoredFieldStatus, totFields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$StoredFieldStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$StoredFieldStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$StoredFieldStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$StoredFieldStatus, t_CheckIndex$Status$StoredFieldStatus, ::java::lang::Object, CheckIndex$Status$StoredFieldStatus, abstract_init, 0, 0, t_CheckIndex$Status$StoredFieldStatus__fields_, 0, 0);

        void t_CheckIndex$Status$StoredFieldStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$StoredFieldStatus), module, "CheckIndex$Status$StoredFieldStatus", 0);
        }

        void t_CheckIndex$Status$StoredFieldStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$StoredFieldStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$StoredFieldStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$StoredFieldStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$StoredFieldStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$StoredFieldStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$StoredFieldStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$StoredFieldStatus::wrap_Object(CheckIndex$Status$StoredFieldStatus(((t_CheckIndex$Status$StoredFieldStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$StoredFieldStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$StoredFieldStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__docCount(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__docCount(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__error(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__error(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$StoredFieldStatus_get__totFields(t_CheckIndex$Status$StoredFieldStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totFields());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$StoredFieldStatus_set__totFields(t_CheckIndex$Status$StoredFieldStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totFields(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totFields", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/util/List.h"
#include "java/lang/Float.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/util/Locale.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {

            ::java::lang::Class *JaspellTernarySearchTrie::class$ = NULL;
            jmethodID *JaspellTernarySearchTrie::mids$ = NULL;
            bool JaspellTernarySearchTrie::live$ = false;

            jclass JaspellTernarySearchTrie::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
                mids$[mid_init$_56b0e4b3] = env->getMethodID(cls, "<init>", "(Ljava/util/Locale;)V");
                mids$[mid_init$_9e00f624] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Z)V");
                mids$[mid_get_a739ccff] = env->getMethodID(cls, "get", "(Ljava/lang/CharSequence;)Ljava/lang/Object;");
                mids$[mid_getAndIncrement_b837041d] = env->getMethodID(cls, "getAndIncrement", "(Ljava/lang/String;)Ljava/lang/Float;");
                mids$[mid_matchAlmost_0feb8f08] = env->getMethodID(cls, "matchAlmost", "(Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_matchAlmost_560b361c] = env->getMethodID(cls, "matchAlmost", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_matchPrefix_0feb8f08] = env->getMethodID(cls, "matchPrefix", "(Ljava/lang/String;)Ljava/util/List;");
                mids$[mid_matchPrefix_560b361c] = env->getMethodID(cls, "matchPrefix", "(Ljava/lang/CharSequence;I)Ljava/util/List;");
                mids$[mid_numDataNodes_54c6a179] = env->getMethodID(cls, "numDataNodes", "()I");
                mids$[mid_numNodes_54c6a179] = env->getMethodID(cls, "numNodes", "()I");
                mids$[mid_put_cb8bea9a] = env->getMethodID(cls, "put", "(Ljava/lang/CharSequence;Ljava/lang/Object;)V");
                mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
                mids$[mid_remove_5fdc3f48] = env->getMethodID(cls, "remove", "(Ljava/lang/String;)V");
                mids$[mid_setMatchAlmostDiff_39c7bd3c] = env->getMethodID(cls, "setMatchAlmostDiff", "(I)V");
                mids$[mid_setNumReturnValues_39c7bd3c] = env->getMethodID(cls, "setNumReturnValues", "(I)V");
                mids$[mid_getKey_67caf3f3] = env->getMethodID(cls, "getKey", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)Ljava/lang/String;");
                mids$[mid_getNode_627fe0cf] = env->getMethodID(cls, "getNode", "(Ljava/lang/CharSequence;Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;");
                mids$[mid_getOrCreateNode_8f2fe50d] = env->getMethodID(cls, "getOrCreateNode", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;");
                mids$[mid_numDataNodes_8b97b83b] = env->getMethodID(cls, "numDataNodes", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)I");
                mids$[mid_numNodes_8b97b83b] = env->getMethodID(cls, "numNodes", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;)I");
                mids$[mid_sortKeys_4e6ea08e] = env->getMethodID(cls, "sortKeys", "(Lorg/apache/lucene/search/suggest/jaspell/JaspellTernarySearchTrie$TSTNode;I)Ljava/util/List;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JaspellTernarySearchTrie::JaspellTernarySearchTrie() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::util::Locale & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_56b0e4b3, a0.this$)) {}

            JaspellTernarySearchTrie::JaspellTernarySearchTrie(const ::java::io::File & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9e00f624, a0.this$, a1)) {}

            ::java::lang::Object JaspellTernarySearchTrie::get(const ::java::lang::CharSequence & a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a739ccff], a0.this$));
            }

            ::java::lang::Float JaspellTernarySearchTrie::getAndIncrement(const ::java::lang::String & a0) const
            {
              return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_getAndIncrement_b837041d], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchAlmost(const ::java::lang::String & a0) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchAlmost_0feb8f08], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchAlmost(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchAlmost_560b361c], a0.this$, a1));
            }

            ::java::util::List JaspellTernarySearchTrie::matchPrefix(const ::java::lang::String & a0) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchPrefix_0feb8f08], a0.this$));
            }

            ::java::util::List JaspellTernarySearchTrie::matchPrefix(const ::java::lang::CharSequence & a0, jint a1) const
            {
              return ::java::util::List(env->callObjectMethod(this$, mids$[mid_matchPrefix_560b361c], a0.this$, a1));
            }

            jint JaspellTernarySearchTrie::numDataNodes() const
            {
              return env->callIntMethod(this$, mids$[mid_numDataNodes_54c6a179]);
            }

            jint JaspellTernarySearchTrie::numNodes() const
            {
              return env->callIntMethod(this$, mids$[mid_numNodes_54c6a179]);
            }

            void JaspellTernarySearchTrie::put(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_put_cb8bea9a], a0.this$, a1.this$);
            }

            jlong JaspellTernarySearchTrie::ramBytesUsed() const
            {
              return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
            }

            void JaspellTernarySearchTrie::remove(const ::java::lang::String & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_remove_5fdc3f48], a0.this$);
            }

            void JaspellTernarySearchTrie::setMatchAlmostDiff(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setMatchAlmostDiff_39c7bd3c], a0);
            }

            void JaspellTernarySearchTrie::setNumReturnValues(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNumReturnValues_39c7bd3c], a0);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace jaspell {
            static PyObject *t_JaspellTernarySearchTrie_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_instance_(PyTypeObject *type, PyObject *arg);
            static int t_JaspellTernarySearchTrie_init_(t_JaspellTernarySearchTrie *self, PyObject *args, PyObject *kwds);
            static PyObject *t_JaspellTernarySearchTrie_get(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_getAndIncrement(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_matchAlmost(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_matchPrefix(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_numDataNodes(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_numNodes(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_put(t_JaspellTernarySearchTrie *self, PyObject *args);
            static PyObject *t_JaspellTernarySearchTrie_ramBytesUsed(t_JaspellTernarySearchTrie *self);
            static PyObject *t_JaspellTernarySearchTrie_remove(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_setMatchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static PyObject *t_JaspellTernarySearchTrie_setNumReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg);
            static int t_JaspellTernarySearchTrie_set__matchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data);
            static int t_JaspellTernarySearchTrie_set__numReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data);
            static PyGetSetDef t_JaspellTernarySearchTrie__fields_[] = {
              DECLARE_SET_FIELD(t_JaspellTernarySearchTrie, matchAlmostDiff),
              DECLARE_SET_FIELD(t_JaspellTernarySearchTrie, numReturnValues),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_JaspellTernarySearchTrie__methods_[] = {
              DECLARE_METHOD(t_JaspellTernarySearchTrie, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, get, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, getAndIncrement, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, matchAlmost, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, matchPrefix, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, numDataNodes, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, numNodes, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, put, METH_VARARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, ramBytesUsed, METH_NOARGS),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, remove, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, setMatchAlmostDiff, METH_O),
              DECLARE_METHOD(t_JaspellTernarySearchTrie, setNumReturnValues, METH_O),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(JaspellTernarySearchTrie, t_JaspellTernarySearchTrie, ::java::lang::Object, JaspellTernarySearchTrie, t_JaspellTernarySearchTrie_init_, 0, 0, t_JaspellTernarySearchTrie__fields_, 0, 0);

            void t_JaspellTernarySearchTrie::install(PyObject *module)
            {
              installType(&PY_TYPE(JaspellTernarySearchTrie), module, "JaspellTernarySearchTrie", 0);
            }

            void t_JaspellTernarySearchTrie::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(JaspellTernarySearchTrie).tp_dict, "class_", make_descriptor(JaspellTernarySearchTrie::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(JaspellTernarySearchTrie).tp_dict, "wrapfn_", make_descriptor(t_JaspellTernarySearchTrie::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(JaspellTernarySearchTrie).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_JaspellTernarySearchTrie_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, JaspellTernarySearchTrie::initializeClass, 1)))
                return NULL;
              return t_JaspellTernarySearchTrie::wrap_Object(JaspellTernarySearchTrie(((t_JaspellTernarySearchTrie *) arg)->object.this$));
            }
            static PyObject *t_JaspellTernarySearchTrie_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, JaspellTernarySearchTrie::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_JaspellTernarySearchTrie_init_(t_JaspellTernarySearchTrie *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  JaspellTernarySearchTrie object((jobject) NULL);

                  INT_CALL(object = JaspellTernarySearchTrie());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::java::io::File a0((jobject) NULL);
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0));
                    self->object = object;
                    break;
                  }
                }
                {
                  ::java::util::Locale a0((jobject) NULL);
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::io::File a0((jobject) NULL);
                  jboolean a1;
                  JaspellTernarySearchTrie object((jobject) NULL);

                  if (!parseArgs(args, "kZ", ::java::io::File::initializeClass, &a0, &a1))
                  {
                    INT_CALL(object = JaspellTernarySearchTrie(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_JaspellTernarySearchTrie_get(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object result((jobject) NULL);

              if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
              {
                OBJ_CALL(result = self->object.get(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "get", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_getAndIncrement(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Float result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getAndIncrement(a0));
                return ::java::lang::t_Float::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getAndIncrement", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_matchAlmost(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.matchAlmost(a0));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.matchAlmost(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "matchAlmost", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_matchPrefix(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    OBJ_CALL(result = self->object.matchPrefix(a0));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
                break;
               case 2:
                {
                  ::java::lang::CharSequence a0((jobject) NULL);
                  jint a1;
                  ::java::util::List result((jobject) NULL);

                  if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                  {
                    OBJ_CALL(result = self->object.matchPrefix(a0, a1));
                    return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "matchPrefix", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_numDataNodes(t_JaspellTernarySearchTrie *self)
            {
              jint result;
              OBJ_CALL(result = self->object.numDataNodes());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_numNodes(t_JaspellTernarySearchTrie *self)
            {
              jint result;
              OBJ_CALL(result = self->object.numNodes());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_put(t_JaspellTernarySearchTrie *self, PyObject *args)
            {
              ::java::lang::CharSequence a0((jobject) NULL);
              ::java::lang::Object a1((jobject) NULL);

              if (!parseArgs(args, "Oo", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
              {
                OBJ_CALL(self->object.put(a0, a1));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "put", args);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_ramBytesUsed(t_JaspellTernarySearchTrie *self)
            {
              jlong result;
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            static PyObject *t_JaspellTernarySearchTrie_remove(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(self->object.remove(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "remove", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_setMatchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setMatchAlmostDiff(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setMatchAlmostDiff", arg);
              return NULL;
            }

            static PyObject *t_JaspellTernarySearchTrie_setNumReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.setNumReturnValues(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "setNumReturnValues", arg);
              return NULL;
            }

            static int t_JaspellTernarySearchTrie_set__matchAlmostDiff(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setMatchAlmostDiff(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "matchAlmostDiff", arg);
              return -1;
            }

            static int t_JaspellTernarySearchTrie_set__numReturnValues(t_JaspellTernarySearchTrie *self, PyObject *arg, void *data)
            {
              {
                jint value;
                if (!parseArg(arg, "I", &value))
                {
                  INT_CALL(self->object.setNumReturnValues(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "numReturnValues", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Similarity.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/similarities/Similarity$SimScorer.h"
#include "org/apache/lucene/search/CollectionStatistics.h"
#include "org/apache/lucene/search/TermStatistics.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/FieldInvertState.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/similarities/Similarity$SimWeight.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Similarity::class$ = NULL;
          jmethodID *Similarity::mids$ = NULL;
          bool Similarity::live$ = false;

          jclass Similarity::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Similarity");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_computeNorm_6ff84e0e] = env->getMethodID(cls, "computeNorm", "(Lorg/apache/lucene/index/FieldInvertState;)J");
              mids$[mid_computeWeight_8bb6ee0b] = env->getMethodID(cls, "computeWeight", "(FLorg/apache/lucene/search/CollectionStatistics;[Lorg/apache/lucene/search/TermStatistics;)Lorg/apache/lucene/search/similarities/Similarity$SimWeight;");
              mids$[mid_coord_d8d154b6] = env->getMethodID(cls, "coord", "(II)F");
              mids$[mid_queryNorm_06298cbb] = env->getMethodID(cls, "queryNorm", "(F)F");
              mids$[mid_simScorer_9a2cfed8] = env->getMethodID(cls, "simScorer", "(Lorg/apache/lucene/search/similarities/Similarity$SimWeight;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/similarities/Similarity$SimScorer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Similarity::Similarity() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jlong Similarity::computeNorm(const ::org::apache::lucene::index::FieldInvertState & a0) const
          {
            return env->callLongMethod(this$, mids$[mid_computeNorm_6ff84e0e], a0.this$);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimWeight Similarity::computeWeight(jfloat a0, const ::org::apache::lucene::search::CollectionStatistics & a1, const JArray< ::org::apache::lucene::search::TermStatistics > & a2) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimWeight(env->callObjectMethod(this$, mids$[mid_computeWeight_8bb6ee0b], a0, a1.this$, a2.this$));
          }

          jfloat Similarity::coord(jint a0, jint a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_coord_d8d154b6], a0, a1);
          }

          jfloat Similarity::queryNorm(jfloat a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_queryNorm_06298cbb], a0);
          }

          ::org::apache::lucene::search::similarities::Similarity$SimScorer Similarity::simScorer(const ::org::apache::lucene::search::similarities::Similarity$SimWeight & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
          {
            return ::org::apache::lucene::search::similarities::Similarity$SimScorer(env->callObjectMethod(this$, mids$[mid_simScorer_9a2cfed8], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Similarity_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Similarity_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Similarity_init_(t_Similarity *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Similarity_computeNorm(t_Similarity *self, PyObject *arg);
          static PyObject *t_Similarity_computeWeight(t_Similarity *self, PyObject *args);
          static PyObject *t_Similarity_coord(t_Similarity *self, PyObject *args);
          static PyObject *t_Similarity_queryNorm(t_Similarity *self, PyObject *arg);
          static PyObject *t_Similarity_simScorer(t_Similarity *self, PyObject *args);

          static PyMethodDef t_Similarity__methods_[] = {
            DECLARE_METHOD(t_Similarity, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Similarity, computeNorm, METH_O),
            DECLARE_METHOD(t_Similarity, computeWeight, METH_VARARGS),
            DECLARE_METHOD(t_Similarity, coord, METH_VARARGS),
            DECLARE_METHOD(t_Similarity, queryNorm, METH_O),
            DECLARE_METHOD(t_Similarity, simScorer, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Similarity, t_Similarity, ::java::lang::Object, Similarity, t_Similarity_init_, 0, 0, 0, 0, 0);

          void t_Similarity::install(PyObject *module)
          {
            installType(&PY_TYPE(Similarity), module, "Similarity", 0);
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "SimWeight", make_descriptor(&PY_TYPE(Similarity$SimWeight)));
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "SimScorer", make_descriptor(&PY_TYPE(Similarity$SimScorer)));
          }

          void t_Similarity::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "class_", make_descriptor(Similarity::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "wrapfn_", make_descriptor(t_Similarity::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Similarity).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Similarity_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Similarity::initializeClass, 1)))
              return NULL;
            return t_Similarity::wrap_Object(Similarity(((t_Similarity *) arg)->object.this$));
          }
          static PyObject *t_Similarity_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Similarity::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Similarity_init_(t_Similarity *self, PyObject *args, PyObject *kwds)
          {
            Similarity object((jobject) NULL);

            INT_CALL(object = Similarity());
            self->object = object;

            return 0;
          }

          static PyObject *t_Similarity_computeNorm(t_Similarity *self, PyObject *arg)
          {
            ::org::apache::lucene::index::FieldInvertState a0((jobject) NULL);
            jlong result;

            if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInvertState::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.computeNorm(a0));
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeNorm", arg);
            return NULL;
          }

          static PyObject *t_Similarity_computeWeight(t_Similarity *self, PyObject *args)
          {
            jfloat a0;
            ::org::apache::lucene::search::CollectionStatistics a1((jobject) NULL);
            JArray< ::org::apache::lucene::search::TermStatistics > a2((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimWeight result((jobject) NULL);

            if (!parseArgs(args, "Fk[k", ::org::apache::lucene::search::CollectionStatistics::initializeClass, ::org::apache::lucene::search::TermStatistics::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.computeWeight(a0, a1, a2));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimWeight::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "computeWeight", args);
            return NULL;
          }

          static PyObject *t_Similarity_coord(t_Similarity *self, PyObject *args)
          {
            jint a0;
            jint a1;
            jfloat result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
              OBJ_CALL(result = self->object.coord(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "coord", args);
            return NULL;
          }

          static PyObject *t_Similarity_queryNorm(t_Similarity *self, PyObject *arg)
          {
            jfloat a0;
            jfloat result;

            if (!parseArg(arg, "F", &a0))
            {
              OBJ_CALL(result = self->object.queryNorm(a0));
              return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError((PyObject *) self, "queryNorm", arg);
            return NULL;
          }

          static PyObject *t_Similarity_simScorer(t_Similarity *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::Similarity$SimWeight a0((jobject) NULL);
            ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
            ::org::apache::lucene::search::similarities::Similarity$SimScorer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::search::similarities::Similarity$SimWeight::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.simScorer(a0, a1));
              return ::org::apache::lucene::search::similarities::t_Similarity$SimScorer::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "simScorer", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene42/Lucene42Codec.h"
#include "org/apache/lucene/codecs/NormsFormat.h"
#include "org/apache/lucene/codecs/FieldInfosFormat.h"
#include "java/lang/String.h"
#include "org/apache/lucene/codecs/StoredFieldsFormat.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/codecs/SegmentInfoFormat.h"
#include "org/apache/lucene/codecs/LiveDocsFormat.h"
#include "org/apache/lucene/codecs/DocValuesFormat.h"
#include "org/apache/lucene/codecs/PostingsFormat.h"
#include "org/apache/lucene/codecs/TermVectorsFormat.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {

          ::java::lang::Class *Lucene42Codec::class$ = NULL;
          jmethodID *Lucene42Codec::mids$ = NULL;
          bool Lucene42Codec::live$ = false;

          jclass Lucene42Codec::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene42/Lucene42Codec");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_docValuesFormat_9a259760] = env->getMethodID(cls, "docValuesFormat", "()Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_fieldInfosFormat_82160220] = env->getMethodID(cls, "fieldInfosFormat", "()Lorg/apache/lucene/codecs/FieldInfosFormat;");
              mids$[mid_getDocValuesFormatForField_36ef78ba] = env->getMethodID(cls, "getDocValuesFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/DocValuesFormat;");
              mids$[mid_getPostingsFormatForField_19d2f1c6] = env->getMethodID(cls, "getPostingsFormatForField", "(Ljava/lang/String;)Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_liveDocsFormat_fcc69d9a] = env->getMethodID(cls, "liveDocsFormat", "()Lorg/apache/lucene/codecs/LiveDocsFormat;");
              mids$[mid_normsFormat_03b89e43] = env->getMethodID(cls, "normsFormat", "()Lorg/apache/lucene/codecs/NormsFormat;");
              mids$[mid_postingsFormat_d12d16c8] = env->getMethodID(cls, "postingsFormat", "()Lorg/apache/lucene/codecs/PostingsFormat;");
              mids$[mid_segmentInfoFormat_c24d8633] = env->getMethodID(cls, "segmentInfoFormat", "()Lorg/apache/lucene/codecs/SegmentInfoFormat;");
              mids$[mid_storedFieldsFormat_2b977101] = env->getMethodID(cls, "storedFieldsFormat", "()Lorg/apache/lucene/codecs/StoredFieldsFormat;");
              mids$[mid_termVectorsFormat_bcd1d8b8] = env->getMethodID(cls, "termVectorsFormat", "()Lorg/apache/lucene/codecs/TermVectorsFormat;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene42Codec::Lucene42Codec() : ::org::apache::lucene::codecs::Codec(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::DocValuesFormat Lucene42Codec::docValuesFormat() const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_docValuesFormat_9a259760]));
          }

          ::org::apache::lucene::codecs::FieldInfosFormat Lucene42Codec::fieldInfosFormat() const
          {
            return ::org::apache::lucene::codecs::FieldInfosFormat(env->callObjectMethod(this$, mids$[mid_fieldInfosFormat_82160220]));
          }

          ::org::apache::lucene::codecs::DocValuesFormat Lucene42Codec::getDocValuesFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::DocValuesFormat(env->callObjectMethod(this$, mids$[mid_getDocValuesFormatForField_36ef78ba], a0.this$));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene42Codec::getPostingsFormatForField(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_getPostingsFormatForField_19d2f1c6], a0.this$));
          }

          ::org::apache::lucene::codecs::LiveDocsFormat Lucene42Codec::liveDocsFormat() const
          {
            return ::org::apache::lucene::codecs::LiveDocsFormat(env->callObjectMethod(this$, mids$[mid_liveDocsFormat_fcc69d9a]));
          }

          ::org::apache::lucene::codecs::NormsFormat Lucene42Codec::normsFormat() const
          {
            return ::org::apache::lucene::codecs::NormsFormat(env->callObjectMethod(this$, mids$[mid_normsFormat_03b89e43]));
          }

          ::org::apache::lucene::codecs::PostingsFormat Lucene42Codec::postingsFormat() const
          {
            return ::org::apache::lucene::codecs::PostingsFormat(env->callObjectMethod(this$, mids$[mid_postingsFormat_d12d16c8]));
          }

          ::org::apache::lucene::codecs::SegmentInfoFormat Lucene42Codec::segmentInfoFormat() const
          {
            return ::org::apache::lucene::codecs::SegmentInfoFormat(env->callObjectMethod(this$, mids$[mid_segmentInfoFormat_c24d8633]));
          }

          ::org::apache::lucene::codecs::StoredFieldsFormat Lucene42Codec::storedFieldsFormat() const
          {
            return ::org::apache::lucene::codecs::StoredFieldsFormat(env->callObjectMethod(this$, mids$[mid_storedFieldsFormat_2b977101]));
          }

          ::org::apache::lucene::codecs::TermVectorsFormat Lucene42Codec::termVectorsFormat() const
          {
            return ::org::apache::lucene::codecs::TermVectorsFormat(env->callObjectMethod(this$, mids$[mid_termVectorsFormat_bcd1d8b8]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene42 {
          static PyObject *t_Lucene42Codec_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene42Codec_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene42Codec_init_(t_Lucene42Codec *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene42Codec_docValuesFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_fieldInfosFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_getDocValuesFormatForField(t_Lucene42Codec *self, PyObject *arg);
          static PyObject *t_Lucene42Codec_getPostingsFormatForField(t_Lucene42Codec *self, PyObject *arg);
          static PyObject *t_Lucene42Codec_liveDocsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_normsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_postingsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_segmentInfoFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_storedFieldsFormat(t_Lucene42Codec *self, PyObject *args);
          static PyObject *t_Lucene42Codec_termVectorsFormat(t_Lucene42Codec *self, PyObject *args);

          static PyMethodDef t_Lucene42Codec__methods_[] = {
            DECLARE_METHOD(t_Lucene42Codec, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42Codec, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene42Codec, docValuesFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, fieldInfosFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, getDocValuesFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene42Codec, getPostingsFormatForField, METH_O),
            DECLARE_METHOD(t_Lucene42Codec, liveDocsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, normsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, postingsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, segmentInfoFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, storedFieldsFormat, METH_VARARGS),
            DECLARE_METHOD(t_Lucene42Codec, termVectorsFormat, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene42Codec, t_Lucene42Codec, ::org::apache::lucene::codecs::Codec, Lucene42Codec, t_Lucene42Codec_init_, 0, 0, 0, 0, 0);

          void t_Lucene42Codec::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene42Codec), module, "Lucene42Codec", 0);
          }

          void t_Lucene42Codec::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene42Codec).tp_dict, "class_", make_descriptor(Lucene42Codec::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene42Codec).tp_dict, "wrapfn_", make_descriptor(t_Lucene42Codec::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene42Codec).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene42Codec_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene42Codec::initializeClass, 1)))
              return NULL;
            return t_Lucene42Codec::wrap_Object(Lucene42Codec(((t_Lucene42Codec *) arg)->object.this$));
          }
          static PyObject *t_Lucene42Codec_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene42Codec::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene42Codec_init_(t_Lucene42Codec *self, PyObject *args, PyObject *kwds)
          {
            Lucene42Codec object((jobject) NULL);

            INT_CALL(object = Lucene42Codec());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene42Codec_docValuesFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.docValuesFormat());
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "docValuesFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_fieldInfosFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.fieldInfosFormat());
              return ::org::apache::lucene::codecs::t_FieldInfosFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "fieldInfosFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_getDocValuesFormatForField(t_Lucene42Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::DocValuesFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getDocValuesFormatForField(a0));
              return ::org::apache::lucene::codecs::t_DocValuesFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getDocValuesFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene42Codec_getPostingsFormatForField(t_Lucene42Codec *self, PyObject *arg)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
              OBJ_CALL(result = self->object.getPostingsFormatForField(a0));
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getPostingsFormatForField", arg);
            return NULL;
          }

          static PyObject *t_Lucene42Codec_liveDocsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::LiveDocsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.liveDocsFormat());
              return ::org::apache::lucene::codecs::t_LiveDocsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "liveDocsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_normsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::NormsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.normsFormat());
              return ::org::apache::lucene::codecs::t_NormsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "normsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_postingsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::PostingsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.postingsFormat());
              return ::org::apache::lucene::codecs::t_PostingsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "postingsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_segmentInfoFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::SegmentInfoFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.segmentInfoFormat());
              return ::org::apache::lucene::codecs::t_SegmentInfoFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "segmentInfoFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_storedFieldsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::StoredFieldsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.storedFieldsFormat());
              return ::org::apache::lucene::codecs::t_StoredFieldsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "storedFieldsFormat", args, 2);
          }

          static PyObject *t_Lucene42Codec_termVectorsFormat(t_Lucene42Codec *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::TermVectorsFormat result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.termVectorsFormat());
              return ::org::apache::lucene::codecs::t_TermVectorsFormat::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene42Codec), (PyObject *) self, "termVectorsFormat", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/util/PythonList.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/lang/Throwable.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ListIterator.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {

        ::java::lang::Class *PythonList::class$ = NULL;
        jmethodID *PythonList::mids$ = NULL;
        bool PythonList::live$ = false;

        jclass PythonList::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/util/PythonList");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
            mids$[mid_add_f7cd74a4] = env->getMethodID(cls, "add", "(ILjava/lang/Object;)V");
            mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
            mids$[mid_addAll_006cd2b7] = env->getMethodID(cls, "addAll", "(ILjava/util/Collection;)Z");
            mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
            mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
            mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_get_29be6a55] = env->getMethodID(cls, "get", "(I)Ljava/lang/Object;");
            mids$[mid_indexOf_290588f1] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;)I");
            mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_lastIndexOf_290588f1] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;)I");
            mids$[mid_listIterator_b5be4e14] = env->getMethodID(cls, "listIterator", "()Ljava/util/ListIterator;");
            mids$[mid_listIterator_4145ee6a] = env->getMethodID(cls, "listIterator", "(I)Ljava/util/ListIterator;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
            mids$[mid_remove_29be6a55] = env->getMethodID(cls, "remove", "(I)Ljava/lang/Object;");
            mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
            mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
            mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
            mids$[mid_set_211591b1] = env->getMethodID(cls, "set", "(ILjava/lang/Object;)Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_subList_6bc635fe] = env->getMethodID(cls, "subList", "(II)Ljava/util/List;");
            mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
            mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonList::PythonList() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean PythonList::equals(const ::java::lang::Object & a0) const
        {
          return env->callNonvirtualBooleanMethod(this$, (jclass) ::java::lang::Object::class$->this$, ::java::lang::Object::mids$[::java::lang::Object::mid_equals_290588e2], a0.this$);
        }

        void PythonList::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        ::java::util::ListIterator PythonList::listIterator() const
        {
          return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_b5be4e14]));
        }

        jlong PythonList::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonList::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }

        ::java::lang::Object PythonList::remove(jint a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_29be6a55], a0));
        }

        jboolean PythonList::remove(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
        }

        ::java::util::List PythonList::subList(jint a0, jint a1) const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_subList_6bc635fe], a0, a1));
        }

        JArray< ::java::lang::Object > PythonList::toArray(const JArray< ::java::lang::Object > & a0) const
        {
          return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace util {
        static PyObject *t_PythonList_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonList_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonList_init_(t_PythonList *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonList_equals(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_finalize(t_PythonList *self);
        static PyObject *t_PythonList_listIterator(t_PythonList *self);
        static PyObject *t_PythonList_pythonExtension(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_remove(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_subList(t_PythonList *self, PyObject *args);
        static PyObject *t_PythonList_toArray(t_PythonList *self, PyObject *arg);
        static jboolean JNICALL t_PythonList_add0(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonList_add1(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static jboolean JNICALL t_PythonList_addAll2(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_addAll3(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static void JNICALL t_PythonList_clear4(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonList_contains5(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_containsAll6(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_equals7(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_get8(JNIEnv *jenv, jobject jobj, jint a0);
        static jint JNICALL t_PythonList_indexOf9(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_isEmpty10(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonList_iterator11(JNIEnv *jenv, jobject jobj);
        static jint JNICALL t_PythonList_lastIndexOf12(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_listIterator13(JNIEnv *jenv, jobject jobj, jint a0);
        static void JNICALL t_PythonList_pythonDecRef14(JNIEnv *jenv, jobject jobj);
        static jboolean JNICALL t_PythonList_removeAll15(JNIEnv *jenv, jobject jobj, jobject a0);
        static jboolean JNICALL t_PythonList_retainAll16(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonList_set17(JNIEnv *jenv, jobject jobj, jint a0, jobject a1);
        static jint JNICALL t_PythonList_size18(JNIEnv *jenv, jobject jobj);
        static jobject JNICALL t_PythonList_toArray19(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonList_get__self(t_PythonList *self, void *data);
        static PyGetSetDef t_PythonList__fields_[] = {
          DECLARE_GET_FIELD(t_PythonList, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonList__methods_[] = {
          DECLARE_METHOD(t_PythonList, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonList, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonList, equals, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonList, listIterator, METH_NOARGS),
          DECLARE_METHOD(t_PythonList, pythonExtension, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, remove, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, subList, METH_VARARGS),
          DECLARE_METHOD(t_PythonList, toArray, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonList, t_PythonList, ::java::lang::Object, PythonList, t_PythonList_init_, get_extension_iterator, 0, t_PythonList__fields_, 0, 0);

        void t_PythonList::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonList), module, "PythonList", 1);
        }

        void t_PythonList::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonList).tp_dict, "class_", make_descriptor(PythonList::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonList).tp_dict, "wrapfn_", make_descriptor(t_PythonList::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonList).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonList::initializeClass);
          JNINativeMethod methods[] = {
            { "add", "(Ljava/lang/Object;)Z", (void *) t_PythonList_add0 },
            { "add", "(ILjava/lang/Object;)V", (void *) t_PythonList_add1 },
            { "addAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_addAll2 },
            { "addAll", "(ILjava/util/Collection;)Z", (void *) t_PythonList_addAll3 },
            { "clear", "()V", (void *) t_PythonList_clear4 },
            { "contains", "(Ljava/lang/Object;)Z", (void *) t_PythonList_contains5 },
            { "containsAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_containsAll6 },
            { "equals", "(Ljava/lang/Object;)Z", (void *) t_PythonList_equals7 },
            { "get", "(I)Ljava/lang/Object;", (void *) t_PythonList_get8 },
            { "indexOf", "(Ljava/lang/Object;)I", (void *) t_PythonList_indexOf9 },
            { "isEmpty", "()Z", (void *) t_PythonList_isEmpty10 },
            { "iterator", "()Ljava/util/Iterator;", (void *) t_PythonList_iterator11 },
            { "lastIndexOf", "(Ljava/lang/Object;)I", (void *) t_PythonList_lastIndexOf12 },
            { "listIterator", "(I)Ljava/util/ListIterator;", (void *) t_PythonList_listIterator13 },
            { "pythonDecRef", "()V", (void *) t_PythonList_pythonDecRef14 },
            { "removeAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_removeAll15 },
            { "retainAll", "(Ljava/util/Collection;)Z", (void *) t_PythonList_retainAll16 },
            { "set", "(ILjava/lang/Object;)Ljava/lang/Object;", (void *) t_PythonList_set17 },
            { "size", "()I", (void *) t_PythonList_size18 },
            { "toArray", "()[Ljava/lang/Object;", (void *) t_PythonList_toArray19 },
          };
          env->registerNatives(cls, methods, 20);
        }

        static PyObject *t_PythonList_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonList::initializeClass, 1)))
            return NULL;
          return t_PythonList::wrap_Object(PythonList(((t_PythonList *) arg)->object.this$));
        }
        static PyObject *t_PythonList_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonList::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonList_init_(t_PythonList *self, PyObject *args, PyObject *kwds)
        {
          PythonList object((jobject) NULL);

          INT_CALL(object = PythonList());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonList_equals(t_PythonList *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(PythonList), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_PythonList_finalize(t_PythonList *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonList_listIterator(t_PythonList *self)
        {
          ::java::util::ListIterator result((jobject) NULL);
          OBJ_CALL(result = self->object.listIterator());
          return ::java::util::t_ListIterator::wrap_Object(result);
        }

        static PyObject *t_PythonList_pythonExtension(t_PythonList *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static PyObject *t_PythonList_remove(t_PythonList *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.remove(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }
            }
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.remove(a0));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "remove", args);
          return NULL;
        }

        static PyObject *t_PythonList_subList(t_PythonList *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::java::util::List result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.subList(a0, a1));
            return ::java::util::t_List::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "subList", args);
          return NULL;
        }

        static PyObject *t_PythonList_toArray(t_PythonList *self, PyObject *arg)
        {
          JArray< ::java::lang::Object > a0((jobject) NULL);
          JArray< ::java::lang::Object > result((jobject) NULL);

          if (!parseArg(arg, "[o", &a0))
          {
            OBJ_CALL(result = self->object.toArray(a0));
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "toArray", arg);
          return NULL;
        }

        static jboolean JNICALL t_PythonList_add0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "add", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("add", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonList_add1(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o1 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a1));
          PyObject *result = PyObject_CallMethod(obj, "add", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonList_addAll2(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_addAll3(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o1 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a1));
          PyObject *result = PyObject_CallMethod(obj, "addAll", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("addAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonList_clear4(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *result = PyObject_CallMethod(obj, "clear", "");
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jboolean JNICALL t_PythonList_contains5(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "contains", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("contains", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_containsAll6(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "containsAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("containsAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_equals7(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "equals", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("equals", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_get8(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "get", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("get", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_indexOf9(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "indexOf", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("indexOf", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jboolean JNICALL t_PythonList_isEmpty10(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "isEmpty", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("isEmpty", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_iterator11(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::Iterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "iterator", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::Iterator::initializeClass, &value))
          {
            throwTypeError("iterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_lastIndexOf12(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *o0 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a0));
          PyObject *result = PyObject_CallMethod(obj, "lastIndexOf", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("lastIndexOf", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonList_listIterator13(JNIEnv *jenv, jobject jobj, jint a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::util::ListIterator value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "listIterator", "i", (int) a0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::java::util::ListIterator::initializeClass, &value))
          {
            throwTypeError("listIterator", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonList_pythonDecRef14(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static jboolean JNICALL t_PythonList_removeAll15(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "removeAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("removeAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jboolean JNICALL t_PythonList_retainAll16(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *o0 = ::java::util::t_Collection::wrap_Object(::java::util::Collection(a0));
          PyObject *result = PyObject_CallMethod(obj, "retainAll", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("retainAll", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static jobject JNICALL t_PythonList_set17(JNIEnv *jenv, jobject jobj, jint a0, jobject a1)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::java::lang::Object value((jobject) NULL);
          PyObject *o1 = ::java::lang::t_Object::wrap_Object(::java::lang::Object(a1));
          PyObject *result = PyObject_CallMethod(obj, "set", "iO", (int) a0, o1);
          Py_DECREF(o1);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "o", &value))
          {
            throwTypeError("set", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static jint JNICALL t_PythonList_size18(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jint value;
          PyObject *result = PyObject_CallMethod(obj, "size", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "I", &value))
          {
            throwTypeError("size", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jint) 0;
        }

        static jobject JNICALL t_PythonList_toArray19(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonList::mids$[PythonList::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          JArray< ::java::lang::Object > value((jobject) NULL);
          PyObject *result = PyObject_CallMethod(obj, "toArray", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "[o", &value))
          {
            throwTypeError("toArray", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static PyObject *t_PythonList_get__self(t_PythonList *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/MatchNoDocsQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/BooleanQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *MatchNoDocsQueryNodeBuilder::class$ = NULL;
              jmethodID *MatchNoDocsQueryNodeBuilder::mids$ = NULL;
              bool MatchNoDocsQueryNodeBuilder::live$ = false;

              jclass MatchNoDocsQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/MatchNoDocsQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_e1a6cc4e] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/BooleanQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              MatchNoDocsQueryNodeBuilder::MatchNoDocsQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::BooleanQuery MatchNoDocsQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::BooleanQuery(env->callObjectMethod(this$, mids$[mid_build_e1a6cc4e], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_MatchNoDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_MatchNoDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_MatchNoDocsQueryNodeBuilder_init_(t_MatchNoDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_MatchNoDocsQueryNodeBuilder_build(t_MatchNoDocsQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_MatchNoDocsQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_MatchNoDocsQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(MatchNoDocsQueryNodeBuilder, t_MatchNoDocsQueryNodeBuilder, ::java::lang::Object, MatchNoDocsQueryNodeBuilder, t_MatchNoDocsQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_MatchNoDocsQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(MatchNoDocsQueryNodeBuilder), module, "MatchNoDocsQueryNodeBuilder", 0);
              }

              void t_MatchNoDocsQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNodeBuilder).tp_dict, "class_", make_descriptor(MatchNoDocsQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_MatchNoDocsQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(MatchNoDocsQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_MatchNoDocsQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, MatchNoDocsQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_MatchNoDocsQueryNodeBuilder::wrap_Object(MatchNoDocsQueryNodeBuilder(((t_MatchNoDocsQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_MatchNoDocsQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, MatchNoDocsQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_MatchNoDocsQueryNodeBuilder_init_(t_MatchNoDocsQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                MatchNoDocsQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = MatchNoDocsQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_MatchNoDocsQueryNodeBuilder_build(t_MatchNoDocsQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::BooleanQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_BooleanQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/Token.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *PrefixAndSuffixAwareTokenFilter::class$ = NULL;
          jmethodID *PrefixAndSuffixAwareTokenFilter::mids$ = NULL;
          bool PrefixAndSuffixAwareTokenFilter::live$ = false;

          jclass PrefixAndSuffixAwareTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/PrefixAndSuffixAwareTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_63d58924] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/TokenStream;Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_end_54c6a166] = env->getMethodID(cls, "end", "()V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
              mids$[mid_updateInputToken_a810a20b] = env->getMethodID(cls, "updateInputToken", "(Lorg/apache/lucene/analysis/Token;Lorg/apache/lucene/analysis/Token;)Lorg/apache/lucene/analysis/Token;");
              mids$[mid_updateSuffixToken_a810a20b] = env->getMethodID(cls, "updateSuffixToken", "(Lorg/apache/lucene/analysis/Token;Lorg/apache/lucene/analysis/Token;)Lorg/apache/lucene/analysis/Token;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PrefixAndSuffixAwareTokenFilter::PrefixAndSuffixAwareTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, const ::org::apache::lucene::analysis::TokenStream & a1, const ::org::apache::lucene::analysis::TokenStream & a2) : ::org::apache::lucene::analysis::TokenStream(env->newObject(initializeClass, &mids$, mid_init$_63d58924, a0.this$, a1.this$, a2.this$)) {}

          void PrefixAndSuffixAwareTokenFilter::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          void PrefixAndSuffixAwareTokenFilter::end() const
          {
            env->callVoidMethod(this$, mids$[mid_end_54c6a166]);
          }

          jboolean PrefixAndSuffixAwareTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void PrefixAndSuffixAwareTokenFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }

          ::org::apache::lucene::analysis::Token PrefixAndSuffixAwareTokenFilter::updateInputToken(const ::org::apache::lucene::analysis::Token & a0, const ::org::apache::lucene::analysis::Token & a1) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_updateInputToken_a810a20b], a0.this$, a1.this$));
          }

          ::org::apache::lucene::analysis::Token PrefixAndSuffixAwareTokenFilter::updateSuffixToken(const ::org::apache::lucene::analysis::Token & a0, const ::org::apache::lucene::analysis::Token & a1) const
          {
            return ::org::apache::lucene::analysis::Token(env->callObjectMethod(this$, mids$[mid_updateSuffixToken_a810a20b], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PrefixAndSuffixAwareTokenFilter_init_(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_close(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_end(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_incrementToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_reset(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateInputToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateSuffixToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args);

          static PyMethodDef t_PrefixAndSuffixAwareTokenFilter__methods_[] = {
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, close, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, end, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, reset, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, updateInputToken, METH_VARARGS),
            DECLARE_METHOD(t_PrefixAndSuffixAwareTokenFilter, updateSuffixToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PrefixAndSuffixAwareTokenFilter, t_PrefixAndSuffixAwareTokenFilter, ::org::apache::lucene::analysis::TokenStream, PrefixAndSuffixAwareTokenFilter, t_PrefixAndSuffixAwareTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_PrefixAndSuffixAwareTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), module, "PrefixAndSuffixAwareTokenFilter", 0);
          }

          void t_PrefixAndSuffixAwareTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PrefixAndSuffixAwareTokenFilter).tp_dict, "class_", make_descriptor(PrefixAndSuffixAwareTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PrefixAndSuffixAwareTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PrefixAndSuffixAwareTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PrefixAndSuffixAwareTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PrefixAndSuffixAwareTokenFilter::initializeClass, 1)))
              return NULL;
            return t_PrefixAndSuffixAwareTokenFilter::wrap_Object(PrefixAndSuffixAwareTokenFilter(((t_PrefixAndSuffixAwareTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_PrefixAndSuffixAwareTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PrefixAndSuffixAwareTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PrefixAndSuffixAwareTokenFilter_init_(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a2((jobject) NULL);
            PrefixAndSuffixAwareTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kkk", ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
            {
              INT_CALL(object = PrefixAndSuffixAwareTokenFilter(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_close(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_end(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.end());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "end", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_incrementToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_reset(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrefixAndSuffixAwareTokenFilter), (PyObject *) self, "reset", args, 2);
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateInputToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            ::org::apache::lucene::analysis::Token a1((jobject) NULL);
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Token::initializeClass, ::org::apache::lucene::analysis::Token::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.updateInputToken(a0, a1));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "updateInputToken", args);
            return NULL;
          }

          static PyObject *t_PrefixAndSuffixAwareTokenFilter_updateSuffixToken(t_PrefixAndSuffixAwareTokenFilter *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::Token a0((jobject) NULL);
            ::org::apache::lucene::analysis::Token a1((jobject) NULL);
            ::org::apache::lucene::analysis::Token result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::analysis::Token::initializeClass, ::org::apache::lucene::analysis::Token::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.updateSuffixToken(a0, a1));
              return ::org::apache::lucene::analysis::t_Token::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "updateSuffixToken", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/text/DecimalFormat.h"
#include "java/lang/Number.h"
#include "java/util/Currency.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/lang/StringBuffer.h"
#include "JArray.h"

namespace java {
  namespace text {

    ::java::lang::Class *DecimalFormat::class$ = NULL;
    jmethodID *DecimalFormat::mids$ = NULL;
    bool DecimalFormat::live$ = false;

    jclass DecimalFormat::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/text/DecimalFormat");

        mids$ = new jmethodID[max_mid];
        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
        mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
        mids$[mid_applyLocalizedPattern_5fdc3f48] = env->getMethodID(cls, "applyLocalizedPattern", "(Ljava/lang/String;)V");
        mids$[mid_applyPattern_5fdc3f48] = env->getMethodID(cls, "applyPattern", "(Ljava/lang/String;)V");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_getCurrency_14c3f2a1] = env->getMethodID(cls, "getCurrency", "()Ljava/util/Currency;");
        mids$[mid_getGroupingSize_54c6a179] = env->getMethodID(cls, "getGroupingSize", "()I");
        mids$[mid_getMaximumFractionDigits_54c6a179] = env->getMethodID(cls, "getMaximumFractionDigits", "()I");
        mids$[mid_getMaximumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMaximumIntegerDigits", "()I");
        mids$[mid_getMinimumFractionDigits_54c6a179] = env->getMethodID(cls, "getMinimumFractionDigits", "()I");
        mids$[mid_getMinimumIntegerDigits_54c6a179] = env->getMethodID(cls, "getMinimumIntegerDigits", "()I");
        mids$[mid_getMultiplier_54c6a179] = env->getMethodID(cls, "getMultiplier", "()I");
        mids$[mid_getNegativePrefix_14c7b5c5] = env->getMethodID(cls, "getNegativePrefix", "()Ljava/lang/String;");
        mids$[mid_getNegativeSuffix_14c7b5c5] = env->getMethodID(cls, "getNegativeSuffix", "()Ljava/lang/String;");
        mids$[mid_getPositivePrefix_14c7b5c5] = env->getMethodID(cls, "getPositivePrefix", "()Ljava/lang/String;");
        mids$[mid_getPositiveSuffix_14c7b5c5] = env->getMethodID(cls, "getPositiveSuffix", "()Ljava/lang/String;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isDecimalSeparatorAlwaysShown_54c6a16a] = env->getMethodID(cls, "isDecimalSeparatorAlwaysShown", "()Z");
        mids$[mid_isParseBigDecimal_54c6a16a] = env->getMethodID(cls, "isParseBigDecimal", "()Z");
        mids$[mid_setCurrency_de939370] = env->getMethodID(cls, "setCurrency", "(Ljava/util/Currency;)V");
        mids$[mid_setDecimalSeparatorAlwaysShown_bb0c767f] = env->getMethodID(cls, "setDecimalSeparatorAlwaysShown", "(Z)V");
        mids$[mid_setGroupingSize_39c7bd3c] = env->getMethodID(cls, "setGroupingSize", "(I)V");
        mids$[mid_setMaximumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumFractionDigits", "(I)V");
        mids$[mid_setMaximumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMaximumIntegerDigits", "(I)V");
        mids$[mid_setMinimumFractionDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumFractionDigits", "(I)V");
        mids$[mid_setMinimumIntegerDigits_39c7bd3c] = env->getMethodID(cls, "setMinimumIntegerDigits", "(I)V");
        mids$[mid_setMultiplier_39c7bd3c] = env->getMethodID(cls, "setMultiplier", "(I)V");
        mids$[mid_setNegativePrefix_5fdc3f48] = env->getMethodID(cls, "setNegativePrefix", "(Ljava/lang/String;)V");
        mids$[mid_setNegativeSuffix_5fdc3f48] = env->getMethodID(cls, "setNegativeSuffix", "(Ljava/lang/String;)V");
        mids$[mid_setParseBigDecimal_bb0c767f] = env->getMethodID(cls, "setParseBigDecimal", "(Z)V");
        mids$[mid_setPositivePrefix_5fdc3f48] = env->getMethodID(cls, "setPositivePrefix", "(Ljava/lang/String;)V");
        mids$[mid_setPositiveSuffix_5fdc3f48] = env->getMethodID(cls, "setPositiveSuffix", "(Ljava/lang/String;)V");
        mids$[mid_toLocalizedPattern_14c7b5c5] = env->getMethodID(cls, "toLocalizedPattern", "()Ljava/lang/String;");
        mids$[mid_toPattern_14c7b5c5] = env->getMethodID(cls, "toPattern", "()Ljava/lang/String;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    DecimalFormat::DecimalFormat() : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

    DecimalFormat::DecimalFormat(const ::java::lang::String & a0) : ::java::text::NumberFormat(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

    void DecimalFormat::applyLocalizedPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyLocalizedPattern_5fdc3f48], a0.this$);
    }

    void DecimalFormat::applyPattern(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_applyPattern_5fdc3f48], a0.this$);
    }

    ::java::lang::Object DecimalFormat::clone() const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
    }

    jboolean DecimalFormat::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::util::Currency DecimalFormat::getCurrency() const
    {
      return ::java::util::Currency(env->callObjectMethod(this$, mids$[mid_getCurrency_14c3f2a1]));
    }

    jint DecimalFormat::getGroupingSize() const
    {
      return env->callIntMethod(this$, mids$[mid_getGroupingSize_54c6a179]);
    }

    jint DecimalFormat::getMaximumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumFractionDigits_54c6a179]);
    }

    jint DecimalFormat::getMaximumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMaximumIntegerDigits_54c6a179]);
    }

    jint DecimalFormat::getMinimumFractionDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumFractionDigits_54c6a179]);
    }

    jint DecimalFormat::getMinimumIntegerDigits() const
    {
      return env->callIntMethod(this$, mids$[mid_getMinimumIntegerDigits_54c6a179]);
    }

    jint DecimalFormat::getMultiplier() const
    {
      return env->callIntMethod(this$, mids$[mid_getMultiplier_54c6a179]);
    }

    ::java::lang::String DecimalFormat::getNegativePrefix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNegativePrefix_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::getNegativeSuffix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNegativeSuffix_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::getPositivePrefix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPositivePrefix_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::getPositiveSuffix() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPositiveSuffix_14c7b5c5]));
    }

    jint DecimalFormat::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean DecimalFormat::isDecimalSeparatorAlwaysShown() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isDecimalSeparatorAlwaysShown_54c6a16a]);
    }

    jboolean DecimalFormat::isParseBigDecimal() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isParseBigDecimal_54c6a16a]);
    }

    void DecimalFormat::setCurrency(const ::java::util::Currency & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setCurrency_de939370], a0.this$);
    }

    void DecimalFormat::setDecimalSeparatorAlwaysShown(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setDecimalSeparatorAlwaysShown_bb0c767f], a0);
    }

    void DecimalFormat::setGroupingSize(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setGroupingSize_39c7bd3c], a0);
    }

    void DecimalFormat::setMaximumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumFractionDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMaximumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMaximumIntegerDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMinimumFractionDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumFractionDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMinimumIntegerDigits(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMinimumIntegerDigits_39c7bd3c], a0);
    }

    void DecimalFormat::setMultiplier(jint a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setMultiplier_39c7bd3c], a0);
    }

    void DecimalFormat::setNegativePrefix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNegativePrefix_5fdc3f48], a0.this$);
    }

    void DecimalFormat::setNegativeSuffix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setNegativeSuffix_5fdc3f48], a0.this$);
    }

    void DecimalFormat::setParseBigDecimal(jboolean a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setParseBigDecimal_bb0c767f], a0);
    }

    void DecimalFormat::setPositivePrefix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPositivePrefix_5fdc3f48], a0.this$);
    }

    void DecimalFormat::setPositiveSuffix(const ::java::lang::String & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_setPositiveSuffix_5fdc3f48], a0.this$);
    }

    ::java::lang::String DecimalFormat::toLocalizedPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toLocalizedPattern_14c7b5c5]));
    }

    ::java::lang::String DecimalFormat::toPattern() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toPattern_14c7b5c5]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace text {
    static PyObject *t_DecimalFormat_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_DecimalFormat_instance_(PyTypeObject *type, PyObject *arg);
    static int t_DecimalFormat_init_(t_DecimalFormat *self, PyObject *args, PyObject *kwds);
    static PyObject *t_DecimalFormat_applyLocalizedPattern(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_applyPattern(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_clone(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_equals(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getCurrency(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getGroupingSize(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getMaximumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMinimumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_getMultiplier(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getNegativePrefix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getNegativeSuffix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getPositivePrefix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_getPositiveSuffix(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_hashCode(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_isDecimalSeparatorAlwaysShown(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_isParseBigDecimal(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_setCurrency(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setDecimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setGroupingSize(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setMaximumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMinimumFractionDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args);
    static PyObject *t_DecimalFormat_setMultiplier(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setNegativePrefix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setNegativeSuffix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setParseBigDecimal(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setPositivePrefix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_setPositiveSuffix(t_DecimalFormat *self, PyObject *arg);
    static PyObject *t_DecimalFormat_toLocalizedPattern(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_toPattern(t_DecimalFormat *self);
    static PyObject *t_DecimalFormat_get__currency(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__currency(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__decimalSeparatorAlwaysShown(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__decimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__groupingSize(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__groupingSize(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__maximumFractionDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__maximumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__maximumIntegerDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__maximumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__minimumFractionDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__minimumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__minimumIntegerDigits(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__minimumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__multiplier(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__multiplier(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__negativePrefix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__negativePrefix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__negativeSuffix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__negativeSuffix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__parseBigDecimal(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__parseBigDecimal(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__positivePrefix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__positivePrefix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyObject *t_DecimalFormat_get__positiveSuffix(t_DecimalFormat *self, void *data);
    static int t_DecimalFormat_set__positiveSuffix(t_DecimalFormat *self, PyObject *arg, void *data);
    static PyGetSetDef t_DecimalFormat__fields_[] = {
      DECLARE_GETSET_FIELD(t_DecimalFormat, currency),
      DECLARE_GETSET_FIELD(t_DecimalFormat, decimalSeparatorAlwaysShown),
      DECLARE_GETSET_FIELD(t_DecimalFormat, groupingSize),
      DECLARE_GETSET_FIELD(t_DecimalFormat, maximumFractionDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, maximumIntegerDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, minimumFractionDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, minimumIntegerDigits),
      DECLARE_GETSET_FIELD(t_DecimalFormat, multiplier),
      DECLARE_GETSET_FIELD(t_DecimalFormat, negativePrefix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, negativeSuffix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, parseBigDecimal),
      DECLARE_GETSET_FIELD(t_DecimalFormat, positivePrefix),
      DECLARE_GETSET_FIELD(t_DecimalFormat, positiveSuffix),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_DecimalFormat__methods_[] = {
      DECLARE_METHOD(t_DecimalFormat, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DecimalFormat, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_DecimalFormat, applyLocalizedPattern, METH_O),
      DECLARE_METHOD(t_DecimalFormat, applyPattern, METH_O),
      DECLARE_METHOD(t_DecimalFormat, clone, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, equals, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getCurrency, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getGroupingSize, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getMaximumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMaximumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMinimumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMinimumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, getMultiplier, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getNegativePrefix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getNegativeSuffix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getPositivePrefix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, getPositiveSuffix, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, isDecimalSeparatorAlwaysShown, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, isParseBigDecimal, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, setCurrency, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setDecimalSeparatorAlwaysShown, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setGroupingSize, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setMaximumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMaximumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMinimumFractionDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMinimumIntegerDigits, METH_VARARGS),
      DECLARE_METHOD(t_DecimalFormat, setMultiplier, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setNegativePrefix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setNegativeSuffix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setParseBigDecimal, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setPositivePrefix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, setPositiveSuffix, METH_O),
      DECLARE_METHOD(t_DecimalFormat, toLocalizedPattern, METH_NOARGS),
      DECLARE_METHOD(t_DecimalFormat, toPattern, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(DecimalFormat, t_DecimalFormat, ::java::text::NumberFormat, DecimalFormat, t_DecimalFormat_init_, 0, 0, t_DecimalFormat__fields_, 0, 0);

    void t_DecimalFormat::install(PyObject *module)
    {
      installType(&PY_TYPE(DecimalFormat), module, "DecimalFormat", 0);
    }

    void t_DecimalFormat::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(DecimalFormat).tp_dict, "class_", make_descriptor(DecimalFormat::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(DecimalFormat).tp_dict, "wrapfn_", make_descriptor(t_DecimalFormat::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(DecimalFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_DecimalFormat_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, DecimalFormat::initializeClass, 1)))
        return NULL;
      return t_DecimalFormat::wrap_Object(DecimalFormat(((t_DecimalFormat *) arg)->object.this$));
    }
    static PyObject *t_DecimalFormat_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, DecimalFormat::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static int t_DecimalFormat_init_(t_DecimalFormat *self, PyObject *args, PyObject *kwds)
    {
      switch (PyTuple_GET_SIZE(args)) {
       case 0:
        {
          DecimalFormat object((jobject) NULL);

          INT_CALL(object = DecimalFormat());
          self->object = object;
          break;
        }
        goto err;
       case 1:
        {
          ::java::lang::String a0((jobject) NULL);
          DecimalFormat object((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            INT_CALL(object = DecimalFormat(a0));
            self->object = object;
            break;
          }
        }
       default:
       err:
        PyErr_SetArgsError((PyObject *) self, "__init__", args);
        return -1;
      }

      return 0;
    }

    static PyObject *t_DecimalFormat_applyLocalizedPattern(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyLocalizedPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyLocalizedPattern", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_applyPattern(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.applyPattern(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "applyPattern", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_clone(t_DecimalFormat *self, PyObject *args)
    {
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.clone());
        return ::java::lang::t_Object::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "clone", args, 2);
    }

    static PyObject *t_DecimalFormat_equals(t_DecimalFormat *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_DecimalFormat_getCurrency(t_DecimalFormat *self, PyObject *args)
    {
      ::java::util::Currency result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getCurrency());
        return ::java::util::t_Currency::wrap_Object(result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getCurrency", args, 2);
    }

    static PyObject *t_DecimalFormat_getGroupingSize(t_DecimalFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getGroupingSize());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DecimalFormat_getMaximumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMaximumFractionDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMaximumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMaximumIntegerDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMaximumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMinimumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMinimumFractionDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMinimumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.getMinimumIntegerDigits());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "getMinimumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_getMultiplier(t_DecimalFormat *self)
    {
      jint result;
      OBJ_CALL(result = self->object.getMultiplier());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_DecimalFormat_getNegativePrefix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getNegativePrefix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getNegativeSuffix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getNegativeSuffix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getPositivePrefix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getPositivePrefix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_getPositiveSuffix(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.getPositiveSuffix());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_hashCode(t_DecimalFormat *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_DecimalFormat_isDecimalSeparatorAlwaysShown(t_DecimalFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isDecimalSeparatorAlwaysShown());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DecimalFormat_isParseBigDecimal(t_DecimalFormat *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isParseBigDecimal());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_DecimalFormat_setCurrency(t_DecimalFormat *self, PyObject *args)
    {
      ::java::util::Currency a0((jobject) NULL);

      if (!parseArgs(args, "k", ::java::util::Currency::initializeClass, &a0))
      {
        OBJ_CALL(self->object.setCurrency(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setCurrency", args, 2);
    }

    static PyObject *t_DecimalFormat_setDecimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setDecimalSeparatorAlwaysShown(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setDecimalSeparatorAlwaysShown", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setGroupingSize(t_DecimalFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setGroupingSize(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setGroupingSize", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setMaximumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMaximumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMaximumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMaximumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMaximumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMinimumFractionDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumFractionDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMinimumFractionDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMinimumIntegerDigits(t_DecimalFormat *self, PyObject *args)
    {
      jint a0;

      if (!parseArgs(args, "I", &a0))
      {
        OBJ_CALL(self->object.setMinimumIntegerDigits(a0));
        Py_RETURN_NONE;
      }

      return callSuper(&PY_TYPE(DecimalFormat), (PyObject *) self, "setMinimumIntegerDigits", args, 2);
    }

    static PyObject *t_DecimalFormat_setMultiplier(t_DecimalFormat *self, PyObject *arg)
    {
      jint a0;

      if (!parseArg(arg, "I", &a0))
      {
        OBJ_CALL(self->object.setMultiplier(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setMultiplier", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setNegativePrefix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setNegativePrefix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNegativePrefix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setNegativeSuffix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setNegativeSuffix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setNegativeSuffix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setParseBigDecimal(t_DecimalFormat *self, PyObject *arg)
    {
      jboolean a0;

      if (!parseArg(arg, "Z", &a0))
      {
        OBJ_CALL(self->object.setParseBigDecimal(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setParseBigDecimal", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setPositivePrefix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setPositivePrefix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPositivePrefix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_setPositiveSuffix(t_DecimalFormat *self, PyObject *arg)
    {
      ::java::lang::String a0((jobject) NULL);

      if (!parseArg(arg, "s", &a0))
      {
        OBJ_CALL(self->object.setPositiveSuffix(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "setPositiveSuffix", arg);
      return NULL;
    }

    static PyObject *t_DecimalFormat_toLocalizedPattern(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toLocalizedPattern());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_toPattern(t_DecimalFormat *self)
    {
      ::java::lang::String result((jobject) NULL);
      OBJ_CALL(result = self->object.toPattern());
      return j2p(result);
    }

    static PyObject *t_DecimalFormat_get__currency(t_DecimalFormat *self, void *data)
    {
      ::java::util::Currency value((jobject) NULL);
      OBJ_CALL(value = self->object.getCurrency());
      return ::java::util::t_Currency::wrap_Object(value);
    }
    static int t_DecimalFormat_set__currency(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::util::Currency value((jobject) NULL);
        if (!parseArg(arg, "k", ::java::util::Currency::initializeClass, &value))
        {
          INT_CALL(self->object.setCurrency(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "currency", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__decimalSeparatorAlwaysShown(t_DecimalFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isDecimalSeparatorAlwaysShown());
      Py_RETURN_BOOL(value);
    }
    static int t_DecimalFormat_set__decimalSeparatorAlwaysShown(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setDecimalSeparatorAlwaysShown(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "decimalSeparatorAlwaysShown", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__groupingSize(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getGroupingSize());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__groupingSize(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setGroupingSize(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "groupingSize", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__maximumFractionDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__maximumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__maximumIntegerDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMaximumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__maximumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMaximumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "maximumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__minimumFractionDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumFractionDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__minimumFractionDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumFractionDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumFractionDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__minimumIntegerDigits(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMinimumIntegerDigits());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__minimumIntegerDigits(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMinimumIntegerDigits(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "minimumIntegerDigits", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__multiplier(t_DecimalFormat *self, void *data)
    {
      jint value;
      OBJ_CALL(value = self->object.getMultiplier());
      return PyInt_FromLong((long) value);
    }
    static int t_DecimalFormat_set__multiplier(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jint value;
        if (!parseArg(arg, "I", &value))
        {
          INT_CALL(self->object.setMultiplier(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "multiplier", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__negativePrefix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getNegativePrefix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__negativePrefix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setNegativePrefix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "negativePrefix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__negativeSuffix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getNegativeSuffix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__negativeSuffix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setNegativeSuffix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "negativeSuffix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__parseBigDecimal(t_DecimalFormat *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isParseBigDecimal());
      Py_RETURN_BOOL(value);
    }
    static int t_DecimalFormat_set__parseBigDecimal(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        jboolean value;
        if (!parseArg(arg, "Z", &value))
        {
          INT_CALL(self->object.setParseBigDecimal(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "parseBigDecimal", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__positivePrefix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getPositivePrefix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__positivePrefix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setPositivePrefix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "positivePrefix", arg);
      return -1;
    }

    static PyObject *t_DecimalFormat_get__positiveSuffix(t_DecimalFormat *self, void *data)
    {
      ::java::lang::String value((jobject) NULL);
      OBJ_CALL(value = self->object.getPositiveSuffix());
      return j2p(value);
    }
    static int t_DecimalFormat_set__positiveSuffix(t_DecimalFormat *self, PyObject *arg, void *data)
    {
      {
        ::java::lang::String value((jobject) NULL);
        if (!parseArg(arg, "s", &value))
        {
          INT_CALL(self->object.setPositiveSuffix(value));
          return 0;
        }
      }
      PyErr_SetArgsError((PyObject *) self, "positiveSuffix", arg);
      return -1;
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeState$DocMap.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeState$DocMap::class$ = NULL;
        jmethodID *MergeState$DocMap::mids$ = NULL;
        bool MergeState$DocMap::live$ = false;

        jclass MergeState$DocMap::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeState$DocMap");

            mids$ = new jmethodID[max_mid];
            mids$[mid_build_a4668aa1] = env->getStaticMethodID(cls, "build", "(Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/index/MergeState$DocMap;");
            mids$[mid_get_39c7bd23] = env->getMethodID(cls, "get", "(I)I");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDeletedDocs_54c6a179] = env->getMethodID(cls, "numDeletedDocs", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeState$DocMap MergeState$DocMap::build(const ::org::apache::lucene::index::AtomicReader & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return MergeState$DocMap(env->callStaticObjectMethod(cls, mids$[mid_build_a4668aa1], a0.this$));
        }

        jint MergeState$DocMap::get(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_get_39c7bd23], a0);
        }

        jboolean MergeState$DocMap::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jint MergeState$DocMap::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint MergeState$DocMap::numDeletedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_54c6a179]);
        }

        jint MergeState$DocMap::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeState$DocMap_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$DocMap_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$DocMap_build(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$DocMap_get(t_MergeState$DocMap *self, PyObject *arg);
        static PyObject *t_MergeState$DocMap_hasDeletions(t_MergeState$DocMap *self);
        static PyObject *t_MergeState$DocMap_maxDoc(t_MergeState$DocMap *self);
        static PyObject *t_MergeState$DocMap_numDeletedDocs(t_MergeState$DocMap *self);
        static PyObject *t_MergeState$DocMap_numDocs(t_MergeState$DocMap *self);

        static PyMethodDef t_MergeState$DocMap__methods_[] = {
          DECLARE_METHOD(t_MergeState$DocMap, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$DocMap, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$DocMap, build, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$DocMap, get, METH_O),
          DECLARE_METHOD(t_MergeState$DocMap, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_MergeState$DocMap, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_MergeState$DocMap, numDeletedDocs, METH_NOARGS),
          DECLARE_METHOD(t_MergeState$DocMap, numDocs, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeState$DocMap, t_MergeState$DocMap, ::java::lang::Object, MergeState$DocMap, abstract_init, 0, 0, 0, 0, 0);

        void t_MergeState$DocMap::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeState$DocMap), module, "MergeState$DocMap", 0);
        }

        void t_MergeState$DocMap::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeState$DocMap).tp_dict, "class_", make_descriptor(MergeState$DocMap::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeState$DocMap).tp_dict, "wrapfn_", make_descriptor(t_MergeState$DocMap::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeState$DocMap).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeState$DocMap_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeState$DocMap::initializeClass, 1)))
            return NULL;
          return t_MergeState$DocMap::wrap_Object(MergeState$DocMap(((t_MergeState$DocMap *) arg)->object.this$));
        }
        static PyObject *t_MergeState$DocMap_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeState$DocMap::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeState$DocMap_build(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          MergeState$DocMap result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::MergeState$DocMap::build(a0));
            return t_MergeState$DocMap::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "build", arg);
          return NULL;
        }

        static PyObject *t_MergeState$DocMap_get(t_MergeState$DocMap *self, PyObject *arg)
        {
          jint a0;
          jint result;

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_MergeState$DocMap_hasDeletions(t_MergeState$DocMap *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_MergeState$DocMap_maxDoc(t_MergeState$DocMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MergeState$DocMap_numDeletedDocs(t_MergeState$DocMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDeletedDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_MergeState$DocMap_numDocs(t_MergeState$DocMap *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDocs());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemmer::class$ = NULL;
          jmethodID *FrenchMinimalStemmer::mids$ = NULL;
          bool FrenchMinimalStemmer::live$ = false;

          jclass FrenchMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemmer::FrenchMinimalStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint FrenchMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemmer_init_(t_FrenchMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemmer_stem(t_FrenchMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchMinimalStemmer, t_FrenchMinimalStemmer, ::java::lang::Object, FrenchMinimalStemmer, t_FrenchMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_FrenchMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemmer), module, "FrenchMinimalStemmer", 0);
          }

          void t_FrenchMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemmer).tp_dict, "class_", make_descriptor(FrenchMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_FrenchMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemmer::wrap_Object(FrenchMinimalStemmer(((t_FrenchMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemmer_init_(t_FrenchMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            FrenchMinimalStemmer object((jobject) NULL);

            INT_CALL(object = FrenchMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FrenchMinimalStemmer_stem(t_FrenchMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/Util$FSTPath.h"
#include "org/apache/lucene/util/IntsRef.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *Util$FSTPath::class$ = NULL;
          jmethodID *Util$FSTPath::mids$ = NULL;
          jfieldID *Util$FSTPath::fids$ = NULL;
          bool Util$FSTPath::live$ = false;

          jclass Util$FSTPath::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/Util$FSTPath");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_24ce56ea] = env->getMethodID(cls, "<init>", "(Ljava/lang/Object;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/IntsRef;)V");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arc] = env->getFieldID(cls, "arc", "Lorg/apache/lucene/util/fst/FST$Arc;");
              fids$[fid_cost] = env->getFieldID(cls, "cost", "Ljava/lang/Object;");
              fids$[fid_input] = env->getFieldID(cls, "input", "Lorg/apache/lucene/util/IntsRef;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Util$FSTPath::Util$FSTPath(const ::java::lang::Object & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::IntsRef & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_24ce56ea, a0.this$, a1.this$, a2.this$)) {}

          ::java::lang::String Util$FSTPath::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::org::apache::lucene::util::fst::FST$Arc Util$FSTPath::_get_arc() const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->getObjectField(this$, fids$[fid_arc]));
          }

          void Util$FSTPath::_set_arc(const ::org::apache::lucene::util::fst::FST$Arc & a0) const
          {
            env->setObjectField(this$, fids$[fid_arc], a0.this$);
          }

          ::java::lang::Object Util$FSTPath::_get_cost() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_cost]));
          }

          void Util$FSTPath::_set_cost(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_cost], a0.this$);
          }

          ::org::apache::lucene::util::IntsRef Util$FSTPath::_get_input() const
          {
            return ::org::apache::lucene::util::IntsRef(env->getObjectField(this$, fids$[fid_input]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_Util$FSTPath_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$FSTPath_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Util$FSTPath_of_(t_Util$FSTPath *self, PyObject *args);
          static int t_Util$FSTPath_init_(t_Util$FSTPath *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Util$FSTPath_toString(t_Util$FSTPath *self, PyObject *args);
          static PyObject *t_Util$FSTPath_get__arc(t_Util$FSTPath *self, void *data);
          static int t_Util$FSTPath_set__arc(t_Util$FSTPath *self, PyObject *arg, void *data);
          static PyObject *t_Util$FSTPath_get__cost(t_Util$FSTPath *self, void *data);
          static int t_Util$FSTPath_set__cost(t_Util$FSTPath *self, PyObject *arg, void *data);
          static PyObject *t_Util$FSTPath_get__input(t_Util$FSTPath *self, void *data);

          static PyObject *t_Util$FSTPath_get__parameters_(t_Util$FSTPath *self, void *data);
          static PyGetSetDef t_Util$FSTPath__fields_[] = {
            DECLARE_GETSET_FIELD(t_Util$FSTPath, arc),
            DECLARE_GETSET_FIELD(t_Util$FSTPath, cost),
            DECLARE_GET_FIELD(t_Util$FSTPath, input),
            DECLARE_GET_FIELD(t_Util$FSTPath, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Util$FSTPath__methods_[] = {
            DECLARE_METHOD(t_Util$FSTPath, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$FSTPath, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Util$FSTPath, of_, METH_VARARGS),
            DECLARE_METHOD(t_Util$FSTPath, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Util$FSTPath, t_Util$FSTPath, ::java::lang::Object, Util$FSTPath, t_Util$FSTPath_init_, 0, 0, t_Util$FSTPath__fields_, 0, 0);
          PyObject *t_Util$FSTPath::wrap_Object(const Util$FSTPath& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$FSTPath::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$FSTPath *self = (t_Util$FSTPath *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_Util$FSTPath::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_Util$FSTPath::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_Util$FSTPath *self = (t_Util$FSTPath *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_Util$FSTPath::install(PyObject *module)
          {
            installType(&PY_TYPE(Util$FSTPath), module, "Util$FSTPath", 0);
          }

          void t_Util$FSTPath::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Util$FSTPath).tp_dict, "class_", make_descriptor(Util$FSTPath::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Util$FSTPath).tp_dict, "wrapfn_", make_descriptor(t_Util$FSTPath::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Util$FSTPath).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Util$FSTPath_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Util$FSTPath::initializeClass, 1)))
              return NULL;
            return t_Util$FSTPath::wrap_Object(Util$FSTPath(((t_Util$FSTPath *) arg)->object.this$));
          }
          static PyObject *t_Util$FSTPath_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Util$FSTPath::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Util$FSTPath_of_(t_Util$FSTPath *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_Util$FSTPath_init_(t_Util$FSTPath *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::Object a0((jobject) NULL);
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::IntsRef a2((jobject) NULL);
            Util$FSTPath object((jobject) NULL);

            if (!parseArgs(args, "oKk", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::IntsRef::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2))
            {
              INT_CALL(object = Util$FSTPath(a0, a1, a2));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Util$FSTPath_toString(t_Util$FSTPath *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Util$FSTPath), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_Util$FSTPath_get__parameters_(t_Util$FSTPath *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_Util$FSTPath_get__arc(t_Util$FSTPath *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
            OBJ_CALL(value = self->object._get_arc());
            return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(value);
          }
          static int t_Util$FSTPath_set__arc(t_Util$FSTPath *self, PyObject *arg, void *data)
          {
            ::org::apache::lucene::util::fst::FST$Arc value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &value))
            {
              INT_CALL(self->object._set_arc(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "arc", arg);
            return -1;
          }

          static PyObject *t_Util$FSTPath_get__cost(t_Util$FSTPath *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_cost());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_Util$FSTPath_set__cost(t_Util$FSTPath *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_cost(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "cost", arg);
            return -1;
          }

          static PyObject *t_Util$FSTPath_get__input(t_Util$FSTPath *self, void *data)
          {
            ::org::apache::lucene::util::IntsRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_input());
            return ::org::apache::lucene::util::t_IntsRef::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/queries/function/ValueSourceScorer.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *DocTermsIndexDocValues::class$ = NULL;
            jmethodID *DocTermsIndexDocValues::mids$ = NULL;
            bool DocTermsIndexDocValues::live$ = false;

            jclass DocTermsIndexDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_96c8ee4d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)V");
                mids$[mid_boolVal_39c7bd30] = env->getMethodID(cls, "boolVal", "(I)Z");
                mids$[mid_bytesVal_b7fef192] = env->getMethodID(cls, "bytesVal", "(ILorg/apache/lucene/util/BytesRef;)Z");
                mids$[mid_exists_39c7bd30] = env->getMethodID(cls, "exists", "(I)Z");
                mids$[mid_getRangeScorer_d201bc96] = env->getMethodID(cls, "getRangeScorer", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/queries/function/ValueSourceScorer;");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_numOrd_54c6a179] = env->getMethodID(cls, "numOrd", "()I");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_ordVal_39c7bd23] = env->getMethodID(cls, "ordVal", "(I)I");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_toTerm_97a5258f] = env->getMethodID(cls, "toTerm", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            DocTermsIndexDocValues::DocTermsIndexDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1, const ::java::lang::String & a2) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_96c8ee4d, a0.this$, a1.this$, a2.this$)) {}

            jboolean DocTermsIndexDocValues::boolVal(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_boolVal_39c7bd30], a0);
            }

            jboolean DocTermsIndexDocValues::bytesVal(jint a0, const ::org::apache::lucene::util::BytesRef & a1) const
            {
              return env->callBooleanMethod(this$, mids$[mid_bytesVal_b7fef192], a0, a1.this$);
            }

            jboolean DocTermsIndexDocValues::exists(jint a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_exists_39c7bd30], a0);
            }

            ::org::apache::lucene::queries::function::ValueSourceScorer DocTermsIndexDocValues::getRangeScorer(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4) const
            {
              return ::org::apache::lucene::queries::function::ValueSourceScorer(env->callObjectMethod(this$, mids$[mid_getRangeScorer_d201bc96], a0.this$, a1.this$, a2.this$, a3, a4));
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller DocTermsIndexDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint DocTermsIndexDocValues::numOrd() const
            {
              return env->callIntMethod(this$, mids$[mid_numOrd_54c6a179]);
            }

            ::java::lang::Object DocTermsIndexDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jint DocTermsIndexDocValues::ordVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_ordVal_39c7bd23], a0);
            }

            ::java::lang::String DocTermsIndexDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String DocTermsIndexDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues$DocTermsIndexException.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_DocTermsIndexDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_DocTermsIndexDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_DocTermsIndexDocValues_init_(t_DocTermsIndexDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_DocTermsIndexDocValues_boolVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_bytesVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_exists(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_getRangeScorer(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_getValueFiller(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_numOrd(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_objectVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_ordVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_strVal(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_toString(t_DocTermsIndexDocValues *self, PyObject *args);
            static PyObject *t_DocTermsIndexDocValues_get__valueFiller(t_DocTermsIndexDocValues *self, void *data);
            static PyGetSetDef t_DocTermsIndexDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_DocTermsIndexDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_DocTermsIndexDocValues__methods_[] = {
              DECLARE_METHOD(t_DocTermsIndexDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, boolVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, bytesVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, exists, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, getRangeScorer, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, numOrd, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, ordVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_DocTermsIndexDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(DocTermsIndexDocValues, t_DocTermsIndexDocValues, ::org::apache::lucene::queries::function::FunctionValues, DocTermsIndexDocValues, t_DocTermsIndexDocValues_init_, 0, 0, t_DocTermsIndexDocValues__fields_, 0, 0);

            void t_DocTermsIndexDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(DocTermsIndexDocValues), module, "DocTermsIndexDocValues", 0);
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "DocTermsIndexException", make_descriptor(&PY_TYPE(DocTermsIndexDocValues$DocTermsIndexException)));
            }

            void t_DocTermsIndexDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "class_", make_descriptor(DocTermsIndexDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "wrapfn_", make_descriptor(t_DocTermsIndexDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(DocTermsIndexDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_DocTermsIndexDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, DocTermsIndexDocValues::initializeClass, 1)))
                return NULL;
              return t_DocTermsIndexDocValues::wrap_Object(DocTermsIndexDocValues(((t_DocTermsIndexDocValues *) arg)->object.this$));
            }
            static PyObject *t_DocTermsIndexDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, DocTermsIndexDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_DocTermsIndexDocValues_init_(t_DocTermsIndexDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              DocTermsIndexDocValues object((jobject) NULL);

              if (!parseArgs(args, "kks", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &a1, &a2))
              {
                INT_CALL(object = DocTermsIndexDocValues(a0, a1, a2));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_DocTermsIndexDocValues_boolVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.boolVal(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "boolVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_bytesVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "Ik", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.bytesVal(a0, a1));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "bytesVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_exists(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jboolean result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.exists(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "exists", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_getRangeScorer(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::java::lang::String a2((jobject) NULL);
              jboolean a3;
              jboolean a4;
              ::org::apache::lucene::queries::function::ValueSourceScorer result((jobject) NULL);

              if (!parseArgs(args, "kssZZ", ::org::apache::lucene::index::IndexReader::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(result = self->object.getRangeScorer(a0, a1, a2, a3, a4));
                return ::org::apache::lucene::queries::function::t_ValueSourceScorer::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "getRangeScorer", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_getValueFiller(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_numOrd(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.numOrd());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "numOrd", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_objectVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_ordVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.ordVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "ordVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_strVal(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_toString(t_DocTermsIndexDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(DocTermsIndexDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_DocTermsIndexDocValues_get__valueFiller(t_DocTermsIndexDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$TermValComparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$TermValComparator::class$ = NULL;
        jmethodID *FieldComparator$TermValComparator::mids$ = NULL;
        bool FieldComparator$TermValComparator::live$ = false;

        jclass FieldComparator$TermValComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$TermValComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_594e5ef9] = env->getMethodID(cls, "compareValues", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_7bc03dc4] = env->getMethodID(cls, "setTopValue", "(Lorg/apache/lucene/util/BytesRef;)V");
            mids$[mid_value_b57e9c3f] = env->getMethodID(cls, "value", "(I)Lorg/apache/lucene/util/BytesRef;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$TermValComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$TermValComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$TermValComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator$TermValComparator::compareValues(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::util::BytesRef & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_594e5ef9], a0.this$, a1.this$);
        }

        void FieldComparator$TermValComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$TermValComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$TermValComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$TermValComparator::setTopValue(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_7bc03dc4], a0.this$);
        }

        ::org::apache::lucene::util::BytesRef FieldComparator$TermValComparator::value(jint a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_value_b57e9c3f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$TermValComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermValComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$TermValComparator_of_(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compare(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compareBottom(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compareTop(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_compareValues(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_copy(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_setBottom(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_setNextReader(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_setTopValue(t_FieldComparator$TermValComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$TermValComparator_value(t_FieldComparator$TermValComparator *self, PyObject *args);
        static int t_FieldComparator$TermValComparator_set__bottom(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermValComparator_set__nextReader(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$TermValComparator_set__topValue(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$TermValComparator_get__parameters_(t_FieldComparator$TermValComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$TermValComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$TermValComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$TermValComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$TermValComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$TermValComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$TermValComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$TermValComparator, t_FieldComparator$TermValComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$TermValComparator, abstract_init, 0, 0, t_FieldComparator$TermValComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$TermValComparator::wrap_Object(const FieldComparator$TermValComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermValComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermValComparator *self = (t_FieldComparator$TermValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$TermValComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$TermValComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$TermValComparator *self = (t_FieldComparator$TermValComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$TermValComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$TermValComparator), module, "FieldComparator$TermValComparator", 0);
        }

        void t_FieldComparator$TermValComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermValComparator).tp_dict, "class_", make_descriptor(FieldComparator$TermValComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermValComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$TermValComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$TermValComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$TermValComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$TermValComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$TermValComparator::wrap_Object(FieldComparator$TermValComparator(((t_FieldComparator$TermValComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$TermValComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$TermValComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$TermValComparator_of_(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$TermValComparator_compare(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_compareBottom(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_compareTop(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_compareValues(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "compareValues", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_copy(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_setBottom(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_setNextReader(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_setTopValue(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$TermValComparator_value(t_FieldComparator$TermValComparator *self, PyObject *args)
        {
          jint a0;
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$TermValComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$TermValComparator_get__parameters_(t_FieldComparator$TermValComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$TermValComparator_set__bottom(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$TermValComparator_set__nextReader(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$TermValComparator_set__topValue(t_FieldComparator$TermValComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/PrefixWildcardQueryNodeBuilder.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "org/apache/lucene/search/PrefixQuery.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *PrefixWildcardQueryNodeBuilder::class$ = NULL;
              jmethodID *PrefixWildcardQueryNodeBuilder::mids$ = NULL;
              bool PrefixWildcardQueryNodeBuilder::live$ = false;

              jclass PrefixWildcardQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/PrefixWildcardQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_652a8ae7] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/PrefixQuery;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              PrefixWildcardQueryNodeBuilder::PrefixWildcardQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::PrefixQuery PrefixWildcardQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::PrefixQuery(env->callObjectMethod(this$, mids$[mid_build_652a8ae7], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_PrefixWildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_PrefixWildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_PrefixWildcardQueryNodeBuilder_init_(t_PrefixWildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_PrefixWildcardQueryNodeBuilder_build(t_PrefixWildcardQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_PrefixWildcardQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_PrefixWildcardQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(PrefixWildcardQueryNodeBuilder, t_PrefixWildcardQueryNodeBuilder, ::java::lang::Object, PrefixWildcardQueryNodeBuilder, t_PrefixWildcardQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_PrefixWildcardQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(PrefixWildcardQueryNodeBuilder), module, "PrefixWildcardQueryNodeBuilder", 0);
              }

              void t_PrefixWildcardQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNodeBuilder).tp_dict, "class_", make_descriptor(PrefixWildcardQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_PrefixWildcardQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(PrefixWildcardQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_PrefixWildcardQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, PrefixWildcardQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_PrefixWildcardQueryNodeBuilder::wrap_Object(PrefixWildcardQueryNodeBuilder(((t_PrefixWildcardQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_PrefixWildcardQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, PrefixWildcardQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_PrefixWildcardQueryNodeBuilder_init_(t_PrefixWildcardQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                PrefixWildcardQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = PrefixWildcardQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_PrefixWildcardQueryNodeBuilder_build(t_PrefixWildcardQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::PrefixQuery result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_PrefixQuery::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/sandbox/queries/SlowFuzzyQuery.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {

          ::java::lang::Class *SlowFuzzyQuery::class$ = NULL;
          jmethodID *SlowFuzzyQuery::mids$ = NULL;
          bool SlowFuzzyQuery::live$ = false;
          jint SlowFuzzyQuery::defaultMaxExpansions = (jint) 0;
          jfloat SlowFuzzyQuery::defaultMinSimilarity = (jfloat) 0;
          jint SlowFuzzyQuery::defaultPrefixLength = (jint) 0;

          jclass SlowFuzzyQuery::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/sandbox/queries/SlowFuzzyQuery");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_7eca6a81] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;)V");
              mids$[mid_init$_286d05ee] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;F)V");
              mids$[mid_init$_6199618c] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;FI)V");
              mids$[mid_init$_b597dde2] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/Term;FII)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getMinSimilarity_54c6a176] = env->getMethodID(cls, "getMinSimilarity", "()F");
              mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
              mids$[mid_getTerm_0f71f314] = env->getMethodID(cls, "getTerm", "()Lorg/apache/lucene/index/Term;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toString_97a5258f] = env->getMethodID(cls, "toString", "(Ljava/lang/String;)Ljava/lang/String;");
              mids$[mid_getTermsEnum_67b5a29a] = env->getMethodID(cls, "getTermsEnum", "(Lorg/apache/lucene/index/Terms;Lorg/apache/lucene/util/AttributeSource;)Lorg/apache/lucene/index/TermsEnum;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              defaultMaxExpansions = env->getStaticIntField(cls, "defaultMaxExpansions");
              defaultMinSimilarity = env->getStaticFloatField(cls, "defaultMinSimilarity");
              defaultPrefixLength = env->getStaticIntField(cls, "defaultPrefixLength");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_7eca6a81, a0.this$)) {}

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0, jfloat a1) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_286d05ee, a0.this$, a1)) {}

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0, jfloat a1, jint a2) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_6199618c, a0.this$, a1, a2)) {}

          SlowFuzzyQuery::SlowFuzzyQuery(const ::org::apache::lucene::index::Term & a0, jfloat a1, jint a2, jint a3) : ::org::apache::lucene::search::MultiTermQuery(env->newObject(initializeClass, &mids$, mid_init$_b597dde2, a0.this$, a1, a2, a3)) {}

          jboolean SlowFuzzyQuery::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat SlowFuzzyQuery::getMinSimilarity() const
          {
            return env->callFloatMethod(this$, mids$[mid_getMinSimilarity_54c6a176]);
          }

          jint SlowFuzzyQuery::getPrefixLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
          }

          ::org::apache::lucene::index::Term SlowFuzzyQuery::getTerm() const
          {
            return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getTerm_0f71f314]));
          }

          jint SlowFuzzyQuery::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::String SlowFuzzyQuery::toString(const ::java::lang::String & a0) const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_97a5258f], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace sandbox {
        namespace queries {
          static PyObject *t_SlowFuzzyQuery_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SlowFuzzyQuery_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SlowFuzzyQuery_init_(t_SlowFuzzyQuery *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SlowFuzzyQuery_equals(t_SlowFuzzyQuery *self, PyObject *args);
          static PyObject *t_SlowFuzzyQuery_getMinSimilarity(t_SlowFuzzyQuery *self);
          static PyObject *t_SlowFuzzyQuery_getPrefixLength(t_SlowFuzzyQuery *self);
          static PyObject *t_SlowFuzzyQuery_getTerm(t_SlowFuzzyQuery *self);
          static PyObject *t_SlowFuzzyQuery_hashCode(t_SlowFuzzyQuery *self, PyObject *args);
          static PyObject *t_SlowFuzzyQuery_toString(t_SlowFuzzyQuery *self, PyObject *args);
          static PyObject *t_SlowFuzzyQuery_get__minSimilarity(t_SlowFuzzyQuery *self, void *data);
          static PyObject *t_SlowFuzzyQuery_get__prefixLength(t_SlowFuzzyQuery *self, void *data);
          static PyObject *t_SlowFuzzyQuery_get__term(t_SlowFuzzyQuery *self, void *data);
          static PyGetSetDef t_SlowFuzzyQuery__fields_[] = {
            DECLARE_GET_FIELD(t_SlowFuzzyQuery, minSimilarity),
            DECLARE_GET_FIELD(t_SlowFuzzyQuery, prefixLength),
            DECLARE_GET_FIELD(t_SlowFuzzyQuery, term),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SlowFuzzyQuery__methods_[] = {
            DECLARE_METHOD(t_SlowFuzzyQuery, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowFuzzyQuery, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SlowFuzzyQuery, equals, METH_VARARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, getMinSimilarity, METH_NOARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, getPrefixLength, METH_NOARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, getTerm, METH_NOARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SlowFuzzyQuery, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SlowFuzzyQuery, t_SlowFuzzyQuery, ::org::apache::lucene::search::MultiTermQuery, SlowFuzzyQuery, t_SlowFuzzyQuery_init_, 0, 0, t_SlowFuzzyQuery__fields_, 0, 0);

          void t_SlowFuzzyQuery::install(PyObject *module)
          {
            installType(&PY_TYPE(SlowFuzzyQuery), module, "SlowFuzzyQuery", 0);
          }

          void t_SlowFuzzyQuery::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "class_", make_descriptor(SlowFuzzyQuery::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "wrapfn_", make_descriptor(t_SlowFuzzyQuery::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(SlowFuzzyQuery::initializeClass);
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "defaultMaxExpansions", make_descriptor(SlowFuzzyQuery::defaultMaxExpansions));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "defaultMinSimilarity", make_descriptor(SlowFuzzyQuery::defaultMinSimilarity));
            PyDict_SetItemString(PY_TYPE(SlowFuzzyQuery).tp_dict, "defaultPrefixLength", make_descriptor(SlowFuzzyQuery::defaultPrefixLength));
          }

          static PyObject *t_SlowFuzzyQuery_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SlowFuzzyQuery::initializeClass, 1)))
              return NULL;
            return t_SlowFuzzyQuery::wrap_Object(SlowFuzzyQuery(((t_SlowFuzzyQuery *) arg)->object.this$));
          }
          static PyObject *t_SlowFuzzyQuery_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SlowFuzzyQuery::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SlowFuzzyQuery_init_(t_SlowFuzzyQuery *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jfloat a1;
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "kF", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jfloat a1;
                jint a2;
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "kFI", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::org::apache::lucene::index::Term a0((jobject) NULL);
                jfloat a1;
                jint a2;
                jint a3;
                SlowFuzzyQuery object((jobject) NULL);

                if (!parseArgs(args, "kFII", ::org::apache::lucene::index::Term::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = SlowFuzzyQuery(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SlowFuzzyQuery_equals(t_SlowFuzzyQuery *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SlowFuzzyQuery), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SlowFuzzyQuery_getMinSimilarity(t_SlowFuzzyQuery *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getMinSimilarity());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_SlowFuzzyQuery_getPrefixLength(t_SlowFuzzyQuery *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getPrefixLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_SlowFuzzyQuery_getTerm(t_SlowFuzzyQuery *self)
          {
            ::org::apache::lucene::index::Term result((jobject) NULL);
            OBJ_CALL(result = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(result);
          }

          static PyObject *t_SlowFuzzyQuery_hashCode(t_SlowFuzzyQuery *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SlowFuzzyQuery), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SlowFuzzyQuery_toString(t_SlowFuzzyQuery *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.toString(a0));
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SlowFuzzyQuery), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_SlowFuzzyQuery_get__minSimilarity(t_SlowFuzzyQuery *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getMinSimilarity());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_SlowFuzzyQuery_get__prefixLength(t_SlowFuzzyQuery *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getPrefixLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_SlowFuzzyQuery_get__term(t_SlowFuzzyQuery *self, void *data)
          {
            ::org::apache::lucene::index::Term value((jobject) NULL);
            OBJ_CALL(value = self->object.getTerm());
            return ::org::apache::lucene::index::t_Term::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/index/FieldInfo.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *FieldInfos::class$ = NULL;
        jmethodID *FieldInfos::mids$ = NULL;
        bool FieldInfos::live$ = false;

        jclass FieldInfos::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/FieldInfos");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_32778cd0] = env->getMethodID(cls, "<init>", "([Lorg/apache/lucene/index/FieldInfo;)V");
            mids$[mid_fieldInfo_d44c031f] = env->getMethodID(cls, "fieldInfo", "(I)Lorg/apache/lucene/index/FieldInfo;");
            mids$[mid_fieldInfo_582c55ef] = env->getMethodID(cls, "fieldInfo", "(Ljava/lang/String;)Lorg/apache/lucene/index/FieldInfo;");
            mids$[mid_hasDocValues_54c6a16a] = env->getMethodID(cls, "hasDocValues", "()Z");
            mids$[mid_hasFreq_54c6a16a] = env->getMethodID(cls, "hasFreq", "()Z");
            mids$[mid_hasNorms_54c6a16a] = env->getMethodID(cls, "hasNorms", "()Z");
            mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
            mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
            mids$[mid_hasProx_54c6a16a] = env->getMethodID(cls, "hasProx", "()Z");
            mids$[mid_hasVectors_54c6a16a] = env->getMethodID(cls, "hasVectors", "()Z");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldInfos::FieldInfos(const JArray< ::org::apache::lucene::index::FieldInfo > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_32778cd0, a0.this$)) {}

        ::org::apache::lucene::index::FieldInfo FieldInfos::fieldInfo(jint a0) const
        {
          return ::org::apache::lucene::index::FieldInfo(env->callObjectMethod(this$, mids$[mid_fieldInfo_d44c031f], a0));
        }

        ::org::apache::lucene::index::FieldInfo FieldInfos::fieldInfo(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::FieldInfo(env->callObjectMethod(this$, mids$[mid_fieldInfo_582c55ef], a0.this$));
        }

        jboolean FieldInfos::hasDocValues() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDocValues_54c6a16a]);
        }

        jboolean FieldInfos::hasFreq() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasFreq_54c6a16a]);
        }

        jboolean FieldInfos::hasNorms() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasNorms_54c6a16a]);
        }

        jboolean FieldInfos::hasOffsets() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
        }

        jboolean FieldInfos::hasPayloads() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
        }

        jboolean FieldInfos::hasProx() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasProx_54c6a16a]);
        }

        jboolean FieldInfos::hasVectors() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasVectors_54c6a16a]);
        }

        ::java::util::Iterator FieldInfos::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint FieldInfos::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_FieldInfos_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldInfos_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FieldInfos_init_(t_FieldInfos *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldInfos_fieldInfo(t_FieldInfos *self, PyObject *args);
        static PyObject *t_FieldInfos_hasDocValues(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasFreq(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasNorms(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasOffsets(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasPayloads(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasProx(t_FieldInfos *self);
        static PyObject *t_FieldInfos_hasVectors(t_FieldInfos *self);
        static PyObject *t_FieldInfos_iterator(t_FieldInfos *self);
        static PyObject *t_FieldInfos_size(t_FieldInfos *self);

        static PyMethodDef t_FieldInfos__methods_[] = {
          DECLARE_METHOD(t_FieldInfos, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfos, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldInfos, fieldInfo, METH_VARARGS),
          DECLARE_METHOD(t_FieldInfos, hasDocValues, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasFreq, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasNorms, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasOffsets, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasPayloads, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasProx, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, hasVectors, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, iterator, METH_NOARGS),
          DECLARE_METHOD(t_FieldInfos, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldInfos, t_FieldInfos, ::java::lang::Object, FieldInfos, t_FieldInfos_init_, ((PyObject *(*)(t_FieldInfos *)) get_iterator< t_FieldInfos >), 0, 0, 0, 0);

        void t_FieldInfos::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldInfos), module, "FieldInfos", 0);
        }

        void t_FieldInfos::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldInfos).tp_dict, "class_", make_descriptor(FieldInfos::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldInfos).tp_dict, "wrapfn_", make_descriptor(t_FieldInfos::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldInfos).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldInfos_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldInfos::initializeClass, 1)))
            return NULL;
          return t_FieldInfos::wrap_Object(FieldInfos(((t_FieldInfos *) arg)->object.this$));
        }
        static PyObject *t_FieldInfos_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldInfos::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_FieldInfos_init_(t_FieldInfos *self, PyObject *args, PyObject *kwds)
        {
          JArray< ::org::apache::lucene::index::FieldInfo > a0((jobject) NULL);
          FieldInfos object((jobject) NULL);

          if (!parseArgs(args, "[k", ::org::apache::lucene::index::FieldInfo::initializeClass, &a0))
          {
            INT_CALL(object = FieldInfos(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldInfos_fieldInfo(t_FieldInfos *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::index::FieldInfo result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.fieldInfo(a0));
                return ::org::apache::lucene::index::t_FieldInfo::wrap_Object(result);
              }
            }
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::FieldInfo result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.fieldInfo(a0));
                return ::org::apache::lucene::index::t_FieldInfo::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "fieldInfo", args);
          return NULL;
        }

        static PyObject *t_FieldInfos_hasDocValues(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDocValues());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasFreq(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasFreq());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasNorms(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasNorms());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasOffsets(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasOffsets());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasPayloads(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasPayloads());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasProx(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasProx());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_hasVectors(t_FieldInfos *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasVectors());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_FieldInfos_iterator(t_FieldInfos *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(FieldInfo));
        }

        static PyObject *t_FieldInfos_size(t_FieldInfos *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeState.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/SegmentReader.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/InfoStream.h"
#include "org/apache/lucene/index/MergeState$DocMap.h"
#include "org/apache/lucene/index/MergeState$CheckAbort.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeState::class$ = NULL;
        jmethodID *MergeState::mids$ = NULL;
        jfieldID *MergeState::fids$ = NULL;
        bool MergeState::live$ = false;

        jclass MergeState::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeState");

            fids$ = new jfieldID[max_fid];
            fids$[fid_checkAbort] = env->getFieldID(cls, "checkAbort", "Lorg/apache/lucene/index/MergeState$CheckAbort;");
            fids$[fid_docBase] = env->getFieldID(cls, "docBase", "[I");
            fids$[fid_docMaps] = env->getFieldID(cls, "docMaps", "[Lorg/apache/lucene/index/MergeState$DocMap;");
            fids$[fid_fieldInfos] = env->getFieldID(cls, "fieldInfos", "Lorg/apache/lucene/index/FieldInfos;");
            fids$[fid_infoStream] = env->getFieldID(cls, "infoStream", "Lorg/apache/lucene/util/InfoStream;");
            fids$[fid_matchedCount] = env->getFieldID(cls, "matchedCount", "I");
            fids$[fid_matchingSegmentReaders] = env->getFieldID(cls, "matchingSegmentReaders", "[Lorg/apache/lucene/index/SegmentReader;");
            fids$[fid_readers] = env->getFieldID(cls, "readers", "Ljava/util/List;");
            fids$[fid_segmentInfo] = env->getFieldID(cls, "segmentInfo", "Lorg/apache/lucene/index/SegmentInfo;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::index::MergeState$CheckAbort MergeState::_get_checkAbort() const
        {
          return ::org::apache::lucene::index::MergeState$CheckAbort(env->getObjectField(this$, fids$[fid_checkAbort]));
        }

        JArray< jint > MergeState::_get_docBase() const
        {
          return JArray< jint >(env->getObjectField(this$, fids$[fid_docBase]));
        }

        void MergeState::_set_docBase(const JArray< jint > & a0) const
        {
          env->setObjectField(this$, fids$[fid_docBase], a0.this$);
        }

        JArray< ::org::apache::lucene::index::MergeState$DocMap > MergeState::_get_docMaps() const
        {
          return JArray< ::org::apache::lucene::index::MergeState$DocMap >(env->getObjectField(this$, fids$[fid_docMaps]));
        }

        void MergeState::_set_docMaps(const JArray< ::org::apache::lucene::index::MergeState$DocMap > & a0) const
        {
          env->setObjectField(this$, fids$[fid_docMaps], a0.this$);
        }

        ::org::apache::lucene::index::FieldInfos MergeState::_get_fieldInfos() const
        {
          return ::org::apache::lucene::index::FieldInfos(env->getObjectField(this$, fids$[fid_fieldInfos]));
        }

        void MergeState::_set_fieldInfos(const ::org::apache::lucene::index::FieldInfos & a0) const
        {
          env->setObjectField(this$, fids$[fid_fieldInfos], a0.this$);
        }

        ::org::apache::lucene::util::InfoStream MergeState::_get_infoStream() const
        {
          return ::org::apache::lucene::util::InfoStream(env->getObjectField(this$, fids$[fid_infoStream]));
        }

        jint MergeState::_get_matchedCount() const
        {
          return env->getIntField(this$, fids$[fid_matchedCount]);
        }

        void MergeState::_set_matchedCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_matchedCount], a0);
        }

        JArray< ::org::apache::lucene::index::SegmentReader > MergeState::_get_matchingSegmentReaders() const
        {
          return JArray< ::org::apache::lucene::index::SegmentReader >(env->getObjectField(this$, fids$[fid_matchingSegmentReaders]));
        }

        void MergeState::_set_matchingSegmentReaders(const JArray< ::org::apache::lucene::index::SegmentReader > & a0) const
        {
          env->setObjectField(this$, fids$[fid_matchingSegmentReaders], a0.this$);
        }

        ::java::util::List MergeState::_get_readers() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_readers]));
        }

        ::org::apache::lucene::index::SegmentInfo MergeState::_get_segmentInfo() const
        {
          return ::org::apache::lucene::index::SegmentInfo(env->getObjectField(this$, fids$[fid_segmentInfo]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeState_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState_get__checkAbort(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__docBase(t_MergeState *self, void *data);
        static int t_MergeState_set__docBase(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__docMaps(t_MergeState *self, void *data);
        static int t_MergeState_set__docMaps(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__fieldInfos(t_MergeState *self, void *data);
        static int t_MergeState_set__fieldInfos(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__infoStream(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__matchedCount(t_MergeState *self, void *data);
        static int t_MergeState_set__matchedCount(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__matchingSegmentReaders(t_MergeState *self, void *data);
        static int t_MergeState_set__matchingSegmentReaders(t_MergeState *self, PyObject *arg, void *data);
        static PyObject *t_MergeState_get__readers(t_MergeState *self, void *data);
        static PyObject *t_MergeState_get__segmentInfo(t_MergeState *self, void *data);

        static PyGetSetDef t_MergeState__fields_[] = {
          DECLARE_GET_FIELD(t_MergeState, checkAbort),
          DECLARE_GETSET_FIELD(t_MergeState, docBase),
          DECLARE_GETSET_FIELD(t_MergeState, docMaps),
          DECLARE_GETSET_FIELD(t_MergeState, fieldInfos),
          DECLARE_GET_FIELD(t_MergeState, infoStream),
          DECLARE_GETSET_FIELD(t_MergeState, matchedCount),
          DECLARE_GETSET_FIELD(t_MergeState, matchingSegmentReaders),
          DECLARE_GET_FIELD(t_MergeState, readers),
          DECLARE_GET_FIELD(t_MergeState, segmentInfo),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MergeState__methods_[] = {
          DECLARE_METHOD(t_MergeState, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeState, t_MergeState, ::java::lang::Object, MergeState, abstract_init, 0, 0, t_MergeState__fields_, 0, 0);

        void t_MergeState::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeState), module, "MergeState", 0);
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "CheckAbort", make_descriptor(&PY_TYPE(MergeState$CheckAbort)));
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "DocMap", make_descriptor(&PY_TYPE(MergeState$DocMap)));
        }

        void t_MergeState::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "class_", make_descriptor(MergeState::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "wrapfn_", make_descriptor(t_MergeState::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeState).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeState_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeState::initializeClass, 1)))
            return NULL;
          return t_MergeState::wrap_Object(MergeState(((t_MergeState *) arg)->object.this$));
        }
        static PyObject *t_MergeState_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeState::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_MergeState_get__checkAbort(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::index::MergeState$CheckAbort value((jobject) NULL);
          OBJ_CALL(value = self->object._get_checkAbort());
          return ::org::apache::lucene::index::t_MergeState$CheckAbort::wrap_Object(value);
        }

        static PyObject *t_MergeState_get__docBase(t_MergeState *self, void *data)
        {
          JArray< jint > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docBase());
          return value.wrap();
        }
        static int t_MergeState_set__docBase(t_MergeState *self, PyObject *arg, void *data)
        {
          JArray< jint > value((jobject) NULL);
          if (!parseArg(arg, "[I", &value))
          {
            INT_CALL(self->object._set_docBase(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docBase", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__docMaps(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::index::MergeState$DocMap > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_docMaps());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_MergeState$DocMap::wrap_jobject);
        }
        static int t_MergeState_set__docMaps(t_MergeState *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::index::MergeState$DocMap > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::index::MergeState$DocMap::initializeClass, &value))
          {
            INT_CALL(self->object._set_docMaps(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docMaps", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__fieldInfos(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          OBJ_CALL(value = self->object._get_fieldInfos());
          return ::org::apache::lucene::index::t_FieldInfos::wrap_Object(value);
        }
        static int t_MergeState_set__fieldInfos(t_MergeState *self, PyObject *arg, void *data)
        {
          ::org::apache::lucene::index::FieldInfos value((jobject) NULL);
          if (!parseArg(arg, "k", ::org::apache::lucene::index::FieldInfos::initializeClass, &value))
          {
            INT_CALL(self->object._set_fieldInfos(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "fieldInfos", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__infoStream(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::util::InfoStream value((jobject) NULL);
          OBJ_CALL(value = self->object._get_infoStream());
          return ::org::apache::lucene::util::t_InfoStream::wrap_Object(value);
        }

        static PyObject *t_MergeState_get__matchedCount(t_MergeState *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_matchedCount());
          return PyInt_FromLong((long) value);
        }
        static int t_MergeState_set__matchedCount(t_MergeState *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_matchedCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "matchedCount", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__matchingSegmentReaders(t_MergeState *self, void *data)
        {
          JArray< ::org::apache::lucene::index::SegmentReader > value((jobject) NULL);
          OBJ_CALL(value = self->object._get_matchingSegmentReaders());
          return JArray<jobject>(value.this$).wrap(::org::apache::lucene::index::t_SegmentReader::wrap_jobject);
        }
        static int t_MergeState_set__matchingSegmentReaders(t_MergeState *self, PyObject *arg, void *data)
        {
          JArray< ::org::apache::lucene::index::SegmentReader > value((jobject) NULL);
          if (!parseArg(arg, "[k", ::org::apache::lucene::index::SegmentReader::initializeClass, &value))
          {
            INT_CALL(self->object._set_matchingSegmentReaders(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "matchingSegmentReaders", arg);
          return -1;
        }

        static PyObject *t_MergeState_get__readers(t_MergeState *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_readers());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_MergeState_get__segmentInfo(t_MergeState *self, void *data)
        {
          ::org::apache::lucene::index::SegmentInfo value((jobject) NULL);
          OBJ_CALL(value = self->object._get_segmentInfo());
          return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermAllGroupsCollector.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermAllGroupsCollector::class$ = NULL;
            jmethodID *TermAllGroupsCollector::mids$ = NULL;
            bool TermAllGroupsCollector::live$ = false;

            jclass TermAllGroupsCollector::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermAllGroupsCollector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                mids$[mid_collect_39c7bd3c] = env->getMethodID(cls, "collect", "(I)V");
                mids$[mid_getGroups_2d2d7de4] = env->getMethodID(cls, "getGroups", "()Ljava/util/Collection;");
                mids$[mid_setNextReader_a6f59947] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            TermAllGroupsCollector::TermAllGroupsCollector(const ::java::lang::String & a0) : ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            TermAllGroupsCollector::TermAllGroupsCollector(const ::java::lang::String & a0, jint a1) : ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

            void TermAllGroupsCollector::collect(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_collect_39c7bd3c], a0);
            }

            ::java::util::Collection TermAllGroupsCollector::getGroups() const
            {
              return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_getGroups_2d2d7de4]));
            }

            void TermAllGroupsCollector::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_setNextReader_a6f59947], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermAllGroupsCollector_of_(t_TermAllGroupsCollector *self, PyObject *args);
            static int t_TermAllGroupsCollector_init_(t_TermAllGroupsCollector *self, PyObject *args, PyObject *kwds);
            static PyObject *t_TermAllGroupsCollector_collect(t_TermAllGroupsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupsCollector_getGroups(t_TermAllGroupsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupsCollector_setNextReader(t_TermAllGroupsCollector *self, PyObject *args);
            static PyObject *t_TermAllGroupsCollector_get__groups(t_TermAllGroupsCollector *self, void *data);
            static int t_TermAllGroupsCollector_set__nextReader(t_TermAllGroupsCollector *self, PyObject *arg, void *data);
            static PyObject *t_TermAllGroupsCollector_get__parameters_(t_TermAllGroupsCollector *self, void *data);
            static PyGetSetDef t_TermAllGroupsCollector__fields_[] = {
              DECLARE_GET_FIELD(t_TermAllGroupsCollector, groups),
              DECLARE_SET_FIELD(t_TermAllGroupsCollector, nextReader),
              DECLARE_GET_FIELD(t_TermAllGroupsCollector, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermAllGroupsCollector__methods_[] = {
              DECLARE_METHOD(t_TermAllGroupsCollector, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupsCollector, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermAllGroupsCollector, of_, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupsCollector, collect, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupsCollector, getGroups, METH_VARARGS),
              DECLARE_METHOD(t_TermAllGroupsCollector, setNextReader, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermAllGroupsCollector, t_TermAllGroupsCollector, ::org::apache::lucene::search::grouping::AbstractAllGroupsCollector, TermAllGroupsCollector, t_TermAllGroupsCollector_init_, 0, 0, t_TermAllGroupsCollector__fields_, 0, 0);
            PyObject *t_TermAllGroupsCollector::wrap_Object(const TermAllGroupsCollector& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupsCollector::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupsCollector *self = (t_TermAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermAllGroupsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermAllGroupsCollector::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermAllGroupsCollector *self = (t_TermAllGroupsCollector *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermAllGroupsCollector::install(PyObject *module)
            {
              installType(&PY_TYPE(TermAllGroupsCollector), module, "TermAllGroupsCollector", 0);
            }

            void t_TermAllGroupsCollector::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermAllGroupsCollector).tp_dict, "class_", make_descriptor(TermAllGroupsCollector::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermAllGroupsCollector).tp_dict, "wrapfn_", make_descriptor(t_TermAllGroupsCollector::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermAllGroupsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermAllGroupsCollector_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermAllGroupsCollector::initializeClass, 1)))
                return NULL;
              return t_TermAllGroupsCollector::wrap_Object(TermAllGroupsCollector(((t_TermAllGroupsCollector *) arg)->object.this$));
            }
            static PyObject *t_TermAllGroupsCollector_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermAllGroupsCollector::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermAllGroupsCollector_of_(t_TermAllGroupsCollector *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static int t_TermAllGroupsCollector_init_(t_TermAllGroupsCollector *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  TermAllGroupsCollector object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = TermAllGroupsCollector(a0));
                    self->object = object;
                    self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  jint a1;
                  TermAllGroupsCollector object((jobject) NULL);

                  if (!parseArgs(args, "sI", &a0, &a1))
                  {
                    INT_CALL(object = TermAllGroupsCollector(a0, a1));
                    self->object = object;
                    self->parameters[0] = &::org::apache::lucene::util::PY_TYPE(BytesRef);
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_TermAllGroupsCollector_collect(t_TermAllGroupsCollector *self, PyObject *args)
            {
              jint a0;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(self->object.collect(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermAllGroupsCollector), (PyObject *) self, "collect", args, 2);
            }

            static PyObject *t_TermAllGroupsCollector_getGroups(t_TermAllGroupsCollector *self, PyObject *args)
            {
              ::java::util::Collection result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getGroups());
                return ::java::util::t_Collection::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
              }

              return callSuper(&PY_TYPE(TermAllGroupsCollector), (PyObject *) self, "getGroups", args, 2);
            }

            static PyObject *t_TermAllGroupsCollector_setNextReader(t_TermAllGroupsCollector *self, PyObject *args)
            {
              ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
              {
                OBJ_CALL(self->object.setNextReader(a0));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(TermAllGroupsCollector), (PyObject *) self, "setNextReader", args, 2);
            }
            static PyObject *t_TermAllGroupsCollector_get__parameters_(t_TermAllGroupsCollector *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }

            static PyObject *t_TermAllGroupsCollector_get__groups(t_TermAllGroupsCollector *self, void *data)
            {
              ::java::util::Collection value((jobject) NULL);
              OBJ_CALL(value = self->object.getGroups());
              return ::java::util::t_Collection::wrap_Object(value);
            }

            static int t_TermAllGroupsCollector_set__nextReader(t_TermAllGroupsCollector *self, PyObject *arg, void *data)
            {
              {
                ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
                if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
                {
                  INT_CALL(self->object.setNextReader(value));
                  return 0;
                }
              }
              PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/std31/StandardTokenizerImpl31.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/io/Reader.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {

            ::java::lang::Class *StandardTokenizerImpl31::class$ = NULL;
            jmethodID *StandardTokenizerImpl31::mids$ = NULL;
            bool StandardTokenizerImpl31::live$ = false;
            jint StandardTokenizerImpl31::HANGUL_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::HIRAGANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::IDEOGRAPHIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::KATAKANA_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::NUMERIC_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::WORD_TYPE = (jint) 0;
            jint StandardTokenizerImpl31::YYEOF = (jint) 0;
            jint StandardTokenizerImpl31::YYINITIAL = (jint) 0;

            jclass StandardTokenizerImpl31::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/std31/StandardTokenizerImpl31");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
                mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
                mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
                mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                HANGUL_TYPE = env->getStaticIntField(cls, "HANGUL_TYPE");
                HIRAGANA_TYPE = env->getStaticIntField(cls, "HIRAGANA_TYPE");
                IDEOGRAPHIC_TYPE = env->getStaticIntField(cls, "IDEOGRAPHIC_TYPE");
                KATAKANA_TYPE = env->getStaticIntField(cls, "KATAKANA_TYPE");
                NUMERIC_TYPE = env->getStaticIntField(cls, "NUMERIC_TYPE");
                SOUTH_EAST_ASIAN_TYPE = env->getStaticIntField(cls, "SOUTH_EAST_ASIAN_TYPE");
                WORD_TYPE = env->getStaticIntField(cls, "WORD_TYPE");
                YYEOF = env->getStaticIntField(cls, "YYEOF");
                YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            StandardTokenizerImpl31::StandardTokenizerImpl31(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

            jint StandardTokenizerImpl31::getNextToken() const
            {
              return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
            }

            void StandardTokenizerImpl31::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
            }

            void StandardTokenizerImpl31::yybegin(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
            }

            jint StandardTokenizerImpl31::yychar() const
            {
              return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
            }

            jchar StandardTokenizerImpl31::yycharat(jint a0) const
            {
              return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
            }

            void StandardTokenizerImpl31::yyclose() const
            {
              env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
            }

            jint StandardTokenizerImpl31::yylength() const
            {
              return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
            }

            void StandardTokenizerImpl31::yypushback(jint a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
            }

            void StandardTokenizerImpl31::yyreset(const ::java::io::Reader & a0) const
            {
              env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
            }

            jint StandardTokenizerImpl31::yystate() const
            {
              return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
            }

            ::java::lang::String StandardTokenizerImpl31::yytext() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          namespace std31 {
            static PyObject *t_StandardTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg);
            static int t_StandardTokenizerImpl31_init_(t_StandardTokenizerImpl31 *self, PyObject *args, PyObject *kwds);
            static PyObject *t_StandardTokenizerImpl31_getNextToken(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_getText(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yybegin(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yychar(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yycharat(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yyclose(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yylength(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yypushback(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yyreset(t_StandardTokenizerImpl31 *self, PyObject *arg);
            static PyObject *t_StandardTokenizerImpl31_yystate(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_yytext(t_StandardTokenizerImpl31 *self);
            static PyObject *t_StandardTokenizerImpl31_get__nextToken(t_StandardTokenizerImpl31 *self, void *data);
            static PyGetSetDef t_StandardTokenizerImpl31__fields_[] = {
              DECLARE_GET_FIELD(t_StandardTokenizerImpl31, nextToken),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_StandardTokenizerImpl31__methods_[] = {
              DECLARE_METHOD(t_StandardTokenizerImpl31, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, getNextToken, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, getText, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yybegin, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yychar, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yycharat, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yyclose, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yylength, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yypushback, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yyreset, METH_O),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yystate, METH_NOARGS),
              DECLARE_METHOD(t_StandardTokenizerImpl31, yytext, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(StandardTokenizerImpl31, t_StandardTokenizerImpl31, ::java::lang::Object, StandardTokenizerImpl31, t_StandardTokenizerImpl31_init_, 0, 0, t_StandardTokenizerImpl31__fields_, 0, 0);

            void t_StandardTokenizerImpl31::install(PyObject *module)
            {
              installType(&PY_TYPE(StandardTokenizerImpl31), module, "StandardTokenizerImpl31", 0);
            }

            void t_StandardTokenizerImpl31::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "class_", make_descriptor(StandardTokenizerImpl31::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerImpl31::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(StandardTokenizerImpl31::initializeClass);
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "HANGUL_TYPE", make_descriptor(StandardTokenizerImpl31::HANGUL_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "HIRAGANA_TYPE", make_descriptor(StandardTokenizerImpl31::HIRAGANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "IDEOGRAPHIC_TYPE", make_descriptor(StandardTokenizerImpl31::IDEOGRAPHIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "KATAKANA_TYPE", make_descriptor(StandardTokenizerImpl31::KATAKANA_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "NUMERIC_TYPE", make_descriptor(StandardTokenizerImpl31::NUMERIC_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "SOUTH_EAST_ASIAN_TYPE", make_descriptor(StandardTokenizerImpl31::SOUTH_EAST_ASIAN_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "WORD_TYPE", make_descriptor(StandardTokenizerImpl31::WORD_TYPE));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "YYEOF", make_descriptor(StandardTokenizerImpl31::YYEOF));
              PyDict_SetItemString(PY_TYPE(StandardTokenizerImpl31).tp_dict, "YYINITIAL", make_descriptor(StandardTokenizerImpl31::YYINITIAL));
            }

            static PyObject *t_StandardTokenizerImpl31_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, StandardTokenizerImpl31::initializeClass, 1)))
                return NULL;
              return t_StandardTokenizerImpl31::wrap_Object(StandardTokenizerImpl31(((t_StandardTokenizerImpl31 *) arg)->object.this$));
            }
            static PyObject *t_StandardTokenizerImpl31_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, StandardTokenizerImpl31::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_StandardTokenizerImpl31_init_(t_StandardTokenizerImpl31 *self, PyObject *args, PyObject *kwds)
            {
              ::java::io::Reader a0((jobject) NULL);
              StandardTokenizerImpl31 object((jobject) NULL);

              if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
              {
                INT_CALL(object = StandardTokenizerImpl31(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_StandardTokenizerImpl31_getNextToken(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getNextToken());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_getText(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

              if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
              {
                OBJ_CALL(self->object.getText(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "getText", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yybegin(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yybegin(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yychar(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yychar());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_yycharat(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;
              jchar result;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(result = self->object.yycharat(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
              }

              PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yyclose(t_StandardTokenizerImpl31 *self)
            {
              OBJ_CALL(self->object.yyclose());
              Py_RETURN_NONE;
            }

            static PyObject *t_StandardTokenizerImpl31_yylength(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yylength());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_yypushback(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              jint a0;

              if (!parseArg(arg, "I", &a0))
              {
                OBJ_CALL(self->object.yypushback(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yyreset(t_StandardTokenizerImpl31 *self, PyObject *arg)
            {
              ::java::io::Reader a0((jobject) NULL);

              if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
              {
                OBJ_CALL(self->object.yyreset(a0));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
              return NULL;
            }

            static PyObject *t_StandardTokenizerImpl31_yystate(t_StandardTokenizerImpl31 *self)
            {
              jint result;
              OBJ_CALL(result = self->object.yystate());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_StandardTokenizerImpl31_yytext(t_StandardTokenizerImpl31 *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.yytext());
              return j2p(result);
            }

            static PyObject *t_StandardTokenizerImpl31_get__nextToken(t_StandardTokenizerImpl31 *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getNextToken());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/SortedNumericSortField.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/SortedNumericSelector$Type.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/SortField$Type.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *SortedNumericSortField::class$ = NULL;
        jmethodID *SortedNumericSortField::mids$ = NULL;
        bool SortedNumericSortField::live$ = false;

        jclass SortedNumericSortField::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/SortedNumericSortField");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_b65c884e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;)V");
            mids$[mid_init$_28dc1d67] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;Z)V");
            mids$[mid_init$_f03d0044] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/search/SortField$Type;ZLorg/apache/lucene/search/SortedNumericSelector$Type;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getComparator_f38637f4] = env->getMethodID(cls, "getComparator", "(II)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_getSelector_26022dee] = env->getMethodID(cls, "getSelector", "()Lorg/apache/lucene/search/SortedNumericSelector$Type;");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_setMissingValue_290588ee] = env->getMethodID(cls, "setMissingValue", "(Ljava/lang/Object;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_b65c884e, a0.this$, a1.this$)) {}

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_28dc1d67, a0.this$, a1.this$, a2)) {}

        SortedNumericSortField::SortedNumericSortField(const ::java::lang::String & a0, const ::org::apache::lucene::search::SortField$Type & a1, jboolean a2, const ::org::apache::lucene::search::SortedNumericSelector$Type & a3) : ::org::apache::lucene::search::SortField(env->newObject(initializeClass, &mids$, mid_init$_f03d0044, a0.this$, a1.this$, a2, a3.this$)) {}

        jboolean SortedNumericSortField::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::org::apache::lucene::search::FieldComparator SortedNumericSortField::getComparator(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_getComparator_f38637f4], a0, a1));
        }

        ::org::apache::lucene::search::SortedNumericSelector$Type SortedNumericSortField::getSelector() const
        {
          return ::org::apache::lucene::search::SortedNumericSelector$Type(env->callObjectMethod(this$, mids$[mid_getSelector_26022dee]));
        }

        jint SortedNumericSortField::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void SortedNumericSortField::setMissingValue(const ::java::lang::Object & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setMissingValue_290588ee], a0.this$);
        }

        ::java::lang::String SortedNumericSortField::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_SortedNumericSortField_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SortedNumericSortField_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SortedNumericSortField_init_(t_SortedNumericSortField *self, PyObject *args, PyObject *kwds);
        static PyObject *t_SortedNumericSortField_equals(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_getComparator(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_getSelector(t_SortedNumericSortField *self);
        static PyObject *t_SortedNumericSortField_hashCode(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_setMissingValue(t_SortedNumericSortField *self, PyObject *args);
        static PyObject *t_SortedNumericSortField_toString(t_SortedNumericSortField *self, PyObject *args);
        static int t_SortedNumericSortField_set__missingValue(t_SortedNumericSortField *self, PyObject *arg, void *data);
        static PyObject *t_SortedNumericSortField_get__selector(t_SortedNumericSortField *self, void *data);
        static PyGetSetDef t_SortedNumericSortField__fields_[] = {
          DECLARE_SET_FIELD(t_SortedNumericSortField, missingValue),
          DECLARE_GET_FIELD(t_SortedNumericSortField, selector),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_SortedNumericSortField__methods_[] = {
          DECLARE_METHOD(t_SortedNumericSortField, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSortField, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_SortedNumericSortField, equals, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, getComparator, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, getSelector, METH_NOARGS),
          DECLARE_METHOD(t_SortedNumericSortField, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, setMissingValue, METH_VARARGS),
          DECLARE_METHOD(t_SortedNumericSortField, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SortedNumericSortField, t_SortedNumericSortField, ::org::apache::lucene::search::SortField, SortedNumericSortField, t_SortedNumericSortField_init_, 0, 0, t_SortedNumericSortField__fields_, 0, 0);

        void t_SortedNumericSortField::install(PyObject *module)
        {
          installType(&PY_TYPE(SortedNumericSortField), module, "SortedNumericSortField", 0);
        }

        void t_SortedNumericSortField::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(SortedNumericSortField).tp_dict, "class_", make_descriptor(SortedNumericSortField::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(SortedNumericSortField).tp_dict, "wrapfn_", make_descriptor(t_SortedNumericSortField::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(SortedNumericSortField).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SortedNumericSortField_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, SortedNumericSortField::initializeClass, 1)))
            return NULL;
          return t_SortedNumericSortField::wrap_Object(SortedNumericSortField(((t_SortedNumericSortField *) arg)->object.this$));
        }
        static PyObject *t_SortedNumericSortField_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, SortedNumericSortField::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_SortedNumericSortField_init_(t_SortedNumericSortField *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sK", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1));
                self->object = object;
                break;
              }
            }
            goto err;
           case 3:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sKZ", ::org::apache::lucene::search::SortField$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1, a2));
                self->object = object;
                break;
              }
            }
            goto err;
           case 4:
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::search::SortField$Type a1((jobject) NULL);
              PyTypeObject **p1;
              jboolean a2;
              ::org::apache::lucene::search::SortedNumericSelector$Type a3((jobject) NULL);
              PyTypeObject **p3;
              SortedNumericSortField object((jobject) NULL);

              if (!parseArgs(args, "sKZK", ::org::apache::lucene::search::SortField$Type::initializeClass, ::org::apache::lucene::search::SortedNumericSelector$Type::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::search::t_SortField$Type::parameters_, &a2, &a3, &p3, ::org::apache::lucene::search::t_SortedNumericSelector$Type::parameters_))
              {
                INT_CALL(object = SortedNumericSortField(a0, a1, a2, a3));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_SortedNumericSortField_equals(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_SortedNumericSortField_getComparator(t_SortedNumericSortField *self, PyObject *args)
        {
          jint a0;
          jint a1;
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getComparator(a0, a1));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "getComparator", args, 2);
        }

        static PyObject *t_SortedNumericSortField_getSelector(t_SortedNumericSortField *self)
        {
          ::org::apache::lucene::search::SortedNumericSelector$Type result((jobject) NULL);
          OBJ_CALL(result = self->object.getSelector());
          return ::org::apache::lucene::search::t_SortedNumericSelector$Type::wrap_Object(result);
        }

        static PyObject *t_SortedNumericSortField_hashCode(t_SortedNumericSortField *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_SortedNumericSortField_setMissingValue(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(self->object.setMissingValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "setMissingValue", args, 2);
        }

        static PyObject *t_SortedNumericSortField_toString(t_SortedNumericSortField *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(SortedNumericSortField), (PyObject *) self, "toString", args, 2);
        }

        static int t_SortedNumericSortField_set__missingValue(t_SortedNumericSortField *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object.setMissingValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "missingValue", arg);
          return -1;
        }

        static PyObject *t_SortedNumericSortField_get__selector(t_SortedNumericSortField *self, void *data)
        {
          ::org::apache::lucene::search::SortedNumericSelector$Type value((jobject) NULL);
          OBJ_CALL(value = self->object.getSelector());
          return ::org::apache::lucene::search::t_SortedNumericSelector$Type::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/StandardTokenizerInterface.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/tokenattributes/CharTermAttribute.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *StandardTokenizerInterface::class$ = NULL;
          jmethodID *StandardTokenizerInterface::mids$ = NULL;
          bool StandardTokenizerInterface::live$ = false;
          jint StandardTokenizerInterface::YYEOF = (jint) 0;

          jclass StandardTokenizerInterface::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/StandardTokenizerInterface");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getNextToken_54c6a179] = env->getMethodID(cls, "getNextToken", "()I");
              mids$[mid_getText_64c709f2] = env->getMethodID(cls, "getText", "(Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;)V");
              mids$[mid_yychar_54c6a179] = env->getMethodID(cls, "yychar", "()I");
              mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
              mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              YYEOF = env->getStaticIntField(cls, "YYEOF");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jint StandardTokenizerInterface::getNextToken() const
          {
            return env->callIntMethod(this$, mids$[mid_getNextToken_54c6a179]);
          }

          void StandardTokenizerInterface::getText(const ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_getText_64c709f2], a0.this$);
          }

          jint StandardTokenizerInterface::yychar() const
          {
            return env->callIntMethod(this$, mids$[mid_yychar_54c6a179]);
          }

          jint StandardTokenizerInterface::yylength() const
          {
            return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
          }

          void StandardTokenizerInterface::yyreset(const ::java::io::Reader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_StandardTokenizerInterface_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_getNextToken(t_StandardTokenizerInterface *self);
          static PyObject *t_StandardTokenizerInterface_getText(t_StandardTokenizerInterface *self, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_yychar(t_StandardTokenizerInterface *self);
          static PyObject *t_StandardTokenizerInterface_yylength(t_StandardTokenizerInterface *self);
          static PyObject *t_StandardTokenizerInterface_yyreset(t_StandardTokenizerInterface *self, PyObject *arg);
          static PyObject *t_StandardTokenizerInterface_get__nextToken(t_StandardTokenizerInterface *self, void *data);
          static PyGetSetDef t_StandardTokenizerInterface__fields_[] = {
            DECLARE_GET_FIELD(t_StandardTokenizerInterface, nextToken),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_StandardTokenizerInterface__methods_[] = {
            DECLARE_METHOD(t_StandardTokenizerInterface, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerInterface, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StandardTokenizerInterface, getNextToken, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerInterface, getText, METH_O),
            DECLARE_METHOD(t_StandardTokenizerInterface, yychar, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerInterface, yylength, METH_NOARGS),
            DECLARE_METHOD(t_StandardTokenizerInterface, yyreset, METH_O),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(StandardTokenizerInterface, t_StandardTokenizerInterface, ::java::lang::Object, StandardTokenizerInterface, abstract_init, 0, 0, t_StandardTokenizerInterface__fields_, 0, 0);

          void t_StandardTokenizerInterface::install(PyObject *module)
          {
            installType(&PY_TYPE(StandardTokenizerInterface), module, "StandardTokenizerInterface", 0);
          }

          void t_StandardTokenizerInterface::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "class_", make_descriptor(StandardTokenizerInterface::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "wrapfn_", make_descriptor(t_StandardTokenizerInterface::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(StandardTokenizerInterface::initializeClass);
            PyDict_SetItemString(PY_TYPE(StandardTokenizerInterface).tp_dict, "YYEOF", make_descriptor(StandardTokenizerInterface::YYEOF));
          }

          static PyObject *t_StandardTokenizerInterface_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, StandardTokenizerInterface::initializeClass, 1)))
              return NULL;
            return t_StandardTokenizerInterface::wrap_Object(StandardTokenizerInterface(((t_StandardTokenizerInterface *) arg)->object.this$));
          }
          static PyObject *t_StandardTokenizerInterface_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, StandardTokenizerInterface::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_StandardTokenizerInterface_getNextToken(t_StandardTokenizerInterface *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getNextToken());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerInterface_getText(t_StandardTokenizerInterface *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::tokenattributes::CharTermAttribute::initializeClass, &a0))
            {
              OBJ_CALL(self->object.getText(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getText", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerInterface_yychar(t_StandardTokenizerInterface *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yychar());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerInterface_yylength(t_StandardTokenizerInterface *self)
          {
            jint result;
            OBJ_CALL(result = self->object.yylength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_StandardTokenizerInterface_yyreset(t_StandardTokenizerInterface *self, PyObject *arg)
          {
            ::java::io::Reader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.yyreset(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
            return NULL;
          }

          static PyObject *t_StandardTokenizerInterface_get__nextToken(t_StandardTokenizerInterface *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getNextToken());
            return PyInt_FromLong((long) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopDocsCollector.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopDocsCollector::class$ = NULL;
        jmethodID *TopDocsCollector::mids$ = NULL;
        bool TopDocsCollector::live$ = false;

        jclass TopDocsCollector::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopDocsCollector");

            mids$ = new jmethodID[max_mid];
            mids$[mid_getTotalHits_54c6a179] = env->getMethodID(cls, "getTotalHits", "()I");
            mids$[mid_topDocs_0ac630fc] = env->getMethodID(cls, "topDocs", "()Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocs_c7a84aba] = env->getMethodID(cls, "topDocs", "(I)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocs_b17523f8] = env->getMethodID(cls, "topDocs", "(II)Lorg/apache/lucene/search/TopDocs;");
            mids$[mid_topDocsSize_54c6a179] = env->getMethodID(cls, "topDocsSize", "()I");
            mids$[mid_populateResults_fbb5e76c] = env->getMethodID(cls, "populateResults", "([Lorg/apache/lucene/search/ScoreDoc;I)V");
            mids$[mid_newTopDocs_a5bceb12] = env->getMethodID(cls, "newTopDocs", "([Lorg/apache/lucene/search/ScoreDoc;I)Lorg/apache/lucene/search/TopDocs;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint TopDocsCollector::getTotalHits() const
        {
          return env->callIntMethod(this$, mids$[mid_getTotalHits_54c6a179]);
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs() const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_0ac630fc]));
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs(jint a0) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_c7a84aba], a0));
        }

        ::org::apache::lucene::search::TopDocs TopDocsCollector::topDocs(jint a0, jint a1) const
        {
          return ::org::apache::lucene::search::TopDocs(env->callObjectMethod(this$, mids$[mid_topDocs_b17523f8], a0, a1));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopDocsCollector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocsCollector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopDocsCollector_of_(t_TopDocsCollector *self, PyObject *args);
        static PyObject *t_TopDocsCollector_getTotalHits(t_TopDocsCollector *self);
        static PyObject *t_TopDocsCollector_topDocs(t_TopDocsCollector *self, PyObject *args);
        static PyObject *t_TopDocsCollector_get__totalHits(t_TopDocsCollector *self, void *data);
        static PyObject *t_TopDocsCollector_get__parameters_(t_TopDocsCollector *self, void *data);
        static PyGetSetDef t_TopDocsCollector__fields_[] = {
          DECLARE_GET_FIELD(t_TopDocsCollector, totalHits),
          DECLARE_GET_FIELD(t_TopDocsCollector, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopDocsCollector__methods_[] = {
          DECLARE_METHOD(t_TopDocsCollector, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocsCollector, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopDocsCollector, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopDocsCollector, getTotalHits, METH_NOARGS),
          DECLARE_METHOD(t_TopDocsCollector, topDocs, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopDocsCollector, t_TopDocsCollector, ::org::apache::lucene::search::Collector, TopDocsCollector, abstract_init, 0, 0, t_TopDocsCollector__fields_, 0, 0);
        PyObject *t_TopDocsCollector::wrap_Object(const TopDocsCollector& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopDocsCollector::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopDocsCollector *self = (t_TopDocsCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopDocsCollector::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopDocsCollector::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopDocsCollector *self = (t_TopDocsCollector *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopDocsCollector::install(PyObject *module)
        {
          installType(&PY_TYPE(TopDocsCollector), module, "TopDocsCollector", 0);
        }

        void t_TopDocsCollector::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopDocsCollector).tp_dict, "class_", make_descriptor(TopDocsCollector::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopDocsCollector).tp_dict, "wrapfn_", make_descriptor(t_TopDocsCollector::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopDocsCollector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopDocsCollector_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopDocsCollector::initializeClass, 1)))
            return NULL;
          return t_TopDocsCollector::wrap_Object(TopDocsCollector(((t_TopDocsCollector *) arg)->object.this$));
        }
        static PyObject *t_TopDocsCollector_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopDocsCollector::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopDocsCollector_of_(t_TopDocsCollector *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_TopDocsCollector_getTotalHits(t_TopDocsCollector *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getTotalHits());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TopDocsCollector_topDocs(t_TopDocsCollector *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);
              OBJ_CALL(result = self->object.topDocs());
              return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
            }
            break;
           case 1:
            {
              jint a0;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.topDocs(a0));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              jint a1;
              ::org::apache::lucene::search::TopDocs result((jobject) NULL);

              if (!parseArgs(args, "II", &a0, &a1))
              {
                OBJ_CALL(result = self->object.topDocs(a0, a1));
                return ::org::apache::lucene::search::t_TopDocs::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "topDocs", args);
          return NULL;
        }
        static PyObject *t_TopDocsCollector_get__parameters_(t_TopDocsCollector *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopDocsCollector_get__totalHits(t_TopDocsCollector *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getTotalHits());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/CharacterRunAutomaton.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *CharacterRunAutomaton::class$ = NULL;
          jmethodID *CharacterRunAutomaton::mids$ = NULL;
          bool CharacterRunAutomaton::live$ = false;

          jclass CharacterRunAutomaton::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/CharacterRunAutomaton");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fc7cf394] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_run_5fdc3f44] = env->getMethodID(cls, "run", "(Ljava/lang/String;)Z");
              mids$[mid_run_6f0bb35a] = env->getMethodID(cls, "run", "([CII)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharacterRunAutomaton::CharacterRunAutomaton(const ::org::apache::lucene::util::automaton::Automaton & a0) : ::org::apache::lucene::util::automaton::RunAutomaton(env->newObject(initializeClass, &mids$, mid_init$_fc7cf394, a0.this$)) {}

          jboolean CharacterRunAutomaton::run(const ::java::lang::String & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_5fdc3f44], a0.this$);
          }

          jboolean CharacterRunAutomaton::run(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            return env->callBooleanMethod(this$, mids$[mid_run_6f0bb35a], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_CharacterRunAutomaton_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharacterRunAutomaton_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharacterRunAutomaton_init_(t_CharacterRunAutomaton *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharacterRunAutomaton_run(t_CharacterRunAutomaton *self, PyObject *args);

          static PyMethodDef t_CharacterRunAutomaton__methods_[] = {
            DECLARE_METHOD(t_CharacterRunAutomaton, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterRunAutomaton, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharacterRunAutomaton, run, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharacterRunAutomaton, t_CharacterRunAutomaton, ::org::apache::lucene::util::automaton::RunAutomaton, CharacterRunAutomaton, t_CharacterRunAutomaton_init_, 0, 0, 0, 0, 0);

          void t_CharacterRunAutomaton::install(PyObject *module)
          {
            installType(&PY_TYPE(CharacterRunAutomaton), module, "CharacterRunAutomaton", 0);
          }

          void t_CharacterRunAutomaton::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharacterRunAutomaton).tp_dict, "class_", make_descriptor(CharacterRunAutomaton::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharacterRunAutomaton).tp_dict, "wrapfn_", make_descriptor(t_CharacterRunAutomaton::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharacterRunAutomaton).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CharacterRunAutomaton_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharacterRunAutomaton::initializeClass, 1)))
              return NULL;
            return t_CharacterRunAutomaton::wrap_Object(CharacterRunAutomaton(((t_CharacterRunAutomaton *) arg)->object.this$));
          }
          static PyObject *t_CharacterRunAutomaton_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharacterRunAutomaton::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharacterRunAutomaton_init_(t_CharacterRunAutomaton *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);
            CharacterRunAutomaton object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              INT_CALL(object = CharacterRunAutomaton(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CharacterRunAutomaton_run(t_CharacterRunAutomaton *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::lang::String a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "s", &a0))
                {
                  OBJ_CALL(result = self->object.run(a0));
                  Py_RETURN_BOOL(result);
                }
              }
              break;
             case 3:
              {
                JArray< jchar > a0((jobject) NULL);
                jint a1;
                jint a2;
                jboolean result;

                if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                {
                  OBJ_CALL(result = self->object.run(a0, a1, a2));
                  Py_RETURN_BOOL(result);
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "run", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/BufferedUpdatesStream$ApplyDeletesResult.h"
#include "org/apache/lucene/index/SegmentCommitInfo.h"
#include "java/lang/Class.h"
#include "java/util/List.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *BufferedUpdatesStream$ApplyDeletesResult::class$ = NULL;
        jmethodID *BufferedUpdatesStream$ApplyDeletesResult::mids$ = NULL;
        jfieldID *BufferedUpdatesStream$ApplyDeletesResult::fids$ = NULL;
        bool BufferedUpdatesStream$ApplyDeletesResult::live$ = false;

        jclass BufferedUpdatesStream$ApplyDeletesResult::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/BufferedUpdatesStream$ApplyDeletesResult");

            fids$ = new jfieldID[max_fid];
            fids$[fid_allDeleted] = env->getFieldID(cls, "allDeleted", "Ljava/util/List;");
            fids$[fid_anyDeletes] = env->getFieldID(cls, "anyDeletes", "Z");
            fids$[fid_gen] = env->getFieldID(cls, "gen", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::java::util::List BufferedUpdatesStream$ApplyDeletesResult::_get_allDeleted() const
        {
          return ::java::util::List(env->getObjectField(this$, fids$[fid_allDeleted]));
        }

        jboolean BufferedUpdatesStream$ApplyDeletesResult::_get_anyDeletes() const
        {
          return env->getBooleanField(this$, fids$[fid_anyDeletes]);
        }

        jlong BufferedUpdatesStream$ApplyDeletesResult::_get_gen() const
        {
          return env->getLongField(this$, fids$[fid_gen]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__allDeleted(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__anyDeletes(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data);
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__gen(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data);

        static PyGetSetDef t_BufferedUpdatesStream$ApplyDeletesResult__fields_[] = {
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$ApplyDeletesResult, allDeleted),
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$ApplyDeletesResult, anyDeletes),
          DECLARE_GET_FIELD(t_BufferedUpdatesStream$ApplyDeletesResult, gen),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_BufferedUpdatesStream$ApplyDeletesResult__methods_[] = {
          DECLARE_METHOD(t_BufferedUpdatesStream$ApplyDeletesResult, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BufferedUpdatesStream$ApplyDeletesResult, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedUpdatesStream$ApplyDeletesResult, t_BufferedUpdatesStream$ApplyDeletesResult, ::java::lang::Object, BufferedUpdatesStream$ApplyDeletesResult, abstract_init, 0, 0, t_BufferedUpdatesStream$ApplyDeletesResult__fields_, 0, 0);

        void t_BufferedUpdatesStream$ApplyDeletesResult::install(PyObject *module)
        {
          installType(&PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult), module, "BufferedUpdatesStream$ApplyDeletesResult", 0);
        }

        void t_BufferedUpdatesStream$ApplyDeletesResult::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult).tp_dict, "class_", make_descriptor(BufferedUpdatesStream$ApplyDeletesResult::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult).tp_dict, "wrapfn_", make_descriptor(t_BufferedUpdatesStream$ApplyDeletesResult::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BufferedUpdatesStream$ApplyDeletesResult).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BufferedUpdatesStream$ApplyDeletesResult::initializeClass, 1)))
            return NULL;
          return t_BufferedUpdatesStream$ApplyDeletesResult::wrap_Object(BufferedUpdatesStream$ApplyDeletesResult(((t_BufferedUpdatesStream$ApplyDeletesResult *) arg)->object.this$));
        }
        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BufferedUpdatesStream$ApplyDeletesResult::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__allDeleted(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object._get_allDeleted());
          return ::java::util::t_List::wrap_Object(value);
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__anyDeletes(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data)
        {
          jboolean value;
          OBJ_CALL(value = self->object._get_anyDeletes());
          Py_RETURN_BOOL(value);
        }

        static PyObject *t_BufferedUpdatesStream$ApplyDeletesResult_get__gen(t_BufferedUpdatesStream$ApplyDeletesResult *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_gen());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/DirectReader.h"
#include "org/apache/lucene/store/RandomAccessInput.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/LongValues.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *DirectReader::class$ = NULL;
          jmethodID *DirectReader::mids$ = NULL;
          bool DirectReader::live$ = false;

          jclass DirectReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/DirectReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getInstance_9b696251] = env->getStaticMethodID(cls, "getInstance", "(Lorg/apache/lucene/store/RandomAccessInput;I)Lorg/apache/lucene/util/LongValues;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          DirectReader::DirectReader() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::util::LongValues DirectReader::getInstance(const ::org::apache::lucene::store::RandomAccessInput & a0, jint a1)
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::util::LongValues(env->callStaticObjectMethod(cls, mids$[mid_getInstance_9b696251], a0.this$, a1));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_DirectReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_DirectReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_DirectReader_init_(t_DirectReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_DirectReader_getInstance(PyTypeObject *type, PyObject *args);

          static PyMethodDef t_DirectReader__methods_[] = {
            DECLARE_METHOD(t_DirectReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_DirectReader, getInstance, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(DirectReader, t_DirectReader, ::java::lang::Object, DirectReader, t_DirectReader_init_, 0, 0, 0, 0, 0);

          void t_DirectReader::install(PyObject *module)
          {
            installType(&PY_TYPE(DirectReader), module, "DirectReader", 0);
          }

          void t_DirectReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(DirectReader).tp_dict, "class_", make_descriptor(DirectReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(DirectReader).tp_dict, "wrapfn_", make_descriptor(t_DirectReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(DirectReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_DirectReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, DirectReader::initializeClass, 1)))
              return NULL;
            return t_DirectReader::wrap_Object(DirectReader(((t_DirectReader *) arg)->object.this$));
          }
          static PyObject *t_DirectReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, DirectReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_DirectReader_init_(t_DirectReader *self, PyObject *args, PyObject *kwds)
          {
            DirectReader object((jobject) NULL);

            INT_CALL(object = DirectReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_DirectReader_getInstance(PyTypeObject *type, PyObject *args)
          {
            ::org::apache::lucene::store::RandomAccessInput a0((jobject) NULL);
            jint a1;
            ::org::apache::lucene::util::LongValues result((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::store::RandomAccessInput::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::DirectReader::getInstance(a0, a1));
              return ::org::apache::lucene::util::t_LongValues::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getInstance", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/Normalization$NoNormalization.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *Normalization$NoNormalization::class$ = NULL;
          jmethodID *Normalization$NoNormalization::mids$ = NULL;
          bool Normalization$NoNormalization::live$ = false;

          jclass Normalization$NoNormalization::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/Normalization$NoNormalization");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_aa9c2b5b] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Normalization$NoNormalization::Normalization$NoNormalization() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation Normalization$NoNormalization::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_aa9c2b5b], a0.this$, a1, a2));
          }

          jfloat Normalization$NoNormalization::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String Normalization$NoNormalization::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_Normalization$NoNormalization_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Normalization$NoNormalization_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Normalization$NoNormalization_init_(t_Normalization$NoNormalization *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Normalization$NoNormalization_explain(t_Normalization$NoNormalization *self, PyObject *args);
          static PyObject *t_Normalization$NoNormalization_tfn(t_Normalization$NoNormalization *self, PyObject *args);
          static PyObject *t_Normalization$NoNormalization_toString(t_Normalization$NoNormalization *self, PyObject *args);

          static PyMethodDef t_Normalization$NoNormalization__methods_[] = {
            DECLARE_METHOD(t_Normalization$NoNormalization, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization$NoNormalization, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Normalization$NoNormalization, explain, METH_VARARGS),
            DECLARE_METHOD(t_Normalization$NoNormalization, tfn, METH_VARARGS),
            DECLARE_METHOD(t_Normalization$NoNormalization, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Normalization$NoNormalization, t_Normalization$NoNormalization, ::org::apache::lucene::search::similarities::Normalization, Normalization$NoNormalization, t_Normalization$NoNormalization_init_, 0, 0, 0, 0, 0);

          void t_Normalization$NoNormalization::install(PyObject *module)
          {
            installType(&PY_TYPE(Normalization$NoNormalization), module, "Normalization$NoNormalization", 0);
          }

          void t_Normalization$NoNormalization::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Normalization$NoNormalization).tp_dict, "class_", make_descriptor(Normalization$NoNormalization::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Normalization$NoNormalization).tp_dict, "wrapfn_", make_descriptor(t_Normalization$NoNormalization::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Normalization$NoNormalization).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Normalization$NoNormalization_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Normalization$NoNormalization::initializeClass, 1)))
              return NULL;
            return t_Normalization$NoNormalization::wrap_Object(Normalization$NoNormalization(((t_Normalization$NoNormalization *) arg)->object.this$));
          }
          static PyObject *t_Normalization$NoNormalization_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Normalization$NoNormalization::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Normalization$NoNormalization_init_(t_Normalization$NoNormalization *self, PyObject *args, PyObject *kwds)
          {
            Normalization$NoNormalization object((jobject) NULL);

            INT_CALL(object = Normalization$NoNormalization());
            self->object = object;

            return 0;
          }

          static PyObject *t_Normalization$NoNormalization_explain(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.explain(a0, a1, a2));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_Normalization$NoNormalization_tfn(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_Normalization$NoNormalization_toString(t_Normalization$NoNormalization *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Normalization$NoNormalization), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/cjk/CJKBigramFilter.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {

          ::java::lang::Class *CJKBigramFilter::class$ = NULL;
          jmethodID *CJKBigramFilter::mids$ = NULL;
          bool CJKBigramFilter::live$ = false;
          ::java::lang::String *CJKBigramFilter::DOUBLE_TYPE = NULL;
          jint CJKBigramFilter::HAN = (jint) 0;
          jint CJKBigramFilter::HANGUL = (jint) 0;
          jint CJKBigramFilter::HIRAGANA = (jint) 0;
          jint CJKBigramFilter::KATAKANA = (jint) 0;
          ::java::lang::String *CJKBigramFilter::SINGLE_TYPE = NULL;

          jclass CJKBigramFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/cjk/CJKBigramFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_4f7f61d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DOUBLE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "DOUBLE_TYPE", "Ljava/lang/String;"));
              HAN = env->getStaticIntField(cls, "HAN");
              HANGUL = env->getStaticIntField(cls, "HANGUL");
              HIRAGANA = env->getStaticIntField(cls, "HIRAGANA");
              KATAKANA = env->getStaticIntField(cls, "KATAKANA");
              SINGLE_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "SINGLE_TYPE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          CJKBigramFilter::CJKBigramFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_4f7f61d3, a0.this$, a1, a2)) {}

          jboolean CJKBigramFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void CJKBigramFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace cjk {
          static PyObject *t_CJKBigramFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CJKBigramFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CJKBigramFilter_init_(t_CJKBigramFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CJKBigramFilter_incrementToken(t_CJKBigramFilter *self, PyObject *args);
          static PyObject *t_CJKBigramFilter_reset(t_CJKBigramFilter *self, PyObject *args);

          static PyMethodDef t_CJKBigramFilter__methods_[] = {
            DECLARE_METHOD(t_CJKBigramFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CJKBigramFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_CJKBigramFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CJKBigramFilter, t_CJKBigramFilter, ::org::apache::lucene::analysis::TokenFilter, CJKBigramFilter, t_CJKBigramFilter_init_, 0, 0, 0, 0, 0);

          void t_CJKBigramFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(CJKBigramFilter), module, "CJKBigramFilter", 0);
          }

          void t_CJKBigramFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "class_", make_descriptor(CJKBigramFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "wrapfn_", make_descriptor(t_CJKBigramFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CJKBigramFilter::initializeClass);
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "DOUBLE_TYPE", make_descriptor(j2p(*CJKBigramFilter::DOUBLE_TYPE)));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "HAN", make_descriptor(CJKBigramFilter::HAN));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "HANGUL", make_descriptor(CJKBigramFilter::HANGUL));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "HIRAGANA", make_descriptor(CJKBigramFilter::HIRAGANA));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "KATAKANA", make_descriptor(CJKBigramFilter::KATAKANA));
            PyDict_SetItemString(PY_TYPE(CJKBigramFilter).tp_dict, "SINGLE_TYPE", make_descriptor(j2p(*CJKBigramFilter::SINGLE_TYPE)));
          }

          static PyObject *t_CJKBigramFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CJKBigramFilter::initializeClass, 1)))
              return NULL;
            return t_CJKBigramFilter::wrap_Object(CJKBigramFilter(((t_CJKBigramFilter *) arg)->object.this$));
          }
          static PyObject *t_CJKBigramFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CJKBigramFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CJKBigramFilter_init_(t_CJKBigramFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
                {
                  INT_CALL(object = CJKBigramFilter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = CJKBigramFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                CJKBigramFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = CJKBigramFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CJKBigramFilter_incrementToken(t_CJKBigramFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(CJKBigramFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_CJKBigramFilter_reset(t_CJKBigramFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(CJKBigramFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *ReferenceManager$RefreshListener::class$ = NULL;
        jmethodID *ReferenceManager$RefreshListener::mids$ = NULL;
        bool ReferenceManager$RefreshListener::live$ = false;

        jclass ReferenceManager$RefreshListener::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/ReferenceManager$RefreshListener");

            mids$ = new jmethodID[max_mid];
            mids$[mid_afterRefresh_bb0c767f] = env->getMethodID(cls, "afterRefresh", "(Z)V");
            mids$[mid_beforeRefresh_54c6a166] = env->getMethodID(cls, "beforeRefresh", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void ReferenceManager$RefreshListener::afterRefresh(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_afterRefresh_bb0c767f], a0);
        }

        void ReferenceManager$RefreshListener::beforeRefresh() const
        {
          env->callVoidMethod(this$, mids$[mid_beforeRefresh_54c6a166]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_ReferenceManager$RefreshListener_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_of_(t_ReferenceManager$RefreshListener *self, PyObject *args);
        static PyObject *t_ReferenceManager$RefreshListener_afterRefresh(t_ReferenceManager$RefreshListener *self, PyObject *arg);
        static PyObject *t_ReferenceManager$RefreshListener_beforeRefresh(t_ReferenceManager$RefreshListener *self);
        static PyObject *t_ReferenceManager$RefreshListener_get__parameters_(t_ReferenceManager$RefreshListener *self, void *data);
        static PyGetSetDef t_ReferenceManager$RefreshListener__fields_[] = {
          DECLARE_GET_FIELD(t_ReferenceManager$RefreshListener, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ReferenceManager$RefreshListener__methods_[] = {
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, of_, METH_VARARGS),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, afterRefresh, METH_O),
          DECLARE_METHOD(t_ReferenceManager$RefreshListener, beforeRefresh, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ReferenceManager$RefreshListener, t_ReferenceManager$RefreshListener, ::java::lang::Object, ReferenceManager$RefreshListener, abstract_init, 0, 0, t_ReferenceManager$RefreshListener__fields_, 0, 0);
        PyObject *t_ReferenceManager$RefreshListener::wrap_Object(const ReferenceManager$RefreshListener& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager$RefreshListener::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager$RefreshListener *self = (t_ReferenceManager$RefreshListener *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_ReferenceManager$RefreshListener::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_ReferenceManager$RefreshListener::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_ReferenceManager$RefreshListener *self = (t_ReferenceManager$RefreshListener *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_ReferenceManager$RefreshListener::install(PyObject *module)
        {
          installType(&PY_TYPE(ReferenceManager$RefreshListener), module, "ReferenceManager$RefreshListener", 0);
        }

        void t_ReferenceManager$RefreshListener::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ReferenceManager$RefreshListener).tp_dict, "class_", make_descriptor(ReferenceManager$RefreshListener::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ReferenceManager$RefreshListener).tp_dict, "wrapfn_", make_descriptor(t_ReferenceManager$RefreshListener::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ReferenceManager$RefreshListener).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ReferenceManager$RefreshListener_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ReferenceManager$RefreshListener::initializeClass, 1)))
            return NULL;
          return t_ReferenceManager$RefreshListener::wrap_Object(ReferenceManager$RefreshListener(((t_ReferenceManager$RefreshListener *) arg)->object.this$));
        }
        static PyObject *t_ReferenceManager$RefreshListener_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ReferenceManager$RefreshListener::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_ReferenceManager$RefreshListener_of_(t_ReferenceManager$RefreshListener *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_ReferenceManager$RefreshListener_afterRefresh(t_ReferenceManager$RefreshListener *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.afterRefresh(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "afterRefresh", arg);
          return NULL;
        }

        static PyObject *t_ReferenceManager$RefreshListener_beforeRefresh(t_ReferenceManager$RefreshListener *self)
        {
          OBJ_CALL(self->object.beforeRefresh());
          Py_RETURN_NONE;
        }
        static PyObject *t_ReferenceManager$RefreshListener_get__parameters_(t_ReferenceManager$RefreshListener *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/analysis/PythonFilteringTokenFilter.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/Throwable.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {

        ::java::lang::Class *PythonFilteringTokenFilter::class$ = NULL;
        jmethodID *PythonFilteringTokenFilter::mids$ = NULL;
        bool PythonFilteringTokenFilter::live$ = false;

        jclass PythonFilteringTokenFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/analysis/PythonFilteringTokenFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_8f50e725] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/TokenStream;)V");
            mids$[mid_accept_54c6a16a] = env->getMethodID(cls, "accept", "()Z");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonFilteringTokenFilter::PythonFilteringTokenFilter(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::TokenStream & a1) : ::org::apache::lucene::analysis::util::FilteringTokenFilter(env->newObject(initializeClass, &mids$, mid_init$_8f50e725, a0.this$, a1.this$)) {}

        void PythonFilteringTokenFilter::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonFilteringTokenFilter::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonFilteringTokenFilter::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace analysis {
        static PyObject *t_PythonFilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonFilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonFilteringTokenFilter_init_(t_PythonFilteringTokenFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonFilteringTokenFilter_finalize(t_PythonFilteringTokenFilter *self);
        static PyObject *t_PythonFilteringTokenFilter_pythonExtension(t_PythonFilteringTokenFilter *self, PyObject *args);
        static jboolean JNICALL t_PythonFilteringTokenFilter_accept0(JNIEnv *jenv, jobject jobj);
        static void JNICALL t_PythonFilteringTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonFilteringTokenFilter_get__self(t_PythonFilteringTokenFilter *self, void *data);
        static PyGetSetDef t_PythonFilteringTokenFilter__fields_[] = {
          DECLARE_GET_FIELD(t_PythonFilteringTokenFilter, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonFilteringTokenFilter__methods_[] = {
          DECLARE_METHOD(t_PythonFilteringTokenFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonFilteringTokenFilter, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonFilteringTokenFilter, t_PythonFilteringTokenFilter, ::org::apache::lucene::analysis::util::FilteringTokenFilter, PythonFilteringTokenFilter, t_PythonFilteringTokenFilter_init_, 0, 0, t_PythonFilteringTokenFilter__fields_, 0, 0);

        void t_PythonFilteringTokenFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonFilteringTokenFilter), module, "PythonFilteringTokenFilter", 1);
        }

        void t_PythonFilteringTokenFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonFilteringTokenFilter).tp_dict, "class_", make_descriptor(PythonFilteringTokenFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonFilteringTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_PythonFilteringTokenFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonFilteringTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonFilteringTokenFilter::initializeClass);
          JNINativeMethod methods[] = {
            { "accept", "()Z", (void *) t_PythonFilteringTokenFilter_accept0 },
            { "pythonDecRef", "()V", (void *) t_PythonFilteringTokenFilter_pythonDecRef1 },
          };
          env->registerNatives(cls, methods, 2);
        }

        static PyObject *t_PythonFilteringTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonFilteringTokenFilter::initializeClass, 1)))
            return NULL;
          return t_PythonFilteringTokenFilter::wrap_Object(PythonFilteringTokenFilter(((t_PythonFilteringTokenFilter *) arg)->object.this$));
        }
        static PyObject *t_PythonFilteringTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonFilteringTokenFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonFilteringTokenFilter_init_(t_PythonFilteringTokenFilter *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::util::Version a0((jobject) NULL);
          PyTypeObject **p0;
          ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);
          PythonFilteringTokenFilter object((jobject) NULL);

          if (!parseArgs(args, "Kk", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1))
          {
            INT_CALL(object = PythonFilteringTokenFilter(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonFilteringTokenFilter_finalize(t_PythonFilteringTokenFilter *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonFilteringTokenFilter_pythonExtension(t_PythonFilteringTokenFilter *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static jboolean JNICALL t_PythonFilteringTokenFilter_accept0(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          jboolean value;
          PyObject *result = PyObject_CallMethod(obj, "accept", "");
          if (!result)
            throwPythonError();
          else if (parseArg(result, "Z", &value))
          {
            throwTypeError("accept", result);
            Py_DECREF(result);
          }
          else
          {
            Py_DECREF(result);
            return value;
          }

          return (jboolean) 0;
        }

        static void JNICALL t_PythonFilteringTokenFilter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonFilteringTokenFilter::mids$[PythonFilteringTokenFilter::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonFilteringTokenFilter_get__self(t_PythonFilteringTokenFilter *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemmer::class$ = NULL;
          jmethodID *FinnishLightStemmer::mids$ = NULL;
          bool FinnishLightStemmer::live$ = false;

          jclass FinnishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemmer::FinnishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint FinnishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemmer_init_(t_FinnishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemmer_stem(t_FinnishLightStemmer *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishLightStemmer, t_FinnishLightStemmer, ::java::lang::Object, FinnishLightStemmer, t_FinnishLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_FinnishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemmer), module, "FinnishLightStemmer", 0);
          }

          void t_FinnishLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishLightStemmer).tp_dict, "class_", make_descriptor(FinnishLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_FinnishLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FinnishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemmer::wrap_Object(FinnishLightStemmer(((t_FinnishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemmer_init_(t_FinnishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            FinnishLightStemmer object((jobject) NULL);

            INT_CALL(object = FinnishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_FinnishLightStemmer_stem(t_FinnishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/Lookup$LookupResult.h"
#include "java/lang/Comparable.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {

          ::java::lang::Class *Lookup$LookupResult::class$ = NULL;
          jmethodID *Lookup$LookupResult::mids$ = NULL;
          jfieldID *Lookup$LookupResult::fids$ = NULL;
          bool Lookup$LookupResult::live$ = false;

          jclass Lookup$LookupResult::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/Lookup$LookupResult");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_03ea1383] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;J)V");
              mids$[mid_init$_f8b7fcb9] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLjava/util/Set;)V");
              mids$[mid_init$_bb9697af] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_init$_a19b2ec9] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;JLorg/apache/lucene/util/BytesRef;Ljava/util/Set;)V");
              mids$[mid_init$_37f21f6f] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Object;JLorg/apache/lucene/util/BytesRef;)V");
              mids$[mid_init$_f9089661] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/Object;JLorg/apache/lucene/util/BytesRef;Ljava/util/Set;)V");
              mids$[mid_compareTo_2615e59a] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/suggest/Lookup$LookupResult;)I");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_contexts] = env->getFieldID(cls, "contexts", "Ljava/util/Set;");
              fids$[fid_highlightKey] = env->getFieldID(cls, "highlightKey", "Ljava/lang/Object;");
              fids$[fid_key] = env->getFieldID(cls, "key", "Ljava/lang/CharSequence;");
              fids$[fid_payload] = env->getFieldID(cls, "payload", "Lorg/apache/lucene/util/BytesRef;");
              fids$[fid_value] = env->getFieldID(cls, "value", "J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_03ea1383, a0.this$, a1)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::java::util::Set & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f8b7fcb9, a0.this$, a1, a2.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::org::apache::lucene::util::BytesRef & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb9697af, a0.this$, a1, a2.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, jlong a1, const ::org::apache::lucene::util::BytesRef & a2, const ::java::util::Set & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a19b2ec9, a0.this$, a1, a2.this$, a3.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_37f21f6f, a0.this$, a1.this$, a2, a3.this$)) {}

          Lookup$LookupResult::Lookup$LookupResult(const ::java::lang::CharSequence & a0, const ::java::lang::Object & a1, jlong a2, const ::org::apache::lucene::util::BytesRef & a3, const ::java::util::Set & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f9089661, a0.this$, a1.this$, a2, a3.this$, a4.this$)) {}

          jint Lookup$LookupResult::compareTo(const Lookup$LookupResult & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_2615e59a], a0.this$);
          }

          ::java::lang::String Lookup$LookupResult::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::util::Set Lookup$LookupResult::_get_contexts() const
          {
            return ::java::util::Set(env->getObjectField(this$, fids$[fid_contexts]));
          }

          ::java::lang::Object Lookup$LookupResult::_get_highlightKey() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_highlightKey]));
          }

          ::java::lang::CharSequence Lookup$LookupResult::_get_key() const
          {
            return ::java::lang::CharSequence(env->getObjectField(this$, fids$[fid_key]));
          }

          ::org::apache::lucene::util::BytesRef Lookup$LookupResult::_get_payload() const
          {
            return ::org::apache::lucene::util::BytesRef(env->getObjectField(this$, fids$[fid_payload]));
          }

          jlong Lookup$LookupResult::_get_value() const
          {
            return env->getLongField(this$, fids$[fid_value]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          static PyObject *t_Lookup$LookupResult_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lookup$LookupResult_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lookup$LookupResult_init_(t_Lookup$LookupResult *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lookup$LookupResult_compareTo(t_Lookup$LookupResult *self, PyObject *arg);
          static PyObject *t_Lookup$LookupResult_toString(t_Lookup$LookupResult *self, PyObject *args);
          static PyObject *t_Lookup$LookupResult_get__contexts(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__highlightKey(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__key(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__payload(t_Lookup$LookupResult *self, void *data);
          static PyObject *t_Lookup$LookupResult_get__value(t_Lookup$LookupResult *self, void *data);

          static PyGetSetDef t_Lookup$LookupResult__fields_[] = {
            DECLARE_GET_FIELD(t_Lookup$LookupResult, contexts),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, highlightKey),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, key),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, payload),
            DECLARE_GET_FIELD(t_Lookup$LookupResult, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lookup$LookupResult__methods_[] = {
            DECLARE_METHOD(t_Lookup$LookupResult, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupResult, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lookup$LookupResult, compareTo, METH_O),
            DECLARE_METHOD(t_Lookup$LookupResult, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lookup$LookupResult, t_Lookup$LookupResult, ::java::lang::Object, Lookup$LookupResult, t_Lookup$LookupResult_init_, 0, 0, t_Lookup$LookupResult__fields_, 0, 0);

          void t_Lookup$LookupResult::install(PyObject *module)
          {
            installType(&PY_TYPE(Lookup$LookupResult), module, "Lookup$LookupResult", 0);
          }

          void t_Lookup$LookupResult::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lookup$LookupResult).tp_dict, "class_", make_descriptor(Lookup$LookupResult::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupResult).tp_dict, "wrapfn_", make_descriptor(t_Lookup$LookupResult::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lookup$LookupResult).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lookup$LookupResult_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lookup$LookupResult::initializeClass, 1)))
              return NULL;
            return t_Lookup$LookupResult::wrap_Object(Lookup$LookupResult(((t_Lookup$LookupResult *) arg)->object.this$));
          }
          static PyObject *t_Lookup$LookupResult_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lookup$LookupResult::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lookup$LookupResult_init_(t_Lookup$LookupResult *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJ", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::java::util::Set a2((jobject) NULL);
                PyTypeObject **p2;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJK", &::java::lang::PY_TYPE(CharSequence), ::java::util::Set::initializeClass, &a0, &a1, &a2, &p2, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJk", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 4:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                jlong a1;
                ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
                ::java::util::Set a3((jobject) NULL);
                PyTypeObject **p3;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OJkK", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &p3, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                jlong a2;
                ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OoJk", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 5:
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::Object a1((jobject) NULL);
                jlong a2;
                ::org::apache::lucene::util::BytesRef a3((jobject) NULL);
                ::java::util::Set a4((jobject) NULL);
                PyTypeObject **p4;
                Lookup$LookupResult object((jobject) NULL);

                if (!parseArgs(args, "OoJkK", &::java::lang::PY_TYPE(CharSequence), ::org::apache::lucene::util::BytesRef::initializeClass, ::java::util::Set::initializeClass, &a0, &a1, &a2, &a3, &a4, &p4, ::java::util::t_Set::parameters_))
                {
                  INT_CALL(object = Lookup$LookupResult(a0, a1, a2, a3, a4));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_Lookup$LookupResult_compareTo(t_Lookup$LookupResult *self, PyObject *arg)
          {
            Lookup$LookupResult a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", Lookup$LookupResult::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_Lookup$LookupResult_toString(t_Lookup$LookupResult *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(Lookup$LookupResult), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_Lookup$LookupResult_get__contexts(t_Lookup$LookupResult *self, void *data)
          {
            ::java::util::Set value((jobject) NULL);
            OBJ_CALL(value = self->object._get_contexts());
            return ::java::util::t_Set::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__highlightKey(t_Lookup$LookupResult *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_highlightKey());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__key(t_Lookup$LookupResult *self, void *data)
          {
            ::java::lang::CharSequence value((jobject) NULL);
            OBJ_CALL(value = self->object._get_key());
            return ::java::lang::t_CharSequence::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__payload(t_Lookup$LookupResult *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object._get_payload());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_Lookup$LookupResult_get__value(t_Lookup$LookupResult *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object._get_value());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *NameIntCacheLRU::class$ = NULL;
            jmethodID *NameIntCacheLRU::mids$ = NULL;
            bool NameIntCacheLRU::live$ = false;

            jclass NameIntCacheLRU::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/NameIntCacheLRU");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");
                mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            jint NameIntCacheLRU::getMaxSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getMaxSize_54c6a179]);
            }

            jint NameIntCacheLRU::getSize() const
            {
              return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_NameIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_NameIntCacheLRU_getMaxSize(t_NameIntCacheLRU *self);
            static PyObject *t_NameIntCacheLRU_getSize(t_NameIntCacheLRU *self);
            static PyObject *t_NameIntCacheLRU_get__maxSize(t_NameIntCacheLRU *self, void *data);
            static PyObject *t_NameIntCacheLRU_get__size(t_NameIntCacheLRU *self, void *data);
            static PyGetSetDef t_NameIntCacheLRU__fields_[] = {
              DECLARE_GET_FIELD(t_NameIntCacheLRU, maxSize),
              DECLARE_GET_FIELD(t_NameIntCacheLRU, size),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_NameIntCacheLRU__methods_[] = {
              DECLARE_METHOD(t_NameIntCacheLRU, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameIntCacheLRU, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_NameIntCacheLRU, getMaxSize, METH_NOARGS),
              DECLARE_METHOD(t_NameIntCacheLRU, getSize, METH_NOARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(NameIntCacheLRU, t_NameIntCacheLRU, ::java::lang::Object, NameIntCacheLRU, abstract_init, 0, 0, t_NameIntCacheLRU__fields_, 0, 0);

            void t_NameIntCacheLRU::install(PyObject *module)
            {
              installType(&PY_TYPE(NameIntCacheLRU), module, "NameIntCacheLRU", 0);
            }

            void t_NameIntCacheLRU::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(NameIntCacheLRU).tp_dict, "class_", make_descriptor(NameIntCacheLRU::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(NameIntCacheLRU).tp_dict, "wrapfn_", make_descriptor(t_NameIntCacheLRU::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(NameIntCacheLRU).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_NameIntCacheLRU_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, NameIntCacheLRU::initializeClass, 1)))
                return NULL;
              return t_NameIntCacheLRU::wrap_Object(NameIntCacheLRU(((t_NameIntCacheLRU *) arg)->object.this$));
            }
            static PyObject *t_NameIntCacheLRU_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, NameIntCacheLRU::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_NameIntCacheLRU_getMaxSize(t_NameIntCacheLRU *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getMaxSize());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_NameIntCacheLRU_getSize(t_NameIntCacheLRU *self)
            {
              jint result;
              OBJ_CALL(result = self->object.getSize());
              return PyInt_FromLong((long) result);
            }

            static PyObject *t_NameIntCacheLRU_get__maxSize(t_NameIntCacheLRU *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getMaxSize());
              return PyInt_FromLong((long) value);
            }

            static PyObject *t_NameIntCacheLRU_get__size(t_NameIntCacheLRU *self, void *data)
            {
              jint value;
              OBJ_CALL(value = self->object.getSize());
              return PyInt_FromLong((long) value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/BytesRefIterator.h"
#include "org/apache/lucene/index/DocsAndPositionsEnum.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/TermState.h"
#include "org/apache/lucene/index/DocsEnum.h"
#include "org/apache/lucene/index/TermsEnum$SeekStatus.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *TermsEnum::class$ = NULL;
        jmethodID *TermsEnum::mids$ = NULL;
        bool TermsEnum::live$ = false;
        TermsEnum *TermsEnum::EMPTY = NULL;

        jclass TermsEnum::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/TermsEnum");

            mids$ = new jmethodID[max_mid];
            mids$[mid_attributes_f901022b] = env->getMethodID(cls, "attributes", "()Lorg/apache/lucene/util/AttributeSource;");
            mids$[mid_docFreq_54c6a179] = env->getMethodID(cls, "docFreq", "()I");
            mids$[mid_docs_fb0743a7] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docs_e6d4c3ef] = env->getMethodID(cls, "docs", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsEnum;I)Lorg/apache/lucene/index/DocsEnum;");
            mids$[mid_docsAndPositions_ffc1634d] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_docsAndPositions_b5d9c11b] = env->getMethodID(cls, "docsAndPositions", "(Lorg/apache/lucene/util/Bits;Lorg/apache/lucene/index/DocsAndPositionsEnum;I)Lorg/apache/lucene/index/DocsAndPositionsEnum;");
            mids$[mid_ord_54c6a17a] = env->getMethodID(cls, "ord", "()J");
            mids$[mid_seekCeil_fa9d72c4] = env->getMethodID(cls, "seekCeil", "(Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum$SeekStatus;");
            mids$[mid_seekExact_7bc03dc8] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;)Z");
            mids$[mid_seekExact_0ee6df2f] = env->getMethodID(cls, "seekExact", "(J)V");
            mids$[mid_seekExact_fe46da51] = env->getMethodID(cls, "seekExact", "(Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/index/TermState;)V");
            mids$[mid_term_4ae19461] = env->getMethodID(cls, "term", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_termState_3e41fede] = env->getMethodID(cls, "termState", "()Lorg/apache/lucene/index/TermState;");
            mids$[mid_totalTermFreq_54c6a17a] = env->getMethodID(cls, "totalTermFreq", "()J");

            class$ = (::java::lang::Class *) new JObject(cls);
            cls = (jclass) class$->this$;

            EMPTY = new TermsEnum(env->getStaticObjectField(cls, "EMPTY", "Lorg/apache/lucene/index/TermsEnum;"));
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::AttributeSource TermsEnum::attributes() const
        {
          return ::org::apache::lucene::util::AttributeSource(env->callObjectMethod(this$, mids$[mid_attributes_f901022b]));
        }

        jint TermsEnum::docFreq() const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_54c6a179]);
        }

        ::org::apache::lucene::index::DocsEnum TermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_fb0743a7], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::DocsEnum TermsEnum::docs(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsEnum(env->callObjectMethod(this$, mids$[mid_docs_e6d4c3ef], a0.this$, a1.this$, a2));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum TermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_ffc1634d], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::DocsAndPositionsEnum TermsEnum::docsAndPositions(const ::org::apache::lucene::util::Bits & a0, const ::org::apache::lucene::index::DocsAndPositionsEnum & a1, jint a2) const
        {
          return ::org::apache::lucene::index::DocsAndPositionsEnum(env->callObjectMethod(this$, mids$[mid_docsAndPositions_b5d9c11b], a0.this$, a1.this$, a2));
        }

        jlong TermsEnum::ord() const
        {
          return env->callLongMethod(this$, mids$[mid_ord_54c6a17a]);
        }

        ::org::apache::lucene::index::TermsEnum$SeekStatus TermsEnum::seekCeil(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return ::org::apache::lucene::index::TermsEnum$SeekStatus(env->callObjectMethod(this$, mids$[mid_seekCeil_fa9d72c4], a0.this$));
        }

        jboolean TermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_seekExact_7bc03dc8], a0.this$);
        }

        void TermsEnum::seekExact(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_0ee6df2f], a0);
        }

        void TermsEnum::seekExact(const ::org::apache::lucene::util::BytesRef & a0, const ::org::apache::lucene::index::TermState & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_seekExact_fe46da51], a0.this$, a1.this$);
        }

        ::org::apache::lucene::util::BytesRef TermsEnum::term() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_term_4ae19461]));
        }

        ::org::apache::lucene::index::TermState TermsEnum::termState() const
        {
          return ::org::apache::lucene::index::TermState(env->callObjectMethod(this$, mids$[mid_termState_3e41fede]));
        }

        jlong TermsEnum::totalTermFreq() const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_54c6a17a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_TermsEnum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermsEnum_attributes(t_TermsEnum *self);
        static PyObject *t_TermsEnum_docFreq(t_TermsEnum *self);
        static PyObject *t_TermsEnum_docs(t_TermsEnum *self, PyObject *args);
        static PyObject *t_TermsEnum_docsAndPositions(t_TermsEnum *self, PyObject *args);
        static PyObject *t_TermsEnum_ord(t_TermsEnum *self);
        static PyObject *t_TermsEnum_seekCeil(t_TermsEnum *self, PyObject *arg);
        static PyObject *t_TermsEnum_seekExact(t_TermsEnum *self, PyObject *args);
        static PyObject *t_TermsEnum_term(t_TermsEnum *self);
        static PyObject *t_TermsEnum_termState(t_TermsEnum *self);
        static PyObject *t_TermsEnum_totalTermFreq(t_TermsEnum *self);

        static PyMethodDef t_TermsEnum__methods_[] = {
          DECLARE_METHOD(t_TermsEnum, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermsEnum, attributes, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, docFreq, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, docs, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum, docsAndPositions, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum, ord, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, seekCeil, METH_O),
          DECLARE_METHOD(t_TermsEnum, seekExact, METH_VARARGS),
          DECLARE_METHOD(t_TermsEnum, term, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, termState, METH_NOARGS),
          DECLARE_METHOD(t_TermsEnum, totalTermFreq, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermsEnum, t_TermsEnum, ::java::lang::Object, TermsEnum, abstract_init, 0, 0, 0, 0, 0);

        void t_TermsEnum::install(PyObject *module)
        {
          installType(&PY_TYPE(TermsEnum), module, "TermsEnum", 0);
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "SeekStatus", make_descriptor(&PY_TYPE(TermsEnum$SeekStatus)));
        }

        void t_TermsEnum::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "class_", make_descriptor(TermsEnum::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "wrapfn_", make_descriptor(t_TermsEnum::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          env->getClass(TermsEnum::initializeClass);
          PyDict_SetItemString(PY_TYPE(TermsEnum).tp_dict, "EMPTY", make_descriptor(t_TermsEnum::wrap_Object(*TermsEnum::EMPTY)));
        }

        static PyObject *t_TermsEnum_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermsEnum::initializeClass, 1)))
            return NULL;
          return t_TermsEnum::wrap_Object(TermsEnum(((t_TermsEnum *) arg)->object.this$));
        }
        static PyObject *t_TermsEnum_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermsEnum::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermsEnum_attributes(t_TermsEnum *self)
        {
          ::org::apache::lucene::util::AttributeSource result((jobject) NULL);
          OBJ_CALL(result = self->object.attributes());
          return ::org::apache::lucene::util::t_AttributeSource::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_docFreq(t_TermsEnum *self)
        {
          jint result;
          OBJ_CALL(result = self->object.docFreq());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TermsEnum_docs(t_TermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.docs(a0, a1));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsEnum a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::index::DocsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsEnum::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.docs(a0, a1, a2));
                return ::org::apache::lucene::index::t_DocsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "docs", args);
          return NULL;
        }

        static PyObject *t_TermsEnum_docsAndPositions(t_TermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.docsAndPositions(a0, a1));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
            break;
           case 3:
            {
              ::org::apache::lucene::util::Bits a0((jobject) NULL);
              ::org::apache::lucene::index::DocsAndPositionsEnum a1((jobject) NULL);
              jint a2;
              ::org::apache::lucene::index::DocsAndPositionsEnum result((jobject) NULL);

              if (!parseArgs(args, "kkI", ::org::apache::lucene::util::Bits::initializeClass, ::org::apache::lucene::index::DocsAndPositionsEnum::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.docsAndPositions(a0, a1, a2));
                return ::org::apache::lucene::index::t_DocsAndPositionsEnum::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "docsAndPositions", args);
          return NULL;
        }

        static PyObject *t_TermsEnum_ord(t_TermsEnum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.ord());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_TermsEnum_seekCeil(t_TermsEnum *self, PyObject *arg)
        {
          ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
          ::org::apache::lucene::index::TermsEnum$SeekStatus result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.seekCeil(a0));
            return ::org::apache::lucene::index::t_TermsEnum$SeekStatus::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "seekCeil", arg);
          return NULL;
        }

        static PyObject *t_TermsEnum_seekExact(t_TermsEnum *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "k", ::org::apache::lucene::util::BytesRef::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.seekExact(a0));
                Py_RETURN_BOOL(result);
              }
            }
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.seekExact(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::util::BytesRef a0((jobject) NULL);
              ::org::apache::lucene::index::TermState a1((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::index::TermState::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.seekExact(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "seekExact", args);
          return NULL;
        }

        static PyObject *t_TermsEnum_term(t_TermsEnum *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.term());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_termState(t_TermsEnum *self)
        {
          ::org::apache::lucene::index::TermState result((jobject) NULL);
          OBJ_CALL(result = self->object.termState());
          return ::org::apache::lucene::index::t_TermState::wrap_Object(result);
        }

        static PyObject *t_TermsEnum_totalTermFreq(t_TermsEnum *self)
        {
          jlong result;
          OBJ_CALL(result = self->object.totalTermFreq());
          return PyLong_FromLongLong((PY_LONG_LONG) result);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/expressions/js/JavascriptParser$multiplicative_return.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {

          ::java::lang::Class *JavascriptParser$multiplicative_return::class$ = NULL;
          jmethodID *JavascriptParser$multiplicative_return::mids$ = NULL;
          bool JavascriptParser$multiplicative_return::live$ = false;

          jclass JavascriptParser$multiplicative_return::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/expressions/js/JavascriptParser$multiplicative_return");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          JavascriptParser$multiplicative_return::JavascriptParser$multiplicative_return() : ::org::antlr::runtime::ParserRuleReturnScope(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace expressions {
        namespace js {
          static PyObject *t_JavascriptParser$multiplicative_return_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_JavascriptParser$multiplicative_return_instance_(PyTypeObject *type, PyObject *arg);
          static int t_JavascriptParser$multiplicative_return_init_(t_JavascriptParser$multiplicative_return *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_JavascriptParser$multiplicative_return__methods_[] = {
            DECLARE_METHOD(t_JavascriptParser$multiplicative_return, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_JavascriptParser$multiplicative_return, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(JavascriptParser$multiplicative_return, t_JavascriptParser$multiplicative_return, ::org::antlr::runtime::ParserRuleReturnScope, JavascriptParser$multiplicative_return, t_JavascriptParser$multiplicative_return_init_, 0, 0, 0, 0, 0);

          void t_JavascriptParser$multiplicative_return::install(PyObject *module)
          {
            installType(&PY_TYPE(JavascriptParser$multiplicative_return), module, "JavascriptParser$multiplicative_return", 0);
          }

          void t_JavascriptParser$multiplicative_return::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(JavascriptParser$multiplicative_return).tp_dict, "class_", make_descriptor(JavascriptParser$multiplicative_return::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$multiplicative_return).tp_dict, "wrapfn_", make_descriptor(t_JavascriptParser$multiplicative_return::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(JavascriptParser$multiplicative_return).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_JavascriptParser$multiplicative_return_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, JavascriptParser$multiplicative_return::initializeClass, 1)))
              return NULL;
            return t_JavascriptParser$multiplicative_return::wrap_Object(JavascriptParser$multiplicative_return(((t_JavascriptParser$multiplicative_return *) arg)->object.this$));
          }
          static PyObject *t_JavascriptParser$multiplicative_return_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, JavascriptParser$multiplicative_return::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_JavascriptParser$multiplicative_return_init_(t_JavascriptParser$multiplicative_return *self, PyObject *args, PyObject *kwds)
          {
            JavascriptParser$multiplicative_return object((jobject) NULL);

            INT_CALL(object = JavascriptParser$multiplicative_return());
            self->object = object;

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *Dictionary::class$ = NULL;
          jmethodID *Dictionary::mids$ = NULL;
          bool Dictionary::live$ = false;

          jclass Dictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/Dictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::search::suggest::InputIterator Dictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Dictionary_getEntryIterator(t_Dictionary *self);
          static PyObject *t_Dictionary_get__entryIterator(t_Dictionary *self, void *data);
          static PyGetSetDef t_Dictionary__fields_[] = {
            DECLARE_GET_FIELD(t_Dictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Dictionary__methods_[] = {
            DECLARE_METHOD(t_Dictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Dictionary, t_Dictionary, ::java::lang::Object, Dictionary, abstract_init, 0, 0, t_Dictionary__fields_, 0, 0);

          void t_Dictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(Dictionary), module, "Dictionary", 0);
          }

          void t_Dictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "class_", make_descriptor(Dictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "wrapfn_", make_descriptor(t_Dictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Dictionary::initializeClass, 1)))
              return NULL;
            return t_Dictionary::wrap_Object(Dictionary(((t_Dictionary *) arg)->object.this$));
          }
          static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Dictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_Dictionary_getEntryIterator(t_Dictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_Dictionary_get__entryIterator(t_Dictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/BlockTreeTermsReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/Terms.h"
#include "org/apache/lucene/index/FieldInfos.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/codecs/PostingsReaderBase.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *BlockTreeTermsReader::class$ = NULL;
          jmethodID *BlockTreeTermsReader::mids$ = NULL;
          bool BlockTreeTermsReader::live$ = false;

          jclass BlockTreeTermsReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/BlockTreeTermsReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_72076db5] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Lorg/apache/lucene/index/FieldInfos;Lorg/apache/lucene/index/SegmentInfo;Lorg/apache/lucene/codecs/PostingsReaderBase;Lorg/apache/lucene/store/IOContext;Ljava/lang/String;I)V");
              mids$[mid_checkIntegrity_54c6a166] = env->getMethodID(cls, "checkIntegrity", "()V");
              mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
              mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
              mids$[mid_terms_ee262ab4] = env->getMethodID(cls, "terms", "(Ljava/lang/String;)Lorg/apache/lucene/index/Terms;");
              mids$[mid_readHeader_0441f0ad] = env->getMethodID(cls, "readHeader", "(Lorg/apache/lucene/store/IndexInput;)I");
              mids$[mid_readIndexHeader_0441f0ad] = env->getMethodID(cls, "readIndexHeader", "(Lorg/apache/lucene/store/IndexInput;)I");
              mids$[mid_seekDir_ec9e0593] = env->getMethodID(cls, "seekDir", "(Lorg/apache/lucene/store/IndexInput;J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          BlockTreeTermsReader::BlockTreeTermsReader(const ::org::apache::lucene::store::Directory & a0, const ::org::apache::lucene::index::FieldInfos & a1, const ::org::apache::lucene::index::SegmentInfo & a2, const ::org::apache::lucene::codecs::PostingsReaderBase & a3, const ::org::apache::lucene::store::IOContext & a4, const ::java::lang::String & a5, jint a6) : ::org::apache::lucene::codecs::FieldsProducer(env->newObject(initializeClass, &mids$, mid_init$_72076db5, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6)) {}

          void BlockTreeTermsReader::checkIntegrity() const
          {
            env->callVoidMethod(this$, mids$[mid_checkIntegrity_54c6a166]);
          }

          void BlockTreeTermsReader::close() const
          {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
          }

          ::java::util::Iterator BlockTreeTermsReader::iterator() const
          {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
          }

          jlong BlockTreeTermsReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jint BlockTreeTermsReader::size() const
          {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
          }

          ::org::apache::lucene::index::Terms BlockTreeTermsReader::terms(const ::java::lang::String & a0) const
          {
            return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_terms_ee262ab4], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_BlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_BlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_BlockTreeTermsReader_init_(t_BlockTreeTermsReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_BlockTreeTermsReader_checkIntegrity(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_close(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_iterator(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_ramBytesUsed(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_size(t_BlockTreeTermsReader *self, PyObject *args);
          static PyObject *t_BlockTreeTermsReader_terms(t_BlockTreeTermsReader *self, PyObject *args);

          static PyMethodDef t_BlockTreeTermsReader__methods_[] = {
            DECLARE_METHOD(t_BlockTreeTermsReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BlockTreeTermsReader, checkIntegrity, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, close, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, size, METH_VARARGS),
            DECLARE_METHOD(t_BlockTreeTermsReader, terms, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(BlockTreeTermsReader, t_BlockTreeTermsReader, ::org::apache::lucene::codecs::FieldsProducer, BlockTreeTermsReader, t_BlockTreeTermsReader_init_, ((PyObject *(*)(t_BlockTreeTermsReader *)) get_iterator< t_BlockTreeTermsReader >), 0, 0, 0, 0);

          void t_BlockTreeTermsReader::install(PyObject *module)
          {
            installType(&PY_TYPE(BlockTreeTermsReader), module, "BlockTreeTermsReader", 0);
          }

          void t_BlockTreeTermsReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsReader).tp_dict, "class_", make_descriptor(BlockTreeTermsReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsReader).tp_dict, "wrapfn_", make_descriptor(t_BlockTreeTermsReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BlockTreeTermsReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_BlockTreeTermsReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, BlockTreeTermsReader::initializeClass, 1)))
              return NULL;
            return t_BlockTreeTermsReader::wrap_Object(BlockTreeTermsReader(((t_BlockTreeTermsReader *) arg)->object.this$));
          }
          static PyObject *t_BlockTreeTermsReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, BlockTreeTermsReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_BlockTreeTermsReader_init_(t_BlockTreeTermsReader *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::org::apache::lucene::index::FieldInfos a1((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo a2((jobject) NULL);
            ::org::apache::lucene::codecs::PostingsReaderBase a3((jobject) NULL);
            ::org::apache::lucene::store::IOContext a4((jobject) NULL);
            ::java::lang::String a5((jobject) NULL);
            jint a6;
            BlockTreeTermsReader object((jobject) NULL);

            if (!parseArgs(args, "kkkkksI", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::index::FieldInfos::initializeClass, ::org::apache::lucene::index::SegmentInfo::initializeClass, ::org::apache::lucene::codecs::PostingsReaderBase::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
            {
              INT_CALL(object = BlockTreeTermsReader(a0, a1, a2, a3, a4, a5, a6));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_BlockTreeTermsReader_checkIntegrity(t_BlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.checkIntegrity());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "checkIntegrity", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_close(t_BlockTreeTermsReader *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.close());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "close", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_iterator(t_BlockTreeTermsReader *self, PyObject *args)
          {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::java::util::t_Iterator::wrap_Object(result, &::java::lang::PY_TYPE(String));
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_ramBytesUsed(t_BlockTreeTermsReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_size(t_BlockTreeTermsReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_BlockTreeTermsReader_terms(t_BlockTreeTermsReader *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::index::Terms result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = self->object.terms(a0));
              return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(BlockTreeTermsReader), (PyObject *) self, "terms", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$DoubleComparator.h"
#include "java/io/IOException.h"
#include "java/lang/Double.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/FieldCache$Parser.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$DoubleComparator::class$ = NULL;
        jmethodID *FieldComparator$DoubleComparator::mids$ = NULL;
        bool FieldComparator$DoubleComparator::live$ = false;

        jclass FieldComparator$DoubleComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$DoubleComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_bf59efcc] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;Lorg/apache/lucene/search/FieldCache$Parser;Ljava/lang/Double;)V");
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_8baed06c] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Double;)V");
            mids$[mid_value_a0bf0c9f] = env->getMethodID(cls, "value", "(I)Ljava/lang/Double;");
            mids$[mid_getDoubleValues_9f6b3702] = env->getMethodID(cls, "getDoubleValues", "(Lorg/apache/lucene/index/AtomicReaderContext;Ljava/lang/String;)Lorg/apache/lucene/search/FieldCache$Doubles;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        FieldComparator$DoubleComparator::FieldComparator$DoubleComparator(jint a0, const ::java::lang::String & a1, const ::org::apache::lucene::search::FieldCache$Parser & a2, const ::java::lang::Double & a3) : ::org::apache::lucene::search::FieldComparator$NumericComparator(env->newObject(initializeClass, &mids$, mid_init$_bf59efcc, a0, a1.this$, a2.this$, a3.this$)) {}

        jint FieldComparator$DoubleComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$DoubleComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$DoubleComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$DoubleComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$DoubleComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$DoubleComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$DoubleComparator::setTopValue(const ::java::lang::Double & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_8baed06c], a0.this$);
        }

        ::java::lang::Double FieldComparator$DoubleComparator::value(jint a0) const
        {
          return ::java::lang::Double(env->callObjectMethod(this$, mids$[mid_value_a0bf0c9f], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$DoubleComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DoubleComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$DoubleComparator_of_(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static int t_FieldComparator$DoubleComparator_init_(t_FieldComparator$DoubleComparator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FieldComparator$DoubleComparator_compare(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_compareBottom(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_compareTop(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_copy(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_setBottom(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_setNextReader(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_setTopValue(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$DoubleComparator_value(t_FieldComparator$DoubleComparator *self, PyObject *args);
        static int t_FieldComparator$DoubleComparator_set__bottom(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DoubleComparator_set__nextReader(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$DoubleComparator_set__topValue(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$DoubleComparator_get__parameters_(t_FieldComparator$DoubleComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$DoubleComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$DoubleComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$DoubleComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$DoubleComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$DoubleComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$DoubleComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$DoubleComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$DoubleComparator, t_FieldComparator$DoubleComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$DoubleComparator, t_FieldComparator$DoubleComparator_init_, 0, 0, t_FieldComparator$DoubleComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$DoubleComparator::wrap_Object(const FieldComparator$DoubleComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DoubleComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DoubleComparator *self = (t_FieldComparator$DoubleComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$DoubleComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$DoubleComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$DoubleComparator *self = (t_FieldComparator$DoubleComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$DoubleComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$DoubleComparator), module, "FieldComparator$DoubleComparator", 0);
        }

        void t_FieldComparator$DoubleComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$DoubleComparator).tp_dict, "class_", make_descriptor(FieldComparator$DoubleComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DoubleComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$DoubleComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$DoubleComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$DoubleComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$DoubleComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$DoubleComparator::wrap_Object(FieldComparator$DoubleComparator(((t_FieldComparator$DoubleComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$DoubleComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$DoubleComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$DoubleComparator_of_(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_FieldComparator$DoubleComparator_init_(t_FieldComparator$DoubleComparator *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::search::FieldCache$Parser a2((jobject) NULL);
          ::java::lang::Double a3((jobject) NULL);
          FieldComparator$DoubleComparator object((jobject) NULL);

          if (!parseArgs(args, "IskO", ::org::apache::lucene::search::FieldCache$Parser::initializeClass, &::java::lang::PY_TYPE(Double), &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = FieldComparator$DoubleComparator(a0, a1, a2, a3));
            self->object = object;
            self->parameters[0] = &::java::lang::PY_TYPE(Double);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_FieldComparator$DoubleComparator_compare(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_compareBottom(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_compareTop(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_copy(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_setBottom(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_setNextReader(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Double));
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_setTopValue(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          ::java::lang::Double a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Double), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$DoubleComparator_value(t_FieldComparator$DoubleComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Double result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Double::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$DoubleComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$DoubleComparator_get__parameters_(t_FieldComparator$DoubleComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$DoubleComparator_set__bottom(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$DoubleComparator_set__nextReader(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$DoubleComparator_set__topValue(t_FieldComparator$DoubleComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Double value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Double), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/commongrams/CommonGramsFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/ResourceLoader.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "org/apache/lucene/analysis/util/ResourceLoaderAware.h"
#include "org/apache/lucene/analysis/TokenFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {

          ::java::lang::Class *CommonGramsFilterFactory::class$ = NULL;
          jmethodID *CommonGramsFilterFactory::mids$ = NULL;
          bool CommonGramsFilterFactory::live$ = false;

          jclass CommonGramsFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/commongrams/CommonGramsFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_2969f76d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/TokenFilter;");
              mids$[mid_getCommonWords_d2d3505c] = env->getMethodID(cls, "getCommonWords", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_inform_d6a4bc97] = env->getMethodID(cls, "inform", "(Lorg/apache/lucene/analysis/util/ResourceLoader;)V");
              mids$[mid_isIgnoreCase_54c6a16a] = env->getMethodID(cls, "isIgnoreCase", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CommonGramsFilterFactory::CommonGramsFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::TokenFilter CommonGramsFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::TokenFilter(env->callObjectMethod(this$, mids$[mid_create_2969f76d], a0.this$));
          }

          ::org::apache::lucene::analysis::util::CharArraySet CommonGramsFilterFactory::getCommonWords() const
          {
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callObjectMethod(this$, mids$[mid_getCommonWords_d2d3505c]));
          }

          void CommonGramsFilterFactory::inform(const ::org::apache::lucene::analysis::util::ResourceLoader & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_inform_d6a4bc97], a0.this$);
          }

          jboolean CommonGramsFilterFactory::isIgnoreCase() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isIgnoreCase_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace commongrams {
          static PyObject *t_CommonGramsFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CommonGramsFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CommonGramsFilterFactory_init_(t_CommonGramsFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CommonGramsFilterFactory_create(t_CommonGramsFilterFactory *self, PyObject *args);
          static PyObject *t_CommonGramsFilterFactory_getCommonWords(t_CommonGramsFilterFactory *self);
          static PyObject *t_CommonGramsFilterFactory_inform(t_CommonGramsFilterFactory *self, PyObject *arg);
          static PyObject *t_CommonGramsFilterFactory_isIgnoreCase(t_CommonGramsFilterFactory *self);
          static PyObject *t_CommonGramsFilterFactory_get__commonWords(t_CommonGramsFilterFactory *self, void *data);
          static PyObject *t_CommonGramsFilterFactory_get__ignoreCase(t_CommonGramsFilterFactory *self, void *data);
          static PyGetSetDef t_CommonGramsFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_CommonGramsFilterFactory, commonWords),
            DECLARE_GET_FIELD(t_CommonGramsFilterFactory, ignoreCase),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CommonGramsFilterFactory__methods_[] = {
            DECLARE_METHOD(t_CommonGramsFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, getCommonWords, METH_NOARGS),
            DECLARE_METHOD(t_CommonGramsFilterFactory, inform, METH_O),
            DECLARE_METHOD(t_CommonGramsFilterFactory, isIgnoreCase, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CommonGramsFilterFactory, t_CommonGramsFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, CommonGramsFilterFactory, t_CommonGramsFilterFactory_init_, 0, 0, t_CommonGramsFilterFactory__fields_, 0, 0);

          void t_CommonGramsFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(CommonGramsFilterFactory), module, "CommonGramsFilterFactory", 0);
          }

          void t_CommonGramsFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CommonGramsFilterFactory).tp_dict, "class_", make_descriptor(CommonGramsFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_CommonGramsFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CommonGramsFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_CommonGramsFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CommonGramsFilterFactory::initializeClass, 1)))
              return NULL;
            return t_CommonGramsFilterFactory::wrap_Object(CommonGramsFilterFactory(((t_CommonGramsFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_CommonGramsFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CommonGramsFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CommonGramsFilterFactory_init_(t_CommonGramsFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            CommonGramsFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = CommonGramsFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_CommonGramsFilterFactory_create(t_CommonGramsFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::t_TokenFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(CommonGramsFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_CommonGramsFilterFactory_getCommonWords(t_CommonGramsFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = self->object.getCommonWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_CommonGramsFilterFactory_inform(t_CommonGramsFilterFactory *self, PyObject *arg)
          {
            ::org::apache::lucene::analysis::util::ResourceLoader a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::analysis::util::ResourceLoader::initializeClass, &a0))
            {
              OBJ_CALL(self->object.inform(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "inform", arg);
            return NULL;
          }

          static PyObject *t_CommonGramsFilterFactory_isIgnoreCase(t_CommonGramsFilterFactory *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isIgnoreCase());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_CommonGramsFilterFactory_get__commonWords(t_CommonGramsFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getCommonWords());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }

          static PyObject *t_CommonGramsFilterFactory_get__ignoreCase(t_CommonGramsFilterFactory *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isIgnoreCase());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/pt/PortugueseMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {

          ::java::lang::Class *PortugueseMinimalStemmer::class$ = NULL;
          jmethodID *PortugueseMinimalStemmer::mids$ = NULL;
          bool PortugueseMinimalStemmer::live$ = false;

          jclass PortugueseMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/pt/PortugueseMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PortugueseMinimalStemmer::PortugueseMinimalStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint PortugueseMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace pt {
          static PyObject *t_PortugueseMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PortugueseMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PortugueseMinimalStemmer_init_(t_PortugueseMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PortugueseMinimalStemmer_stem(t_PortugueseMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_PortugueseMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_PortugueseMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PortugueseMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PortugueseMinimalStemmer, t_PortugueseMinimalStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, PortugueseMinimalStemmer, t_PortugueseMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_PortugueseMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(PortugueseMinimalStemmer), module, "PortugueseMinimalStemmer", 0);
          }

          void t_PortugueseMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemmer).tp_dict, "class_", make_descriptor(PortugueseMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_PortugueseMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PortugueseMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PortugueseMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PortugueseMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_PortugueseMinimalStemmer::wrap_Object(PortugueseMinimalStemmer(((t_PortugueseMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_PortugueseMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PortugueseMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PortugueseMinimalStemmer_init_(t_PortugueseMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            PortugueseMinimalStemmer object((jobject) NULL);

            INT_CALL(object = PortugueseMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_PortugueseMinimalStemmer_stem(t_PortugueseMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/mutable/MutableValueFloat.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {

          ::java::lang::Class *MutableValueFloat::class$ = NULL;
          jmethodID *MutableValueFloat::mids$ = NULL;
          jfieldID *MutableValueFloat::fids$ = NULL;
          bool MutableValueFloat::live$ = false;

          jclass MutableValueFloat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/mutable/MutableValueFloat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_compareSameType_290588f1] = env->getMethodID(cls, "compareSameType", "(Ljava/lang/Object;)I");
              mids$[mid_copy_d590ce7c] = env->getMethodID(cls, "copy", "(Lorg/apache/lucene/util/mutable/MutableValue;)V");
              mids$[mid_duplicate_15ab3811] = env->getMethodID(cls, "duplicate", "()Lorg/apache/lucene/util/mutable/MutableValue;");
              mids$[mid_equalsSameType_290588e2] = env->getMethodID(cls, "equalsSameType", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_toObject_846352c3] = env->getMethodID(cls, "toObject", "()Ljava/lang/Object;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_value] = env->getFieldID(cls, "value", "F");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          MutableValueFloat::MutableValueFloat() : ::org::apache::lucene::util::mutable$::MutableValue(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint MutableValueFloat::compareSameType(const ::java::lang::Object & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareSameType_290588f1], a0.this$);
          }

          void MutableValueFloat::copy(const ::org::apache::lucene::util::mutable$::MutableValue & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_copy_d590ce7c], a0.this$);
          }

          ::org::apache::lucene::util::mutable$::MutableValue MutableValueFloat::duplicate() const
          {
            return ::org::apache::lucene::util::mutable$::MutableValue(env->callObjectMethod(this$, mids$[mid_duplicate_15ab3811]));
          }

          jboolean MutableValueFloat::equalsSameType(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equalsSameType_290588e2], a0.this$);
          }

          jint MutableValueFloat::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::lang::Object MutableValueFloat::toObject() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_toObject_846352c3]));
          }

          jfloat MutableValueFloat::_get_value() const
          {
            return env->getFloatField(this$, fids$[fid_value]);
          }

          void MutableValueFloat::_set_value(jfloat a0) const
          {
            env->setFloatField(this$, fids$[fid_value], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace mutable$ {
          static PyObject *t_MutableValueFloat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MutableValueFloat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_MutableValueFloat_init_(t_MutableValueFloat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_MutableValueFloat_compareSameType(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_copy(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_duplicate(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_equalsSameType(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_hashCode(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_toObject(t_MutableValueFloat *self, PyObject *args);
          static PyObject *t_MutableValueFloat_get__value(t_MutableValueFloat *self, void *data);
          static int t_MutableValueFloat_set__value(t_MutableValueFloat *self, PyObject *arg, void *data);

          static PyGetSetDef t_MutableValueFloat__fields_[] = {
            DECLARE_GETSET_FIELD(t_MutableValueFloat, value),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_MutableValueFloat__methods_[] = {
            DECLARE_METHOD(t_MutableValueFloat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueFloat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MutableValueFloat, compareSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, copy, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, duplicate, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, equalsSameType, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_MutableValueFloat, toObject, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MutableValueFloat, t_MutableValueFloat, ::org::apache::lucene::util::mutable$::MutableValue, MutableValueFloat, t_MutableValueFloat_init_, 0, 0, t_MutableValueFloat__fields_, 0, 0);

          void t_MutableValueFloat::install(PyObject *module)
          {
            installType(&PY_TYPE(MutableValueFloat), module, "MutableValueFloat", 0);
          }

          void t_MutableValueFloat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MutableValueFloat).tp_dict, "class_", make_descriptor(MutableValueFloat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MutableValueFloat).tp_dict, "wrapfn_", make_descriptor(t_MutableValueFloat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MutableValueFloat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MutableValueFloat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MutableValueFloat::initializeClass, 1)))
              return NULL;
            return t_MutableValueFloat::wrap_Object(MutableValueFloat(((t_MutableValueFloat *) arg)->object.this$));
          }
          static PyObject *t_MutableValueFloat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MutableValueFloat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_MutableValueFloat_init_(t_MutableValueFloat *self, PyObject *args, PyObject *kwds)
          {
            MutableValueFloat object((jobject) NULL);

            INT_CALL(object = MutableValueFloat());
            self->object = object;

            return 0;
          }

          static PyObject *t_MutableValueFloat_compareSameType(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.compareSameType(a0));
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "compareSameType", args, 2);
          }

          static PyObject *t_MutableValueFloat_copy(t_MutableValueFloat *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue a0((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::util::mutable$::MutableValue::initializeClass, &a0))
            {
              OBJ_CALL(self->object.copy(a0));
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "copy", args, 2);
          }

          static PyObject *t_MutableValueFloat_duplicate(t_MutableValueFloat *self, PyObject *args)
          {
            ::org::apache::lucene::util::mutable$::MutableValue result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.duplicate());
              return ::org::apache::lucene::util::mutable$::t_MutableValue::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "duplicate", args, 2);
          }

          static PyObject *t_MutableValueFloat_equalsSameType(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equalsSameType(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "equalsSameType", args, 2);
          }

          static PyObject *t_MutableValueFloat_hashCode(t_MutableValueFloat *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_MutableValueFloat_toObject(t_MutableValueFloat *self, PyObject *args)
          {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toObject());
              return ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(MutableValueFloat), (PyObject *) self, "toObject", args, 2);
          }

          static PyObject *t_MutableValueFloat_get__value(t_MutableValueFloat *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object._get_value());
            return PyFloat_FromDouble((double) value);
          }
          static int t_MutableValueFloat_set__value(t_MutableValueFloat *self, PyObject *arg, void *data)
          {
            jfloat value;
            if (!parseArg(arg, "F", &value))
            {
              INT_CALL(self->object._set_value(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *TruncateTokenFilter::class$ = NULL;
          jmethodID *TruncateTokenFilter::mids$ = NULL;
          bool TruncateTokenFilter::live$ = false;

          jclass TruncateTokenFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/TruncateTokenFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TruncateTokenFilter::TruncateTokenFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          jboolean TruncateTokenFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_TruncateTokenFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TruncateTokenFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TruncateTokenFilter_init_(t_TruncateTokenFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TruncateTokenFilter_incrementToken(t_TruncateTokenFilter *self, PyObject *args);

          static PyMethodDef t_TruncateTokenFilter__methods_[] = {
            DECLARE_METHOD(t_TruncateTokenFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TruncateTokenFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TruncateTokenFilter, t_TruncateTokenFilter, ::org::apache::lucene::analysis::TokenFilter, TruncateTokenFilter, t_TruncateTokenFilter_init_, 0, 0, 0, 0, 0);

          void t_TruncateTokenFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TruncateTokenFilter), module, "TruncateTokenFilter", 0);
          }

          void t_TruncateTokenFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilter).tp_dict, "class_", make_descriptor(TruncateTokenFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilter).tp_dict, "wrapfn_", make_descriptor(t_TruncateTokenFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TruncateTokenFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TruncateTokenFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TruncateTokenFilter::initializeClass, 1)))
              return NULL;
            return t_TruncateTokenFilter::wrap_Object(TruncateTokenFilter(((t_TruncateTokenFilter *) arg)->object.this$));
          }
          static PyObject *t_TruncateTokenFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TruncateTokenFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TruncateTokenFilter_init_(t_TruncateTokenFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            jint a1;
            TruncateTokenFilter object((jobject) NULL);

            if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              INT_CALL(object = TruncateTokenFilter(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TruncateTokenFilter_incrementToken(t_TruncateTokenFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TruncateTokenFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractMap.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/util/Map$Entry.h"
#include "JArray.h"

namespace java {
  namespace util {

    ::java::lang::Class *AbstractMap::class$ = NULL;
    jmethodID *AbstractMap::mids$ = NULL;
    bool AbstractMap::live$ = false;

    jclass AbstractMap::initializeClass(bool getOnly)
    {
      if (getOnly)
        return (jclass) (live$ ? class$->this$ : NULL);
      if (class$ == NULL)
      {
        jclass cls = (jclass) env->findClass("java/util/AbstractMap");

        mids$ = new jmethodID[max_mid];
        mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
        mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
        mids$[mid_containsValue_290588e2] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
        mids$[mid_entrySet_03e99967] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
        mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
        mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
        mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
        mids$[mid_keySet_03e99967] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
        mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_putAll_4c9e2b1c] = env->getMethodID(cls, "putAll", "(Ljava/util/Map;)V");
        mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
        mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
        mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
        mids$[mid_values_2d2d7de4] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");
        mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

        class$ = (::java::lang::Class *) new JObject(cls);
        live$ = true;
      }
      return (jclass) class$->this$;
    }

    void AbstractMap::clear() const
    {
      env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
    }

    jboolean AbstractMap::containsKey(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
    }

    jboolean AbstractMap::containsValue(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_containsValue_290588e2], a0.this$);
    }

    ::java::util::Set AbstractMap::entrySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_03e99967]));
    }

    jboolean AbstractMap::equals(const ::java::lang::Object & a0) const
    {
      return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
    }

    ::java::lang::Object AbstractMap::get(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
    }

    jint AbstractMap::hashCode() const
    {
      return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
    }

    jboolean AbstractMap::isEmpty() const
    {
      return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
    }

    ::java::util::Set AbstractMap::keySet() const
    {
      return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_03e99967]));
    }

    ::java::lang::Object AbstractMap::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
    }

    void AbstractMap::putAll(const ::java::util::Map & a0) const
    {
      env->callVoidMethod(this$, mids$[mid_putAll_4c9e2b1c], a0.this$);
    }

    ::java::lang::Object AbstractMap::remove(const ::java::lang::Object & a0) const
    {
      return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
    }

    jint AbstractMap::size() const
    {
      return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
    }

    ::java::lang::String AbstractMap::toString() const
    {
      return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
    }

    ::java::util::Collection AbstractMap::values() const
    {
      return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_2d2d7de4]));
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
  namespace util {
    static PyObject *t_AbstractMap_cast_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractMap_instance_(PyTypeObject *type, PyObject *arg);
    static PyObject *t_AbstractMap_of_(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_clear(t_AbstractMap *self);
    static PyObject *t_AbstractMap_containsKey(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_containsValue(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_entrySet(t_AbstractMap *self);
    static PyObject *t_AbstractMap_equals(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_get(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_hashCode(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_isEmpty(t_AbstractMap *self);
    static PyObject *t_AbstractMap_keySet(t_AbstractMap *self);
    static PyObject *t_AbstractMap_put(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_putAll(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_remove(t_AbstractMap *self, PyObject *arg);
    static PyObject *t_AbstractMap_size(t_AbstractMap *self);
    static PyObject *t_AbstractMap_toString(t_AbstractMap *self, PyObject *args);
    static PyObject *t_AbstractMap_values(t_AbstractMap *self);
    static PyObject *t_AbstractMap_get__empty(t_AbstractMap *self, void *data);
    static PyObject *t_AbstractMap_get__parameters_(t_AbstractMap *self, void *data);
    static PyGetSetDef t_AbstractMap__fields_[] = {
      DECLARE_GET_FIELD(t_AbstractMap, empty),
      DECLARE_GET_FIELD(t_AbstractMap, parameters_),
      { NULL, NULL, NULL, NULL, NULL }
    };

    static PyMethodDef t_AbstractMap__methods_[] = {
      DECLARE_METHOD(t_AbstractMap, cast_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractMap, instance_, METH_O | METH_CLASS),
      DECLARE_METHOD(t_AbstractMap, of_, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, clear, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, containsKey, METH_O),
      DECLARE_METHOD(t_AbstractMap, containsValue, METH_O),
      DECLARE_METHOD(t_AbstractMap, entrySet, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, equals, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, get, METH_O),
      DECLARE_METHOD(t_AbstractMap, hashCode, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, isEmpty, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, keySet, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, put, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, putAll, METH_O),
      DECLARE_METHOD(t_AbstractMap, remove, METH_O),
      DECLARE_METHOD(t_AbstractMap, size, METH_NOARGS),
      DECLARE_METHOD(t_AbstractMap, toString, METH_VARARGS),
      DECLARE_METHOD(t_AbstractMap, values, METH_NOARGS),
      { NULL, NULL, 0, NULL }
    };

    DECLARE_TYPE(AbstractMap, t_AbstractMap, ::java::lang::Object, AbstractMap, abstract_init, 0, 0, t_AbstractMap__fields_, 0, 0);
    PyObject *t_AbstractMap::wrap_Object(const AbstractMap& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_AbstractMap::wrap_Object(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractMap *self = (t_AbstractMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    PyObject *t_AbstractMap::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
    {
      PyObject *obj = t_AbstractMap::wrap_jobject(object);
      if (obj != NULL && obj != Py_None)
      {
        t_AbstractMap *self = (t_AbstractMap *) obj;
        self->parameters[0] = p0;
        self->parameters[1] = p1;
      }
      return obj;
    }

    void t_AbstractMap::install(PyObject *module)
    {
      installType(&PY_TYPE(AbstractMap), module, "AbstractMap", 0);
    }

    void t_AbstractMap::initialize(PyObject *module)
    {
      PyDict_SetItemString(PY_TYPE(AbstractMap).tp_dict, "class_", make_descriptor(AbstractMap::initializeClass, 1));
      PyDict_SetItemString(PY_TYPE(AbstractMap).tp_dict, "wrapfn_", make_descriptor(t_AbstractMap::wrap_jobject));
      PyDict_SetItemString(PY_TYPE(AbstractMap).tp_dict, "boxfn_", make_descriptor(boxObject));
    }

    static PyObject *t_AbstractMap_cast_(PyTypeObject *type, PyObject *arg)
    {
      if (!(arg = castCheck(arg, AbstractMap::initializeClass, 1)))
        return NULL;
      return t_AbstractMap::wrap_Object(AbstractMap(((t_AbstractMap *) arg)->object.this$));
    }
    static PyObject *t_AbstractMap_instance_(PyTypeObject *type, PyObject *arg)
    {
      if (!castCheck(arg, AbstractMap::initializeClass, 0))
        Py_RETURN_FALSE;
      Py_RETURN_TRUE;
    }

    static PyObject *t_AbstractMap_of_(t_AbstractMap *self, PyObject *args)
    {
      if (!parseArg(args, "T", 2, &(self->parameters)))
        Py_RETURN_SELF;
      return PyErr_SetArgsError((PyObject *) self, "of_", args);
    }

    static PyObject *t_AbstractMap_clear(t_AbstractMap *self)
    {
      OBJ_CALL(self->object.clear());
      Py_RETURN_NONE;
    }

    static PyObject *t_AbstractMap_containsKey(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsKey(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsKey", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_containsValue(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.containsValue(a0));
        Py_RETURN_BOOL(result);
      }

      PyErr_SetArgsError((PyObject *) self, "containsValue", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_entrySet(t_AbstractMap *self)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = self->object.entrySet());
      return ::java::util::t_Set::wrap_Object(result);
    }

    static PyObject *t_AbstractMap_equals(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      jboolean result;

      if (!parseArgs(args, "o", &a0))
      {
        OBJ_CALL(result = self->object.equals(a0));
        Py_RETURN_BOOL(result);
      }

      return callSuper(&PY_TYPE(AbstractMap), (PyObject *) self, "equals", args, 2);
    }

    static PyObject *t_AbstractMap_get(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.get(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "get", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_hashCode(t_AbstractMap *self, PyObject *args)
    {
      jint result;

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.hashCode());
        return PyInt_FromLong((long) result);
      }

      return callSuper(&PY_TYPE(AbstractMap), (PyObject *) self, "hashCode", args, 2);
    }

    static PyObject *t_AbstractMap_isEmpty(t_AbstractMap *self)
    {
      jboolean result;
      OBJ_CALL(result = self->object.isEmpty());
      Py_RETURN_BOOL(result);
    }

    static PyObject *t_AbstractMap_keySet(t_AbstractMap *self)
    {
      ::java::util::Set result((jobject) NULL);
      OBJ_CALL(result = self->object.keySet());
      return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
    }

    static PyObject *t_AbstractMap_put(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object a1((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
      {
        OBJ_CALL(result = self->object.put(a0, a1));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "put", args);
      return NULL;
    }

    static PyObject *t_AbstractMap_putAll(t_AbstractMap *self, PyObject *arg)
    {
      ::java::util::Map a0((jobject) NULL);
      PyTypeObject **p0;

      if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
      {
        OBJ_CALL(self->object.putAll(a0));
        Py_RETURN_NONE;
      }

      PyErr_SetArgsError((PyObject *) self, "putAll", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_remove(t_AbstractMap *self, PyObject *arg)
    {
      ::java::lang::Object a0((jobject) NULL);
      ::java::lang::Object result((jobject) NULL);

      if (!parseArg(arg, "o", &a0))
      {
        OBJ_CALL(result = self->object.remove(a0));
        return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
      }

      PyErr_SetArgsError((PyObject *) self, "remove", arg);
      return NULL;
    }

    static PyObject *t_AbstractMap_size(t_AbstractMap *self)
    {
      jint result;
      OBJ_CALL(result = self->object.size());
      return PyInt_FromLong((long) result);
    }

    static PyObject *t_AbstractMap_toString(t_AbstractMap *self, PyObject *args)
    {
      ::java::lang::String result((jobject) NULL);

      if (!parseArgs(args, ""))
      {
        OBJ_CALL(result = self->object.toString());
        return j2p(result);
      }

      return callSuper(&PY_TYPE(AbstractMap), (PyObject *) self, "toString", args, 2);
    }

    static PyObject *t_AbstractMap_values(t_AbstractMap *self)
    {
      ::java::util::Collection result((jobject) NULL);
      OBJ_CALL(result = self->object.values());
      return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
    }
    static PyObject *t_AbstractMap_get__parameters_(t_AbstractMap *self, void *data)
    {
      return typeParameters(self->parameters, sizeof(self->parameters));
    }

    static PyObject *t_AbstractMap_get__empty(t_AbstractMap *self, void *data)
    {
      jboolean value;
      OBJ_CALL(value = self->object.isEmpty());
      Py_RETURN_BOOL(value);
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fi/FinnishLightStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {

          ::java::lang::Class *FinnishLightStemFilter::class$ = NULL;
          jmethodID *FinnishLightStemFilter::mids$ = NULL;
          bool FinnishLightStemFilter::live$ = false;

          jclass FinnishLightStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fi/FinnishLightStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FinnishLightStemFilter::FinnishLightStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FinnishLightStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fi {
          static PyObject *t_FinnishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FinnishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FinnishLightStemFilter_init_(t_FinnishLightStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FinnishLightStemFilter_incrementToken(t_FinnishLightStemFilter *self, PyObject *args);

          static PyMethodDef t_FinnishLightStemFilter__methods_[] = {
            DECLARE_METHOD(t_FinnishLightStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FinnishLightStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FinnishLightStemFilter, t_FinnishLightStemFilter, ::org::apache::lucene::analysis::TokenFilter, FinnishLightStemFilter, t_FinnishLightStemFilter_init_, 0, 0, 0, 0, 0);

          void t_FinnishLightStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FinnishLightStemFilter), module, "FinnishLightStemFilter", 0);
          }

          void t_FinnishLightStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilter).tp_dict, "class_", make_descriptor(FinnishLightStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FinnishLightStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FinnishLightStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FinnishLightStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FinnishLightStemFilter::initializeClass, 1)))
              return NULL;
            return t_FinnishLightStemFilter::wrap_Object(FinnishLightStemFilter(((t_FinnishLightStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FinnishLightStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FinnishLightStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FinnishLightStemFilter_init_(t_FinnishLightStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FinnishLightStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FinnishLightStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FinnishLightStemFilter_incrementToken(t_FinnishLightStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FinnishLightStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/ar/ArabicStemFilter.h"
#include "java/lang/Class.h"
#include "java/util/Map.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {

          ::java::lang::Class *ArabicStemFilterFactory::class$ = NULL;
          jmethodID *ArabicStemFilterFactory::mids$ = NULL;
          bool ArabicStemFilterFactory::live$ = false;

          jclass ArabicStemFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/ar/ArabicStemFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_f95e0269] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/ar/ArabicStemFilter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ArabicStemFilterFactory::ArabicStemFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::ar::ArabicStemFilter ArabicStemFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::ar::ArabicStemFilter(env->callObjectMethod(this$, mids$[mid_create_f95e0269], a0.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace ar {
          static PyObject *t_ArabicStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ArabicStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ArabicStemFilterFactory_init_(t_ArabicStemFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ArabicStemFilterFactory_create(t_ArabicStemFilterFactory *self, PyObject *args);

          static PyMethodDef t_ArabicStemFilterFactory__methods_[] = {
            DECLARE_METHOD(t_ArabicStemFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArabicStemFilterFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ArabicStemFilterFactory, t_ArabicStemFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, ArabicStemFilterFactory, t_ArabicStemFilterFactory_init_, 0, 0, 0, 0, 0);

          void t_ArabicStemFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(ArabicStemFilterFactory), module, "ArabicStemFilterFactory", 0);
          }

          void t_ArabicStemFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ArabicStemFilterFactory).tp_dict, "class_", make_descriptor(ArabicStemFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_ArabicStemFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArabicStemFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ArabicStemFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ArabicStemFilterFactory::initializeClass, 1)))
              return NULL;
            return t_ArabicStemFilterFactory::wrap_Object(ArabicStemFilterFactory(((t_ArabicStemFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_ArabicStemFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ArabicStemFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ArabicStemFilterFactory_init_(t_ArabicStemFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            ArabicStemFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = ArabicStemFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ArabicStemFilterFactory_create(t_ArabicStemFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::ar::ArabicStemFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::ar::t_ArabicStemFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ArabicStemFilterFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemFilter::class$ = NULL;
          jmethodID *GalicianMinimalStemFilter::mids$ = NULL;
          bool GalicianMinimalStemFilter::live$ = false;

          jclass GalicianMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemFilter::GalicianMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean GalicianMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemFilter_init_(t_GalicianMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemFilter_incrementToken(t_GalicianMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianMinimalStemFilter, t_GalicianMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, GalicianMinimalStemFilter, t_GalicianMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_GalicianMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemFilter), module, "GalicianMinimalStemFilter", 0);
          }

          void t_GalicianMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilter).tp_dict, "class_", make_descriptor(GalicianMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_GalicianMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemFilter::wrap_Object(GalicianMinimalStemFilter(((t_GalicianMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemFilter_init_(t_GalicianMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            GalicianMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = GalicianMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GalicianMinimalStemFilter_incrementToken(t_GalicianMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(GalicianMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CorruptIndexException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CorruptIndexException::class$ = NULL;
        jmethodID *CorruptIndexException::mids$ = NULL;
        bool CorruptIndexException::live$ = false;

        jclass CorruptIndexException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CorruptIndexException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CorruptIndexException::CorruptIndexException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        CorruptIndexException::CorruptIndexException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CorruptIndexException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CorruptIndexException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CorruptIndexException_init_(t_CorruptIndexException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_CorruptIndexException__methods_[] = {
          DECLARE_METHOD(t_CorruptIndexException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CorruptIndexException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CorruptIndexException, t_CorruptIndexException, ::java::io::IOException, CorruptIndexException, t_CorruptIndexException_init_, 0, 0, 0, 0, 0);

        void t_CorruptIndexException::install(PyObject *module)
        {
          installType(&PY_TYPE(CorruptIndexException), module, "CorruptIndexException", 0);
        }

        void t_CorruptIndexException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CorruptIndexException).tp_dict, "class_", make_descriptor(CorruptIndexException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CorruptIndexException).tp_dict, "wrapfn_", make_descriptor(t_CorruptIndexException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CorruptIndexException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CorruptIndexException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CorruptIndexException::initializeClass, 1)))
            return NULL;
          return t_CorruptIndexException::wrap_Object(CorruptIndexException(((t_CorruptIndexException *) arg)->object.this$));
        }
        static PyObject *t_CorruptIndexException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CorruptIndexException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CorruptIndexException_init_(t_CorruptIndexException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              CorruptIndexException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = CorruptIndexException(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Throwable a1((jobject) NULL);
              CorruptIndexException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
              {
                INT_CALL(object = CorruptIndexException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/BoostQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *BoostQueryNodeProcessor::class$ = NULL;
              jmethodID *BoostQueryNodeProcessor::mids$ = NULL;
              bool BoostQueryNodeProcessor::live$ = false;

              jclass BoostQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/BoostQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNodeProcessor::BoostQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_BoostQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNodeProcessor_init_(t_BoostQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BoostQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BoostQueryNodeProcessor, t_BoostQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, BoostQueryNodeProcessor, t_BoostQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_BoostQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNodeProcessor), module, "BoostQueryNodeProcessor", 0);
              }

              void t_BoostQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeProcessor).tp_dict, "class_", make_descriptor(BoostQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_BoostQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNodeProcessor::wrap_Object(BoostQueryNodeProcessor(((t_BoostQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNodeProcessor_init_(t_BoostQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                BoostQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = BoostQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/String.h"
#include "java/util/Locale.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *Message::class$ = NULL;
            jmethodID *Message::mids$ = NULL;
            bool Message::live$ = false;

            jclass Message::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/Message");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getArguments_94e49c77] = env->getMethodID(cls, "getArguments", "()[Ljava/lang/Object;");
                mids$[mid_getKey_14c7b5c5] = env->getMethodID(cls, "getKey", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c0fb304e] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            JArray< ::java::lang::Object > Message::getArguments() const
            {
              return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getArguments_94e49c77]));
            }

            ::java::lang::String Message::getKey() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getKey_14c7b5c5]));
            }

            ::java::lang::String Message::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
            }

            ::java::lang::String Message::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_c0fb304e], a0.this$));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_Message_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Message_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_Message_getArguments(t_Message *self);
            static PyObject *t_Message_getKey(t_Message *self);
            static PyObject *t_Message_getLocalizedMessage(t_Message *self, PyObject *args);
            static PyObject *t_Message_get__arguments(t_Message *self, void *data);
            static PyObject *t_Message_get__key(t_Message *self, void *data);
            static PyObject *t_Message_get__localizedMessage(t_Message *self, void *data);
            static PyGetSetDef t_Message__fields_[] = {
              DECLARE_GET_FIELD(t_Message, arguments),
              DECLARE_GET_FIELD(t_Message, key),
              DECLARE_GET_FIELD(t_Message, localizedMessage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_Message__methods_[] = {
              DECLARE_METHOD(t_Message, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Message, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_Message, getArguments, METH_NOARGS),
              DECLARE_METHOD(t_Message, getKey, METH_NOARGS),
              DECLARE_METHOD(t_Message, getLocalizedMessage, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(Message, t_Message, ::java::lang::Object, Message, abstract_init, 0, 0, t_Message__fields_, 0, 0);

            void t_Message::install(PyObject *module)
            {
              installType(&PY_TYPE(Message), module, "Message", 0);
            }

            void t_Message::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(Message).tp_dict, "class_", make_descriptor(Message::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(Message).tp_dict, "wrapfn_", make_descriptor(t_Message::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(Message).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_Message_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, Message::initializeClass, 1)))
                return NULL;
              return t_Message::wrap_Object(Message(((t_Message *) arg)->object.this$));
            }
            static PyObject *t_Message_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, Message::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_Message_getArguments(t_Message *self)
            {
              JArray< ::java::lang::Object > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArguments());
              return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_Message_getKey(t_Message *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getKey());
              return j2p(result);
            }

            static PyObject *t_Message_getLocalizedMessage(t_Message *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "getLocalizedMessage", args);
              return NULL;
            }

            static PyObject *t_Message_get__arguments(t_Message *self, void *data)
            {
              JArray< ::java::lang::Object > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArguments());
              return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_Message_get__key(t_Message *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getKey());
              return j2p(value);
            }

            static PyObject *t_Message_get__localizedMessage(t_Message *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/highlight/PythonFragmenter.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PythonFragmenter::class$ = NULL;
          jmethodID *PythonFragmenter::mids$ = NULL;
          bool PythonFragmenter::live$ = false;

          jclass PythonFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/highlight/PythonFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonFragmenter::PythonFragmenter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PythonFragmenter::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jlong PythonFragmenter::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonFragmenter::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PythonFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonFragmenter_init_(t_PythonFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonFragmenter_finalize(t_PythonFragmenter *self);
          static PyObject *t_PythonFragmenter_pythonExtension(t_PythonFragmenter *self, PyObject *args);
          static jboolean JNICALL t_PythonFragmenter_isNewFragment0(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonFragmenter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
          static void JNICALL t_PythonFragmenter_start2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static PyObject *t_PythonFragmenter_get__self(t_PythonFragmenter *self, void *data);
          static PyGetSetDef t_PythonFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_PythonFragmenter, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonFragmenter__methods_[] = {
            DECLARE_METHOD(t_PythonFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFragmenter, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonFragmenter, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonFragmenter, t_PythonFragmenter, ::java::lang::Object, PythonFragmenter, t_PythonFragmenter_init_, 0, 0, t_PythonFragmenter__fields_, 0, 0);

          void t_PythonFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonFragmenter), module, "PythonFragmenter", 1);
          }

          void t_PythonFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonFragmenter).tp_dict, "class_", make_descriptor(PythonFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonFragmenter).tp_dict, "wrapfn_", make_descriptor(t_PythonFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonFragmenter::initializeClass);
            JNINativeMethod methods[] = {
              { "isNewFragment", "()Z", (void *) t_PythonFragmenter_isNewFragment0 },
              { "pythonDecRef", "()V", (void *) t_PythonFragmenter_pythonDecRef1 },
              { "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V", (void *) t_PythonFragmenter_start2 },
            };
            env->registerNatives(cls, methods, 3);
          }

          static PyObject *t_PythonFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonFragmenter::initializeClass, 1)))
              return NULL;
            return t_PythonFragmenter::wrap_Object(PythonFragmenter(((t_PythonFragmenter *) arg)->object.this$));
          }
          static PyObject *t_PythonFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonFragmenter_init_(t_PythonFragmenter *self, PyObject *args, PyObject *kwds)
          {
            PythonFragmenter object((jobject) NULL);

            INT_CALL(object = PythonFragmenter());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonFragmenter_finalize(t_PythonFragmenter *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonFragmenter_pythonExtension(t_PythonFragmenter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jboolean JNICALL t_PythonFragmenter_isNewFragment0(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            jboolean value;
            PyObject *result = PyObject_CallMethod(obj, "isNewFragment", "");
            if (!result)
              throwPythonError();
            else if (parseArg(result, "Z", &value))
            {
              throwTypeError("isNewFragment", result);
              Py_DECREF(result);
            }
            else
            {
              Py_DECREF(result);
              return value;
            }

            return (jboolean) 0;
          }

          static void JNICALL t_PythonFragmenter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static void JNICALL t_PythonFragmenter_start2(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFragmenter::mids$[PythonFragmenter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = ::org::apache::lucene::analysis::t_TokenStream::wrap_Object(::org::apache::lucene::analysis::TokenStream(a1));
            PyObject *result = PyObject_CallMethod(obj, "start", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else
              Py_DECREF(result);
          }

          static PyObject *t_PythonFragmenter_get__self(t_PythonFragmenter *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {

        ::java::lang::Class *TopOrdAndIntQueue::class$ = NULL;
        jmethodID *TopOrdAndIntQueue::mids$ = NULL;
        bool TopOrdAndIntQueue::live$ = false;

        jclass TopOrdAndIntQueue::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/facet/TopOrdAndIntQueue");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_lessThan_bb8ee210] = env->getMethodID(cls, "lessThan", "(Lorg/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue;Lorg/apache/lucene/facet/TopOrdAndIntQueue$OrdAndValue;)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopOrdAndIntQueue::TopOrdAndIntQueue(jint a0) : ::org::apache::lucene::util::PriorityQueue(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        static PyObject *t_TopOrdAndIntQueue_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopOrdAndIntQueue_of_(t_TopOrdAndIntQueue *self, PyObject *args);
        static int t_TopOrdAndIntQueue_init_(t_TopOrdAndIntQueue *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopOrdAndIntQueue_get__parameters_(t_TopOrdAndIntQueue *self, void *data);
        static PyGetSetDef t_TopOrdAndIntQueue__fields_[] = {
          DECLARE_GET_FIELD(t_TopOrdAndIntQueue, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopOrdAndIntQueue__methods_[] = {
          DECLARE_METHOD(t_TopOrdAndIntQueue, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopOrdAndIntQueue, of_, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopOrdAndIntQueue, t_TopOrdAndIntQueue, ::org::apache::lucene::util::PriorityQueue, TopOrdAndIntQueue, t_TopOrdAndIntQueue_init_, 0, 0, t_TopOrdAndIntQueue__fields_, 0, 0);
        PyObject *t_TopOrdAndIntQueue::wrap_Object(const TopOrdAndIntQueue& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue *self = (t_TopOrdAndIntQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopOrdAndIntQueue::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopOrdAndIntQueue::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopOrdAndIntQueue *self = (t_TopOrdAndIntQueue *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopOrdAndIntQueue::install(PyObject *module)
        {
          installType(&PY_TYPE(TopOrdAndIntQueue), module, "TopOrdAndIntQueue", 0);
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "OrdAndValue", make_descriptor(&PY_TYPE(TopOrdAndIntQueue$OrdAndValue)));
        }

        void t_TopOrdAndIntQueue::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "class_", make_descriptor(TopOrdAndIntQueue::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "wrapfn_", make_descriptor(t_TopOrdAndIntQueue::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopOrdAndIntQueue).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopOrdAndIntQueue_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopOrdAndIntQueue::initializeClass, 1)))
            return NULL;
          return t_TopOrdAndIntQueue::wrap_Object(TopOrdAndIntQueue(((t_TopOrdAndIntQueue *) arg)->object.this$));
        }
        static PyObject *t_TopOrdAndIntQueue_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopOrdAndIntQueue::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopOrdAndIntQueue_of_(t_TopOrdAndIntQueue *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopOrdAndIntQueue_init_(t_TopOrdAndIntQueue *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopOrdAndIntQueue object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopOrdAndIntQueue(a0));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::facet::PY_TYPE(TopOrdAndIntQueue$OrdAndValue);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
        static PyObject *t_TopOrdAndIntQueue_get__parameters_(t_TopOrdAndIntQueue *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FST.h"
#include "org/apache/lucene/store/DataInput.h"
#include "org/apache/lucene/util/Accountable.h"
#include "java/io/File.h"
#include "org/apache/lucene/util/fst/FST$BytesReader.h"
#include "org/apache/lucene/store/DataOutput.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/util/fst/FST$Arc.h"
#include "org/apache/lucene/util/fst/FST$INPUT_TYPE.h"
#include "org/apache/lucene/util/fst/Outputs.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FST::class$ = NULL;
          jmethodID *FST::mids$ = NULL;
          jfieldID *FST::fids$ = NULL;
          bool FST::live$ = false;
          jint FST::DEFAULT_MAX_BLOCK_BITS = (jint) 0;
          jint FST::END_LABEL = (jint) 0;

          jclass FST::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FST");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_ed0a14d8] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/fst/Outputs;)V");
              mids$[mid_init$_f8dfeffa] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/DataInput;Lorg/apache/lucene/util/fst/Outputs;I)V");
              mids$[mid_findTargetArc_12322441] = env->getMethodID(cls, "findTargetArc", "(ILorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_getArcCount_54c6a17a] = env->getMethodID(cls, "getArcCount", "()J");
              mids$[mid_getArcWithOutputCount_54c6a17a] = env->getMethodID(cls, "getArcWithOutputCount", "()J");
              mids$[mid_getBytesReader_92a3fc65] = env->getMethodID(cls, "getBytesReader", "()Lorg/apache/lucene/util/fst/FST$BytesReader;");
              mids$[mid_getEmptyOutput_846352c3] = env->getMethodID(cls, "getEmptyOutput", "()Ljava/lang/Object;");
              mids$[mid_getFirstArc_8c07e6cb] = env->getMethodID(cls, "getFirstArc", "(Lorg/apache/lucene/util/fst/FST$Arc;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_getInputType_ae922153] = env->getMethodID(cls, "getInputType", "()Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");
              mids$[mid_getNodeCount_54c6a17a] = env->getMethodID(cls, "getNodeCount", "()J");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_read_fd85abc1] = env->getStaticMethodID(cls, "read", "(Ljava/io/File;Lorg/apache/lucene/util/fst/Outputs;)Lorg/apache/lucene/util/fst/FST;");
              mids$[mid_readFirstRealTargetArc_e3f5aada] = env->getMethodID(cls, "readFirstRealTargetArc", "(JLorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readFirstTargetArc_ec7dd60b] = env->getMethodID(cls, "readFirstTargetArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readLastTargetArc_ec7dd60b] = env->getMethodID(cls, "readLastTargetArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readNextArc_1deb4fc1] = env->getMethodID(cls, "readNextArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readNextArcLabel_614f52e1] = env->getMethodID(cls, "readNextArcLabel", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)I");
              mids$[mid_readNextRealArc_1deb4fc1] = env->getMethodID(cls, "readNextRealArc", "(Lorg/apache/lucene/util/fst/FST$Arc;Lorg/apache/lucene/util/fst/FST$BytesReader;)Lorg/apache/lucene/util/fst/FST$Arc;");
              mids$[mid_readRootArcs_a2b77668] = env->getMethodID(cls, "readRootArcs", "([Lorg/apache/lucene/util/fst/FST$Arc;)V");
              mids$[mid_save_c3dacf57] = env->getMethodID(cls, "save", "(Ljava/io/File;)V");
              mids$[mid_save_27875f57] = env->getMethodID(cls, "save", "(Lorg/apache/lucene/store/DataOutput;)V");
              mids$[mid_targetHasArcs_0c8cc6dc] = env->getStaticMethodID(cls, "targetHasArcs", "(Lorg/apache/lucene/util/fst/FST$Arc;)Z");

              fids$ = new jfieldID[max_fid];
              fids$[fid_arcCount] = env->getFieldID(cls, "arcCount", "J");
              fids$[fid_arcWithOutputCount] = env->getFieldID(cls, "arcWithOutputCount", "J");
              fids$[fid_inputType] = env->getFieldID(cls, "inputType", "Lorg/apache/lucene/util/fst/FST$INPUT_TYPE;");
              fids$[fid_nodeCount] = env->getFieldID(cls, "nodeCount", "J");
              fids$[fid_outputs] = env->getFieldID(cls, "outputs", "Lorg/apache/lucene/util/fst/Outputs;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_BLOCK_BITS = env->getStaticIntField(cls, "DEFAULT_MAX_BLOCK_BITS");
              END_LABEL = env->getStaticIntField(cls, "END_LABEL");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FST::FST(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::fst::Outputs & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ed0a14d8, a0.this$, a1.this$)) {}

          FST::FST(const ::org::apache::lucene::store::DataInput & a0, const ::org::apache::lucene::util::fst::Outputs & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f8dfeffa, a0.this$, a1.this$, a2)) {}

          ::org::apache::lucene::util::fst::FST$Arc FST::findTargetArc(jint a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$Arc & a2, const ::org::apache::lucene::util::fst::FST$BytesReader & a3) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_findTargetArc_12322441], a0, a1.this$, a2.this$, a3.this$));
          }

          jlong FST::getArcCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getArcCount_54c6a17a]);
          }

          jlong FST::getArcWithOutputCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getArcWithOutputCount_54c6a17a]);
          }

          ::org::apache::lucene::util::fst::FST$BytesReader FST::getBytesReader() const
          {
            return ::org::apache::lucene::util::fst::FST$BytesReader(env->callObjectMethod(this$, mids$[mid_getBytesReader_92a3fc65]));
          }

          ::java::lang::Object FST::getEmptyOutput() const
          {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getEmptyOutput_846352c3]));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::getFirstArc(const ::org::apache::lucene::util::fst::FST$Arc & a0) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_getFirstArc_8c07e6cb], a0.this$));
          }

          ::org::apache::lucene::util::fst::FST$INPUT_TYPE FST::getInputType() const
          {
            return ::org::apache::lucene::util::fst::FST$INPUT_TYPE(env->callObjectMethod(this$, mids$[mid_getInputType_ae922153]));
          }

          jlong FST::getNodeCount() const
          {
            return env->callLongMethod(this$, mids$[mid_getNodeCount_54c6a17a]);
          }

          jlong FST::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          FST FST::read(const ::java::io::File & a0, const ::org::apache::lucene::util::fst::Outputs & a1)
          {
            jclass cls = env->getClass(initializeClass);
            return FST(env->callStaticObjectMethod(cls, mids$[mid_read_fd85abc1], a0.this$, a1.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readFirstRealTargetArc(jlong a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readFirstRealTargetArc_e3f5aada], a0, a1.this$, a2.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readFirstTargetArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readFirstTargetArc_ec7dd60b], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readLastTargetArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$Arc & a1, const ::org::apache::lucene::util::fst::FST$BytesReader & a2) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readLastTargetArc_ec7dd60b], a0.this$, a1.this$, a2.this$));
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readNextArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readNextArc_1deb4fc1], a0.this$, a1.this$));
          }

          jint FST::readNextArcLabel(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return env->callIntMethod(this$, mids$[mid_readNextArcLabel_614f52e1], a0.this$, a1.this$);
          }

          ::org::apache::lucene::util::fst::FST$Arc FST::readNextRealArc(const ::org::apache::lucene::util::fst::FST$Arc & a0, const ::org::apache::lucene::util::fst::FST$BytesReader & a1) const
          {
            return ::org::apache::lucene::util::fst::FST$Arc(env->callObjectMethod(this$, mids$[mid_readNextRealArc_1deb4fc1], a0.this$, a1.this$));
          }

          void FST::readRootArcs(const JArray< ::org::apache::lucene::util::fst::FST$Arc > & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_readRootArcs_a2b77668], a0.this$);
          }

          void FST::save(const ::java::io::File & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_c3dacf57], a0.this$);
          }

          void FST::save(const ::org::apache::lucene::store::DataOutput & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_save_27875f57], a0.this$);
          }

          jboolean FST::targetHasArcs(const ::org::apache::lucene::util::fst::FST$Arc & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_targetHasArcs_0c8cc6dc], a0.this$);
          }

          jlong FST::_get_arcCount() const
          {
            return env->getLongField(this$, fids$[fid_arcCount]);
          }

          void FST::_set_arcCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_arcCount], a0);
          }

          jlong FST::_get_arcWithOutputCount() const
          {
            return env->getLongField(this$, fids$[fid_arcWithOutputCount]);
          }

          void FST::_set_arcWithOutputCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_arcWithOutputCount], a0);
          }

          ::org::apache::lucene::util::fst::FST$INPUT_TYPE FST::_get_inputType() const
          {
            return ::org::apache::lucene::util::fst::FST$INPUT_TYPE(env->getObjectField(this$, fids$[fid_inputType]));
          }

          jlong FST::_get_nodeCount() const
          {
            return env->getLongField(this$, fids$[fid_nodeCount]);
          }

          void FST::_set_nodeCount(jlong a0) const
          {
            env->setLongField(this$, fids$[fid_nodeCount], a0);
          }

          ::org::apache::lucene::util::fst::Outputs FST::_get_outputs() const
          {
            return ::org::apache::lucene::util::fst::Outputs(env->getObjectField(this$, fids$[fid_outputs]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FST_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_of_(t_FST *self, PyObject *args);
          static int t_FST_init_(t_FST *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FST_findTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_getArcCount(t_FST *self);
          static PyObject *t_FST_getArcWithOutputCount(t_FST *self);
          static PyObject *t_FST_getBytesReader(t_FST *self);
          static PyObject *t_FST_getEmptyOutput(t_FST *self);
          static PyObject *t_FST_getFirstArc(t_FST *self, PyObject *arg);
          static PyObject *t_FST_getInputType(t_FST *self);
          static PyObject *t_FST_getNodeCount(t_FST *self);
          static PyObject *t_FST_ramBytesUsed(t_FST *self);
          static PyObject *t_FST_read(PyTypeObject *type, PyObject *args);
          static PyObject *t_FST_readFirstRealTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readFirstTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readLastTargetArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readNextArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readNextArcLabel(t_FST *self, PyObject *args);
          static PyObject *t_FST_readNextRealArc(t_FST *self, PyObject *args);
          static PyObject *t_FST_readRootArcs(t_FST *self, PyObject *arg);
          static PyObject *t_FST_save(t_FST *self, PyObject *args);
          static PyObject *t_FST_targetHasArcs(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FST_get__outputs(t_FST *self, void *data);

          static PyObject *t_FST_get__arcCount(t_FST *self, void *data);
          static PyObject *t_FST_get__arcWithOutputCount(t_FST *self, void *data);
          static PyObject *t_FST_get__bytesReader(t_FST *self, void *data);
          static PyObject *t_FST_get__emptyOutput(t_FST *self, void *data);
          static PyObject *t_FST_get__inputType(t_FST *self, void *data);
          static PyObject *t_FST_get__nodeCount(t_FST *self, void *data);
          static PyObject *t_FST_get__parameters_(t_FST *self, void *data);
          static PyGetSetDef t_FST__fields_[] = {
            DECLARE_GET_FIELD(t_FST, outputs),
            DECLARE_GET_FIELD(t_FST, arcCount),
            DECLARE_GET_FIELD(t_FST, arcWithOutputCount),
            DECLARE_GET_FIELD(t_FST, bytesReader),
            DECLARE_GET_FIELD(t_FST, emptyOutput),
            DECLARE_GET_FIELD(t_FST, inputType),
            DECLARE_GET_FIELD(t_FST, nodeCount),
            DECLARE_GET_FIELD(t_FST, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FST__methods_[] = {
            DECLARE_METHOD(t_FST, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FST, of_, METH_VARARGS),
            DECLARE_METHOD(t_FST, findTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, getArcCount, METH_NOARGS),
            DECLARE_METHOD(t_FST, getArcWithOutputCount, METH_NOARGS),
            DECLARE_METHOD(t_FST, getBytesReader, METH_NOARGS),
            DECLARE_METHOD(t_FST, getEmptyOutput, METH_NOARGS),
            DECLARE_METHOD(t_FST, getFirstArc, METH_O),
            DECLARE_METHOD(t_FST, getInputType, METH_NOARGS),
            DECLARE_METHOD(t_FST, getNodeCount, METH_NOARGS),
            DECLARE_METHOD(t_FST, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_FST, read, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_FST, readFirstRealTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readFirstTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readLastTargetArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readNextArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readNextArcLabel, METH_VARARGS),
            DECLARE_METHOD(t_FST, readNextRealArc, METH_VARARGS),
            DECLARE_METHOD(t_FST, readRootArcs, METH_O),
            DECLARE_METHOD(t_FST, save, METH_VARARGS),
            DECLARE_METHOD(t_FST, targetHasArcs, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FST, t_FST, ::java::lang::Object, FST, t_FST_init_, 0, 0, t_FST__fields_, 0, 0);
          PyObject *t_FST::wrap_Object(const FST& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST *self = (t_FST *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FST::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FST::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FST *self = (t_FST *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FST::install(PyObject *module)
          {
            installType(&PY_TYPE(FST), module, "FST", 0);
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "BytesReader", make_descriptor(&PY_TYPE(FST$BytesReader)));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "Arc", make_descriptor(&PY_TYPE(FST$Arc)));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "INPUT_TYPE", make_descriptor(&PY_TYPE(FST$INPUT_TYPE)));
          }

          void t_FST::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "class_", make_descriptor(FST::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "wrapfn_", make_descriptor(t_FST::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(FST::initializeClass);
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "DEFAULT_MAX_BLOCK_BITS", make_descriptor(FST::DEFAULT_MAX_BLOCK_BITS));
            PyDict_SetItemString(PY_TYPE(FST).tp_dict, "END_LABEL", make_descriptor(FST::END_LABEL));
          }

          static PyObject *t_FST_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FST::initializeClass, 1)))
              return NULL;
            return t_FST::wrap_Object(FST(((t_FST *) arg)->object.this$));
          }
          static PyObject *t_FST_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FST::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FST_of_(t_FST *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_FST_init_(t_FST *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
                PyTypeObject **p1;
                FST object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
                {
                  INT_CALL(object = FST(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::store::DataInput a0((jobject) NULL);
                ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
                PyTypeObject **p1;
                jint a2;
                FST object((jobject) NULL);

                if (!parseArgs(args, "kKI", ::org::apache::lucene::store::DataInput::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_, &a2))
                {
                  INT_CALL(object = FST(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FST_findTargetArc(t_FST *self, PyObject *args)
          {
            jint a0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$BytesReader a3((jobject) NULL);
            PyTypeObject **p3;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "IKKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a3, &p3, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.findTargetArc(a0, a1, a2, a3));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "findTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_getArcCount(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getArcCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_getArcWithOutputCount(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getArcWithOutputCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_getBytesReader(t_FST *self)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader result((jobject) NULL);
            OBJ_CALL(result = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(result);
          }

          static PyObject *t_FST_getEmptyOutput(t_FST *self)
          {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getEmptyOutput());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          static PyObject *t_FST_getFirstArc(t_FST *self, PyObject *arg)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArg(arg, "K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = self->object.getFirstArc(a0));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "getFirstArc", arg);
            return NULL;
          }

          static PyObject *t_FST_getInputType(t_FST *self)
          {
            ::org::apache::lucene::util::fst::FST$INPUT_TYPE result((jobject) NULL);
            OBJ_CALL(result = self->object.getInputType());
            return ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::wrap_Object(result);
          }

          static PyObject *t_FST_getNodeCount(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.getNodeCount());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_ramBytesUsed(t_FST *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FST_read(PyTypeObject *type, PyObject *args)
          {
            ::java::io::File a0((jobject) NULL);
            ::org::apache::lucene::util::fst::Outputs a1((jobject) NULL);
            PyTypeObject **p1;
            FST result((jobject) NULL);

            if (!parseArgs(args, "kK", ::java::io::File::initializeClass, ::org::apache::lucene::util::fst::Outputs::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_Outputs::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST::read(a0, a1));
              return t_FST::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "read", args);
            return NULL;
          }

          static PyObject *t_FST_readFirstRealTargetArc(t_FST *self, PyObject *args)
          {
            jlong a0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "JKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readFirstRealTargetArc(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readFirstRealTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_readFirstTargetArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readFirstTargetArc(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readFirstTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_readLastTargetArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$Arc a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$BytesReader a2((jobject) NULL);
            PyTypeObject **p2;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KKK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a2, &p2, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readLastTargetArc(a0, a1, a2));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readLastTargetArc", args);
            return NULL;
          }

          static PyObject *t_FST_readNextArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readNextArc(a0, a1));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readNextArc", args);
            return NULL;
          }

          static PyObject *t_FST_readNextArcLabel(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            jint result;

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readNextArcLabel(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "readNextArcLabel", args);
            return NULL;
          }

          static PyObject *t_FST_readNextRealArc(t_FST *self, PyObject *args)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            ::org::apache::lucene::util::fst::FST$BytesReader a1((jobject) NULL);
            PyTypeObject **p1;
            ::org::apache::lucene::util::fst::FST$Arc result((jobject) NULL);

            if (!parseArgs(args, "KK", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, ::org::apache::lucene::util::fst::FST$BytesReader::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_, &a1, &p1, ::org::apache::lucene::util::fst::t_FST$BytesReader::parameters_))
            {
              OBJ_CALL(result = self->object.readNextRealArc(a0, a1));
              return ::org::apache::lucene::util::fst::t_FST$Arc::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "readNextRealArc", args);
            return NULL;
          }

          static PyObject *t_FST_readRootArcs(t_FST *self, PyObject *arg)
          {
            JArray< ::org::apache::lucene::util::fst::FST$Arc > a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "[K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
            {
              OBJ_CALL(self->object.readRootArcs(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "readRootArcs", arg);
            return NULL;
          }

          static PyObject *t_FST_save(t_FST *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::File a0((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.save(a0));
                  Py_RETURN_NONE;
                }
              }
              {
                ::org::apache::lucene::store::DataOutput a0((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::store::DataOutput::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.save(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "save", args);
            return NULL;
          }

          static PyObject *t_FST_targetHasArcs(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::fst::FST$Arc a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", ::org::apache::lucene::util::fst::FST$Arc::initializeClass, &a0, &p0, ::org::apache::lucene::util::fst::t_FST$Arc::parameters_))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::fst::FST::targetHasArcs(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "targetHasArcs", arg);
            return NULL;
          }
          static PyObject *t_FST_get__parameters_(t_FST *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_FST_get__outputs(t_FST *self, void *data)
          {
            ::org::apache::lucene::util::fst::Outputs value((jobject) NULL);
            OBJ_CALL(value = self->object._get_outputs());
            return ::org::apache::lucene::util::fst::t_Outputs::wrap_Object(value);
          }

          static PyObject *t_FST_get__arcCount(t_FST *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getArcCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FST_get__arcWithOutputCount(t_FST *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getArcWithOutputCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FST_get__bytesReader(t_FST *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$BytesReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytesReader());
            return ::org::apache::lucene::util::fst::t_FST$BytesReader::wrap_Object(value);
          }

          static PyObject *t_FST_get__emptyOutput(t_FST *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getEmptyOutput());
            return ::java::lang::t_Object::wrap_Object(value);
          }

          static PyObject *t_FST_get__inputType(t_FST *self, void *data)
          {
            ::org::apache::lucene::util::fst::FST$INPUT_TYPE value((jobject) NULL);
            OBJ_CALL(value = self->object.getInputType());
            return ::org::apache::lucene::util::fst::t_FST$INPUT_TYPE::wrap_Object(value);
          }

          static PyObject *t_FST_get__nodeCount(t_FST *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getNodeCount());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/ModifierQueryNodeBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *ModifierQueryNodeBuilder::class$ = NULL;
              jmethodID *ModifierQueryNodeBuilder::mids$ = NULL;
              bool ModifierQueryNodeBuilder::live$ = false;

              jclass ModifierQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/ModifierQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              ModifierQueryNodeBuilder::ModifierQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query ModifierQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_ModifierQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_ModifierQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_ModifierQueryNodeBuilder_init_(t_ModifierQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_ModifierQueryNodeBuilder_build(t_ModifierQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_ModifierQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_ModifierQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(ModifierQueryNodeBuilder, t_ModifierQueryNodeBuilder, ::java::lang::Object, ModifierQueryNodeBuilder, t_ModifierQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_ModifierQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(ModifierQueryNodeBuilder), module, "ModifierQueryNodeBuilder", 0);
              }

              void t_ModifierQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(ModifierQueryNodeBuilder).tp_dict, "class_", make_descriptor(ModifierQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_ModifierQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(ModifierQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_ModifierQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, ModifierQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_ModifierQueryNodeBuilder::wrap_Object(ModifierQueryNodeBuilder(((t_ModifierQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_ModifierQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, ModifierQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_ModifierQueryNodeBuilder_init_(t_ModifierQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                ModifierQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = ModifierQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_ModifierQueryNodeBuilder_build(t_ModifierQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/lang/Comparable.h"
#include "java/util/LinkedList.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo$Toffs.h"
#include "org/apache/lucene/search/vectorhighlight/FieldTermStack$TermInfo.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {

          ::java::lang::Class *FieldPhraseList$WeightedPhraseInfo::class$ = NULL;
          jmethodID *FieldPhraseList$WeightedPhraseInfo::mids$ = NULL;
          bool FieldPhraseList$WeightedPhraseInfo::live$ = false;

          jclass FieldPhraseList$WeightedPhraseInfo::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
              mids$[mid_init$_0ffd9fa1] = env->getMethodID(cls, "<init>", "(Ljava/util/LinkedList;F)V");
              mids$[mid_init$_d318fc21] = env->getMethodID(cls, "<init>", "(Ljava/util/LinkedList;FI)V");
              mids$[mid_compareTo_3f58e096] = env->getMethodID(cls, "compareTo", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)I");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_getBoost_54c6a176] = env->getMethodID(cls, "getBoost", "()F");
              mids$[mid_getEndOffset_54c6a179] = env->getMethodID(cls, "getEndOffset", "()I");
              mids$[mid_getSeqnum_54c6a179] = env->getMethodID(cls, "getSeqnum", "()I");
              mids$[mid_getStartOffset_54c6a179] = env->getMethodID(cls, "getStartOffset", "()I");
              mids$[mid_getTermsInfos_87851566] = env->getMethodID(cls, "getTermsInfos", "()Ljava/util/List;");
              mids$[mid_getTermsOffsets_87851566] = env->getMethodID(cls, "getTermsOffsets", "()Ljava/util/List;");
              mids$[mid_getText_14c7b5c5] = env->getMethodID(cls, "getText", "()Ljava/lang/String;");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isOffsetOverlap_3f58e085] = env->getMethodID(cls, "isOffsetOverlap", "(Lorg/apache/lucene/search/vectorhighlight/FieldPhraseList$WeightedPhraseInfo;)Z");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::Collection & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::LinkedList & a0, jfloat a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0ffd9fa1, a0.this$, a1)) {}

          FieldPhraseList$WeightedPhraseInfo::FieldPhraseList$WeightedPhraseInfo(const ::java::util::LinkedList & a0, jfloat a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d318fc21, a0.this$, a1, a2)) {}

          jint FieldPhraseList$WeightedPhraseInfo::compareTo(const FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            return env->callIntMethod(this$, mids$[mid_compareTo_3f58e096], a0.this$);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jfloat FieldPhraseList$WeightedPhraseInfo::getBoost() const
          {
            return env->callFloatMethod(this$, mids$[mid_getBoost_54c6a176]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getEndOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndOffset_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getSeqnum() const
          {
            return env->callIntMethod(this$, mids$[mid_getSeqnum_54c6a179]);
          }

          jint FieldPhraseList$WeightedPhraseInfo::getStartOffset() const
          {
            return env->callIntMethod(this$, mids$[mid_getStartOffset_54c6a179]);
          }

          ::java::util::List FieldPhraseList$WeightedPhraseInfo::getTermsInfos() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsInfos_87851566]));
          }

          ::java::util::List FieldPhraseList$WeightedPhraseInfo::getTermsOffsets() const
          {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTermsOffsets_87851566]));
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo::getText() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getText_14c7b5c5]));
          }

          jint FieldPhraseList$WeightedPhraseInfo::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean FieldPhraseList$WeightedPhraseInfo::isOffsetOverlap(const FieldPhraseList$WeightedPhraseInfo & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_isOffsetOverlap_3f58e085], a0.this$);
          }

          ::java::lang::String FieldPhraseList$WeightedPhraseInfo::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace vectorhighlight {
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FieldPhraseList$WeightedPhraseInfo_init_(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_compareTo(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_equals(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getBoost(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getSeqnum(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsInfos(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getText(t_FieldPhraseList$WeightedPhraseInfo *self);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_hashCode(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_isOffsetOverlap(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_toString(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__boost(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__seqnum(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsInfos(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__text(t_FieldPhraseList$WeightedPhraseInfo *self, void *data);
          static PyGetSetDef t_FieldPhraseList$WeightedPhraseInfo__fields_[] = {
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, boost),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, endOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, seqnum),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, startOffset),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, termsInfos),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, termsOffsets),
            DECLARE_GET_FIELD(t_FieldPhraseList$WeightedPhraseInfo, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldPhraseList$WeightedPhraseInfo__methods_[] = {
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, compareTo, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, equals, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getBoost, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getEndOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getSeqnum, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getStartOffset, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getTermsInfos, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getTermsOffsets, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, getText, METH_NOARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, isOffsetOverlap, METH_O),
            DECLARE_METHOD(t_FieldPhraseList$WeightedPhraseInfo, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldPhraseList$WeightedPhraseInfo, t_FieldPhraseList$WeightedPhraseInfo, ::java::lang::Object, FieldPhraseList$WeightedPhraseInfo, t_FieldPhraseList$WeightedPhraseInfo_init_, 0, 0, t_FieldPhraseList$WeightedPhraseInfo__fields_, 0, 0);

          void t_FieldPhraseList$WeightedPhraseInfo::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), module, "FieldPhraseList$WeightedPhraseInfo", 0);
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "Toffs", make_descriptor(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs)));
          }

          void t_FieldPhraseList$WeightedPhraseInfo::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "class_", make_descriptor(FieldPhraseList$WeightedPhraseInfo::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "wrapfn_", make_descriptor(t_FieldPhraseList$WeightedPhraseInfo::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldPhraseList$WeightedPhraseInfo).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldPhraseList$WeightedPhraseInfo::initializeClass, 1)))
              return NULL;
            return t_FieldPhraseList$WeightedPhraseInfo::wrap_Object(FieldPhraseList$WeightedPhraseInfo(((t_FieldPhraseList$WeightedPhraseInfo *) arg)->object.this$));
          }
          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldPhraseList$WeightedPhraseInfo::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FieldPhraseList$WeightedPhraseInfo_init_(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::util::Collection a0((jobject) NULL);
                PyTypeObject **p0;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::java::util::LinkedList a0((jobject) NULL);
                PyTypeObject **p0;
                jfloat a1;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "KF", ::java::util::LinkedList::initializeClass, &a0, &p0, ::java::util::t_LinkedList::parameters_, &a1))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::java::util::LinkedList a0((jobject) NULL);
                PyTypeObject **p0;
                jfloat a1;
                jint a2;
                FieldPhraseList$WeightedPhraseInfo object((jobject) NULL);

                if (!parseArgs(args, "KFI", ::java::util::LinkedList::initializeClass, &a0, &p0, ::java::util::t_LinkedList::parameters_, &a1, &a2))
                {
                  INT_CALL(object = FieldPhraseList$WeightedPhraseInfo(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_compareTo(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.compareTo(a0));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_equals(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getBoost(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getBoost());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getEndOffset(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getSeqnum(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getSeqnum());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getStartOffset(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStartOffset());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsInfos(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsInfos());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldTermStack$TermInfo));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getTermsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::util::List result((jobject) NULL);
            OBJ_CALL(result = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::search::vectorhighlight::PY_TYPE(FieldPhraseList$WeightedPhraseInfo$Toffs));
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_getText(t_FieldPhraseList$WeightedPhraseInfo *self)
          {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return j2p(result);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_hashCode(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_isOffsetOverlap(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *arg)
          {
            FieldPhraseList$WeightedPhraseInfo a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", FieldPhraseList$WeightedPhraseInfo::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.isOffsetOverlap(a0));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isOffsetOverlap", arg);
            return NULL;
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_toString(t_FieldPhraseList$WeightedPhraseInfo *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(FieldPhraseList$WeightedPhraseInfo), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__boost(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getBoost());
            return PyFloat_FromDouble((double) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__endOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__seqnum(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getSeqnum());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__startOffset(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStartOffset());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsInfos(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsInfos());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__termsOffsets(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::util::List value((jobject) NULL);
            OBJ_CALL(value = self->object.getTermsOffsets());
            return ::java::util::t_List::wrap_Object(value);
          }

          static PyObject *t_FieldPhraseList$WeightedPhraseInfo_get__text(t_FieldPhraseList$WeightedPhraseInfo *self, void *data)
          {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return j2p(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/VerifyingLockFactory.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/OutputStream.h"
#include "java/io/InputStream.h"
#include "org/apache/lucene/store/Lock.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *VerifyingLockFactory::class$ = NULL;
        jmethodID *VerifyingLockFactory::mids$ = NULL;
        bool VerifyingLockFactory::live$ = false;

        jclass VerifyingLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/VerifyingLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_118c9b94] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/LockFactory;Ljava/io/InputStream;Ljava/io/OutputStream;)V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        VerifyingLockFactory::VerifyingLockFactory(const ::org::apache::lucene::store::LockFactory & a0, const ::java::io::InputStream & a1, const ::java::io::OutputStream & a2) : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_118c9b94, a0.this$, a1.this$, a2.this$)) {}

        void VerifyingLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        ::org::apache::lucene::store::Lock VerifyingLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_VerifyingLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_VerifyingLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_VerifyingLockFactory_init_(t_VerifyingLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_VerifyingLockFactory_clearLock(t_VerifyingLockFactory *self, PyObject *args);
        static PyObject *t_VerifyingLockFactory_makeLock(t_VerifyingLockFactory *self, PyObject *args);

        static PyMethodDef t_VerifyingLockFactory__methods_[] = {
          DECLARE_METHOD(t_VerifyingLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VerifyingLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_VerifyingLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_VerifyingLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(VerifyingLockFactory, t_VerifyingLockFactory, ::org::apache::lucene::store::LockFactory, VerifyingLockFactory, t_VerifyingLockFactory_init_, 0, 0, 0, 0, 0);

        void t_VerifyingLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(VerifyingLockFactory), module, "VerifyingLockFactory", 0);
        }

        void t_VerifyingLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(VerifyingLockFactory).tp_dict, "class_", make_descriptor(VerifyingLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(VerifyingLockFactory).tp_dict, "wrapfn_", make_descriptor(t_VerifyingLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(VerifyingLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_VerifyingLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, VerifyingLockFactory::initializeClass, 1)))
            return NULL;
          return t_VerifyingLockFactory::wrap_Object(VerifyingLockFactory(((t_VerifyingLockFactory *) arg)->object.this$));
        }
        static PyObject *t_VerifyingLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, VerifyingLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_VerifyingLockFactory_init_(t_VerifyingLockFactory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::LockFactory a0((jobject) NULL);
          ::java::io::InputStream a1((jobject) NULL);
          ::java::io::OutputStream a2((jobject) NULL);
          VerifyingLockFactory object((jobject) NULL);

          if (!parseArgs(args, "kkk", ::org::apache::lucene::store::LockFactory::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::OutputStream::initializeClass, &a0, &a1, &a2))
          {
            INT_CALL(object = VerifyingLockFactory(a0, a1, a2));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_VerifyingLockFactory_clearLock(t_VerifyingLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(VerifyingLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_VerifyingLockFactory_makeLock(t_VerifyingLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(VerifyingLockFactory), (PyObject *) self, "makeLock", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/en/PorterStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {

          ::java::lang::Class *PorterStemFilter::class$ = NULL;
          jmethodID *PorterStemFilter::mids$ = NULL;
          bool PorterStemFilter::live$ = false;

          jclass PorterStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/en/PorterStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PorterStemFilter::PorterStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean PorterStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace en {
          static PyObject *t_PorterStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PorterStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PorterStemFilter_init_(t_PorterStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PorterStemFilter_incrementToken(t_PorterStemFilter *self, PyObject *args);

          static PyMethodDef t_PorterStemFilter__methods_[] = {
            DECLARE_METHOD(t_PorterStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PorterStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PorterStemFilter, t_PorterStemFilter, ::org::apache::lucene::analysis::TokenFilter, PorterStemFilter, t_PorterStemFilter_init_, 0, 0, 0, 0, 0);

          void t_PorterStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(PorterStemFilter), module, "PorterStemFilter", 0);
          }

          void t_PorterStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PorterStemFilter).tp_dict, "class_", make_descriptor(PorterStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PorterStemFilter).tp_dict, "wrapfn_", make_descriptor(t_PorterStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PorterStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PorterStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PorterStemFilter::initializeClass, 1)))
              return NULL;
            return t_PorterStemFilter::wrap_Object(PorterStemFilter(((t_PorterStemFilter *) arg)->object.this$));
          }
          static PyObject *t_PorterStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PorterStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PorterStemFilter_init_(t_PorterStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            PorterStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = PorterStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PorterStemFilter_incrementToken(t_PorterStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(PorterStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffect$NoAfterEffect.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffect$NoAfterEffect::class$ = NULL;
          jmethodID *AfterEffect$NoAfterEffect::mids$ = NULL;
          bool AfterEffect$NoAfterEffect::live$ = false;

          jclass AfterEffect$NoAfterEffect::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffect$NoAfterEffect");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffect$NoAfterEffect::AfterEffect$NoAfterEffect() : ::org::apache::lucene::search::similarities::AfterEffect(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffect$NoAfterEffect::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffect$NoAfterEffect::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffect$NoAfterEffect::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffect$NoAfterEffect_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffect$NoAfterEffect_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffect$NoAfterEffect_init_(t_AfterEffect$NoAfterEffect *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffect$NoAfterEffect_explain(t_AfterEffect$NoAfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect$NoAfterEffect_score(t_AfterEffect$NoAfterEffect *self, PyObject *args);
          static PyObject *t_AfterEffect$NoAfterEffect_toString(t_AfterEffect$NoAfterEffect *self, PyObject *args);

          static PyMethodDef t_AfterEffect$NoAfterEffect__methods_[] = {
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffect$NoAfterEffect, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffect$NoAfterEffect, t_AfterEffect$NoAfterEffect, ::org::apache::lucene::search::similarities::AfterEffect, AfterEffect$NoAfterEffect, t_AfterEffect$NoAfterEffect_init_, 0, 0, 0, 0, 0);

          void t_AfterEffect$NoAfterEffect::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffect$NoAfterEffect), module, "AfterEffect$NoAfterEffect", 0);
          }

          void t_AfterEffect$NoAfterEffect::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffect$NoAfterEffect).tp_dict, "class_", make_descriptor(AfterEffect$NoAfterEffect::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffect$NoAfterEffect).tp_dict, "wrapfn_", make_descriptor(t_AfterEffect$NoAfterEffect::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffect$NoAfterEffect).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffect$NoAfterEffect_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffect$NoAfterEffect::initializeClass, 1)))
              return NULL;
            return t_AfterEffect$NoAfterEffect::wrap_Object(AfterEffect$NoAfterEffect(((t_AfterEffect$NoAfterEffect *) arg)->object.this$));
          }
          static PyObject *t_AfterEffect$NoAfterEffect_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffect$NoAfterEffect::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffect$NoAfterEffect_init_(t_AfterEffect$NoAfterEffect *self, PyObject *args, PyObject *kwds)
          {
            AfterEffect$NoAfterEffect object((jobject) NULL);

            INT_CALL(object = AfterEffect$NoAfterEffect());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffect$NoAfterEffect_explain(t_AfterEffect$NoAfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(AfterEffect$NoAfterEffect), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_AfterEffect$NoAfterEffect_score(t_AfterEffect$NoAfterEffect *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AfterEffect$NoAfterEffect), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_AfterEffect$NoAfterEffect_toString(t_AfterEffect$NoAfterEffect *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffect$NoAfterEffect), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *WordBreakSpellChecker$BreakSuggestionSortMethod::class$ = NULL;
          jmethodID *WordBreakSpellChecker$BreakSuggestionSortMethod::mids$ = NULL;
          bool WordBreakSpellChecker$BreakSuggestionSortMethod::live$ = false;
          WordBreakSpellChecker$BreakSuggestionSortMethod *WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_MAX_FREQUENCY = NULL;
          WordBreakSpellChecker$BreakSuggestionSortMethod *WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_SUMMED_FREQUENCY = NULL;

          jclass WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod");

              mids$ = new jmethodID[max_mid];
              mids$[mid_valueOf_771dff8d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;");
              mids$[mid_values_39c0a317] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              NUM_CHANGES_THEN_MAX_FREQUENCY = new WordBreakSpellChecker$BreakSuggestionSortMethod(env->getStaticObjectField(cls, "NUM_CHANGES_THEN_MAX_FREQUENCY", "Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;"));
              NUM_CHANGES_THEN_SUMMED_FREQUENCY = new WordBreakSpellChecker$BreakSuggestionSortMethod(env->getStaticObjectField(cls, "NUM_CHANGES_THEN_SUMMED_FREQUENCY", "Lorg/apache/lucene/search/spell/WordBreakSpellChecker$BreakSuggestionSortMethod;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WordBreakSpellChecker$BreakSuggestionSortMethod WordBreakSpellChecker$BreakSuggestionSortMethod::valueOf(const ::java::lang::String & a0)
          {
            jclass cls = env->getClass(initializeClass);
            return WordBreakSpellChecker$BreakSuggestionSortMethod(env->callStaticObjectMethod(cls, mids$[mid_valueOf_771dff8d], a0.this$));
          }

          JArray< WordBreakSpellChecker$BreakSuggestionSortMethod > WordBreakSpellChecker$BreakSuggestionSortMethod::values()
          {
            jclass cls = env->getClass(initializeClass);
            return JArray< WordBreakSpellChecker$BreakSuggestionSortMethod >(env->callStaticObjectMethod(cls, mids$[mid_values_39c0a317]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_of_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, PyObject *args);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_valueOf(PyTypeObject *type, PyObject *args);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_values(PyTypeObject *type);
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_get__parameters_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, void *data);
          static PyGetSetDef t_WordBreakSpellChecker$BreakSuggestionSortMethod__fields_[] = {
            DECLARE_GET_FIELD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_WordBreakSpellChecker$BreakSuggestionSortMethod__methods_[] = {
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, of_, METH_VARARGS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, valueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_WordBreakSpellChecker$BreakSuggestionSortMethod, values, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod, t_WordBreakSpellChecker$BreakSuggestionSortMethod, ::java::lang::Enum, WordBreakSpellChecker$BreakSuggestionSortMethod, abstract_init, 0, 0, t_WordBreakSpellChecker$BreakSuggestionSortMethod__fields_, 0, 0);
          PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(const WordBreakSpellChecker$BreakSuggestionSortMethod& object, PyTypeObject *p0)
          {
            PyObject *obj = t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_WordBreakSpellChecker$BreakSuggestionSortMethod *self = (t_WordBreakSpellChecker$BreakSuggestionSortMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_WordBreakSpellChecker$BreakSuggestionSortMethod *self = (t_WordBreakSpellChecker$BreakSuggestionSortMethod *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_WordBreakSpellChecker$BreakSuggestionSortMethod::install(PyObject *module)
          {
            installType(&PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod), module, "WordBreakSpellChecker$BreakSuggestionSortMethod", 0);
          }

          void t_WordBreakSpellChecker$BreakSuggestionSortMethod::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "class_", make_descriptor(WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "wrapfn_", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass);
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "NUM_CHANGES_THEN_MAX_FREQUENCY", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(*WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_MAX_FREQUENCY)));
            PyDict_SetItemString(PY_TYPE(WordBreakSpellChecker$BreakSuggestionSortMethod).tp_dict, "NUM_CHANGES_THEN_SUMMED_FREQUENCY", make_descriptor(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(*WordBreakSpellChecker$BreakSuggestionSortMethod::NUM_CHANGES_THEN_SUMMED_FREQUENCY)));
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 1)))
              return NULL;
            return t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(WordBreakSpellChecker$BreakSuggestionSortMethod(((t_WordBreakSpellChecker$BreakSuggestionSortMethod *) arg)->object.this$));
          }
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WordBreakSpellChecker$BreakSuggestionSortMethod::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_of_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_valueOf(PyTypeObject *type, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            WordBreakSpellChecker$BreakSuggestionSortMethod result((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::valueOf(a0));
              return t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_Object(result);
            }

            return callSuper(type, "valueOf", args, 2);
          }

          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_values(PyTypeObject *type)
          {
            JArray< WordBreakSpellChecker$BreakSuggestionSortMethod > result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::search::spell::WordBreakSpellChecker$BreakSuggestionSortMethod::values());
            return JArray<jobject>(result.this$).wrap(t_WordBreakSpellChecker$BreakSuggestionSortMethod::wrap_jobject);
          }
          static PyObject *t_WordBreakSpellChecker$BreakSuggestionSortMethod_get__parameters_(t_WordBreakSpellChecker$BreakSuggestionSortMethod *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {

          ::java::lang::Class *LimitTokenCountFilter::class$ = NULL;
          jmethodID *LimitTokenCountFilter::mids$ = NULL;
          bool LimitTokenCountFilter::live$ = false;

          jclass LimitTokenCountFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/miscellaneous/LimitTokenCountFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d53bcf42] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;I)V");
              mids$[mid_init$_4f7f61d3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;IZ)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");
              mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LimitTokenCountFilter::LimitTokenCountFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_d53bcf42, a0.this$, a1)) {}

          LimitTokenCountFilter::LimitTokenCountFilter(const ::org::apache::lucene::analysis::TokenStream & a0, jint a1, jboolean a2) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_4f7f61d3, a0.this$, a1, a2)) {}

          jboolean LimitTokenCountFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }

          void LimitTokenCountFilter::reset() const
          {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace miscellaneous {
          static PyObject *t_LimitTokenCountFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LimitTokenCountFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LimitTokenCountFilter_init_(t_LimitTokenCountFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LimitTokenCountFilter_incrementToken(t_LimitTokenCountFilter *self, PyObject *args);
          static PyObject *t_LimitTokenCountFilter_reset(t_LimitTokenCountFilter *self, PyObject *args);

          static PyMethodDef t_LimitTokenCountFilter__methods_[] = {
            DECLARE_METHOD(t_LimitTokenCountFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LimitTokenCountFilter, incrementToken, METH_VARARGS),
            DECLARE_METHOD(t_LimitTokenCountFilter, reset, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LimitTokenCountFilter, t_LimitTokenCountFilter, ::org::apache::lucene::analysis::TokenFilter, LimitTokenCountFilter, t_LimitTokenCountFilter_init_, 0, 0, 0, 0, 0);

          void t_LimitTokenCountFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(LimitTokenCountFilter), module, "LimitTokenCountFilter", 0);
          }

          void t_LimitTokenCountFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilter).tp_dict, "class_", make_descriptor(LimitTokenCountFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilter).tp_dict, "wrapfn_", make_descriptor(t_LimitTokenCountFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LimitTokenCountFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LimitTokenCountFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LimitTokenCountFilter::initializeClass, 1)))
              return NULL;
            return t_LimitTokenCountFilter::wrap_Object(LimitTokenCountFilter(((t_LimitTokenCountFilter *) arg)->object.this$));
          }
          static PyObject *t_LimitTokenCountFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LimitTokenCountFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LimitTokenCountFilter_init_(t_LimitTokenCountFilter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 2:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                LimitTokenCountFilter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = LimitTokenCountFilter(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
                jint a1;
                jboolean a2;
                LimitTokenCountFilter object((jobject) NULL);

                if (!parseArgs(args, "kIZ", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1, &a2))
                {
                  INT_CALL(object = LimitTokenCountFilter(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LimitTokenCountFilter_incrementToken(t_LimitTokenCountFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(LimitTokenCountFilter), (PyObject *) self, "incrementToken", args, 2);
          }

          static PyObject *t_LimitTokenCountFilter_reset(t_LimitTokenCountFilter *self, PyObject *args)
          {

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(self->object.reset());
              Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(LimitTokenCountFilter), (PyObject *) self, "reset", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/tartarus/snowball/ext/ItalianStemmer.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {

        ::java::lang::Class *ItalianStemmer::class$ = NULL;
        jmethodID *ItalianStemmer::mids$ = NULL;
        bool ItalianStemmer::live$ = false;

        jclass ItalianStemmer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/tartarus/snowball/ext/ItalianStemmer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_stem_54c6a16a] = env->getMethodID(cls, "stem", "()Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ItalianStemmer::ItalianStemmer() : ::org::tartarus::snowball::SnowballProgram(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean ItalianStemmer::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint ItalianStemmer::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean ItalianStemmer::stem() const
        {
          return env->callBooleanMethod(this$, mids$[mid_stem_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace tartarus {
    namespace snowball {
      namespace ext {
        static PyObject *t_ItalianStemmer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ItalianStemmer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ItalianStemmer_init_(t_ItalianStemmer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ItalianStemmer_equals(t_ItalianStemmer *self, PyObject *args);
        static PyObject *t_ItalianStemmer_hashCode(t_ItalianStemmer *self, PyObject *args);
        static PyObject *t_ItalianStemmer_stem(t_ItalianStemmer *self, PyObject *args);

        static PyMethodDef t_ItalianStemmer__methods_[] = {
          DECLARE_METHOD(t_ItalianStemmer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ItalianStemmer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_ItalianStemmer, equals, METH_VARARGS),
          DECLARE_METHOD(t_ItalianStemmer, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_ItalianStemmer, stem, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ItalianStemmer, t_ItalianStemmer, ::org::tartarus::snowball::SnowballProgram, ItalianStemmer, t_ItalianStemmer_init_, 0, 0, 0, 0, 0);

        void t_ItalianStemmer::install(PyObject *module)
        {
          installType(&PY_TYPE(ItalianStemmer), module, "ItalianStemmer", 0);
        }

        void t_ItalianStemmer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(ItalianStemmer).tp_dict, "class_", make_descriptor(ItalianStemmer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(ItalianStemmer).tp_dict, "wrapfn_", make_descriptor(t_ItalianStemmer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(ItalianStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ItalianStemmer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, ItalianStemmer::initializeClass, 1)))
            return NULL;
          return t_ItalianStemmer::wrap_Object(ItalianStemmer(((t_ItalianStemmer *) arg)->object.this$));
        }
        static PyObject *t_ItalianStemmer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, ItalianStemmer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_ItalianStemmer_init_(t_ItalianStemmer *self, PyObject *args, PyObject *kwds)
        {
          ItalianStemmer object((jobject) NULL);

          INT_CALL(object = ItalianStemmer());
          self->object = object;

          return 0;
        }

        static PyObject *t_ItalianStemmer_equals(t_ItalianStemmer *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ItalianStemmer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_ItalianStemmer_hashCode(t_ItalianStemmer *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(ItalianStemmer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_ItalianStemmer_stem(t_ItalianStemmer *self, PyObject *args)
        {
          jboolean result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.stem());
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(ItalianStemmer), (PyObject *) self, "stem", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/gl/GalicianMinimalStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {

          ::java::lang::Class *GalicianMinimalStemmer::class$ = NULL;
          jmethodID *GalicianMinimalStemmer::mids$ = NULL;
          bool GalicianMinimalStemmer::live$ = false;

          jclass GalicianMinimalStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/gl/GalicianMinimalStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GalicianMinimalStemmer::GalicianMinimalStemmer() : ::org::apache::lucene::analysis::pt::RSLPStemmerBase(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint GalicianMinimalStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace gl {
          static PyObject *t_GalicianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GalicianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GalicianMinimalStemmer_init_(t_GalicianMinimalStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GalicianMinimalStemmer_stem(t_GalicianMinimalStemmer *self, PyObject *args);

          static PyMethodDef t_GalicianMinimalStemmer__methods_[] = {
            DECLARE_METHOD(t_GalicianMinimalStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GalicianMinimalStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GalicianMinimalStemmer, t_GalicianMinimalStemmer, ::org::apache::lucene::analysis::pt::RSLPStemmerBase, GalicianMinimalStemmer, t_GalicianMinimalStemmer_init_, 0, 0, 0, 0, 0);

          void t_GalicianMinimalStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(GalicianMinimalStemmer), module, "GalicianMinimalStemmer", 0);
          }

          void t_GalicianMinimalStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemmer).tp_dict, "class_", make_descriptor(GalicianMinimalStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemmer).tp_dict, "wrapfn_", make_descriptor(t_GalicianMinimalStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GalicianMinimalStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GalicianMinimalStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GalicianMinimalStemmer::initializeClass, 1)))
              return NULL;
            return t_GalicianMinimalStemmer::wrap_Object(GalicianMinimalStemmer(((t_GalicianMinimalStemmer *) arg)->object.this$));
          }
          static PyObject *t_GalicianMinimalStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GalicianMinimalStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GalicianMinimalStemmer_init_(t_GalicianMinimalStemmer *self, PyObject *args, PyObject *kwds)
          {
            GalicianMinimalStemmer object((jobject) NULL);

            INT_CALL(object = GalicianMinimalStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_GalicianMinimalStemmer_stem(t_GalicianMinimalStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/blocktree/FieldReader.h"
#include "java/util/Comparator.h"
#include "org/apache/lucene/util/automaton/CompiledAutomaton.h"
#include "org/apache/lucene/util/Accountable.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/codecs/blocktree/Stats.h"
#include "org/apache/lucene/index/TermsEnum.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {

          ::java::lang::Class *FieldReader::class$ = NULL;
          jmethodID *FieldReader::mids$ = NULL;
          bool FieldReader::live$ = false;

          jclass FieldReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/blocktree/FieldReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_computeStats_30b35506] = env->getMethodID(cls, "computeStats", "()Lorg/apache/lucene/codecs/blocktree/Stats;");
              mids$[mid_getComparator_5a7ff2fc] = env->getMethodID(cls, "getComparator", "()Ljava/util/Comparator;");
              mids$[mid_getDocCount_54c6a179] = env->getMethodID(cls, "getDocCount", "()I");
              mids$[mid_getMax_4ae19461] = env->getMethodID(cls, "getMax", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getMin_4ae19461] = env->getMethodID(cls, "getMin", "()Lorg/apache/lucene/util/BytesRef;");
              mids$[mid_getSumDocFreq_54c6a17a] = env->getMethodID(cls, "getSumDocFreq", "()J");
              mids$[mid_getSumTotalTermFreq_54c6a17a] = env->getMethodID(cls, "getSumTotalTermFreq", "()J");
              mids$[mid_hasFreqs_54c6a16a] = env->getMethodID(cls, "hasFreqs", "()Z");
              mids$[mid_hasOffsets_54c6a16a] = env->getMethodID(cls, "hasOffsets", "()Z");
              mids$[mid_hasPayloads_54c6a16a] = env->getMethodID(cls, "hasPayloads", "()Z");
              mids$[mid_hasPositions_54c6a16a] = env->getMethodID(cls, "hasPositions", "()Z");
              mids$[mid_intersect_b8f2b1bc] = env->getMethodID(cls, "intersect", "(Lorg/apache/lucene/util/automaton/CompiledAutomaton;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_iterator_d737078b] = env->getMethodID(cls, "iterator", "(Lorg/apache/lucene/index/TermsEnum;)Lorg/apache/lucene/index/TermsEnum;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_size_54c6a17a] = env->getMethodID(cls, "size", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ::org::apache::lucene::codecs::blocktree::Stats FieldReader::computeStats() const
          {
            return ::org::apache::lucene::codecs::blocktree::Stats(env->callObjectMethod(this$, mids$[mid_computeStats_30b35506]));
          }

          ::java::util::Comparator FieldReader::getComparator() const
          {
            return ::java::util::Comparator(env->callObjectMethod(this$, mids$[mid_getComparator_5a7ff2fc]));
          }

          jint FieldReader::getDocCount() const
          {
            return env->callIntMethod(this$, mids$[mid_getDocCount_54c6a179]);
          }

          ::org::apache::lucene::util::BytesRef FieldReader::getMax() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMax_4ae19461]));
          }

          ::org::apache::lucene::util::BytesRef FieldReader::getMin() const
          {
            return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getMin_4ae19461]));
          }

          jlong FieldReader::getSumDocFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getSumDocFreq_54c6a17a]);
          }

          jlong FieldReader::getSumTotalTermFreq() const
          {
            return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_54c6a17a]);
          }

          jboolean FieldReader::hasFreqs() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasFreqs_54c6a16a]);
          }

          jboolean FieldReader::hasOffsets() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasOffsets_54c6a16a]);
          }

          jboolean FieldReader::hasPayloads() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPayloads_54c6a16a]);
          }

          jboolean FieldReader::hasPositions() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasPositions_54c6a16a]);
          }

          ::org::apache::lucene::index::TermsEnum FieldReader::intersect(const ::org::apache::lucene::util::automaton::CompiledAutomaton & a0, const ::org::apache::lucene::util::BytesRef & a1) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_intersect_b8f2b1bc], a0.this$, a1.this$));
          }

          ::org::apache::lucene::index::TermsEnum FieldReader::iterator(const ::org::apache::lucene::index::TermsEnum & a0) const
          {
            return ::org::apache::lucene::index::TermsEnum(env->callObjectMethod(this$, mids$[mid_iterator_d737078b], a0.this$));
          }

          jlong FieldReader::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jlong FieldReader::size() const
          {
            return env->callLongMethod(this$, mids$[mid_size_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace blocktree {
          static PyObject *t_FieldReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldReader_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FieldReader_computeStats(t_FieldReader *self);
          static PyObject *t_FieldReader_getComparator(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getDocCount(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getMax(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getMin(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getSumDocFreq(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_getSumTotalTermFreq(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasFreqs(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasOffsets(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasPayloads(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_hasPositions(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_intersect(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_iterator(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_ramBytesUsed(t_FieldReader *self);
          static PyObject *t_FieldReader_size(t_FieldReader *self, PyObject *args);
          static PyObject *t_FieldReader_get__comparator(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__docCount(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__max(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__min(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__sumDocFreq(t_FieldReader *self, void *data);
          static PyObject *t_FieldReader_get__sumTotalTermFreq(t_FieldReader *self, void *data);
          static PyGetSetDef t_FieldReader__fields_[] = {
            DECLARE_GET_FIELD(t_FieldReader, comparator),
            DECLARE_GET_FIELD(t_FieldReader, docCount),
            DECLARE_GET_FIELD(t_FieldReader, max),
            DECLARE_GET_FIELD(t_FieldReader, min),
            DECLARE_GET_FIELD(t_FieldReader, sumDocFreq),
            DECLARE_GET_FIELD(t_FieldReader, sumTotalTermFreq),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FieldReader__methods_[] = {
            DECLARE_METHOD(t_FieldReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FieldReader, computeStats, METH_NOARGS),
            DECLARE_METHOD(t_FieldReader, getComparator, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getDocCount, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getMax, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getMin, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getSumDocFreq, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, getSumTotalTermFreq, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasFreqs, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasOffsets, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasPayloads, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, hasPositions, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, intersect, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, iterator, METH_VARARGS),
            DECLARE_METHOD(t_FieldReader, ramBytesUsed, METH_NOARGS),
            DECLARE_METHOD(t_FieldReader, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FieldReader, t_FieldReader, ::org::apache::lucene::index::Terms, FieldReader, abstract_init, 0, 0, t_FieldReader__fields_, 0, 0);

          void t_FieldReader::install(PyObject *module)
          {
            installType(&PY_TYPE(FieldReader), module, "FieldReader", 0);
          }

          void t_FieldReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FieldReader).tp_dict, "class_", make_descriptor(FieldReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FieldReader).tp_dict, "wrapfn_", make_descriptor(t_FieldReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FieldReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FieldReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FieldReader::initializeClass, 1)))
              return NULL;
            return t_FieldReader::wrap_Object(FieldReader(((t_FieldReader *) arg)->object.this$));
          }
          static PyObject *t_FieldReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FieldReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FieldReader_computeStats(t_FieldReader *self)
          {
            ::org::apache::lucene::codecs::blocktree::Stats result((jobject) NULL);
            OBJ_CALL(result = self->object.computeStats());
            return ::org::apache::lucene::codecs::blocktree::t_Stats::wrap_Object(result);
          }

          static PyObject *t_FieldReader_getComparator(t_FieldReader *self, PyObject *args)
          {
            ::java::util::Comparator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getComparator());
              return ::java::util::t_Comparator::wrap_Object(result, &::org::apache::lucene::util::PY_TYPE(BytesRef));
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getComparator", args, 2);
          }

          static PyObject *t_FieldReader_getDocCount(t_FieldReader *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getDocCount());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getDocCount", args, 2);
          }

          static PyObject *t_FieldReader_getMax(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMax());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getMax", args, 2);
          }

          static PyObject *t_FieldReader_getMin(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::BytesRef result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getMin());
              return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getMin", args, 2);
          }

          static PyObject *t_FieldReader_getSumDocFreq(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSumDocFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getSumDocFreq", args, 2);
          }

          static PyObject *t_FieldReader_getSumTotalTermFreq(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getSumTotalTermFreq());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "getSumTotalTermFreq", args, 2);
          }

          static PyObject *t_FieldReader_hasFreqs(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasFreqs());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasFreqs", args, 2);
          }

          static PyObject *t_FieldReader_hasOffsets(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasOffsets());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasOffsets", args, 2);
          }

          static PyObject *t_FieldReader_hasPayloads(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasPayloads());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasPayloads", args, 2);
          }

          static PyObject *t_FieldReader_hasPositions(t_FieldReader *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hasPositions());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "hasPositions", args, 2);
          }

          static PyObject *t_FieldReader_intersect(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::util::automaton::CompiledAutomaton a0((jobject) NULL);
            ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::automaton::CompiledAutomaton::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.intersect(a0, a1));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "intersect", args, 2);
          }

          static PyObject *t_FieldReader_iterator(t_FieldReader *self, PyObject *args)
          {
            ::org::apache::lucene::index::TermsEnum a0((jobject) NULL);
            ::org::apache::lucene::index::TermsEnum result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::index::TermsEnum::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.iterator(a0));
              return ::org::apache::lucene::index::t_TermsEnum::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_FieldReader_ramBytesUsed(t_FieldReader *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.ramBytesUsed());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          static PyObject *t_FieldReader_size(t_FieldReader *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.size());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(FieldReader), (PyObject *) self, "size", args, 2);
          }

          static PyObject *t_FieldReader_get__comparator(t_FieldReader *self, void *data)
          {
            ::java::util::Comparator value((jobject) NULL);
            OBJ_CALL(value = self->object.getComparator());
            return ::java::util::t_Comparator::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__docCount(t_FieldReader *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getDocCount());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_FieldReader_get__max(t_FieldReader *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getMax());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__min(t_FieldReader *self, void *data)
          {
            ::org::apache::lucene::util::BytesRef value((jobject) NULL);
            OBJ_CALL(value = self->object.getMin());
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
          }

          static PyObject *t_FieldReader_get__sumDocFreq(t_FieldReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getSumDocFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }

          static PyObject *t_FieldReader_get__sumTotalTermFreq(t_FieldReader *self, void *data)
          {
            jlong value;
            OBJ_CALL(value = self->object.getSumTotalTermFreq());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TermRangeFilter.h"
#include "org/apache/lucene/search/TermRangeQuery.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TermRangeFilter::class$ = NULL;
        jmethodID *TermRangeFilter::mids$ = NULL;
        bool TermRangeFilter::live$ = false;

        jclass TermRangeFilter::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TermRangeFilter");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_d3423b66] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;Lorg/apache/lucene/util/BytesRef;ZZ)V");
            mids$[mid_Less_b14e87bd] = env->getStaticMethodID(cls, "Less", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/search/TermRangeFilter;");
            mids$[mid_More_b14e87bd] = env->getStaticMethodID(cls, "More", "(Ljava/lang/String;Lorg/apache/lucene/util/BytesRef;)Lorg/apache/lucene/search/TermRangeFilter;");
            mids$[mid_getLowerTerm_4ae19461] = env->getMethodID(cls, "getLowerTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getUpperTerm_4ae19461] = env->getMethodID(cls, "getUpperTerm", "()Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_includesLower_54c6a16a] = env->getMethodID(cls, "includesLower", "()Z");
            mids$[mid_includesUpper_54c6a16a] = env->getMethodID(cls, "includesUpper", "()Z");
            mids$[mid_newStringRange_f9802b7d] = env->getStaticMethodID(cls, "newStringRange", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZZ)Lorg/apache/lucene/search/TermRangeFilter;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TermRangeFilter::TermRangeFilter(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1, const ::org::apache::lucene::util::BytesRef & a2, jboolean a3, jboolean a4) : ::org::apache::lucene::search::MultiTermQueryWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_d3423b66, a0.this$, a1.this$, a2.this$, a3, a4)) {}

        TermRangeFilter TermRangeFilter::Less(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_Less_b14e87bd], a0.this$, a1.this$));
        }

        TermRangeFilter TermRangeFilter::More(const ::java::lang::String & a0, const ::org::apache::lucene::util::BytesRef & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_More_b14e87bd], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::BytesRef TermRangeFilter::getLowerTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getLowerTerm_4ae19461]));
        }

        ::org::apache::lucene::util::BytesRef TermRangeFilter::getUpperTerm() const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getUpperTerm_4ae19461]));
        }

        jboolean TermRangeFilter::includesLower() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesLower_54c6a16a]);
        }

        jboolean TermRangeFilter::includesUpper() const
        {
          return env->callBooleanMethod(this$, mids$[mid_includesUpper_54c6a16a]);
        }

        TermRangeFilter TermRangeFilter::newStringRange(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3, jboolean a4)
        {
          jclass cls = env->getClass(initializeClass);
          return TermRangeFilter(env->callStaticObjectMethod(cls, mids$[mid_newStringRange_f9802b7d], a0.this$, a1.this$, a2.this$, a3, a4));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TermRangeFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TermRangeFilter_of_(t_TermRangeFilter *self, PyObject *args);
        static int t_TermRangeFilter_init_(t_TermRangeFilter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TermRangeFilter_Less(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeFilter_More(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeFilter_getLowerTerm(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_getUpperTerm(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_includesLower(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_includesUpper(t_TermRangeFilter *self);
        static PyObject *t_TermRangeFilter_newStringRange(PyTypeObject *type, PyObject *args);
        static PyObject *t_TermRangeFilter_get__lowerTerm(t_TermRangeFilter *self, void *data);
        static PyObject *t_TermRangeFilter_get__upperTerm(t_TermRangeFilter *self, void *data);
        static PyObject *t_TermRangeFilter_get__parameters_(t_TermRangeFilter *self, void *data);
        static PyGetSetDef t_TermRangeFilter__fields_[] = {
          DECLARE_GET_FIELD(t_TermRangeFilter, lowerTerm),
          DECLARE_GET_FIELD(t_TermRangeFilter, upperTerm),
          DECLARE_GET_FIELD(t_TermRangeFilter, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TermRangeFilter__methods_[] = {
          DECLARE_METHOD(t_TermRangeFilter, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, of_, METH_VARARGS),
          DECLARE_METHOD(t_TermRangeFilter, Less, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, More, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_TermRangeFilter, getLowerTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, getUpperTerm, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, includesLower, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, includesUpper, METH_NOARGS),
          DECLARE_METHOD(t_TermRangeFilter, newStringRange, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TermRangeFilter, t_TermRangeFilter, ::org::apache::lucene::search::MultiTermQueryWrapperFilter, TermRangeFilter, t_TermRangeFilter_init_, 0, 0, t_TermRangeFilter__fields_, 0, 0);
        PyObject *t_TermRangeFilter::wrap_Object(const TermRangeFilter& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermRangeFilter::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermRangeFilter *self = (t_TermRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TermRangeFilter::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TermRangeFilter::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TermRangeFilter *self = (t_TermRangeFilter *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TermRangeFilter::install(PyObject *module)
        {
          installType(&PY_TYPE(TermRangeFilter), module, "TermRangeFilter", 0);
        }

        void t_TermRangeFilter::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TermRangeFilter).tp_dict, "class_", make_descriptor(TermRangeFilter::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TermRangeFilter).tp_dict, "wrapfn_", make_descriptor(t_TermRangeFilter::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TermRangeFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TermRangeFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TermRangeFilter::initializeClass, 1)))
            return NULL;
          return t_TermRangeFilter::wrap_Object(TermRangeFilter(((t_TermRangeFilter *) arg)->object.this$));
        }
        static PyObject *t_TermRangeFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TermRangeFilter::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TermRangeFilter_of_(t_TermRangeFilter *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TermRangeFilter_init_(t_TermRangeFilter *self, PyObject *args, PyObject *kwds)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeFilter object((jobject) NULL);

          if (!parseArgs(args, "skkZZ", ::org::apache::lucene::util::BytesRef::initializeClass, ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1, &a2, &a3, &a4))
          {
            INT_CALL(object = TermRangeFilter(a0, a1, a2, a3, a4));
            self->object = object;
            self->parameters[0] = &::org::apache::lucene::search::PY_TYPE(TermRangeQuery);
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TermRangeFilter_Less(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          TermRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeFilter::Less(a0, a1));
            return t_TermRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "Less", args);
          return NULL;
        }

        static PyObject *t_TermRangeFilter_More(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef a1((jobject) NULL);
          TermRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::util::BytesRef::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeFilter::More(a0, a1));
            return t_TermRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "More", args);
          return NULL;
        }

        static PyObject *t_TermRangeFilter_getLowerTerm(t_TermRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeFilter_getUpperTerm(t_TermRangeFilter *self)
        {
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);
          OBJ_CALL(result = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
        }

        static PyObject *t_TermRangeFilter_includesLower(t_TermRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesLower());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeFilter_includesUpper(t_TermRangeFilter *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.includesUpper());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_TermRangeFilter_newStringRange(PyTypeObject *type, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::java::lang::String a2((jobject) NULL);
          jboolean a3;
          jboolean a4;
          TermRangeFilter result((jobject) NULL);

          if (!parseArgs(args, "sssZZ", &a0, &a1, &a2, &a3, &a4))
          {
            OBJ_CALL(result = ::org::apache::lucene::search::TermRangeFilter::newStringRange(a0, a1, a2, a3, a4));
            return t_TermRangeFilter::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "newStringRange", args);
          return NULL;
        }
        static PyObject *t_TermRangeFilter_get__parameters_(t_TermRangeFilter *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TermRangeFilter_get__lowerTerm(t_TermRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getLowerTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }

        static PyObject *t_TermRangeFilter_get__upperTerm(t_TermRangeFilter *self, void *data)
        {
          ::org::apache::lucene::util::BytesRef value((jobject) NULL);
          OBJ_CALL(value = self->object.getUpperTerm());
          return ::org::apache::lucene::util::t_BytesRef::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {

          ::java::lang::Class *FixedBitSetCachingWrapperFilter::class$ = NULL;
          jmethodID *FixedBitSetCachingWrapperFilter::mids$ = NULL;
          bool FixedBitSetCachingWrapperFilter::live$ = false;

          jclass FixedBitSetCachingWrapperFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/join/FixedBitSetCachingWrapperFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_9bb37152] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Filter;)V");
              mids$[mid_docIdSetToCache_5fee2a54] = env->getMethodID(cls, "docIdSetToCache", "(Lorg/apache/lucene/search/DocIdSet;Lorg/apache/lucene/index/AtomicReader;)Lorg/apache/lucene/search/DocIdSet;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FixedBitSetCachingWrapperFilter::FixedBitSetCachingWrapperFilter(const ::org::apache::lucene::search::Filter & a0) : ::org::apache::lucene::search::CachingWrapperFilter(env->newObject(initializeClass, &mids$, mid_init$_9bb37152, a0.this$)) {}
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace join {
          static PyObject *t_FixedBitSetCachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FixedBitSetCachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FixedBitSetCachingWrapperFilter_init_(t_FixedBitSetCachingWrapperFilter *self, PyObject *args, PyObject *kwds);

          static PyMethodDef t_FixedBitSetCachingWrapperFilter__methods_[] = {
            DECLARE_METHOD(t_FixedBitSetCachingWrapperFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FixedBitSetCachingWrapperFilter, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FixedBitSetCachingWrapperFilter, t_FixedBitSetCachingWrapperFilter, ::org::apache::lucene::search::CachingWrapperFilter, FixedBitSetCachingWrapperFilter, t_FixedBitSetCachingWrapperFilter_init_, 0, 0, 0, 0, 0);

          void t_FixedBitSetCachingWrapperFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FixedBitSetCachingWrapperFilter), module, "FixedBitSetCachingWrapperFilter", 0);
          }

          void t_FixedBitSetCachingWrapperFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FixedBitSetCachingWrapperFilter).tp_dict, "class_", make_descriptor(FixedBitSetCachingWrapperFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FixedBitSetCachingWrapperFilter).tp_dict, "wrapfn_", make_descriptor(t_FixedBitSetCachingWrapperFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FixedBitSetCachingWrapperFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FixedBitSetCachingWrapperFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FixedBitSetCachingWrapperFilter::initializeClass, 1)))
              return NULL;
            return t_FixedBitSetCachingWrapperFilter::wrap_Object(FixedBitSetCachingWrapperFilter(((t_FixedBitSetCachingWrapperFilter *) arg)->object.this$));
          }
          static PyObject *t_FixedBitSetCachingWrapperFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FixedBitSetCachingWrapperFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FixedBitSetCachingWrapperFilter_init_(t_FixedBitSetCachingWrapperFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::search::Filter a0((jobject) NULL);
            FixedBitSetCachingWrapperFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::Filter::initializeClass, &a0))
            {
              INT_CALL(object = FixedBitSetCachingWrapperFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sv/SwedishLightStemmer.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {

          ::java::lang::Class *SwedishLightStemmer::class$ = NULL;
          jmethodID *SwedishLightStemmer::mids$ = NULL;
          bool SwedishLightStemmer::live$ = false;

          jclass SwedishLightStemmer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sv/SwedishLightStemmer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_stem_ec6430eb] = env->getMethodID(cls, "stem", "([CI)I");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SwedishLightStemmer::SwedishLightStemmer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jint SwedishLightStemmer::stem(const JArray< jchar > & a0, jint a1) const
          {
            return env->callIntMethod(this$, mids$[mid_stem_ec6430eb], a0.this$, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sv {
          static PyObject *t_SwedishLightStemmer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SwedishLightStemmer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SwedishLightStemmer_init_(t_SwedishLightStemmer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SwedishLightStemmer_stem(t_SwedishLightStemmer *self, PyObject *args);

          static PyMethodDef t_SwedishLightStemmer__methods_[] = {
            DECLARE_METHOD(t_SwedishLightStemmer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemmer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SwedishLightStemmer, stem, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SwedishLightStemmer, t_SwedishLightStemmer, ::java::lang::Object, SwedishLightStemmer, t_SwedishLightStemmer_init_, 0, 0, 0, 0, 0);

          void t_SwedishLightStemmer::install(PyObject *module)
          {
            installType(&PY_TYPE(SwedishLightStemmer), module, "SwedishLightStemmer", 0);
          }

          void t_SwedishLightStemmer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SwedishLightStemmer).tp_dict, "class_", make_descriptor(SwedishLightStemmer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemmer).tp_dict, "wrapfn_", make_descriptor(t_SwedishLightStemmer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SwedishLightStemmer).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SwedishLightStemmer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SwedishLightStemmer::initializeClass, 1)))
              return NULL;
            return t_SwedishLightStemmer::wrap_Object(SwedishLightStemmer(((t_SwedishLightStemmer *) arg)->object.this$));
          }
          static PyObject *t_SwedishLightStemmer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SwedishLightStemmer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SwedishLightStemmer_init_(t_SwedishLightStemmer *self, PyObject *args, PyObject *kwds)
          {
            SwedishLightStemmer object((jobject) NULL);

            INT_CALL(object = SwedishLightStemmer());
            self->object = object;

            return 0;
          }

          static PyObject *t_SwedishLightStemmer_stem(t_SwedishLightStemmer *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint result;

            if (!parseArgs(args, "[CI", &a0, &a1))
            {
              OBJ_CALL(result = self->object.stem(a0, a1));
              return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "stem", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/document/Document.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "java/lang/Iterable.h"
#include "org/apache/lucene/index/IndexableField.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {

        ::java::lang::Class *Document::class$ = NULL;
        jmethodID *Document::mids$ = NULL;
        bool Document::live$ = false;

        jclass Document::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/document/Document");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_d86aadad] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/IndexableField;)V");
            mids$[mid_get_97a5258f] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Ljava/lang/String;");
            mids$[mid_getBinaryValue_14551a1f] = env->getMethodID(cls, "getBinaryValue", "(Ljava/lang/String;)Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getBinaryValues_eb7e4f07] = env->getMethodID(cls, "getBinaryValues", "(Ljava/lang/String;)[Lorg/apache/lucene/util/BytesRef;");
            mids$[mid_getField_3e59ba6e] = env->getMethodID(cls, "getField", "(Ljava/lang/String;)Lorg/apache/lucene/index/IndexableField;");
            mids$[mid_getFields_87851566] = env->getMethodID(cls, "getFields", "()Ljava/util/List;");
            mids$[mid_getFields_0aa85a96] = env->getMethodID(cls, "getFields", "(Ljava/lang/String;)[Lorg/apache/lucene/index/IndexableField;");
            mids$[mid_getValues_1f6a174f] = env->getMethodID(cls, "getValues", "(Ljava/lang/String;)[Ljava/lang/String;");
            mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
            mids$[mid_removeField_5fdc3f48] = env->getMethodID(cls, "removeField", "(Ljava/lang/String;)V");
            mids$[mid_removeFields_5fdc3f48] = env->getMethodID(cls, "removeFields", "(Ljava/lang/String;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Document::Document() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void Document::add(const ::org::apache::lucene::index::IndexableField & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_d86aadad], a0.this$);
        }

        ::java::lang::String Document::get(const ::java::lang::String & a0) const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_get_97a5258f], a0.this$));
        }

        ::org::apache::lucene::util::BytesRef Document::getBinaryValue(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::util::BytesRef(env->callObjectMethod(this$, mids$[mid_getBinaryValue_14551a1f], a0.this$));
        }

        JArray< ::org::apache::lucene::util::BytesRef > Document::getBinaryValues(const ::java::lang::String & a0) const
        {
          return JArray< ::org::apache::lucene::util::BytesRef >(env->callObjectMethod(this$, mids$[mid_getBinaryValues_eb7e4f07], a0.this$));
        }

        ::org::apache::lucene::index::IndexableField Document::getField(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::index::IndexableField(env->callObjectMethod(this$, mids$[mid_getField_3e59ba6e], a0.this$));
        }

        ::java::util::List Document::getFields() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFields_87851566]));
        }

        JArray< ::org::apache::lucene::index::IndexableField > Document::getFields(const ::java::lang::String & a0) const
        {
          return JArray< ::org::apache::lucene::index::IndexableField >(env->callObjectMethod(this$, mids$[mid_getFields_0aa85a96], a0.this$));
        }

        JArray< ::java::lang::String > Document::getValues(const ::java::lang::String & a0) const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_getValues_1f6a174f], a0.this$));
        }

        ::java::util::Iterator Document::iterator() const
        {
          return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        void Document::removeField(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeField_5fdc3f48], a0.this$);
        }

        void Document::removeFields(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeFields_5fdc3f48], a0.this$);
        }

        ::java::lang::String Document::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace document {
        static PyObject *t_Document_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Document_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Document_init_(t_Document *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Document_add(t_Document *self, PyObject *arg);
        static PyObject *t_Document_get(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getBinaryValue(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getBinaryValues(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getField(t_Document *self, PyObject *arg);
        static PyObject *t_Document_getFields(t_Document *self, PyObject *args);
        static PyObject *t_Document_getValues(t_Document *self, PyObject *arg);
        static PyObject *t_Document_iterator(t_Document *self);
        static PyObject *t_Document_removeField(t_Document *self, PyObject *arg);
        static PyObject *t_Document_removeFields(t_Document *self, PyObject *arg);
        static PyObject *t_Document_toString(t_Document *self, PyObject *args);
        static PyObject *t_Document_get__fields(t_Document *self, void *data);
        static PyGetSetDef t_Document__fields_[] = {
          DECLARE_GET_FIELD(t_Document, fields),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Document__methods_[] = {
          DECLARE_METHOD(t_Document, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Document, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Document, add, METH_O),
          DECLARE_METHOD(t_Document, get, METH_O),
          DECLARE_METHOD(t_Document, getBinaryValue, METH_O),
          DECLARE_METHOD(t_Document, getBinaryValues, METH_O),
          DECLARE_METHOD(t_Document, getField, METH_O),
          DECLARE_METHOD(t_Document, getFields, METH_VARARGS),
          DECLARE_METHOD(t_Document, getValues, METH_O),
          DECLARE_METHOD(t_Document, iterator, METH_NOARGS),
          DECLARE_METHOD(t_Document, removeField, METH_O),
          DECLARE_METHOD(t_Document, removeFields, METH_O),
          DECLARE_METHOD(t_Document, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        static PyMappingMethods t_Document_as_mapping = {
          0,
          (binaryfunc) t_Document_get,
          0,
        };

        DECLARE_TYPE(Document, t_Document, ::java::lang::Object, Document, t_Document_init_, ((PyObject *(*)(t_Document *)) get_iterator< t_Document >), 0, t_Document__fields_, &t_Document_as_mapping, 0);

        void t_Document::install(PyObject *module)
        {
          installType(&PY_TYPE(Document), module, "Document", 0);
        }

        void t_Document::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Document).tp_dict, "class_", make_descriptor(Document::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Document).tp_dict, "wrapfn_", make_descriptor(t_Document::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Document).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Document_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Document::initializeClass, 1)))
            return NULL;
          return t_Document::wrap_Object(Document(((t_Document *) arg)->object.this$));
        }
        static PyObject *t_Document_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Document::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Document_init_(t_Document *self, PyObject *args, PyObject *kwds)
        {
          Document object((jobject) NULL);

          INT_CALL(object = Document());
          self->object = object;

          return 0;
        }

        static PyObject *t_Document_add(t_Document *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexableField a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexableField::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }

        static PyObject *t_Document_get(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return j2p(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_Document_getBinaryValue(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::util::BytesRef result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryValue(a0));
            return ::org::apache::lucene::util::t_BytesRef::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryValue", arg);
          return NULL;
        }

        static PyObject *t_Document_getBinaryValues(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::org::apache::lucene::util::BytesRef > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getBinaryValues(a0));
            return JArray<jobject>(result.this$).wrap(::org::apache::lucene::util::t_BytesRef::wrap_jobject);
          }

          PyErr_SetArgsError((PyObject *) self, "getBinaryValues", arg);
          return NULL;
        }

        static PyObject *t_Document_getField(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::index::IndexableField result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getField(a0));
            return ::org::apache::lucene::index::t_IndexableField::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getField", arg);
          return NULL;
        }

        static PyObject *t_Document_getFields(t_Document *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              ::java::util::List result((jobject) NULL);
              OBJ_CALL(result = self->object.getFields());
              return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexableField));
            }
            break;
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              JArray< ::org::apache::lucene::index::IndexableField > result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = self->object.getFields(a0));
                return JArray<jobject>(result.this$).wrap(::org::apache::lucene::index::t_IndexableField::wrap_jobject);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "getFields", args);
          return NULL;
        }

        static PyObject *t_Document_getValues(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getValues(a0));
            return JArray<jstring>(result.this$).wrap();
          }

          PyErr_SetArgsError((PyObject *) self, "getValues", arg);
          return NULL;
        }

        static PyObject *t_Document_iterator(t_Document *self)
        {
          ::java::util::Iterator result((jobject) NULL);
          OBJ_CALL(result = self->object.iterator());
          return ::java::util::t_Iterator::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(IndexableField));
        }

        static PyObject *t_Document_removeField(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.removeField(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeField", arg);
          return NULL;
        }

        static PyObject *t_Document_removeFields(t_Document *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.removeFields(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeFields", arg);
          return NULL;
        }

        static PyObject *t_Document_toString(t_Document *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(Document), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Document_get__fields(t_Document *self, void *data)
        {
          ::java::util::List value((jobject) NULL);
          OBJ_CALL(value = self->object.getFields());
          return ::java::util::t_List::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/messages/QueryParserMessages.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace messages {

              ::java::lang::Class *QueryParserMessages::class$ = NULL;
              jmethodID *QueryParserMessages::mids$ = NULL;
              bool QueryParserMessages::live$ = false;
              ::java::lang::String *QueryParserMessages::COULD_NOT_PARSE_NUMBER = NULL;
              ::java::lang::String *QueryParserMessages::EMPTY_MESSAGE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_CANNOT_PARSE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_CHARACTER = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_FUZZY_EDITS = NULL;
              ::java::lang::String *QueryParserMessages::INVALID_SYNTAX_FUZZY_LIMITS = NULL;
              ::java::lang::String *QueryParserMessages::LEADING_WILDCARD_NOT_ALLOWED = NULL;
              ::java::lang::String *QueryParserMessages::LUCENE_QUERY_CONVERSION_ERROR = NULL;
              ::java::lang::String *QueryParserMessages::NODE_ACTION_NOT_SUPPORTED = NULL;
              ::java::lang::String *QueryParserMessages::NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY = NULL;
              ::java::lang::String *QueryParserMessages::NUMERIC_CANNOT_BE_EMPTY = NULL;
              ::java::lang::String *QueryParserMessages::PARAMETER_VALUE_NOT_SUPPORTED = NULL;
              ::java::lang::String *QueryParserMessages::TOO_MANY_BOOLEAN_CLAUSES = NULL;
              ::java::lang::String *QueryParserMessages::UNSUPPORTED_NUMERIC_DATA_TYPE = NULL;
              ::java::lang::String *QueryParserMessages::WILDCARD_NOT_SUPPORTED = NULL;

              jclass QueryParserMessages::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/messages/QueryParserMessages");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  cls = (jclass) class$->this$;

                  COULD_NOT_PARSE_NUMBER = new ::java::lang::String(env->getStaticObjectField(cls, "COULD_NOT_PARSE_NUMBER", "Ljava/lang/String;"));
                  EMPTY_MESSAGE = new ::java::lang::String(env->getStaticObjectField(cls, "EMPTY_MESSAGE", "Ljava/lang/String;"));
                  INVALID_SYNTAX = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX", "Ljava/lang/String;"));
                  INVALID_SYNTAX_CANNOT_PARSE = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_CANNOT_PARSE", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_CHARACTER = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_CHARACTER", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE", "Ljava/lang/String;"));
                  INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION", "Ljava/lang/String;"));
                  INVALID_SYNTAX_FUZZY_EDITS = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_FUZZY_EDITS", "Ljava/lang/String;"));
                  INVALID_SYNTAX_FUZZY_LIMITS = new ::java::lang::String(env->getStaticObjectField(cls, "INVALID_SYNTAX_FUZZY_LIMITS", "Ljava/lang/String;"));
                  LEADING_WILDCARD_NOT_ALLOWED = new ::java::lang::String(env->getStaticObjectField(cls, "LEADING_WILDCARD_NOT_ALLOWED", "Ljava/lang/String;"));
                  LUCENE_QUERY_CONVERSION_ERROR = new ::java::lang::String(env->getStaticObjectField(cls, "LUCENE_QUERY_CONVERSION_ERROR", "Ljava/lang/String;"));
                  NODE_ACTION_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "NODE_ACTION_NOT_SUPPORTED", "Ljava/lang/String;"));
                  NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY = new ::java::lang::String(env->getStaticObjectField(cls, "NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY", "Ljava/lang/String;"));
                  NUMERIC_CANNOT_BE_EMPTY = new ::java::lang::String(env->getStaticObjectField(cls, "NUMERIC_CANNOT_BE_EMPTY", "Ljava/lang/String;"));
                  PARAMETER_VALUE_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "PARAMETER_VALUE_NOT_SUPPORTED", "Ljava/lang/String;"));
                  TOO_MANY_BOOLEAN_CLAUSES = new ::java::lang::String(env->getStaticObjectField(cls, "TOO_MANY_BOOLEAN_CLAUSES", "Ljava/lang/String;"));
                  UNSUPPORTED_NUMERIC_DATA_TYPE = new ::java::lang::String(env->getStaticObjectField(cls, "UNSUPPORTED_NUMERIC_DATA_TYPE", "Ljava/lang/String;"));
                  WILDCARD_NOT_SUPPORTED = new ::java::lang::String(env->getStaticObjectField(cls, "WILDCARD_NOT_SUPPORTED", "Ljava/lang/String;"));
                  live$ = true;
                }
                return (jclass) class$->this$;
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace messages {
              static PyObject *t_QueryParserMessages_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_QueryParserMessages_instance_(PyTypeObject *type, PyObject *arg);

              static PyMethodDef t_QueryParserMessages__methods_[] = {
                DECLARE_METHOD(t_QueryParserMessages, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_QueryParserMessages, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(QueryParserMessages, t_QueryParserMessages, ::org::apache::lucene::queryparser::flexible::messages::NLS, QueryParserMessages, abstract_init, 0, 0, 0, 0, 0);

              void t_QueryParserMessages::install(PyObject *module)
              {
                installType(&PY_TYPE(QueryParserMessages), module, "QueryParserMessages", 0);
              }

              void t_QueryParserMessages::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "class_", make_descriptor(QueryParserMessages::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "wrapfn_", make_descriptor(t_QueryParserMessages::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "boxfn_", make_descriptor(boxObject));
                env->getClass(QueryParserMessages::initializeClass);
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "COULD_NOT_PARSE_NUMBER", make_descriptor(j2p(*QueryParserMessages::COULD_NOT_PARSE_NUMBER)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "EMPTY_MESSAGE", make_descriptor(j2p(*QueryParserMessages::EMPTY_MESSAGE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_CANNOT_PARSE", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_CANNOT_PARSE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_ESCAPE_CHARACTER", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_CHARACTER)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_NONE_HEX_UNICODE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_ESCAPE_UNICODE_TRUNCATION)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_FUZZY_EDITS", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_FUZZY_EDITS)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "INVALID_SYNTAX_FUZZY_LIMITS", make_descriptor(j2p(*QueryParserMessages::INVALID_SYNTAX_FUZZY_LIMITS)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "LEADING_WILDCARD_NOT_ALLOWED", make_descriptor(j2p(*QueryParserMessages::LEADING_WILDCARD_NOT_ALLOWED)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "LUCENE_QUERY_CONVERSION_ERROR", make_descriptor(j2p(*QueryParserMessages::LUCENE_QUERY_CONVERSION_ERROR)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "NODE_ACTION_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::NODE_ACTION_NOT_SUPPORTED)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY", make_descriptor(j2p(*QueryParserMessages::NUMBER_CLASS_NOT_SUPPORTED_BY_NUMERIC_RANGE_QUERY)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "NUMERIC_CANNOT_BE_EMPTY", make_descriptor(j2p(*QueryParserMessages::NUMERIC_CANNOT_BE_EMPTY)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "PARAMETER_VALUE_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::PARAMETER_VALUE_NOT_SUPPORTED)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "TOO_MANY_BOOLEAN_CLAUSES", make_descriptor(j2p(*QueryParserMessages::TOO_MANY_BOOLEAN_CLAUSES)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "UNSUPPORTED_NUMERIC_DATA_TYPE", make_descriptor(j2p(*QueryParserMessages::UNSUPPORTED_NUMERIC_DATA_TYPE)));
                PyDict_SetItemString(PY_TYPE(QueryParserMessages).tp_dict, "WILDCARD_NOT_SUPPORTED", make_descriptor(j2p(*QueryParserMessages::WILDCARD_NOT_SUPPORTED)));
              }

              static PyObject *t_QueryParserMessages_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, QueryParserMessages::initializeClass, 1)))
                  return NULL;
                return t_QueryParserMessages::wrap_Object(QueryParserMessages(((t_QueryParserMessages *) arg)->object.this$));
              }
              static PyObject *t_QueryParserMessages_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, QueryParserMessages::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/CheckIndex$Status$TermVectorStatus.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *CheckIndex$Status$TermVectorStatus::class$ = NULL;
        jmethodID *CheckIndex$Status$TermVectorStatus::mids$ = NULL;
        jfieldID *CheckIndex$Status$TermVectorStatus::fids$ = NULL;
        bool CheckIndex$Status$TermVectorStatus::live$ = false;

        jclass CheckIndex$Status$TermVectorStatus::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/CheckIndex$Status$TermVectorStatus");

            fids$ = new jfieldID[max_fid];
            fids$[fid_docCount] = env->getFieldID(cls, "docCount", "I");
            fids$[fid_error] = env->getFieldID(cls, "error", "Ljava/lang/Throwable;");
            fids$[fid_totVectors] = env->getFieldID(cls, "totVectors", "J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint CheckIndex$Status$TermVectorStatus::_get_docCount() const
        {
          return env->getIntField(this$, fids$[fid_docCount]);
        }

        void CheckIndex$Status$TermVectorStatus::_set_docCount(jint a0) const
        {
          env->setIntField(this$, fids$[fid_docCount], a0);
        }

        ::java::lang::Throwable CheckIndex$Status$TermVectorStatus::_get_error() const
        {
          return ::java::lang::Throwable(env->getObjectField(this$, fids$[fid_error]));
        }

        void CheckIndex$Status$TermVectorStatus::_set_error(const ::java::lang::Throwable & a0) const
        {
          env->setObjectField(this$, fids$[fid_error], a0.this$);
        }

        jlong CheckIndex$Status$TermVectorStatus::_get_totVectors() const
        {
          return env->getLongField(this$, fids$[fid_totVectors]);
        }

        void CheckIndex$Status$TermVectorStatus::_set_totVectors(jlong a0) const
        {
          env->setLongField(this$, fids$[fid_totVectors], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_CheckIndex$Status$TermVectorStatus_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__docCount(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__docCount(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__error(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__error(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);
        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__totVectors(t_CheckIndex$Status$TermVectorStatus *self, void *data);
        static int t_CheckIndex$Status$TermVectorStatus_set__totVectors(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data);

        static PyGetSetDef t_CheckIndex$Status$TermVectorStatus__fields_[] = {
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, docCount),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, error),
          DECLARE_GETSET_FIELD(t_CheckIndex$Status$TermVectorStatus, totVectors),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CheckIndex$Status$TermVectorStatus__methods_[] = {
          DECLARE_METHOD(t_CheckIndex$Status$TermVectorStatus, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CheckIndex$Status$TermVectorStatus, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CheckIndex$Status$TermVectorStatus, t_CheckIndex$Status$TermVectorStatus, ::java::lang::Object, CheckIndex$Status$TermVectorStatus, abstract_init, 0, 0, t_CheckIndex$Status$TermVectorStatus__fields_, 0, 0);

        void t_CheckIndex$Status$TermVectorStatus::install(PyObject *module)
        {
          installType(&PY_TYPE(CheckIndex$Status$TermVectorStatus), module, "CheckIndex$Status$TermVectorStatus", 0);
        }

        void t_CheckIndex$Status$TermVectorStatus::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermVectorStatus).tp_dict, "class_", make_descriptor(CheckIndex$Status$TermVectorStatus::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermVectorStatus).tp_dict, "wrapfn_", make_descriptor(t_CheckIndex$Status$TermVectorStatus::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CheckIndex$Status$TermVectorStatus).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CheckIndex$Status$TermVectorStatus::initializeClass, 1)))
            return NULL;
          return t_CheckIndex$Status$TermVectorStatus::wrap_Object(CheckIndex$Status$TermVectorStatus(((t_CheckIndex$Status$TermVectorStatus *) arg)->object.this$));
        }
        static PyObject *t_CheckIndex$Status$TermVectorStatus_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CheckIndex$Status$TermVectorStatus::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__docCount(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object._get_docCount());
          return PyInt_FromLong((long) value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__docCount(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          jint value;
          if (!parseArg(arg, "I", &value))
          {
            INT_CALL(self->object._set_docCount(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "docCount", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__error(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          OBJ_CALL(value = self->object._get_error());
          return ::java::lang::t_Throwable::wrap_Object(value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__error(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          ::java::lang::Throwable value((jobject) NULL);
          if (!parseArg(arg, "k", ::java::lang::Throwable::initializeClass, &value))
          {
            INT_CALL(self->object._set_error(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "error", arg);
          return -1;
        }

        static PyObject *t_CheckIndex$Status$TermVectorStatus_get__totVectors(t_CheckIndex$Status$TermVectorStatus *self, void *data)
        {
          jlong value;
          OBJ_CALL(value = self->object._get_totVectors());
          return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
        static int t_CheckIndex$Status$TermVectorStatus_set__totVectors(t_CheckIndex$Status$TermVectorStatus *self, PyObject *arg, void *data)
        {
          jlong value;
          if (!parseArg(arg, "J", &value))
          {
            INT_CALL(self->object._set_totVectors(value));
            return 0;
          }
          PyErr_SetArgsError((PyObject *) self, "totVectors", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet$Builder.h"
#include "org/apache/lucene/util/PForDeltaDocIdSet.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *PForDeltaDocIdSet$Builder::class$ = NULL;
        jmethodID *PForDeltaDocIdSet$Builder::mids$ = NULL;
        bool PForDeltaDocIdSet$Builder::live$ = false;

        jclass PForDeltaDocIdSet$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/PForDeltaDocIdSet$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_5450130c] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/search/DocIdSetIterator;)Lorg/apache/lucene/util/PForDeltaDocIdSet$Builder;");
            mids$[mid_add_c0d9d1e3] = env->getMethodID(cls, "add", "(I)Lorg/apache/lucene/util/PForDeltaDocIdSet$Builder;");
            mids$[mid_build_44738ac2] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/util/PForDeltaDocIdSet;");
            mids$[mid_setIndexInterval_c0d9d1e3] = env->getMethodID(cls, "setIndexInterval", "(I)Lorg/apache/lucene/util/PForDeltaDocIdSet$Builder;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PForDeltaDocIdSet$Builder::PForDeltaDocIdSet$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        PForDeltaDocIdSet$Builder PForDeltaDocIdSet$Builder::add(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
        {
          return PForDeltaDocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_5450130c], a0.this$));
        }

        PForDeltaDocIdSet$Builder PForDeltaDocIdSet$Builder::add(jint a0) const
        {
          return PForDeltaDocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_add_c0d9d1e3], a0));
        }

        ::org::apache::lucene::util::PForDeltaDocIdSet PForDeltaDocIdSet$Builder::build() const
        {
          return ::org::apache::lucene::util::PForDeltaDocIdSet(env->callObjectMethod(this$, mids$[mid_build_44738ac2]));
        }

        PForDeltaDocIdSet$Builder PForDeltaDocIdSet$Builder::setIndexInterval(jint a0) const
        {
          return PForDeltaDocIdSet$Builder(env->callObjectMethod(this$, mids$[mid_setIndexInterval_c0d9d1e3], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_PForDeltaDocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PForDeltaDocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PForDeltaDocIdSet$Builder_init_(t_PForDeltaDocIdSet$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PForDeltaDocIdSet$Builder_add(t_PForDeltaDocIdSet$Builder *self, PyObject *args);
        static PyObject *t_PForDeltaDocIdSet$Builder_build(t_PForDeltaDocIdSet$Builder *self);
        static PyObject *t_PForDeltaDocIdSet$Builder_setIndexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg);
        static int t_PForDeltaDocIdSet$Builder_set__indexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg, void *data);
        static PyGetSetDef t_PForDeltaDocIdSet$Builder__fields_[] = {
          DECLARE_SET_FIELD(t_PForDeltaDocIdSet$Builder, indexInterval),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PForDeltaDocIdSet$Builder__methods_[] = {
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, add, METH_VARARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, build, METH_NOARGS),
          DECLARE_METHOD(t_PForDeltaDocIdSet$Builder, setIndexInterval, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PForDeltaDocIdSet$Builder, t_PForDeltaDocIdSet$Builder, ::java::lang::Object, PForDeltaDocIdSet$Builder, t_PForDeltaDocIdSet$Builder_init_, 0, 0, t_PForDeltaDocIdSet$Builder__fields_, 0, 0);

        void t_PForDeltaDocIdSet$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(PForDeltaDocIdSet$Builder), module, "PForDeltaDocIdSet$Builder", 0);
        }

        void t_PForDeltaDocIdSet$Builder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet$Builder).tp_dict, "class_", make_descriptor(PForDeltaDocIdSet$Builder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet$Builder).tp_dict, "wrapfn_", make_descriptor(t_PForDeltaDocIdSet$Builder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PForDeltaDocIdSet$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PForDeltaDocIdSet$Builder::initializeClass, 1)))
            return NULL;
          return t_PForDeltaDocIdSet$Builder::wrap_Object(PForDeltaDocIdSet$Builder(((t_PForDeltaDocIdSet$Builder *) arg)->object.this$));
        }
        static PyObject *t_PForDeltaDocIdSet$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PForDeltaDocIdSet$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PForDeltaDocIdSet$Builder_init_(t_PForDeltaDocIdSet$Builder *self, PyObject *args, PyObject *kwds)
        {
          PForDeltaDocIdSet$Builder object((jobject) NULL);

          INT_CALL(object = PForDeltaDocIdSet$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_add(t_PForDeltaDocIdSet$Builder *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);
              PForDeltaDocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_PForDeltaDocIdSet$Builder::wrap_Object(result);
              }
            }
            {
              jint a0;
              PForDeltaDocIdSet$Builder result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.add(a0));
                return t_PForDeltaDocIdSet$Builder::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_build(t_PForDeltaDocIdSet$Builder *self)
        {
          ::org::apache::lucene::util::PForDeltaDocIdSet result((jobject) NULL);
          OBJ_CALL(result = self->object.build());
          return ::org::apache::lucene::util::t_PForDeltaDocIdSet::wrap_Object(result);
        }

        static PyObject *t_PForDeltaDocIdSet$Builder_setIndexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg)
        {
          jint a0;
          PForDeltaDocIdSet$Builder result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.setIndexInterval(a0));
            return t_PForDeltaDocIdSet$Builder::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "setIndexInterval", arg);
          return NULL;
        }

        static int t_PForDeltaDocIdSet$Builder_set__indexInterval(t_PForDeltaDocIdSet$Builder *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setIndexInterval(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "indexInterval", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/xml/FilterBuilder.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Filter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {

          ::java::lang::Class *FilterBuilder::class$ = NULL;
          jmethodID *FilterBuilder::mids$ = NULL;
          bool FilterBuilder::live$ = false;

          jclass FilterBuilder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/xml/FilterBuilder");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace xml {
          static PyObject *t_FilterBuilder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FilterBuilder_instance_(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_FilterBuilder__methods_[] = {
            DECLARE_METHOD(t_FilterBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterBuilder, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FilterBuilder, t_FilterBuilder, ::java::lang::Object, FilterBuilder, abstract_init, 0, 0, 0, 0, 0);

          void t_FilterBuilder::install(PyObject *module)
          {
            installType(&PY_TYPE(FilterBuilder), module, "FilterBuilder", 0);
          }

          void t_FilterBuilder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FilterBuilder).tp_dict, "class_", make_descriptor(FilterBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilterBuilder).tp_dict, "wrapfn_", make_descriptor(t_FilterBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilterBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FilterBuilder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FilterBuilder::initializeClass, 1)))
              return NULL;
            return t_FilterBuilder::wrap_Object(FilterBuilder(((t_FilterBuilder *) arg)->object.this$));
          }
          static PyObject *t_FilterBuilder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FilterBuilder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/Scorer$ChildScorer.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *Scorer$ChildScorer::class$ = NULL;
        jmethodID *Scorer$ChildScorer::mids$ = NULL;
        jfieldID *Scorer$ChildScorer::fids$ = NULL;
        bool Scorer$ChildScorer::live$ = false;

        jclass Scorer$ChildScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/Scorer$ChildScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_9c8e8bbe] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Scorer;Ljava/lang/String;)V");

            fids$ = new jfieldID[max_fid];
            fids$[fid_child] = env->getFieldID(cls, "child", "Lorg/apache/lucene/search/Scorer;");
            fids$[fid_relationship] = env->getFieldID(cls, "relationship", "Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        Scorer$ChildScorer::Scorer$ChildScorer(const ::org::apache::lucene::search::Scorer & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c8e8bbe, a0.this$, a1.this$)) {}

        ::org::apache::lucene::search::Scorer Scorer$ChildScorer::_get_child() const
        {
          return ::org::apache::lucene::search::Scorer(env->getObjectField(this$, fids$[fid_child]));
        }

        ::java::lang::String Scorer$ChildScorer::_get_relationship() const
        {
          return ::java::lang::String(env->getObjectField(this$, fids$[fid_relationship]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_Scorer$ChildScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Scorer$ChildScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Scorer$ChildScorer_init_(t_Scorer$ChildScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Scorer$ChildScorer_get__child(t_Scorer$ChildScorer *self, void *data);
        static PyObject *t_Scorer$ChildScorer_get__relationship(t_Scorer$ChildScorer *self, void *data);

        static PyGetSetDef t_Scorer$ChildScorer__fields_[] = {
          DECLARE_GET_FIELD(t_Scorer$ChildScorer, child),
          DECLARE_GET_FIELD(t_Scorer$ChildScorer, relationship),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Scorer$ChildScorer__methods_[] = {
          DECLARE_METHOD(t_Scorer$ChildScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_Scorer$ChildScorer, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Scorer$ChildScorer, t_Scorer$ChildScorer, ::java::lang::Object, Scorer$ChildScorer, t_Scorer$ChildScorer_init_, 0, 0, t_Scorer$ChildScorer__fields_, 0, 0);

        void t_Scorer$ChildScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(Scorer$ChildScorer), module, "Scorer$ChildScorer", 0);
        }

        void t_Scorer$ChildScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(Scorer$ChildScorer).tp_dict, "class_", make_descriptor(Scorer$ChildScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(Scorer$ChildScorer).tp_dict, "wrapfn_", make_descriptor(t_Scorer$ChildScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(Scorer$ChildScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Scorer$ChildScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, Scorer$ChildScorer::initializeClass, 1)))
            return NULL;
          return t_Scorer$ChildScorer::wrap_Object(Scorer$ChildScorer(((t_Scorer$ChildScorer *) arg)->object.this$));
        }
        static PyObject *t_Scorer$ChildScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, Scorer$ChildScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_Scorer$ChildScorer_init_(t_Scorer$ChildScorer *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          Scorer$ChildScorer object((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::search::Scorer::initializeClass, &a0, &a1))
          {
            INT_CALL(object = Scorer$ChildScorer(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_Scorer$ChildScorer_get__child(t_Scorer$ChildScorer *self, void *data)
        {
          ::org::apache::lucene::search::Scorer value((jobject) NULL);
          OBJ_CALL(value = self->object._get_child());
          return ::org::apache::lucene::search::t_Scorer::wrap_Object(value);
        }

        static PyObject *t_Scorer$ChildScorer_get__relationship(t_Scorer$ChildScorer *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object._get_relationship());
          return j2p(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$RelevanceComparator.h"
#include "java/io/IOException.h"
#include "java/lang/Float.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Scorer.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$RelevanceComparator::class$ = NULL;
        jmethodID *FieldComparator$RelevanceComparator::mids$ = NULL;
        bool FieldComparator$RelevanceComparator::live$ = false;

        jclass FieldComparator$RelevanceComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$RelevanceComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_compareValues_f4628831] = env->getMethodID(cls, "compareValues", "(Ljava/lang/Float;Ljava/lang/Float;)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setScorer_8be0880c] = env->getMethodID(cls, "setScorer", "(Lorg/apache/lucene/search/Scorer;)V");
            mids$[mid_setTopValue_6b30eb6a] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Float;)V");
            mids$[mid_value_c4acb5a1] = env->getMethodID(cls, "value", "(I)Ljava/lang/Float;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$RelevanceComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$RelevanceComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$RelevanceComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        jint FieldComparator$RelevanceComparator::compareValues(const ::java::lang::Float & a0, const ::java::lang::Float & a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compareValues_f4628831], a0.this$, a1.this$);
        }

        void FieldComparator$RelevanceComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$RelevanceComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$RelevanceComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$RelevanceComparator::setScorer(const ::org::apache::lucene::search::Scorer & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setScorer_8be0880c], a0.this$);
        }

        void FieldComparator$RelevanceComparator::setTopValue(const ::java::lang::Float & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_6b30eb6a], a0.this$);
        }

        ::java::lang::Float FieldComparator$RelevanceComparator::value(jint a0) const
        {
          return ::java::lang::Float(env->callObjectMethod(this$, mids$[mid_value_c4acb5a1], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$RelevanceComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$RelevanceComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$RelevanceComparator_of_(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compare(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compareBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compareTop(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_compareValues(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_copy(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setNextReader(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setScorer(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_setTopValue(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$RelevanceComparator_value(t_FieldComparator$RelevanceComparator *self, PyObject *args);
        static int t_FieldComparator$RelevanceComparator_set__bottom(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$RelevanceComparator_set__nextReader(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$RelevanceComparator_set__scorer(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$RelevanceComparator_set__topValue(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$RelevanceComparator_get__parameters_(t_FieldComparator$RelevanceComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$RelevanceComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, scorer),
          DECLARE_SET_FIELD(t_FieldComparator$RelevanceComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$RelevanceComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$RelevanceComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, compareValues, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setScorer, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$RelevanceComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$RelevanceComparator, t_FieldComparator$RelevanceComparator, ::org::apache::lucene::search::FieldComparator, FieldComparator$RelevanceComparator, abstract_init, 0, 0, t_FieldComparator$RelevanceComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$RelevanceComparator::wrap_Object(const FieldComparator$RelevanceComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$RelevanceComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$RelevanceComparator *self = (t_FieldComparator$RelevanceComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$RelevanceComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$RelevanceComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$RelevanceComparator *self = (t_FieldComparator$RelevanceComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$RelevanceComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$RelevanceComparator), module, "FieldComparator$RelevanceComparator", 0);
        }

        void t_FieldComparator$RelevanceComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$RelevanceComparator).tp_dict, "class_", make_descriptor(FieldComparator$RelevanceComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$RelevanceComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$RelevanceComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$RelevanceComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$RelevanceComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$RelevanceComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$RelevanceComparator::wrap_Object(FieldComparator$RelevanceComparator(((t_FieldComparator$RelevanceComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$RelevanceComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$RelevanceComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$RelevanceComparator_of_(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compare(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareTop(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_compareValues(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::java::lang::Float a0((jobject) NULL);
          ::java::lang::Float a1((jobject) NULL);
          jint result;

          if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(Float), &::java::lang::PY_TYPE(Float), &a0, &a1))
          {
            OBJ_CALL(result = self->object.compareValues(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "compareValues", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_copy(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setBottom(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setNextReader(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Float));
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setScorer(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::org::apache::lucene::search::Scorer a0((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::search::Scorer::initializeClass, &a0))
          {
            OBJ_CALL(self->object.setScorer(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setScorer", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_setTopValue(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          ::java::lang::Float a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Float), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$RelevanceComparator_value(t_FieldComparator$RelevanceComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Float result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Float::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$RelevanceComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$RelevanceComparator_get__parameters_(t_FieldComparator$RelevanceComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$RelevanceComparator_set__bottom(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$RelevanceComparator_set__nextReader(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$RelevanceComparator_set__scorer(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::search::Scorer value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::search::Scorer::initializeClass, &value))
            {
              INT_CALL(self->object.setScorer(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "scorer", arg);
          return -1;
        }

        static int t_FieldComparator$RelevanceComparator_set__topValue(t_FieldComparator$RelevanceComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Float value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Float), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/fr/FrenchMinimalStemFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {

          ::java::lang::Class *FrenchMinimalStemFilter::class$ = NULL;
          jmethodID *FrenchMinimalStemFilter::mids$ = NULL;
          bool FrenchMinimalStemFilter::live$ = false;

          jclass FrenchMinimalStemFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/fr/FrenchMinimalStemFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          FrenchMinimalStemFilter::FrenchMinimalStemFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean FrenchMinimalStemFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace fr {
          static PyObject *t_FrenchMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FrenchMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_FrenchMinimalStemFilter_init_(t_FrenchMinimalStemFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_FrenchMinimalStemFilter_incrementToken(t_FrenchMinimalStemFilter *self, PyObject *args);

          static PyMethodDef t_FrenchMinimalStemFilter__methods_[] = {
            DECLARE_METHOD(t_FrenchMinimalStemFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FrenchMinimalStemFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FrenchMinimalStemFilter, t_FrenchMinimalStemFilter, ::org::apache::lucene::analysis::TokenFilter, FrenchMinimalStemFilter, t_FrenchMinimalStemFilter_init_, 0, 0, 0, 0, 0);

          void t_FrenchMinimalStemFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(FrenchMinimalStemFilter), module, "FrenchMinimalStemFilter", 0);
          }

          void t_FrenchMinimalStemFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilter).tp_dict, "class_", make_descriptor(FrenchMinimalStemFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilter).tp_dict, "wrapfn_", make_descriptor(t_FrenchMinimalStemFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FrenchMinimalStemFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FrenchMinimalStemFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FrenchMinimalStemFilter::initializeClass, 1)))
              return NULL;
            return t_FrenchMinimalStemFilter::wrap_Object(FrenchMinimalStemFilter(((t_FrenchMinimalStemFilter *) arg)->object.this$));
          }
          static PyObject *t_FrenchMinimalStemFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FrenchMinimalStemFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_FrenchMinimalStemFilter_init_(t_FrenchMinimalStemFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            FrenchMinimalStemFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = FrenchMinimalStemFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_FrenchMinimalStemFilter_incrementToken(t_FrenchMinimalStemFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(FrenchMinimalStemFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/term/TermDistinctValuesCollector$GroupCount.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/BytesRef.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {

            ::java::lang::Class *TermDistinctValuesCollector$GroupCount::class$ = NULL;
            jmethodID *TermDistinctValuesCollector$GroupCount::mids$ = NULL;
            bool TermDistinctValuesCollector$GroupCount::live$ = false;

            jclass TermDistinctValuesCollector$GroupCount::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/term/TermDistinctValuesCollector$GroupCount");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          namespace term {
            static PyObject *t_TermDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TermDistinctValuesCollector$GroupCount_of_(t_TermDistinctValuesCollector$GroupCount *self, PyObject *args);
            static PyObject *t_TermDistinctValuesCollector$GroupCount_get__parameters_(t_TermDistinctValuesCollector$GroupCount *self, void *data);
            static PyGetSetDef t_TermDistinctValuesCollector$GroupCount__fields_[] = {
              DECLARE_GET_FIELD(t_TermDistinctValuesCollector$GroupCount, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_TermDistinctValuesCollector$GroupCount__methods_[] = {
              DECLARE_METHOD(t_TermDistinctValuesCollector$GroupCount, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector$GroupCount, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TermDistinctValuesCollector$GroupCount, of_, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TermDistinctValuesCollector$GroupCount, t_TermDistinctValuesCollector$GroupCount, ::org::apache::lucene::search::grouping::AbstractDistinctValuesCollector$GroupCount, TermDistinctValuesCollector$GroupCount, abstract_init, 0, 0, t_TermDistinctValuesCollector$GroupCount__fields_, 0, 0);
            PyObject *t_TermDistinctValuesCollector$GroupCount::wrap_Object(const TermDistinctValuesCollector$GroupCount& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector$GroupCount::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector$GroupCount *self = (t_TermDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_TermDistinctValuesCollector$GroupCount::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_TermDistinctValuesCollector$GroupCount::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_TermDistinctValuesCollector$GroupCount *self = (t_TermDistinctValuesCollector$GroupCount *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_TermDistinctValuesCollector$GroupCount::install(PyObject *module)
            {
              installType(&PY_TYPE(TermDistinctValuesCollector$GroupCount), module, "TermDistinctValuesCollector$GroupCount", 0);
            }

            void t_TermDistinctValuesCollector$GroupCount::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector$GroupCount).tp_dict, "class_", make_descriptor(TermDistinctValuesCollector$GroupCount::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector$GroupCount).tp_dict, "wrapfn_", make_descriptor(t_TermDistinctValuesCollector$GroupCount::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TermDistinctValuesCollector$GroupCount).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TermDistinctValuesCollector$GroupCount_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TermDistinctValuesCollector$GroupCount::initializeClass, 1)))
                return NULL;
              return t_TermDistinctValuesCollector$GroupCount::wrap_Object(TermDistinctValuesCollector$GroupCount(((t_TermDistinctValuesCollector$GroupCount *) arg)->object.this$));
            }
            static PyObject *t_TermDistinctValuesCollector$GroupCount_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TermDistinctValuesCollector$GroupCount::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TermDistinctValuesCollector$GroupCount_of_(t_TermDistinctValuesCollector$GroupCount *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }
            static PyObject *t_TermDistinctValuesCollector$GroupCount_get__parameters_(t_TermDistinctValuesCollector$GroupCount *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/EliasFanoDocIdSet.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/search/DocIdSetIterator.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *EliasFanoDocIdSet::class$ = NULL;
          jmethodID *EliasFanoDocIdSet::mids$ = NULL;
          bool EliasFanoDocIdSet::live$ = false;

          jclass EliasFanoDocIdSet::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/EliasFanoDocIdSet");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
              mids$[mid_encodeFromDisi_c2b5607d] = env->getMethodID(cls, "encodeFromDisi", "(Lorg/apache/lucene/search/DocIdSetIterator;)V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_isCacheable_54c6a16a] = env->getMethodID(cls, "isCacheable", "()Z");
              mids$[mid_iterator_dc23660c] = env->getMethodID(cls, "iterator", "()Lorg/apache/lucene/search/DocIdSetIterator;");
              mids$[mid_ramBytesUsed_54c6a17a] = env->getMethodID(cls, "ramBytesUsed", "()J");
              mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8] = env->getStaticMethodID(cls, "sufficientlySmallerThanBitSet", "(JJ)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          EliasFanoDocIdSet::EliasFanoDocIdSet(jint a0, jint a1) : ::org::apache::lucene::search::DocIdSet(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

          void EliasFanoDocIdSet::encodeFromDisi(const ::org::apache::lucene::search::DocIdSetIterator & a0) const
          {
            env->callVoidMethod(this$, mids$[mid_encodeFromDisi_c2b5607d], a0.this$);
          }

          jboolean EliasFanoDocIdSet::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint EliasFanoDocIdSet::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          jboolean EliasFanoDocIdSet::isCacheable() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isCacheable_54c6a16a]);
          }

          ::org::apache::lucene::search::DocIdSetIterator EliasFanoDocIdSet::iterator() const
          {
            return ::org::apache::lucene::search::DocIdSetIterator(env->callObjectMethod(this$, mids$[mid_iterator_dc23660c]));
          }

          jlong EliasFanoDocIdSet::ramBytesUsed() const
          {
            return env->callLongMethod(this$, mids$[mid_ramBytesUsed_54c6a17a]);
          }

          jboolean EliasFanoDocIdSet::sufficientlySmallerThanBitSet(jlong a0, jlong a1)
          {
            jclass cls = env->getClass(initializeClass);
            return env->callStaticBooleanMethod(cls, mids$[mid_sufficientlySmallerThanBitSet_a7e12ca8], a0, a1);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_EliasFanoDocIdSet_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_EliasFanoDocIdSet_instance_(PyTypeObject *type, PyObject *arg);
          static int t_EliasFanoDocIdSet_init_(t_EliasFanoDocIdSet *self, PyObject *args, PyObject *kwds);
          static PyObject *t_EliasFanoDocIdSet_encodeFromDisi(t_EliasFanoDocIdSet *self, PyObject *arg);
          static PyObject *t_EliasFanoDocIdSet_equals(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_hashCode(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_isCacheable(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_iterator(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_ramBytesUsed(t_EliasFanoDocIdSet *self, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args);
          static PyObject *t_EliasFanoDocIdSet_get__cacheable(t_EliasFanoDocIdSet *self, void *data);
          static PyGetSetDef t_EliasFanoDocIdSet__fields_[] = {
            DECLARE_GET_FIELD(t_EliasFanoDocIdSet, cacheable),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_EliasFanoDocIdSet__methods_[] = {
            DECLARE_METHOD(t_EliasFanoDocIdSet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, encodeFromDisi, METH_O),
            DECLARE_METHOD(t_EliasFanoDocIdSet, equals, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, isCacheable, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, iterator, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, ramBytesUsed, METH_VARARGS),
            DECLARE_METHOD(t_EliasFanoDocIdSet, sufficientlySmallerThanBitSet, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(EliasFanoDocIdSet, t_EliasFanoDocIdSet, ::org::apache::lucene::search::DocIdSet, EliasFanoDocIdSet, t_EliasFanoDocIdSet_init_, 0, 0, t_EliasFanoDocIdSet__fields_, 0, 0);

          void t_EliasFanoDocIdSet::install(PyObject *module)
          {
            installType(&PY_TYPE(EliasFanoDocIdSet), module, "EliasFanoDocIdSet", 0);
          }

          void t_EliasFanoDocIdSet::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(EliasFanoDocIdSet).tp_dict, "class_", make_descriptor(EliasFanoDocIdSet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(EliasFanoDocIdSet).tp_dict, "wrapfn_", make_descriptor(t_EliasFanoDocIdSet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(EliasFanoDocIdSet).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_EliasFanoDocIdSet_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, EliasFanoDocIdSet::initializeClass, 1)))
              return NULL;
            return t_EliasFanoDocIdSet::wrap_Object(EliasFanoDocIdSet(((t_EliasFanoDocIdSet *) arg)->object.this$));
          }
          static PyObject *t_EliasFanoDocIdSet_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, EliasFanoDocIdSet::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_EliasFanoDocIdSet_init_(t_EliasFanoDocIdSet *self, PyObject *args, PyObject *kwds)
          {
            jint a0;
            jint a1;
            EliasFanoDocIdSet object((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
              INT_CALL(object = EliasFanoDocIdSet(a0, a1));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_EliasFanoDocIdSet_encodeFromDisi(t_EliasFanoDocIdSet *self, PyObject *arg)
          {
            ::org::apache::lucene::search::DocIdSetIterator a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::search::DocIdSetIterator::initializeClass, &a0))
            {
              OBJ_CALL(self->object.encodeFromDisi(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "encodeFromDisi", arg);
            return NULL;
          }

          static PyObject *t_EliasFanoDocIdSet_equals(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_hashCode(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_isCacheable(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.isCacheable());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "isCacheable", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_iterator(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            ::org::apache::lucene::search::DocIdSetIterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.iterator());
              return ::org::apache::lucene::search::t_DocIdSetIterator::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "iterator", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_ramBytesUsed(t_EliasFanoDocIdSet *self, PyObject *args)
          {
            jlong result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.ramBytesUsed());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(EliasFanoDocIdSet), (PyObject *) self, "ramBytesUsed", args, 2);
          }

          static PyObject *t_EliasFanoDocIdSet_sufficientlySmallerThanBitSet(PyTypeObject *type, PyObject *args)
          {
            jlong a0;
            jlong a1;
            jboolean result;

            if (!parseArgs(args, "JJ", &a0, &a1))
            {
              OBJ_CALL(result = ::org::apache::lucene::util::packed::EliasFanoDocIdSet::sufficientlySmallerThanBitSet(a0, a1));
              Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "sufficientlySmallerThanBitSet", args);
            return NULL;
          }

          static PyObject *t_EliasFanoDocIdSet_get__cacheable(t_EliasFanoDocIdSet *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isCacheable());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/highlight/SimpleSpanFragmenter.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Fragmenter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/QueryScorer.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *SimpleSpanFragmenter::class$ = NULL;
          jmethodID *SimpleSpanFragmenter::mids$ = NULL;
          bool SimpleSpanFragmenter::live$ = false;

          jclass SimpleSpanFragmenter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/highlight/SimpleSpanFragmenter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_fe38f734] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/QueryScorer;)V");
              mids$[mid_init$_14d972ea] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/highlight/QueryScorer;I)V");
              mids$[mid_isNewFragment_54c6a16a] = env->getMethodID(cls, "isNewFragment", "()Z");
              mids$[mid_start_7d0c5392] = env->getMethodID(cls, "start", "(Ljava/lang/String;Lorg/apache/lucene/analysis/TokenStream;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SimpleSpanFragmenter::SimpleSpanFragmenter(const ::org::apache::lucene::search::highlight::QueryScorer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fe38f734, a0.this$)) {}

          SimpleSpanFragmenter::SimpleSpanFragmenter(const ::org::apache::lucene::search::highlight::QueryScorer & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_14d972ea, a0.this$, a1)) {}

          jboolean SimpleSpanFragmenter::isNewFragment() const
          {
            return env->callBooleanMethod(this$, mids$[mid_isNewFragment_54c6a16a]);
          }

          void SimpleSpanFragmenter::start(const ::java::lang::String & a0, const ::org::apache::lucene::analysis::TokenStream & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_start_7d0c5392], a0.this$, a1.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace highlight {
          static PyObject *t_SimpleSpanFragmenter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SimpleSpanFragmenter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_SimpleSpanFragmenter_init_(t_SimpleSpanFragmenter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SimpleSpanFragmenter_isNewFragment(t_SimpleSpanFragmenter *self);
          static PyObject *t_SimpleSpanFragmenter_start(t_SimpleSpanFragmenter *self, PyObject *args);
          static PyObject *t_SimpleSpanFragmenter_get__newFragment(t_SimpleSpanFragmenter *self, void *data);
          static PyGetSetDef t_SimpleSpanFragmenter__fields_[] = {
            DECLARE_GET_FIELD(t_SimpleSpanFragmenter, newFragment),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SimpleSpanFragmenter__methods_[] = {
            DECLARE_METHOD(t_SimpleSpanFragmenter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, isNewFragment, METH_NOARGS),
            DECLARE_METHOD(t_SimpleSpanFragmenter, start, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SimpleSpanFragmenter, t_SimpleSpanFragmenter, ::java::lang::Object, SimpleSpanFragmenter, t_SimpleSpanFragmenter_init_, 0, 0, t_SimpleSpanFragmenter__fields_, 0, 0);

          void t_SimpleSpanFragmenter::install(PyObject *module)
          {
            installType(&PY_TYPE(SimpleSpanFragmenter), module, "SimpleSpanFragmenter", 0);
          }

          void t_SimpleSpanFragmenter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SimpleSpanFragmenter).tp_dict, "class_", make_descriptor(SimpleSpanFragmenter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SimpleSpanFragmenter).tp_dict, "wrapfn_", make_descriptor(t_SimpleSpanFragmenter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SimpleSpanFragmenter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SimpleSpanFragmenter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SimpleSpanFragmenter::initializeClass, 1)))
              return NULL;
            return t_SimpleSpanFragmenter::wrap_Object(SimpleSpanFragmenter(((t_SimpleSpanFragmenter *) arg)->object.this$));
          }
          static PyObject *t_SimpleSpanFragmenter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SimpleSpanFragmenter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_SimpleSpanFragmenter_init_(t_SimpleSpanFragmenter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::search::highlight::QueryScorer a0((jobject) NULL);
                SimpleSpanFragmenter object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::search::highlight::QueryScorer::initializeClass, &a0))
                {
                  INT_CALL(object = SimpleSpanFragmenter(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::search::highlight::QueryScorer a0((jobject) NULL);
                jint a1;
                SimpleSpanFragmenter object((jobject) NULL);

                if (!parseArgs(args, "kI", ::org::apache::lucene::search::highlight::QueryScorer::initializeClass, &a0, &a1))
                {
                  INT_CALL(object = SimpleSpanFragmenter(a0, a1));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_SimpleSpanFragmenter_isNewFragment(t_SimpleSpanFragmenter *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.isNewFragment());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_SimpleSpanFragmenter_start(t_SimpleSpanFragmenter *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::org::apache::lucene::analysis::TokenStream a1((jobject) NULL);

            if (!parseArgs(args, "sk", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0, &a1))
            {
              OBJ_CALL(self->object.start(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "start", args);
            return NULL;
          }

          static PyObject *t_SimpleSpanFragmenter_get__newFragment(t_SimpleSpanFragmenter *self, void *data)
          {
            jboolean value;
            OBJ_CALL(value = self->object.isNewFragment());
            Py_RETURN_BOOL(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/UpperCaseFilterFactory.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "org/apache/lucene/analysis/core/UpperCaseFilter.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *UpperCaseFilterFactory::class$ = NULL;
          jmethodID *UpperCaseFilterFactory::mids$ = NULL;
          bool UpperCaseFilterFactory::live$ = false;

          jclass UpperCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/UpperCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_da6c60eb] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/core/UpperCaseFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          UpperCaseFilterFactory::UpperCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::UpperCaseFilter UpperCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::core::UpperCaseFilter(env->callObjectMethod(this$, mids$[mid_create_da6c60eb], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory UpperCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_UpperCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_UpperCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_UpperCaseFilterFactory_init_(t_UpperCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_UpperCaseFilterFactory_create(t_UpperCaseFilterFactory *self, PyObject *args);
          static PyObject *t_UpperCaseFilterFactory_getMultiTermComponent(t_UpperCaseFilterFactory *self);
          static PyObject *t_UpperCaseFilterFactory_get__multiTermComponent(t_UpperCaseFilterFactory *self, void *data);
          static PyGetSetDef t_UpperCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_UpperCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_UpperCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_UpperCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_UpperCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(UpperCaseFilterFactory, t_UpperCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, UpperCaseFilterFactory, t_UpperCaseFilterFactory_init_, 0, 0, t_UpperCaseFilterFactory__fields_, 0, 0);

          void t_UpperCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(UpperCaseFilterFactory), module, "UpperCaseFilterFactory", 0);
          }

          void t_UpperCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(UpperCaseFilterFactory).tp_dict, "class_", make_descriptor(UpperCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_UpperCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UpperCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_UpperCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, UpperCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_UpperCaseFilterFactory::wrap_Object(UpperCaseFilterFactory(((t_UpperCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_UpperCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, UpperCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_UpperCaseFilterFactory_init_(t_UpperCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            UpperCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = UpperCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_UpperCaseFilterFactory_create(t_UpperCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::core::UpperCaseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::core::t_UpperCaseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(UpperCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_UpperCaseFilterFactory_getMultiTermComponent(t_UpperCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_UpperCaseFilterFactory_get__multiTermComponent(t_UpperCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/standard/ClassicFilter.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {

          ::java::lang::Class *ClassicFilter::class$ = NULL;
          jmethodID *ClassicFilter::mids$ = NULL;
          bool ClassicFilter::live$ = false;

          jclass ClassicFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/standard/ClassicFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_c7c794dc] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/analysis/TokenStream;)V");
              mids$[mid_incrementToken_54c6a16a] = env->getMethodID(cls, "incrementToken", "()Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          ClassicFilter::ClassicFilter(const ::org::apache::lucene::analysis::TokenStream & a0) : ::org::apache::lucene::analysis::TokenFilter(env->newObject(initializeClass, &mids$, mid_init$_c7c794dc, a0.this$)) {}

          jboolean ClassicFilter::incrementToken() const
          {
            return env->callBooleanMethod(this$, mids$[mid_incrementToken_54c6a16a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace standard {
          static PyObject *t_ClassicFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_ClassicFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_ClassicFilter_init_(t_ClassicFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_ClassicFilter_incrementToken(t_ClassicFilter *self, PyObject *args);

          static PyMethodDef t_ClassicFilter__methods_[] = {
            DECLARE_METHOD(t_ClassicFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassicFilter, incrementToken, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(ClassicFilter, t_ClassicFilter, ::org::apache::lucene::analysis::TokenFilter, ClassicFilter, t_ClassicFilter_init_, 0, 0, 0, 0, 0);

          void t_ClassicFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(ClassicFilter), module, "ClassicFilter", 0);
          }

          void t_ClassicFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(ClassicFilter).tp_dict, "class_", make_descriptor(ClassicFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassicFilter).tp_dict, "wrapfn_", make_descriptor(t_ClassicFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassicFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_ClassicFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, ClassicFilter::initializeClass, 1)))
              return NULL;
            return t_ClassicFilter::wrap_Object(ClassicFilter(((t_ClassicFilter *) arg)->object.this$));
          }
          static PyObject *t_ClassicFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, ClassicFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_ClassicFilter_init_(t_ClassicFilter *self, PyObject *args, PyObject *kwds)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ClassicFilter object((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              INT_CALL(object = ClassicFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_ClassicFilter_incrementToken(t_ClassicFilter *self, PyObject *args)
          {
            jboolean result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.incrementToken());
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ClassicFilter), (PyObject *) self, "incrementToken", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/NumericConfig.h"
#include "java/text/NumberFormat.h"
#include "org/apache/lucene/document/FieldType$NumericType.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *NumericConfig::class$ = NULL;
              jmethodID *NumericConfig::mids$ = NULL;
              bool NumericConfig::live$ = false;

              jclass NumericConfig::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/NumericConfig");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_09c28ef7] = env->getMethodID(cls, "<init>", "(ILjava/text/NumberFormat;Lorg/apache/lucene/document/FieldType$NumericType;)V");
                  mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                  mids$[mid_getNumberFormat_6b701965] = env->getMethodID(cls, "getNumberFormat", "()Ljava/text/NumberFormat;");
                  mids$[mid_getPrecisionStep_54c6a179] = env->getMethodID(cls, "getPrecisionStep", "()I");
                  mids$[mid_getType_81bd17c2] = env->getMethodID(cls, "getType", "()Lorg/apache/lucene/document/FieldType$NumericType;");
                  mids$[mid_setNumberFormat_d2d1ba24] = env->getMethodID(cls, "setNumberFormat", "(Ljava/text/NumberFormat;)V");
                  mids$[mid_setPrecisionStep_39c7bd3c] = env->getMethodID(cls, "setPrecisionStep", "(I)V");
                  mids$[mid_setType_d9029e47] = env->getMethodID(cls, "setType", "(Lorg/apache/lucene/document/FieldType$NumericType;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              NumericConfig::NumericConfig(jint a0, const ::java::text::NumberFormat & a1, const ::org::apache::lucene::document::FieldType$NumericType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_09c28ef7, a0, a1.this$, a2.this$)) {}

              jboolean NumericConfig::equals(const ::java::lang::Object & a0) const
              {
                return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
              }

              ::java::text::NumberFormat NumericConfig::getNumberFormat() const
              {
                return ::java::text::NumberFormat(env->callObjectMethod(this$, mids$[mid_getNumberFormat_6b701965]));
              }

              jint NumericConfig::getPrecisionStep() const
              {
                return env->callIntMethod(this$, mids$[mid_getPrecisionStep_54c6a179]);
              }

              ::org::apache::lucene::document::FieldType$NumericType NumericConfig::getType() const
              {
                return ::org::apache::lucene::document::FieldType$NumericType(env->callObjectMethod(this$, mids$[mid_getType_81bd17c2]));
              }

              void NumericConfig::setNumberFormat(const ::java::text::NumberFormat & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setNumberFormat_d2d1ba24], a0.this$);
              }

              void NumericConfig::setPrecisionStep(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPrecisionStep_39c7bd3c], a0);
              }

              void NumericConfig::setType(const ::org::apache::lucene::document::FieldType$NumericType & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setType_d9029e47], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_NumericConfig_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_NumericConfig_instance_(PyTypeObject *type, PyObject *arg);
              static int t_NumericConfig_init_(t_NumericConfig *self, PyObject *args, PyObject *kwds);
              static PyObject *t_NumericConfig_equals(t_NumericConfig *self, PyObject *args);
              static PyObject *t_NumericConfig_getNumberFormat(t_NumericConfig *self);
              static PyObject *t_NumericConfig_getPrecisionStep(t_NumericConfig *self);
              static PyObject *t_NumericConfig_getType(t_NumericConfig *self);
              static PyObject *t_NumericConfig_setNumberFormat(t_NumericConfig *self, PyObject *arg);
              static PyObject *t_NumericConfig_setPrecisionStep(t_NumericConfig *self, PyObject *arg);
              static PyObject *t_NumericConfig_setType(t_NumericConfig *self, PyObject *arg);
              static PyObject *t_NumericConfig_get__numberFormat(t_NumericConfig *self, void *data);
              static int t_NumericConfig_set__numberFormat(t_NumericConfig *self, PyObject *arg, void *data);
              static PyObject *t_NumericConfig_get__precisionStep(t_NumericConfig *self, void *data);
              static int t_NumericConfig_set__precisionStep(t_NumericConfig *self, PyObject *arg, void *data);
              static PyObject *t_NumericConfig_get__type(t_NumericConfig *self, void *data);
              static int t_NumericConfig_set__type(t_NumericConfig *self, PyObject *arg, void *data);
              static PyGetSetDef t_NumericConfig__fields_[] = {
                DECLARE_GETSET_FIELD(t_NumericConfig, numberFormat),
                DECLARE_GETSET_FIELD(t_NumericConfig, precisionStep),
                DECLARE_GETSET_FIELD(t_NumericConfig, type),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_NumericConfig__methods_[] = {
                DECLARE_METHOD(t_NumericConfig, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericConfig, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_NumericConfig, equals, METH_VARARGS),
                DECLARE_METHOD(t_NumericConfig, getNumberFormat, METH_NOARGS),
                DECLARE_METHOD(t_NumericConfig, getPrecisionStep, METH_NOARGS),
                DECLARE_METHOD(t_NumericConfig, getType, METH_NOARGS),
                DECLARE_METHOD(t_NumericConfig, setNumberFormat, METH_O),
                DECLARE_METHOD(t_NumericConfig, setPrecisionStep, METH_O),
                DECLARE_METHOD(t_NumericConfig, setType, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(NumericConfig, t_NumericConfig, ::java::lang::Object, NumericConfig, t_NumericConfig_init_, 0, 0, t_NumericConfig__fields_, 0, 0);

              void t_NumericConfig::install(PyObject *module)
              {
                installType(&PY_TYPE(NumericConfig), module, "NumericConfig", 0);
              }

              void t_NumericConfig::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(NumericConfig).tp_dict, "class_", make_descriptor(NumericConfig::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(NumericConfig).tp_dict, "wrapfn_", make_descriptor(t_NumericConfig::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(NumericConfig).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_NumericConfig_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, NumericConfig::initializeClass, 1)))
                  return NULL;
                return t_NumericConfig::wrap_Object(NumericConfig(((t_NumericConfig *) arg)->object.this$));
              }
              static PyObject *t_NumericConfig_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, NumericConfig::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_NumericConfig_init_(t_NumericConfig *self, PyObject *args, PyObject *kwds)
              {
                jint a0;
                ::java::text::NumberFormat a1((jobject) NULL);
                ::org::apache::lucene::document::FieldType$NumericType a2((jobject) NULL);
                PyTypeObject **p2;
                NumericConfig object((jobject) NULL);

                if (!parseArgs(args, "IkK", ::java::text::NumberFormat::initializeClass, ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::document::t_FieldType$NumericType::parameters_))
                {
                  INT_CALL(object = NumericConfig(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_NumericConfig_equals(t_NumericConfig *self, PyObject *args)
              {
                ::java::lang::Object a0((jobject) NULL);
                jboolean result;

                if (!parseArgs(args, "o", &a0))
                {
                  OBJ_CALL(result = self->object.equals(a0));
                  Py_RETURN_BOOL(result);
                }

                return callSuper(&PY_TYPE(NumericConfig), (PyObject *) self, "equals", args, 2);
              }

              static PyObject *t_NumericConfig_getNumberFormat(t_NumericConfig *self)
              {
                ::java::text::NumberFormat result((jobject) NULL);
                OBJ_CALL(result = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(result);
              }

              static PyObject *t_NumericConfig_getPrecisionStep(t_NumericConfig *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPrecisionStep());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_NumericConfig_getType(t_NumericConfig *self)
              {
                ::org::apache::lucene::document::FieldType$NumericType result((jobject) NULL);
                OBJ_CALL(result = self->object.getType());
                return ::org::apache::lucene::document::t_FieldType$NumericType::wrap_Object(result);
              }

              static PyObject *t_NumericConfig_setNumberFormat(t_NumericConfig *self, PyObject *arg)
              {
                ::java::text::NumberFormat a0((jobject) NULL);

                if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.setNumberFormat(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setNumberFormat", arg);
                return NULL;
              }

              static PyObject *t_NumericConfig_setPrecisionStep(t_NumericConfig *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPrecisionStep(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPrecisionStep", arg);
                return NULL;
              }

              static PyObject *t_NumericConfig_setType(t_NumericConfig *self, PyObject *arg)
              {
                ::org::apache::lucene::document::FieldType$NumericType a0((jobject) NULL);
                PyTypeObject **p0;

                if (!parseArg(arg, "K", ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &a0, &p0, ::org::apache::lucene::document::t_FieldType$NumericType::parameters_))
                {
                  OBJ_CALL(self->object.setType(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setType", arg);
                return NULL;
              }

              static PyObject *t_NumericConfig_get__numberFormat(t_NumericConfig *self, void *data)
              {
                ::java::text::NumberFormat value((jobject) NULL);
                OBJ_CALL(value = self->object.getNumberFormat());
                return ::java::text::t_NumberFormat::wrap_Object(value);
              }
              static int t_NumericConfig_set__numberFormat(t_NumericConfig *self, PyObject *arg, void *data)
              {
                {
                  ::java::text::NumberFormat value((jobject) NULL);
                  if (!parseArg(arg, "k", ::java::text::NumberFormat::initializeClass, &value))
                  {
                    INT_CALL(self->object.setNumberFormat(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "numberFormat", arg);
                return -1;
              }

              static PyObject *t_NumericConfig_get__precisionStep(t_NumericConfig *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPrecisionStep());
                return PyInt_FromLong((long) value);
              }
              static int t_NumericConfig_set__precisionStep(t_NumericConfig *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPrecisionStep(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "precisionStep", arg);
                return -1;
              }

              static PyObject *t_NumericConfig_get__type(t_NumericConfig *self, void *data)
              {
                ::org::apache::lucene::document::FieldType$NumericType value((jobject) NULL);
                OBJ_CALL(value = self->object.getType());
                return ::org::apache::lucene::document::t_FieldType$NumericType::wrap_Object(value);
              }
              static int t_NumericConfig_set__type(t_NumericConfig *self, PyObject *arg, void *data)
              {
                {
                  ::org::apache::lucene::document::FieldType$NumericType value((jobject) NULL);
                  if (!parseArg(arg, "k", ::org::apache::lucene::document::FieldType$NumericType::initializeClass, &value))
                  {
                    INT_CALL(self->object.setType(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "type", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/util/CharArrayIterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {

          ::java::lang::Class *CharArrayIterator::class$ = NULL;
          jmethodID *CharArrayIterator::mids$ = NULL;
          bool CharArrayIterator::live$ = false;
          jboolean CharArrayIterator::HAS_BUGGY_BREAKITERATORS = (jboolean) 0;

          jclass CharArrayIterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/util/CharArrayIterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_clone_18028ee5] = env->getMethodID(cls, "clone", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_current_54c6a173] = env->getMethodID(cls, "current", "()C");
              mids$[mid_first_54c6a173] = env->getMethodID(cls, "first", "()C");
              mids$[mid_getBeginIndex_54c6a179] = env->getMethodID(cls, "getBeginIndex", "()I");
              mids$[mid_getEndIndex_54c6a179] = env->getMethodID(cls, "getEndIndex", "()I");
              mids$[mid_getIndex_54c6a179] = env->getMethodID(cls, "getIndex", "()I");
              mids$[mid_getLength_54c6a179] = env->getMethodID(cls, "getLength", "()I");
              mids$[mid_getStart_54c6a179] = env->getMethodID(cls, "getStart", "()I");
              mids$[mid_getText_dab10e7f] = env->getMethodID(cls, "getText", "()[C");
              mids$[mid_last_54c6a173] = env->getMethodID(cls, "last", "()C");
              mids$[mid_newSentenceInstance_18028ee5] = env->getStaticMethodID(cls, "newSentenceInstance", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_newWordInstance_18028ee5] = env->getStaticMethodID(cls, "newWordInstance", "()Lorg/apache/lucene/analysis/util/CharArrayIterator;");
              mids$[mid_next_54c6a173] = env->getMethodID(cls, "next", "()C");
              mids$[mid_previous_54c6a173] = env->getMethodID(cls, "previous", "()C");
              mids$[mid_setIndex_39c7bd29] = env->getMethodID(cls, "setIndex", "(I)C");
              mids$[mid_setText_6f0bb356] = env->getMethodID(cls, "setText", "([CII)V");
              mids$[mid_jreBugWorkaround_87fd544f] = env->getMethodID(cls, "jreBugWorkaround", "(C)C");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              HAS_BUGGY_BREAKITERATORS = env->getStaticBooleanField(cls, "HAS_BUGGY_BREAKITERATORS");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          CharArrayIterator::CharArrayIterator() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          CharArrayIterator CharArrayIterator::clone() const
          {
            return CharArrayIterator(env->callObjectMethod(this$, mids$[mid_clone_18028ee5]));
          }

          jchar CharArrayIterator::current() const
          {
            return env->callCharMethod(this$, mids$[mid_current_54c6a173]);
          }

          jchar CharArrayIterator::first() const
          {
            return env->callCharMethod(this$, mids$[mid_first_54c6a173]);
          }

          jint CharArrayIterator::getBeginIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getBeginIndex_54c6a179]);
          }

          jint CharArrayIterator::getEndIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getEndIndex_54c6a179]);
          }

          jint CharArrayIterator::getIndex() const
          {
            return env->callIntMethod(this$, mids$[mid_getIndex_54c6a179]);
          }

          jint CharArrayIterator::getLength() const
          {
            return env->callIntMethod(this$, mids$[mid_getLength_54c6a179]);
          }

          jint CharArrayIterator::getStart() const
          {
            return env->callIntMethod(this$, mids$[mid_getStart_54c6a179]);
          }

          JArray< jchar > CharArrayIterator::getText() const
          {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_getText_dab10e7f]));
          }

          jchar CharArrayIterator::last() const
          {
            return env->callCharMethod(this$, mids$[mid_last_54c6a173]);
          }

          CharArrayIterator CharArrayIterator::newSentenceInstance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayIterator(env->callStaticObjectMethod(cls, mids$[mid_newSentenceInstance_18028ee5]));
          }

          CharArrayIterator CharArrayIterator::newWordInstance()
          {
            jclass cls = env->getClass(initializeClass);
            return CharArrayIterator(env->callStaticObjectMethod(cls, mids$[mid_newWordInstance_18028ee5]));
          }

          jchar CharArrayIterator::next() const
          {
            return env->callCharMethod(this$, mids$[mid_next_54c6a173]);
          }

          jchar CharArrayIterator::previous() const
          {
            return env->callCharMethod(this$, mids$[mid_previous_54c6a173]);
          }

          jchar CharArrayIterator::setIndex(jint a0) const
          {
            return env->callCharMethod(this$, mids$[mid_setIndex_39c7bd29], a0);
          }

          void CharArrayIterator::setText(const JArray< jchar > & a0, jint a1, jint a2) const
          {
            env->callVoidMethod(this$, mids$[mid_setText_6f0bb356], a0.this$, a1, a2);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace util {
          static PyObject *t_CharArrayIterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_CharArrayIterator_instance_(PyTypeObject *type, PyObject *arg);
          static int t_CharArrayIterator_init_(t_CharArrayIterator *self, PyObject *args, PyObject *kwds);
          static PyObject *t_CharArrayIterator_clone(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_current(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_first(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getBeginIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getEndIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getIndex(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getLength(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getStart(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_getText(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_last(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_newSentenceInstance(PyTypeObject *type);
          static PyObject *t_CharArrayIterator_newWordInstance(PyTypeObject *type);
          static PyObject *t_CharArrayIterator_next(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_previous(t_CharArrayIterator *self);
          static PyObject *t_CharArrayIterator_setIndex(t_CharArrayIterator *self, PyObject *arg);
          static PyObject *t_CharArrayIterator_setText(t_CharArrayIterator *self, PyObject *args);
          static PyObject *t_CharArrayIterator_get__beginIndex(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__endIndex(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__index(t_CharArrayIterator *self, void *data);
          static int t_CharArrayIterator_set__index(t_CharArrayIterator *self, PyObject *arg, void *data);
          static PyObject *t_CharArrayIterator_get__length(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__start(t_CharArrayIterator *self, void *data);
          static PyObject *t_CharArrayIterator_get__text(t_CharArrayIterator *self, void *data);
          static PyGetSetDef t_CharArrayIterator__fields_[] = {
            DECLARE_GET_FIELD(t_CharArrayIterator, beginIndex),
            DECLARE_GET_FIELD(t_CharArrayIterator, endIndex),
            DECLARE_GETSET_FIELD(t_CharArrayIterator, index),
            DECLARE_GET_FIELD(t_CharArrayIterator, length),
            DECLARE_GET_FIELD(t_CharArrayIterator, start),
            DECLARE_GET_FIELD(t_CharArrayIterator, text),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_CharArrayIterator__methods_[] = {
            DECLARE_METHOD(t_CharArrayIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, clone, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, current, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, first, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getBeginIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getEndIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getIndex, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getLength, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getStart, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, getText, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, last, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, newSentenceInstance, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, newWordInstance, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_CharArrayIterator, next, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, previous, METH_NOARGS),
            DECLARE_METHOD(t_CharArrayIterator, setIndex, METH_O),
            DECLARE_METHOD(t_CharArrayIterator, setText, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(CharArrayIterator, t_CharArrayIterator, ::java::lang::Object, CharArrayIterator, t_CharArrayIterator_init_, 0, 0, t_CharArrayIterator__fields_, 0, 0);

          void t_CharArrayIterator::install(PyObject *module)
          {
            installType(&PY_TYPE(CharArrayIterator), module, "CharArrayIterator", 0);
          }

          void t_CharArrayIterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "class_", make_descriptor(CharArrayIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "wrapfn_", make_descriptor(t_CharArrayIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(CharArrayIterator::initializeClass);
            PyDict_SetItemString(PY_TYPE(CharArrayIterator).tp_dict, "HAS_BUGGY_BREAKITERATORS", make_descriptor(CharArrayIterator::HAS_BUGGY_BREAKITERATORS));
          }

          static PyObject *t_CharArrayIterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, CharArrayIterator::initializeClass, 1)))
              return NULL;
            return t_CharArrayIterator::wrap_Object(CharArrayIterator(((t_CharArrayIterator *) arg)->object.this$));
          }
          static PyObject *t_CharArrayIterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, CharArrayIterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_CharArrayIterator_init_(t_CharArrayIterator *self, PyObject *args, PyObject *kwds)
          {
            CharArrayIterator object((jobject) NULL);

            INT_CALL(object = CharArrayIterator());
            self->object = object;

            return 0;
          }

          static PyObject *t_CharArrayIterator_clone(t_CharArrayIterator *self)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_current(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.current());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_first(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.first());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_getBeginIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getBeginIndex());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getEndIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getEndIndex());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getIndex(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getIndex());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getLength(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getLength());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getStart(t_CharArrayIterator *self)
          {
            jint result;
            OBJ_CALL(result = self->object.getStart());
            return PyInt_FromLong((long) result);
          }

          static PyObject *t_CharArrayIterator_getText(t_CharArrayIterator *self)
          {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.getText());
            return result.wrap();
          }

          static PyObject *t_CharArrayIterator_last(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.last());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_newSentenceInstance(PyTypeObject *type)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayIterator::newSentenceInstance());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_newWordInstance(PyTypeObject *type)
          {
            CharArrayIterator result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::util::CharArrayIterator::newWordInstance());
            return t_CharArrayIterator::wrap_Object(result);
          }

          static PyObject *t_CharArrayIterator_next(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.next());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_previous(t_CharArrayIterator *self)
          {
            jchar result;
            OBJ_CALL(result = self->object.previous());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
          }

          static PyObject *t_CharArrayIterator_setIndex(t_CharArrayIterator *self, PyObject *arg)
          {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
              OBJ_CALL(result = self->object.setIndex(a0));
              return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "setIndex", arg);
            return NULL;
          }

          static PyObject *t_CharArrayIterator_setText(t_CharArrayIterator *self, PyObject *args)
          {
            JArray< jchar > a0((jobject) NULL);
            jint a1;
            jint a2;

            if (!parseArgs(args, "[CII", &a0, &a1, &a2))
            {
              OBJ_CALL(self->object.setText(a0, a1, a2));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setText", args);
            return NULL;
          }

          static PyObject *t_CharArrayIterator_get__beginIndex(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getBeginIndex());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__endIndex(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getEndIndex());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__index(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getIndex());
            return PyInt_FromLong((long) value);
          }
          static int t_CharArrayIterator_set__index(t_CharArrayIterator *self, PyObject *arg, void *data)
          {
            {
              jint value;
              if (!parseArg(arg, "I", &value))
              {
                INT_CALL(self->object.setIndex(value));
                return 0;
              }
            }
            PyErr_SetArgsError((PyObject *) self, "index", arg);
            return -1;
          }

          static PyObject *t_CharArrayIterator_get__length(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getLength());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__start(t_CharArrayIterator *self, void *data)
          {
            jint value;
            OBJ_CALL(value = self->object.getStart());
            return PyInt_FromLong((long) value);
          }

          static PyObject *t_CharArrayIterator_get__text(t_CharArrayIterator *self, void *data)
          {
            JArray< jchar > value((jobject) NULL);
            OBJ_CALL(value = self->object.getText());
            return value.wrap();
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/LockObtainFailedException.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *LockObtainFailedException::class$ = NULL;
        jmethodID *LockObtainFailedException::mids$ = NULL;
        bool LockObtainFailedException::live$ = false;

        jclass LockObtainFailedException::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/LockObtainFailedException");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
            mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LockObtainFailedException::LockObtainFailedException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        LockObtainFailedException::LockObtainFailedException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_LockObtainFailedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LockObtainFailedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_LockObtainFailedException_init_(t_LockObtainFailedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_LockObtainFailedException__methods_[] = {
          DECLARE_METHOD(t_LockObtainFailedException, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LockObtainFailedException, instance_, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LockObtainFailedException, t_LockObtainFailedException, ::java::io::IOException, LockObtainFailedException, t_LockObtainFailedException_init_, 0, 0, 0, 0, 0);

        void t_LockObtainFailedException::install(PyObject *module)
        {
          installType(&PY_TYPE(LockObtainFailedException), module, "LockObtainFailedException", 0);
        }

        void t_LockObtainFailedException::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LockObtainFailedException).tp_dict, "class_", make_descriptor(LockObtainFailedException::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LockObtainFailedException).tp_dict, "wrapfn_", make_descriptor(t_LockObtainFailedException::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LockObtainFailedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LockObtainFailedException_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LockObtainFailedException::initializeClass, 1)))
            return NULL;
          return t_LockObtainFailedException::wrap_Object(LockObtainFailedException(((t_LockObtainFailedException *) arg)->object.this$));
        }
        static PyObject *t_LockObtainFailedException_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LockObtainFailedException::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_LockObtainFailedException_init_(t_LockObtainFailedException *self, PyObject *args, PyObject *kwds)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::java::lang::String a0((jobject) NULL);
              LockObtainFailedException object((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                INT_CALL(object = LockObtainFailedException(a0));
                self->object = object;
                break;
              }
            }
            goto err;
           case 2:
            {
              ::java::lang::String a0((jobject) NULL);
              ::java::lang::Throwable a1((jobject) NULL);
              LockObtainFailedException object((jobject) NULL);

              if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
              {
                INT_CALL(object = LockObtainFailedException(a0, a1));
                self->object = object;
                break;
              }
            }
           default:
           err:
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/parser/ParseException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/parser/Token.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {

            ::java::lang::Class *ParseException::class$ = NULL;
            jmethodID *ParseException::mids$ = NULL;
            jfieldID *ParseException::fids$ = NULL;
            bool ParseException::live$ = false;

            jclass ParseException::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/parser/ParseException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_dea8e26f] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/surround/parser/Token;[[I[Ljava/lang/String;)V");

                fids$ = new jfieldID[max_fid];
                fids$[fid_currentToken] = env->getFieldID(cls, "currentToken", "Lorg/apache/lucene/queryparser/surround/parser/Token;");
                fids$[fid_expectedTokenSequences] = env->getFieldID(cls, "expectedTokenSequences", "[[I");
                fids$[fid_tokenImage] = env->getFieldID(cls, "tokenImage", "[Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            ParseException::ParseException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

            ParseException::ParseException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            ParseException::ParseException(const ::org::apache::lucene::queryparser::surround::parser::Token & a0, const JArray< JArray< jint > > & a1, const JArray< ::java::lang::String > & a2) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_dea8e26f, a0.this$, a1.this$, a2.this$)) {}

            ::org::apache::lucene::queryparser::surround::parser::Token ParseException::_get_currentToken() const
            {
              return ::org::apache::lucene::queryparser::surround::parser::Token(env->getObjectField(this$, fids$[fid_currentToken]));
            }

            void ParseException::_set_currentToken(const ::org::apache::lucene::queryparser::surround::parser::Token & a0) const
            {
              env->setObjectField(this$, fids$[fid_currentToken], a0.this$);
            }

            JArray< JArray< jint > > ParseException::_get_expectedTokenSequences() const
            {
              return JArray< JArray< jint > >(env->getObjectField(this$, fids$[fid_expectedTokenSequences]));
            }

            void ParseException::_set_expectedTokenSequences(const JArray< JArray< jint > > & a0) const
            {
              env->setObjectField(this$, fids$[fid_expectedTokenSequences], a0.this$);
            }

            JArray< ::java::lang::String > ParseException::_get_tokenImage() const
            {
              return JArray< ::java::lang::String >(env->getObjectField(this$, fids$[fid_tokenImage]));
            }

            void ParseException::_set_tokenImage(const JArray< ::java::lang::String > & a0) const
            {
              env->setObjectField(this$, fids$[fid_tokenImage], a0.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace parser {
            static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg);
            static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds);
            static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data);
            static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data);
            static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data);
            static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data);
            static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data);
            static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data);

            static PyGetSetDef t_ParseException__fields_[] = {
              DECLARE_GETSET_FIELD(t_ParseException, currentToken),
              DECLARE_GETSET_FIELD(t_ParseException, expectedTokenSequences),
              DECLARE_GETSET_FIELD(t_ParseException, tokenImage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_ParseException__methods_[] = {
              DECLARE_METHOD(t_ParseException, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_ParseException, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(ParseException, t_ParseException, ::java::lang::Exception, ParseException, t_ParseException_init_, 0, 0, t_ParseException__fields_, 0, 0);

            void t_ParseException::install(PyObject *module)
            {
              installType(&PY_TYPE(ParseException), module, "ParseException", 0);
            }

            void t_ParseException::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "class_", make_descriptor(ParseException::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "wrapfn_", make_descriptor(t_ParseException::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(ParseException).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_ParseException_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, ParseException::initializeClass, 1)))
                return NULL;
              return t_ParseException::wrap_Object(ParseException(((t_ParseException *) arg)->object.this$));
            }
            static PyObject *t_ParseException_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, ParseException::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_ParseException_init_(t_ParseException *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ParseException object((jobject) NULL);

                  INT_CALL(object = ParseException());
                  self->object = object;
                  break;
                }
                goto err;
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  ParseException object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = ParseException(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 3:
                {
                  ::org::apache::lucene::queryparser::surround::parser::Token a0((jobject) NULL);
                  JArray< JArray< jint > > a1((jobject) NULL);
                  JArray< ::java::lang::String > a2((jobject) NULL);
                  ParseException object((jobject) NULL);

                  if (!parseArgs(args, "k[[I[s", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &a0, &a1, &a2))
                  {
                    INT_CALL(object = ParseException(a0, a1, a2));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_ParseException_get__currentToken(t_ParseException *self, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              OBJ_CALL(value = self->object._get_currentToken());
              return ::org::apache::lucene::queryparser::surround::parser::t_Token::wrap_Object(value);
            }
            static int t_ParseException_set__currentToken(t_ParseException *self, PyObject *arg, void *data)
            {
              ::org::apache::lucene::queryparser::surround::parser::Token value((jobject) NULL);
              if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::surround::parser::Token::initializeClass, &value))
              {
                INT_CALL(self->object._set_currentToken(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "currentToken", arg);
              return -1;
            }

            static PyObject *t_ParseException_get__expectedTokenSequences(t_ParseException *self, void *data)
            {
              JArray< JArray< jint > > value((jobject) NULL);
              OBJ_CALL(value = self->object._get_expectedTokenSequences());
              return JArray<jobject>(value.this$).wrap(NULL);
            }
            static int t_ParseException_set__expectedTokenSequences(t_ParseException *self, PyObject *arg, void *data)
            {
              JArray< JArray< jint > > value((jobject) NULL);
              if (!parseArg(arg, "[[I", &value))
              {
                INT_CALL(self->object._set_expectedTokenSequences(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "expectedTokenSequences", arg);
              return -1;
            }

            static PyObject *t_ParseException_get__tokenImage(t_ParseException *self, void *data)
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              OBJ_CALL(value = self->object._get_tokenImage());
              return JArray<jstring>(value.this$).wrap();
            }
            static int t_ParseException_set__tokenImage(t_ParseException *self, PyObject *arg, void *data)
            {
              JArray< ::java::lang::String > value((jobject) NULL);
              if (!parseArg(arg, "[s", &value))
              {
                INT_CALL(self->object._set_tokenImage(value));
                return 0;
              }
              PyErr_SetArgsError((PyObject *) self, "tokenImage", arg);
              return -1;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/surround/query/SrndTermQuery.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {

            ::java::lang::Class *SrndTermQuery::class$ = NULL;
            jmethodID *SrndTermQuery::mids$ = NULL;
            bool SrndTermQuery::live$ = false;

            jclass SrndTermQuery::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/surround/query/SrndTermQuery");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
                mids$[mid_getLuceneTerm_2864f4ee] = env->getMethodID(cls, "getLuceneTerm", "(Ljava/lang/String;)Lorg/apache/lucene/index/Term;");
                mids$[mid_getTermText_14c7b5c5] = env->getMethodID(cls, "getTermText", "()Ljava/lang/String;");
                mids$[mid_toStringUnquoted_14c7b5c5] = env->getMethodID(cls, "toStringUnquoted", "()Ljava/lang/String;");
                mids$[mid_visitMatchingTerms_330199a1] = env->getMethodID(cls, "visitMatchingTerms", "(Lorg/apache/lucene/index/IndexReader;Ljava/lang/String;Lorg/apache/lucene/queryparser/surround/query/SimpleTerm$MatchingTermVisitor;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            SrndTermQuery::SrndTermQuery(const ::java::lang::String & a0, jboolean a1) : ::org::apache::lucene::queryparser::surround::query::SimpleTerm(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

            ::org::apache::lucene::index::Term SrndTermQuery::getLuceneTerm(const ::java::lang::String & a0) const
            {
              return ::org::apache::lucene::index::Term(env->callObjectMethod(this$, mids$[mid_getLuceneTerm_2864f4ee], a0.this$));
            }

            ::java::lang::String SrndTermQuery::getTermText() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTermText_14c7b5c5]));
            }

            ::java::lang::String SrndTermQuery::toStringUnquoted() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringUnquoted_14c7b5c5]));
            }

            void SrndTermQuery::visitMatchingTerms(const ::org::apache::lucene::index::IndexReader & a0, const ::java::lang::String & a1, const ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor & a2) const
            {
              env->callVoidMethod(this$, mids$[mid_visitMatchingTerms_330199a1], a0.this$, a1.this$, a2.this$);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace surround {
          namespace query {
            static PyObject *t_SrndTermQuery_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_SrndTermQuery_instance_(PyTypeObject *type, PyObject *arg);
            static int t_SrndTermQuery_init_(t_SrndTermQuery *self, PyObject *args, PyObject *kwds);
            static PyObject *t_SrndTermQuery_getLuceneTerm(t_SrndTermQuery *self, PyObject *arg);
            static PyObject *t_SrndTermQuery_getTermText(t_SrndTermQuery *self);
            static PyObject *t_SrndTermQuery_toStringUnquoted(t_SrndTermQuery *self, PyObject *args);
            static PyObject *t_SrndTermQuery_visitMatchingTerms(t_SrndTermQuery *self, PyObject *args);
            static PyObject *t_SrndTermQuery_get__termText(t_SrndTermQuery *self, void *data);
            static PyGetSetDef t_SrndTermQuery__fields_[] = {
              DECLARE_GET_FIELD(t_SrndTermQuery, termText),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_SrndTermQuery__methods_[] = {
              DECLARE_METHOD(t_SrndTermQuery, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTermQuery, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_SrndTermQuery, getLuceneTerm, METH_O),
              DECLARE_METHOD(t_SrndTermQuery, getTermText, METH_NOARGS),
              DECLARE_METHOD(t_SrndTermQuery, toStringUnquoted, METH_VARARGS),
              DECLARE_METHOD(t_SrndTermQuery, visitMatchingTerms, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(SrndTermQuery, t_SrndTermQuery, ::org::apache::lucene::queryparser::surround::query::SimpleTerm, SrndTermQuery, t_SrndTermQuery_init_, 0, 0, t_SrndTermQuery__fields_, 0, 0);

            void t_SrndTermQuery::install(PyObject *module)
            {
              installType(&PY_TYPE(SrndTermQuery), module, "SrndTermQuery", 0);
            }

            void t_SrndTermQuery::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(SrndTermQuery).tp_dict, "class_", make_descriptor(SrndTermQuery::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(SrndTermQuery).tp_dict, "wrapfn_", make_descriptor(t_SrndTermQuery::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(SrndTermQuery).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_SrndTermQuery_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, SrndTermQuery::initializeClass, 1)))
                return NULL;
              return t_SrndTermQuery::wrap_Object(SrndTermQuery(((t_SrndTermQuery *) arg)->object.this$));
            }
            static PyObject *t_SrndTermQuery_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, SrndTermQuery::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_SrndTermQuery_init_(t_SrndTermQuery *self, PyObject *args, PyObject *kwds)
            {
              ::java::lang::String a0((jobject) NULL);
              jboolean a1;
              SrndTermQuery object((jobject) NULL);

              if (!parseArgs(args, "sZ", &a0, &a1))
              {
                INT_CALL(object = SrndTermQuery(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_SrndTermQuery_getLuceneTerm(t_SrndTermQuery *self, PyObject *arg)
            {
              ::java::lang::String a0((jobject) NULL);
              ::org::apache::lucene::index::Term result((jobject) NULL);

              if (!parseArg(arg, "s", &a0))
              {
                OBJ_CALL(result = self->object.getLuceneTerm(a0));
                return ::org::apache::lucene::index::t_Term::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "getLuceneTerm", arg);
              return NULL;
            }

            static PyObject *t_SrndTermQuery_getTermText(t_SrndTermQuery *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getTermText());
              return j2p(result);
            }

            static PyObject *t_SrndTermQuery_toStringUnquoted(t_SrndTermQuery *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toStringUnquoted());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(SrndTermQuery), (PyObject *) self, "toStringUnquoted", args, 2);
            }

            static PyObject *t_SrndTermQuery_visitMatchingTerms(t_SrndTermQuery *self, PyObject *args)
            {
              ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
              ::java::lang::String a1((jobject) NULL);
              ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor a2((jobject) NULL);

              if (!parseArgs(args, "ksk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::queryparser::surround::query::SimpleTerm$MatchingTermVisitor::initializeClass, &a0, &a1, &a2))
              {
                OBJ_CALL(self->object.visitMatchingTerms(a0, a1, a2));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(SrndTermQuery), (PyObject *) self, "visitMatchingTerms", args, 2);
            }

            static PyObject *t_SrndTermQuery_get__termText(t_SrndTermQuery *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getTermText());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/wikipedia/WikipediaTokenizer.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {

          ::java::lang::Class *WikipediaTokenizerFactory::class$ = NULL;
          jmethodID *WikipediaTokenizerFactory::mids$ = NULL;
          bool WikipediaTokenizerFactory::live$ = false;

          jclass WikipediaTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/wikipedia/WikipediaTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_8727c66d] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/wikipedia/WikipediaTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          WikipediaTokenizerFactory::WikipediaTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer WikipediaTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer(env->callObjectMethod(this$, mids$[mid_create_8727c66d], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace wikipedia {
          static PyObject *t_WikipediaTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_WikipediaTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_WikipediaTokenizerFactory_init_(t_WikipediaTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_WikipediaTokenizerFactory_create(t_WikipediaTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_WikipediaTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_WikipediaTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_WikipediaTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(WikipediaTokenizerFactory, t_WikipediaTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, WikipediaTokenizerFactory, t_WikipediaTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_WikipediaTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(WikipediaTokenizerFactory), module, "WikipediaTokenizerFactory", 0);
          }

          void t_WikipediaTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizerFactory).tp_dict, "class_", make_descriptor(WikipediaTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_WikipediaTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(WikipediaTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_WikipediaTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, WikipediaTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_WikipediaTokenizerFactory::wrap_Object(WikipediaTokenizerFactory(((t_WikipediaTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_WikipediaTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, WikipediaTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_WikipediaTokenizerFactory_init_(t_WikipediaTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            WikipediaTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = WikipediaTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_WikipediaTokenizerFactory_create(t_WikipediaTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::wikipedia::WikipediaTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::wikipedia::t_WikipediaTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(WikipediaTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/core/LetterTokenizerFactory.h"
#include "org/apache/lucene/util/AttributeFactory.h"
#include "org/apache/lucene/analysis/core/LetterTokenizer.h"
#include "java/lang/String.h"
#include "java/util/Map.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {

          ::java::lang::Class *LetterTokenizerFactory::class$ = NULL;
          jmethodID *LetterTokenizerFactory::mids$ = NULL;
          bool LetterTokenizerFactory::live$ = false;

          jclass LetterTokenizerFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/core/LetterTokenizerFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_5d87cc2c] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/util/AttributeFactory;Ljava/io/Reader;)Lorg/apache/lucene/analysis/core/LetterTokenizer;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LetterTokenizerFactory::LetterTokenizerFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenizerFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::core::LetterTokenizer LetterTokenizerFactory::create(const ::org::apache::lucene::util::AttributeFactory & a0, const ::java::io::Reader & a1) const
          {
            return ::org::apache::lucene::analysis::core::LetterTokenizer(env->callObjectMethod(this$, mids$[mid_create_5d87cc2c], a0.this$, a1.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace core {
          static PyObject *t_LetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LetterTokenizerFactory_init_(t_LetterTokenizerFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LetterTokenizerFactory_create(t_LetterTokenizerFactory *self, PyObject *args);

          static PyMethodDef t_LetterTokenizerFactory__methods_[] = {
            DECLARE_METHOD(t_LetterTokenizerFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizerFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LetterTokenizerFactory, create, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LetterTokenizerFactory, t_LetterTokenizerFactory, ::org::apache::lucene::analysis::util::TokenizerFactory, LetterTokenizerFactory, t_LetterTokenizerFactory_init_, 0, 0, 0, 0, 0);

          void t_LetterTokenizerFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(LetterTokenizerFactory), module, "LetterTokenizerFactory", 0);
          }

          void t_LetterTokenizerFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LetterTokenizerFactory).tp_dict, "class_", make_descriptor(LetterTokenizerFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LetterTokenizerFactory).tp_dict, "wrapfn_", make_descriptor(t_LetterTokenizerFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LetterTokenizerFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LetterTokenizerFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LetterTokenizerFactory::initializeClass, 1)))
              return NULL;
            return t_LetterTokenizerFactory::wrap_Object(LetterTokenizerFactory(((t_LetterTokenizerFactory *) arg)->object.this$));
          }
          static PyObject *t_LetterTokenizerFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LetterTokenizerFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LetterTokenizerFactory_init_(t_LetterTokenizerFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            LetterTokenizerFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = LetterTokenizerFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_LetterTokenizerFactory_create(t_LetterTokenizerFactory *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeFactory a0((jobject) NULL);
            ::java::io::Reader a1((jobject) NULL);
            ::org::apache::lucene::analysis::core::LetterTokenizer result((jobject) NULL);

            if (!parseArgs(args, "kk", ::org::apache::lucene::util::AttributeFactory::initializeClass, ::java::io::Reader::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.create(a0, a1));
              return ::org::apache::lucene::analysis::core::t_LetterTokenizer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LetterTokenizerFactory), (PyObject *) self, "create", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *FuzzyQueryNode::class$ = NULL;
              jmethodID *FuzzyQueryNode::mids$ = NULL;
              bool FuzzyQueryNode::live$ = false;

              jclass FuzzyQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_7cd5e8f3] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;FII)V");
                  mids$[mid_cloneTree_90198571] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/FuzzyQueryNode;");
                  mids$[mid_getPrefixLength_54c6a179] = env->getMethodID(cls, "getPrefixLength", "()I");
                  mids$[mid_getSimilarity_54c6a176] = env->getMethodID(cls, "getSimilarity", "()F");
                  mids$[mid_setPrefixLength_39c7bd3c] = env->getMethodID(cls, "setPrefixLength", "(I)V");
                  mids$[mid_setSimilarity_06298cab] = env->getMethodID(cls, "setSimilarity", "(F)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNode::FuzzyQueryNode(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1, jfloat a2, jint a3, jint a4) : ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode(env->newObject(initializeClass, &mids$, mid_init$_7cd5e8f3, a0.this$, a1.this$, a2, a3, a4)) {}

              FuzzyQueryNode FuzzyQueryNode::cloneTree() const
              {
                return FuzzyQueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_90198571]));
              }

              jint FuzzyQueryNode::getPrefixLength() const
              {
                return env->callIntMethod(this$, mids$[mid_getPrefixLength_54c6a179]);
              }

              jfloat FuzzyQueryNode::getSimilarity() const
              {
                return env->callFloatMethod(this$, mids$[mid_getSimilarity_54c6a176]);
              }

              void FuzzyQueryNode::setPrefixLength(jint a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setPrefixLength_39c7bd3c], a0);
              }

              void FuzzyQueryNode::setSimilarity(jfloat a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setSimilarity_06298cab], a0);
              }

              ::java::lang::CharSequence FuzzyQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String FuzzyQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_FuzzyQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNode_init_(t_FuzzyQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FuzzyQueryNode_cloneTree(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_getPrefixLength(t_FuzzyQueryNode *self);
              static PyObject *t_FuzzyQueryNode_getSimilarity(t_FuzzyQueryNode *self);
              static PyObject *t_FuzzyQueryNode_setPrefixLength(t_FuzzyQueryNode *self, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_setSimilarity(t_FuzzyQueryNode *self, PyObject *arg);
              static PyObject *t_FuzzyQueryNode_toQueryString(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_toString(t_FuzzyQueryNode *self, PyObject *args);
              static PyObject *t_FuzzyQueryNode_get__prefixLength(t_FuzzyQueryNode *self, void *data);
              static int t_FuzzyQueryNode_set__prefixLength(t_FuzzyQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_FuzzyQueryNode_get__similarity(t_FuzzyQueryNode *self, void *data);
              static int t_FuzzyQueryNode_set__similarity(t_FuzzyQueryNode *self, PyObject *arg, void *data);
              static PyGetSetDef t_FuzzyQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_FuzzyQueryNode, prefixLength),
                DECLARE_GETSET_FIELD(t_FuzzyQueryNode, similarity),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_FuzzyQueryNode__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, getPrefixLength, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, getSimilarity, METH_NOARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, setPrefixLength, METH_O),
                DECLARE_METHOD(t_FuzzyQueryNode, setSimilarity, METH_O),
                DECLARE_METHOD(t_FuzzyQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_FuzzyQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyQueryNode, t_FuzzyQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::FieldQueryNode, FuzzyQueryNode, t_FuzzyQueryNode_init_, 0, 0, t_FuzzyQueryNode__fields_, 0, 0);

              void t_FuzzyQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNode), module, "FuzzyQueryNode", 0);
              }

              void t_FuzzyQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNode).tp_dict, "class_", make_descriptor(FuzzyQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNode).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNode::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNode::wrap_Object(FuzzyQueryNode(((t_FuzzyQueryNode *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNode_init_(t_FuzzyQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::lang::CharSequence a1((jobject) NULL);
                jfloat a2;
                jint a3;
                jint a4;
                FuzzyQueryNode object((jobject) NULL);

                if (!parseArgs(args, "OOFII", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3, &a4))
                {
                  INT_CALL(object = FuzzyQueryNode(a0, a1, a2, a3, a4));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FuzzyQueryNode_cloneTree(t_FuzzyQueryNode *self, PyObject *args)
              {
                FuzzyQueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return t_FuzzyQueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FuzzyQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_getPrefixLength(t_FuzzyQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getPrefixLength());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_FuzzyQueryNode_getSimilarity(t_FuzzyQueryNode *self)
              {
                jfloat result;
                OBJ_CALL(result = self->object.getSimilarity());
                return PyFloat_FromDouble((double) result);
              }

              static PyObject *t_FuzzyQueryNode_setPrefixLength(t_FuzzyQueryNode *self, PyObject *arg)
              {
                jint a0;

                if (!parseArg(arg, "I", &a0))
                {
                  OBJ_CALL(self->object.setPrefixLength(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setPrefixLength", arg);
                return NULL;
              }

              static PyObject *t_FuzzyQueryNode_setSimilarity(t_FuzzyQueryNode *self, PyObject *arg)
              {
                jfloat a0;

                if (!parseArg(arg, "F", &a0))
                {
                  OBJ_CALL(self->object.setSimilarity(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setSimilarity", arg);
                return NULL;
              }

              static PyObject *t_FuzzyQueryNode_toQueryString(t_FuzzyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(FuzzyQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_toString(t_FuzzyQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(FuzzyQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_FuzzyQueryNode_get__prefixLength(t_FuzzyQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getPrefixLength());
                return PyInt_FromLong((long) value);
              }
              static int t_FuzzyQueryNode_set__prefixLength(t_FuzzyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jint value;
                  if (!parseArg(arg, "I", &value))
                  {
                    INT_CALL(self->object.setPrefixLength(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "prefixLength", arg);
                return -1;
              }

              static PyObject *t_FuzzyQueryNode_get__similarity(t_FuzzyQueryNode *self, void *data)
              {
                jfloat value;
                OBJ_CALL(value = self->object.getSimilarity());
                return PyFloat_FromDouble((double) value);
              }
              static int t_FuzzyQueryNode_set__similarity(t_FuzzyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  jfloat value;
                  if (!parseArg(arg, "F", &value))
                  {
                    INT_CALL(self->object.setSimilarity(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "similarity", arg);
                return -1;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/el/GreekLowerCaseFilterFactory.h"
#include "org/apache/lucene/analysis/el/GreekLowerCaseFilter.h"
#include "org/apache/lucene/analysis/TokenStream.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/analysis/util/MultiTermAwareComponent.h"
#include "org/apache/lucene/analysis/util/AbstractAnalysisFactory.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {

          ::java::lang::Class *GreekLowerCaseFilterFactory::class$ = NULL;
          jmethodID *GreekLowerCaseFilterFactory::mids$ = NULL;
          bool GreekLowerCaseFilterFactory::live$ = false;

          jclass GreekLowerCaseFilterFactory::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/el/GreekLowerCaseFilterFactory");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
              mids$[mid_create_ce990bd7] = env->getMethodID(cls, "create", "(Lorg/apache/lucene/analysis/TokenStream;)Lorg/apache/lucene/analysis/el/GreekLowerCaseFilter;");
              mids$[mid_getMultiTermComponent_0a3f1d72] = env->getMethodID(cls, "getMultiTermComponent", "()Lorg/apache/lucene/analysis/util/AbstractAnalysisFactory;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          GreekLowerCaseFilterFactory::GreekLowerCaseFilterFactory(const ::java::util::Map & a0) : ::org::apache::lucene::analysis::util::TokenFilterFactory(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

          ::org::apache::lucene::analysis::el::GreekLowerCaseFilter GreekLowerCaseFilterFactory::create(const ::org::apache::lucene::analysis::TokenStream & a0) const
          {
            return ::org::apache::lucene::analysis::el::GreekLowerCaseFilter(env->callObjectMethod(this$, mids$[mid_create_ce990bd7], a0.this$));
          }

          ::org::apache::lucene::analysis::util::AbstractAnalysisFactory GreekLowerCaseFilterFactory::getMultiTermComponent() const
          {
            return ::org::apache::lucene::analysis::util::AbstractAnalysisFactory(env->callObjectMethod(this$, mids$[mid_getMultiTermComponent_0a3f1d72]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace el {
          static PyObject *t_GreekLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_GreekLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg);
          static int t_GreekLowerCaseFilterFactory_init_(t_GreekLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds);
          static PyObject *t_GreekLowerCaseFilterFactory_create(t_GreekLowerCaseFilterFactory *self, PyObject *args);
          static PyObject *t_GreekLowerCaseFilterFactory_getMultiTermComponent(t_GreekLowerCaseFilterFactory *self);
          static PyObject *t_GreekLowerCaseFilterFactory_get__multiTermComponent(t_GreekLowerCaseFilterFactory *self, void *data);
          static PyGetSetDef t_GreekLowerCaseFilterFactory__fields_[] = {
            DECLARE_GET_FIELD(t_GreekLowerCaseFilterFactory, multiTermComponent),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_GreekLowerCaseFilterFactory__methods_[] = {
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, create, METH_VARARGS),
            DECLARE_METHOD(t_GreekLowerCaseFilterFactory, getMultiTermComponent, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(GreekLowerCaseFilterFactory, t_GreekLowerCaseFilterFactory, ::org::apache::lucene::analysis::util::TokenFilterFactory, GreekLowerCaseFilterFactory, t_GreekLowerCaseFilterFactory_init_, 0, 0, t_GreekLowerCaseFilterFactory__fields_, 0, 0);

          void t_GreekLowerCaseFilterFactory::install(PyObject *module)
          {
            installType(&PY_TYPE(GreekLowerCaseFilterFactory), module, "GreekLowerCaseFilterFactory", 0);
          }

          void t_GreekLowerCaseFilterFactory::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilterFactory).tp_dict, "class_", make_descriptor(GreekLowerCaseFilterFactory::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilterFactory).tp_dict, "wrapfn_", make_descriptor(t_GreekLowerCaseFilterFactory::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(GreekLowerCaseFilterFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_GreekLowerCaseFilterFactory_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, GreekLowerCaseFilterFactory::initializeClass, 1)))
              return NULL;
            return t_GreekLowerCaseFilterFactory::wrap_Object(GreekLowerCaseFilterFactory(((t_GreekLowerCaseFilterFactory *) arg)->object.this$));
          }
          static PyObject *t_GreekLowerCaseFilterFactory_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, GreekLowerCaseFilterFactory::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_GreekLowerCaseFilterFactory_init_(t_GreekLowerCaseFilterFactory *self, PyObject *args, PyObject *kwds)
          {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;
            GreekLowerCaseFilterFactory object((jobject) NULL);

            if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
              INT_CALL(object = GreekLowerCaseFilterFactory(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_GreekLowerCaseFilterFactory_create(t_GreekLowerCaseFilterFactory *self, PyObject *args)
          {
            ::org::apache::lucene::analysis::TokenStream a0((jobject) NULL);
            ::org::apache::lucene::analysis::el::GreekLowerCaseFilter result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::analysis::TokenStream::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.create(a0));
              return ::org::apache::lucene::analysis::el::t_GreekLowerCaseFilter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(GreekLowerCaseFilterFactory), (PyObject *) self, "create", args, 2);
          }

          static PyObject *t_GreekLowerCaseFilterFactory_getMultiTermComponent(t_GreekLowerCaseFilterFactory *self)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory result((jobject) NULL);
            OBJ_CALL(result = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(result);
          }

          static PyObject *t_GreekLowerCaseFilterFactory_get__multiTermComponent(t_GreekLowerCaseFilterFactory *self, void *data)
          {
            ::org::apache::lucene::analysis::util::AbstractAnalysisFactory value((jobject) NULL);
            OBJ_CALL(value = self->object.getMultiTermComponent());
            return ::org::apache::lucene::analysis::util::t_AbstractAnalysisFactory::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/charfilter/NormalizeCharMap.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {

          ::java::lang::Class *NormalizeCharMap$Builder::class$ = NULL;
          jmethodID *NormalizeCharMap$Builder::mids$ = NULL;
          bool NormalizeCharMap$Builder::live$ = false;

          jclass NormalizeCharMap$Builder::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/charfilter/NormalizeCharMap$Builder");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_add_4a264742] = env->getMethodID(cls, "add", "(Ljava/lang/String;Ljava/lang/String;)V");
              mids$[mid_build_bf8be9b0] = env->getMethodID(cls, "build", "()Lorg/apache/lucene/analysis/charfilter/NormalizeCharMap;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizeCharMap$Builder::NormalizeCharMap$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void NormalizeCharMap$Builder::add(const ::java::lang::String & a0, const ::java::lang::String & a1) const
          {
            env->callVoidMethod(this$, mids$[mid_add_4a264742], a0.this$, a1.this$);
          }

          ::org::apache::lucene::analysis::charfilter::NormalizeCharMap NormalizeCharMap$Builder::build() const
          {
            return ::org::apache::lucene::analysis::charfilter::NormalizeCharMap(env->callObjectMethod(this$, mids$[mid_build_bf8be9b0]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace charfilter {
          static PyObject *t_NormalizeCharMap$Builder_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizeCharMap$Builder_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizeCharMap$Builder_init_(t_NormalizeCharMap$Builder *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizeCharMap$Builder_add(t_NormalizeCharMap$Builder *self, PyObject *args);
          static PyObject *t_NormalizeCharMap$Builder_build(t_NormalizeCharMap$Builder *self);

          static PyMethodDef t_NormalizeCharMap$Builder__methods_[] = {
            DECLARE_METHOD(t_NormalizeCharMap$Builder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, add, METH_VARARGS),
            DECLARE_METHOD(t_NormalizeCharMap$Builder, build, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizeCharMap$Builder, t_NormalizeCharMap$Builder, ::java::lang::Object, NormalizeCharMap$Builder, t_NormalizeCharMap$Builder_init_, 0, 0, 0, 0, 0);

          void t_NormalizeCharMap$Builder::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizeCharMap$Builder), module, "NormalizeCharMap$Builder", 0);
          }

          void t_NormalizeCharMap$Builder::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap$Builder).tp_dict, "class_", make_descriptor(NormalizeCharMap$Builder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap$Builder).tp_dict, "wrapfn_", make_descriptor(t_NormalizeCharMap$Builder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizeCharMap$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizeCharMap$Builder_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizeCharMap$Builder::initializeClass, 1)))
              return NULL;
            return t_NormalizeCharMap$Builder::wrap_Object(NormalizeCharMap$Builder(((t_NormalizeCharMap$Builder *) arg)->object.this$));
          }
          static PyObject *t_NormalizeCharMap$Builder_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizeCharMap$Builder::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizeCharMap$Builder_init_(t_NormalizeCharMap$Builder *self, PyObject *args, PyObject *kwds)
          {
            NormalizeCharMap$Builder object((jobject) NULL);

            INT_CALL(object = NormalizeCharMap$Builder());
            self->object = object;

            return 0;
          }

          static PyObject *t_NormalizeCharMap$Builder_add(t_NormalizeCharMap$Builder *self, PyObject *args)
          {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
              OBJ_CALL(self->object.add(a0, a1));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", args);
            return NULL;
          }

          static PyObject *t_NormalizeCharMap$Builder_build(t_NormalizeCharMap$Builder *self)
          {
            ::org::apache::lucene::analysis::charfilter::NormalizeCharMap result((jobject) NULL);
            OBJ_CALL(result = self->object.build());
            return ::org::apache::lucene::analysis::charfilter::t_NormalizeCharMap::wrap_Object(result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/postingshighlight/PostingsHighlighter.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/search/TopDocs.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {

          ::java::lang::Class *PostingsHighlighter::class$ = NULL;
          jmethodID *PostingsHighlighter::mids$ = NULL;
          bool PostingsHighlighter::live$ = false;
          jint PostingsHighlighter::DEFAULT_MAX_LENGTH = (jint) 0;

          jclass PostingsHighlighter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/postingshighlight/PostingsHighlighter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
              mids$[mid_highlight_cfb8b283] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;)[Ljava/lang/String;");
              mids$[mid_highlight_c287afc1] = env->getMethodID(cls, "highlight", "(Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;I)[Ljava/lang/String;");
              mids$[mid_highlightFields_52512a83] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;)Ljava/util/Map;");
              mids$[mid_highlightFields_d3afe138] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;[I[I)Ljava/util/Map;");
              mids$[mid_highlightFields_20e79c3d] = env->getMethodID(cls, "highlightFields", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;Lorg/apache/lucene/search/TopDocs;[I)Ljava/util/Map;");
              mids$[mid_getFormatter_a176835f] = env->getMethodID(cls, "getFormatter", "(Ljava/lang/String;)Lorg/apache/lucene/search/postingshighlight/PassageFormatter;");
              mids$[mid_getScorer_b8762390] = env->getMethodID(cls, "getScorer", "(Ljava/lang/String;)Lorg/apache/lucene/search/postingshighlight/PassageScorer;");
              mids$[mid_highlightFieldsAsObjects_d3afe138] = env->getMethodID(cls, "highlightFieldsAsObjects", "([Ljava/lang/String;Lorg/apache/lucene/search/Query;Lorg/apache/lucene/search/IndexSearcher;[I[I)Ljava/util/Map;");
              mids$[mid_getMultiValuedSeparator_5fdc3f5d] = env->getMethodID(cls, "getMultiValuedSeparator", "(Ljava/lang/String;)C");
              mids$[mid_getBreakIterator_4cb4d821] = env->getMethodID(cls, "getBreakIterator", "(Ljava/lang/String;)Ljava/text/BreakIterator;");
              mids$[mid_loadFieldValues_350d45ad] = env->getMethodID(cls, "loadFieldValues", "(Lorg/apache/lucene/search/IndexSearcher;[Ljava/lang/String;[II)[[Ljava/lang/String;");
              mids$[mid_getIndexAnalyzer_29a2299f] = env->getMethodID(cls, "getIndexAnalyzer", "(Ljava/lang/String;)Lorg/apache/lucene/analysis/Analyzer;");
              mids$[mid_getEmptyHighlight_863ca84c] = env->getMethodID(cls, "getEmptyHighlight", "(Ljava/lang/String;Ljava/text/BreakIterator;I)[Lorg/apache/lucene/search/postingshighlight/Passage;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_MAX_LENGTH = env->getStaticIntField(cls, "DEFAULT_MAX_LENGTH");
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PostingsHighlighter::PostingsHighlighter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          PostingsHighlighter::PostingsHighlighter(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

          JArray< ::java::lang::String > PostingsHighlighter::highlight(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_highlight_cfb8b283], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          JArray< ::java::lang::String > PostingsHighlighter::highlight(const ::java::lang::String & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3, jint a4) const
          {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_highlight_c287afc1], a0.this$, a1.this$, a2.this$, a3.this$, a4));
          }

          ::java::util::Map PostingsHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_52512a83], a0.this$, a1.this$, a2.this$, a3.this$));
          }

          ::java::util::Map PostingsHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const JArray< jint > & a3, const JArray< jint > & a4) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_d3afe138], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }

          ::java::util::Map PostingsHighlighter::highlightFields(const JArray< ::java::lang::String > & a0, const ::org::apache::lucene::search::Query & a1, const ::org::apache::lucene::search::IndexSearcher & a2, const ::org::apache::lucene::search::TopDocs & a3, const JArray< jint > & a4) const
          {
            return ::java::util::Map(env->callObjectMethod(this$, mids$[mid_highlightFields_20e79c3d], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace postingshighlight {
          static PyObject *t_PostingsHighlighter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PostingsHighlighter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PostingsHighlighter_init_(t_PostingsHighlighter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PostingsHighlighter_highlight(t_PostingsHighlighter *self, PyObject *args);
          static PyObject *t_PostingsHighlighter_highlightFields(t_PostingsHighlighter *self, PyObject *args);

          static PyMethodDef t_PostingsHighlighter__methods_[] = {
            DECLARE_METHOD(t_PostingsHighlighter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PostingsHighlighter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PostingsHighlighter, highlight, METH_VARARGS),
            DECLARE_METHOD(t_PostingsHighlighter, highlightFields, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PostingsHighlighter, t_PostingsHighlighter, ::java::lang::Object, PostingsHighlighter, t_PostingsHighlighter_init_, 0, 0, 0, 0, 0);

          void t_PostingsHighlighter::install(PyObject *module)
          {
            installType(&PY_TYPE(PostingsHighlighter), module, "PostingsHighlighter", 0);
          }

          void t_PostingsHighlighter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "class_", make_descriptor(PostingsHighlighter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "wrapfn_", make_descriptor(t_PostingsHighlighter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(PostingsHighlighter::initializeClass);
            PyDict_SetItemString(PY_TYPE(PostingsHighlighter).tp_dict, "DEFAULT_MAX_LENGTH", make_descriptor(PostingsHighlighter::DEFAULT_MAX_LENGTH));
          }

          static PyObject *t_PostingsHighlighter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PostingsHighlighter::initializeClass, 1)))
              return NULL;
            return t_PostingsHighlighter::wrap_Object(PostingsHighlighter(((t_PostingsHighlighter *) arg)->object.this$));
          }
          static PyObject *t_PostingsHighlighter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PostingsHighlighter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PostingsHighlighter_init_(t_PostingsHighlighter *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                PostingsHighlighter object((jobject) NULL);

                INT_CALL(object = PostingsHighlighter());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jint a0;
                PostingsHighlighter object((jobject) NULL);

                if (!parseArgs(args, "I", &a0))
                {
                  INT_CALL(object = PostingsHighlighter(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PostingsHighlighter_highlight(t_PostingsHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "skkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.highlight(a0, a1, a2, a3));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
              break;
             case 5:
              {
                ::java::lang::String a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                jint a4;
                JArray< ::java::lang::String > result((jobject) NULL);

                if (!parseArgs(args, "skkkI", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.highlight(a0, a1, a2, a3, a4));
                  return JArray<jstring>(result.this$).wrap();
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "highlight", args);
            return NULL;
          }

          static PyObject *t_PostingsHighlighter_highlightFields(t_PostingsHighlighter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 4:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[skkk", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2, a3));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
                }
              }
              break;
             case 5:
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                JArray< jint > a3((jobject) NULL);
                JArray< jint > a4((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[skk[I[I", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2, a3, a4));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
                }
              }
              {
                JArray< ::java::lang::String > a0((jobject) NULL);
                ::org::apache::lucene::search::Query a1((jobject) NULL);
                ::org::apache::lucene::search::IndexSearcher a2((jobject) NULL);
                ::org::apache::lucene::search::TopDocs a3((jobject) NULL);
                JArray< jint > a4((jobject) NULL);
                ::java::util::Map result((jobject) NULL);

                if (!parseArgs(args, "[skkk[I", ::org::apache::lucene::search::Query::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, ::org::apache::lucene::search::TopDocs::initializeClass, &a0, &a1, &a2, &a3, &a4))
                {
                  OBJ_CALL(result = self->object.highlightFields(a0, a1, a2, a3, a4));
                  return ::java::util::t_Map::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(Object));
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "highlightFields", args);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/BulkScorer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Collector.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *BulkScorer::class$ = NULL;
        jmethodID *BulkScorer::mids$ = NULL;
        bool BulkScorer::live$ = false;

        jclass BulkScorer::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/BulkScorer");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_score_77379ce0] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/Collector;)V");
            mids$[mid_score_9527f6ba] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/Collector;I)Z");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        BulkScorer::BulkScorer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void BulkScorer::score(const ::org::apache::lucene::search::Collector & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_score_77379ce0], a0.this$);
        }

        jboolean BulkScorer::score(const ::org::apache::lucene::search::Collector & a0, jint a1) const
        {
          return env->callBooleanMethod(this$, mids$[mid_score_9527f6ba], a0.this$, a1);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_BulkScorer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BulkScorer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BulkScorer_init_(t_BulkScorer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BulkScorer_score(t_BulkScorer *self, PyObject *args);

        static PyMethodDef t_BulkScorer__methods_[] = {
          DECLARE_METHOD(t_BulkScorer, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BulkScorer, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BulkScorer, score, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BulkScorer, t_BulkScorer, ::java::lang::Object, BulkScorer, t_BulkScorer_init_, 0, 0, 0, 0, 0);

        void t_BulkScorer::install(PyObject *module)
        {
          installType(&PY_TYPE(BulkScorer), module, "BulkScorer", 0);
        }

        void t_BulkScorer::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BulkScorer).tp_dict, "class_", make_descriptor(BulkScorer::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BulkScorer).tp_dict, "wrapfn_", make_descriptor(t_BulkScorer::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BulkScorer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BulkScorer_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BulkScorer::initializeClass, 1)))
            return NULL;
          return t_BulkScorer::wrap_Object(BulkScorer(((t_BulkScorer *) arg)->object.this$));
        }
        static PyObject *t_BulkScorer_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BulkScorer::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_BulkScorer_init_(t_BulkScorer *self, PyObject *args, PyObject *kwds)
        {
          BulkScorer object((jobject) NULL);

          INT_CALL(object = BulkScorer());
          self->object = object;

          return 0;
        }

        static PyObject *t_BulkScorer_score(t_BulkScorer *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::search::Collector::initializeClass, &a0))
              {
                OBJ_CALL(self->object.score(a0));
                Py_RETURN_NONE;
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::search::Collector a0((jobject) NULL);
              jint a1;
              jboolean result;

              if (!parseArgs(args, "kI", ::org::apache::lucene::search::Collector::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = self->object.score(a0, a1));
                Py_RETURN_BOOL(result);
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "score", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/MergeState$CheckAbort.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/MergePolicy$MergeAbortedException.h"
#include "org/apache/lucene/index/MergePolicy$OneMerge.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *MergeState$CheckAbort::class$ = NULL;
        jmethodID *MergeState$CheckAbort::mids$ = NULL;
        bool MergeState$CheckAbort::live$ = false;

        jclass MergeState$CheckAbort::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/MergeState$CheckAbort");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_47ab6527] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/index/MergePolicy$OneMerge;Lorg/apache/lucene/store/Directory;)V");
            mids$[mid_work_5d1c7645] = env->getMethodID(cls, "work", "(D)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        MergeState$CheckAbort::MergeState$CheckAbort(const ::org::apache::lucene::index::MergePolicy$OneMerge & a0, const ::org::apache::lucene::store::Directory & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_47ab6527, a0.this$, a1.this$)) {}

        void MergeState$CheckAbort::work(jdouble a0) const
        {
          env->callVoidMethod(this$, mids$[mid_work_5d1c7645], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_MergeState$CheckAbort_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MergeState$CheckAbort_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MergeState$CheckAbort_init_(t_MergeState$CheckAbort *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MergeState$CheckAbort_work(t_MergeState$CheckAbort *self, PyObject *arg);

        static PyMethodDef t_MergeState$CheckAbort__methods_[] = {
          DECLARE_METHOD(t_MergeState$CheckAbort, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$CheckAbort, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_MergeState$CheckAbort, work, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MergeState$CheckAbort, t_MergeState$CheckAbort, ::java::lang::Object, MergeState$CheckAbort, t_MergeState$CheckAbort_init_, 0, 0, 0, 0, 0);

        void t_MergeState$CheckAbort::install(PyObject *module)
        {
          installType(&PY_TYPE(MergeState$CheckAbort), module, "MergeState$CheckAbort", 0);
        }

        void t_MergeState$CheckAbort::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(MergeState$CheckAbort).tp_dict, "class_", make_descriptor(MergeState$CheckAbort::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(MergeState$CheckAbort).tp_dict, "wrapfn_", make_descriptor(t_MergeState$CheckAbort::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(MergeState$CheckAbort).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MergeState$CheckAbort_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, MergeState$CheckAbort::initializeClass, 1)))
            return NULL;
          return t_MergeState$CheckAbort::wrap_Object(MergeState$CheckAbort(((t_MergeState$CheckAbort *) arg)->object.this$));
        }
        static PyObject *t_MergeState$CheckAbort_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, MergeState$CheckAbort::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_MergeState$CheckAbort_init_(t_MergeState$CheckAbort *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::index::MergePolicy$OneMerge a0((jobject) NULL);
          ::org::apache::lucene::store::Directory a1((jobject) NULL);
          MergeState$CheckAbort object((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::MergePolicy$OneMerge::initializeClass, ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
          {
            INT_CALL(object = MergeState$CheckAbort(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_MergeState$CheckAbort_work(t_MergeState$CheckAbort *self, PyObject *arg)
        {
          jdouble a0;

          if (!parseArg(arg, "D", &a0))
          {
            OBJ_CALL(self->object.work(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "work", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/spell/PlainTextDictionary.h"
#include "java/io/File.h"
#include "org/apache/lucene/search/suggest/InputIterator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/spell/Dictionary.h"
#include "java/lang/Class.h"
#include "java/io/Reader.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {

          ::java::lang::Class *PlainTextDictionary::class$ = NULL;
          jmethodID *PlainTextDictionary::mids$ = NULL;
          bool PlainTextDictionary::live$ = false;

          jclass PlainTextDictionary::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/spell/PlainTextDictionary");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
              mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
              mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
              mids$[mid_getEntryIterator_23dc46b1] = env->getMethodID(cls, "getEntryIterator", "()Lorg/apache/lucene/search/suggest/InputIterator;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PlainTextDictionary::PlainTextDictionary(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

          PlainTextDictionary::PlainTextDictionary(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

          PlainTextDictionary::PlainTextDictionary(const ::java::io::File & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

          ::org::apache::lucene::search::suggest::InputIterator PlainTextDictionary::getEntryIterator() const
          {
            return ::org::apache::lucene::search::suggest::InputIterator(env->callObjectMethod(this$, mids$[mid_getEntryIterator_23dc46b1]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace spell {
          static PyObject *t_PlainTextDictionary_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PlainTextDictionary_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PlainTextDictionary_init_(t_PlainTextDictionary *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PlainTextDictionary_getEntryIterator(t_PlainTextDictionary *self);
          static PyObject *t_PlainTextDictionary_get__entryIterator(t_PlainTextDictionary *self, void *data);
          static PyGetSetDef t_PlainTextDictionary__fields_[] = {
            DECLARE_GET_FIELD(t_PlainTextDictionary, entryIterator),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PlainTextDictionary__methods_[] = {
            DECLARE_METHOD(t_PlainTextDictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlainTextDictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PlainTextDictionary, getEntryIterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PlainTextDictionary, t_PlainTextDictionary, ::java::lang::Object, PlainTextDictionary, t_PlainTextDictionary_init_, 0, 0, t_PlainTextDictionary__fields_, 0, 0);

          void t_PlainTextDictionary::install(PyObject *module)
          {
            installType(&PY_TYPE(PlainTextDictionary), module, "PlainTextDictionary", 0);
          }

          void t_PlainTextDictionary::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PlainTextDictionary).tp_dict, "class_", make_descriptor(PlainTextDictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PlainTextDictionary).tp_dict, "wrapfn_", make_descriptor(t_PlainTextDictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PlainTextDictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_PlainTextDictionary_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PlainTextDictionary::initializeClass, 1)))
              return NULL;
            return t_PlainTextDictionary::wrap_Object(PlainTextDictionary(((t_PlainTextDictionary *) arg)->object.this$));
          }
          static PyObject *t_PlainTextDictionary_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PlainTextDictionary::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PlainTextDictionary_init_(t_PlainTextDictionary *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::java::io::Reader a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::InputStream a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
              {
                ::java::io::File a0((jobject) NULL);
                PlainTextDictionary object((jobject) NULL);

                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                {
                  INT_CALL(object = PlainTextDictionary(a0));
                  self->object = object;
                  break;
                }
              }
             default:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_PlainTextDictionary_getEntryIterator(t_PlainTextDictionary *self)
          {
            ::org::apache::lucene::search::suggest::InputIterator result((jobject) NULL);
            OBJ_CALL(result = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(result);
          }

          static PyObject *t_PlainTextDictionary_get__entryIterator(t_PlainTextDictionary *self, void *data)
          {
            ::org::apache::lucene::search::suggest::InputIterator value((jobject) NULL);
            OBJ_CALL(value = self->object.getEntryIterator());
            return ::org::apache::lucene::search::suggest::t_InputIterator::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/BoostQueryNodeBuilder.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/QueryNodeException.h"
#include "org/apache/lucene/queryparser/flexible/standard/builders/StandardQueryBuilder.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {

              ::java::lang::Class *BoostQueryNodeBuilder::class$ = NULL;
              jmethodID *BoostQueryNodeBuilder::mids$ = NULL;
              bool BoostQueryNodeBuilder::live$ = false;

              jclass BoostQueryNodeBuilder::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/builders/BoostQueryNodeBuilder");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_build_7f6ce179] = env->getMethodID(cls, "build", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/search/Query;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BoostQueryNodeBuilder::BoostQueryNodeBuilder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::search::Query BoostQueryNodeBuilder::build(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0) const
              {
                return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_build_7f6ce179], a0.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace builders {
              static PyObject *t_BoostQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BoostQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BoostQueryNodeBuilder_init_(t_BoostQueryNodeBuilder *self, PyObject *args, PyObject *kwds);
              static PyObject *t_BoostQueryNodeBuilder_build(t_BoostQueryNodeBuilder *self, PyObject *arg);

              static PyMethodDef t_BoostQueryNodeBuilder__methods_[] = {
                DECLARE_METHOD(t_BoostQueryNodeBuilder, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeBuilder, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BoostQueryNodeBuilder, build, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BoostQueryNodeBuilder, t_BoostQueryNodeBuilder, ::java::lang::Object, BoostQueryNodeBuilder, t_BoostQueryNodeBuilder_init_, 0, 0, 0, 0, 0);

              void t_BoostQueryNodeBuilder::install(PyObject *module)
              {
                installType(&PY_TYPE(BoostQueryNodeBuilder), module, "BoostQueryNodeBuilder", 0);
              }

              void t_BoostQueryNodeBuilder::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeBuilder).tp_dict, "class_", make_descriptor(BoostQueryNodeBuilder::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeBuilder).tp_dict, "wrapfn_", make_descriptor(t_BoostQueryNodeBuilder::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BoostQueryNodeBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BoostQueryNodeBuilder_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BoostQueryNodeBuilder::initializeClass, 1)))
                  return NULL;
                return t_BoostQueryNodeBuilder::wrap_Object(BoostQueryNodeBuilder(((t_BoostQueryNodeBuilder *) arg)->object.this$));
              }
              static PyObject *t_BoostQueryNodeBuilder_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BoostQueryNodeBuilder::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BoostQueryNodeBuilder_init_(t_BoostQueryNodeBuilder *self, PyObject *args, PyObject *kwds)
              {
                BoostQueryNodeBuilder object((jobject) NULL);

                INT_CALL(object = BoostQueryNodeBuilder());
                self->object = object;

                return 0;
              }

              static PyObject *t_BoostQueryNodeBuilder_build(t_BoostQueryNodeBuilder *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::search::Query result((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.build(a0));
                  return ::org::apache::lucene::search::t_Query::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "build", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/QueryValueSource.h"
#include "org/apache/lucene/search/Query.h"
#include "java/io/IOException.h"
#include "java/util/Map.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "org/apache/lucene/queries/function/FunctionValues.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "org/apache/lucene/search/IndexSearcher.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *QueryValueSource::class$ = NULL;
            jmethodID *QueryValueSource::mids$ = NULL;
            bool QueryValueSource::live$ = false;

            jclass QueryValueSource::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/QueryValueSource");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_05a7d758] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/Query;F)V");
                mids$[mid_createWeight_1b6125ba] = env->getMethodID(cls, "createWeight", "(Ljava/util/Map;Lorg/apache/lucene/search/IndexSearcher;)V");
                mids$[mid_description_14c7b5c5] = env->getMethodID(cls, "description", "()Ljava/lang/String;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getDefaultValue_54c6a176] = env->getMethodID(cls, "getDefaultValue", "()F");
                mids$[mid_getQuery_97e3851a] = env->getMethodID(cls, "getQuery", "()Lorg/apache/lucene/search/Query;");
                mids$[mid_getValues_4c566485] = env->getMethodID(cls, "getValues", "(Ljava/util/Map;Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/queries/function/FunctionValues;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            QueryValueSource::QueryValueSource(const ::org::apache::lucene::search::Query & a0, jfloat a1) : ::org::apache::lucene::queries::function::ValueSource(env->newObject(initializeClass, &mids$, mid_init$_05a7d758, a0.this$, a1)) {}

            void QueryValueSource::createWeight(const ::java::util::Map & a0, const ::org::apache::lucene::search::IndexSearcher & a1) const
            {
              env->callVoidMethod(this$, mids$[mid_createWeight_1b6125ba], a0.this$, a1.this$);
            }

            ::java::lang::String QueryValueSource::description() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_description_14c7b5c5]));
            }

            jboolean QueryValueSource::equals(const ::java::lang::Object & a0) const
            {
              return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
            }

            jfloat QueryValueSource::getDefaultValue() const
            {
              return env->callFloatMethod(this$, mids$[mid_getDefaultValue_54c6a176]);
            }

            ::org::apache::lucene::search::Query QueryValueSource::getQuery() const
            {
              return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_getQuery_97e3851a]));
            }

            ::org::apache::lucene::queries::function::FunctionValues QueryValueSource::getValues(const ::java::util::Map & a0, const ::org::apache::lucene::index::AtomicReaderContext & a1) const
            {
              return ::org::apache::lucene::queries::function::FunctionValues(env->callObjectMethod(this$, mids$[mid_getValues_4c566485], a0.this$, a1.this$));
            }

            jint QueryValueSource::hashCode() const
            {
              return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_QueryValueSource_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_QueryValueSource_instance_(PyTypeObject *type, PyObject *arg);
            static int t_QueryValueSource_init_(t_QueryValueSource *self, PyObject *args, PyObject *kwds);
            static PyObject *t_QueryValueSource_createWeight(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_description(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_equals(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_getDefaultValue(t_QueryValueSource *self);
            static PyObject *t_QueryValueSource_getQuery(t_QueryValueSource *self);
            static PyObject *t_QueryValueSource_getValues(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_hashCode(t_QueryValueSource *self, PyObject *args);
            static PyObject *t_QueryValueSource_get__defaultValue(t_QueryValueSource *self, void *data);
            static PyObject *t_QueryValueSource_get__query(t_QueryValueSource *self, void *data);
            static PyGetSetDef t_QueryValueSource__fields_[] = {
              DECLARE_GET_FIELD(t_QueryValueSource, defaultValue),
              DECLARE_GET_FIELD(t_QueryValueSource, query),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_QueryValueSource__methods_[] = {
              DECLARE_METHOD(t_QueryValueSource, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryValueSource, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_QueryValueSource, createWeight, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, description, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, equals, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, getDefaultValue, METH_NOARGS),
              DECLARE_METHOD(t_QueryValueSource, getQuery, METH_NOARGS),
              DECLARE_METHOD(t_QueryValueSource, getValues, METH_VARARGS),
              DECLARE_METHOD(t_QueryValueSource, hashCode, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(QueryValueSource, t_QueryValueSource, ::org::apache::lucene::queries::function::ValueSource, QueryValueSource, t_QueryValueSource_init_, 0, 0, t_QueryValueSource__fields_, 0, 0);

            void t_QueryValueSource::install(PyObject *module)
            {
              installType(&PY_TYPE(QueryValueSource), module, "QueryValueSource", 0);
            }

            void t_QueryValueSource::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(QueryValueSource).tp_dict, "class_", make_descriptor(QueryValueSource::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(QueryValueSource).tp_dict, "wrapfn_", make_descriptor(t_QueryValueSource::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(QueryValueSource).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_QueryValueSource_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, QueryValueSource::initializeClass, 1)))
                return NULL;
              return t_QueryValueSource::wrap_Object(QueryValueSource(((t_QueryValueSource *) arg)->object.this$));
            }
            static PyObject *t_QueryValueSource_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, QueryValueSource::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_QueryValueSource_init_(t_QueryValueSource *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::search::Query a0((jobject) NULL);
              jfloat a1;
              QueryValueSource object((jobject) NULL);

              if (!parseArgs(args, "kF", ::org::apache::lucene::search::Query::initializeClass, &a0, &a1))
              {
                INT_CALL(object = QueryValueSource(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_QueryValueSource_createWeight(t_QueryValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::search::IndexSearcher a1((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::search::IndexSearcher::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(self->object.createWeight(a0, a1));
                Py_RETURN_NONE;
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "createWeight", args, 2);
            }

            static PyObject *t_QueryValueSource_description(t_QueryValueSource *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.description());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "description", args, 2);
            }

            static PyObject *t_QueryValueSource_equals(t_QueryValueSource *self, PyObject *args)
            {
              ::java::lang::Object a0((jobject) NULL);
              jboolean result;

              if (!parseArgs(args, "o", &a0))
              {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "equals", args, 2);
            }

            static PyObject *t_QueryValueSource_getDefaultValue(t_QueryValueSource *self)
            {
              jfloat result;
              OBJ_CALL(result = self->object.getDefaultValue());
              return PyFloat_FromDouble((double) result);
            }

            static PyObject *t_QueryValueSource_getQuery(t_QueryValueSource *self)
            {
              ::org::apache::lucene::search::Query result((jobject) NULL);
              OBJ_CALL(result = self->object.getQuery());
              return ::org::apache::lucene::search::t_Query::wrap_Object(result);
            }

            static PyObject *t_QueryValueSource_getValues(t_QueryValueSource *self, PyObject *args)
            {
              ::java::util::Map a0((jobject) NULL);
              PyTypeObject **p0;
              ::org::apache::lucene::index::AtomicReaderContext a1((jobject) NULL);
              ::org::apache::lucene::queries::function::FunctionValues result((jobject) NULL);

              if (!parseArgs(args, "Kk", ::java::util::Map::initializeClass, ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_, &a1))
              {
                OBJ_CALL(result = self->object.getValues(a0, a1));
                return ::org::apache::lucene::queries::function::t_FunctionValues::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "getValues", args, 2);
            }

            static PyObject *t_QueryValueSource_hashCode(t_QueryValueSource *self, PyObject *args)
            {
              jint result;

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(QueryValueSource), (PyObject *) self, "hashCode", args, 2);
            }

            static PyObject *t_QueryValueSource_get__defaultValue(t_QueryValueSource *self, void *data)
            {
              jfloat value;
              OBJ_CALL(value = self->object.getDefaultValue());
              return PyFloat_FromDouble((double) value);
            }

            static PyObject *t_QueryValueSource_get__query(t_QueryValueSource *self, void *data)
            {
              ::org::apache::lucene::search::Query value((jobject) NULL);
              OBJ_CALL(value = self->object.getQuery());
              return ::org::apache::lucene::search::t_Query::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/PrefixCodedTerms$Builder.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *PrefixCodedTerms$Builder::class$ = NULL;
        jmethodID *PrefixCodedTerms$Builder::mids$ = NULL;
        bool PrefixCodedTerms$Builder::live$ = false;

        jclass PrefixCodedTerms$Builder::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/PrefixCodedTerms$Builder");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_add_7eca6a81] = env->getMethodID(cls, "add", "(Lorg/apache/lucene/index/Term;)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PrefixCodedTerms$Builder::PrefixCodedTerms$Builder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PrefixCodedTerms$Builder::add(const ::org::apache::lucene::index::Term & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_add_7eca6a81], a0.this$);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_PrefixCodedTerms$Builder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrefixCodedTerms$Builder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrefixCodedTerms$Builder_init_(t_PrefixCodedTerms$Builder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrefixCodedTerms$Builder_add(t_PrefixCodedTerms$Builder *self, PyObject *arg);

        static PyMethodDef t_PrefixCodedTerms$Builder__methods_[] = {
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PrefixCodedTerms$Builder, add, METH_O),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrefixCodedTerms$Builder, t_PrefixCodedTerms$Builder, ::java::lang::Object, PrefixCodedTerms$Builder, t_PrefixCodedTerms$Builder_init_, 0, 0, 0, 0, 0);

        void t_PrefixCodedTerms$Builder::install(PyObject *module)
        {
          installType(&PY_TYPE(PrefixCodedTerms$Builder), module, "PrefixCodedTerms$Builder", 0);
        }

        void t_PrefixCodedTerms$Builder::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PrefixCodedTerms$Builder).tp_dict, "class_", make_descriptor(PrefixCodedTerms$Builder::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PrefixCodedTerms$Builder).tp_dict, "wrapfn_", make_descriptor(t_PrefixCodedTerms$Builder::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PrefixCodedTerms$Builder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrefixCodedTerms$Builder_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PrefixCodedTerms$Builder::initializeClass, 1)))
            return NULL;
          return t_PrefixCodedTerms$Builder::wrap_Object(PrefixCodedTerms$Builder(((t_PrefixCodedTerms$Builder *) arg)->object.this$));
        }
        static PyObject *t_PrefixCodedTerms$Builder_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PrefixCodedTerms$Builder::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PrefixCodedTerms$Builder_init_(t_PrefixCodedTerms$Builder *self, PyObject *args, PyObject *kwds)
        {
          PrefixCodedTerms$Builder object((jobject) NULL);

          INT_CALL(object = PrefixCodedTerms$Builder());
          self->object = object;

          return 0;
        }

        static PyObject *t_PrefixCodedTerms$Builder_add(t_PrefixCodedTerms$Builder *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(self->object.add(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/AnyQueryNode.h"
#include "java/util/List.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/lang/CloneNotSupportedException.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {

              ::java::lang::Class *AnyQueryNode::class$ = NULL;
              jmethodID *AnyQueryNode::mids$ = NULL;
              bool AnyQueryNode::live$ = false;

              jclass AnyQueryNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/core/nodes/AnyQueryNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0236cab3] = env->getMethodID(cls, "<init>", "(Ljava/util/List;Ljava/lang/CharSequence;I)V");
                  mids$[mid_cloneTree_b387c5e6] = env->getMethodID(cls, "cloneTree", "()Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_getField_e0adba2f] = env->getMethodID(cls, "getField", "()Ljava/lang/CharSequence;");
                  mids$[mid_getFieldAsString_14c7b5c5] = env->getMethodID(cls, "getFieldAsString", "()Ljava/lang/String;");
                  mids$[mid_getMinimumMatchingElements_54c6a179] = env->getMethodID(cls, "getMinimumMatchingElements", "()I");
                  mids$[mid_setField_a8afc64a] = env->getMethodID(cls, "setField", "(Ljava/lang/CharSequence;)V");
                  mids$[mid_toQueryString_99b8dfe1] = env->getMethodID(cls, "toQueryString", "(Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax;)Ljava/lang/CharSequence;");
                  mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              AnyQueryNode::AnyQueryNode(const ::java::util::List & a0, const ::java::lang::CharSequence & a1, jint a2) : ::org::apache::lucene::queryparser::flexible::core::nodes::AndQueryNode(env->newObject(initializeClass, &mids$, mid_init$_0236cab3, a0.this$, a1.this$, a2)) {}

              ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode AnyQueryNode::cloneTree() const
              {
                return ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode(env->callObjectMethod(this$, mids$[mid_cloneTree_b387c5e6]));
              }

              ::java::lang::CharSequence AnyQueryNode::getField() const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_getField_e0adba2f]));
              }

              ::java::lang::String AnyQueryNode::getFieldAsString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFieldAsString_14c7b5c5]));
              }

              jint AnyQueryNode::getMinimumMatchingElements() const
              {
                return env->callIntMethod(this$, mids$[mid_getMinimumMatchingElements_54c6a179]);
              }

              void AnyQueryNode::setField(const ::java::lang::CharSequence & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_setField_a8afc64a], a0.this$);
              }

              ::java::lang::CharSequence AnyQueryNode::toQueryString(const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax & a0) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_toQueryString_99b8dfe1], a0.this$));
              }

              ::java::lang::String AnyQueryNode::toString() const
              {
                return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace core {
            namespace nodes {
              static PyObject *t_AnyQueryNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_AnyQueryNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_AnyQueryNode_init_(t_AnyQueryNode *self, PyObject *args, PyObject *kwds);
              static PyObject *t_AnyQueryNode_cloneTree(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_getField(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_getFieldAsString(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_getMinimumMatchingElements(t_AnyQueryNode *self);
              static PyObject *t_AnyQueryNode_setField(t_AnyQueryNode *self, PyObject *arg);
              static PyObject *t_AnyQueryNode_toQueryString(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_toString(t_AnyQueryNode *self, PyObject *args);
              static PyObject *t_AnyQueryNode_get__field(t_AnyQueryNode *self, void *data);
              static int t_AnyQueryNode_set__field(t_AnyQueryNode *self, PyObject *arg, void *data);
              static PyObject *t_AnyQueryNode_get__fieldAsString(t_AnyQueryNode *self, void *data);
              static PyObject *t_AnyQueryNode_get__minimumMatchingElements(t_AnyQueryNode *self, void *data);
              static PyGetSetDef t_AnyQueryNode__fields_[] = {
                DECLARE_GETSET_FIELD(t_AnyQueryNode, field),
                DECLARE_GET_FIELD(t_AnyQueryNode, fieldAsString),
                DECLARE_GET_FIELD(t_AnyQueryNode, minimumMatchingElements),
                { NULL, NULL, NULL, NULL, NULL }
              };

              static PyMethodDef t_AnyQueryNode__methods_[] = {
                DECLARE_METHOD(t_AnyQueryNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNode, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_AnyQueryNode, cloneTree, METH_VARARGS),
                DECLARE_METHOD(t_AnyQueryNode, getField, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, getFieldAsString, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, getMinimumMatchingElements, METH_NOARGS),
                DECLARE_METHOD(t_AnyQueryNode, setField, METH_O),
                DECLARE_METHOD(t_AnyQueryNode, toQueryString, METH_VARARGS),
                DECLARE_METHOD(t_AnyQueryNode, toString, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(AnyQueryNode, t_AnyQueryNode, ::org::apache::lucene::queryparser::flexible::core::nodes::AndQueryNode, AnyQueryNode, t_AnyQueryNode_init_, 0, 0, t_AnyQueryNode__fields_, 0, 0);

              void t_AnyQueryNode::install(PyObject *module)
              {
                installType(&PY_TYPE(AnyQueryNode), module, "AnyQueryNode", 0);
              }

              void t_AnyQueryNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(AnyQueryNode).tp_dict, "class_", make_descriptor(AnyQueryNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(AnyQueryNode).tp_dict, "wrapfn_", make_descriptor(t_AnyQueryNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(AnyQueryNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_AnyQueryNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, AnyQueryNode::initializeClass, 1)))
                  return NULL;
                return t_AnyQueryNode::wrap_Object(AnyQueryNode(((t_AnyQueryNode *) arg)->object.this$));
              }
              static PyObject *t_AnyQueryNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, AnyQueryNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_AnyQueryNode_init_(t_AnyQueryNode *self, PyObject *args, PyObject *kwds)
              {
                ::java::util::List a0((jobject) NULL);
                PyTypeObject **p0;
                ::java::lang::CharSequence a1((jobject) NULL);
                jint a2;
                AnyQueryNode object((jobject) NULL);

                if (!parseArgs(args, "KOI", ::java::util::List::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2))
                {
                  INT_CALL(object = AnyQueryNode(a0, a1, a2));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_AnyQueryNode_cloneTree(t_AnyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.cloneTree());
                  return ::org::apache::lucene::queryparser::flexible::core::nodes::t_QueryNode::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AnyQueryNode), (PyObject *) self, "cloneTree", args, 2);
              }

              static PyObject *t_AnyQueryNode_getField(t_AnyQueryNode *self)
              {
                ::java::lang::CharSequence result((jobject) NULL);
                OBJ_CALL(result = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(result);
              }

              static PyObject *t_AnyQueryNode_getFieldAsString(t_AnyQueryNode *self)
              {
                ::java::lang::String result((jobject) NULL);
                OBJ_CALL(result = self->object.getFieldAsString());
                return j2p(result);
              }

              static PyObject *t_AnyQueryNode_getMinimumMatchingElements(t_AnyQueryNode *self)
              {
                jint result;
                OBJ_CALL(result = self->object.getMinimumMatchingElements());
                return PyInt_FromLong((long) result);
              }

              static PyObject *t_AnyQueryNode_setField(t_AnyQueryNode *self, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(self->object.setField(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "setField", arg);
                return NULL;
              }

              static PyObject *t_AnyQueryNode_toQueryString(t_AnyQueryNode *self, PyObject *args)
              {
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax a0((jobject) NULL);
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax::initializeClass, &a0))
                {
                  OBJ_CALL(result = self->object.toQueryString(a0));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                return callSuper(&PY_TYPE(AnyQueryNode), (PyObject *) self, "toQueryString", args, 2);
              }

              static PyObject *t_AnyQueryNode_toString(t_AnyQueryNode *self, PyObject *args)
              {
                ::java::lang::String result((jobject) NULL);

                if (!parseArgs(args, ""))
                {
                  OBJ_CALL(result = self->object.toString());
                  return j2p(result);
                }

                return callSuper(&PY_TYPE(AnyQueryNode), (PyObject *) self, "toString", args, 2);
              }

              static PyObject *t_AnyQueryNode_get__field(t_AnyQueryNode *self, void *data)
              {
                ::java::lang::CharSequence value((jobject) NULL);
                OBJ_CALL(value = self->object.getField());
                return ::java::lang::t_CharSequence::wrap_Object(value);
              }
              static int t_AnyQueryNode_set__field(t_AnyQueryNode *self, PyObject *arg, void *data)
              {
                {
                  ::java::lang::CharSequence value((jobject) NULL);
                  if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &value))
                  {
                    INT_CALL(self->object.setField(value));
                    return 0;
                  }
                }
                PyErr_SetArgsError((PyObject *) self, "field", arg);
                return -1;
              }

              static PyObject *t_AnyQueryNode_get__fieldAsString(t_AnyQueryNode *self, void *data)
              {
                ::java::lang::String value((jobject) NULL);
                OBJ_CALL(value = self->object.getFieldAsString());
                return j2p(value);
              }

              static PyObject *t_AnyQueryNode_get__minimumMatchingElements(t_AnyQueryNode *self, void *data)
              {
                jint value;
                OBJ_CALL(value = self->object.getMinimumMatchingElements());
                return PyInt_FromLong((long) value);
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader.h"
#include "org/apache/lucene/index/SegmentInfo.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "org/apache/lucene/store/IOContext.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40SegmentInfoReader::class$ = NULL;
          jmethodID *Lucene40SegmentInfoReader::mids$ = NULL;
          bool Lucene40SegmentInfoReader::live$ = false;

          jclass Lucene40SegmentInfoReader::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_read_ff05cda4] = env->getMethodID(cls, "read", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/index/SegmentInfo;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40SegmentInfoReader::Lucene40SegmentInfoReader() : ::org::apache::lucene::codecs::SegmentInfoReader(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::index::SegmentInfo Lucene40SegmentInfoReader::read(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2) const
          {
            return ::org::apache::lucene::index::SegmentInfo(env->callObjectMethod(this$, mids$[mid_read_ff05cda4], a0.this$, a1.this$, a2.this$));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40SegmentInfoReader_init_(t_Lucene40SegmentInfoReader *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40SegmentInfoReader_read(t_Lucene40SegmentInfoReader *self, PyObject *args);

          static PyMethodDef t_Lucene40SegmentInfoReader__methods_[] = {
            DECLARE_METHOD(t_Lucene40SegmentInfoReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40SegmentInfoReader, read, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40SegmentInfoReader, t_Lucene40SegmentInfoReader, ::org::apache::lucene::codecs::SegmentInfoReader, Lucene40SegmentInfoReader, t_Lucene40SegmentInfoReader_init_, 0, 0, 0, 0, 0);

          void t_Lucene40SegmentInfoReader::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40SegmentInfoReader), module, "Lucene40SegmentInfoReader", 0);
          }

          void t_Lucene40SegmentInfoReader::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoReader).tp_dict, "class_", make_descriptor(Lucene40SegmentInfoReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoReader).tp_dict, "wrapfn_", make_descriptor(t_Lucene40SegmentInfoReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40SegmentInfoReader).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40SegmentInfoReader_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40SegmentInfoReader::initializeClass, 1)))
              return NULL;
            return t_Lucene40SegmentInfoReader::wrap_Object(Lucene40SegmentInfoReader(((t_Lucene40SegmentInfoReader *) arg)->object.this$));
          }
          static PyObject *t_Lucene40SegmentInfoReader_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40SegmentInfoReader::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40SegmentInfoReader_init_(t_Lucene40SegmentInfoReader *self, PyObject *args, PyObject *kwds)
          {
            Lucene40SegmentInfoReader object((jobject) NULL);

            INT_CALL(object = Lucene40SegmentInfoReader());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40SegmentInfoReader_read(t_Lucene40SegmentInfoReader *self, PyObject *args)
          {
            ::org::apache::lucene::store::Directory a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::org::apache::lucene::store::IOContext a2((jobject) NULL);
            ::org::apache::lucene::index::SegmentInfo result((jobject) NULL);

            if (!parseArgs(args, "ksk", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.read(a0, a1, a2));
              return ::org::apache::lucene::index::t_SegmentInfo::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40SegmentInfoReader), (PyObject *) self, "read", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/messages/MessageImpl.h"
#include "java/lang/String.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/messages/Message.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {

            ::java::lang::Class *MessageImpl::class$ = NULL;
            jmethodID *MessageImpl::mids$ = NULL;
            bool MessageImpl::live$ = false;

            jclass MessageImpl::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/messages/MessageImpl");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_ddea115c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;[Ljava/lang/Object;)V");
                mids$[mid_getArguments_94e49c77] = env->getMethodID(cls, "getArguments", "()[Ljava/lang/Object;");
                mids$[mid_getKey_14c7b5c5] = env->getMethodID(cls, "getKey", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getLocalizedMessage_c0fb304e] = env->getMethodID(cls, "getLocalizedMessage", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            MessageImpl::MessageImpl(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

            MessageImpl::MessageImpl(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ddea115c, a0.this$, a1.this$)) {}

            JArray< ::java::lang::Object > MessageImpl::getArguments() const
            {
              return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getArguments_94e49c77]));
            }

            ::java::lang::String MessageImpl::getKey() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getKey_14c7b5c5]));
            }

            ::java::lang::String MessageImpl::getLocalizedMessage() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
            }

            ::java::lang::String MessageImpl::getLocalizedMessage(const ::java::util::Locale & a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_c0fb304e], a0.this$));
            }

            ::java::lang::String MessageImpl::toString() const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace messages {
            static PyObject *t_MessageImpl_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_MessageImpl_instance_(PyTypeObject *type, PyObject *arg);
            static int t_MessageImpl_init_(t_MessageImpl *self, PyObject *args, PyObject *kwds);
            static PyObject *t_MessageImpl_getArguments(t_MessageImpl *self);
            static PyObject *t_MessageImpl_getKey(t_MessageImpl *self);
            static PyObject *t_MessageImpl_getLocalizedMessage(t_MessageImpl *self, PyObject *args);
            static PyObject *t_MessageImpl_toString(t_MessageImpl *self, PyObject *args);
            static PyObject *t_MessageImpl_get__arguments(t_MessageImpl *self, void *data);
            static PyObject *t_MessageImpl_get__key(t_MessageImpl *self, void *data);
            static PyObject *t_MessageImpl_get__localizedMessage(t_MessageImpl *self, void *data);
            static PyGetSetDef t_MessageImpl__fields_[] = {
              DECLARE_GET_FIELD(t_MessageImpl, arguments),
              DECLARE_GET_FIELD(t_MessageImpl, key),
              DECLARE_GET_FIELD(t_MessageImpl, localizedMessage),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_MessageImpl__methods_[] = {
              DECLARE_METHOD(t_MessageImpl, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MessageImpl, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_MessageImpl, getArguments, METH_NOARGS),
              DECLARE_METHOD(t_MessageImpl, getKey, METH_NOARGS),
              DECLARE_METHOD(t_MessageImpl, getLocalizedMessage, METH_VARARGS),
              DECLARE_METHOD(t_MessageImpl, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(MessageImpl, t_MessageImpl, ::java::lang::Object, MessageImpl, t_MessageImpl_init_, 0, 0, t_MessageImpl__fields_, 0, 0);

            void t_MessageImpl::install(PyObject *module)
            {
              installType(&PY_TYPE(MessageImpl), module, "MessageImpl", 0);
            }

            void t_MessageImpl::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(MessageImpl).tp_dict, "class_", make_descriptor(MessageImpl::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(MessageImpl).tp_dict, "wrapfn_", make_descriptor(t_MessageImpl::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(MessageImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_MessageImpl_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, MessageImpl::initializeClass, 1)))
                return NULL;
              return t_MessageImpl::wrap_Object(MessageImpl(((t_MessageImpl *) arg)->object.this$));
            }
            static PyObject *t_MessageImpl_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, MessageImpl::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_MessageImpl_init_(t_MessageImpl *self, PyObject *args, PyObject *kwds)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 1:
                {
                  ::java::lang::String a0((jobject) NULL);
                  MessageImpl object((jobject) NULL);

                  if (!parseArgs(args, "s", &a0))
                  {
                    INT_CALL(object = MessageImpl(a0));
                    self->object = object;
                    break;
                  }
                }
                goto err;
               case 2:
                {
                  ::java::lang::String a0((jobject) NULL);
                  JArray< ::java::lang::Object > a1((jobject) NULL);
                  MessageImpl object((jobject) NULL);

                  if (!parseArgs(args, "s[o", &a0, &a1))
                  {
                    INT_CALL(object = MessageImpl(a0, a1));
                    self->object = object;
                    break;
                  }
                }
               default:
               err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_MessageImpl_getArguments(t_MessageImpl *self)
            {
              JArray< ::java::lang::Object > result((jobject) NULL);
              OBJ_CALL(result = self->object.getArguments());
              return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_MessageImpl_getKey(t_MessageImpl *self)
            {
              ::java::lang::String result((jobject) NULL);
              OBJ_CALL(result = self->object.getKey());
              return j2p(result);
            }

            static PyObject *t_MessageImpl_getLocalizedMessage(t_MessageImpl *self, PyObject *args)
            {
              switch (PyTuple_GET_SIZE(args)) {
               case 0:
                {
                  ::java::lang::String result((jobject) NULL);
                  OBJ_CALL(result = self->object.getLocalizedMessage());
                  return j2p(result);
                }
                break;
               case 1:
                {
                  ::java::util::Locale a0((jobject) NULL);
                  ::java::lang::String result((jobject) NULL);

                  if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                  {
                    OBJ_CALL(result = self->object.getLocalizedMessage(a0));
                    return j2p(result);
                  }
                }
              }

              PyErr_SetArgsError((PyObject *) self, "getLocalizedMessage", args);
              return NULL;
            }

            static PyObject *t_MessageImpl_toString(t_MessageImpl *self, PyObject *args)
            {
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
              }

              return callSuper(&PY_TYPE(MessageImpl), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_MessageImpl_get__arguments(t_MessageImpl *self, void *data)
            {
              JArray< ::java::lang::Object > value((jobject) NULL);
              OBJ_CALL(value = self->object.getArguments());
              return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
            }

            static PyObject *t_MessageImpl_get__key(t_MessageImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getKey());
              return j2p(value);
            }

            static PyObject *t_MessageImpl_get__localizedMessage(t_MessageImpl *self, void *data)
            {
              ::java::lang::String value((jobject) NULL);
              OBJ_CALL(value = self->object.getLocalizedMessage());
              return j2p(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/LiveFieldValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/ReferenceManager.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/ReferenceManager$RefreshListener.h"
#include "java/io/Closeable.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *LiveFieldValues::class$ = NULL;
        jmethodID *LiveFieldValues::mids$ = NULL;
        bool LiveFieldValues::live$ = false;

        jclass LiveFieldValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/LiveFieldValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_48ea9202] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/search/ReferenceManager;Ljava/lang/Object;)V");
            mids$[mid_add_2da4da24] = env->getMethodID(cls, "add", "(Ljava/lang/String;Ljava/lang/Object;)V");
            mids$[mid_afterRefresh_bb0c767f] = env->getMethodID(cls, "afterRefresh", "(Z)V");
            mids$[mid_beforeRefresh_54c6a166] = env->getMethodID(cls, "beforeRefresh", "()V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_delete_5fdc3f48] = env->getMethodID(cls, "delete", "(Ljava/lang/String;)V");
            mids$[mid_get_2a1c4d09] = env->getMethodID(cls, "get", "(Ljava/lang/String;)Ljava/lang/Object;");
            mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
            mids$[mid_lookupFromSearcher_e0270375] = env->getMethodID(cls, "lookupFromSearcher", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        LiveFieldValues::LiveFieldValues(const ::org::apache::lucene::search::ReferenceManager & a0, const ::java::lang::Object & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_48ea9202, a0.this$, a1.this$)) {}

        void LiveFieldValues::add(const ::java::lang::String & a0, const ::java::lang::Object & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_add_2da4da24], a0.this$, a1.this$);
        }

        void LiveFieldValues::afterRefresh(jboolean a0) const
        {
          env->callVoidMethod(this$, mids$[mid_afterRefresh_bb0c767f], a0);
        }

        void LiveFieldValues::beforeRefresh() const
        {
          env->callVoidMethod(this$, mids$[mid_beforeRefresh_54c6a166]);
        }

        void LiveFieldValues::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void LiveFieldValues::delete$(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_delete_5fdc3f48], a0.this$);
        }

        ::java::lang::Object LiveFieldValues::get(const ::java::lang::String & a0) const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_2a1c4d09], a0.this$));
        }

        jint LiveFieldValues::size() const
        {
          return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_LiveFieldValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveFieldValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_LiveFieldValues_of_(t_LiveFieldValues *self, PyObject *args);
        static int t_LiveFieldValues_init_(t_LiveFieldValues *self, PyObject *args, PyObject *kwds);
        static PyObject *t_LiveFieldValues_add(t_LiveFieldValues *self, PyObject *args);
        static PyObject *t_LiveFieldValues_afterRefresh(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_beforeRefresh(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_close(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_delete(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_get(t_LiveFieldValues *self, PyObject *arg);
        static PyObject *t_LiveFieldValues_size(t_LiveFieldValues *self);
        static PyObject *t_LiveFieldValues_get__parameters_(t_LiveFieldValues *self, void *data);
        static PyGetSetDef t_LiveFieldValues__fields_[] = {
          DECLARE_GET_FIELD(t_LiveFieldValues, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_LiveFieldValues__methods_[] = {
          DECLARE_METHOD(t_LiveFieldValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveFieldValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_LiveFieldValues, of_, METH_VARARGS),
          DECLARE_METHOD(t_LiveFieldValues, add, METH_VARARGS),
          DECLARE_METHOD(t_LiveFieldValues, afterRefresh, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, beforeRefresh, METH_NOARGS),
          DECLARE_METHOD(t_LiveFieldValues, close, METH_NOARGS),
          DECLARE_METHOD(t_LiveFieldValues, delete, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, get, METH_O),
          DECLARE_METHOD(t_LiveFieldValues, size, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(LiveFieldValues, t_LiveFieldValues, ::java::lang::Object, LiveFieldValues, t_LiveFieldValues_init_, 0, 0, t_LiveFieldValues__fields_, 0, 0);
        PyObject *t_LiveFieldValues::wrap_Object(const LiveFieldValues& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_LiveFieldValues::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_LiveFieldValues *self = (t_LiveFieldValues *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        PyObject *t_LiveFieldValues::wrap_jobject(const jobject& object, PyTypeObject *p0, PyTypeObject *p1)
        {
          PyObject *obj = t_LiveFieldValues::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_LiveFieldValues *self = (t_LiveFieldValues *) obj;
            self->parameters[0] = p0;
            self->parameters[1] = p1;
          }
          return obj;
        }

        void t_LiveFieldValues::install(PyObject *module)
        {
          installType(&PY_TYPE(LiveFieldValues), module, "LiveFieldValues", 0);
        }

        void t_LiveFieldValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(LiveFieldValues).tp_dict, "class_", make_descriptor(LiveFieldValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(LiveFieldValues).tp_dict, "wrapfn_", make_descriptor(t_LiveFieldValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(LiveFieldValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_LiveFieldValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, LiveFieldValues::initializeClass, 1)))
            return NULL;
          return t_LiveFieldValues::wrap_Object(LiveFieldValues(((t_LiveFieldValues *) arg)->object.this$));
        }
        static PyObject *t_LiveFieldValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, LiveFieldValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_LiveFieldValues_of_(t_LiveFieldValues *self, PyObject *args)
        {
          if (!parseArg(args, "T", 2, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_LiveFieldValues_init_(t_LiveFieldValues *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::search::ReferenceManager a0((jobject) NULL);
          PyTypeObject **p0;
          ::java::lang::Object a1((jobject) NULL);
          LiveFieldValues object((jobject) NULL);

          if (!parseArgs(args, "Ko", ::org::apache::lucene::search::ReferenceManager::initializeClass, &a0, &p0, ::org::apache::lucene::search::t_ReferenceManager::parameters_, &a1))
          {
            INT_CALL(object = LiveFieldValues(a0, a1));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_LiveFieldValues_add(t_LiveFieldValues *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Object a1((jobject) NULL);

          if (!parseArgs(args, "sO", self->parameters[1], &a0, &a1))
          {
            OBJ_CALL(self->object.add(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "add", args);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_afterRefresh(t_LiveFieldValues *self, PyObject *arg)
        {
          jboolean a0;

          if (!parseArg(arg, "Z", &a0))
          {
            OBJ_CALL(self->object.afterRefresh(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "afterRefresh", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_beforeRefresh(t_LiveFieldValues *self)
        {
          OBJ_CALL(self->object.beforeRefresh());
          Py_RETURN_NONE;
        }

        static PyObject *t_LiveFieldValues_close(t_LiveFieldValues *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_LiveFieldValues_delete(t_LiveFieldValues *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(self->object.delete$(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "delete", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_get(t_LiveFieldValues *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::Object result((jobject) NULL);

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.get(a0));
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "get", arg);
          return NULL;
        }

        static PyObject *t_LiveFieldValues_size(t_LiveFieldValues *self)
        {
          jint result;
          OBJ_CALL(result = self->object.size());
          return PyInt_FromLong((long) result);
        }
        static PyObject *t_LiveFieldValues_get__parameters_(t_LiveFieldValues *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/LambdaDF.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *LambdaDF::class$ = NULL;
          jmethodID *LambdaDF::mids$ = NULL;
          bool LambdaDF::live$ = false;

          jclass LambdaDF::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/LambdaDF");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_eddc6641] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_lambda_cb225ea0] = env->getMethodID(cls, "lambda", "(Lorg/apache/lucene/search/similarities/BasicStats;)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          LambdaDF::LambdaDF() : ::org::apache::lucene::search::similarities::Lambda(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation LambdaDF::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_eddc6641], a0.this$));
          }

          jfloat LambdaDF::lambda(const ::org::apache::lucene::search::similarities::BasicStats & a0) const
          {
            return env->callFloatMethod(this$, mids$[mid_lambda_cb225ea0], a0.this$);
          }

          ::java::lang::String LambdaDF::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_LambdaDF_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_LambdaDF_instance_(PyTypeObject *type, PyObject *arg);
          static int t_LambdaDF_init_(t_LambdaDF *self, PyObject *args, PyObject *kwds);
          static PyObject *t_LambdaDF_explain(t_LambdaDF *self, PyObject *args);
          static PyObject *t_LambdaDF_lambda(t_LambdaDF *self, PyObject *args);
          static PyObject *t_LambdaDF_toString(t_LambdaDF *self, PyObject *args);

          static PyMethodDef t_LambdaDF__methods_[] = {
            DECLARE_METHOD(t_LambdaDF, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaDF, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_LambdaDF, explain, METH_VARARGS),
            DECLARE_METHOD(t_LambdaDF, lambda, METH_VARARGS),
            DECLARE_METHOD(t_LambdaDF, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(LambdaDF, t_LambdaDF, ::org::apache::lucene::search::similarities::Lambda, LambdaDF, t_LambdaDF_init_, 0, 0, 0, 0, 0);

          void t_LambdaDF::install(PyObject *module)
          {
            installType(&PY_TYPE(LambdaDF), module, "LambdaDF", 0);
          }

          void t_LambdaDF::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(LambdaDF).tp_dict, "class_", make_descriptor(LambdaDF::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(LambdaDF).tp_dict, "wrapfn_", make_descriptor(t_LambdaDF::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(LambdaDF).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_LambdaDF_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, LambdaDF::initializeClass, 1)))
              return NULL;
            return t_LambdaDF::wrap_Object(LambdaDF(((t_LambdaDF *) arg)->object.this$));
          }
          static PyObject *t_LambdaDF_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, LambdaDF::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_LambdaDF_init_(t_LambdaDF *self, PyObject *args, PyObject *kwds)
          {
            LambdaDF object((jobject) NULL);

            INT_CALL(object = LambdaDF());
            self->object = object;

            return 0;
          }

          static PyObject *t_LambdaDF_explain(t_LambdaDF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.explain(a0));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(LambdaDF), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_LambdaDF_lambda(t_LambdaDF *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat result;

            if (!parseArgs(args, "k", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.lambda(a0));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(LambdaDF), (PyObject *) self, "lambda", args, 2);
          }

          static PyObject *t_LambdaDF_toString(t_LambdaDF *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(LambdaDF), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/config/FieldBoostMapFCListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfigListener.h"
#include "org/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/config/FieldConfig.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {

              ::java::lang::Class *FieldBoostMapFCListener::class$ = NULL;
              jmethodID *FieldBoostMapFCListener::mids$ = NULL;
              bool FieldBoostMapFCListener::live$ = false;

              jclass FieldBoostMapFCListener::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/config/FieldBoostMapFCListener");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_0b1f7132] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/config/QueryConfigHandler;)V");
                  mids$[mid_buildFieldConfig_aaab7c6b] = env->getMethodID(cls, "buildFieldConfig", "(Lorg/apache/lucene/queryparser/flexible/core/config/FieldConfig;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FieldBoostMapFCListener::FieldBoostMapFCListener(const ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0b1f7132, a0.this$)) {}

              void FieldBoostMapFCListener::buildFieldConfig(const ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig & a0) const
              {
                env->callVoidMethod(this$, mids$[mid_buildFieldConfig_aaab7c6b], a0.this$);
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace config {
              static PyObject *t_FieldBoostMapFCListener_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FieldBoostMapFCListener_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FieldBoostMapFCListener_init_(t_FieldBoostMapFCListener *self, PyObject *args, PyObject *kwds);
              static PyObject *t_FieldBoostMapFCListener_buildFieldConfig(t_FieldBoostMapFCListener *self, PyObject *arg);

              static PyMethodDef t_FieldBoostMapFCListener__methods_[] = {
                DECLARE_METHOD(t_FieldBoostMapFCListener, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldBoostMapFCListener, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FieldBoostMapFCListener, buildFieldConfig, METH_O),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FieldBoostMapFCListener, t_FieldBoostMapFCListener, ::java::lang::Object, FieldBoostMapFCListener, t_FieldBoostMapFCListener_init_, 0, 0, 0, 0, 0);

              void t_FieldBoostMapFCListener::install(PyObject *module)
              {
                installType(&PY_TYPE(FieldBoostMapFCListener), module, "FieldBoostMapFCListener", 0);
              }

              void t_FieldBoostMapFCListener::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FieldBoostMapFCListener).tp_dict, "class_", make_descriptor(FieldBoostMapFCListener::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FieldBoostMapFCListener).tp_dict, "wrapfn_", make_descriptor(t_FieldBoostMapFCListener::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FieldBoostMapFCListener).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FieldBoostMapFCListener_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FieldBoostMapFCListener::initializeClass, 1)))
                  return NULL;
                return t_FieldBoostMapFCListener::wrap_Object(FieldBoostMapFCListener(((t_FieldBoostMapFCListener *) arg)->object.this$));
              }
              static PyObject *t_FieldBoostMapFCListener_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FieldBoostMapFCListener::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FieldBoostMapFCListener_init_(t_FieldBoostMapFCListener *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler a0((jobject) NULL);
                FieldBoostMapFCListener object((jobject) NULL);

                if (!parseArgs(args, "k", ::org::apache::lucene::queryparser::flexible::core::config::QueryConfigHandler::initializeClass, &a0))
                {
                  INT_CALL(object = FieldBoostMapFCListener(a0));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }

              static PyObject *t_FieldBoostMapFCListener_buildFieldConfig(t_FieldBoostMapFCListener *self, PyObject *arg)
              {
                ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig a0((jobject) NULL);

                if (!parseArg(arg, "k", ::org::apache::lucene::queryparser::flexible::core::config::FieldConfig::initializeClass, &a0))
                {
                  OBJ_CALL(self->object.buildFieldConfig(a0));
                  Py_RETURN_NONE;
                }

                PyErr_SetArgsError((PyObject *) self, "buildFieldConfig", arg);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/processors/FuzzyQueryNodeProcessor.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {

              ::java::lang::Class *FuzzyQueryNodeProcessor::class$ = NULL;
              jmethodID *FuzzyQueryNodeProcessor::mids$ = NULL;
              bool FuzzyQueryNodeProcessor::live$ = false;

              jclass FuzzyQueryNodeProcessor::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/processors/FuzzyQueryNodeProcessor");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_postProcessNode_6705aed7] = env->getMethodID(cls, "postProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_preProcessNode_6705aed7] = env->getMethodID(cls, "preProcessNode", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;)Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;");
                  mids$[mid_setChildrenOrder_4f378251] = env->getMethodID(cls, "setChildrenOrder", "(Ljava/util/List;)Ljava/util/List;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              FuzzyQueryNodeProcessor::FuzzyQueryNodeProcessor() : ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace processors {
              static PyObject *t_FuzzyQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_FuzzyQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg);
              static int t_FuzzyQueryNodeProcessor_init_(t_FuzzyQueryNodeProcessor *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_FuzzyQueryNodeProcessor__methods_[] = {
                DECLARE_METHOD(t_FuzzyQueryNodeProcessor, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_FuzzyQueryNodeProcessor, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(FuzzyQueryNodeProcessor, t_FuzzyQueryNodeProcessor, ::org::apache::lucene::queryparser::flexible::core::processors::QueryNodeProcessorImpl, FuzzyQueryNodeProcessor, t_FuzzyQueryNodeProcessor_init_, 0, 0, 0, 0, 0);

              void t_FuzzyQueryNodeProcessor::install(PyObject *module)
              {
                installType(&PY_TYPE(FuzzyQueryNodeProcessor), module, "FuzzyQueryNodeProcessor", 0);
              }

              void t_FuzzyQueryNodeProcessor::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeProcessor).tp_dict, "class_", make_descriptor(FuzzyQueryNodeProcessor::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeProcessor).tp_dict, "wrapfn_", make_descriptor(t_FuzzyQueryNodeProcessor::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(FuzzyQueryNodeProcessor).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_FuzzyQueryNodeProcessor_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, FuzzyQueryNodeProcessor::initializeClass, 1)))
                  return NULL;
                return t_FuzzyQueryNodeProcessor::wrap_Object(FuzzyQueryNodeProcessor(((t_FuzzyQueryNodeProcessor *) arg)->object.this$));
              }
              static PyObject *t_FuzzyQueryNodeProcessor_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, FuzzyQueryNodeProcessor::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_FuzzyQueryNodeProcessor_init_(t_FuzzyQueryNodeProcessor *self, PyObject *args, PyObject *kwds)
              {
                FuzzyQueryNodeProcessor object((jobject) NULL);

                INT_CALL(object = FuzzyQueryNodeProcessor());
                self->object = object;

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/nodes/BooleanModifierNode.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier.h"
#include "org/apache/lucene/queryparser/flexible/core/nodes/QueryNode.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {

              ::java::lang::Class *BooleanModifierNode::class$ = NULL;
              jmethodID *BooleanModifierNode::mids$ = NULL;
              bool BooleanModifierNode::live$ = false;

              jclass BooleanModifierNode::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/nodes/BooleanModifierNode");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_6bd34b3d] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queryparser/flexible/core/nodes/QueryNode;Lorg/apache/lucene/queryparser/flexible/core/nodes/ModifierQueryNode$Modifier;)V");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              BooleanModifierNode::BooleanModifierNode(const ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode & a0, const ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier & a1) : ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode(env->newObject(initializeClass, &mids$, mid_init$_6bd34b3d, a0.this$, a1.this$)) {}
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace nodes {
              static PyObject *t_BooleanModifierNode_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_BooleanModifierNode_instance_(PyTypeObject *type, PyObject *arg);
              static int t_BooleanModifierNode_init_(t_BooleanModifierNode *self, PyObject *args, PyObject *kwds);

              static PyMethodDef t_BooleanModifierNode__methods_[] = {
                DECLARE_METHOD(t_BooleanModifierNode, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_BooleanModifierNode, instance_, METH_O | METH_CLASS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(BooleanModifierNode, t_BooleanModifierNode, ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode, BooleanModifierNode, t_BooleanModifierNode_init_, 0, 0, 0, 0, 0);

              void t_BooleanModifierNode::install(PyObject *module)
              {
                installType(&PY_TYPE(BooleanModifierNode), module, "BooleanModifierNode", 0);
              }

              void t_BooleanModifierNode::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(BooleanModifierNode).tp_dict, "class_", make_descriptor(BooleanModifierNode::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(BooleanModifierNode).tp_dict, "wrapfn_", make_descriptor(t_BooleanModifierNode::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(BooleanModifierNode).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_BooleanModifierNode_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, BooleanModifierNode::initializeClass, 1)))
                  return NULL;
                return t_BooleanModifierNode::wrap_Object(BooleanModifierNode(((t_BooleanModifierNode *) arg)->object.this$));
              }
              static PyObject *t_BooleanModifierNode_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, BooleanModifierNode::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_BooleanModifierNode_init_(t_BooleanModifierNode *self, PyObject *args, PyObject *kwds)
              {
                ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier a1((jobject) NULL);
                PyTypeObject **p1;
                BooleanModifierNode object((jobject) NULL);

                if (!parseArgs(args, "kK", ::org::apache::lucene::queryparser::flexible::core::nodes::QueryNode::initializeClass, ::org::apache::lucene::queryparser::flexible::core::nodes::ModifierQueryNode$Modifier::initializeClass, &a0, &a1, &p1, ::org::apache::lucene::queryparser::flexible::core::nodes::t_ModifierQueryNode$Modifier::parameters_))
                {
                  INT_CALL(object = BooleanModifierNode(a0, a1));
                  self->object = object;
                }
                else
                {
                  PyErr_SetArgsError((PyObject *) self, "__init__", args);
                  return -1;
                }

                return 0;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {

            ::java::lang::Class *LruTaxonomyWriterCache$LRUType::class$ = NULL;
            jmethodID *LruTaxonomyWriterCache$LRUType::mids$ = NULL;
            bool LruTaxonomyWriterCache$LRUType::live$ = false;
            LruTaxonomyWriterCache$LRUType *LruTaxonomyWriterCache$LRUType::LRU_HASHED = NULL;
            LruTaxonomyWriterCache$LRUType *LruTaxonomyWriterCache$LRUType::LRU_STRING = NULL;

            jclass LruTaxonomyWriterCache$LRUType::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType");

                mids$ = new jmethodID[max_mid];
                mids$[mid_valueOf_dc8e332a] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;");
                mids$[mid_values_bbbf1f8c] = env->getStaticMethodID(cls, "values", "()[Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                LRU_HASHED = new LruTaxonomyWriterCache$LRUType(env->getStaticObjectField(cls, "LRU_HASHED", "Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;"));
                LRU_STRING = new LruTaxonomyWriterCache$LRUType(env->getStaticObjectField(cls, "LRU_STRING", "Lorg/apache/lucene/facet/taxonomy/writercache/LruTaxonomyWriterCache$LRUType;"));
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            LruTaxonomyWriterCache$LRUType LruTaxonomyWriterCache$LRUType::valueOf(const ::java::lang::String & a0)
            {
              jclass cls = env->getClass(initializeClass);
              return LruTaxonomyWriterCache$LRUType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_dc8e332a], a0.this$));
            }

            JArray< LruTaxonomyWriterCache$LRUType > LruTaxonomyWriterCache$LRUType::values()
            {
              jclass cls = env->getClass(initializeClass);
              return JArray< LruTaxonomyWriterCache$LRUType >(env->callStaticObjectMethod(cls, mids$[mid_values_bbbf1f8c]));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace facet {
        namespace taxonomy {
          namespace writercache {
            static PyObject *t_LruTaxonomyWriterCache$LRUType_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_of_(t_LruTaxonomyWriterCache$LRUType *self, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_valueOf(PyTypeObject *type, PyObject *args);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_values(PyTypeObject *type);
            static PyObject *t_LruTaxonomyWriterCache$LRUType_get__parameters_(t_LruTaxonomyWriterCache$LRUType *self, void *data);
            static PyGetSetDef t_LruTaxonomyWriterCache$LRUType__fields_[] = {
              DECLARE_GET_FIELD(t_LruTaxonomyWriterCache$LRUType, parameters_),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_LruTaxonomyWriterCache$LRUType__methods_[] = {
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, of_, METH_VARARGS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, valueOf, METH_VARARGS | METH_CLASS),
              DECLARE_METHOD(t_LruTaxonomyWriterCache$LRUType, values, METH_NOARGS | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(LruTaxonomyWriterCache$LRUType, t_LruTaxonomyWriterCache$LRUType, ::java::lang::Enum, LruTaxonomyWriterCache$LRUType, abstract_init, 0, 0, t_LruTaxonomyWriterCache$LRUType__fields_, 0, 0);
            PyObject *t_LruTaxonomyWriterCache$LRUType::wrap_Object(const LruTaxonomyWriterCache$LRUType& object, PyTypeObject *p0)
            {
              PyObject *obj = t_LruTaxonomyWriterCache$LRUType::wrap_Object(object);
              if (obj != NULL && obj != Py_None)
              {
                t_LruTaxonomyWriterCache$LRUType *self = (t_LruTaxonomyWriterCache$LRUType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            PyObject *t_LruTaxonomyWriterCache$LRUType::wrap_jobject(const jobject& object, PyTypeObject *p0)
            {
              PyObject *obj = t_LruTaxonomyWriterCache$LRUType::wrap_jobject(object);
              if (obj != NULL && obj != Py_None)
              {
                t_LruTaxonomyWriterCache$LRUType *self = (t_LruTaxonomyWriterCache$LRUType *) obj;
                self->parameters[0] = p0;
              }
              return obj;
            }

            void t_LruTaxonomyWriterCache$LRUType::install(PyObject *module)
            {
              installType(&PY_TYPE(LruTaxonomyWriterCache$LRUType), module, "LruTaxonomyWriterCache$LRUType", 0);
            }

            void t_LruTaxonomyWriterCache$LRUType::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "class_", make_descriptor(LruTaxonomyWriterCache$LRUType::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "wrapfn_", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "boxfn_", make_descriptor(boxObject));
              env->getClass(LruTaxonomyWriterCache$LRUType::initializeClass);
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "LRU_HASHED", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_Object(*LruTaxonomyWriterCache$LRUType::LRU_HASHED)));
              PyDict_SetItemString(PY_TYPE(LruTaxonomyWriterCache$LRUType).tp_dict, "LRU_STRING", make_descriptor(t_LruTaxonomyWriterCache$LRUType::wrap_Object(*LruTaxonomyWriterCache$LRUType::LRU_STRING)));
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, LruTaxonomyWriterCache$LRUType::initializeClass, 1)))
                return NULL;
              return t_LruTaxonomyWriterCache$LRUType::wrap_Object(LruTaxonomyWriterCache$LRUType(((t_LruTaxonomyWriterCache$LRUType *) arg)->object.this$));
            }
            static PyObject *t_LruTaxonomyWriterCache$LRUType_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, LruTaxonomyWriterCache$LRUType::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_of_(t_LruTaxonomyWriterCache$LRUType *self, PyObject *args)
            {
              if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
              return PyErr_SetArgsError((PyObject *) self, "of_", args);
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_valueOf(PyTypeObject *type, PyObject *args)
            {
              ::java::lang::String a0((jobject) NULL);
              LruTaxonomyWriterCache$LRUType result((jobject) NULL);

              if (!parseArgs(args, "s", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::valueOf(a0));
                return t_LruTaxonomyWriterCache$LRUType::wrap_Object(result);
              }

              return callSuper(type, "valueOf", args, 2);
            }

            static PyObject *t_LruTaxonomyWriterCache$LRUType_values(PyTypeObject *type)
            {
              JArray< LruTaxonomyWriterCache$LRUType > result((jobject) NULL);
              OBJ_CALL(result = ::org::apache::lucene::facet::taxonomy::writercache::LruTaxonomyWriterCache$LRUType::values());
              return JArray<jobject>(result.this$).wrap(t_LruTaxonomyWriterCache$LRUType::wrap_jobject);
            }
            static PyObject *t_LruTaxonomyWriterCache$LRUType_get__parameters_(t_LruTaxonomyWriterCache$LRUType *self, void *data)
            {
              return typeParameters(self->parameters, sizeof(self->parameters));
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/hu/HungarianAnalyzer.h"
#include "org/apache/lucene/util/Version.h"
#include "java/lang/String.h"
#include "org/apache/lucene/analysis/util/CharArraySet.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {

          ::java::lang::Class *HungarianAnalyzer::class$ = NULL;
          jmethodID *HungarianAnalyzer::mids$ = NULL;
          bool HungarianAnalyzer::live$ = false;
          ::java::lang::String *HungarianAnalyzer::DEFAULT_STOPWORD_FILE = NULL;

          jclass HungarianAnalyzer::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/hu/HungarianAnalyzer");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_0d96cf33] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;)V");
              mids$[mid_init$_83eafe28] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_init$_c9d7e4a3] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/util/Version;Lorg/apache/lucene/analysis/util/CharArraySet;Lorg/apache/lucene/analysis/util/CharArraySet;)V");
              mids$[mid_getDefaultStopSet_d2d3505c] = env->getStaticMethodID(cls, "getDefaultStopSet", "()Lorg/apache/lucene/analysis/util/CharArraySet;");
              mids$[mid_createComponents_1be39cae] = env->getMethodID(cls, "createComponents", "(Ljava/lang/String;Ljava/io/Reader;)Lorg/apache/lucene/analysis/Analyzer$TokenStreamComponents;");

              class$ = (::java::lang::Class *) new JObject(cls);
              cls = (jclass) class$->this$;

              DEFAULT_STOPWORD_FILE = new ::java::lang::String(env->getStaticObjectField(cls, "DEFAULT_STOPWORD_FILE", "Ljava/lang/String;"));
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::util::Version & a0) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_0d96cf33, a0.this$)) {}

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_83eafe28, a0.this$, a1.this$)) {}

          HungarianAnalyzer::HungarianAnalyzer(const ::org::apache::lucene::util::Version & a0, const ::org::apache::lucene::analysis::util::CharArraySet & a1, const ::org::apache::lucene::analysis::util::CharArraySet & a2) : ::org::apache::lucene::analysis::util::StopwordAnalyzerBase(env->newObject(initializeClass, &mids$, mid_init$_c9d7e4a3, a0.this$, a1.this$, a2.this$)) {}

          ::org::apache::lucene::analysis::util::CharArraySet HungarianAnalyzer::getDefaultStopSet()
          {
            jclass cls = env->getClass(initializeClass);
            return ::org::apache::lucene::analysis::util::CharArraySet(env->callStaticObjectMethod(cls, mids$[mid_getDefaultStopSet_d2d3505c]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace hu {
          static PyObject *t_HungarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_HungarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg);
          static int t_HungarianAnalyzer_init_(t_HungarianAnalyzer *self, PyObject *args, PyObject *kwds);
          static PyObject *t_HungarianAnalyzer_getDefaultStopSet(PyTypeObject *type);
          static PyObject *t_HungarianAnalyzer_get__defaultStopSet(t_HungarianAnalyzer *self, void *data);
          static PyGetSetDef t_HungarianAnalyzer__fields_[] = {
            DECLARE_GET_FIELD(t_HungarianAnalyzer, defaultStopSet),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_HungarianAnalyzer__methods_[] = {
            DECLARE_METHOD(t_HungarianAnalyzer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianAnalyzer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HungarianAnalyzer, getDefaultStopSet, METH_NOARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(HungarianAnalyzer, t_HungarianAnalyzer, ::org::apache::lucene::analysis::util::StopwordAnalyzerBase, HungarianAnalyzer, t_HungarianAnalyzer_init_, 0, 0, t_HungarianAnalyzer__fields_, 0, 0);

          void t_HungarianAnalyzer::install(PyObject *module)
          {
            installType(&PY_TYPE(HungarianAnalyzer), module, "HungarianAnalyzer", 0);
          }

          void t_HungarianAnalyzer::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "class_", make_descriptor(HungarianAnalyzer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "wrapfn_", make_descriptor(t_HungarianAnalyzer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "boxfn_", make_descriptor(boxObject));
            env->getClass(HungarianAnalyzer::initializeClass);
            PyDict_SetItemString(PY_TYPE(HungarianAnalyzer).tp_dict, "DEFAULT_STOPWORD_FILE", make_descriptor(j2p(*HungarianAnalyzer::DEFAULT_STOPWORD_FILE)));
          }

          static PyObject *t_HungarianAnalyzer_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, HungarianAnalyzer::initializeClass, 1)))
              return NULL;
            return t_HungarianAnalyzer::wrap_Object(HungarianAnalyzer(((t_HungarianAnalyzer *) arg)->object.this$));
          }
          static PyObject *t_HungarianAnalyzer_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, HungarianAnalyzer::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_HungarianAnalyzer_init_(t_HungarianAnalyzer *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 1:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "K", ::org::apache::lucene::util::Version::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 2:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0, a1));
                  self->object = object;
                  break;
                }
              }
              goto err;
             case 3:
              {
                ::org::apache::lucene::util::Version a0((jobject) NULL);
                PyTypeObject **p0;
                ::org::apache::lucene::analysis::util::CharArraySet a1((jobject) NULL);
                PyTypeObject **p1;
                ::org::apache::lucene::analysis::util::CharArraySet a2((jobject) NULL);
                PyTypeObject **p2;
                HungarianAnalyzer object((jobject) NULL);

                if (!parseArgs(args, "KKK", ::org::apache::lucene::util::Version::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, ::org::apache::lucene::analysis::util::CharArraySet::initializeClass, &a0, &p0, ::org::apache::lucene::util::t_Version::parameters_, &a1, &p1, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_, &a2, &p2, ::org::apache::lucene::analysis::util::t_CharArraySet::parameters_))
                {
                  INT_CALL(object = HungarianAnalyzer(a0, a1, a2));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_HungarianAnalyzer_getDefaultStopSet(PyTypeObject *type)
          {
            ::org::apache::lucene::analysis::util::CharArraySet result((jobject) NULL);
            OBJ_CALL(result = ::org::apache::lucene::analysis::hu::HungarianAnalyzer::getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(result);
          }

          static PyObject *t_HungarianAnalyzer_get__defaultStopSet(t_HungarianAnalyzer *self, void *data)
          {
            ::org::apache::lucene::analysis::util::CharArraySet value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefaultStopSet());
            return ::org::apache::lucene::analysis::util::t_CharArraySet::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/store/PythonLockFactory.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Lock.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {

        ::java::lang::Class *PythonLockFactory::class$ = NULL;
        jmethodID *PythonLockFactory::mids$ = NULL;
        bool PythonLockFactory::live$ = false;

        jclass PythonLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/pylucene/store/PythonLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
            mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
            mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        PythonLockFactory::PythonLockFactory() : ::org::apache::lucene::store::LockFactory(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void PythonLockFactory::finalize() const
        {
          env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
        }

        jlong PythonLockFactory::pythonExtension() const
        {
          return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
        }

        void PythonLockFactory::pythonExtension(jlong a0) const
        {
          env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace store {
        static PyObject *t_PythonLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PythonLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PythonLockFactory_init_(t_PythonLockFactory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PythonLockFactory_finalize(t_PythonLockFactory *self);
        static PyObject *t_PythonLockFactory_pythonExtension(t_PythonLockFactory *self, PyObject *args);
        static void JNICALL t_PythonLockFactory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0);
        static jobject JNICALL t_PythonLockFactory_makeLock1(JNIEnv *jenv, jobject jobj, jobject a0);
        static void JNICALL t_PythonLockFactory_pythonDecRef2(JNIEnv *jenv, jobject jobj);
        static PyObject *t_PythonLockFactory_get__self(t_PythonLockFactory *self, void *data);
        static PyGetSetDef t_PythonLockFactory__fields_[] = {
          DECLARE_GET_FIELD(t_PythonLockFactory, self),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_PythonLockFactory__methods_[] = {
          DECLARE_METHOD(t_PythonLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_PythonLockFactory, finalize, METH_NOARGS),
          DECLARE_METHOD(t_PythonLockFactory, pythonExtension, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PythonLockFactory, t_PythonLockFactory, ::org::apache::lucene::store::LockFactory, PythonLockFactory, t_PythonLockFactory_init_, 0, 0, t_PythonLockFactory__fields_, 0, 0);

        void t_PythonLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(PythonLockFactory), module, "PythonLockFactory", 1);
        }

        void t_PythonLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(PythonLockFactory).tp_dict, "class_", make_descriptor(PythonLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(PythonLockFactory).tp_dict, "wrapfn_", make_descriptor(t_PythonLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(PythonLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
          jclass cls = env->getClass(PythonLockFactory::initializeClass);
          JNINativeMethod methods[] = {
            { "clearLock", "(Ljava/lang/String;)V", (void *) t_PythonLockFactory_clearLock0 },
            { "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;", (void *) t_PythonLockFactory_makeLock1 },
            { "pythonDecRef", "()V", (void *) t_PythonLockFactory_pythonDecRef2 },
          };
          env->registerNatives(cls, methods, 3);
        }

        static PyObject *t_PythonLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, PythonLockFactory::initializeClass, 1)))
            return NULL;
          return t_PythonLockFactory::wrap_Object(PythonLockFactory(((t_PythonLockFactory *) arg)->object.this$));
        }
        static PyObject *t_PythonLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, PythonLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_PythonLockFactory_init_(t_PythonLockFactory *self, PyObject *args, PyObject *kwds)
        {
          PythonLockFactory object((jobject) NULL);

          INT_CALL(object = PythonLockFactory());
          self->object = object;

          Py_INCREF((PyObject *) self);
          self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

          return 0;
        }

        static PyObject *t_PythonLockFactory_finalize(t_PythonLockFactory *self)
        {
          OBJ_CALL(self->object.finalize());
          Py_RETURN_NONE;
        }

        static PyObject *t_PythonLockFactory_pythonExtension(t_PythonLockFactory *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 0:
            {
              jlong result;
              OBJ_CALL(result = self->object.pythonExtension());
              return PyLong_FromLongLong((PY_LONG_LONG) result);
            }
            break;
           case 1:
            {
              jlong a0;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(self->object.pythonExtension(a0));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
          return NULL;
        }

        static void JNICALL t_PythonLockFactory_clearLock0(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "clearLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else
            Py_DECREF(result);
        }

        static jobject JNICALL t_PythonLockFactory_makeLock1(JNIEnv *jenv, jobject jobj, jobject a0)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
          PythonGIL gil(jenv);
          ::org::apache::lucene::store::Lock value((jobject) NULL);
          PyObject *o0 = env->fromJString((jstring) a0, 0);
          PyObject *result = PyObject_CallMethod(obj, "makeLock", "O", o0);
          Py_DECREF(o0);
          if (!result)
            throwPythonError();
          else if (parseArg(result, "k", ::org::apache::lucene::store::Lock::initializeClass, &value))
          {
            throwTypeError("makeLock", result);
            Py_DECREF(result);
          }
          else
          {
            jobj = jenv->NewLocalRef(value.this$);
            Py_DECREF(result);
            return jobj;
          }

          return (jobject) NULL;
        }

        static void JNICALL t_PythonLockFactory_pythonDecRef2(JNIEnv *jenv, jobject jobj)
        {
          jlong ptr = jenv->CallLongMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_54c6a17a]);
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            jenv->CallVoidMethod(jobj, PythonLockFactory::mids$[PythonLockFactory::mid_pythonExtension_0ee6df2f], (jlong) 0);
            env->finalizeObject(jenv, obj);
          }
        }

        static PyObject *t_PythonLockFactory_get__self(t_PythonLockFactory *self, void *data)
        {
          jlong ptr;
          OBJ_CALL(ptr = self->object.pythonExtension());
          PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

          if (obj != NULL)
          {
            Py_INCREF(obj);
            return obj;
          }
          else
            Py_RETURN_NONE;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/codecs/lucene40/Lucene40FieldInfosFormat.h"
#include "org/apache/lucene/codecs/FieldInfosReader.h"
#include "org/apache/lucene/codecs/FieldInfosWriter.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {

          ::java::lang::Class *Lucene40FieldInfosFormat::class$ = NULL;
          jmethodID *Lucene40FieldInfosFormat::mids$ = NULL;
          bool Lucene40FieldInfosFormat::live$ = false;

          jclass Lucene40FieldInfosFormat::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/codecs/lucene40/Lucene40FieldInfosFormat");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_getFieldInfosReader_6ecd5494] = env->getMethodID(cls, "getFieldInfosReader", "()Lorg/apache/lucene/codecs/FieldInfosReader;");
              mids$[mid_getFieldInfosWriter_211ffa60] = env->getMethodID(cls, "getFieldInfosWriter", "()Lorg/apache/lucene/codecs/FieldInfosWriter;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          Lucene40FieldInfosFormat::Lucene40FieldInfosFormat() : ::org::apache::lucene::codecs::FieldInfosFormat(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::codecs::FieldInfosReader Lucene40FieldInfosFormat::getFieldInfosReader() const
          {
            return ::org::apache::lucene::codecs::FieldInfosReader(env->callObjectMethod(this$, mids$[mid_getFieldInfosReader_6ecd5494]));
          }

          ::org::apache::lucene::codecs::FieldInfosWriter Lucene40FieldInfosFormat::getFieldInfosWriter() const
          {
            return ::org::apache::lucene::codecs::FieldInfosWriter(env->callObjectMethod(this$, mids$[mid_getFieldInfosWriter_211ffa60]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace codecs {
        namespace lucene40 {
          static PyObject *t_Lucene40FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_Lucene40FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg);
          static int t_Lucene40FieldInfosFormat_init_(t_Lucene40FieldInfosFormat *self, PyObject *args, PyObject *kwds);
          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosReader(t_Lucene40FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosWriter(t_Lucene40FieldInfosFormat *self, PyObject *args);
          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosReader(t_Lucene40FieldInfosFormat *self, void *data);
          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosWriter(t_Lucene40FieldInfosFormat *self, void *data);
          static PyGetSetDef t_Lucene40FieldInfosFormat__fields_[] = {
            DECLARE_GET_FIELD(t_Lucene40FieldInfosFormat, fieldInfosReader),
            DECLARE_GET_FIELD(t_Lucene40FieldInfosFormat, fieldInfosWriter),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_Lucene40FieldInfosFormat__methods_[] = {
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, getFieldInfosReader, METH_VARARGS),
            DECLARE_METHOD(t_Lucene40FieldInfosFormat, getFieldInfosWriter, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(Lucene40FieldInfosFormat, t_Lucene40FieldInfosFormat, ::org::apache::lucene::codecs::FieldInfosFormat, Lucene40FieldInfosFormat, t_Lucene40FieldInfosFormat_init_, 0, 0, t_Lucene40FieldInfosFormat__fields_, 0, 0);

          void t_Lucene40FieldInfosFormat::install(PyObject *module)
          {
            installType(&PY_TYPE(Lucene40FieldInfosFormat), module, "Lucene40FieldInfosFormat", 0);
          }

          void t_Lucene40FieldInfosFormat::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(Lucene40FieldInfosFormat).tp_dict, "class_", make_descriptor(Lucene40FieldInfosFormat::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Lucene40FieldInfosFormat).tp_dict, "wrapfn_", make_descriptor(t_Lucene40FieldInfosFormat::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Lucene40FieldInfosFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_Lucene40FieldInfosFormat_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, Lucene40FieldInfosFormat::initializeClass, 1)))
              return NULL;
            return t_Lucene40FieldInfosFormat::wrap_Object(Lucene40FieldInfosFormat(((t_Lucene40FieldInfosFormat *) arg)->object.this$));
          }
          static PyObject *t_Lucene40FieldInfosFormat_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, Lucene40FieldInfosFormat::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_Lucene40FieldInfosFormat_init_(t_Lucene40FieldInfosFormat *self, PyObject *args, PyObject *kwds)
          {
            Lucene40FieldInfosFormat object((jobject) NULL);

            INT_CALL(object = Lucene40FieldInfosFormat());
            self->object = object;

            return 0;
          }

          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosReader(t_Lucene40FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosReader result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosReader());
              return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40FieldInfosFormat), (PyObject *) self, "getFieldInfosReader", args, 2);
          }

          static PyObject *t_Lucene40FieldInfosFormat_getFieldInfosWriter(t_Lucene40FieldInfosFormat *self, PyObject *args)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.getFieldInfosWriter());
              return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Lucene40FieldInfosFormat), (PyObject *) self, "getFieldInfosWriter", args, 2);
          }

          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosReader(t_Lucene40FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosReader value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosReader());
            return ::org::apache::lucene::codecs::t_FieldInfosReader::wrap_Object(value);
          }

          static PyObject *t_Lucene40FieldInfosFormat_get__fieldInfosWriter(t_Lucene40FieldInfosFormat *self, void *data)
          {
            ::org::apache::lucene::codecs::FieldInfosWriter value((jobject) NULL);
            OBJ_CALL(value = self->object.getFieldInfosWriter());
            return ::org::apache::lucene::codecs::t_FieldInfosWriter::wrap_Object(value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/packed/AbstractAppendingLongBuffer$Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {

          ::java::lang::Class *AbstractAppendingLongBuffer$Iterator::class$ = NULL;
          jmethodID *AbstractAppendingLongBuffer$Iterator::mids$ = NULL;
          bool AbstractAppendingLongBuffer$Iterator::live$ = false;

          jclass AbstractAppendingLongBuffer$Iterator::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/packed/AbstractAppendingLongBuffer$Iterator");

              mids$ = new jmethodID[max_mid];
              mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
              mids$[mid_next_54c6a17a] = env->getMethodID(cls, "next", "()J");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          jboolean AbstractAppendingLongBuffer$Iterator::hasNext() const
          {
            return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
          }

          jlong AbstractAppendingLongBuffer$Iterator::next() const
          {
            return env->callLongMethod(this$, mids$[mid_next_54c6a17a]);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace packed {
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_hasNext(t_AbstractAppendingLongBuffer$Iterator *self);
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_next(t_AbstractAppendingLongBuffer$Iterator *self);

          static PyMethodDef t_AbstractAppendingLongBuffer$Iterator__methods_[] = {
            DECLARE_METHOD(t_AbstractAppendingLongBuffer$Iterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer$Iterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer$Iterator, hasNext, METH_NOARGS),
            DECLARE_METHOD(t_AbstractAppendingLongBuffer$Iterator, next, METH_NOARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AbstractAppendingLongBuffer$Iterator, t_AbstractAppendingLongBuffer$Iterator, ::java::lang::Object, AbstractAppendingLongBuffer$Iterator, abstract_init, 0, 0, 0, 0, 0);

          void t_AbstractAppendingLongBuffer$Iterator::install(PyObject *module)
          {
            installType(&PY_TYPE(AbstractAppendingLongBuffer$Iterator), module, "AbstractAppendingLongBuffer$Iterator", 0);
          }

          void t_AbstractAppendingLongBuffer$Iterator::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer$Iterator).tp_dict, "class_", make_descriptor(AbstractAppendingLongBuffer$Iterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer$Iterator).tp_dict, "wrapfn_", make_descriptor(t_AbstractAppendingLongBuffer$Iterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractAppendingLongBuffer$Iterator).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AbstractAppendingLongBuffer$Iterator_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AbstractAppendingLongBuffer$Iterator::initializeClass, 1)))
              return NULL;
            return t_AbstractAppendingLongBuffer$Iterator::wrap_Object(AbstractAppendingLongBuffer$Iterator(((t_AbstractAppendingLongBuffer$Iterator *) arg)->object.this$));
          }
          static PyObject *t_AbstractAppendingLongBuffer$Iterator_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AbstractAppendingLongBuffer$Iterator::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_AbstractAppendingLongBuffer$Iterator_hasNext(t_AbstractAppendingLongBuffer$Iterator *self)
          {
            jboolean result;
            OBJ_CALL(result = self->object.hasNext());
            Py_RETURN_BOOL(result);
          }

          static PyObject *t_AbstractAppendingLongBuffer$Iterator_next(t_AbstractAppendingLongBuffer$Iterator *self)
          {
            jlong result;
            OBJ_CALL(result = self->object.next());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/analysis/sinks/TokenTypeSinkFilter.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/AttributeSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {

          ::java::lang::Class *TokenTypeSinkFilter::class$ = NULL;
          jmethodID *TokenTypeSinkFilter::mids$ = NULL;
          bool TokenTypeSinkFilter::live$ = false;

          jclass TokenTypeSinkFilter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/analysis/sinks/TokenTypeSinkFilter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
              mids$[mid_accept_aea2d6e6] = env->getMethodID(cls, "accept", "(Lorg/apache/lucene/util/AttributeSource;)Z");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          TokenTypeSinkFilter::TokenTypeSinkFilter(const ::java::lang::String & a0) : ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

          jboolean TokenTypeSinkFilter::accept(const ::org::apache::lucene::util::AttributeSource & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_accept_aea2d6e6], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace analysis {
        namespace sinks {
          static PyObject *t_TokenTypeSinkFilter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_TokenTypeSinkFilter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_TokenTypeSinkFilter_init_(t_TokenTypeSinkFilter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_TokenTypeSinkFilter_accept(t_TokenTypeSinkFilter *self, PyObject *args);

          static PyMethodDef t_TokenTypeSinkFilter__methods_[] = {
            DECLARE_METHOD(t_TokenTypeSinkFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenTypeSinkFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_TokenTypeSinkFilter, accept, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(TokenTypeSinkFilter, t_TokenTypeSinkFilter, ::org::apache::lucene::analysis::sinks::TeeSinkTokenFilter$SinkFilter, TokenTypeSinkFilter, t_TokenTypeSinkFilter_init_, 0, 0, 0, 0, 0);

          void t_TokenTypeSinkFilter::install(PyObject *module)
          {
            installType(&PY_TYPE(TokenTypeSinkFilter), module, "TokenTypeSinkFilter", 0);
          }

          void t_TokenTypeSinkFilter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(TokenTypeSinkFilter).tp_dict, "class_", make_descriptor(TokenTypeSinkFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(TokenTypeSinkFilter).tp_dict, "wrapfn_", make_descriptor(t_TokenTypeSinkFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(TokenTypeSinkFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_TokenTypeSinkFilter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, TokenTypeSinkFilter::initializeClass, 1)))
              return NULL;
            return t_TokenTypeSinkFilter::wrap_Object(TokenTypeSinkFilter(((t_TokenTypeSinkFilter *) arg)->object.this$));
          }
          static PyObject *t_TokenTypeSinkFilter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, TokenTypeSinkFilter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_TokenTypeSinkFilter_init_(t_TokenTypeSinkFilter *self, PyObject *args, PyObject *kwds)
          {
            ::java::lang::String a0((jobject) NULL);
            TokenTypeSinkFilter object((jobject) NULL);

            if (!parseArgs(args, "s", &a0))
            {
              INT_CALL(object = TokenTypeSinkFilter(a0));
              self->object = object;
            }
            else
            {
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_TokenTypeSinkFilter_accept(t_TokenTypeSinkFilter *self, PyObject *args)
          {
            ::org::apache::lucene::util::AttributeSource a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "k", ::org::apache::lucene::util::AttributeSource::initializeClass, &a0))
            {
              OBJ_CALL(result = self->object.accept(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(TokenTypeSinkFilter), (PyObject *) self, "accept", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/TopTermsRewrite.h"
#include "org/apache/lucene/search/Query.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/MultiTermQuery.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *TopTermsRewrite::class$ = NULL;
        jmethodID *TopTermsRewrite::mids$ = NULL;
        bool TopTermsRewrite::live$ = false;

        jclass TopTermsRewrite::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/TopTermsRewrite");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_rewrite_925c5bbc] = env->getMethodID(cls, "rewrite", "(Lorg/apache/lucene/index/IndexReader;Lorg/apache/lucene/search/MultiTermQuery;)Lorg/apache/lucene/search/Query;");
            mids$[mid_getMaxSize_54c6a179] = env->getMethodID(cls, "getMaxSize", "()I");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        TopTermsRewrite::TopTermsRewrite(jint a0) : ::org::apache::lucene::search::TermCollectingRewrite(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        jboolean TopTermsRewrite::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint TopTermsRewrite::getSize() const
        {
          return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
        }

        jint TopTermsRewrite::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::org::apache::lucene::search::Query TopTermsRewrite::rewrite(const ::org::apache::lucene::index::IndexReader & a0, const ::org::apache::lucene::search::MultiTermQuery & a1) const
        {
          return ::org::apache::lucene::search::Query(env->callObjectMethod(this$, mids$[mid_rewrite_925c5bbc], a0.this$, a1.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_TopTermsRewrite_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopTermsRewrite_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_TopTermsRewrite_of_(t_TopTermsRewrite *self, PyObject *args);
        static int t_TopTermsRewrite_init_(t_TopTermsRewrite *self, PyObject *args, PyObject *kwds);
        static PyObject *t_TopTermsRewrite_equals(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_getSize(t_TopTermsRewrite *self);
        static PyObject *t_TopTermsRewrite_hashCode(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_rewrite(t_TopTermsRewrite *self, PyObject *args);
        static PyObject *t_TopTermsRewrite_get__size(t_TopTermsRewrite *self, void *data);
        static PyObject *t_TopTermsRewrite_get__parameters_(t_TopTermsRewrite *self, void *data);
        static PyGetSetDef t_TopTermsRewrite__fields_[] = {
          DECLARE_GET_FIELD(t_TopTermsRewrite, size),
          DECLARE_GET_FIELD(t_TopTermsRewrite, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_TopTermsRewrite__methods_[] = {
          DECLARE_METHOD(t_TopTermsRewrite, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopTermsRewrite, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_TopTermsRewrite, of_, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, equals, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, getSize, METH_NOARGS),
          DECLARE_METHOD(t_TopTermsRewrite, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_TopTermsRewrite, rewrite, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(TopTermsRewrite, t_TopTermsRewrite, ::org::apache::lucene::search::TermCollectingRewrite, TopTermsRewrite, t_TopTermsRewrite_init_, 0, 0, t_TopTermsRewrite__fields_, 0, 0);
        PyObject *t_TopTermsRewrite::wrap_Object(const TopTermsRewrite& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopTermsRewrite::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopTermsRewrite *self = (t_TopTermsRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_TopTermsRewrite::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_TopTermsRewrite::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_TopTermsRewrite *self = (t_TopTermsRewrite *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_TopTermsRewrite::install(PyObject *module)
        {
          installType(&PY_TYPE(TopTermsRewrite), module, "TopTermsRewrite", 0);
        }

        void t_TopTermsRewrite::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(TopTermsRewrite).tp_dict, "class_", make_descriptor(TopTermsRewrite::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(TopTermsRewrite).tp_dict, "wrapfn_", make_descriptor(t_TopTermsRewrite::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(TopTermsRewrite).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_TopTermsRewrite_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, TopTermsRewrite::initializeClass, 1)))
            return NULL;
          return t_TopTermsRewrite::wrap_Object(TopTermsRewrite(((t_TopTermsRewrite *) arg)->object.this$));
        }
        static PyObject *t_TopTermsRewrite_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, TopTermsRewrite::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_TopTermsRewrite_of_(t_TopTermsRewrite *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_TopTermsRewrite_init_(t_TopTermsRewrite *self, PyObject *args, PyObject *kwds)
        {
          jint a0;
          TopTermsRewrite object((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            INT_CALL(object = TopTermsRewrite(a0));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_TopTermsRewrite_equals(t_TopTermsRewrite *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(TopTermsRewrite), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_TopTermsRewrite_getSize(t_TopTermsRewrite *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getSize());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_TopTermsRewrite_hashCode(t_TopTermsRewrite *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(TopTermsRewrite), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_TopTermsRewrite_rewrite(t_TopTermsRewrite *self, PyObject *args)
        {
          ::org::apache::lucene::index::IndexReader a0((jobject) NULL);
          ::org::apache::lucene::search::MultiTermQuery a1((jobject) NULL);
          ::org::apache::lucene::search::Query result((jobject) NULL);

          if (!parseArgs(args, "kk", ::org::apache::lucene::index::IndexReader::initializeClass, ::org::apache::lucene::search::MultiTermQuery::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.rewrite(a0, a1));
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::org::apache::lucene::search::t_Query::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(TopTermsRewrite), (PyObject *) self, "rewrite", args, 2);
        }
        static PyObject *t_TopTermsRewrite_get__parameters_(t_TopTermsRewrite *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_TopTermsRewrite_get__size(t_TopTermsRewrite *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getSize());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/DocValues.h"
#include "org/apache/lucene/index/SortedDocValues.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/BinaryDocValues.h"
#include "org/apache/lucene/index/SortedSetDocValues.h"
#include "org/apache/lucene/index/NumericDocValues.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/SortedNumericDocValues.h"
#include "org/apache/lucene/util/Bits.h"
#include "org/apache/lucene/index/AtomicReader.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *DocValues::class$ = NULL;
        jmethodID *DocValues::mids$ = NULL;
        bool DocValues::live$ = false;

        jclass DocValues::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/DocValues");

            mids$ = new jmethodID[max_mid];
            mids$[mid_docsWithValue_6932366e] = env->getStaticMethodID(cls, "docsWithValue", "(Lorg/apache/lucene/index/SortedDocValues;I)Lorg/apache/lucene/util/Bits;");
            mids$[mid_docsWithValue_c7ef87d6] = env->getStaticMethodID(cls, "docsWithValue", "(Lorg/apache/lucene/index/SortedNumericDocValues;I)Lorg/apache/lucene/util/Bits;");
            mids$[mid_docsWithValue_f9286ac1] = env->getStaticMethodID(cls, "docsWithValue", "(Lorg/apache/lucene/index/SortedSetDocValues;I)Lorg/apache/lucene/util/Bits;");
            mids$[mid_emptyBinary_56a19500] = env->getStaticMethodID(cls, "emptyBinary", "()Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_emptyNumeric_729438c3] = env->getStaticMethodID(cls, "emptyNumeric", "()Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_emptySorted_57832734] = env->getStaticMethodID(cls, "emptySorted", "()Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_emptySortedNumeric_68ec8b8c] = env->getStaticMethodID(cls, "emptySortedNumeric", "()Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_emptySortedSet_4bead171] = env->getStaticMethodID(cls, "emptySortedSet", "()Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_getBinary_d197d479] = env->getStaticMethodID(cls, "getBinary", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/BinaryDocValues;");
            mids$[mid_getDocsWithField_b8ffc438] = env->getStaticMethodID(cls, "getDocsWithField", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/util/Bits;");
            mids$[mid_getNumeric_abcbf8b8] = env->getStaticMethodID(cls, "getNumeric", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_getSorted_e27a1341] = env->getStaticMethodID(cls, "getSorted", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_getSortedNumeric_593e885b] = env->getStaticMethodID(cls, "getSortedNumeric", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_getSortedSet_1498712e] = env->getStaticMethodID(cls, "getSortedSet", "(Lorg/apache/lucene/index/AtomicReader;Ljava/lang/String;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_singleton_9fed6638] = env->getStaticMethodID(cls, "singleton", "(Lorg/apache/lucene/index/SortedDocValues;)Lorg/apache/lucene/index/SortedSetDocValues;");
            mids$[mid_singleton_082bce56] = env->getStaticMethodID(cls, "singleton", "(Lorg/apache/lucene/index/NumericDocValues;Lorg/apache/lucene/util/Bits;)Lorg/apache/lucene/index/SortedNumericDocValues;");
            mids$[mid_unwrapSingleton_c9f185f6] = env->getStaticMethodID(cls, "unwrapSingleton", "(Lorg/apache/lucene/index/SortedSetDocValues;)Lorg/apache/lucene/index/SortedDocValues;");
            mids$[mid_unwrapSingleton_66807036] = env->getStaticMethodID(cls, "unwrapSingleton", "(Lorg/apache/lucene/index/SortedNumericDocValues;)Lorg/apache/lucene/index/NumericDocValues;");
            mids$[mid_unwrapSingletonBits_aa3508ee] = env->getStaticMethodID(cls, "unwrapSingletonBits", "(Lorg/apache/lucene/index/SortedNumericDocValues;)Lorg/apache/lucene/util/Bits;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        ::org::apache::lucene::util::Bits DocValues::docsWithValue(const ::org::apache::lucene::index::SortedDocValues & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_docsWithValue_6932366e], a0.this$, a1));
        }

        ::org::apache::lucene::util::Bits DocValues::docsWithValue(const ::org::apache::lucene::index::SortedNumericDocValues & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_docsWithValue_c7ef87d6], a0.this$, a1));
        }

        ::org::apache::lucene::util::Bits DocValues::docsWithValue(const ::org::apache::lucene::index::SortedSetDocValues & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_docsWithValue_f9286ac1], a0.this$, a1));
        }

        ::org::apache::lucene::index::BinaryDocValues DocValues::emptyBinary()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptyBinary_56a19500]));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::emptyNumeric()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptyNumeric_729438c3]));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::emptySorted()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptySorted_57832734]));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::emptySortedNumeric()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptySortedNumeric_68ec8b8c]));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValues::emptySortedSet()
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_emptySortedSet_4bead171]));
        }

        ::org::apache::lucene::index::BinaryDocValues DocValues::getBinary(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::BinaryDocValues(env->callStaticObjectMethod(cls, mids$[mid_getBinary_d197d479], a0.this$, a1.this$));
        }

        ::org::apache::lucene::util::Bits DocValues::getDocsWithField(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_getDocsWithField_b8ffc438], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::getNumeric(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getNumeric_abcbf8b8], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::getSorted(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSorted_e27a1341], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::getSortedNumeric(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedNumeric_593e885b], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValues::getSortedSet(const ::org::apache::lucene::index::AtomicReader & a0, const ::java::lang::String & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_getSortedSet_1498712e], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedSetDocValues DocValues::singleton(const ::org::apache::lucene::index::SortedDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedSetDocValues(env->callStaticObjectMethod(cls, mids$[mid_singleton_9fed6638], a0.this$));
        }

        ::org::apache::lucene::index::SortedNumericDocValues DocValues::singleton(const ::org::apache::lucene::index::NumericDocValues & a0, const ::org::apache::lucene::util::Bits & a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedNumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_singleton_082bce56], a0.this$, a1.this$));
        }

        ::org::apache::lucene::index::SortedDocValues DocValues::unwrapSingleton(const ::org::apache::lucene::index::SortedSetDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::SortedDocValues(env->callStaticObjectMethod(cls, mids$[mid_unwrapSingleton_c9f185f6], a0.this$));
        }

        ::org::apache::lucene::index::NumericDocValues DocValues::unwrapSingleton(const ::org::apache::lucene::index::SortedNumericDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::NumericDocValues(env->callStaticObjectMethod(cls, mids$[mid_unwrapSingleton_66807036], a0.this$));
        }

        ::org::apache::lucene::util::Bits DocValues::unwrapSingletonBits(const ::org::apache::lucene::index::SortedNumericDocValues & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::util::Bits(env->callStaticObjectMethod(cls, mids$[mid_unwrapSingletonBits_aa3508ee], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_DocValues_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValues_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_DocValues_docsWithValue(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_emptyBinary(PyTypeObject *type);
        static PyObject *t_DocValues_emptyNumeric(PyTypeObject *type);
        static PyObject *t_DocValues_emptySorted(PyTypeObject *type);
        static PyObject *t_DocValues_emptySortedNumeric(PyTypeObject *type);
        static PyObject *t_DocValues_emptySortedSet(PyTypeObject *type);
        static PyObject *t_DocValues_getBinary(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getDocsWithField(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getNumeric(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSorted(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSortedNumeric(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_getSortedSet(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_singleton(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_unwrapSingleton(PyTypeObject *type, PyObject *args);
        static PyObject *t_DocValues_unwrapSingletonBits(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_DocValues__methods_[] = {
          DECLARE_METHOD(t_DocValues, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValues, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_DocValues, docsWithValue, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptyBinary, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptyNumeric, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySorted, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySortedNumeric, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, emptySortedSet, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getBinary, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getDocsWithField, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getNumeric, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSorted, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSortedNumeric, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, getSortedSet, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, singleton, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, unwrapSingleton, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_DocValues, unwrapSingletonBits, METH_O | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(DocValues, t_DocValues, ::java::lang::Object, DocValues, abstract_init, 0, 0, 0, 0, 0);

        void t_DocValues::install(PyObject *module)
        {
          installType(&PY_TYPE(DocValues), module, "DocValues", 0);
        }

        void t_DocValues::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(DocValues).tp_dict, "class_", make_descriptor(DocValues::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(DocValues).tp_dict, "wrapfn_", make_descriptor(t_DocValues::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(DocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_DocValues_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, DocValues::initializeClass, 1)))
            return NULL;
          return t_DocValues::wrap_Object(DocValues(((t_DocValues *) arg)->object.this$));
        }
        static PyObject *t_DocValues_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, DocValues::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_DocValues_docsWithValue(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 2:
            {
              ::org::apache::lucene::index::SortedDocValues a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::Bits result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::SortedDocValues::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::docsWithValue(a0, a1));
                return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::Bits result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::docsWithValue(a0, a1));
                return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::SortedSetDocValues a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::util::Bits result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::docsWithValue(a0, a1));
                return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "docsWithValue", args);
          return NULL;
        }

        static PyObject *t_DocValues_emptyBinary(PyTypeObject *type)
        {
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptyBinary());
          return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptyNumeric(PyTypeObject *type)
        {
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptyNumeric());
          return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptySorted(PyTypeObject *type)
        {
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySorted());
          return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptySortedNumeric(PyTypeObject *type)
        {
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySortedNumeric());
          return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_emptySortedSet(PyTypeObject *type)
        {
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::index::DocValues::emptySortedSet());
          return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
        }

        static PyObject *t_DocValues_getBinary(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::BinaryDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getBinary(a0, a1));
            return ::org::apache::lucene::index::t_BinaryDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getBinary", args);
          return NULL;
        }

        static PyObject *t_DocValues_getDocsWithField(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getDocsWithField(a0, a1));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getDocsWithField", args);
          return NULL;
        }

        static PyObject *t_DocValues_getNumeric(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getNumeric(a0, a1));
            return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getNumeric", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSorted(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSorted(a0, a1));
            return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSorted", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSortedNumeric(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSortedNumeric(a0, a1));
            return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedNumeric", args);
          return NULL;
        }

        static PyObject *t_DocValues_getSortedSet(PyTypeObject *type, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReader a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

          if (!parseArgs(args, "ks", ::org::apache::lucene::index::AtomicReader::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::getSortedSet(a0, a1));
            return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "getSortedSet", args);
          return NULL;
        }

        static PyObject *t_DocValues_singleton(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::SortedDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::SortedSetDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::singleton(a0));
                return ::org::apache::lucene::index::t_SortedSetDocValues::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::index::NumericDocValues a0((jobject) NULL);
              ::org::apache::lucene::util::Bits a1((jobject) NULL);
              ::org::apache::lucene::index::SortedNumericDocValues result((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::index::NumericDocValues::initializeClass, ::org::apache::lucene::util::Bits::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::singleton(a0, a1));
                return ::org::apache::lucene::index::t_SortedNumericDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "singleton", args);
          return NULL;
        }

        static PyObject *t_DocValues_unwrapSingleton(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::SortedSetDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::SortedDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedSetDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::unwrapSingleton(a0));
                return ::org::apache::lucene::index::t_SortedDocValues::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
              ::org::apache::lucene::index::NumericDocValues result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::DocValues::unwrapSingleton(a0));
                return ::org::apache::lucene::index::t_NumericDocValues::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "unwrapSingleton", args);
          return NULL;
        }

        static PyObject *t_DocValues_unwrapSingletonBits(PyTypeObject *type, PyObject *arg)
        {
          ::org::apache::lucene::index::SortedNumericDocValues a0((jobject) NULL);
          ::org::apache::lucene::util::Bits result((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::SortedNumericDocValues::initializeClass, &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::index::DocValues::unwrapSingletonBits(a0));
            return ::org::apache::lucene::util::t_Bits::wrap_Object(result);
          }

          PyErr_SetArgsError(type, "unwrapSingletonBits", arg);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/automaton/MinimizationOperations.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/util/automaton/Automaton.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {

          ::java::lang::Class *MinimizationOperations::class$ = NULL;
          jmethodID *MinimizationOperations::mids$ = NULL;
          bool MinimizationOperations::live$ = false;

          jclass MinimizationOperations::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/automaton/MinimizationOperations");

              mids$ = new jmethodID[max_mid];
              mids$[mid_minimize_fc7cf394] = env->getStaticMethodID(cls, "minimize", "(Lorg/apache/lucene/util/automaton/Automaton;)V");
              mids$[mid_minimizeHopcroft_fc7cf394] = env->getStaticMethodID(cls, "minimizeHopcroft", "(Lorg/apache/lucene/util/automaton/Automaton;)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          void MinimizationOperations::minimize(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_minimize_fc7cf394], a0.this$);
          }

          void MinimizationOperations::minimizeHopcroft(const ::org::apache::lucene::util::automaton::Automaton & a0)
          {
            jclass cls = env->getClass(initializeClass);
            env->callStaticVoidMethod(cls, mids$[mid_minimizeHopcroft_fc7cf394], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace automaton {
          static PyObject *t_MinimizationOperations_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinimizationOperations_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinimizationOperations_minimize(PyTypeObject *type, PyObject *arg);
          static PyObject *t_MinimizationOperations_minimizeHopcroft(PyTypeObject *type, PyObject *arg);

          static PyMethodDef t_MinimizationOperations__methods_[] = {
            DECLARE_METHOD(t_MinimizationOperations, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinimizationOperations, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinimizationOperations, minimize, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MinimizationOperations, minimizeHopcroft, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(MinimizationOperations, t_MinimizationOperations, ::java::lang::Object, MinimizationOperations, abstract_init, 0, 0, 0, 0, 0);

          void t_MinimizationOperations::install(PyObject *module)
          {
            installType(&PY_TYPE(MinimizationOperations), module, "MinimizationOperations", 0);
          }

          void t_MinimizationOperations::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(MinimizationOperations).tp_dict, "class_", make_descriptor(MinimizationOperations::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MinimizationOperations).tp_dict, "wrapfn_", make_descriptor(t_MinimizationOperations::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MinimizationOperations).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_MinimizationOperations_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, MinimizationOperations::initializeClass, 1)))
              return NULL;
            return t_MinimizationOperations::wrap_Object(MinimizationOperations(((t_MinimizationOperations *) arg)->object.this$));
          }
          static PyObject *t_MinimizationOperations_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, MinimizationOperations::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_MinimizationOperations_minimize(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::MinimizationOperations::minimize(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "minimize", arg);
            return NULL;
          }

          static PyObject *t_MinimizationOperations_minimizeHopcroft(PyTypeObject *type, PyObject *arg)
          {
            ::org::apache::lucene::util::automaton::Automaton a0((jobject) NULL);

            if (!parseArg(arg, "k", ::org::apache::lucene::util::automaton::Automaton::initializeClass, &a0))
            {
              OBJ_CALL(::org::apache::lucene::util::automaton::MinimizationOperations::minimizeHopcroft(a0));
              Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "minimizeHopcroft", arg);
            return NULL;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/NoLockFactory.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Lock.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *NoLockFactory::class$ = NULL;
        jmethodID *NoLockFactory::mids$ = NULL;
        bool NoLockFactory::live$ = false;

        jclass NoLockFactory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/NoLockFactory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_clearLock_5fdc3f48] = env->getMethodID(cls, "clearLock", "(Ljava/lang/String;)V");
            mids$[mid_getNoLockFactory_a2b6ff3e] = env->getStaticMethodID(cls, "getNoLockFactory", "()Lorg/apache/lucene/store/NoLockFactory;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void NoLockFactory::clearLock(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_clearLock_5fdc3f48], a0.this$);
        }

        NoLockFactory NoLockFactory::getNoLockFactory()
        {
          jclass cls = env->getClass(initializeClass);
          return NoLockFactory(env->callStaticObjectMethod(cls, mids$[mid_getNoLockFactory_a2b6ff3e]));
        }

        ::org::apache::lucene::store::Lock NoLockFactory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_NoLockFactory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoLockFactory_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NoLockFactory_clearLock(t_NoLockFactory *self, PyObject *args);
        static PyObject *t_NoLockFactory_getNoLockFactory(PyTypeObject *type);
        static PyObject *t_NoLockFactory_makeLock(t_NoLockFactory *self, PyObject *args);
        static PyObject *t_NoLockFactory_get__noLockFactory(t_NoLockFactory *self, void *data);
        static PyGetSetDef t_NoLockFactory__fields_[] = {
          DECLARE_GET_FIELD(t_NoLockFactory, noLockFactory),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_NoLockFactory__methods_[] = {
          DECLARE_METHOD(t_NoLockFactory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoLockFactory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_NoLockFactory, clearLock, METH_VARARGS),
          DECLARE_METHOD(t_NoLockFactory, getNoLockFactory, METH_NOARGS | METH_CLASS),
          DECLARE_METHOD(t_NoLockFactory, makeLock, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NoLockFactory, t_NoLockFactory, ::org::apache::lucene::store::LockFactory, NoLockFactory, abstract_init, 0, 0, t_NoLockFactory__fields_, 0, 0);

        void t_NoLockFactory::install(PyObject *module)
        {
          installType(&PY_TYPE(NoLockFactory), module, "NoLockFactory", 0);
        }

        void t_NoLockFactory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(NoLockFactory).tp_dict, "class_", make_descriptor(NoLockFactory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(NoLockFactory).tp_dict, "wrapfn_", make_descriptor(t_NoLockFactory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(NoLockFactory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NoLockFactory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, NoLockFactory::initializeClass, 1)))
            return NULL;
          return t_NoLockFactory::wrap_Object(NoLockFactory(((t_NoLockFactory *) arg)->object.this$));
        }
        static PyObject *t_NoLockFactory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, NoLockFactory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_NoLockFactory_clearLock(t_NoLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.clearLock(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(NoLockFactory), (PyObject *) self, "clearLock", args, 2);
        }

        static PyObject *t_NoLockFactory_getNoLockFactory(PyTypeObject *type)
        {
          NoLockFactory result((jobject) NULL);
          OBJ_CALL(result = ::org::apache::lucene::store::NoLockFactory::getNoLockFactory());
          return t_NoLockFactory::wrap_Object(result);
        }

        static PyObject *t_NoLockFactory_makeLock(t_NoLockFactory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(NoLockFactory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_NoLockFactory_get__noLockFactory(t_NoLockFactory *self, void *data)
        {
          NoLockFactory value((jobject) NULL);
          OBJ_CALL(value = self->object.getNoLockFactory());
          return t_NoLockFactory::wrap_Object(value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/IntBlockPool$DirectAllocator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *IntBlockPool$DirectAllocator::class$ = NULL;
        jmethodID *IntBlockPool$DirectAllocator::mids$ = NULL;
        bool IntBlockPool$DirectAllocator::live$ = false;

        jclass IntBlockPool$DirectAllocator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/IntBlockPool$DirectAllocator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
            mids$[mid_recycleIntBlocks_9f62f13c] = env->getMethodID(cls, "recycleIntBlocks", "([[III)V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        IntBlockPool$DirectAllocator::IntBlockPool$DirectAllocator() : ::org::apache::lucene::util::IntBlockPool$Allocator(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void IntBlockPool$DirectAllocator::recycleIntBlocks(const JArray< JArray< jint > > & a0, jint a1, jint a2) const
        {
          env->callVoidMethod(this$, mids$[mid_recycleIntBlocks_9f62f13c], a0.this$, a1, a2);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_IntBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IntBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IntBlockPool$DirectAllocator_init_(t_IntBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds);
        static PyObject *t_IntBlockPool$DirectAllocator_recycleIntBlocks(t_IntBlockPool$DirectAllocator *self, PyObject *args);

        static PyMethodDef t_IntBlockPool$DirectAllocator__methods_[] = {
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IntBlockPool$DirectAllocator, recycleIntBlocks, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IntBlockPool$DirectAllocator, t_IntBlockPool$DirectAllocator, ::org::apache::lucene::util::IntBlockPool$Allocator, IntBlockPool$DirectAllocator, t_IntBlockPool$DirectAllocator_init_, 0, 0, 0, 0, 0);

        void t_IntBlockPool$DirectAllocator::install(PyObject *module)
        {
          installType(&PY_TYPE(IntBlockPool$DirectAllocator), module, "IntBlockPool$DirectAllocator", 0);
        }

        void t_IntBlockPool$DirectAllocator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IntBlockPool$DirectAllocator).tp_dict, "class_", make_descriptor(IntBlockPool$DirectAllocator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$DirectAllocator).tp_dict, "wrapfn_", make_descriptor(t_IntBlockPool$DirectAllocator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IntBlockPool$DirectAllocator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IntBlockPool$DirectAllocator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IntBlockPool$DirectAllocator::initializeClass, 1)))
            return NULL;
          return t_IntBlockPool$DirectAllocator::wrap_Object(IntBlockPool$DirectAllocator(((t_IntBlockPool$DirectAllocator *) arg)->object.this$));
        }
        static PyObject *t_IntBlockPool$DirectAllocator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IntBlockPool$DirectAllocator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_IntBlockPool$DirectAllocator_init_(t_IntBlockPool$DirectAllocator *self, PyObject *args, PyObject *kwds)
        {
          IntBlockPool$DirectAllocator object((jobject) NULL);

          INT_CALL(object = IntBlockPool$DirectAllocator());
          self->object = object;

          return 0;
        }

        static PyObject *t_IntBlockPool$DirectAllocator_recycleIntBlocks(t_IntBlockPool$DirectAllocator *self, PyObject *args)
        {
          JArray< JArray< jint > > a0((jobject) NULL);
          jint a1;
          jint a2;

          if (!parseArgs(args, "[[III", &a0, &a1, &a2))
          {
            OBJ_CALL(self->object.recycleIntBlocks(a0, a1, a2));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(IntBlockPool$DirectAllocator), (PyObject *) self, "recycleIntBlocks", args, 2);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/NormalizationZ.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *NormalizationZ::class$ = NULL;
          jmethodID *NormalizationZ::mids$ = NULL;
          bool NormalizationZ::live$ = false;

          jclass NormalizationZ::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/NormalizationZ");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
              mids$[mid_getZ_54c6a176] = env->getMethodID(cls, "getZ", "()F");
              mids$[mid_tfn_63482206] = env->getMethodID(cls, "tfn", "(Lorg/apache/lucene/search/similarities/BasicStats;FF)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          NormalizationZ::NormalizationZ() : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          NormalizationZ::NormalizationZ(jfloat a0) : ::org::apache::lucene::search::similarities::Normalization(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

          jfloat NormalizationZ::getZ() const
          {
            return env->callFloatMethod(this$, mids$[mid_getZ_54c6a176]);
          }

          jfloat NormalizationZ::tfn(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1, jfloat a2) const
          {
            return env->callFloatMethod(this$, mids$[mid_tfn_63482206], a0.this$, a1, a2);
          }

          ::java::lang::String NormalizationZ::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_NormalizationZ_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_NormalizationZ_instance_(PyTypeObject *type, PyObject *arg);
          static int t_NormalizationZ_init_(t_NormalizationZ *self, PyObject *args, PyObject *kwds);
          static PyObject *t_NormalizationZ_getZ(t_NormalizationZ *self);
          static PyObject *t_NormalizationZ_tfn(t_NormalizationZ *self, PyObject *args);
          static PyObject *t_NormalizationZ_toString(t_NormalizationZ *self, PyObject *args);
          static PyObject *t_NormalizationZ_get__z(t_NormalizationZ *self, void *data);
          static PyGetSetDef t_NormalizationZ__fields_[] = {
            DECLARE_GET_FIELD(t_NormalizationZ, z),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_NormalizationZ__methods_[] = {
            DECLARE_METHOD(t_NormalizationZ, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationZ, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NormalizationZ, getZ, METH_NOARGS),
            DECLARE_METHOD(t_NormalizationZ, tfn, METH_VARARGS),
            DECLARE_METHOD(t_NormalizationZ, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(NormalizationZ, t_NormalizationZ, ::org::apache::lucene::search::similarities::Normalization, NormalizationZ, t_NormalizationZ_init_, 0, 0, t_NormalizationZ__fields_, 0, 0);

          void t_NormalizationZ::install(PyObject *module)
          {
            installType(&PY_TYPE(NormalizationZ), module, "NormalizationZ", 0);
          }

          void t_NormalizationZ::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(NormalizationZ).tp_dict, "class_", make_descriptor(NormalizationZ::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NormalizationZ).tp_dict, "wrapfn_", make_descriptor(t_NormalizationZ::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NormalizationZ).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_NormalizationZ_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, NormalizationZ::initializeClass, 1)))
              return NULL;
            return t_NormalizationZ::wrap_Object(NormalizationZ(((t_NormalizationZ *) arg)->object.this$));
          }
          static PyObject *t_NormalizationZ_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, NormalizationZ::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_NormalizationZ_init_(t_NormalizationZ *self, PyObject *args, PyObject *kwds)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                NormalizationZ object((jobject) NULL);

                INT_CALL(object = NormalizationZ());
                self->object = object;
                break;
              }
              goto err;
             case 1:
              {
                jfloat a0;
                NormalizationZ object((jobject) NULL);

                if (!parseArgs(args, "F", &a0))
                {
                  INT_CALL(object = NormalizationZ(a0));
                  self->object = object;
                  break;
                }
              }
             default:
             err:
              PyErr_SetArgsError((PyObject *) self, "__init__", args);
              return -1;
            }

            return 0;
          }

          static PyObject *t_NormalizationZ_getZ(t_NormalizationZ *self)
          {
            jfloat result;
            OBJ_CALL(result = self->object.getZ());
            return PyFloat_FromDouble((double) result);
          }

          static PyObject *t_NormalizationZ_tfn(t_NormalizationZ *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat a2;
            jfloat result;

            if (!parseArgs(args, "kFF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1, &a2))
            {
              OBJ_CALL(result = self->object.tfn(a0, a1, a2));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(NormalizationZ), (PyObject *) self, "tfn", args, 2);
          }

          static PyObject *t_NormalizationZ_toString(t_NormalizationZ *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(NormalizationZ), (PyObject *) self, "toString", args, 2);
          }

          static PyObject *t_NormalizationZ_get__z(t_NormalizationZ *self, void *data)
          {
            jfloat value;
            OBJ_CALL(value = self->object.getZ());
            return PyFloat_FromDouble((double) value);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.h"
#include "org/apache/lucene/queryparser/flexible/standard/parser/ParseException.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type.h"
#include "java/util/Locale.h"
#include "org/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax.h"
#include "java/lang/CharSequence.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {

              ::java::lang::Class *EscapeQuerySyntaxImpl::class$ = NULL;
              jmethodID *EscapeQuerySyntaxImpl::mids$ = NULL;
              bool EscapeQuerySyntaxImpl::live$ = false;

              jclass EscapeQuerySyntaxImpl::initializeClass(bool getOnly)
              {
                if (getOnly)
                  return (jclass) (live$ ? class$->this$ : NULL);
                if (class$ == NULL)
                {
                  jclass cls = (jclass) env->findClass("org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl");

                  mids$ = new jmethodID[max_mid];
                  mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                  mids$[mid_discardEscapeChar_31714ed7] = env->getStaticMethodID(cls, "discardEscapeChar", "(Ljava/lang/CharSequence;)Lorg/apache/lucene/queryparser/flexible/core/util/UnescapedCharSequence;");
                  mids$[mid_escape_dd58ce7f] = env->getMethodID(cls, "escape", "(Ljava/lang/CharSequence;Ljava/util/Locale;Lorg/apache/lucene/queryparser/flexible/core/parser/EscapeQuerySyntax$Type;)Ljava/lang/CharSequence;");

                  class$ = (::java::lang::Class *) new JObject(cls);
                  live$ = true;
                }
                return (jclass) class$->this$;
              }

              EscapeQuerySyntaxImpl::EscapeQuerySyntaxImpl() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

              ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence EscapeQuerySyntaxImpl::discardEscapeChar(const ::java::lang::CharSequence & a0)
              {
                jclass cls = env->getClass(initializeClass);
                return ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence(env->callStaticObjectMethod(cls, mids$[mid_discardEscapeChar_31714ed7], a0.this$));
              }

              ::java::lang::CharSequence EscapeQuerySyntaxImpl::escape(const ::java::lang::CharSequence & a0, const ::java::util::Locale & a1, const ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type & a2) const
              {
                return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_escape_dd58ce7f], a0.this$, a1.this$, a2.this$));
              }
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queryparser {
        namespace flexible {
          namespace standard {
            namespace parser {
              static PyObject *t_EscapeQuerySyntaxImpl_cast_(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntaxImpl_instance_(PyTypeObject *type, PyObject *arg);
              static int t_EscapeQuerySyntaxImpl_init_(t_EscapeQuerySyntaxImpl *self, PyObject *args, PyObject *kwds);
              static PyObject *t_EscapeQuerySyntaxImpl_discardEscapeChar(PyTypeObject *type, PyObject *arg);
              static PyObject *t_EscapeQuerySyntaxImpl_escape(t_EscapeQuerySyntaxImpl *self, PyObject *args);

              static PyMethodDef t_EscapeQuerySyntaxImpl__methods_[] = {
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, cast_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, instance_, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, discardEscapeChar, METH_O | METH_CLASS),
                DECLARE_METHOD(t_EscapeQuerySyntaxImpl, escape, METH_VARARGS),
                { NULL, NULL, 0, NULL }
              };

              DECLARE_TYPE(EscapeQuerySyntaxImpl, t_EscapeQuerySyntaxImpl, ::java::lang::Object, EscapeQuerySyntaxImpl, t_EscapeQuerySyntaxImpl_init_, 0, 0, 0, 0, 0);

              void t_EscapeQuerySyntaxImpl::install(PyObject *module)
              {
                installType(&PY_TYPE(EscapeQuerySyntaxImpl), module, "EscapeQuerySyntaxImpl", 0);
              }

              void t_EscapeQuerySyntaxImpl::initialize(PyObject *module)
              {
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntaxImpl).tp_dict, "class_", make_descriptor(EscapeQuerySyntaxImpl::initializeClass, 1));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntaxImpl).tp_dict, "wrapfn_", make_descriptor(t_EscapeQuerySyntaxImpl::wrap_jobject));
                PyDict_SetItemString(PY_TYPE(EscapeQuerySyntaxImpl).tp_dict, "boxfn_", make_descriptor(boxObject));
              }

              static PyObject *t_EscapeQuerySyntaxImpl_cast_(PyTypeObject *type, PyObject *arg)
              {
                if (!(arg = castCheck(arg, EscapeQuerySyntaxImpl::initializeClass, 1)))
                  return NULL;
                return t_EscapeQuerySyntaxImpl::wrap_Object(EscapeQuerySyntaxImpl(((t_EscapeQuerySyntaxImpl *) arg)->object.this$));
              }
              static PyObject *t_EscapeQuerySyntaxImpl_instance_(PyTypeObject *type, PyObject *arg)
              {
                if (!castCheck(arg, EscapeQuerySyntaxImpl::initializeClass, 0))
                  Py_RETURN_FALSE;
                Py_RETURN_TRUE;
              }

              static int t_EscapeQuerySyntaxImpl_init_(t_EscapeQuerySyntaxImpl *self, PyObject *args, PyObject *kwds)
              {
                EscapeQuerySyntaxImpl object((jobject) NULL);

                INT_CALL(object = EscapeQuerySyntaxImpl());
                self->object = object;

                return 0;
              }

              static PyObject *t_EscapeQuerySyntaxImpl_discardEscapeChar(PyTypeObject *type, PyObject *arg)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::util::UnescapedCharSequence result((jobject) NULL);

                if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                {
                  OBJ_CALL(result = ::org::apache::lucene::queryparser::flexible::standard::parser::EscapeQuerySyntaxImpl::discardEscapeChar(a0));
                  return ::org::apache::lucene::queryparser::flexible::core::util::t_UnescapedCharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError(type, "discardEscapeChar", arg);
                return NULL;
              }

              static PyObject *t_EscapeQuerySyntaxImpl_escape(t_EscapeQuerySyntaxImpl *self, PyObject *args)
              {
                ::java::lang::CharSequence a0((jobject) NULL);
                ::java::util::Locale a1((jobject) NULL);
                ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type a2((jobject) NULL);
                PyTypeObject **p2;
                ::java::lang::CharSequence result((jobject) NULL);

                if (!parseArgs(args, "OkK", &::java::lang::PY_TYPE(CharSequence), ::java::util::Locale::initializeClass, ::org::apache::lucene::queryparser::flexible::core::parser::EscapeQuerySyntax$Type::initializeClass, &a0, &a1, &a2, &p2, ::org::apache::lucene::queryparser::flexible::core::parser::t_EscapeQuerySyntax$Type::parameters_))
                {
                  OBJ_CALL(result = self->object.escape(a0, a1, a2));
                  return ::java::lang::t_CharSequence::wrap_Object(result);
                }

                PyErr_SetArgsError((PyObject *) self, "escape", args);
                return NULL;
              }
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/suggest/tst/TSTAutocomplete.h"
#include "java/util/ArrayList.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/suggest/tst/TernaryTreeNode.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {

            ::java::lang::Class *TSTAutocomplete::class$ = NULL;
            jmethodID *TSTAutocomplete::mids$ = NULL;
            bool TSTAutocomplete::live$ = false;

            jclass TSTAutocomplete::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/search/suggest/tst/TSTAutocomplete");

                mids$ = new jmethodID[max_mid];
                mids$[mid_balancedTree_d0572c03] = env->getMethodID(cls, "balancedTree", "([Ljava/lang/Object;[Ljava/lang/Object;IILorg/apache/lucene/search/suggest/tst/TernaryTreeNode;)V");
                mids$[mid_insert_05696b9d] = env->getMethodID(cls, "insert", "(Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;Ljava/lang/CharSequence;Ljava/lang/Object;I)Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;");
                mids$[mid_prefixCompletion_d5365801] = env->getMethodID(cls, "prefixCompletion", "(Lorg/apache/lucene/search/suggest/tst/TernaryTreeNode;Ljava/lang/CharSequence;I)Ljava/util/ArrayList;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            void TSTAutocomplete::balancedTree(const JArray< ::java::lang::Object > & a0, const JArray< ::java::lang::Object > & a1, jint a2, jint a3, const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a4) const
            {
              env->callVoidMethod(this$, mids$[mid_balancedTree_d0572c03], a0.this$, a1.this$, a2, a3, a4.this$);
            }

            ::org::apache::lucene::search::suggest::tst::TernaryTreeNode TSTAutocomplete::insert(const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a0, const ::java::lang::CharSequence & a1, const ::java::lang::Object & a2, jint a3) const
            {
              return ::org::apache::lucene::search::suggest::tst::TernaryTreeNode(env->callObjectMethod(this$, mids$[mid_insert_05696b9d], a0.this$, a1.this$, a2.this$, a3));
            }

            ::java::util::ArrayList TSTAutocomplete::prefixCompletion(const ::org::apache::lucene::search::suggest::tst::TernaryTreeNode & a0, const ::java::lang::CharSequence & a1, jint a2) const
            {
              return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_prefixCompletion_d5365801], a0.this$, a1.this$, a2));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace suggest {
          namespace tst {
            static PyObject *t_TSTAutocomplete_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTAutocomplete_instance_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_TSTAutocomplete_balancedTree(t_TSTAutocomplete *self, PyObject *args);
            static PyObject *t_TSTAutocomplete_insert(t_TSTAutocomplete *self, PyObject *args);
            static PyObject *t_TSTAutocomplete_prefixCompletion(t_TSTAutocomplete *self, PyObject *args);

            static PyMethodDef t_TSTAutocomplete__methods_[] = {
              DECLARE_METHOD(t_TSTAutocomplete, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTAutocomplete, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_TSTAutocomplete, balancedTree, METH_VARARGS),
              DECLARE_METHOD(t_TSTAutocomplete, insert, METH_VARARGS),
              DECLARE_METHOD(t_TSTAutocomplete, prefixCompletion, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(TSTAutocomplete, t_TSTAutocomplete, ::java::lang::Object, TSTAutocomplete, abstract_init, 0, 0, 0, 0, 0);

            void t_TSTAutocomplete::install(PyObject *module)
            {
              installType(&PY_TYPE(TSTAutocomplete), module, "TSTAutocomplete", 0);
            }

            void t_TSTAutocomplete::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(TSTAutocomplete).tp_dict, "class_", make_descriptor(TSTAutocomplete::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(TSTAutocomplete).tp_dict, "wrapfn_", make_descriptor(t_TSTAutocomplete::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(TSTAutocomplete).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_TSTAutocomplete_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, TSTAutocomplete::initializeClass, 1)))
                return NULL;
              return t_TSTAutocomplete::wrap_Object(TSTAutocomplete(((t_TSTAutocomplete *) arg)->object.this$));
            }
            static PyObject *t_TSTAutocomplete_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, TSTAutocomplete::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static PyObject *t_TSTAutocomplete_balancedTree(t_TSTAutocomplete *self, PyObject *args)
            {
              JArray< ::java::lang::Object > a0((jobject) NULL);
              JArray< ::java::lang::Object > a1((jobject) NULL);
              jint a2;
              jint a3;
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a4((jobject) NULL);

              if (!parseArgs(args, "[o[oIIk", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, &a0, &a1, &a2, &a3, &a4))
              {
                OBJ_CALL(self->object.balancedTree(a0, a1, a2, a3, a4));
                Py_RETURN_NONE;
              }

              PyErr_SetArgsError((PyObject *) self, "balancedTree", args);
              return NULL;
            }

            static PyObject *t_TSTAutocomplete_insert(t_TSTAutocomplete *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a0((jobject) NULL);
              ::java::lang::CharSequence a1((jobject) NULL);
              ::java::lang::Object a2((jobject) NULL);
              jint a3;
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode result((jobject) NULL);

              if (!parseArgs(args, "kOoI", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
              {
                OBJ_CALL(result = self->object.insert(a0, a1, a2, a3));
                return ::org::apache::lucene::search::suggest::tst::t_TernaryTreeNode::wrap_Object(result);
              }

              PyErr_SetArgsError((PyObject *) self, "insert", args);
              return NULL;
            }

            static PyObject *t_TSTAutocomplete_prefixCompletion(t_TSTAutocomplete *self, PyObject *args)
            {
              ::org::apache::lucene::search::suggest::tst::TernaryTreeNode a0((jobject) NULL);
              ::java::lang::CharSequence a1((jobject) NULL);
              jint a2;
              ::java::util::ArrayList result((jobject) NULL);

              if (!parseArgs(args, "kOI", ::org::apache::lucene::search::suggest::tst::TernaryTreeNode::initializeClass, &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
              {
                OBJ_CALL(result = self->object.prefixCompletion(a0, a1, a2));
                return ::java::util::t_ArrayList::wrap_Object(result, &::org::apache::lucene::search::suggest::tst::PY_TYPE(TernaryTreeNode));
              }

              PyErr_SetArgsError((PyObject *) self, "prefixCompletion", args);
              return NULL;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/index/IndexReader.h"
#include "org/apache/lucene/index/IndexReaderContext.h"
#include "java/util/Set.h"
#include "org/apache/lucene/index/DirectoryReader.h"
#include "org/apache/lucene/index/IndexWriter.h"
#include "org/apache/lucene/index/Terms.h"
#include "java/util/List.h"
#include "org/apache/lucene/index/Fields.h"
#include "java/lang/String.h"
#include "org/apache/lucene/index/Term.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/index/StoredFieldVisitor.h"
#include "org/apache/lucene/index/IndexCommit.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/io/Closeable.h"
#include "org/apache/lucene/index/IndexReader$ReaderClosedListener.h"
#include "org/apache/lucene/document/Document.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {

        ::java::lang::Class *IndexReader::class$ = NULL;
        jmethodID *IndexReader::mids$ = NULL;
        bool IndexReader::live$ = false;

        jclass IndexReader::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/index/IndexReader");

            mids$ = new jmethodID[max_mid];
            mids$[mid_addReaderClosedListener_60172ded] = env->getMethodID(cls, "addReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader$ReaderClosedListener;)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_decRef_54c6a166] = env->getMethodID(cls, "decRef", "()V");
            mids$[mid_docFreq_7eca6a9e] = env->getMethodID(cls, "docFreq", "(Lorg/apache/lucene/index/Term;)I");
            mids$[mid_document_9c2cfcf9] = env->getMethodID(cls, "document", "(I)Lorg/apache/lucene/document/Document;");
            mids$[mid_document_f65cb155] = env->getMethodID(cls, "document", "(ILjava/util/Set;)Lorg/apache/lucene/document/Document;");
            mids$[mid_document_a2ea3ebe] = env->getMethodID(cls, "document", "(ILorg/apache/lucene/index/StoredFieldVisitor;)V");
            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
            mids$[mid_getCombinedCoreAndDeletesKey_846352c3] = env->getMethodID(cls, "getCombinedCoreAndDeletesKey", "()Ljava/lang/Object;");
            mids$[mid_getContext_5823c99a] = env->getMethodID(cls, "getContext", "()Lorg/apache/lucene/index/IndexReaderContext;");
            mids$[mid_getCoreCacheKey_846352c3] = env->getMethodID(cls, "getCoreCacheKey", "()Ljava/lang/Object;");
            mids$[mid_getDocCount_5fdc3f57] = env->getMethodID(cls, "getDocCount", "(Ljava/lang/String;)I");
            mids$[mid_getRefCount_54c6a179] = env->getMethodID(cls, "getRefCount", "()I");
            mids$[mid_getSumDocFreq_5fdc3f54] = env->getMethodID(cls, "getSumDocFreq", "(Ljava/lang/String;)J");
            mids$[mid_getSumTotalTermFreq_5fdc3f54] = env->getMethodID(cls, "getSumTotalTermFreq", "(Ljava/lang/String;)J");
            mids$[mid_getTermVector_ffaa1be2] = env->getMethodID(cls, "getTermVector", "(ILjava/lang/String;)Lorg/apache/lucene/index/Terms;");
            mids$[mid_getTermVectors_ef1c9c73] = env->getMethodID(cls, "getTermVectors", "(I)Lorg/apache/lucene/index/Fields;");
            mids$[mid_hasDeletions_54c6a16a] = env->getMethodID(cls, "hasDeletions", "()Z");
            mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
            mids$[mid_incRef_54c6a166] = env->getMethodID(cls, "incRef", "()V");
            mids$[mid_leaves_87851566] = env->getMethodID(cls, "leaves", "()Ljava/util/List;");
            mids$[mid_maxDoc_54c6a179] = env->getMethodID(cls, "maxDoc", "()I");
            mids$[mid_numDeletedDocs_54c6a179] = env->getMethodID(cls, "numDeletedDocs", "()I");
            mids$[mid_numDocs_54c6a179] = env->getMethodID(cls, "numDocs", "()I");
            mids$[mid_open_26fd6272] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_109b8ac7] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_d7b74111] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/store/Directory;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_13bade12] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexCommit;I)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_open_e4ee522b] = env->getStaticMethodID(cls, "open", "(Lorg/apache/lucene/index/IndexWriter;Z)Lorg/apache/lucene/index/DirectoryReader;");
            mids$[mid_registerParentReader_7d7eaea9] = env->getMethodID(cls, "registerParentReader", "(Lorg/apache/lucene/index/IndexReader;)V");
            mids$[mid_removeReaderClosedListener_60172ded] = env->getMethodID(cls, "removeReaderClosedListener", "(Lorg/apache/lucene/index/IndexReader$ReaderClosedListener;)V");
            mids$[mid_totalTermFreq_7eca6a9d] = env->getMethodID(cls, "totalTermFreq", "(Lorg/apache/lucene/index/Term;)J");
            mids$[mid_tryIncRef_54c6a16a] = env->getMethodID(cls, "tryIncRef", "()Z");
            mids$[mid_ensureOpen_54c6a166] = env->getMethodID(cls, "ensureOpen", "()V");
            mids$[mid_doClose_54c6a166] = env->getMethodID(cls, "doClose", "()V");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        void IndexReader::addReaderClosedListener(const ::org::apache::lucene::index::IndexReader$ReaderClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_addReaderClosedListener_60172ded], a0.this$);
        }

        void IndexReader::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void IndexReader::decRef() const
        {
          env->callVoidMethod(this$, mids$[mid_decRef_54c6a166]);
        }

        jint IndexReader::docFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_docFreq_7eca6a9e], a0.this$);
        }

        ::org::apache::lucene::document::Document IndexReader::document(jint a0) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_document_9c2cfcf9], a0));
        }

        ::org::apache::lucene::document::Document IndexReader::document(jint a0, const ::java::util::Set & a1) const
        {
          return ::org::apache::lucene::document::Document(env->callObjectMethod(this$, mids$[mid_document_f65cb155], a0, a1.this$));
        }

        void IndexReader::document(jint a0, const ::org::apache::lucene::index::StoredFieldVisitor & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_document_a2ea3ebe], a0, a1.this$);
        }

        jboolean IndexReader::equals(const ::java::lang::Object & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Object IndexReader::getCombinedCoreAndDeletesKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCombinedCoreAndDeletesKey_846352c3]));
        }

        ::org::apache::lucene::index::IndexReaderContext IndexReader::getContext() const
        {
          return ::org::apache::lucene::index::IndexReaderContext(env->callObjectMethod(this$, mids$[mid_getContext_5823c99a]));
        }

        ::java::lang::Object IndexReader::getCoreCacheKey() const
        {
          return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getCoreCacheKey_846352c3]));
        }

        jint IndexReader::getDocCount(const ::java::lang::String & a0) const
        {
          return env->callIntMethod(this$, mids$[mid_getDocCount_5fdc3f57], a0.this$);
        }

        jint IndexReader::getRefCount() const
        {
          return env->callIntMethod(this$, mids$[mid_getRefCount_54c6a179]);
        }

        jlong IndexReader::getSumDocFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumDocFreq_5fdc3f54], a0.this$);
        }

        jlong IndexReader::getSumTotalTermFreq(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_getSumTotalTermFreq_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::index::Terms IndexReader::getTermVector(jint a0, const ::java::lang::String & a1) const
        {
          return ::org::apache::lucene::index::Terms(env->callObjectMethod(this$, mids$[mid_getTermVector_ffaa1be2], a0, a1.this$));
        }

        ::org::apache::lucene::index::Fields IndexReader::getTermVectors(jint a0) const
        {
          return ::org::apache::lucene::index::Fields(env->callObjectMethod(this$, mids$[mid_getTermVectors_ef1c9c73], a0));
        }

        jboolean IndexReader::hasDeletions() const
        {
          return env->callBooleanMethod(this$, mids$[mid_hasDeletions_54c6a16a]);
        }

        jint IndexReader::hashCode() const
        {
          return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void IndexReader::incRef() const
        {
          env->callVoidMethod(this$, mids$[mid_incRef_54c6a166]);
        }

        ::java::util::List IndexReader::leaves() const
        {
          return ::java::util::List(env->callObjectMethod(this$, mids$[mid_leaves_87851566]));
        }

        jint IndexReader::maxDoc() const
        {
          return env->callIntMethod(this$, mids$[mid_maxDoc_54c6a179]);
        }

        jint IndexReader::numDeletedDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDeletedDocs_54c6a179]);
        }

        jint IndexReader::numDocs() const
        {
          return env->callIntMethod(this$, mids$[mid_numDocs_54c6a179]);
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::index::IndexCommit & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_26fd6272], a0.this$));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::store::Directory & a0)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_109b8ac7], a0.this$));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::store::Directory & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_d7b74111], a0.this$, a1));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::index::IndexCommit & a0, jint a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_13bade12], a0.this$, a1));
        }

        ::org::apache::lucene::index::DirectoryReader IndexReader::open(const ::org::apache::lucene::index::IndexWriter & a0, jboolean a1)
        {
          jclass cls = env->getClass(initializeClass);
          return ::org::apache::lucene::index::DirectoryReader(env->callStaticObjectMethod(cls, mids$[mid_open_e4ee522b], a0.this$, a1));
        }

        void IndexReader::registerParentReader(const IndexReader & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_registerParentReader_7d7eaea9], a0.this$);
        }

        void IndexReader::removeReaderClosedListener(const ::org::apache::lucene::index::IndexReader$ReaderClosedListener & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_removeReaderClosedListener_60172ded], a0.this$);
        }

        jlong IndexReader::totalTermFreq(const ::org::apache::lucene::index::Term & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_totalTermFreq_7eca6a9d], a0.this$);
        }

        jboolean IndexReader::tryIncRef() const
        {
          return env->callBooleanMethod(this$, mids$[mid_tryIncRef_54c6a16a]);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace index {
        static PyObject *t_IndexReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IndexReader_addReaderClosedListener(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_close(t_IndexReader *self);
        static PyObject *t_IndexReader_decRef(t_IndexReader *self);
        static PyObject *t_IndexReader_docFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_document(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_equals(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_getCombinedCoreAndDeletesKey(t_IndexReader *self);
        static PyObject *t_IndexReader_getContext(t_IndexReader *self);
        static PyObject *t_IndexReader_getCoreCacheKey(t_IndexReader *self);
        static PyObject *t_IndexReader_getDocCount(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getRefCount(t_IndexReader *self);
        static PyObject *t_IndexReader_getSumDocFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getSumTotalTermFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_getTermVector(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_getTermVectors(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_hasDeletions(t_IndexReader *self);
        static PyObject *t_IndexReader_hashCode(t_IndexReader *self, PyObject *args);
        static PyObject *t_IndexReader_incRef(t_IndexReader *self);
        static PyObject *t_IndexReader_leaves(t_IndexReader *self);
        static PyObject *t_IndexReader_maxDoc(t_IndexReader *self);
        static PyObject *t_IndexReader_numDeletedDocs(t_IndexReader *self);
        static PyObject *t_IndexReader_numDocs(t_IndexReader *self);
        static PyObject *t_IndexReader_open(PyTypeObject *type, PyObject *args);
        static PyObject *t_IndexReader_registerParentReader(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_removeReaderClosedListener(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_totalTermFreq(t_IndexReader *self, PyObject *arg);
        static PyObject *t_IndexReader_tryIncRef(t_IndexReader *self);
        static PyObject *t_IndexReader_get__combinedCoreAndDeletesKey(t_IndexReader *self, void *data);
        static PyObject *t_IndexReader_get__context(t_IndexReader *self, void *data);
        static PyObject *t_IndexReader_get__coreCacheKey(t_IndexReader *self, void *data);
        static PyObject *t_IndexReader_get__refCount(t_IndexReader *self, void *data);
        static PyGetSetDef t_IndexReader__fields_[] = {
          DECLARE_GET_FIELD(t_IndexReader, combinedCoreAndDeletesKey),
          DECLARE_GET_FIELD(t_IndexReader, context),
          DECLARE_GET_FIELD(t_IndexReader, coreCacheKey),
          DECLARE_GET_FIELD(t_IndexReader, refCount),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_IndexReader__methods_[] = {
          DECLARE_METHOD(t_IndexReader, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_IndexReader, addReaderClosedListener, METH_O),
          DECLARE_METHOD(t_IndexReader, close, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, decRef, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, docFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, document, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, equals, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, getCombinedCoreAndDeletesKey, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getContext, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getCoreCacheKey, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getDocCount, METH_O),
          DECLARE_METHOD(t_IndexReader, getRefCount, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, getSumDocFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, getSumTotalTermFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, getTermVector, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, getTermVectors, METH_O),
          DECLARE_METHOD(t_IndexReader, hasDeletions, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, hashCode, METH_VARARGS),
          DECLARE_METHOD(t_IndexReader, incRef, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, leaves, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, maxDoc, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, numDeletedDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, numDocs, METH_NOARGS),
          DECLARE_METHOD(t_IndexReader, open, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_IndexReader, registerParentReader, METH_O),
          DECLARE_METHOD(t_IndexReader, removeReaderClosedListener, METH_O),
          DECLARE_METHOD(t_IndexReader, totalTermFreq, METH_O),
          DECLARE_METHOD(t_IndexReader, tryIncRef, METH_NOARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IndexReader, t_IndexReader, ::java::lang::Object, IndexReader, abstract_init, 0, 0, t_IndexReader__fields_, 0, 0);

        void t_IndexReader::install(PyObject *module)
        {
          installType(&PY_TYPE(IndexReader), module, "IndexReader", 0);
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "ReaderClosedListener", make_descriptor(&PY_TYPE(IndexReader$ReaderClosedListener)));
        }

        void t_IndexReader::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "class_", make_descriptor(IndexReader::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "wrapfn_", make_descriptor(t_IndexReader::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(IndexReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IndexReader_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, IndexReader::initializeClass, 1)))
            return NULL;
          return t_IndexReader::wrap_Object(IndexReader(((t_IndexReader *) arg)->object.this$));
        }
        static PyObject *t_IndexReader_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, IndexReader::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_IndexReader_addReaderClosedListener(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader$ReaderClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader$ReaderClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.addReaderClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "addReaderClosedListener", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_close(t_IndexReader *self)
        {
          OBJ_CALL(self->object.close());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_decRef(t_IndexReader *self)
        {
          OBJ_CALL(self->object.decRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_docFreq(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.docFreq(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "docFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_document(t_IndexReader *self, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.document(a0));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              jint a0;
              ::java::util::Set a1((jobject) NULL);
              PyTypeObject **p1;
              ::org::apache::lucene::document::Document result((jobject) NULL);

              if (!parseArgs(args, "IK", ::java::util::Set::initializeClass, &a0, &a1, &p1, ::java::util::t_Set::parameters_))
              {
                OBJ_CALL(result = self->object.document(a0, a1));
                return ::org::apache::lucene::document::t_Document::wrap_Object(result);
              }
            }
            {
              jint a0;
              ::org::apache::lucene::index::StoredFieldVisitor a1((jobject) NULL);

              if (!parseArgs(args, "Ik", ::org::apache::lucene::index::StoredFieldVisitor::initializeClass, &a0, &a1))
              {
                OBJ_CALL(self->object.document(a0, a1));
                Py_RETURN_NONE;
              }
            }
          }

          PyErr_SetArgsError((PyObject *) self, "document", args);
          return NULL;
        }

        static PyObject *t_IndexReader_equals(t_IndexReader *self, PyObject *args)
        {
          ::java::lang::Object a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "o", &a0))
          {
            OBJ_CALL(result = self->object.equals(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(IndexReader), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_IndexReader_getCombinedCoreAndDeletesKey(t_IndexReader *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_IndexReader_getContext(t_IndexReader *self)
        {
          ::org::apache::lucene::index::IndexReaderContext result((jobject) NULL);
          OBJ_CALL(result = self->object.getContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(result);
        }

        static PyObject *t_IndexReader_getCoreCacheKey(t_IndexReader *self)
        {
          ::java::lang::Object result((jobject) NULL);
          OBJ_CALL(result = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_IndexReader_getDocCount(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jint result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getDocCount(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getDocCount", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getRefCount(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.getRefCount());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_getSumDocFreq(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumDocFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSumDocFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getSumTotalTermFreq(t_IndexReader *self, PyObject *arg)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "s", &a0))
          {
            OBJ_CALL(result = self->object.getSumTotalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "getSumTotalTermFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_getTermVector(t_IndexReader *self, PyObject *args)
        {
          jint a0;
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::index::Terms result((jobject) NULL);

          if (!parseArgs(args, "Is", &a0, &a1))
          {
            OBJ_CALL(result = self->object.getTermVector(a0, a1));
            return ::org::apache::lucene::index::t_Terms::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTermVector", args);
          return NULL;
        }

        static PyObject *t_IndexReader_getTermVectors(t_IndexReader *self, PyObject *arg)
        {
          jint a0;
          ::org::apache::lucene::index::Fields result((jobject) NULL);

          if (!parseArg(arg, "I", &a0))
          {
            OBJ_CALL(result = self->object.getTermVectors(a0));
            return ::org::apache::lucene::index::t_Fields::wrap_Object(result);
          }

          PyErr_SetArgsError((PyObject *) self, "getTermVectors", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_hasDeletions(t_IndexReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.hasDeletions());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexReader_hashCode(t_IndexReader *self, PyObject *args)
        {
          jint result;

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(IndexReader), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_IndexReader_incRef(t_IndexReader *self)
        {
          OBJ_CALL(self->object.incRef());
          Py_RETURN_NONE;
        }

        static PyObject *t_IndexReader_leaves(t_IndexReader *self)
        {
          ::java::util::List result((jobject) NULL);
          OBJ_CALL(result = self->object.leaves());
          return ::java::util::t_List::wrap_Object(result, &::org::apache::lucene::index::PY_TYPE(AtomicReaderContext));
        }

        static PyObject *t_IndexReader_maxDoc(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.maxDoc());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_numDeletedDocs(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDeletedDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_numDocs(t_IndexReader *self)
        {
          jint result;
          OBJ_CALL(result = self->object.numDocs());
          return PyInt_FromLong((long) result);
        }

        static PyObject *t_IndexReader_open(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::store::Directory::initializeClass, &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            break;
           case 2:
            {
              ::org::apache::lucene::store::Directory a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::store::Directory::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0, a1));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexCommit a0((jobject) NULL);
              jint a1;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kI", ::org::apache::lucene::index::IndexCommit::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0, a1));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
            {
              ::org::apache::lucene::index::IndexWriter a0((jobject) NULL);
              jboolean a1;
              ::org::apache::lucene::index::DirectoryReader result((jobject) NULL);

              if (!parseArgs(args, "kZ", ::org::apache::lucene::index::IndexWriter::initializeClass, &a0, &a1))
              {
                OBJ_CALL(result = ::org::apache::lucene::index::IndexReader::open(a0, a1));
                return ::org::apache::lucene::index::t_DirectoryReader::wrap_Object(result);
              }
            }
          }

          PyErr_SetArgsError(type, "open", args);
          return NULL;
        }

        static PyObject *t_IndexReader_registerParentReader(t_IndexReader *self, PyObject *arg)
        {
          IndexReader a0((jobject) NULL);

          if (!parseArg(arg, "k", IndexReader::initializeClass, &a0))
          {
            OBJ_CALL(self->object.registerParentReader(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "registerParentReader", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_removeReaderClosedListener(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::IndexReader$ReaderClosedListener a0((jobject) NULL);

          if (!parseArg(arg, "k", ::org::apache::lucene::index::IndexReader$ReaderClosedListener::initializeClass, &a0))
          {
            OBJ_CALL(self->object.removeReaderClosedListener(a0));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "removeReaderClosedListener", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_totalTermFreq(t_IndexReader *self, PyObject *arg)
        {
          ::org::apache::lucene::index::Term a0((jobject) NULL);
          jlong result;

          if (!parseArg(arg, "k", ::org::apache::lucene::index::Term::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.totalTermFreq(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError((PyObject *) self, "totalTermFreq", arg);
          return NULL;
        }

        static PyObject *t_IndexReader_tryIncRef(t_IndexReader *self)
        {
          jboolean result;
          OBJ_CALL(result = self->object.tryIncRef());
          Py_RETURN_BOOL(result);
        }

        static PyObject *t_IndexReader_get__combinedCoreAndDeletesKey(t_IndexReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCombinedCoreAndDeletesKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_IndexReader_get__context(t_IndexReader *self, void *data)
        {
          ::org::apache::lucene::index::IndexReaderContext value((jobject) NULL);
          OBJ_CALL(value = self->object.getContext());
          return ::org::apache::lucene::index::t_IndexReaderContext::wrap_Object(value);
        }

        static PyObject *t_IndexReader_get__coreCacheKey(t_IndexReader *self, void *data)
        {
          ::java::lang::Object value((jobject) NULL);
          OBJ_CALL(value = self->object.getCoreCacheKey());
          return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_IndexReader_get__refCount(t_IndexReader *self, void *data)
        {
          jint value;
          OBJ_CALL(value = self->object.getRefCount());
          return PyInt_FromLong((long) value);
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/similarities/AfterEffectB.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/Explanation.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/similarities/BasicStats.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {

          ::java::lang::Class *AfterEffectB::class$ = NULL;
          jmethodID *AfterEffectB::mids$ = NULL;
          bool AfterEffectB::live$ = false;

          jclass AfterEffectB::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/similarities/AfterEffectB");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_explain_05d4946a] = env->getMethodID(cls, "explain", "(Lorg/apache/lucene/search/similarities/BasicStats;F)Lorg/apache/lucene/search/Explanation;");
              mids$[mid_score_076760a9] = env->getMethodID(cls, "score", "(Lorg/apache/lucene/search/similarities/BasicStats;F)F");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          AfterEffectB::AfterEffectB() : ::org::apache::lucene::search::similarities::AfterEffect(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          ::org::apache::lucene::search::Explanation AfterEffectB::explain(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return ::org::apache::lucene::search::Explanation(env->callObjectMethod(this$, mids$[mid_explain_05d4946a], a0.this$, a1));
          }

          jfloat AfterEffectB::score(const ::org::apache::lucene::search::similarities::BasicStats & a0, jfloat a1) const
          {
            return env->callFloatMethod(this$, mids$[mid_score_076760a9], a0.this$, a1);
          }

          ::java::lang::String AfterEffectB::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace similarities {
          static PyObject *t_AfterEffectB_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_AfterEffectB_instance_(PyTypeObject *type, PyObject *arg);
          static int t_AfterEffectB_init_(t_AfterEffectB *self, PyObject *args, PyObject *kwds);
          static PyObject *t_AfterEffectB_explain(t_AfterEffectB *self, PyObject *args);
          static PyObject *t_AfterEffectB_score(t_AfterEffectB *self, PyObject *args);
          static PyObject *t_AfterEffectB_toString(t_AfterEffectB *self, PyObject *args);

          static PyMethodDef t_AfterEffectB__methods_[] = {
            DECLARE_METHOD(t_AfterEffectB, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectB, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AfterEffectB, explain, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectB, score, METH_VARARGS),
            DECLARE_METHOD(t_AfterEffectB, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(AfterEffectB, t_AfterEffectB, ::org::apache::lucene::search::similarities::AfterEffect, AfterEffectB, t_AfterEffectB_init_, 0, 0, 0, 0, 0);

          void t_AfterEffectB::install(PyObject *module)
          {
            installType(&PY_TYPE(AfterEffectB), module, "AfterEffectB", 0);
          }

          void t_AfterEffectB::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(AfterEffectB).tp_dict, "class_", make_descriptor(AfterEffectB::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AfterEffectB).tp_dict, "wrapfn_", make_descriptor(t_AfterEffectB::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AfterEffectB).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_AfterEffectB_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, AfterEffectB::initializeClass, 1)))
              return NULL;
            return t_AfterEffectB::wrap_Object(AfterEffectB(((t_AfterEffectB *) arg)->object.this$));
          }
          static PyObject *t_AfterEffectB_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, AfterEffectB::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_AfterEffectB_init_(t_AfterEffectB *self, PyObject *args, PyObject *kwds)
          {
            AfterEffectB object((jobject) NULL);

            INT_CALL(object = AfterEffectB());
            self->object = object;

            return 0;
          }

          static PyObject *t_AfterEffectB_explain(t_AfterEffectB *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            ::org::apache::lucene::search::Explanation result((jobject) NULL);

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.explain(a0, a1));
              return ::org::apache::lucene::search::t_Explanation::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(AfterEffectB), (PyObject *) self, "explain", args, 2);
          }

          static PyObject *t_AfterEffectB_score(t_AfterEffectB *self, PyObject *args)
          {
            ::org::apache::lucene::search::similarities::BasicStats a0((jobject) NULL);
            jfloat a1;
            jfloat result;

            if (!parseArgs(args, "kF", ::org::apache::lucene::search::similarities::BasicStats::initializeClass, &a0, &a1))
            {
              OBJ_CALL(result = self->object.score(a0, a1));
              return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(AfterEffectB), (PyObject *) self, "score", args, 2);
          }

          static PyObject *t_AfterEffectB_toString(t_AfterEffectB *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(AfterEffectB), (PyObject *) self, "toString", args, 2);
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/valuesource/PowFloatFunction.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {

            ::java::lang::Class *PowFloatFunction::class$ = NULL;
            jmethodID *PowFloatFunction::mids$ = NULL;
            bool PowFloatFunction::live$ = false;

            jclass PowFloatFunction::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/valuesource/PowFloatFunction");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_74aa307e] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_func_3711414a] = env->getMethodID(cls, "func", "(ILorg/apache/lucene/queries/function/FunctionValues;Lorg/apache/lucene/queries/function/FunctionValues;)F");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            PowFloatFunction::PowFloatFunction(const ::org::apache::lucene::queries::function::ValueSource & a0, const ::org::apache::lucene::queries::function::ValueSource & a1) : ::org::apache::lucene::queries::function::valuesource::DualFloatFunction(env->newObject(initializeClass, &mids$, mid_init$_74aa307e, a0.this$, a1.this$)) {}
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace valuesource {
            static PyObject *t_PowFloatFunction_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_PowFloatFunction_instance_(PyTypeObject *type, PyObject *arg);
            static int t_PowFloatFunction_init_(t_PowFloatFunction *self, PyObject *args, PyObject *kwds);

            static PyMethodDef t_PowFloatFunction__methods_[] = {
              DECLARE_METHOD(t_PowFloatFunction, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_PowFloatFunction, instance_, METH_O | METH_CLASS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(PowFloatFunction, t_PowFloatFunction, ::org::apache::lucene::queries::function::valuesource::DualFloatFunction, PowFloatFunction, t_PowFloatFunction_init_, 0, 0, 0, 0, 0);

            void t_PowFloatFunction::install(PyObject *module)
            {
              installType(&PY_TYPE(PowFloatFunction), module, "PowFloatFunction", 0);
            }

            void t_PowFloatFunction::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(PowFloatFunction).tp_dict, "class_", make_descriptor(PowFloatFunction::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(PowFloatFunction).tp_dict, "wrapfn_", make_descriptor(t_PowFloatFunction::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(PowFloatFunction).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_PowFloatFunction_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, PowFloatFunction::initializeClass, 1)))
                return NULL;
              return t_PowFloatFunction::wrap_Object(PowFloatFunction(((t_PowFloatFunction *) arg)->object.this$));
            }
            static PyObject *t_PowFloatFunction_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, PowFloatFunction::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_PowFloatFunction_init_(t_PowFloatFunction *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              ::org::apache::lucene::queries::function::ValueSource a1((jobject) NULL);
              PowFloatFunction object((jobject) NULL);

              if (!parseArgs(args, "kk", ::org::apache::lucene::queries::function::ValueSource::initializeClass, ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0, &a1))
              {
                INT_CALL(object = PowFloatFunction(a0, a1));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/grouping/SearchGroup.h"
#include "java/util/Collection.h"
#include "java/io/IOException.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/Sort.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {

          ::java::lang::Class *SearchGroup::class$ = NULL;
          jmethodID *SearchGroup::mids$ = NULL;
          jfieldID *SearchGroup::fids$ = NULL;
          bool SearchGroup::live$ = false;

          jclass SearchGroup::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/search/grouping/SearchGroup");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
              mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
              mids$[mid_merge_8879ded5] = env->getStaticMethodID(cls, "merge", "(Ljava/util/List;IILorg/apache/lucene/search/Sort;)Ljava/util/Collection;");
              mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

              fids$ = new jfieldID[max_fid];
              fids$[fid_groupValue] = env->getFieldID(cls, "groupValue", "Ljava/lang/Object;");
              fids$[fid_sortValues] = env->getFieldID(cls, "sortValues", "[Ljava/lang/Object;");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          SearchGroup::SearchGroup() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          jboolean SearchGroup::equals(const ::java::lang::Object & a0) const
          {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
          }

          jint SearchGroup::hashCode() const
          {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
          }

          ::java::util::Collection SearchGroup::merge(const ::java::util::List & a0, jint a1, jint a2, const ::org::apache::lucene::search::Sort & a3)
          {
            jclass cls = env->getClass(initializeClass);
            return ::java::util::Collection(env->callStaticObjectMethod(cls, mids$[mid_merge_8879ded5], a0.this$, a1, a2, a3.this$));
          }

          ::java::lang::String SearchGroup::toString() const
          {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
          }

          ::java::lang::Object SearchGroup::_get_groupValue() const
          {
            return ::java::lang::Object(env->getObjectField(this$, fids$[fid_groupValue]));
          }

          void SearchGroup::_set_groupValue(const ::java::lang::Object & a0) const
          {
            env->setObjectField(this$, fids$[fid_groupValue], a0.this$);
          }

          JArray< ::java::lang::Object > SearchGroup::_get_sortValues() const
          {
            return JArray< ::java::lang::Object >(env->getObjectField(this$, fids$[fid_sortValues]));
          }

          void SearchGroup::_set_sortValues(const JArray< ::java::lang::Object > & a0) const
          {
            env->setObjectField(this$, fids$[fid_sortValues], a0.this$);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        namespace grouping {
          static PyObject *t_SearchGroup_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearchGroup_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_SearchGroup_of_(t_SearchGroup *self, PyObject *args);
          static int t_SearchGroup_init_(t_SearchGroup *self, PyObject *args, PyObject *kwds);
          static PyObject *t_SearchGroup_equals(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_hashCode(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_merge(PyTypeObject *type, PyObject *args);
          static PyObject *t_SearchGroup_toString(t_SearchGroup *self, PyObject *args);
          static PyObject *t_SearchGroup_get__groupValue(t_SearchGroup *self, void *data);
          static int t_SearchGroup_set__groupValue(t_SearchGroup *self, PyObject *arg, void *data);
          static PyObject *t_SearchGroup_get__sortValues(t_SearchGroup *self, void *data);
          static int t_SearchGroup_set__sortValues(t_SearchGroup *self, PyObject *arg, void *data);

          static PyObject *t_SearchGroup_get__parameters_(t_SearchGroup *self, void *data);
          static PyGetSetDef t_SearchGroup__fields_[] = {
            DECLARE_GETSET_FIELD(t_SearchGroup, groupValue),
            DECLARE_GETSET_FIELD(t_SearchGroup, sortValues),
            DECLARE_GET_FIELD(t_SearchGroup, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_SearchGroup__methods_[] = {
            DECLARE_METHOD(t_SearchGroup, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, of_, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, equals, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_SearchGroup, merge, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_SearchGroup, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(SearchGroup, t_SearchGroup, ::java::lang::Object, SearchGroup, t_SearchGroup_init_, 0, 0, t_SearchGroup__fields_, 0, 0);
          PyObject *t_SearchGroup::wrap_Object(const SearchGroup& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearchGroup::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearchGroup *self = (t_SearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_SearchGroup::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_SearchGroup::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_SearchGroup *self = (t_SearchGroup *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_SearchGroup::install(PyObject *module)
          {
            installType(&PY_TYPE(SearchGroup), module, "SearchGroup", 0);
          }

          void t_SearchGroup::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(SearchGroup).tp_dict, "class_", make_descriptor(SearchGroup::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SearchGroup).tp_dict, "wrapfn_", make_descriptor(t_SearchGroup::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SearchGroup).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_SearchGroup_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, SearchGroup::initializeClass, 1)))
              return NULL;
            return t_SearchGroup::wrap_Object(SearchGroup(((t_SearchGroup *) arg)->object.this$));
          }
          static PyObject *t_SearchGroup_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, SearchGroup::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_SearchGroup_of_(t_SearchGroup *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }

          static int t_SearchGroup_init_(t_SearchGroup *self, PyObject *args, PyObject *kwds)
          {
            SearchGroup object((jobject) NULL);

            INT_CALL(object = SearchGroup());
            self->object = object;

            return 0;
          }

          static PyObject *t_SearchGroup_equals(t_SearchGroup *self, PyObject *args)
          {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
              OBJ_CALL(result = self->object.equals(a0));
              Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(SearchGroup), (PyObject *) self, "equals", args, 2);
          }

          static PyObject *t_SearchGroup_hashCode(t_SearchGroup *self, PyObject *args)
          {
            jint result;

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.hashCode());
              return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(SearchGroup), (PyObject *) self, "hashCode", args, 2);
          }

          static PyObject *t_SearchGroup_merge(PyTypeObject *type, PyObject *args)
          {
            ::java::util::List a0((jobject) NULL);
            PyTypeObject **p0;
            jint a1;
            jint a2;
            ::org::apache::lucene::search::Sort a3((jobject) NULL);
            ::java::util::Collection result((jobject) NULL);

            if (!parseArgs(args, "KIIk", ::java::util::List::initializeClass, ::org::apache::lucene::search::Sort::initializeClass, &a0, &p0, ::java::util::t_List::parameters_, &a1, &a2, &a3))
            {
              OBJ_CALL(result = ::org::apache::lucene::search::grouping::SearchGroup::merge(a0, a1, a2, a3));
              return ::java::util::t_Collection::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "merge", args);
            return NULL;
          }

          static PyObject *t_SearchGroup_toString(t_SearchGroup *self, PyObject *args)
          {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
              OBJ_CALL(result = self->object.toString());
              return j2p(result);
            }

            return callSuper(&PY_TYPE(SearchGroup), (PyObject *) self, "toString", args, 2);
          }
          static PyObject *t_SearchGroup_get__parameters_(t_SearchGroup *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }

          static PyObject *t_SearchGroup_get__groupValue(t_SearchGroup *self, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object._get_groupValue());
            return ::java::lang::t_Object::wrap_Object(value);
          }
          static int t_SearchGroup_set__groupValue(t_SearchGroup *self, PyObject *arg, void *data)
          {
            ::java::lang::Object value((jobject) NULL);
            if (!parseArg(arg, "o", &value))
            {
              INT_CALL(self->object._set_groupValue(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "groupValue", arg);
            return -1;
          }

          static PyObject *t_SearchGroup_get__sortValues(t_SearchGroup *self, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            OBJ_CALL(value = self->object._get_sortValues());
            return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
          }
          static int t_SearchGroup_set__sortValues(t_SearchGroup *self, PyObject *arg, void *data)
          {
            JArray< ::java::lang::Object > value((jobject) NULL);
            if (!parseArg(arg, "[o", &value))
            {
              INT_CALL(self->object._set_sortValues(value));
              return 0;
            }
            PyErr_SetArgsError((PyObject *) self, "sortValues", arg);
            return -1;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/search/FieldComparator$ByteComparator.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/search/FieldComparator.h"
#include "org/apache/lucene/index/AtomicReaderContext.h"
#include "java/lang/Class.h"
#include "java/lang/Byte.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {

        ::java::lang::Class *FieldComparator$ByteComparator::class$ = NULL;
        jmethodID *FieldComparator$ByteComparator::mids$ = NULL;
        bool FieldComparator$ByteComparator::live$ = false;

        jclass FieldComparator$ByteComparator::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/search/FieldComparator$ByteComparator");

            mids$ = new jmethodID[max_mid];
            mids$[mid_compare_d8d154b9] = env->getMethodID(cls, "compare", "(II)I");
            mids$[mid_compareBottom_39c7bd23] = env->getMethodID(cls, "compareBottom", "(I)I");
            mids$[mid_compareTop_39c7bd23] = env->getMethodID(cls, "compareTop", "(I)I");
            mids$[mid_copy_d8d154a6] = env->getMethodID(cls, "copy", "(II)V");
            mids$[mid_setBottom_39c7bd3c] = env->getMethodID(cls, "setBottom", "(I)V");
            mids$[mid_setNextReader_6329aed7] = env->getMethodID(cls, "setNextReader", "(Lorg/apache/lucene/index/AtomicReaderContext;)Lorg/apache/lucene/search/FieldComparator;");
            mids$[mid_setTopValue_c2b89a85] = env->getMethodID(cls, "setTopValue", "(Ljava/lang/Byte;)V");
            mids$[mid_value_b801bfbe] = env->getMethodID(cls, "value", "(I)Ljava/lang/Byte;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint FieldComparator$ByteComparator::compare(jint a0, jint a1) const
        {
          return env->callIntMethod(this$, mids$[mid_compare_d8d154b9], a0, a1);
        }

        jint FieldComparator$ByteComparator::compareBottom(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareBottom_39c7bd23], a0);
        }

        jint FieldComparator$ByteComparator::compareTop(jint a0) const
        {
          return env->callIntMethod(this$, mids$[mid_compareTop_39c7bd23], a0);
        }

        void FieldComparator$ByteComparator::copy(jint a0, jint a1) const
        {
          env->callVoidMethod(this$, mids$[mid_copy_d8d154a6], a0, a1);
        }

        void FieldComparator$ByteComparator::setBottom(jint a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setBottom_39c7bd3c], a0);
        }

        ::org::apache::lucene::search::FieldComparator FieldComparator$ByteComparator::setNextReader(const ::org::apache::lucene::index::AtomicReaderContext & a0) const
        {
          return ::org::apache::lucene::search::FieldComparator(env->callObjectMethod(this$, mids$[mid_setNextReader_6329aed7], a0.this$));
        }

        void FieldComparator$ByteComparator::setTopValue(const ::java::lang::Byte & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_setTopValue_c2b89a85], a0.this$);
        }

        ::java::lang::Byte FieldComparator$ByteComparator::value(jint a0) const
        {
          return ::java::lang::Byte(env->callObjectMethod(this$, mids$[mid_value_b801bfbe], a0));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace search {
        static PyObject *t_FieldComparator$ByteComparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ByteComparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FieldComparator$ByteComparator_of_(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_compare(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_compareBottom(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_compareTop(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_copy(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_setBottom(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_setNextReader(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_setTopValue(t_FieldComparator$ByteComparator *self, PyObject *args);
        static PyObject *t_FieldComparator$ByteComparator_value(t_FieldComparator$ByteComparator *self, PyObject *args);
        static int t_FieldComparator$ByteComparator_set__bottom(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ByteComparator_set__nextReader(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data);
        static int t_FieldComparator$ByteComparator_set__topValue(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data);
        static PyObject *t_FieldComparator$ByteComparator_get__parameters_(t_FieldComparator$ByteComparator *self, void *data);
        static PyGetSetDef t_FieldComparator$ByteComparator__fields_[] = {
          DECLARE_SET_FIELD(t_FieldComparator$ByteComparator, bottom),
          DECLARE_SET_FIELD(t_FieldComparator$ByteComparator, nextReader),
          DECLARE_SET_FIELD(t_FieldComparator$ByteComparator, topValue),
          DECLARE_GET_FIELD(t_FieldComparator$ByteComparator, parameters_),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_FieldComparator$ByteComparator__methods_[] = {
          DECLARE_METHOD(t_FieldComparator$ByteComparator, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, of_, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, compare, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, compareBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, compareTop, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, copy, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, setBottom, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, setNextReader, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, setTopValue, METH_VARARGS),
          DECLARE_METHOD(t_FieldComparator$ByteComparator, value, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FieldComparator$ByteComparator, t_FieldComparator$ByteComparator, ::org::apache::lucene::search::FieldComparator$NumericComparator, FieldComparator$ByteComparator, abstract_init, 0, 0, t_FieldComparator$ByteComparator__fields_, 0, 0);
        PyObject *t_FieldComparator$ByteComparator::wrap_Object(const FieldComparator$ByteComparator& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ByteComparator::wrap_Object(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ByteComparator *self = (t_FieldComparator$ByteComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        PyObject *t_FieldComparator$ByteComparator::wrap_jobject(const jobject& object, PyTypeObject *p0)
        {
          PyObject *obj = t_FieldComparator$ByteComparator::wrap_jobject(object);
          if (obj != NULL && obj != Py_None)
          {
            t_FieldComparator$ByteComparator *self = (t_FieldComparator$ByteComparator *) obj;
            self->parameters[0] = p0;
          }
          return obj;
        }

        void t_FieldComparator$ByteComparator::install(PyObject *module)
        {
          installType(&PY_TYPE(FieldComparator$ByteComparator), module, "FieldComparator$ByteComparator", 0);
        }

        void t_FieldComparator$ByteComparator::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(FieldComparator$ByteComparator).tp_dict, "class_", make_descriptor(FieldComparator$ByteComparator::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ByteComparator).tp_dict, "wrapfn_", make_descriptor(t_FieldComparator$ByteComparator::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(FieldComparator$ByteComparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FieldComparator$ByteComparator_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, FieldComparator$ByteComparator::initializeClass, 1)))
            return NULL;
          return t_FieldComparator$ByteComparator::wrap_Object(FieldComparator$ByteComparator(((t_FieldComparator$ByteComparator *) arg)->object.this$));
        }
        static PyObject *t_FieldComparator$ByteComparator_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, FieldComparator$ByteComparator::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_FieldComparator$ByteComparator_of_(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          if (!parseArg(args, "T", 1, &(self->parameters)))
            Py_RETURN_SELF;
          return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_FieldComparator$ByteComparator_compare(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;
          jint result;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(result = self->object.compare(a0, a1));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "compare", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_compareBottom(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareBottom(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "compareBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_compareTop(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint result;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.compareTop(a0));
            return PyInt_FromLong((long) result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "compareTop", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_copy(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          jint a1;

          if (!parseArgs(args, "II", &a0, &a1))
          {
            OBJ_CALL(self->object.copy(a0, a1));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "copy", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_setBottom(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(self->object.setBottom(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "setBottom", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_setNextReader(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          ::org::apache::lucene::index::AtomicReaderContext a0((jobject) NULL);
          ::org::apache::lucene::search::FieldComparator result((jobject) NULL);

          if (!parseArgs(args, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &a0))
          {
            OBJ_CALL(result = self->object.setNextReader(a0));
            return ::org::apache::lucene::search::t_FieldComparator::wrap_Object(result, &::java::lang::PY_TYPE(Byte));
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "setNextReader", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_setTopValue(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          ::java::lang::Byte a0((jobject) NULL);

          if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Byte), &a0))
          {
            OBJ_CALL(self->object.setTopValue(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "setTopValue", args, 2);
        }

        static PyObject *t_FieldComparator$ByteComparator_value(t_FieldComparator$ByteComparator *self, PyObject *args)
        {
          jint a0;
          ::java::lang::Byte result((jobject) NULL);

          if (!parseArgs(args, "I", &a0))
          {
            OBJ_CALL(result = self->object.value(a0));
            return ::java::lang::t_Byte::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(FieldComparator$ByteComparator), (PyObject *) self, "value", args, 2);
        }
        static PyObject *t_FieldComparator$ByteComparator_get__parameters_(t_FieldComparator$ByteComparator *self, void *data)
        {
          return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static int t_FieldComparator$ByteComparator_set__bottom(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data)
        {
          {
            jint value;
            if (!parseArg(arg, "I", &value))
            {
              INT_CALL(self->object.setBottom(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "bottom", arg);
          return -1;
        }

        static int t_FieldComparator$ByteComparator_set__nextReader(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data)
        {
          {
            ::org::apache::lucene::index::AtomicReaderContext value((jobject) NULL);
            if (!parseArg(arg, "k", ::org::apache::lucene::index::AtomicReaderContext::initializeClass, &value))
            {
              INT_CALL(self->object.setNextReader(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "nextReader", arg);
          return -1;
        }

        static int t_FieldComparator$ByteComparator_set__topValue(t_FieldComparator$ByteComparator *self, PyObject *arg, void *data)
        {
          {
            ::java::lang::Byte value((jobject) NULL);
            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(Byte), &value))
            {
              INT_CALL(self->object.setTopValue(value));
              return 0;
            }
          }
          PyErr_SetArgsError((PyObject *) self, "topValue", arg);
          return -1;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/fst/FSTEnum.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {

          ::java::lang::Class *FSTEnum::class$ = NULL;
          jmethodID *FSTEnum::mids$ = NULL;
          bool FSTEnum::live$ = false;

          jclass FSTEnum::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/lucene/util/fst/FSTEnum");

              mids$ = new jmethodID[max_mid];
              mids$[mid_grow_54c6a166] = env->getMethodID(cls, "grow", "()V");
              mids$[mid_doNext_54c6a166] = env->getMethodID(cls, "doNext", "()V");
              mids$[mid_getTargetLabel_54c6a179] = env->getMethodID(cls, "getTargetLabel", "()I");
              mids$[mid_getCurrentLabel_54c6a179] = env->getMethodID(cls, "getCurrentLabel", "()I");
              mids$[mid_setCurrentLabel_39c7bd3c] = env->getMethodID(cls, "setCurrentLabel", "(I)V");
              mids$[mid_doSeekCeil_54c6a166] = env->getMethodID(cls, "doSeekCeil", "()V");
              mids$[mid_doSeekFloor_54c6a166] = env->getMethodID(cls, "doSeekFloor", "()V");
              mids$[mid_doSeekExact_54c6a16a] = env->getMethodID(cls, "doSeekExact", "()Z");
              mids$[mid_rewindPrefix_54c6a166] = env->getMethodID(cls, "rewindPrefix", "()V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        namespace fst {
          static PyObject *t_FSTEnum_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTEnum_instance_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_FSTEnum_of_(t_FSTEnum *self, PyObject *args);
          static PyObject *t_FSTEnum_get__parameters_(t_FSTEnum *self, void *data);
          static PyGetSetDef t_FSTEnum__fields_[] = {
            DECLARE_GET_FIELD(t_FSTEnum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_FSTEnum__methods_[] = {
            DECLARE_METHOD(t_FSTEnum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTEnum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FSTEnum, of_, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(FSTEnum, t_FSTEnum, ::java::lang::Object, FSTEnum, abstract_init, 0, 0, t_FSTEnum__fields_, 0, 0);
          PyObject *t_FSTEnum::wrap_Object(const FSTEnum& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FSTEnum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FSTEnum *self = (t_FSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          PyObject *t_FSTEnum::wrap_jobject(const jobject& object, PyTypeObject *p0)
          {
            PyObject *obj = t_FSTEnum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
              t_FSTEnum *self = (t_FSTEnum *) obj;
              self->parameters[0] = p0;
            }
            return obj;
          }

          void t_FSTEnum::install(PyObject *module)
          {
            installType(&PY_TYPE(FSTEnum), module, "FSTEnum", 0);
          }

          void t_FSTEnum::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(FSTEnum).tp_dict, "class_", make_descriptor(FSTEnum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FSTEnum).tp_dict, "wrapfn_", make_descriptor(t_FSTEnum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FSTEnum).tp_dict, "boxfn_", make_descriptor(boxObject));
          }

          static PyObject *t_FSTEnum_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, FSTEnum::initializeClass, 1)))
              return NULL;
            return t_FSTEnum::wrap_Object(FSTEnum(((t_FSTEnum *) arg)->object.this$));
          }
          static PyObject *t_FSTEnum_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, FSTEnum::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static PyObject *t_FSTEnum_of_(t_FSTEnum *self, PyObject *args)
          {
            if (!parseArg(args, "T", 1, &(self->parameters)))
              Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
          }
          static PyObject *t_FSTEnum_get__parameters_(t_FSTEnum *self, void *data)
          {
            return typeParameters(self->parameters, sizeof(self->parameters));
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/pylucene/search/highlight/PythonFormatter.h"
#include "java/lang/Throwable.h"
#include "java/lang/String.h"
#include "org/apache/lucene/search/highlight/Formatter.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/search/highlight/TokenGroup.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {

          ::java::lang::Class *PythonFormatter::class$ = NULL;
          jmethodID *PythonFormatter::mids$ = NULL;
          bool PythonFormatter::live$ = false;

          jclass PythonFormatter::initializeClass(bool getOnly)
          {
            if (getOnly)
              return (jclass) (live$ ? class$->this$ : NULL);
            if (class$ == NULL)
            {
              jclass cls = (jclass) env->findClass("org/apache/pylucene/search/highlight/PythonFormatter");

              mids$ = new jmethodID[max_mid];
              mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
              mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
              mids$[mid_highlightTerm_8838cc58] = env->getMethodID(cls, "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;");
              mids$[mid_pythonDecRef_54c6a166] = env->getMethodID(cls, "pythonDecRef", "()V");
              mids$[mid_pythonExtension_54c6a17a] = env->getMethodID(cls, "pythonExtension", "()J");
              mids$[mid_pythonExtension_0ee6df2f] = env->getMethodID(cls, "pythonExtension", "(J)V");

              class$ = (::java::lang::Class *) new JObject(cls);
              live$ = true;
            }
            return (jclass) class$->this$;
          }

          PythonFormatter::PythonFormatter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

          void PythonFormatter::finalize() const
          {
            env->callVoidMethod(this$, mids$[mid_finalize_54c6a166]);
          }

          jlong PythonFormatter::pythonExtension() const
          {
            return env->callLongMethod(this$, mids$[mid_pythonExtension_54c6a17a]);
          }

          void PythonFormatter::pythonExtension(jlong a0) const
          {
            env->callVoidMethod(this$, mids$[mid_pythonExtension_0ee6df2f], a0);
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace pylucene {
      namespace search {
        namespace highlight {
          static PyObject *t_PythonFormatter_cast_(PyTypeObject *type, PyObject *arg);
          static PyObject *t_PythonFormatter_instance_(PyTypeObject *type, PyObject *arg);
          static int t_PythonFormatter_init_(t_PythonFormatter *self, PyObject *args, PyObject *kwds);
          static PyObject *t_PythonFormatter_finalize(t_PythonFormatter *self);
          static PyObject *t_PythonFormatter_pythonExtension(t_PythonFormatter *self, PyObject *args);
          static jobject JNICALL t_PythonFormatter_highlightTerm0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1);
          static void JNICALL t_PythonFormatter_pythonDecRef1(JNIEnv *jenv, jobject jobj);
          static PyObject *t_PythonFormatter_get__self(t_PythonFormatter *self, void *data);
          static PyGetSetDef t_PythonFormatter__fields_[] = {
            DECLARE_GET_FIELD(t_PythonFormatter, self),
            { NULL, NULL, NULL, NULL, NULL }
          };

          static PyMethodDef t_PythonFormatter__methods_[] = {
            DECLARE_METHOD(t_PythonFormatter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFormatter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PythonFormatter, finalize, METH_NOARGS),
            DECLARE_METHOD(t_PythonFormatter, pythonExtension, METH_VARARGS),
            { NULL, NULL, 0, NULL }
          };

          DECLARE_TYPE(PythonFormatter, t_PythonFormatter, ::java::lang::Object, PythonFormatter, t_PythonFormatter_init_, 0, 0, t_PythonFormatter__fields_, 0, 0);

          void t_PythonFormatter::install(PyObject *module)
          {
            installType(&PY_TYPE(PythonFormatter), module, "PythonFormatter", 1);
          }

          void t_PythonFormatter::initialize(PyObject *module)
          {
            PyDict_SetItemString(PY_TYPE(PythonFormatter).tp_dict, "class_", make_descriptor(PythonFormatter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PythonFormatter).tp_dict, "wrapfn_", make_descriptor(t_PythonFormatter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PythonFormatter).tp_dict, "boxfn_", make_descriptor(boxObject));
            jclass cls = env->getClass(PythonFormatter::initializeClass);
            JNINativeMethod methods[] = {
              { "highlightTerm", "(Ljava/lang/String;Lorg/apache/lucene/search/highlight/TokenGroup;)Ljava/lang/String;", (void *) t_PythonFormatter_highlightTerm0 },
              { "pythonDecRef", "()V", (void *) t_PythonFormatter_pythonDecRef1 },
            };
            env->registerNatives(cls, methods, 2);
          }

          static PyObject *t_PythonFormatter_cast_(PyTypeObject *type, PyObject *arg)
          {
            if (!(arg = castCheck(arg, PythonFormatter::initializeClass, 1)))
              return NULL;
            return t_PythonFormatter::wrap_Object(PythonFormatter(((t_PythonFormatter *) arg)->object.this$));
          }
          static PyObject *t_PythonFormatter_instance_(PyTypeObject *type, PyObject *arg)
          {
            if (!castCheck(arg, PythonFormatter::initializeClass, 0))
              Py_RETURN_FALSE;
            Py_RETURN_TRUE;
          }

          static int t_PythonFormatter_init_(t_PythonFormatter *self, PyObject *args, PyObject *kwds)
          {
            PythonFormatter object((jobject) NULL);

            INT_CALL(object = PythonFormatter());
            self->object = object;

            Py_INCREF((PyObject *) self);
            self->object.pythonExtension((jlong) (Py_intptr_t) (void *) self);

            return 0;
          }

          static PyObject *t_PythonFormatter_finalize(t_PythonFormatter *self)
          {
            OBJ_CALL(self->object.finalize());
            Py_RETURN_NONE;
          }

          static PyObject *t_PythonFormatter_pythonExtension(t_PythonFormatter *self, PyObject *args)
          {
            switch (PyTuple_GET_SIZE(args)) {
             case 0:
              {
                jlong result;
                OBJ_CALL(result = self->object.pythonExtension());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
              break;
             case 1:
              {
                jlong a0;

                if (!parseArgs(args, "J", &a0))
                {
                  OBJ_CALL(self->object.pythonExtension(a0));
                  Py_RETURN_NONE;
                }
              }
            }

            PyErr_SetArgsError((PyObject *) self, "pythonExtension", args);
            return NULL;
          }

          static jobject JNICALL t_PythonFormatter_highlightTerm0(JNIEnv *jenv, jobject jobj, jobject a0, jobject a1)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;
            PythonGIL gil(jenv);
            ::java::lang::String value((jobject) NULL);
            PyObject *o0 = env->fromJString((jstring) a0, 0);
            PyObject *o1 = ::org::apache::lucene::search::highlight::t_TokenGroup::wrap_Object(::org::apache::lucene::search::highlight::TokenGroup(a1));
            PyObject *result = PyObject_CallMethod(obj, "highlightTerm", "OO", o0, o1);
            Py_DECREF(o0);
            Py_DECREF(o1);
            if (!result)
              throwPythonError();
            else if (parseArg(result, "s", &value))
            {
              throwTypeError("highlightTerm", result);
              Py_DECREF(result);
            }
            else
            {
              jobj = jenv->NewLocalRef(value.this$);
              Py_DECREF(result);
              return jobj;
            }

            return (jobject) NULL;
          }

          static void JNICALL t_PythonFormatter_pythonDecRef1(JNIEnv *jenv, jobject jobj)
          {
            jlong ptr = jenv->CallLongMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_54c6a17a]);
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              jenv->CallVoidMethod(jobj, PythonFormatter::mids$[PythonFormatter::mid_pythonExtension_0ee6df2f], (jlong) 0);
              env->finalizeObject(jenv, obj);
            }
          }

          static PyObject *t_PythonFormatter_get__self(t_PythonFormatter *self, void *data)
          {
            jlong ptr;
            OBJ_CALL(ptr = self->object.pythonExtension());
            PyObject *obj = (PyObject *) (Py_intptr_t) ptr;

            if (obj != NULL)
            {
              Py_INCREF(obj);
              return obj;
            }
            else
              Py_RETURN_NONE;
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/queries/function/docvalues/FloatDocValues.h"
#include "java/lang/Object.h"
#include "java/lang/String.h"
#include "org/apache/lucene/queries/function/FunctionValues$ValueFiller.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/queries/function/ValueSource.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {

            ::java::lang::Class *FloatDocValues::class$ = NULL;
            jmethodID *FloatDocValues::mids$ = NULL;
            bool FloatDocValues::live$ = false;

            jclass FloatDocValues::initializeClass(bool getOnly)
            {
              if (getOnly)
                return (jclass) (live$ ? class$->this$ : NULL);
              if (class$ == NULL)
              {
                jclass cls = (jclass) env->findClass("org/apache/lucene/queries/function/docvalues/FloatDocValues");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_ca78fe7a] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/queries/function/ValueSource;)V");
                mids$[mid_byteVal_39c7bd28] = env->getMethodID(cls, "byteVal", "(I)B");
                mids$[mid_doubleVal_39c7bd2e] = env->getMethodID(cls, "doubleVal", "(I)D");
                mids$[mid_floatVal_39c7bd2c] = env->getMethodID(cls, "floatVal", "(I)F");
                mids$[mid_getValueFiller_7731f0bd] = env->getMethodID(cls, "getValueFiller", "()Lorg/apache/lucene/queries/function/FunctionValues$ValueFiller;");
                mids$[mid_intVal_39c7bd23] = env->getMethodID(cls, "intVal", "(I)I");
                mids$[mid_longVal_39c7bd20] = env->getMethodID(cls, "longVal", "(I)J");
                mids$[mid_objectVal_29be6a55] = env->getMethodID(cls, "objectVal", "(I)Ljava/lang/Object;");
                mids$[mid_shortVal_39c7bd39] = env->getMethodID(cls, "shortVal", "(I)S");
                mids$[mid_strVal_141401b3] = env->getMethodID(cls, "strVal", "(I)Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getMethodID(cls, "toString", "(I)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                live$ = true;
              }
              return (jclass) class$->this$;
            }

            FloatDocValues::FloatDocValues(const ::org::apache::lucene::queries::function::ValueSource & a0) : ::org::apache::lucene::queries::function::FunctionValues(env->newObject(initializeClass, &mids$, mid_init$_ca78fe7a, a0.this$)) {}

            jbyte FloatDocValues::byteVal(jint a0) const
            {
              return env->callByteMethod(this$, mids$[mid_byteVal_39c7bd28], a0);
            }

            jdouble FloatDocValues::doubleVal(jint a0) const
            {
              return env->callDoubleMethod(this$, mids$[mid_doubleVal_39c7bd2e], a0);
            }

            jfloat FloatDocValues::floatVal(jint a0) const
            {
              return env->callFloatMethod(this$, mids$[mid_floatVal_39c7bd2c], a0);
            }

            ::org::apache::lucene::queries::function::FunctionValues$ValueFiller FloatDocValues::getValueFiller() const
            {
              return ::org::apache::lucene::queries::function::FunctionValues$ValueFiller(env->callObjectMethod(this$, mids$[mid_getValueFiller_7731f0bd]));
            }

            jint FloatDocValues::intVal(jint a0) const
            {
              return env->callIntMethod(this$, mids$[mid_intVal_39c7bd23], a0);
            }

            jlong FloatDocValues::longVal(jint a0) const
            {
              return env->callLongMethod(this$, mids$[mid_longVal_39c7bd20], a0);
            }

            ::java::lang::Object FloatDocValues::objectVal(jint a0) const
            {
              return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_objectVal_29be6a55], a0));
            }

            jshort FloatDocValues::shortVal(jint a0) const
            {
              return env->callShortMethod(this$, mids$[mid_shortVal_39c7bd39], a0);
            }

            ::java::lang::String FloatDocValues::strVal(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_strVal_141401b3], a0));
            }

            ::java::lang::String FloatDocValues::toString(jint a0) const
            {
              return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_141401b3], a0));
            }
          }
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace queries {
        namespace function {
          namespace docvalues {
            static PyObject *t_FloatDocValues_cast_(PyTypeObject *type, PyObject *arg);
            static PyObject *t_FloatDocValues_instance_(PyTypeObject *type, PyObject *arg);
            static int t_FloatDocValues_init_(t_FloatDocValues *self, PyObject *args, PyObject *kwds);
            static PyObject *t_FloatDocValues_byteVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_doubleVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_floatVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_getValueFiller(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_intVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_longVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_objectVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_shortVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_strVal(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_toString(t_FloatDocValues *self, PyObject *args);
            static PyObject *t_FloatDocValues_get__valueFiller(t_FloatDocValues *self, void *data);
            static PyGetSetDef t_FloatDocValues__fields_[] = {
              DECLARE_GET_FIELD(t_FloatDocValues, valueFiller),
              { NULL, NULL, NULL, NULL, NULL }
            };

            static PyMethodDef t_FloatDocValues__methods_[] = {
              DECLARE_METHOD(t_FloatDocValues, cast_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatDocValues, instance_, METH_O | METH_CLASS),
              DECLARE_METHOD(t_FloatDocValues, byteVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, doubleVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, floatVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, getValueFiller, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, intVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, longVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, objectVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, shortVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, strVal, METH_VARARGS),
              DECLARE_METHOD(t_FloatDocValues, toString, METH_VARARGS),
              { NULL, NULL, 0, NULL }
            };

            DECLARE_TYPE(FloatDocValues, t_FloatDocValues, ::org::apache::lucene::queries::function::FunctionValues, FloatDocValues, t_FloatDocValues_init_, 0, 0, t_FloatDocValues__fields_, 0, 0);

            void t_FloatDocValues::install(PyObject *module)
            {
              installType(&PY_TYPE(FloatDocValues), module, "FloatDocValues", 0);
            }

            void t_FloatDocValues::initialize(PyObject *module)
            {
              PyDict_SetItemString(PY_TYPE(FloatDocValues).tp_dict, "class_", make_descriptor(FloatDocValues::initializeClass, 1));
              PyDict_SetItemString(PY_TYPE(FloatDocValues).tp_dict, "wrapfn_", make_descriptor(t_FloatDocValues::wrap_jobject));
              PyDict_SetItemString(PY_TYPE(FloatDocValues).tp_dict, "boxfn_", make_descriptor(boxObject));
            }

            static PyObject *t_FloatDocValues_cast_(PyTypeObject *type, PyObject *arg)
            {
              if (!(arg = castCheck(arg, FloatDocValues::initializeClass, 1)))
                return NULL;
              return t_FloatDocValues::wrap_Object(FloatDocValues(((t_FloatDocValues *) arg)->object.this$));
            }
            static PyObject *t_FloatDocValues_instance_(PyTypeObject *type, PyObject *arg)
            {
              if (!castCheck(arg, FloatDocValues::initializeClass, 0))
                Py_RETURN_FALSE;
              Py_RETURN_TRUE;
            }

            static int t_FloatDocValues_init_(t_FloatDocValues *self, PyObject *args, PyObject *kwds)
            {
              ::org::apache::lucene::queries::function::ValueSource a0((jobject) NULL);
              FloatDocValues object((jobject) NULL);

              if (!parseArgs(args, "k", ::org::apache::lucene::queries::function::ValueSource::initializeClass, &a0))
              {
                INT_CALL(object = FloatDocValues(a0));
                self->object = object;
              }
              else
              {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
              }

              return 0;
            }

            static PyObject *t_FloatDocValues_byteVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jbyte result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.byteVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "byteVal", args, 2);
            }

            static PyObject *t_FloatDocValues_doubleVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jdouble result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.doubleVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "doubleVal", args, 2);
            }

            static PyObject *t_FloatDocValues_floatVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jfloat result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.floatVal(a0));
                return PyFloat_FromDouble((double) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "floatVal", args, 2);
            }

            static PyObject *t_FloatDocValues_getValueFiller(t_FloatDocValues *self, PyObject *args)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller result((jobject) NULL);

              if (!parseArgs(args, ""))
              {
                OBJ_CALL(result = self->object.getValueFiller());
                return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "getValueFiller", args, 2);
            }

            static PyObject *t_FloatDocValues_intVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.intVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "intVal", args, 2);
            }

            static PyObject *t_FloatDocValues_longVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jlong result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.longVal(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "longVal", args, 2);
            }

            static PyObject *t_FloatDocValues_objectVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::Object result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.objectVal(a0));
                return ::java::lang::t_Object::wrap_Object(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "objectVal", args, 2);
            }

            static PyObject *t_FloatDocValues_shortVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              jshort result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.shortVal(a0));
                return PyInt_FromLong((long) result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "shortVal", args, 2);
            }

            static PyObject *t_FloatDocValues_strVal(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.strVal(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "strVal", args, 2);
            }

            static PyObject *t_FloatDocValues_toString(t_FloatDocValues *self, PyObject *args)
            {
              jint a0;
              ::java::lang::String result((jobject) NULL);

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = self->object.toString(a0));
                return j2p(result);
              }

              return callSuper(&PY_TYPE(FloatDocValues), (PyObject *) self, "toString", args, 2);
            }

            static PyObject *t_FloatDocValues_get__valueFiller(t_FloatDocValues *self, void *data)
            {
              ::org::apache::lucene::queries::function::FunctionValues$ValueFiller value((jobject) NULL);
              OBJ_CALL(value = self->object.getValueFiller());
              return ::org::apache::lucene::queries::function::t_FunctionValues$ValueFiller::wrap_Object(value);
            }
          }
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/util/BitUtil.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {

        ::java::lang::Class *BitUtil::class$ = NULL;
        jmethodID *BitUtil::mids$ = NULL;
        bool BitUtil::live$ = false;

        jclass BitUtil::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/util/BitUtil");

            mids$ = new jmethodID[max_mid];
            mids$[mid_bitCount_b2271698] = env->getStaticMethodID(cls, "bitCount", "(B)I");
            mids$[mid_bitList_b2271698] = env->getStaticMethodID(cls, "bitList", "(B)I");
            mids$[mid_nextHighestPowerOfTwo_0ee6df33] = env->getStaticMethodID(cls, "nextHighestPowerOfTwo", "(J)J");
            mids$[mid_nextHighestPowerOfTwo_39c7bd23] = env->getStaticMethodID(cls, "nextHighestPowerOfTwo", "(I)I");
            mids$[mid_pop_andnot_c347d95a] = env->getStaticMethodID(cls, "pop_andnot", "([J[JII)J");
            mids$[mid_pop_array_6ae021fb] = env->getStaticMethodID(cls, "pop_array", "([JII)J");
            mids$[mid_pop_intersect_c347d95a] = env->getStaticMethodID(cls, "pop_intersect", "([J[JII)J");
            mids$[mid_pop_union_c347d95a] = env->getStaticMethodID(cls, "pop_union", "([J[JII)J");
            mids$[mid_pop_xor_c347d95a] = env->getStaticMethodID(cls, "pop_xor", "([J[JII)J");
            mids$[mid_zigZagDecode_39c7bd23] = env->getStaticMethodID(cls, "zigZagDecode", "(I)I");
            mids$[mid_zigZagDecode_0ee6df33] = env->getStaticMethodID(cls, "zigZagDecode", "(J)J");
            mids$[mid_zigZagEncode_39c7bd23] = env->getStaticMethodID(cls, "zigZagEncode", "(I)I");
            mids$[mid_zigZagEncode_0ee6df33] = env->getStaticMethodID(cls, "zigZagEncode", "(J)J");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        jint BitUtil::bitCount(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bitCount_b2271698], a0);
        }

        jint BitUtil::bitList(jbyte a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_bitList_b2271698], a0);
        }

        jlong BitUtil::nextHighestPowerOfTwo(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_nextHighestPowerOfTwo_0ee6df33], a0);
        }

        jint BitUtil::nextHighestPowerOfTwo(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_nextHighestPowerOfTwo_39c7bd23], a0);
        }

        jlong BitUtil::pop_andnot(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_andnot_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_array(const JArray< jlong > & a0, jint a1, jint a2)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_array_6ae021fb], a0.this$, a1, a2);
        }

        jlong BitUtil::pop_intersect(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_intersect_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_union(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_union_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jlong BitUtil::pop_xor(const JArray< jlong > & a0, const JArray< jlong > & a1, jint a2, jint a3)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_pop_xor_c347d95a], a0.this$, a1.this$, a2, a3);
        }

        jint BitUtil::zigZagDecode(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_zigZagDecode_39c7bd23], a0);
        }

        jlong BitUtil::zigZagDecode(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_zigZagDecode_0ee6df33], a0);
        }

        jint BitUtil::zigZagEncode(jint a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticIntMethod(cls, mids$[mid_zigZagEncode_39c7bd23], a0);
        }

        jlong BitUtil::zigZagEncode(jlong a0)
        {
          jclass cls = env->getClass(initializeClass);
          return env->callStaticLongMethod(cls, mids$[mid_zigZagEncode_0ee6df33], a0);
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace util {
        static PyObject *t_BitUtil_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_bitCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_bitList(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BitUtil_nextHighestPowerOfTwo(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_andnot(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_array(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_intersect(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_union(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_pop_xor(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_zigZagDecode(PyTypeObject *type, PyObject *args);
        static PyObject *t_BitUtil_zigZagEncode(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_BitUtil__methods_[] = {
          DECLARE_METHOD(t_BitUtil, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, bitCount, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, bitList, METH_O | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, nextHighestPowerOfTwo, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_andnot, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_array, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_intersect, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_union, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, pop_xor, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, zigZagDecode, METH_VARARGS | METH_CLASS),
          DECLARE_METHOD(t_BitUtil, zigZagEncode, METH_VARARGS | METH_CLASS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BitUtil, t_BitUtil, ::java::lang::Object, BitUtil, abstract_init, 0, 0, 0, 0, 0);

        void t_BitUtil::install(PyObject *module)
        {
          installType(&PY_TYPE(BitUtil), module, "BitUtil", 0);
        }

        void t_BitUtil::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(BitUtil).tp_dict, "class_", make_descriptor(BitUtil::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(BitUtil).tp_dict, "wrapfn_", make_descriptor(t_BitUtil::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(BitUtil).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BitUtil_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, BitUtil::initializeClass, 1)))
            return NULL;
          return t_BitUtil::wrap_Object(BitUtil(((t_BitUtil *) arg)->object.this$));
        }
        static PyObject *t_BitUtil_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, BitUtil::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static PyObject *t_BitUtil_bitCount(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jint result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::bitCount(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bitCount", arg);
          return NULL;
        }

        static PyObject *t_BitUtil_bitList(PyTypeObject *type, PyObject *arg)
        {
          jbyte a0;
          jint result;

          if (!parseArg(arg, "B", &a0))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::bitList(a0));
            return PyInt_FromLong((long) result);
          }

          PyErr_SetArgsError(type, "bitList", arg);
          return NULL;
        }

        static PyObject *t_BitUtil_nextHighestPowerOfTwo(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::nextHighestPowerOfTwo(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::nextHighestPowerOfTwo(a0));
                return PyInt_FromLong((long) result);
              }
            }
          }

          PyErr_SetArgsError(type, "nextHighestPowerOfTwo", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_andnot(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_andnot(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_andnot", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_array(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          jint a1;
          jint a2;
          jlong result;

          if (!parseArgs(args, "[JII", &a0, &a1, &a2))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_array(a0, a1, a2));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_array", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_intersect(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_intersect(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_intersect", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_union(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_union(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_union", args);
          return NULL;
        }

        static PyObject *t_BitUtil_pop_xor(PyTypeObject *type, PyObject *args)
        {
          JArray< jlong > a0((jobject) NULL);
          JArray< jlong > a1((jobject) NULL);
          jint a2;
          jint a3;
          jlong result;

          if (!parseArgs(args, "[J[JII", &a0, &a1, &a2, &a3))
          {
            OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::pop_xor(a0, a1, a2, a3));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          PyErr_SetArgsError(type, "pop_xor", args);
          return NULL;
        }

        static PyObject *t_BitUtil_zigZagDecode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagDecode(a0));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagDecode(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "zigZagDecode", args);
          return NULL;
        }

        static PyObject *t_BitUtil_zigZagEncode(PyTypeObject *type, PyObject *args)
        {
          switch (PyTuple_GET_SIZE(args)) {
           case 1:
            {
              jint a0;
              jint result;

              if (!parseArgs(args, "I", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagEncode(a0));
                return PyInt_FromLong((long) result);
              }
            }
            {
              jlong a0;
              jlong result;

              if (!parseArgs(args, "J", &a0))
              {
                OBJ_CALL(result = ::org::apache::lucene::util::BitUtil::zigZagEncode(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
              }
            }
          }

          PyErr_SetArgsError(type, "zigZagEncode", args);
          return NULL;
        }
      }
    }
  }
}
#include <jni.h>
#include "JCCEnv.h"
#include "org/apache/lucene/store/CompoundFileDirectory.h"
#include "java/util/Collection.h"
#include "org/apache/lucene/store/IndexInput.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "org/apache/lucene/store/Directory.h"
#include "java/io/IOException.h"
#include "org/apache/lucene/store/IOContext.h"
#include "org/apache/lucene/store/IndexOutput.h"
#include "org/apache/lucene/store/Lock.h"
#include "JArray.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {

        ::java::lang::Class *CompoundFileDirectory::class$ = NULL;
        jmethodID *CompoundFileDirectory::mids$ = NULL;
        bool CompoundFileDirectory::live$ = false;

        jclass CompoundFileDirectory::initializeClass(bool getOnly)
        {
          if (getOnly)
            return (jclass) (live$ ? class$->this$ : NULL);
          if (class$ == NULL)
          {
            jclass cls = (jclass) env->findClass("org/apache/lucene/store/CompoundFileDirectory");

            mids$ = new jmethodID[max_mid];
            mids$[mid_init$_f1dc2b71] = env->getMethodID(cls, "<init>", "(Lorg/apache/lucene/store/Directory;Ljava/lang/String;Lorg/apache/lucene/store/IOContext;Z)V");
            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
            mids$[mid_createOutput_5ad5358d] = env->getMethodID(cls, "createOutput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexOutput;");
            mids$[mid_deleteFile_5fdc3f48] = env->getMethodID(cls, "deleteFile", "(Ljava/lang/String;)V");
            mids$[mid_fileExists_5fdc3f44] = env->getMethodID(cls, "fileExists", "(Ljava/lang/String;)Z");
            mids$[mid_fileLength_5fdc3f54] = env->getMethodID(cls, "fileLength", "(Ljava/lang/String;)J");
            mids$[mid_getDirectory_1f3934bb] = env->getMethodID(cls, "getDirectory", "()Lorg/apache/lucene/store/Directory;");
            mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
            mids$[mid_listAll_2e6d5245] = env->getMethodID(cls, "listAll", "()[Ljava/lang/String;");
            mids$[mid_makeLock_f26bb9a8] = env->getMethodID(cls, "makeLock", "(Ljava/lang/String;)Lorg/apache/lucene/store/Lock;");
            mids$[mid_openInput_3e1b5375] = env->getMethodID(cls, "openInput", "(Ljava/lang/String;Lorg/apache/lucene/store/IOContext;)Lorg/apache/lucene/store/IndexInput;");
            mids$[mid_renameFile_4a264742] = env->getMethodID(cls, "renameFile", "(Ljava/lang/String;Ljava/lang/String;)V");
            mids$[mid_sync_9bfb370d] = env->getMethodID(cls, "sync", "(Ljava/util/Collection;)V");
            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

            class$ = (::java::lang::Class *) new JObject(cls);
            live$ = true;
          }
          return (jclass) class$->this$;
        }

        CompoundFileDirectory::CompoundFileDirectory(const ::org::apache::lucene::store::Directory & a0, const ::java::lang::String & a1, const ::org::apache::lucene::store::IOContext & a2, jboolean a3) : ::org::apache::lucene::store::BaseDirectory(env->newObject(initializeClass, &mids$, mid_init$_f1dc2b71, a0.this$, a1.this$, a2.this$, a3)) {}

        void CompoundFileDirectory::close() const
        {
          env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        ::org::apache::lucene::store::IndexOutput CompoundFileDirectory::createOutput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexOutput(env->callObjectMethod(this$, mids$[mid_createOutput_5ad5358d], a0.this$, a1.this$));
        }

        void CompoundFileDirectory::deleteFile(const ::java::lang::String & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_deleteFile_5fdc3f48], a0.this$);
        }

        jboolean CompoundFileDirectory::fileExists(const ::java::lang::String & a0) const
        {
          return env->callBooleanMethod(this$, mids$[mid_fileExists_5fdc3f44], a0.this$);
        }

        jlong CompoundFileDirectory::fileLength(const ::java::lang::String & a0) const
        {
          return env->callLongMethod(this$, mids$[mid_fileLength_5fdc3f54], a0.this$);
        }

        ::org::apache::lucene::store::Directory CompoundFileDirectory::getDirectory() const
        {
          return ::org::apache::lucene::store::Directory(env->callObjectMethod(this$, mids$[mid_getDirectory_1f3934bb]));
        }

        ::java::lang::String CompoundFileDirectory::getName() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        JArray< ::java::lang::String > CompoundFileDirectory::listAll() const
        {
          return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_listAll_2e6d5245]));
        }

        ::org::apache::lucene::store::Lock CompoundFileDirectory::makeLock(const ::java::lang::String & a0) const
        {
          return ::org::apache::lucene::store::Lock(env->callObjectMethod(this$, mids$[mid_makeLock_f26bb9a8], a0.this$));
        }

        ::org::apache::lucene::store::IndexInput CompoundFileDirectory::openInput(const ::java::lang::String & a0, const ::org::apache::lucene::store::IOContext & a1) const
        {
          return ::org::apache::lucene::store::IndexInput(env->callObjectMethod(this$, mids$[mid_openInput_3e1b5375], a0.this$, a1.this$));
        }

        void CompoundFileDirectory::renameFile(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
          env->callVoidMethod(this$, mids$[mid_renameFile_4a264742], a0.this$, a1.this$);
        }

        void CompoundFileDirectory::sync(const ::java::util::Collection & a0) const
        {
          env->callVoidMethod(this$, mids$[mid_sync_9bfb370d], a0.this$);
        }

        ::java::lang::String CompoundFileDirectory::toString() const
        {
          return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
      }
    }
  }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "org/apache/lucene/store/CompoundFileDirectory$FileEntry.h"

namespace org {
  namespace apache {
    namespace lucene {
      namespace store {
        static PyObject *t_CompoundFileDirectory_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CompoundFileDirectory_instance_(PyTypeObject *type, PyObject *arg);
        static int t_CompoundFileDirectory_init_(t_CompoundFileDirectory *self, PyObject *args, PyObject *kwds);
        static PyObject *t_CompoundFileDirectory_close(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_createOutput(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_deleteFile(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_fileExists(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_fileLength(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_getDirectory(t_CompoundFileDirectory *self);
        static PyObject *t_CompoundFileDirectory_getName(t_CompoundFileDirectory *self);
        static PyObject *t_CompoundFileDirectory_listAll(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_makeLock(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_openInput(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_renameFile(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_sync(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_toString(t_CompoundFileDirectory *self, PyObject *args);
        static PyObject *t_CompoundFileDirectory_get__directory(t_CompoundFileDirectory *self, void *data);
        static PyObject *t_CompoundFileDirectory_get__name(t_CompoundFileDirectory *self, void *data);
        static PyGetSetDef t_CompoundFileDirectory__fields_[] = {
          DECLARE_GET_FIELD(t_CompoundFileDirectory, directory),
          DECLARE_GET_FIELD(t_CompoundFileDirectory, name),
          { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_CompoundFileDirectory__methods_[] = {
          DECLARE_METHOD(t_CompoundFileDirectory, cast_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundFileDirectory, instance_, METH_O | METH_CLASS),
          DECLARE_METHOD(t_CompoundFileDirectory, close, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, createOutput, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, deleteFile, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, fileExists, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, fileLength, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, getDirectory, METH_NOARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, getName, METH_NOARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, listAll, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, makeLock, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, openInput, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, renameFile, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, sync, METH_VARARGS),
          DECLARE_METHOD(t_CompoundFileDirectory, toString, METH_VARARGS),
          { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CompoundFileDirectory, t_CompoundFileDirectory, ::org::apache::lucene::store::BaseDirectory, CompoundFileDirectory, t_CompoundFileDirectory_init_, 0, 0, t_CompoundFileDirectory__fields_, 0, 0);

        void t_CompoundFileDirectory::install(PyObject *module)
        {
          installType(&PY_TYPE(CompoundFileDirectory), module, "CompoundFileDirectory", 0);
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "FileEntry", make_descriptor(&PY_TYPE(CompoundFileDirectory$FileEntry)));
        }

        void t_CompoundFileDirectory::initialize(PyObject *module)
        {
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "class_", make_descriptor(CompoundFileDirectory::initializeClass, 1));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "wrapfn_", make_descriptor(t_CompoundFileDirectory::wrap_jobject));
          PyDict_SetItemString(PY_TYPE(CompoundFileDirectory).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CompoundFileDirectory_cast_(PyTypeObject *type, PyObject *arg)
        {
          if (!(arg = castCheck(arg, CompoundFileDirectory::initializeClass, 1)))
            return NULL;
          return t_CompoundFileDirectory::wrap_Object(CompoundFileDirectory(((t_CompoundFileDirectory *) arg)->object.this$));
        }
        static PyObject *t_CompoundFileDirectory_instance_(PyTypeObject *type, PyObject *arg)
        {
          if (!castCheck(arg, CompoundFileDirectory::initializeClass, 0))
            Py_RETURN_FALSE;
          Py_RETURN_TRUE;
        }

        static int t_CompoundFileDirectory_init_(t_CompoundFileDirectory *self, PyObject *args, PyObject *kwds)
        {
          ::org::apache::lucene::store::Directory a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);
          ::org::apache::lucene::store::IOContext a2((jobject) NULL);
          jboolean a3;
          CompoundFileDirectory object((jobject) NULL);

          if (!parseArgs(args, "kskZ", ::org::apache::lucene::store::Directory::initializeClass, ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1, &a2, &a3))
          {
            INT_CALL(object = CompoundFileDirectory(a0, a1, a2, a3));
            self->object = object;
          }
          else
          {
            PyErr_SetArgsError((PyObject *) self, "__init__", args);
            return -1;
          }

          return 0;
        }

        static PyObject *t_CompoundFileDirectory_close(t_CompoundFileDirectory *self, PyObject *args)
        {

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_createOutput(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexOutput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.createOutput(a0, a1));
            return ::org::apache::lucene::store::t_IndexOutput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "createOutput", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_deleteFile(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(self->object.deleteFile(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "deleteFile", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_fileExists(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jboolean result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileExists(a0));
            Py_RETURN_BOOL(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "fileExists", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_fileLength(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          jlong result;

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.fileLength(a0));
            return PyLong_FromLongLong((PY_LONG_LONG) result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "fileLength", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_getDirectory(t_CompoundFileDirectory *self)
        {
          ::org::apache::lucene::store::Directory result((jobject) NULL);
          OBJ_CALL(result = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(result);
        }

        static PyObject *t_CompoundFileDirectory_getName(t_CompoundFileDirectory *self)
        {
          ::java::lang::String result((jobject) NULL);
          OBJ_CALL(result = self->object.getName());
          return j2p(result);
        }

        static PyObject *t_CompoundFileDirectory_listAll(t_CompoundFileDirectory *self, PyObject *args)
        {
          JArray< ::java::lang::String > result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.listAll());
            return JArray<jstring>(result.this$).wrap();
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "listAll", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_makeLock(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::Lock result((jobject) NULL);

          if (!parseArgs(args, "s", &a0))
          {
            OBJ_CALL(result = self->object.makeLock(a0));
            return ::org::apache::lucene::store::t_Lock::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "makeLock", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_openInput(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::org::apache::lucene::store::IOContext a1((jobject) NULL);
          ::org::apache::lucene::store::IndexInput result((jobject) NULL);

          if (!parseArgs(args, "sk", ::org::apache::lucene::store::IOContext::initializeClass, &a0, &a1))
          {
            OBJ_CALL(result = self->object.openInput(a0, a1));
            return ::org::apache::lucene::store::t_IndexInput::wrap_Object(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "openInput", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_renameFile(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String a0((jobject) NULL);
          ::java::lang::String a1((jobject) NULL);

          if (!parseArgs(args, "ss", &a0, &a1))
          {
            OBJ_CALL(self->object.renameFile(a0, a1));
            Py_RETURN_NONE;
          }

          PyErr_SetArgsError((PyObject *) self, "renameFile", args);
          return NULL;
        }

        static PyObject *t_CompoundFileDirectory_sync(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::util::Collection a0((jobject) NULL);
          PyTypeObject **p0;

          if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
          {
            OBJ_CALL(self->object.sync(a0));
            Py_RETURN_NONE;
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "sync", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_toString(t_CompoundFileDirectory *self, PyObject *args)
        {
          ::java::lang::String result((jobject) NULL);

          if (!parseArgs(args, ""))
          {
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
          }

          return callSuper(&PY_TYPE(CompoundFileDirectory), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_CompoundFileDirectory_get__directory(t_CompoundFileDirectory *self, void *data)
        {
          ::org::apache::lucene::store::Directory value((jobject) NULL);
          OBJ_CALL(value = self->object.getDirectory());
          return ::org::apache::lucene::store::t_Directory::wrap_Object(value);
        }

        static PyObject *t_CompoundFileDirectory_get__name(t_CompoundFileDirectory *self, void *data)
        {
          ::java::lang::String value((jobject) NULL);
          OBJ_CALL(value = self->object.getName());
          return j2p(value);
        }
      }
    }
  }
}
